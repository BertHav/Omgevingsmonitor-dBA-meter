
MJSGadget - dB meter.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   000000c0  08000000  08000000  00001000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0001f490  080000c0  080000c0  000010c0  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00001e40  0801f550  0801f550  00020550  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08021390  08021390  00023420  2**0
                  CONTENTS
  4 .ARM          00000008  08021390  08021390  00022390  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08021398  08021398  00023420  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08021398  08021398  00022398  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  7 .fini_array   00000004  0802139c  0802139c  0002239c  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  8 .data         00000420  20000000  080213a0  00023000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000034a0  20000420  080217c0  00023420  2**2
                  ALLOC
 10 ._user_heap_stack 00000500  200038c0  080217c0  000238c0  2**0
                  ALLOC
 11 .ARM.attributes 00000028  00000000  00000000  00023420  2**0
                  CONTENTS, READONLY
 12 .debug_info   0003172c  00000000  00000000  00023448  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00008fa6  00000000  00000000  00054b74  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 000027f0  00000000  00000000  0005db20  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_rnglists 00001d6a  00000000  00000000  00060310  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00022383  00000000  00000000  0006207a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0003f23a  00000000  00000000  000843fd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0009f39b  00000000  00000000  000c3637  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      000000b1  00000000  00000000  001629d2  2**0
                  CONTENTS, READONLY
 20 .debug_frame  0000a258  00000000  00000000  00162a84  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 21 .debug_line_str 0000006d  00000000  00000000  0016ccdc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 22 .debug_loc    0000257c  00000000  00000000  0016cd49  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 23 .debug_ranges 00000088  00000000  00000000  0016f2c5  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

080000c0 <__do_global_dtors_aux>:
 80000c0:	b510      	push	{r4, lr}
 80000c2:	4c06      	ldr	r4, [pc, #24]	@ (80000dc <__do_global_dtors_aux+0x1c>)
 80000c4:	7823      	ldrb	r3, [r4, #0]
 80000c6:	2b00      	cmp	r3, #0
 80000c8:	d107      	bne.n	80000da <__do_global_dtors_aux+0x1a>
 80000ca:	4b05      	ldr	r3, [pc, #20]	@ (80000e0 <__do_global_dtors_aux+0x20>)
 80000cc:	2b00      	cmp	r3, #0
 80000ce:	d002      	beq.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d0:	4804      	ldr	r0, [pc, #16]	@ (80000e4 <__do_global_dtors_aux+0x24>)
 80000d2:	e000      	b.n	80000d6 <__do_global_dtors_aux+0x16>
 80000d4:	bf00      	nop
 80000d6:	2301      	movs	r3, #1
 80000d8:	7023      	strb	r3, [r4, #0]
 80000da:	bd10      	pop	{r4, pc}
 80000dc:	20000420 	.word	0x20000420
 80000e0:	00000000 	.word	0x00000000
 80000e4:	0801f538 	.word	0x0801f538

080000e8 <frame_dummy>:
 80000e8:	4b04      	ldr	r3, [pc, #16]	@ (80000fc <frame_dummy+0x14>)
 80000ea:	b510      	push	{r4, lr}
 80000ec:	2b00      	cmp	r3, #0
 80000ee:	d003      	beq.n	80000f8 <frame_dummy+0x10>
 80000f0:	4903      	ldr	r1, [pc, #12]	@ (8000100 <frame_dummy+0x18>)
 80000f2:	4804      	ldr	r0, [pc, #16]	@ (8000104 <frame_dummy+0x1c>)
 80000f4:	e000      	b.n	80000f8 <frame_dummy+0x10>
 80000f6:	bf00      	nop
 80000f8:	bd10      	pop	{r4, pc}
 80000fa:	46c0      	nop			@ (mov r8, r8)
 80000fc:	00000000 	.word	0x00000000
 8000100:	20000424 	.word	0x20000424
 8000104:	0801f538 	.word	0x0801f538

08000108 <arm_bitreversal_32>:
 8000108:	1c4b      	adds	r3, r1, #1
 800010a:	b470      	push	{r4, r5, r6}
 800010c:	1c11      	adds	r1, r2, #0
 800010e:	085b      	lsrs	r3, r3, #1

08000110 <arm_bitreversal_32_0>:
 8000110:	884a      	ldrh	r2, [r1, #2]
 8000112:	880e      	ldrh	r6, [r1, #0]
 8000114:	4402      	add	r2, r0
 8000116:	4406      	add	r6, r0
 8000118:	6815      	ldr	r5, [r2, #0]
 800011a:	6834      	ldr	r4, [r6, #0]
 800011c:	6035      	str	r5, [r6, #0]
 800011e:	6014      	str	r4, [r2, #0]
 8000120:	6855      	ldr	r5, [r2, #4]
 8000122:	6874      	ldr	r4, [r6, #4]
 8000124:	6075      	str	r5, [r6, #4]
 8000126:	6054      	str	r4, [r2, #4]
 8000128:	3104      	adds	r1, #4
 800012a:	3b01      	subs	r3, #1
 800012c:	d1f0      	bne.n	8000110 <arm_bitreversal_32_0>
 800012e:	bc70      	pop	{r4, r5, r6}
 8000130:	4770      	bx	lr

08000132 <arm_bitreversal_16>:
 8000132:	1c4b      	adds	r3, r1, #1
 8000134:	b470      	push	{r4, r5, r6}
 8000136:	1c11      	adds	r1, r2, #0
 8000138:	085b      	lsrs	r3, r3, #1

0800013a <arm_bitreversal_16_0>:
 800013a:	884a      	ldrh	r2, [r1, #2]
 800013c:	880e      	ldrh	r6, [r1, #0]
 800013e:	0852      	lsrs	r2, r2, #1
 8000140:	0876      	lsrs	r6, r6, #1
 8000142:	4402      	add	r2, r0
 8000144:	4406      	add	r6, r0
 8000146:	6815      	ldr	r5, [r2, #0]
 8000148:	6834      	ldr	r4, [r6, #0]
 800014a:	6035      	str	r5, [r6, #0]
 800014c:	6014      	str	r4, [r2, #0]
 800014e:	3104      	adds	r1, #4
 8000150:	3b01      	subs	r3, #1
 8000152:	d1f2      	bne.n	800013a <arm_bitreversal_16_0>
 8000154:	bc70      	pop	{r4, r5, r6}
 8000156:	4770      	bx	lr

08000158 <strcmp>:
 8000158:	7802      	ldrb	r2, [r0, #0]
 800015a:	780b      	ldrb	r3, [r1, #0]
 800015c:	2a00      	cmp	r2, #0
 800015e:	d003      	beq.n	8000168 <strcmp+0x10>
 8000160:	3001      	adds	r0, #1
 8000162:	3101      	adds	r1, #1
 8000164:	429a      	cmp	r2, r3
 8000166:	d0f7      	beq.n	8000158 <strcmp>
 8000168:	1ad0      	subs	r0, r2, r3
 800016a:	4770      	bx	lr

0800016c <strlen>:
 800016c:	2300      	movs	r3, #0
 800016e:	5cc2      	ldrb	r2, [r0, r3]
 8000170:	3301      	adds	r3, #1
 8000172:	2a00      	cmp	r2, #0
 8000174:	d1fb      	bne.n	800016e <strlen+0x2>
 8000176:	1e58      	subs	r0, r3, #1
 8000178:	4770      	bx	lr
	...

0800017c <__gnu_thumb1_case_uqi>:
 800017c:	b402      	push	{r1}
 800017e:	4671      	mov	r1, lr
 8000180:	0849      	lsrs	r1, r1, #1
 8000182:	0049      	lsls	r1, r1, #1
 8000184:	5c09      	ldrb	r1, [r1, r0]
 8000186:	0049      	lsls	r1, r1, #1
 8000188:	448e      	add	lr, r1
 800018a:	bc02      	pop	{r1}
 800018c:	4770      	bx	lr
 800018e:	46c0      	nop			@ (mov r8, r8)

08000190 <__gnu_thumb1_case_shi>:
 8000190:	b403      	push	{r0, r1}
 8000192:	4671      	mov	r1, lr
 8000194:	0849      	lsrs	r1, r1, #1
 8000196:	0040      	lsls	r0, r0, #1
 8000198:	0049      	lsls	r1, r1, #1
 800019a:	5e09      	ldrsh	r1, [r1, r0]
 800019c:	0049      	lsls	r1, r1, #1
 800019e:	448e      	add	lr, r1
 80001a0:	bc03      	pop	{r0, r1}
 80001a2:	4770      	bx	lr

080001a4 <__udivsi3>:
 80001a4:	2200      	movs	r2, #0
 80001a6:	0843      	lsrs	r3, r0, #1
 80001a8:	428b      	cmp	r3, r1
 80001aa:	d374      	bcc.n	8000296 <__udivsi3+0xf2>
 80001ac:	0903      	lsrs	r3, r0, #4
 80001ae:	428b      	cmp	r3, r1
 80001b0:	d35f      	bcc.n	8000272 <__udivsi3+0xce>
 80001b2:	0a03      	lsrs	r3, r0, #8
 80001b4:	428b      	cmp	r3, r1
 80001b6:	d344      	bcc.n	8000242 <__udivsi3+0x9e>
 80001b8:	0b03      	lsrs	r3, r0, #12
 80001ba:	428b      	cmp	r3, r1
 80001bc:	d328      	bcc.n	8000210 <__udivsi3+0x6c>
 80001be:	0c03      	lsrs	r3, r0, #16
 80001c0:	428b      	cmp	r3, r1
 80001c2:	d30d      	bcc.n	80001e0 <__udivsi3+0x3c>
 80001c4:	22ff      	movs	r2, #255	@ 0xff
 80001c6:	0209      	lsls	r1, r1, #8
 80001c8:	ba12      	rev	r2, r2
 80001ca:	0c03      	lsrs	r3, r0, #16
 80001cc:	428b      	cmp	r3, r1
 80001ce:	d302      	bcc.n	80001d6 <__udivsi3+0x32>
 80001d0:	1212      	asrs	r2, r2, #8
 80001d2:	0209      	lsls	r1, r1, #8
 80001d4:	d065      	beq.n	80002a2 <__udivsi3+0xfe>
 80001d6:	0b03      	lsrs	r3, r0, #12
 80001d8:	428b      	cmp	r3, r1
 80001da:	d319      	bcc.n	8000210 <__udivsi3+0x6c>
 80001dc:	e000      	b.n	80001e0 <__udivsi3+0x3c>
 80001de:	0a09      	lsrs	r1, r1, #8
 80001e0:	0bc3      	lsrs	r3, r0, #15
 80001e2:	428b      	cmp	r3, r1
 80001e4:	d301      	bcc.n	80001ea <__udivsi3+0x46>
 80001e6:	03cb      	lsls	r3, r1, #15
 80001e8:	1ac0      	subs	r0, r0, r3
 80001ea:	4152      	adcs	r2, r2
 80001ec:	0b83      	lsrs	r3, r0, #14
 80001ee:	428b      	cmp	r3, r1
 80001f0:	d301      	bcc.n	80001f6 <__udivsi3+0x52>
 80001f2:	038b      	lsls	r3, r1, #14
 80001f4:	1ac0      	subs	r0, r0, r3
 80001f6:	4152      	adcs	r2, r2
 80001f8:	0b43      	lsrs	r3, r0, #13
 80001fa:	428b      	cmp	r3, r1
 80001fc:	d301      	bcc.n	8000202 <__udivsi3+0x5e>
 80001fe:	034b      	lsls	r3, r1, #13
 8000200:	1ac0      	subs	r0, r0, r3
 8000202:	4152      	adcs	r2, r2
 8000204:	0b03      	lsrs	r3, r0, #12
 8000206:	428b      	cmp	r3, r1
 8000208:	d301      	bcc.n	800020e <__udivsi3+0x6a>
 800020a:	030b      	lsls	r3, r1, #12
 800020c:	1ac0      	subs	r0, r0, r3
 800020e:	4152      	adcs	r2, r2
 8000210:	0ac3      	lsrs	r3, r0, #11
 8000212:	428b      	cmp	r3, r1
 8000214:	d301      	bcc.n	800021a <__udivsi3+0x76>
 8000216:	02cb      	lsls	r3, r1, #11
 8000218:	1ac0      	subs	r0, r0, r3
 800021a:	4152      	adcs	r2, r2
 800021c:	0a83      	lsrs	r3, r0, #10
 800021e:	428b      	cmp	r3, r1
 8000220:	d301      	bcc.n	8000226 <__udivsi3+0x82>
 8000222:	028b      	lsls	r3, r1, #10
 8000224:	1ac0      	subs	r0, r0, r3
 8000226:	4152      	adcs	r2, r2
 8000228:	0a43      	lsrs	r3, r0, #9
 800022a:	428b      	cmp	r3, r1
 800022c:	d301      	bcc.n	8000232 <__udivsi3+0x8e>
 800022e:	024b      	lsls	r3, r1, #9
 8000230:	1ac0      	subs	r0, r0, r3
 8000232:	4152      	adcs	r2, r2
 8000234:	0a03      	lsrs	r3, r0, #8
 8000236:	428b      	cmp	r3, r1
 8000238:	d301      	bcc.n	800023e <__udivsi3+0x9a>
 800023a:	020b      	lsls	r3, r1, #8
 800023c:	1ac0      	subs	r0, r0, r3
 800023e:	4152      	adcs	r2, r2
 8000240:	d2cd      	bcs.n	80001de <__udivsi3+0x3a>
 8000242:	09c3      	lsrs	r3, r0, #7
 8000244:	428b      	cmp	r3, r1
 8000246:	d301      	bcc.n	800024c <__udivsi3+0xa8>
 8000248:	01cb      	lsls	r3, r1, #7
 800024a:	1ac0      	subs	r0, r0, r3
 800024c:	4152      	adcs	r2, r2
 800024e:	0983      	lsrs	r3, r0, #6
 8000250:	428b      	cmp	r3, r1
 8000252:	d301      	bcc.n	8000258 <__udivsi3+0xb4>
 8000254:	018b      	lsls	r3, r1, #6
 8000256:	1ac0      	subs	r0, r0, r3
 8000258:	4152      	adcs	r2, r2
 800025a:	0943      	lsrs	r3, r0, #5
 800025c:	428b      	cmp	r3, r1
 800025e:	d301      	bcc.n	8000264 <__udivsi3+0xc0>
 8000260:	014b      	lsls	r3, r1, #5
 8000262:	1ac0      	subs	r0, r0, r3
 8000264:	4152      	adcs	r2, r2
 8000266:	0903      	lsrs	r3, r0, #4
 8000268:	428b      	cmp	r3, r1
 800026a:	d301      	bcc.n	8000270 <__udivsi3+0xcc>
 800026c:	010b      	lsls	r3, r1, #4
 800026e:	1ac0      	subs	r0, r0, r3
 8000270:	4152      	adcs	r2, r2
 8000272:	08c3      	lsrs	r3, r0, #3
 8000274:	428b      	cmp	r3, r1
 8000276:	d301      	bcc.n	800027c <__udivsi3+0xd8>
 8000278:	00cb      	lsls	r3, r1, #3
 800027a:	1ac0      	subs	r0, r0, r3
 800027c:	4152      	adcs	r2, r2
 800027e:	0883      	lsrs	r3, r0, #2
 8000280:	428b      	cmp	r3, r1
 8000282:	d301      	bcc.n	8000288 <__udivsi3+0xe4>
 8000284:	008b      	lsls	r3, r1, #2
 8000286:	1ac0      	subs	r0, r0, r3
 8000288:	4152      	adcs	r2, r2
 800028a:	0843      	lsrs	r3, r0, #1
 800028c:	428b      	cmp	r3, r1
 800028e:	d301      	bcc.n	8000294 <__udivsi3+0xf0>
 8000290:	004b      	lsls	r3, r1, #1
 8000292:	1ac0      	subs	r0, r0, r3
 8000294:	4152      	adcs	r2, r2
 8000296:	1a41      	subs	r1, r0, r1
 8000298:	d200      	bcs.n	800029c <__udivsi3+0xf8>
 800029a:	4601      	mov	r1, r0
 800029c:	4152      	adcs	r2, r2
 800029e:	4610      	mov	r0, r2
 80002a0:	4770      	bx	lr
 80002a2:	e7ff      	b.n	80002a4 <__udivsi3+0x100>
 80002a4:	b501      	push	{r0, lr}
 80002a6:	2000      	movs	r0, #0
 80002a8:	f000 f8f0 	bl	800048c <__aeabi_idiv0>
 80002ac:	bd02      	pop	{r1, pc}
 80002ae:	46c0      	nop			@ (mov r8, r8)

080002b0 <__aeabi_uidivmod>:
 80002b0:	2900      	cmp	r1, #0
 80002b2:	d0f7      	beq.n	80002a4 <__udivsi3+0x100>
 80002b4:	e776      	b.n	80001a4 <__udivsi3>
 80002b6:	4770      	bx	lr

080002b8 <__divsi3>:
 80002b8:	4603      	mov	r3, r0
 80002ba:	430b      	orrs	r3, r1
 80002bc:	d47f      	bmi.n	80003be <__divsi3+0x106>
 80002be:	2200      	movs	r2, #0
 80002c0:	0843      	lsrs	r3, r0, #1
 80002c2:	428b      	cmp	r3, r1
 80002c4:	d374      	bcc.n	80003b0 <__divsi3+0xf8>
 80002c6:	0903      	lsrs	r3, r0, #4
 80002c8:	428b      	cmp	r3, r1
 80002ca:	d35f      	bcc.n	800038c <__divsi3+0xd4>
 80002cc:	0a03      	lsrs	r3, r0, #8
 80002ce:	428b      	cmp	r3, r1
 80002d0:	d344      	bcc.n	800035c <__divsi3+0xa4>
 80002d2:	0b03      	lsrs	r3, r0, #12
 80002d4:	428b      	cmp	r3, r1
 80002d6:	d328      	bcc.n	800032a <__divsi3+0x72>
 80002d8:	0c03      	lsrs	r3, r0, #16
 80002da:	428b      	cmp	r3, r1
 80002dc:	d30d      	bcc.n	80002fa <__divsi3+0x42>
 80002de:	22ff      	movs	r2, #255	@ 0xff
 80002e0:	0209      	lsls	r1, r1, #8
 80002e2:	ba12      	rev	r2, r2
 80002e4:	0c03      	lsrs	r3, r0, #16
 80002e6:	428b      	cmp	r3, r1
 80002e8:	d302      	bcc.n	80002f0 <__divsi3+0x38>
 80002ea:	1212      	asrs	r2, r2, #8
 80002ec:	0209      	lsls	r1, r1, #8
 80002ee:	d065      	beq.n	80003bc <__divsi3+0x104>
 80002f0:	0b03      	lsrs	r3, r0, #12
 80002f2:	428b      	cmp	r3, r1
 80002f4:	d319      	bcc.n	800032a <__divsi3+0x72>
 80002f6:	e000      	b.n	80002fa <__divsi3+0x42>
 80002f8:	0a09      	lsrs	r1, r1, #8
 80002fa:	0bc3      	lsrs	r3, r0, #15
 80002fc:	428b      	cmp	r3, r1
 80002fe:	d301      	bcc.n	8000304 <__divsi3+0x4c>
 8000300:	03cb      	lsls	r3, r1, #15
 8000302:	1ac0      	subs	r0, r0, r3
 8000304:	4152      	adcs	r2, r2
 8000306:	0b83      	lsrs	r3, r0, #14
 8000308:	428b      	cmp	r3, r1
 800030a:	d301      	bcc.n	8000310 <__divsi3+0x58>
 800030c:	038b      	lsls	r3, r1, #14
 800030e:	1ac0      	subs	r0, r0, r3
 8000310:	4152      	adcs	r2, r2
 8000312:	0b43      	lsrs	r3, r0, #13
 8000314:	428b      	cmp	r3, r1
 8000316:	d301      	bcc.n	800031c <__divsi3+0x64>
 8000318:	034b      	lsls	r3, r1, #13
 800031a:	1ac0      	subs	r0, r0, r3
 800031c:	4152      	adcs	r2, r2
 800031e:	0b03      	lsrs	r3, r0, #12
 8000320:	428b      	cmp	r3, r1
 8000322:	d301      	bcc.n	8000328 <__divsi3+0x70>
 8000324:	030b      	lsls	r3, r1, #12
 8000326:	1ac0      	subs	r0, r0, r3
 8000328:	4152      	adcs	r2, r2
 800032a:	0ac3      	lsrs	r3, r0, #11
 800032c:	428b      	cmp	r3, r1
 800032e:	d301      	bcc.n	8000334 <__divsi3+0x7c>
 8000330:	02cb      	lsls	r3, r1, #11
 8000332:	1ac0      	subs	r0, r0, r3
 8000334:	4152      	adcs	r2, r2
 8000336:	0a83      	lsrs	r3, r0, #10
 8000338:	428b      	cmp	r3, r1
 800033a:	d301      	bcc.n	8000340 <__divsi3+0x88>
 800033c:	028b      	lsls	r3, r1, #10
 800033e:	1ac0      	subs	r0, r0, r3
 8000340:	4152      	adcs	r2, r2
 8000342:	0a43      	lsrs	r3, r0, #9
 8000344:	428b      	cmp	r3, r1
 8000346:	d301      	bcc.n	800034c <__divsi3+0x94>
 8000348:	024b      	lsls	r3, r1, #9
 800034a:	1ac0      	subs	r0, r0, r3
 800034c:	4152      	adcs	r2, r2
 800034e:	0a03      	lsrs	r3, r0, #8
 8000350:	428b      	cmp	r3, r1
 8000352:	d301      	bcc.n	8000358 <__divsi3+0xa0>
 8000354:	020b      	lsls	r3, r1, #8
 8000356:	1ac0      	subs	r0, r0, r3
 8000358:	4152      	adcs	r2, r2
 800035a:	d2cd      	bcs.n	80002f8 <__divsi3+0x40>
 800035c:	09c3      	lsrs	r3, r0, #7
 800035e:	428b      	cmp	r3, r1
 8000360:	d301      	bcc.n	8000366 <__divsi3+0xae>
 8000362:	01cb      	lsls	r3, r1, #7
 8000364:	1ac0      	subs	r0, r0, r3
 8000366:	4152      	adcs	r2, r2
 8000368:	0983      	lsrs	r3, r0, #6
 800036a:	428b      	cmp	r3, r1
 800036c:	d301      	bcc.n	8000372 <__divsi3+0xba>
 800036e:	018b      	lsls	r3, r1, #6
 8000370:	1ac0      	subs	r0, r0, r3
 8000372:	4152      	adcs	r2, r2
 8000374:	0943      	lsrs	r3, r0, #5
 8000376:	428b      	cmp	r3, r1
 8000378:	d301      	bcc.n	800037e <__divsi3+0xc6>
 800037a:	014b      	lsls	r3, r1, #5
 800037c:	1ac0      	subs	r0, r0, r3
 800037e:	4152      	adcs	r2, r2
 8000380:	0903      	lsrs	r3, r0, #4
 8000382:	428b      	cmp	r3, r1
 8000384:	d301      	bcc.n	800038a <__divsi3+0xd2>
 8000386:	010b      	lsls	r3, r1, #4
 8000388:	1ac0      	subs	r0, r0, r3
 800038a:	4152      	adcs	r2, r2
 800038c:	08c3      	lsrs	r3, r0, #3
 800038e:	428b      	cmp	r3, r1
 8000390:	d301      	bcc.n	8000396 <__divsi3+0xde>
 8000392:	00cb      	lsls	r3, r1, #3
 8000394:	1ac0      	subs	r0, r0, r3
 8000396:	4152      	adcs	r2, r2
 8000398:	0883      	lsrs	r3, r0, #2
 800039a:	428b      	cmp	r3, r1
 800039c:	d301      	bcc.n	80003a2 <__divsi3+0xea>
 800039e:	008b      	lsls	r3, r1, #2
 80003a0:	1ac0      	subs	r0, r0, r3
 80003a2:	4152      	adcs	r2, r2
 80003a4:	0843      	lsrs	r3, r0, #1
 80003a6:	428b      	cmp	r3, r1
 80003a8:	d301      	bcc.n	80003ae <__divsi3+0xf6>
 80003aa:	004b      	lsls	r3, r1, #1
 80003ac:	1ac0      	subs	r0, r0, r3
 80003ae:	4152      	adcs	r2, r2
 80003b0:	1a41      	subs	r1, r0, r1
 80003b2:	d200      	bcs.n	80003b6 <__divsi3+0xfe>
 80003b4:	4601      	mov	r1, r0
 80003b6:	4152      	adcs	r2, r2
 80003b8:	4610      	mov	r0, r2
 80003ba:	4770      	bx	lr
 80003bc:	e05d      	b.n	800047a <__divsi3+0x1c2>
 80003be:	0fca      	lsrs	r2, r1, #31
 80003c0:	d000      	beq.n	80003c4 <__divsi3+0x10c>
 80003c2:	4249      	negs	r1, r1
 80003c4:	1003      	asrs	r3, r0, #32
 80003c6:	d300      	bcc.n	80003ca <__divsi3+0x112>
 80003c8:	4240      	negs	r0, r0
 80003ca:	4053      	eors	r3, r2
 80003cc:	2200      	movs	r2, #0
 80003ce:	469c      	mov	ip, r3
 80003d0:	0903      	lsrs	r3, r0, #4
 80003d2:	428b      	cmp	r3, r1
 80003d4:	d32d      	bcc.n	8000432 <__divsi3+0x17a>
 80003d6:	0a03      	lsrs	r3, r0, #8
 80003d8:	428b      	cmp	r3, r1
 80003da:	d312      	bcc.n	8000402 <__divsi3+0x14a>
 80003dc:	22fc      	movs	r2, #252	@ 0xfc
 80003de:	0189      	lsls	r1, r1, #6
 80003e0:	ba12      	rev	r2, r2
 80003e2:	0a03      	lsrs	r3, r0, #8
 80003e4:	428b      	cmp	r3, r1
 80003e6:	d30c      	bcc.n	8000402 <__divsi3+0x14a>
 80003e8:	0189      	lsls	r1, r1, #6
 80003ea:	1192      	asrs	r2, r2, #6
 80003ec:	428b      	cmp	r3, r1
 80003ee:	d308      	bcc.n	8000402 <__divsi3+0x14a>
 80003f0:	0189      	lsls	r1, r1, #6
 80003f2:	1192      	asrs	r2, r2, #6
 80003f4:	428b      	cmp	r3, r1
 80003f6:	d304      	bcc.n	8000402 <__divsi3+0x14a>
 80003f8:	0189      	lsls	r1, r1, #6
 80003fa:	d03a      	beq.n	8000472 <__divsi3+0x1ba>
 80003fc:	1192      	asrs	r2, r2, #6
 80003fe:	e000      	b.n	8000402 <__divsi3+0x14a>
 8000400:	0989      	lsrs	r1, r1, #6
 8000402:	09c3      	lsrs	r3, r0, #7
 8000404:	428b      	cmp	r3, r1
 8000406:	d301      	bcc.n	800040c <__divsi3+0x154>
 8000408:	01cb      	lsls	r3, r1, #7
 800040a:	1ac0      	subs	r0, r0, r3
 800040c:	4152      	adcs	r2, r2
 800040e:	0983      	lsrs	r3, r0, #6
 8000410:	428b      	cmp	r3, r1
 8000412:	d301      	bcc.n	8000418 <__divsi3+0x160>
 8000414:	018b      	lsls	r3, r1, #6
 8000416:	1ac0      	subs	r0, r0, r3
 8000418:	4152      	adcs	r2, r2
 800041a:	0943      	lsrs	r3, r0, #5
 800041c:	428b      	cmp	r3, r1
 800041e:	d301      	bcc.n	8000424 <__divsi3+0x16c>
 8000420:	014b      	lsls	r3, r1, #5
 8000422:	1ac0      	subs	r0, r0, r3
 8000424:	4152      	adcs	r2, r2
 8000426:	0903      	lsrs	r3, r0, #4
 8000428:	428b      	cmp	r3, r1
 800042a:	d301      	bcc.n	8000430 <__divsi3+0x178>
 800042c:	010b      	lsls	r3, r1, #4
 800042e:	1ac0      	subs	r0, r0, r3
 8000430:	4152      	adcs	r2, r2
 8000432:	08c3      	lsrs	r3, r0, #3
 8000434:	428b      	cmp	r3, r1
 8000436:	d301      	bcc.n	800043c <__divsi3+0x184>
 8000438:	00cb      	lsls	r3, r1, #3
 800043a:	1ac0      	subs	r0, r0, r3
 800043c:	4152      	adcs	r2, r2
 800043e:	0883      	lsrs	r3, r0, #2
 8000440:	428b      	cmp	r3, r1
 8000442:	d301      	bcc.n	8000448 <__divsi3+0x190>
 8000444:	008b      	lsls	r3, r1, #2
 8000446:	1ac0      	subs	r0, r0, r3
 8000448:	4152      	adcs	r2, r2
 800044a:	d2d9      	bcs.n	8000400 <__divsi3+0x148>
 800044c:	0843      	lsrs	r3, r0, #1
 800044e:	428b      	cmp	r3, r1
 8000450:	d301      	bcc.n	8000456 <__divsi3+0x19e>
 8000452:	004b      	lsls	r3, r1, #1
 8000454:	1ac0      	subs	r0, r0, r3
 8000456:	4152      	adcs	r2, r2
 8000458:	1a41      	subs	r1, r0, r1
 800045a:	d200      	bcs.n	800045e <__divsi3+0x1a6>
 800045c:	4601      	mov	r1, r0
 800045e:	4663      	mov	r3, ip
 8000460:	4152      	adcs	r2, r2
 8000462:	105b      	asrs	r3, r3, #1
 8000464:	4610      	mov	r0, r2
 8000466:	d301      	bcc.n	800046c <__divsi3+0x1b4>
 8000468:	4240      	negs	r0, r0
 800046a:	2b00      	cmp	r3, #0
 800046c:	d500      	bpl.n	8000470 <__divsi3+0x1b8>
 800046e:	4249      	negs	r1, r1
 8000470:	4770      	bx	lr
 8000472:	4663      	mov	r3, ip
 8000474:	105b      	asrs	r3, r3, #1
 8000476:	d300      	bcc.n	800047a <__divsi3+0x1c2>
 8000478:	4240      	negs	r0, r0
 800047a:	b501      	push	{r0, lr}
 800047c:	2000      	movs	r0, #0
 800047e:	f000 f805 	bl	800048c <__aeabi_idiv0>
 8000482:	bd02      	pop	{r1, pc}

08000484 <__aeabi_idivmod>:
 8000484:	2900      	cmp	r1, #0
 8000486:	d0f8      	beq.n	800047a <__divsi3+0x1c2>
 8000488:	e716      	b.n	80002b8 <__divsi3>
 800048a:	4770      	bx	lr

0800048c <__aeabi_idiv0>:
 800048c:	4770      	bx	lr
 800048e:	46c0      	nop			@ (mov r8, r8)

08000490 <__aeabi_cdrcmple>:
 8000490:	4684      	mov	ip, r0
 8000492:	0010      	movs	r0, r2
 8000494:	4662      	mov	r2, ip
 8000496:	468c      	mov	ip, r1
 8000498:	0019      	movs	r1, r3
 800049a:	4663      	mov	r3, ip
 800049c:	e000      	b.n	80004a0 <__aeabi_cdcmpeq>
 800049e:	46c0      	nop			@ (mov r8, r8)

080004a0 <__aeabi_cdcmpeq>:
 80004a0:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 80004a2:	f002 f859 	bl	8002558 <__ledf2>
 80004a6:	2800      	cmp	r0, #0
 80004a8:	d401      	bmi.n	80004ae <__aeabi_cdcmpeq+0xe>
 80004aa:	2100      	movs	r1, #0
 80004ac:	42c8      	cmn	r0, r1
 80004ae:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

080004b0 <__aeabi_dcmpeq>:
 80004b0:	b510      	push	{r4, lr}
 80004b2:	f001 ff99 	bl	80023e8 <__eqdf2>
 80004b6:	4240      	negs	r0, r0
 80004b8:	3001      	adds	r0, #1
 80004ba:	bd10      	pop	{r4, pc}

080004bc <__aeabi_dcmplt>:
 80004bc:	b510      	push	{r4, lr}
 80004be:	f002 f84b 	bl	8002558 <__ledf2>
 80004c2:	2800      	cmp	r0, #0
 80004c4:	db01      	blt.n	80004ca <__aeabi_dcmplt+0xe>
 80004c6:	2000      	movs	r0, #0
 80004c8:	bd10      	pop	{r4, pc}
 80004ca:	2001      	movs	r0, #1
 80004cc:	bd10      	pop	{r4, pc}
 80004ce:	46c0      	nop			@ (mov r8, r8)

080004d0 <__aeabi_dcmple>:
 80004d0:	b510      	push	{r4, lr}
 80004d2:	f002 f841 	bl	8002558 <__ledf2>
 80004d6:	2800      	cmp	r0, #0
 80004d8:	dd01      	ble.n	80004de <__aeabi_dcmple+0xe>
 80004da:	2000      	movs	r0, #0
 80004dc:	bd10      	pop	{r4, pc}
 80004de:	2001      	movs	r0, #1
 80004e0:	bd10      	pop	{r4, pc}
 80004e2:	46c0      	nop			@ (mov r8, r8)

080004e4 <__aeabi_dcmpgt>:
 80004e4:	b510      	push	{r4, lr}
 80004e6:	f001 ffc3 	bl	8002470 <__gedf2>
 80004ea:	2800      	cmp	r0, #0
 80004ec:	dc01      	bgt.n	80004f2 <__aeabi_dcmpgt+0xe>
 80004ee:	2000      	movs	r0, #0
 80004f0:	bd10      	pop	{r4, pc}
 80004f2:	2001      	movs	r0, #1
 80004f4:	bd10      	pop	{r4, pc}
 80004f6:	46c0      	nop			@ (mov r8, r8)

080004f8 <__aeabi_dcmpge>:
 80004f8:	b510      	push	{r4, lr}
 80004fa:	f001 ffb9 	bl	8002470 <__gedf2>
 80004fe:	2800      	cmp	r0, #0
 8000500:	da01      	bge.n	8000506 <__aeabi_dcmpge+0xe>
 8000502:	2000      	movs	r0, #0
 8000504:	bd10      	pop	{r4, pc}
 8000506:	2001      	movs	r0, #1
 8000508:	bd10      	pop	{r4, pc}
 800050a:	46c0      	nop			@ (mov r8, r8)

0800050c <__aeabi_cfrcmple>:
 800050c:	4684      	mov	ip, r0
 800050e:	0008      	movs	r0, r1
 8000510:	4661      	mov	r1, ip
 8000512:	e7ff      	b.n	8000514 <__aeabi_cfcmpeq>

08000514 <__aeabi_cfcmpeq>:
 8000514:	b51f      	push	{r0, r1, r2, r3, r4, lr}
 8000516:	f000 fcf5 	bl	8000f04 <__lesf2>
 800051a:	2800      	cmp	r0, #0
 800051c:	d401      	bmi.n	8000522 <__aeabi_cfcmpeq+0xe>
 800051e:	2100      	movs	r1, #0
 8000520:	42c8      	cmn	r0, r1
 8000522:	bd1f      	pop	{r0, r1, r2, r3, r4, pc}

08000524 <__aeabi_fcmpeq>:
 8000524:	b510      	push	{r4, lr}
 8000526:	f000 fc75 	bl	8000e14 <__eqsf2>
 800052a:	4240      	negs	r0, r0
 800052c:	3001      	adds	r0, #1
 800052e:	bd10      	pop	{r4, pc}

08000530 <__aeabi_fcmplt>:
 8000530:	b510      	push	{r4, lr}
 8000532:	f000 fce7 	bl	8000f04 <__lesf2>
 8000536:	2800      	cmp	r0, #0
 8000538:	db01      	blt.n	800053e <__aeabi_fcmplt+0xe>
 800053a:	2000      	movs	r0, #0
 800053c:	bd10      	pop	{r4, pc}
 800053e:	2001      	movs	r0, #1
 8000540:	bd10      	pop	{r4, pc}
 8000542:	46c0      	nop			@ (mov r8, r8)

08000544 <__aeabi_fcmple>:
 8000544:	b510      	push	{r4, lr}
 8000546:	f000 fcdd 	bl	8000f04 <__lesf2>
 800054a:	2800      	cmp	r0, #0
 800054c:	dd01      	ble.n	8000552 <__aeabi_fcmple+0xe>
 800054e:	2000      	movs	r0, #0
 8000550:	bd10      	pop	{r4, pc}
 8000552:	2001      	movs	r0, #1
 8000554:	bd10      	pop	{r4, pc}
 8000556:	46c0      	nop			@ (mov r8, r8)

08000558 <__aeabi_fcmpgt>:
 8000558:	b510      	push	{r4, lr}
 800055a:	f000 fc83 	bl	8000e64 <__gesf2>
 800055e:	2800      	cmp	r0, #0
 8000560:	dc01      	bgt.n	8000566 <__aeabi_fcmpgt+0xe>
 8000562:	2000      	movs	r0, #0
 8000564:	bd10      	pop	{r4, pc}
 8000566:	2001      	movs	r0, #1
 8000568:	bd10      	pop	{r4, pc}
 800056a:	46c0      	nop			@ (mov r8, r8)

0800056c <__aeabi_fcmpge>:
 800056c:	b510      	push	{r4, lr}
 800056e:	f000 fc79 	bl	8000e64 <__gesf2>
 8000572:	2800      	cmp	r0, #0
 8000574:	da01      	bge.n	800057a <__aeabi_fcmpge+0xe>
 8000576:	2000      	movs	r0, #0
 8000578:	bd10      	pop	{r4, pc}
 800057a:	2001      	movs	r0, #1
 800057c:	bd10      	pop	{r4, pc}
 800057e:	46c0      	nop			@ (mov r8, r8)

08000580 <__aeabi_uldivmod>:
 8000580:	2b00      	cmp	r3, #0
 8000582:	d111      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000584:	2a00      	cmp	r2, #0
 8000586:	d10f      	bne.n	80005a8 <__aeabi_uldivmod+0x28>
 8000588:	2900      	cmp	r1, #0
 800058a:	d100      	bne.n	800058e <__aeabi_uldivmod+0xe>
 800058c:	2800      	cmp	r0, #0
 800058e:	d002      	beq.n	8000596 <__aeabi_uldivmod+0x16>
 8000590:	2100      	movs	r1, #0
 8000592:	43c9      	mvns	r1, r1
 8000594:	0008      	movs	r0, r1
 8000596:	b407      	push	{r0, r1, r2}
 8000598:	4802      	ldr	r0, [pc, #8]	@ (80005a4 <__aeabi_uldivmod+0x24>)
 800059a:	a102      	add	r1, pc, #8	@ (adr r1, 80005a4 <__aeabi_uldivmod+0x24>)
 800059c:	1840      	adds	r0, r0, r1
 800059e:	9002      	str	r0, [sp, #8]
 80005a0:	bd03      	pop	{r0, r1, pc}
 80005a2:	46c0      	nop			@ (mov r8, r8)
 80005a4:	fffffee9 	.word	0xfffffee9
 80005a8:	b403      	push	{r0, r1}
 80005aa:	4668      	mov	r0, sp
 80005ac:	b501      	push	{r0, lr}
 80005ae:	9802      	ldr	r0, [sp, #8]
 80005b0:	f000 f8ba 	bl	8000728 <__udivmoddi4>
 80005b4:	9b01      	ldr	r3, [sp, #4]
 80005b6:	469e      	mov	lr, r3
 80005b8:	b002      	add	sp, #8
 80005ba:	bc0c      	pop	{r2, r3}
 80005bc:	4770      	bx	lr
 80005be:	46c0      	nop			@ (mov r8, r8)

080005c0 <__aeabi_lmul>:
 80005c0:	b5f0      	push	{r4, r5, r6, r7, lr}
 80005c2:	46ce      	mov	lr, r9
 80005c4:	4699      	mov	r9, r3
 80005c6:	0c03      	lsrs	r3, r0, #16
 80005c8:	469c      	mov	ip, r3
 80005ca:	0413      	lsls	r3, r2, #16
 80005cc:	4647      	mov	r7, r8
 80005ce:	0c1b      	lsrs	r3, r3, #16
 80005d0:	001d      	movs	r5, r3
 80005d2:	000e      	movs	r6, r1
 80005d4:	4661      	mov	r1, ip
 80005d6:	0404      	lsls	r4, r0, #16
 80005d8:	0c24      	lsrs	r4, r4, #16
 80005da:	b580      	push	{r7, lr}
 80005dc:	0007      	movs	r7, r0
 80005de:	0c10      	lsrs	r0, r2, #16
 80005e0:	434b      	muls	r3, r1
 80005e2:	4365      	muls	r5, r4
 80005e4:	4341      	muls	r1, r0
 80005e6:	4360      	muls	r0, r4
 80005e8:	0c2c      	lsrs	r4, r5, #16
 80005ea:	18c0      	adds	r0, r0, r3
 80005ec:	1824      	adds	r4, r4, r0
 80005ee:	468c      	mov	ip, r1
 80005f0:	42a3      	cmp	r3, r4
 80005f2:	d903      	bls.n	80005fc <__aeabi_lmul+0x3c>
 80005f4:	2380      	movs	r3, #128	@ 0x80
 80005f6:	025b      	lsls	r3, r3, #9
 80005f8:	4698      	mov	r8, r3
 80005fa:	44c4      	add	ip, r8
 80005fc:	4649      	mov	r1, r9
 80005fe:	4379      	muls	r1, r7
 8000600:	4356      	muls	r6, r2
 8000602:	0c23      	lsrs	r3, r4, #16
 8000604:	042d      	lsls	r5, r5, #16
 8000606:	0c2d      	lsrs	r5, r5, #16
 8000608:	1989      	adds	r1, r1, r6
 800060a:	4463      	add	r3, ip
 800060c:	0424      	lsls	r4, r4, #16
 800060e:	1960      	adds	r0, r4, r5
 8000610:	18c9      	adds	r1, r1, r3
 8000612:	bcc0      	pop	{r6, r7}
 8000614:	46b9      	mov	r9, r7
 8000616:	46b0      	mov	r8, r6
 8000618:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800061a:	46c0      	nop			@ (mov r8, r8)

0800061c <__aeabi_f2uiz>:
 800061c:	219e      	movs	r1, #158	@ 0x9e
 800061e:	b510      	push	{r4, lr}
 8000620:	05c9      	lsls	r1, r1, #23
 8000622:	1c04      	adds	r4, r0, #0
 8000624:	f7ff ffa2 	bl	800056c <__aeabi_fcmpge>
 8000628:	2800      	cmp	r0, #0
 800062a:	d103      	bne.n	8000634 <__aeabi_f2uiz+0x18>
 800062c:	1c20      	adds	r0, r4, #0
 800062e:	f000 ffaf 	bl	8001590 <__aeabi_f2iz>
 8000632:	bd10      	pop	{r4, pc}
 8000634:	219e      	movs	r1, #158	@ 0x9e
 8000636:	1c20      	adds	r0, r4, #0
 8000638:	05c9      	lsls	r1, r1, #23
 800063a:	f000 fdef 	bl	800121c <__aeabi_fsub>
 800063e:	f000 ffa7 	bl	8001590 <__aeabi_f2iz>
 8000642:	2380      	movs	r3, #128	@ 0x80
 8000644:	061b      	lsls	r3, r3, #24
 8000646:	469c      	mov	ip, r3
 8000648:	4460      	add	r0, ip
 800064a:	e7f2      	b.n	8000632 <__aeabi_f2uiz+0x16>

0800064c <__aeabi_d2uiz>:
 800064c:	b570      	push	{r4, r5, r6, lr}
 800064e:	2200      	movs	r2, #0
 8000650:	4b0c      	ldr	r3, [pc, #48]	@ (8000684 <__aeabi_d2uiz+0x38>)
 8000652:	0004      	movs	r4, r0
 8000654:	000d      	movs	r5, r1
 8000656:	f7ff ff4f 	bl	80004f8 <__aeabi_dcmpge>
 800065a:	2800      	cmp	r0, #0
 800065c:	d104      	bne.n	8000668 <__aeabi_d2uiz+0x1c>
 800065e:	0020      	movs	r0, r4
 8000660:	0029      	movs	r1, r5
 8000662:	f002 fe71 	bl	8003348 <__aeabi_d2iz>
 8000666:	bd70      	pop	{r4, r5, r6, pc}
 8000668:	4b06      	ldr	r3, [pc, #24]	@ (8000684 <__aeabi_d2uiz+0x38>)
 800066a:	2200      	movs	r2, #0
 800066c:	0020      	movs	r0, r4
 800066e:	0029      	movs	r1, r5
 8000670:	f002 faac 	bl	8002bcc <__aeabi_dsub>
 8000674:	f002 fe68 	bl	8003348 <__aeabi_d2iz>
 8000678:	2380      	movs	r3, #128	@ 0x80
 800067a:	061b      	lsls	r3, r3, #24
 800067c:	469c      	mov	ip, r3
 800067e:	4460      	add	r0, ip
 8000680:	e7f1      	b.n	8000666 <__aeabi_d2uiz+0x1a>
 8000682:	46c0      	nop			@ (mov r8, r8)
 8000684:	41e00000 	.word	0x41e00000

08000688 <__aeabi_d2lz>:
 8000688:	b570      	push	{r4, r5, r6, lr}
 800068a:	2200      	movs	r2, #0
 800068c:	2300      	movs	r3, #0
 800068e:	0004      	movs	r4, r0
 8000690:	000d      	movs	r5, r1
 8000692:	f7ff ff13 	bl	80004bc <__aeabi_dcmplt>
 8000696:	2800      	cmp	r0, #0
 8000698:	d108      	bne.n	80006ac <__aeabi_d2lz+0x24>
 800069a:	0020      	movs	r0, r4
 800069c:	0029      	movs	r1, r5
 800069e:	f000 f80f 	bl	80006c0 <__aeabi_d2ulz>
 80006a2:	0002      	movs	r2, r0
 80006a4:	000b      	movs	r3, r1
 80006a6:	0010      	movs	r0, r2
 80006a8:	0019      	movs	r1, r3
 80006aa:	bd70      	pop	{r4, r5, r6, pc}
 80006ac:	2380      	movs	r3, #128	@ 0x80
 80006ae:	061b      	lsls	r3, r3, #24
 80006b0:	18e9      	adds	r1, r5, r3
 80006b2:	0020      	movs	r0, r4
 80006b4:	f000 f804 	bl	80006c0 <__aeabi_d2ulz>
 80006b8:	2300      	movs	r3, #0
 80006ba:	4242      	negs	r2, r0
 80006bc:	418b      	sbcs	r3, r1
 80006be:	e7f2      	b.n	80006a6 <__aeabi_d2lz+0x1e>

080006c0 <__aeabi_d2ulz>:
 80006c0:	b570      	push	{r4, r5, r6, lr}
 80006c2:	2200      	movs	r2, #0
 80006c4:	4b0b      	ldr	r3, [pc, #44]	@ (80006f4 <__aeabi_d2ulz+0x34>)
 80006c6:	000d      	movs	r5, r1
 80006c8:	0004      	movs	r4, r0
 80006ca:	f001 ffb7 	bl	800263c <__aeabi_dmul>
 80006ce:	f7ff ffbd 	bl	800064c <__aeabi_d2uiz>
 80006d2:	0006      	movs	r6, r0
 80006d4:	f002 fea2 	bl	800341c <__aeabi_ui2d>
 80006d8:	2200      	movs	r2, #0
 80006da:	4b07      	ldr	r3, [pc, #28]	@ (80006f8 <__aeabi_d2ulz+0x38>)
 80006dc:	f001 ffae 	bl	800263c <__aeabi_dmul>
 80006e0:	0002      	movs	r2, r0
 80006e2:	000b      	movs	r3, r1
 80006e4:	0020      	movs	r0, r4
 80006e6:	0029      	movs	r1, r5
 80006e8:	f002 fa70 	bl	8002bcc <__aeabi_dsub>
 80006ec:	f7ff ffae 	bl	800064c <__aeabi_d2uiz>
 80006f0:	0031      	movs	r1, r6
 80006f2:	bd70      	pop	{r4, r5, r6, pc}
 80006f4:	3df00000 	.word	0x3df00000
 80006f8:	41f00000 	.word	0x41f00000

080006fc <__aeabi_l2d>:
 80006fc:	b570      	push	{r4, r5, r6, lr}
 80006fe:	0006      	movs	r6, r0
 8000700:	0008      	movs	r0, r1
 8000702:	f002 fe5d 	bl	80033c0 <__aeabi_i2d>
 8000706:	2200      	movs	r2, #0
 8000708:	4b06      	ldr	r3, [pc, #24]	@ (8000724 <__aeabi_l2d+0x28>)
 800070a:	f001 ff97 	bl	800263c <__aeabi_dmul>
 800070e:	000d      	movs	r5, r1
 8000710:	0004      	movs	r4, r0
 8000712:	0030      	movs	r0, r6
 8000714:	f002 fe82 	bl	800341c <__aeabi_ui2d>
 8000718:	002b      	movs	r3, r5
 800071a:	0022      	movs	r2, r4
 800071c:	f000 ffe6 	bl	80016ec <__aeabi_dadd>
 8000720:	bd70      	pop	{r4, r5, r6, pc}
 8000722:	46c0      	nop			@ (mov r8, r8)
 8000724:	41f00000 	.word	0x41f00000

08000728 <__udivmoddi4>:
 8000728:	b5f0      	push	{r4, r5, r6, r7, lr}
 800072a:	4657      	mov	r7, sl
 800072c:	464e      	mov	r6, r9
 800072e:	4645      	mov	r5, r8
 8000730:	46de      	mov	lr, fp
 8000732:	b5e0      	push	{r5, r6, r7, lr}
 8000734:	0004      	movs	r4, r0
 8000736:	000d      	movs	r5, r1
 8000738:	4692      	mov	sl, r2
 800073a:	4699      	mov	r9, r3
 800073c:	b083      	sub	sp, #12
 800073e:	428b      	cmp	r3, r1
 8000740:	d830      	bhi.n	80007a4 <__udivmoddi4+0x7c>
 8000742:	d02d      	beq.n	80007a0 <__udivmoddi4+0x78>
 8000744:	4649      	mov	r1, r9
 8000746:	4650      	mov	r0, sl
 8000748:	f002 ff76 	bl	8003638 <__clzdi2>
 800074c:	0029      	movs	r1, r5
 800074e:	0006      	movs	r6, r0
 8000750:	0020      	movs	r0, r4
 8000752:	f002 ff71 	bl	8003638 <__clzdi2>
 8000756:	1a33      	subs	r3, r6, r0
 8000758:	4698      	mov	r8, r3
 800075a:	3b20      	subs	r3, #32
 800075c:	d434      	bmi.n	80007c8 <__udivmoddi4+0xa0>
 800075e:	469b      	mov	fp, r3
 8000760:	4653      	mov	r3, sl
 8000762:	465a      	mov	r2, fp
 8000764:	4093      	lsls	r3, r2
 8000766:	4642      	mov	r2, r8
 8000768:	001f      	movs	r7, r3
 800076a:	4653      	mov	r3, sl
 800076c:	4093      	lsls	r3, r2
 800076e:	001e      	movs	r6, r3
 8000770:	42af      	cmp	r7, r5
 8000772:	d83b      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000774:	42af      	cmp	r7, r5
 8000776:	d100      	bne.n	800077a <__udivmoddi4+0x52>
 8000778:	e079      	b.n	800086e <__udivmoddi4+0x146>
 800077a:	465b      	mov	r3, fp
 800077c:	1ba4      	subs	r4, r4, r6
 800077e:	41bd      	sbcs	r5, r7
 8000780:	2b00      	cmp	r3, #0
 8000782:	da00      	bge.n	8000786 <__udivmoddi4+0x5e>
 8000784:	e076      	b.n	8000874 <__udivmoddi4+0x14c>
 8000786:	2200      	movs	r2, #0
 8000788:	2300      	movs	r3, #0
 800078a:	9200      	str	r2, [sp, #0]
 800078c:	9301      	str	r3, [sp, #4]
 800078e:	2301      	movs	r3, #1
 8000790:	465a      	mov	r2, fp
 8000792:	4093      	lsls	r3, r2
 8000794:	9301      	str	r3, [sp, #4]
 8000796:	2301      	movs	r3, #1
 8000798:	4642      	mov	r2, r8
 800079a:	4093      	lsls	r3, r2
 800079c:	9300      	str	r3, [sp, #0]
 800079e:	e029      	b.n	80007f4 <__udivmoddi4+0xcc>
 80007a0:	4282      	cmp	r2, r0
 80007a2:	d9cf      	bls.n	8000744 <__udivmoddi4+0x1c>
 80007a4:	2200      	movs	r2, #0
 80007a6:	2300      	movs	r3, #0
 80007a8:	9200      	str	r2, [sp, #0]
 80007aa:	9301      	str	r3, [sp, #4]
 80007ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 80007ae:	2b00      	cmp	r3, #0
 80007b0:	d001      	beq.n	80007b6 <__udivmoddi4+0x8e>
 80007b2:	601c      	str	r4, [r3, #0]
 80007b4:	605d      	str	r5, [r3, #4]
 80007b6:	9800      	ldr	r0, [sp, #0]
 80007b8:	9901      	ldr	r1, [sp, #4]
 80007ba:	b003      	add	sp, #12
 80007bc:	bcf0      	pop	{r4, r5, r6, r7}
 80007be:	46bb      	mov	fp, r7
 80007c0:	46b2      	mov	sl, r6
 80007c2:	46a9      	mov	r9, r5
 80007c4:	46a0      	mov	r8, r4
 80007c6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80007c8:	4642      	mov	r2, r8
 80007ca:	469b      	mov	fp, r3
 80007cc:	2320      	movs	r3, #32
 80007ce:	1a9b      	subs	r3, r3, r2
 80007d0:	4652      	mov	r2, sl
 80007d2:	40da      	lsrs	r2, r3
 80007d4:	4641      	mov	r1, r8
 80007d6:	0013      	movs	r3, r2
 80007d8:	464a      	mov	r2, r9
 80007da:	408a      	lsls	r2, r1
 80007dc:	0017      	movs	r7, r2
 80007de:	4642      	mov	r2, r8
 80007e0:	431f      	orrs	r7, r3
 80007e2:	4653      	mov	r3, sl
 80007e4:	4093      	lsls	r3, r2
 80007e6:	001e      	movs	r6, r3
 80007e8:	42af      	cmp	r7, r5
 80007ea:	d9c3      	bls.n	8000774 <__udivmoddi4+0x4c>
 80007ec:	2200      	movs	r2, #0
 80007ee:	2300      	movs	r3, #0
 80007f0:	9200      	str	r2, [sp, #0]
 80007f2:	9301      	str	r3, [sp, #4]
 80007f4:	4643      	mov	r3, r8
 80007f6:	2b00      	cmp	r3, #0
 80007f8:	d0d8      	beq.n	80007ac <__udivmoddi4+0x84>
 80007fa:	07fb      	lsls	r3, r7, #31
 80007fc:	0872      	lsrs	r2, r6, #1
 80007fe:	431a      	orrs	r2, r3
 8000800:	4646      	mov	r6, r8
 8000802:	087b      	lsrs	r3, r7, #1
 8000804:	e00e      	b.n	8000824 <__udivmoddi4+0xfc>
 8000806:	42ab      	cmp	r3, r5
 8000808:	d101      	bne.n	800080e <__udivmoddi4+0xe6>
 800080a:	42a2      	cmp	r2, r4
 800080c:	d80c      	bhi.n	8000828 <__udivmoddi4+0x100>
 800080e:	1aa4      	subs	r4, r4, r2
 8000810:	419d      	sbcs	r5, r3
 8000812:	2001      	movs	r0, #1
 8000814:	1924      	adds	r4, r4, r4
 8000816:	416d      	adcs	r5, r5
 8000818:	2100      	movs	r1, #0
 800081a:	3e01      	subs	r6, #1
 800081c:	1824      	adds	r4, r4, r0
 800081e:	414d      	adcs	r5, r1
 8000820:	2e00      	cmp	r6, #0
 8000822:	d006      	beq.n	8000832 <__udivmoddi4+0x10a>
 8000824:	42ab      	cmp	r3, r5
 8000826:	d9ee      	bls.n	8000806 <__udivmoddi4+0xde>
 8000828:	3e01      	subs	r6, #1
 800082a:	1924      	adds	r4, r4, r4
 800082c:	416d      	adcs	r5, r5
 800082e:	2e00      	cmp	r6, #0
 8000830:	d1f8      	bne.n	8000824 <__udivmoddi4+0xfc>
 8000832:	9800      	ldr	r0, [sp, #0]
 8000834:	9901      	ldr	r1, [sp, #4]
 8000836:	465b      	mov	r3, fp
 8000838:	1900      	adds	r0, r0, r4
 800083a:	4169      	adcs	r1, r5
 800083c:	2b00      	cmp	r3, #0
 800083e:	db24      	blt.n	800088a <__udivmoddi4+0x162>
 8000840:	002b      	movs	r3, r5
 8000842:	465a      	mov	r2, fp
 8000844:	4644      	mov	r4, r8
 8000846:	40d3      	lsrs	r3, r2
 8000848:	002a      	movs	r2, r5
 800084a:	40e2      	lsrs	r2, r4
 800084c:	001c      	movs	r4, r3
 800084e:	465b      	mov	r3, fp
 8000850:	0015      	movs	r5, r2
 8000852:	2b00      	cmp	r3, #0
 8000854:	db2a      	blt.n	80008ac <__udivmoddi4+0x184>
 8000856:	0026      	movs	r6, r4
 8000858:	409e      	lsls	r6, r3
 800085a:	0033      	movs	r3, r6
 800085c:	0026      	movs	r6, r4
 800085e:	4647      	mov	r7, r8
 8000860:	40be      	lsls	r6, r7
 8000862:	0032      	movs	r2, r6
 8000864:	1a80      	subs	r0, r0, r2
 8000866:	4199      	sbcs	r1, r3
 8000868:	9000      	str	r0, [sp, #0]
 800086a:	9101      	str	r1, [sp, #4]
 800086c:	e79e      	b.n	80007ac <__udivmoddi4+0x84>
 800086e:	42a3      	cmp	r3, r4
 8000870:	d8bc      	bhi.n	80007ec <__udivmoddi4+0xc4>
 8000872:	e782      	b.n	800077a <__udivmoddi4+0x52>
 8000874:	4642      	mov	r2, r8
 8000876:	2320      	movs	r3, #32
 8000878:	2100      	movs	r1, #0
 800087a:	1a9b      	subs	r3, r3, r2
 800087c:	2200      	movs	r2, #0
 800087e:	9100      	str	r1, [sp, #0]
 8000880:	9201      	str	r2, [sp, #4]
 8000882:	2201      	movs	r2, #1
 8000884:	40da      	lsrs	r2, r3
 8000886:	9201      	str	r2, [sp, #4]
 8000888:	e785      	b.n	8000796 <__udivmoddi4+0x6e>
 800088a:	4642      	mov	r2, r8
 800088c:	2320      	movs	r3, #32
 800088e:	1a9b      	subs	r3, r3, r2
 8000890:	002a      	movs	r2, r5
 8000892:	4646      	mov	r6, r8
 8000894:	409a      	lsls	r2, r3
 8000896:	0023      	movs	r3, r4
 8000898:	40f3      	lsrs	r3, r6
 800089a:	4644      	mov	r4, r8
 800089c:	4313      	orrs	r3, r2
 800089e:	002a      	movs	r2, r5
 80008a0:	40e2      	lsrs	r2, r4
 80008a2:	001c      	movs	r4, r3
 80008a4:	465b      	mov	r3, fp
 80008a6:	0015      	movs	r5, r2
 80008a8:	2b00      	cmp	r3, #0
 80008aa:	dad4      	bge.n	8000856 <__udivmoddi4+0x12e>
 80008ac:	4642      	mov	r2, r8
 80008ae:	002f      	movs	r7, r5
 80008b0:	2320      	movs	r3, #32
 80008b2:	0026      	movs	r6, r4
 80008b4:	4097      	lsls	r7, r2
 80008b6:	1a9b      	subs	r3, r3, r2
 80008b8:	40de      	lsrs	r6, r3
 80008ba:	003b      	movs	r3, r7
 80008bc:	4333      	orrs	r3, r6
 80008be:	e7cd      	b.n	800085c <__udivmoddi4+0x134>

080008c0 <__aeabi_fadd>:
 80008c0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80008c2:	46ce      	mov	lr, r9
 80008c4:	4647      	mov	r7, r8
 80008c6:	0243      	lsls	r3, r0, #9
 80008c8:	0a5a      	lsrs	r2, r3, #9
 80008ca:	024e      	lsls	r6, r1, #9
 80008cc:	0045      	lsls	r5, r0, #1
 80008ce:	0fc4      	lsrs	r4, r0, #31
 80008d0:	0048      	lsls	r0, r1, #1
 80008d2:	4691      	mov	r9, r2
 80008d4:	0e2d      	lsrs	r5, r5, #24
 80008d6:	0a72      	lsrs	r2, r6, #9
 80008d8:	0e00      	lsrs	r0, r0, #24
 80008da:	4694      	mov	ip, r2
 80008dc:	b580      	push	{r7, lr}
 80008de:	099b      	lsrs	r3, r3, #6
 80008e0:	0fc9      	lsrs	r1, r1, #31
 80008e2:	09b6      	lsrs	r6, r6, #6
 80008e4:	1a2a      	subs	r2, r5, r0
 80008e6:	428c      	cmp	r4, r1
 80008e8:	d021      	beq.n	800092e <__aeabi_fadd+0x6e>
 80008ea:	2a00      	cmp	r2, #0
 80008ec:	dd0d      	ble.n	800090a <__aeabi_fadd+0x4a>
 80008ee:	2800      	cmp	r0, #0
 80008f0:	d12d      	bne.n	800094e <__aeabi_fadd+0x8e>
 80008f2:	2e00      	cmp	r6, #0
 80008f4:	d100      	bne.n	80008f8 <__aeabi_fadd+0x38>
 80008f6:	e08d      	b.n	8000a14 <__aeabi_fadd+0x154>
 80008f8:	1e51      	subs	r1, r2, #1
 80008fa:	2a01      	cmp	r2, #1
 80008fc:	d100      	bne.n	8000900 <__aeabi_fadd+0x40>
 80008fe:	e11d      	b.n	8000b3c <__aeabi_fadd+0x27c>
 8000900:	2aff      	cmp	r2, #255	@ 0xff
 8000902:	d100      	bne.n	8000906 <__aeabi_fadd+0x46>
 8000904:	e0ab      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000906:	000a      	movs	r2, r1
 8000908:	e027      	b.n	800095a <__aeabi_fadd+0x9a>
 800090a:	2a00      	cmp	r2, #0
 800090c:	d04d      	beq.n	80009aa <__aeabi_fadd+0xea>
 800090e:	1b42      	subs	r2, r0, r5
 8000910:	2d00      	cmp	r5, #0
 8000912:	d000      	beq.n	8000916 <__aeabi_fadd+0x56>
 8000914:	e0cc      	b.n	8000ab0 <__aeabi_fadd+0x1f0>
 8000916:	2b00      	cmp	r3, #0
 8000918:	d100      	bne.n	800091c <__aeabi_fadd+0x5c>
 800091a:	e079      	b.n	8000a10 <__aeabi_fadd+0x150>
 800091c:	1e54      	subs	r4, r2, #1
 800091e:	2a01      	cmp	r2, #1
 8000920:	d100      	bne.n	8000924 <__aeabi_fadd+0x64>
 8000922:	e128      	b.n	8000b76 <__aeabi_fadd+0x2b6>
 8000924:	2aff      	cmp	r2, #255	@ 0xff
 8000926:	d100      	bne.n	800092a <__aeabi_fadd+0x6a>
 8000928:	e097      	b.n	8000a5a <__aeabi_fadd+0x19a>
 800092a:	0022      	movs	r2, r4
 800092c:	e0c5      	b.n	8000aba <__aeabi_fadd+0x1fa>
 800092e:	2a00      	cmp	r2, #0
 8000930:	dc00      	bgt.n	8000934 <__aeabi_fadd+0x74>
 8000932:	e096      	b.n	8000a62 <__aeabi_fadd+0x1a2>
 8000934:	2800      	cmp	r0, #0
 8000936:	d04f      	beq.n	80009d8 <__aeabi_fadd+0x118>
 8000938:	2dff      	cmp	r5, #255	@ 0xff
 800093a:	d100      	bne.n	800093e <__aeabi_fadd+0x7e>
 800093c:	e08f      	b.n	8000a5e <__aeabi_fadd+0x19e>
 800093e:	2180      	movs	r1, #128	@ 0x80
 8000940:	04c9      	lsls	r1, r1, #19
 8000942:	430e      	orrs	r6, r1
 8000944:	2a1b      	cmp	r2, #27
 8000946:	dd51      	ble.n	80009ec <__aeabi_fadd+0x12c>
 8000948:	002a      	movs	r2, r5
 800094a:	3301      	adds	r3, #1
 800094c:	e018      	b.n	8000980 <__aeabi_fadd+0xc0>
 800094e:	2dff      	cmp	r5, #255	@ 0xff
 8000950:	d100      	bne.n	8000954 <__aeabi_fadd+0x94>
 8000952:	e084      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000954:	2180      	movs	r1, #128	@ 0x80
 8000956:	04c9      	lsls	r1, r1, #19
 8000958:	430e      	orrs	r6, r1
 800095a:	2101      	movs	r1, #1
 800095c:	2a1b      	cmp	r2, #27
 800095e:	dc08      	bgt.n	8000972 <__aeabi_fadd+0xb2>
 8000960:	0031      	movs	r1, r6
 8000962:	2020      	movs	r0, #32
 8000964:	40d1      	lsrs	r1, r2
 8000966:	1a82      	subs	r2, r0, r2
 8000968:	4096      	lsls	r6, r2
 800096a:	0032      	movs	r2, r6
 800096c:	1e50      	subs	r0, r2, #1
 800096e:	4182      	sbcs	r2, r0
 8000970:	4311      	orrs	r1, r2
 8000972:	1a5b      	subs	r3, r3, r1
 8000974:	015a      	lsls	r2, r3, #5
 8000976:	d459      	bmi.n	8000a2c <__aeabi_fadd+0x16c>
 8000978:	2107      	movs	r1, #7
 800097a:	002a      	movs	r2, r5
 800097c:	4019      	ands	r1, r3
 800097e:	d049      	beq.n	8000a14 <__aeabi_fadd+0x154>
 8000980:	210f      	movs	r1, #15
 8000982:	4019      	ands	r1, r3
 8000984:	2904      	cmp	r1, #4
 8000986:	d000      	beq.n	800098a <__aeabi_fadd+0xca>
 8000988:	3304      	adds	r3, #4
 800098a:	0159      	lsls	r1, r3, #5
 800098c:	d542      	bpl.n	8000a14 <__aeabi_fadd+0x154>
 800098e:	1c50      	adds	r0, r2, #1
 8000990:	2afe      	cmp	r2, #254	@ 0xfe
 8000992:	d03a      	beq.n	8000a0a <__aeabi_fadd+0x14a>
 8000994:	019b      	lsls	r3, r3, #6
 8000996:	b2c0      	uxtb	r0, r0
 8000998:	0a5b      	lsrs	r3, r3, #9
 800099a:	05c0      	lsls	r0, r0, #23
 800099c:	4318      	orrs	r0, r3
 800099e:	07e4      	lsls	r4, r4, #31
 80009a0:	4320      	orrs	r0, r4
 80009a2:	bcc0      	pop	{r6, r7}
 80009a4:	46b9      	mov	r9, r7
 80009a6:	46b0      	mov	r8, r6
 80009a8:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 80009aa:	20fe      	movs	r0, #254	@ 0xfe
 80009ac:	4680      	mov	r8, r0
 80009ae:	1c6f      	adds	r7, r5, #1
 80009b0:	0038      	movs	r0, r7
 80009b2:	4647      	mov	r7, r8
 80009b4:	4207      	tst	r7, r0
 80009b6:	d000      	beq.n	80009ba <__aeabi_fadd+0xfa>
 80009b8:	e08e      	b.n	8000ad8 <__aeabi_fadd+0x218>
 80009ba:	2d00      	cmp	r5, #0
 80009bc:	d000      	beq.n	80009c0 <__aeabi_fadd+0x100>
 80009be:	e0b4      	b.n	8000b2a <__aeabi_fadd+0x26a>
 80009c0:	2b00      	cmp	r3, #0
 80009c2:	d100      	bne.n	80009c6 <__aeabi_fadd+0x106>
 80009c4:	e0db      	b.n	8000b7e <__aeabi_fadd+0x2be>
 80009c6:	2e00      	cmp	r6, #0
 80009c8:	d06c      	beq.n	8000aa4 <__aeabi_fadd+0x1e4>
 80009ca:	1b98      	subs	r0, r3, r6
 80009cc:	0145      	lsls	r5, r0, #5
 80009ce:	d400      	bmi.n	80009d2 <__aeabi_fadd+0x112>
 80009d0:	e0f7      	b.n	8000bc2 <__aeabi_fadd+0x302>
 80009d2:	000c      	movs	r4, r1
 80009d4:	1af3      	subs	r3, r6, r3
 80009d6:	e03d      	b.n	8000a54 <__aeabi_fadd+0x194>
 80009d8:	2e00      	cmp	r6, #0
 80009da:	d01b      	beq.n	8000a14 <__aeabi_fadd+0x154>
 80009dc:	1e51      	subs	r1, r2, #1
 80009de:	2a01      	cmp	r2, #1
 80009e0:	d100      	bne.n	80009e4 <__aeabi_fadd+0x124>
 80009e2:	e082      	b.n	8000aea <__aeabi_fadd+0x22a>
 80009e4:	2aff      	cmp	r2, #255	@ 0xff
 80009e6:	d03a      	beq.n	8000a5e <__aeabi_fadd+0x19e>
 80009e8:	000a      	movs	r2, r1
 80009ea:	e7ab      	b.n	8000944 <__aeabi_fadd+0x84>
 80009ec:	0031      	movs	r1, r6
 80009ee:	2020      	movs	r0, #32
 80009f0:	40d1      	lsrs	r1, r2
 80009f2:	1a82      	subs	r2, r0, r2
 80009f4:	4096      	lsls	r6, r2
 80009f6:	0032      	movs	r2, r6
 80009f8:	1e50      	subs	r0, r2, #1
 80009fa:	4182      	sbcs	r2, r0
 80009fc:	430a      	orrs	r2, r1
 80009fe:	189b      	adds	r3, r3, r2
 8000a00:	015a      	lsls	r2, r3, #5
 8000a02:	d5b9      	bpl.n	8000978 <__aeabi_fadd+0xb8>
 8000a04:	1c6a      	adds	r2, r5, #1
 8000a06:	2dfe      	cmp	r5, #254	@ 0xfe
 8000a08:	d175      	bne.n	8000af6 <__aeabi_fadd+0x236>
 8000a0a:	20ff      	movs	r0, #255	@ 0xff
 8000a0c:	2300      	movs	r3, #0
 8000a0e:	e7c4      	b.n	800099a <__aeabi_fadd+0xda>
 8000a10:	000c      	movs	r4, r1
 8000a12:	0033      	movs	r3, r6
 8000a14:	08db      	lsrs	r3, r3, #3
 8000a16:	2aff      	cmp	r2, #255	@ 0xff
 8000a18:	d146      	bne.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000a1a:	2b00      	cmp	r3, #0
 8000a1c:	d0f5      	beq.n	8000a0a <__aeabi_fadd+0x14a>
 8000a1e:	2280      	movs	r2, #128	@ 0x80
 8000a20:	03d2      	lsls	r2, r2, #15
 8000a22:	4313      	orrs	r3, r2
 8000a24:	025b      	lsls	r3, r3, #9
 8000a26:	20ff      	movs	r0, #255	@ 0xff
 8000a28:	0a5b      	lsrs	r3, r3, #9
 8000a2a:	e7b6      	b.n	800099a <__aeabi_fadd+0xda>
 8000a2c:	019f      	lsls	r7, r3, #6
 8000a2e:	09bf      	lsrs	r7, r7, #6
 8000a30:	0038      	movs	r0, r7
 8000a32:	f002 fde3 	bl	80035fc <__clzsi2>
 8000a36:	3805      	subs	r0, #5
 8000a38:	4087      	lsls	r7, r0
 8000a3a:	4285      	cmp	r5, r0
 8000a3c:	dc24      	bgt.n	8000a88 <__aeabi_fadd+0x1c8>
 8000a3e:	003b      	movs	r3, r7
 8000a40:	2120      	movs	r1, #32
 8000a42:	1b42      	subs	r2, r0, r5
 8000a44:	3201      	adds	r2, #1
 8000a46:	40d3      	lsrs	r3, r2
 8000a48:	1a8a      	subs	r2, r1, r2
 8000a4a:	4097      	lsls	r7, r2
 8000a4c:	1e7a      	subs	r2, r7, #1
 8000a4e:	4197      	sbcs	r7, r2
 8000a50:	2200      	movs	r2, #0
 8000a52:	433b      	orrs	r3, r7
 8000a54:	0759      	lsls	r1, r3, #29
 8000a56:	d193      	bne.n	8000980 <__aeabi_fadd+0xc0>
 8000a58:	e797      	b.n	800098a <__aeabi_fadd+0xca>
 8000a5a:	000c      	movs	r4, r1
 8000a5c:	0033      	movs	r3, r6
 8000a5e:	08db      	lsrs	r3, r3, #3
 8000a60:	e7db      	b.n	8000a1a <__aeabi_fadd+0x15a>
 8000a62:	2a00      	cmp	r2, #0
 8000a64:	d014      	beq.n	8000a90 <__aeabi_fadd+0x1d0>
 8000a66:	1b42      	subs	r2, r0, r5
 8000a68:	2d00      	cmp	r5, #0
 8000a6a:	d14b      	bne.n	8000b04 <__aeabi_fadd+0x244>
 8000a6c:	2b00      	cmp	r3, #0
 8000a6e:	d0d0      	beq.n	8000a12 <__aeabi_fadd+0x152>
 8000a70:	1e51      	subs	r1, r2, #1
 8000a72:	2a01      	cmp	r2, #1
 8000a74:	d100      	bne.n	8000a78 <__aeabi_fadd+0x1b8>
 8000a76:	e09e      	b.n	8000bb6 <__aeabi_fadd+0x2f6>
 8000a78:	2aff      	cmp	r2, #255	@ 0xff
 8000a7a:	d0ef      	beq.n	8000a5c <__aeabi_fadd+0x19c>
 8000a7c:	000a      	movs	r2, r1
 8000a7e:	2a1b      	cmp	r2, #27
 8000a80:	dd5f      	ble.n	8000b42 <__aeabi_fadd+0x282>
 8000a82:	0002      	movs	r2, r0
 8000a84:	1c73      	adds	r3, r6, #1
 8000a86:	e77b      	b.n	8000980 <__aeabi_fadd+0xc0>
 8000a88:	4b50      	ldr	r3, [pc, #320]	@ (8000bcc <__aeabi_fadd+0x30c>)
 8000a8a:	1a2a      	subs	r2, r5, r0
 8000a8c:	403b      	ands	r3, r7
 8000a8e:	e7e1      	b.n	8000a54 <__aeabi_fadd+0x194>
 8000a90:	21fe      	movs	r1, #254	@ 0xfe
 8000a92:	1c6a      	adds	r2, r5, #1
 8000a94:	4211      	tst	r1, r2
 8000a96:	d13b      	bne.n	8000b10 <__aeabi_fadd+0x250>
 8000a98:	2d00      	cmp	r5, #0
 8000a9a:	d15d      	bne.n	8000b58 <__aeabi_fadd+0x298>
 8000a9c:	2b00      	cmp	r3, #0
 8000a9e:	d07f      	beq.n	8000ba0 <__aeabi_fadd+0x2e0>
 8000aa0:	2e00      	cmp	r6, #0
 8000aa2:	d17f      	bne.n	8000ba4 <__aeabi_fadd+0x2e4>
 8000aa4:	2200      	movs	r2, #0
 8000aa6:	08db      	lsrs	r3, r3, #3
 8000aa8:	025b      	lsls	r3, r3, #9
 8000aaa:	0a5b      	lsrs	r3, r3, #9
 8000aac:	b2d0      	uxtb	r0, r2
 8000aae:	e774      	b.n	800099a <__aeabi_fadd+0xda>
 8000ab0:	28ff      	cmp	r0, #255	@ 0xff
 8000ab2:	d0d2      	beq.n	8000a5a <__aeabi_fadd+0x19a>
 8000ab4:	2480      	movs	r4, #128	@ 0x80
 8000ab6:	04e4      	lsls	r4, r4, #19
 8000ab8:	4323      	orrs	r3, r4
 8000aba:	2401      	movs	r4, #1
 8000abc:	2a1b      	cmp	r2, #27
 8000abe:	dc07      	bgt.n	8000ad0 <__aeabi_fadd+0x210>
 8000ac0:	001c      	movs	r4, r3
 8000ac2:	2520      	movs	r5, #32
 8000ac4:	40d4      	lsrs	r4, r2
 8000ac6:	1aaa      	subs	r2, r5, r2
 8000ac8:	4093      	lsls	r3, r2
 8000aca:	1e5a      	subs	r2, r3, #1
 8000acc:	4193      	sbcs	r3, r2
 8000ace:	431c      	orrs	r4, r3
 8000ad0:	1b33      	subs	r3, r6, r4
 8000ad2:	0005      	movs	r5, r0
 8000ad4:	000c      	movs	r4, r1
 8000ad6:	e74d      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000ad8:	1b9f      	subs	r7, r3, r6
 8000ada:	017a      	lsls	r2, r7, #5
 8000adc:	d422      	bmi.n	8000b24 <__aeabi_fadd+0x264>
 8000ade:	2f00      	cmp	r7, #0
 8000ae0:	d1a6      	bne.n	8000a30 <__aeabi_fadd+0x170>
 8000ae2:	2400      	movs	r4, #0
 8000ae4:	2000      	movs	r0, #0
 8000ae6:	2300      	movs	r3, #0
 8000ae8:	e757      	b.n	800099a <__aeabi_fadd+0xda>
 8000aea:	199b      	adds	r3, r3, r6
 8000aec:	2501      	movs	r5, #1
 8000aee:	3201      	adds	r2, #1
 8000af0:	0159      	lsls	r1, r3, #5
 8000af2:	d400      	bmi.n	8000af6 <__aeabi_fadd+0x236>
 8000af4:	e740      	b.n	8000978 <__aeabi_fadd+0xb8>
 8000af6:	2101      	movs	r1, #1
 8000af8:	4835      	ldr	r0, [pc, #212]	@ (8000bd0 <__aeabi_fadd+0x310>)
 8000afa:	4019      	ands	r1, r3
 8000afc:	085b      	lsrs	r3, r3, #1
 8000afe:	4003      	ands	r3, r0
 8000b00:	430b      	orrs	r3, r1
 8000b02:	e7a7      	b.n	8000a54 <__aeabi_fadd+0x194>
 8000b04:	28ff      	cmp	r0, #255	@ 0xff
 8000b06:	d0a9      	beq.n	8000a5c <__aeabi_fadd+0x19c>
 8000b08:	2180      	movs	r1, #128	@ 0x80
 8000b0a:	04c9      	lsls	r1, r1, #19
 8000b0c:	430b      	orrs	r3, r1
 8000b0e:	e7b6      	b.n	8000a7e <__aeabi_fadd+0x1be>
 8000b10:	2aff      	cmp	r2, #255	@ 0xff
 8000b12:	d100      	bne.n	8000b16 <__aeabi_fadd+0x256>
 8000b14:	e779      	b.n	8000a0a <__aeabi_fadd+0x14a>
 8000b16:	199b      	adds	r3, r3, r6
 8000b18:	085b      	lsrs	r3, r3, #1
 8000b1a:	0759      	lsls	r1, r3, #29
 8000b1c:	d000      	beq.n	8000b20 <__aeabi_fadd+0x260>
 8000b1e:	e72f      	b.n	8000980 <__aeabi_fadd+0xc0>
 8000b20:	08db      	lsrs	r3, r3, #3
 8000b22:	e7c1      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000b24:	000c      	movs	r4, r1
 8000b26:	1af7      	subs	r7, r6, r3
 8000b28:	e782      	b.n	8000a30 <__aeabi_fadd+0x170>
 8000b2a:	2b00      	cmp	r3, #0
 8000b2c:	d12c      	bne.n	8000b88 <__aeabi_fadd+0x2c8>
 8000b2e:	2e00      	cmp	r6, #0
 8000b30:	d193      	bne.n	8000a5a <__aeabi_fadd+0x19a>
 8000b32:	2380      	movs	r3, #128	@ 0x80
 8000b34:	2400      	movs	r4, #0
 8000b36:	20ff      	movs	r0, #255	@ 0xff
 8000b38:	03db      	lsls	r3, r3, #15
 8000b3a:	e72e      	b.n	800099a <__aeabi_fadd+0xda>
 8000b3c:	2501      	movs	r5, #1
 8000b3e:	1b9b      	subs	r3, r3, r6
 8000b40:	e718      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000b42:	0019      	movs	r1, r3
 8000b44:	2520      	movs	r5, #32
 8000b46:	40d1      	lsrs	r1, r2
 8000b48:	1aaa      	subs	r2, r5, r2
 8000b4a:	4093      	lsls	r3, r2
 8000b4c:	1e5a      	subs	r2, r3, #1
 8000b4e:	4193      	sbcs	r3, r2
 8000b50:	430b      	orrs	r3, r1
 8000b52:	0005      	movs	r5, r0
 8000b54:	199b      	adds	r3, r3, r6
 8000b56:	e753      	b.n	8000a00 <__aeabi_fadd+0x140>
 8000b58:	2b00      	cmp	r3, #0
 8000b5a:	d100      	bne.n	8000b5e <__aeabi_fadd+0x29e>
 8000b5c:	e77e      	b.n	8000a5c <__aeabi_fadd+0x19c>
 8000b5e:	2e00      	cmp	r6, #0
 8000b60:	d100      	bne.n	8000b64 <__aeabi_fadd+0x2a4>
 8000b62:	e77c      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000b64:	2280      	movs	r2, #128	@ 0x80
 8000b66:	03d2      	lsls	r2, r2, #15
 8000b68:	4591      	cmp	r9, r2
 8000b6a:	d302      	bcc.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b6c:	4594      	cmp	ip, r2
 8000b6e:	d200      	bcs.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b70:	0033      	movs	r3, r6
 8000b72:	08db      	lsrs	r3, r3, #3
 8000b74:	e753      	b.n	8000a1e <__aeabi_fadd+0x15e>
 8000b76:	000c      	movs	r4, r1
 8000b78:	1af3      	subs	r3, r6, r3
 8000b7a:	3501      	adds	r5, #1
 8000b7c:	e6fa      	b.n	8000974 <__aeabi_fadd+0xb4>
 8000b7e:	2e00      	cmp	r6, #0
 8000b80:	d0af      	beq.n	8000ae2 <__aeabi_fadd+0x222>
 8000b82:	000c      	movs	r4, r1
 8000b84:	0033      	movs	r3, r6
 8000b86:	e78d      	b.n	8000aa4 <__aeabi_fadd+0x1e4>
 8000b88:	2e00      	cmp	r6, #0
 8000b8a:	d100      	bne.n	8000b8e <__aeabi_fadd+0x2ce>
 8000b8c:	e767      	b.n	8000a5e <__aeabi_fadd+0x19e>
 8000b8e:	2280      	movs	r2, #128	@ 0x80
 8000b90:	03d2      	lsls	r2, r2, #15
 8000b92:	4591      	cmp	r9, r2
 8000b94:	d3ed      	bcc.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b96:	4594      	cmp	ip, r2
 8000b98:	d2eb      	bcs.n	8000b72 <__aeabi_fadd+0x2b2>
 8000b9a:	000c      	movs	r4, r1
 8000b9c:	0033      	movs	r3, r6
 8000b9e:	e7e8      	b.n	8000b72 <__aeabi_fadd+0x2b2>
 8000ba0:	0033      	movs	r3, r6
 8000ba2:	e77f      	b.n	8000aa4 <__aeabi_fadd+0x1e4>
 8000ba4:	199b      	adds	r3, r3, r6
 8000ba6:	2200      	movs	r2, #0
 8000ba8:	0159      	lsls	r1, r3, #5
 8000baa:	d5b9      	bpl.n	8000b20 <__aeabi_fadd+0x260>
 8000bac:	4a07      	ldr	r2, [pc, #28]	@ (8000bcc <__aeabi_fadd+0x30c>)
 8000bae:	4013      	ands	r3, r2
 8000bb0:	08db      	lsrs	r3, r3, #3
 8000bb2:	2201      	movs	r2, #1
 8000bb4:	e778      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000bb6:	199b      	adds	r3, r3, r6
 8000bb8:	3201      	adds	r2, #1
 8000bba:	3501      	adds	r5, #1
 8000bbc:	0159      	lsls	r1, r3, #5
 8000bbe:	d49a      	bmi.n	8000af6 <__aeabi_fadd+0x236>
 8000bc0:	e6da      	b.n	8000978 <__aeabi_fadd+0xb8>
 8000bc2:	1e03      	subs	r3, r0, #0
 8000bc4:	d08d      	beq.n	8000ae2 <__aeabi_fadd+0x222>
 8000bc6:	08db      	lsrs	r3, r3, #3
 8000bc8:	e76e      	b.n	8000aa8 <__aeabi_fadd+0x1e8>
 8000bca:	46c0      	nop			@ (mov r8, r8)
 8000bcc:	fbffffff 	.word	0xfbffffff
 8000bd0:	7dffffff 	.word	0x7dffffff

08000bd4 <__aeabi_fdiv>:
 8000bd4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000bd6:	464f      	mov	r7, r9
 8000bd8:	4646      	mov	r6, r8
 8000bda:	46d6      	mov	lr, sl
 8000bdc:	0244      	lsls	r4, r0, #9
 8000bde:	b5c0      	push	{r6, r7, lr}
 8000be0:	0047      	lsls	r7, r0, #1
 8000be2:	1c0e      	adds	r6, r1, #0
 8000be4:	0a64      	lsrs	r4, r4, #9
 8000be6:	0e3f      	lsrs	r7, r7, #24
 8000be8:	0fc5      	lsrs	r5, r0, #31
 8000bea:	2f00      	cmp	r7, #0
 8000bec:	d03c      	beq.n	8000c68 <__aeabi_fdiv+0x94>
 8000bee:	2fff      	cmp	r7, #255	@ 0xff
 8000bf0:	d042      	beq.n	8000c78 <__aeabi_fdiv+0xa4>
 8000bf2:	2300      	movs	r3, #0
 8000bf4:	2280      	movs	r2, #128	@ 0x80
 8000bf6:	4699      	mov	r9, r3
 8000bf8:	469a      	mov	sl, r3
 8000bfa:	00e4      	lsls	r4, r4, #3
 8000bfc:	04d2      	lsls	r2, r2, #19
 8000bfe:	4314      	orrs	r4, r2
 8000c00:	3f7f      	subs	r7, #127	@ 0x7f
 8000c02:	0273      	lsls	r3, r6, #9
 8000c04:	0a5b      	lsrs	r3, r3, #9
 8000c06:	4698      	mov	r8, r3
 8000c08:	0073      	lsls	r3, r6, #1
 8000c0a:	0e1b      	lsrs	r3, r3, #24
 8000c0c:	0ff6      	lsrs	r6, r6, #31
 8000c0e:	2b00      	cmp	r3, #0
 8000c10:	d01b      	beq.n	8000c4a <__aeabi_fdiv+0x76>
 8000c12:	2bff      	cmp	r3, #255	@ 0xff
 8000c14:	d013      	beq.n	8000c3e <__aeabi_fdiv+0x6a>
 8000c16:	4642      	mov	r2, r8
 8000c18:	2180      	movs	r1, #128	@ 0x80
 8000c1a:	00d2      	lsls	r2, r2, #3
 8000c1c:	04c9      	lsls	r1, r1, #19
 8000c1e:	4311      	orrs	r1, r2
 8000c20:	4688      	mov	r8, r1
 8000c22:	2000      	movs	r0, #0
 8000c24:	3b7f      	subs	r3, #127	@ 0x7f
 8000c26:	0029      	movs	r1, r5
 8000c28:	1aff      	subs	r7, r7, r3
 8000c2a:	464b      	mov	r3, r9
 8000c2c:	4071      	eors	r1, r6
 8000c2e:	b2c9      	uxtb	r1, r1
 8000c30:	2b0f      	cmp	r3, #15
 8000c32:	d900      	bls.n	8000c36 <__aeabi_fdiv+0x62>
 8000c34:	e0b5      	b.n	8000da2 <__aeabi_fdiv+0x1ce>
 8000c36:	4a74      	ldr	r2, [pc, #464]	@ (8000e08 <__aeabi_fdiv+0x234>)
 8000c38:	009b      	lsls	r3, r3, #2
 8000c3a:	58d3      	ldr	r3, [r2, r3]
 8000c3c:	469f      	mov	pc, r3
 8000c3e:	4643      	mov	r3, r8
 8000c40:	2b00      	cmp	r3, #0
 8000c42:	d13f      	bne.n	8000cc4 <__aeabi_fdiv+0xf0>
 8000c44:	3fff      	subs	r7, #255	@ 0xff
 8000c46:	3302      	adds	r3, #2
 8000c48:	e003      	b.n	8000c52 <__aeabi_fdiv+0x7e>
 8000c4a:	4643      	mov	r3, r8
 8000c4c:	2b00      	cmp	r3, #0
 8000c4e:	d12d      	bne.n	8000cac <__aeabi_fdiv+0xd8>
 8000c50:	2301      	movs	r3, #1
 8000c52:	0029      	movs	r1, r5
 8000c54:	464a      	mov	r2, r9
 8000c56:	4071      	eors	r1, r6
 8000c58:	b2c9      	uxtb	r1, r1
 8000c5a:	431a      	orrs	r2, r3
 8000c5c:	2a0e      	cmp	r2, #14
 8000c5e:	d838      	bhi.n	8000cd2 <__aeabi_fdiv+0xfe>
 8000c60:	486a      	ldr	r0, [pc, #424]	@ (8000e0c <__aeabi_fdiv+0x238>)
 8000c62:	0092      	lsls	r2, r2, #2
 8000c64:	5882      	ldr	r2, [r0, r2]
 8000c66:	4697      	mov	pc, r2
 8000c68:	2c00      	cmp	r4, #0
 8000c6a:	d113      	bne.n	8000c94 <__aeabi_fdiv+0xc0>
 8000c6c:	2304      	movs	r3, #4
 8000c6e:	4699      	mov	r9, r3
 8000c70:	3b03      	subs	r3, #3
 8000c72:	2700      	movs	r7, #0
 8000c74:	469a      	mov	sl, r3
 8000c76:	e7c4      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c78:	2c00      	cmp	r4, #0
 8000c7a:	d105      	bne.n	8000c88 <__aeabi_fdiv+0xb4>
 8000c7c:	2308      	movs	r3, #8
 8000c7e:	4699      	mov	r9, r3
 8000c80:	3b06      	subs	r3, #6
 8000c82:	27ff      	movs	r7, #255	@ 0xff
 8000c84:	469a      	mov	sl, r3
 8000c86:	e7bc      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c88:	230c      	movs	r3, #12
 8000c8a:	4699      	mov	r9, r3
 8000c8c:	3b09      	subs	r3, #9
 8000c8e:	27ff      	movs	r7, #255	@ 0xff
 8000c90:	469a      	mov	sl, r3
 8000c92:	e7b6      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000c94:	0020      	movs	r0, r4
 8000c96:	f002 fcb1 	bl	80035fc <__clzsi2>
 8000c9a:	2776      	movs	r7, #118	@ 0x76
 8000c9c:	1f43      	subs	r3, r0, #5
 8000c9e:	409c      	lsls	r4, r3
 8000ca0:	2300      	movs	r3, #0
 8000ca2:	427f      	negs	r7, r7
 8000ca4:	4699      	mov	r9, r3
 8000ca6:	469a      	mov	sl, r3
 8000ca8:	1a3f      	subs	r7, r7, r0
 8000caa:	e7aa      	b.n	8000c02 <__aeabi_fdiv+0x2e>
 8000cac:	4640      	mov	r0, r8
 8000cae:	f002 fca5 	bl	80035fc <__clzsi2>
 8000cb2:	4642      	mov	r2, r8
 8000cb4:	1f43      	subs	r3, r0, #5
 8000cb6:	409a      	lsls	r2, r3
 8000cb8:	2376      	movs	r3, #118	@ 0x76
 8000cba:	425b      	negs	r3, r3
 8000cbc:	1a1b      	subs	r3, r3, r0
 8000cbe:	4690      	mov	r8, r2
 8000cc0:	2000      	movs	r0, #0
 8000cc2:	e7b0      	b.n	8000c26 <__aeabi_fdiv+0x52>
 8000cc4:	2303      	movs	r3, #3
 8000cc6:	464a      	mov	r2, r9
 8000cc8:	431a      	orrs	r2, r3
 8000cca:	4691      	mov	r9, r2
 8000ccc:	2003      	movs	r0, #3
 8000cce:	33fc      	adds	r3, #252	@ 0xfc
 8000cd0:	e7a9      	b.n	8000c26 <__aeabi_fdiv+0x52>
 8000cd2:	000d      	movs	r5, r1
 8000cd4:	20ff      	movs	r0, #255	@ 0xff
 8000cd6:	2200      	movs	r2, #0
 8000cd8:	05c0      	lsls	r0, r0, #23
 8000cda:	07ed      	lsls	r5, r5, #31
 8000cdc:	4310      	orrs	r0, r2
 8000cde:	4328      	orrs	r0, r5
 8000ce0:	bce0      	pop	{r5, r6, r7}
 8000ce2:	46ba      	mov	sl, r7
 8000ce4:	46b1      	mov	r9, r6
 8000ce6:	46a8      	mov	r8, r5
 8000ce8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8000cea:	000d      	movs	r5, r1
 8000cec:	2000      	movs	r0, #0
 8000cee:	2200      	movs	r2, #0
 8000cf0:	e7f2      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000cf2:	4653      	mov	r3, sl
 8000cf4:	2b02      	cmp	r3, #2
 8000cf6:	d0ed      	beq.n	8000cd4 <__aeabi_fdiv+0x100>
 8000cf8:	2b03      	cmp	r3, #3
 8000cfa:	d033      	beq.n	8000d64 <__aeabi_fdiv+0x190>
 8000cfc:	46a0      	mov	r8, r4
 8000cfe:	2b01      	cmp	r3, #1
 8000d00:	d105      	bne.n	8000d0e <__aeabi_fdiv+0x13a>
 8000d02:	2000      	movs	r0, #0
 8000d04:	2200      	movs	r2, #0
 8000d06:	e7e7      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d08:	0035      	movs	r5, r6
 8000d0a:	2803      	cmp	r0, #3
 8000d0c:	d07a      	beq.n	8000e04 <__aeabi_fdiv+0x230>
 8000d0e:	003b      	movs	r3, r7
 8000d10:	337f      	adds	r3, #127	@ 0x7f
 8000d12:	2b00      	cmp	r3, #0
 8000d14:	dd2d      	ble.n	8000d72 <__aeabi_fdiv+0x19e>
 8000d16:	4642      	mov	r2, r8
 8000d18:	0752      	lsls	r2, r2, #29
 8000d1a:	d007      	beq.n	8000d2c <__aeabi_fdiv+0x158>
 8000d1c:	220f      	movs	r2, #15
 8000d1e:	4641      	mov	r1, r8
 8000d20:	400a      	ands	r2, r1
 8000d22:	2a04      	cmp	r2, #4
 8000d24:	d002      	beq.n	8000d2c <__aeabi_fdiv+0x158>
 8000d26:	2204      	movs	r2, #4
 8000d28:	4694      	mov	ip, r2
 8000d2a:	44e0      	add	r8, ip
 8000d2c:	4642      	mov	r2, r8
 8000d2e:	0112      	lsls	r2, r2, #4
 8000d30:	d505      	bpl.n	8000d3e <__aeabi_fdiv+0x16a>
 8000d32:	4642      	mov	r2, r8
 8000d34:	4b36      	ldr	r3, [pc, #216]	@ (8000e10 <__aeabi_fdiv+0x23c>)
 8000d36:	401a      	ands	r2, r3
 8000d38:	003b      	movs	r3, r7
 8000d3a:	4690      	mov	r8, r2
 8000d3c:	3380      	adds	r3, #128	@ 0x80
 8000d3e:	2bfe      	cmp	r3, #254	@ 0xfe
 8000d40:	dcc8      	bgt.n	8000cd4 <__aeabi_fdiv+0x100>
 8000d42:	4642      	mov	r2, r8
 8000d44:	0192      	lsls	r2, r2, #6
 8000d46:	0a52      	lsrs	r2, r2, #9
 8000d48:	b2d8      	uxtb	r0, r3
 8000d4a:	e7c5      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d4c:	2280      	movs	r2, #128	@ 0x80
 8000d4e:	2500      	movs	r5, #0
 8000d50:	20ff      	movs	r0, #255	@ 0xff
 8000d52:	03d2      	lsls	r2, r2, #15
 8000d54:	e7c0      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d56:	2280      	movs	r2, #128	@ 0x80
 8000d58:	03d2      	lsls	r2, r2, #15
 8000d5a:	4214      	tst	r4, r2
 8000d5c:	d002      	beq.n	8000d64 <__aeabi_fdiv+0x190>
 8000d5e:	4643      	mov	r3, r8
 8000d60:	4213      	tst	r3, r2
 8000d62:	d049      	beq.n	8000df8 <__aeabi_fdiv+0x224>
 8000d64:	2280      	movs	r2, #128	@ 0x80
 8000d66:	03d2      	lsls	r2, r2, #15
 8000d68:	4322      	orrs	r2, r4
 8000d6a:	0252      	lsls	r2, r2, #9
 8000d6c:	20ff      	movs	r0, #255	@ 0xff
 8000d6e:	0a52      	lsrs	r2, r2, #9
 8000d70:	e7b2      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000d72:	2201      	movs	r2, #1
 8000d74:	1ad3      	subs	r3, r2, r3
 8000d76:	2b1b      	cmp	r3, #27
 8000d78:	dcc3      	bgt.n	8000d02 <__aeabi_fdiv+0x12e>
 8000d7a:	4642      	mov	r2, r8
 8000d7c:	40da      	lsrs	r2, r3
 8000d7e:	4643      	mov	r3, r8
 8000d80:	379e      	adds	r7, #158	@ 0x9e
 8000d82:	40bb      	lsls	r3, r7
 8000d84:	1e59      	subs	r1, r3, #1
 8000d86:	418b      	sbcs	r3, r1
 8000d88:	431a      	orrs	r2, r3
 8000d8a:	0753      	lsls	r3, r2, #29
 8000d8c:	d004      	beq.n	8000d98 <__aeabi_fdiv+0x1c4>
 8000d8e:	230f      	movs	r3, #15
 8000d90:	4013      	ands	r3, r2
 8000d92:	2b04      	cmp	r3, #4
 8000d94:	d000      	beq.n	8000d98 <__aeabi_fdiv+0x1c4>
 8000d96:	3204      	adds	r2, #4
 8000d98:	0153      	lsls	r3, r2, #5
 8000d9a:	d529      	bpl.n	8000df0 <__aeabi_fdiv+0x21c>
 8000d9c:	2001      	movs	r0, #1
 8000d9e:	2200      	movs	r2, #0
 8000da0:	e79a      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000da2:	4642      	mov	r2, r8
 8000da4:	0163      	lsls	r3, r4, #5
 8000da6:	0155      	lsls	r5, r2, #5
 8000da8:	42ab      	cmp	r3, r5
 8000daa:	d215      	bcs.n	8000dd8 <__aeabi_fdiv+0x204>
 8000dac:	201b      	movs	r0, #27
 8000dae:	2200      	movs	r2, #0
 8000db0:	3f01      	subs	r7, #1
 8000db2:	2601      	movs	r6, #1
 8000db4:	001c      	movs	r4, r3
 8000db6:	0052      	lsls	r2, r2, #1
 8000db8:	005b      	lsls	r3, r3, #1
 8000dba:	2c00      	cmp	r4, #0
 8000dbc:	db01      	blt.n	8000dc2 <__aeabi_fdiv+0x1ee>
 8000dbe:	429d      	cmp	r5, r3
 8000dc0:	d801      	bhi.n	8000dc6 <__aeabi_fdiv+0x1f2>
 8000dc2:	1b5b      	subs	r3, r3, r5
 8000dc4:	4332      	orrs	r2, r6
 8000dc6:	3801      	subs	r0, #1
 8000dc8:	2800      	cmp	r0, #0
 8000dca:	d1f3      	bne.n	8000db4 <__aeabi_fdiv+0x1e0>
 8000dcc:	1e58      	subs	r0, r3, #1
 8000dce:	4183      	sbcs	r3, r0
 8000dd0:	4313      	orrs	r3, r2
 8000dd2:	4698      	mov	r8, r3
 8000dd4:	000d      	movs	r5, r1
 8000dd6:	e79a      	b.n	8000d0e <__aeabi_fdiv+0x13a>
 8000dd8:	201a      	movs	r0, #26
 8000dda:	2201      	movs	r2, #1
 8000ddc:	1b5b      	subs	r3, r3, r5
 8000dde:	e7e8      	b.n	8000db2 <__aeabi_fdiv+0x1de>
 8000de0:	3b02      	subs	r3, #2
 8000de2:	425a      	negs	r2, r3
 8000de4:	4153      	adcs	r3, r2
 8000de6:	425b      	negs	r3, r3
 8000de8:	0035      	movs	r5, r6
 8000dea:	2200      	movs	r2, #0
 8000dec:	b2d8      	uxtb	r0, r3
 8000dee:	e773      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000df0:	0192      	lsls	r2, r2, #6
 8000df2:	2000      	movs	r0, #0
 8000df4:	0a52      	lsrs	r2, r2, #9
 8000df6:	e76f      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000df8:	431a      	orrs	r2, r3
 8000dfa:	0252      	lsls	r2, r2, #9
 8000dfc:	0035      	movs	r5, r6
 8000dfe:	20ff      	movs	r0, #255	@ 0xff
 8000e00:	0a52      	lsrs	r2, r2, #9
 8000e02:	e769      	b.n	8000cd8 <__aeabi_fdiv+0x104>
 8000e04:	4644      	mov	r4, r8
 8000e06:	e7ad      	b.n	8000d64 <__aeabi_fdiv+0x190>
 8000e08:	08020638 	.word	0x08020638
 8000e0c:	08020678 	.word	0x08020678
 8000e10:	f7ffffff 	.word	0xf7ffffff

08000e14 <__eqsf2>:
 8000e14:	b570      	push	{r4, r5, r6, lr}
 8000e16:	0042      	lsls	r2, r0, #1
 8000e18:	024e      	lsls	r6, r1, #9
 8000e1a:	004c      	lsls	r4, r1, #1
 8000e1c:	0245      	lsls	r5, r0, #9
 8000e1e:	0a6d      	lsrs	r5, r5, #9
 8000e20:	0e12      	lsrs	r2, r2, #24
 8000e22:	0fc3      	lsrs	r3, r0, #31
 8000e24:	0a76      	lsrs	r6, r6, #9
 8000e26:	0e24      	lsrs	r4, r4, #24
 8000e28:	0fc9      	lsrs	r1, r1, #31
 8000e2a:	2aff      	cmp	r2, #255	@ 0xff
 8000e2c:	d010      	beq.n	8000e50 <__eqsf2+0x3c>
 8000e2e:	2cff      	cmp	r4, #255	@ 0xff
 8000e30:	d00c      	beq.n	8000e4c <__eqsf2+0x38>
 8000e32:	2001      	movs	r0, #1
 8000e34:	42a2      	cmp	r2, r4
 8000e36:	d10a      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e38:	42b5      	cmp	r5, r6
 8000e3a:	d108      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e3c:	428b      	cmp	r3, r1
 8000e3e:	d00f      	beq.n	8000e60 <__eqsf2+0x4c>
 8000e40:	2a00      	cmp	r2, #0
 8000e42:	d104      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e44:	0028      	movs	r0, r5
 8000e46:	1e43      	subs	r3, r0, #1
 8000e48:	4198      	sbcs	r0, r3
 8000e4a:	e000      	b.n	8000e4e <__eqsf2+0x3a>
 8000e4c:	2001      	movs	r0, #1
 8000e4e:	bd70      	pop	{r4, r5, r6, pc}
 8000e50:	2001      	movs	r0, #1
 8000e52:	2cff      	cmp	r4, #255	@ 0xff
 8000e54:	d1fb      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e56:	4335      	orrs	r5, r6
 8000e58:	d1f9      	bne.n	8000e4e <__eqsf2+0x3a>
 8000e5a:	404b      	eors	r3, r1
 8000e5c:	0018      	movs	r0, r3
 8000e5e:	e7f6      	b.n	8000e4e <__eqsf2+0x3a>
 8000e60:	2000      	movs	r0, #0
 8000e62:	e7f4      	b.n	8000e4e <__eqsf2+0x3a>

08000e64 <__gesf2>:
 8000e64:	b530      	push	{r4, r5, lr}
 8000e66:	0042      	lsls	r2, r0, #1
 8000e68:	0244      	lsls	r4, r0, #9
 8000e6a:	024d      	lsls	r5, r1, #9
 8000e6c:	0fc3      	lsrs	r3, r0, #31
 8000e6e:	0048      	lsls	r0, r1, #1
 8000e70:	0a64      	lsrs	r4, r4, #9
 8000e72:	0e12      	lsrs	r2, r2, #24
 8000e74:	0a6d      	lsrs	r5, r5, #9
 8000e76:	0e00      	lsrs	r0, r0, #24
 8000e78:	0fc9      	lsrs	r1, r1, #31
 8000e7a:	2aff      	cmp	r2, #255	@ 0xff
 8000e7c:	d019      	beq.n	8000eb2 <__gesf2+0x4e>
 8000e7e:	28ff      	cmp	r0, #255	@ 0xff
 8000e80:	d00b      	beq.n	8000e9a <__gesf2+0x36>
 8000e82:	2a00      	cmp	r2, #0
 8000e84:	d11e      	bne.n	8000ec4 <__gesf2+0x60>
 8000e86:	2800      	cmp	r0, #0
 8000e88:	d10b      	bne.n	8000ea2 <__gesf2+0x3e>
 8000e8a:	2d00      	cmp	r5, #0
 8000e8c:	d027      	beq.n	8000ede <__gesf2+0x7a>
 8000e8e:	2c00      	cmp	r4, #0
 8000e90:	d134      	bne.n	8000efc <__gesf2+0x98>
 8000e92:	2900      	cmp	r1, #0
 8000e94:	d02f      	beq.n	8000ef6 <__gesf2+0x92>
 8000e96:	0008      	movs	r0, r1
 8000e98:	bd30      	pop	{r4, r5, pc}
 8000e9a:	2d00      	cmp	r5, #0
 8000e9c:	d128      	bne.n	8000ef0 <__gesf2+0x8c>
 8000e9e:	2a00      	cmp	r2, #0
 8000ea0:	d101      	bne.n	8000ea6 <__gesf2+0x42>
 8000ea2:	2c00      	cmp	r4, #0
 8000ea4:	d0f5      	beq.n	8000e92 <__gesf2+0x2e>
 8000ea6:	428b      	cmp	r3, r1
 8000ea8:	d107      	bne.n	8000eba <__gesf2+0x56>
 8000eaa:	2b00      	cmp	r3, #0
 8000eac:	d023      	beq.n	8000ef6 <__gesf2+0x92>
 8000eae:	0018      	movs	r0, r3
 8000eb0:	e7f2      	b.n	8000e98 <__gesf2+0x34>
 8000eb2:	2c00      	cmp	r4, #0
 8000eb4:	d11c      	bne.n	8000ef0 <__gesf2+0x8c>
 8000eb6:	28ff      	cmp	r0, #255	@ 0xff
 8000eb8:	d014      	beq.n	8000ee4 <__gesf2+0x80>
 8000eba:	1e58      	subs	r0, r3, #1
 8000ebc:	2302      	movs	r3, #2
 8000ebe:	4018      	ands	r0, r3
 8000ec0:	3801      	subs	r0, #1
 8000ec2:	e7e9      	b.n	8000e98 <__gesf2+0x34>
 8000ec4:	2800      	cmp	r0, #0
 8000ec6:	d0f8      	beq.n	8000eba <__gesf2+0x56>
 8000ec8:	428b      	cmp	r3, r1
 8000eca:	d1f6      	bne.n	8000eba <__gesf2+0x56>
 8000ecc:	4282      	cmp	r2, r0
 8000ece:	dcf4      	bgt.n	8000eba <__gesf2+0x56>
 8000ed0:	dbeb      	blt.n	8000eaa <__gesf2+0x46>
 8000ed2:	42ac      	cmp	r4, r5
 8000ed4:	d8f1      	bhi.n	8000eba <__gesf2+0x56>
 8000ed6:	2000      	movs	r0, #0
 8000ed8:	42ac      	cmp	r4, r5
 8000eda:	d2dd      	bcs.n	8000e98 <__gesf2+0x34>
 8000edc:	e7e5      	b.n	8000eaa <__gesf2+0x46>
 8000ede:	2c00      	cmp	r4, #0
 8000ee0:	d0da      	beq.n	8000e98 <__gesf2+0x34>
 8000ee2:	e7ea      	b.n	8000eba <__gesf2+0x56>
 8000ee4:	2d00      	cmp	r5, #0
 8000ee6:	d103      	bne.n	8000ef0 <__gesf2+0x8c>
 8000ee8:	428b      	cmp	r3, r1
 8000eea:	d1e6      	bne.n	8000eba <__gesf2+0x56>
 8000eec:	2000      	movs	r0, #0
 8000eee:	e7d3      	b.n	8000e98 <__gesf2+0x34>
 8000ef0:	2002      	movs	r0, #2
 8000ef2:	4240      	negs	r0, r0
 8000ef4:	e7d0      	b.n	8000e98 <__gesf2+0x34>
 8000ef6:	2001      	movs	r0, #1
 8000ef8:	4240      	negs	r0, r0
 8000efa:	e7cd      	b.n	8000e98 <__gesf2+0x34>
 8000efc:	428b      	cmp	r3, r1
 8000efe:	d0e8      	beq.n	8000ed2 <__gesf2+0x6e>
 8000f00:	e7db      	b.n	8000eba <__gesf2+0x56>
 8000f02:	46c0      	nop			@ (mov r8, r8)

08000f04 <__lesf2>:
 8000f04:	b530      	push	{r4, r5, lr}
 8000f06:	0042      	lsls	r2, r0, #1
 8000f08:	0244      	lsls	r4, r0, #9
 8000f0a:	024d      	lsls	r5, r1, #9
 8000f0c:	0fc3      	lsrs	r3, r0, #31
 8000f0e:	0048      	lsls	r0, r1, #1
 8000f10:	0a64      	lsrs	r4, r4, #9
 8000f12:	0e12      	lsrs	r2, r2, #24
 8000f14:	0a6d      	lsrs	r5, r5, #9
 8000f16:	0e00      	lsrs	r0, r0, #24
 8000f18:	0fc9      	lsrs	r1, r1, #31
 8000f1a:	2aff      	cmp	r2, #255	@ 0xff
 8000f1c:	d01a      	beq.n	8000f54 <__lesf2+0x50>
 8000f1e:	28ff      	cmp	r0, #255	@ 0xff
 8000f20:	d00e      	beq.n	8000f40 <__lesf2+0x3c>
 8000f22:	2a00      	cmp	r2, #0
 8000f24:	d11e      	bne.n	8000f64 <__lesf2+0x60>
 8000f26:	2800      	cmp	r0, #0
 8000f28:	d10e      	bne.n	8000f48 <__lesf2+0x44>
 8000f2a:	2d00      	cmp	r5, #0
 8000f2c:	d02a      	beq.n	8000f84 <__lesf2+0x80>
 8000f2e:	2c00      	cmp	r4, #0
 8000f30:	d00c      	beq.n	8000f4c <__lesf2+0x48>
 8000f32:	428b      	cmp	r3, r1
 8000f34:	d01d      	beq.n	8000f72 <__lesf2+0x6e>
 8000f36:	1e58      	subs	r0, r3, #1
 8000f38:	2302      	movs	r3, #2
 8000f3a:	4018      	ands	r0, r3
 8000f3c:	3801      	subs	r0, #1
 8000f3e:	e010      	b.n	8000f62 <__lesf2+0x5e>
 8000f40:	2d00      	cmp	r5, #0
 8000f42:	d10d      	bne.n	8000f60 <__lesf2+0x5c>
 8000f44:	2a00      	cmp	r2, #0
 8000f46:	d120      	bne.n	8000f8a <__lesf2+0x86>
 8000f48:	2c00      	cmp	r4, #0
 8000f4a:	d11e      	bne.n	8000f8a <__lesf2+0x86>
 8000f4c:	2900      	cmp	r1, #0
 8000f4e:	d023      	beq.n	8000f98 <__lesf2+0x94>
 8000f50:	0008      	movs	r0, r1
 8000f52:	e006      	b.n	8000f62 <__lesf2+0x5e>
 8000f54:	2c00      	cmp	r4, #0
 8000f56:	d103      	bne.n	8000f60 <__lesf2+0x5c>
 8000f58:	28ff      	cmp	r0, #255	@ 0xff
 8000f5a:	d1ec      	bne.n	8000f36 <__lesf2+0x32>
 8000f5c:	2d00      	cmp	r5, #0
 8000f5e:	d017      	beq.n	8000f90 <__lesf2+0x8c>
 8000f60:	2002      	movs	r0, #2
 8000f62:	bd30      	pop	{r4, r5, pc}
 8000f64:	2800      	cmp	r0, #0
 8000f66:	d0e6      	beq.n	8000f36 <__lesf2+0x32>
 8000f68:	428b      	cmp	r3, r1
 8000f6a:	d1e4      	bne.n	8000f36 <__lesf2+0x32>
 8000f6c:	4282      	cmp	r2, r0
 8000f6e:	dce2      	bgt.n	8000f36 <__lesf2+0x32>
 8000f70:	db04      	blt.n	8000f7c <__lesf2+0x78>
 8000f72:	42ac      	cmp	r4, r5
 8000f74:	d8df      	bhi.n	8000f36 <__lesf2+0x32>
 8000f76:	2000      	movs	r0, #0
 8000f78:	42ac      	cmp	r4, r5
 8000f7a:	d2f2      	bcs.n	8000f62 <__lesf2+0x5e>
 8000f7c:	2b00      	cmp	r3, #0
 8000f7e:	d00b      	beq.n	8000f98 <__lesf2+0x94>
 8000f80:	0018      	movs	r0, r3
 8000f82:	e7ee      	b.n	8000f62 <__lesf2+0x5e>
 8000f84:	2c00      	cmp	r4, #0
 8000f86:	d0ec      	beq.n	8000f62 <__lesf2+0x5e>
 8000f88:	e7d5      	b.n	8000f36 <__lesf2+0x32>
 8000f8a:	428b      	cmp	r3, r1
 8000f8c:	d1d3      	bne.n	8000f36 <__lesf2+0x32>
 8000f8e:	e7f5      	b.n	8000f7c <__lesf2+0x78>
 8000f90:	2000      	movs	r0, #0
 8000f92:	428b      	cmp	r3, r1
 8000f94:	d0e5      	beq.n	8000f62 <__lesf2+0x5e>
 8000f96:	e7ce      	b.n	8000f36 <__lesf2+0x32>
 8000f98:	2001      	movs	r0, #1
 8000f9a:	4240      	negs	r0, r0
 8000f9c:	e7e1      	b.n	8000f62 <__lesf2+0x5e>
 8000f9e:	46c0      	nop			@ (mov r8, r8)

08000fa0 <__aeabi_fmul>:
 8000fa0:	b5f0      	push	{r4, r5, r6, r7, lr}
 8000fa2:	464f      	mov	r7, r9
 8000fa4:	4646      	mov	r6, r8
 8000fa6:	46d6      	mov	lr, sl
 8000fa8:	0243      	lsls	r3, r0, #9
 8000faa:	0a5b      	lsrs	r3, r3, #9
 8000fac:	0045      	lsls	r5, r0, #1
 8000fae:	b5c0      	push	{r6, r7, lr}
 8000fb0:	4699      	mov	r9, r3
 8000fb2:	1c0f      	adds	r7, r1, #0
 8000fb4:	0e2d      	lsrs	r5, r5, #24
 8000fb6:	0fc6      	lsrs	r6, r0, #31
 8000fb8:	2d00      	cmp	r5, #0
 8000fba:	d100      	bne.n	8000fbe <__aeabi_fmul+0x1e>
 8000fbc:	e088      	b.n	80010d0 <__aeabi_fmul+0x130>
 8000fbe:	2dff      	cmp	r5, #255	@ 0xff
 8000fc0:	d100      	bne.n	8000fc4 <__aeabi_fmul+0x24>
 8000fc2:	e08d      	b.n	80010e0 <__aeabi_fmul+0x140>
 8000fc4:	2280      	movs	r2, #128	@ 0x80
 8000fc6:	00db      	lsls	r3, r3, #3
 8000fc8:	04d2      	lsls	r2, r2, #19
 8000fca:	431a      	orrs	r2, r3
 8000fcc:	2300      	movs	r3, #0
 8000fce:	4691      	mov	r9, r2
 8000fd0:	4698      	mov	r8, r3
 8000fd2:	469a      	mov	sl, r3
 8000fd4:	3d7f      	subs	r5, #127	@ 0x7f
 8000fd6:	027c      	lsls	r4, r7, #9
 8000fd8:	007b      	lsls	r3, r7, #1
 8000fda:	0a64      	lsrs	r4, r4, #9
 8000fdc:	0e1b      	lsrs	r3, r3, #24
 8000fde:	0fff      	lsrs	r7, r7, #31
 8000fe0:	2b00      	cmp	r3, #0
 8000fe2:	d068      	beq.n	80010b6 <__aeabi_fmul+0x116>
 8000fe4:	2bff      	cmp	r3, #255	@ 0xff
 8000fe6:	d021      	beq.n	800102c <__aeabi_fmul+0x8c>
 8000fe8:	2280      	movs	r2, #128	@ 0x80
 8000fea:	00e4      	lsls	r4, r4, #3
 8000fec:	04d2      	lsls	r2, r2, #19
 8000fee:	4314      	orrs	r4, r2
 8000ff0:	4642      	mov	r2, r8
 8000ff2:	3b7f      	subs	r3, #127	@ 0x7f
 8000ff4:	195b      	adds	r3, r3, r5
 8000ff6:	2100      	movs	r1, #0
 8000ff8:	1c5d      	adds	r5, r3, #1
 8000ffa:	2a0a      	cmp	r2, #10
 8000ffc:	dc2e      	bgt.n	800105c <__aeabi_fmul+0xbc>
 8000ffe:	407e      	eors	r6, r7
 8001000:	4642      	mov	r2, r8
 8001002:	2a02      	cmp	r2, #2
 8001004:	dc23      	bgt.n	800104e <__aeabi_fmul+0xae>
 8001006:	3a01      	subs	r2, #1
 8001008:	2a01      	cmp	r2, #1
 800100a:	d900      	bls.n	800100e <__aeabi_fmul+0x6e>
 800100c:	e0bd      	b.n	800118a <__aeabi_fmul+0x1ea>
 800100e:	2902      	cmp	r1, #2
 8001010:	d06e      	beq.n	80010f0 <__aeabi_fmul+0x150>
 8001012:	2901      	cmp	r1, #1
 8001014:	d12c      	bne.n	8001070 <__aeabi_fmul+0xd0>
 8001016:	2000      	movs	r0, #0
 8001018:	2200      	movs	r2, #0
 800101a:	05c0      	lsls	r0, r0, #23
 800101c:	07f6      	lsls	r6, r6, #31
 800101e:	4310      	orrs	r0, r2
 8001020:	4330      	orrs	r0, r6
 8001022:	bce0      	pop	{r5, r6, r7}
 8001024:	46ba      	mov	sl, r7
 8001026:	46b1      	mov	r9, r6
 8001028:	46a8      	mov	r8, r5
 800102a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800102c:	002b      	movs	r3, r5
 800102e:	33ff      	adds	r3, #255	@ 0xff
 8001030:	2c00      	cmp	r4, #0
 8001032:	d065      	beq.n	8001100 <__aeabi_fmul+0x160>
 8001034:	2203      	movs	r2, #3
 8001036:	4641      	mov	r1, r8
 8001038:	4311      	orrs	r1, r2
 800103a:	0032      	movs	r2, r6
 800103c:	3501      	adds	r5, #1
 800103e:	4688      	mov	r8, r1
 8001040:	407a      	eors	r2, r7
 8001042:	35ff      	adds	r5, #255	@ 0xff
 8001044:	290a      	cmp	r1, #10
 8001046:	dd00      	ble.n	800104a <__aeabi_fmul+0xaa>
 8001048:	e0d8      	b.n	80011fc <__aeabi_fmul+0x25c>
 800104a:	0016      	movs	r6, r2
 800104c:	2103      	movs	r1, #3
 800104e:	4640      	mov	r0, r8
 8001050:	2201      	movs	r2, #1
 8001052:	4082      	lsls	r2, r0
 8001054:	20a6      	movs	r0, #166	@ 0xa6
 8001056:	00c0      	lsls	r0, r0, #3
 8001058:	4202      	tst	r2, r0
 800105a:	d020      	beq.n	800109e <__aeabi_fmul+0xfe>
 800105c:	4653      	mov	r3, sl
 800105e:	2b02      	cmp	r3, #2
 8001060:	d046      	beq.n	80010f0 <__aeabi_fmul+0x150>
 8001062:	2b03      	cmp	r3, #3
 8001064:	d100      	bne.n	8001068 <__aeabi_fmul+0xc8>
 8001066:	e0bb      	b.n	80011e0 <__aeabi_fmul+0x240>
 8001068:	4651      	mov	r1, sl
 800106a:	464c      	mov	r4, r9
 800106c:	2901      	cmp	r1, #1
 800106e:	d0d2      	beq.n	8001016 <__aeabi_fmul+0x76>
 8001070:	002b      	movs	r3, r5
 8001072:	337f      	adds	r3, #127	@ 0x7f
 8001074:	2b00      	cmp	r3, #0
 8001076:	dd70      	ble.n	800115a <__aeabi_fmul+0x1ba>
 8001078:	0762      	lsls	r2, r4, #29
 800107a:	d004      	beq.n	8001086 <__aeabi_fmul+0xe6>
 800107c:	220f      	movs	r2, #15
 800107e:	4022      	ands	r2, r4
 8001080:	2a04      	cmp	r2, #4
 8001082:	d000      	beq.n	8001086 <__aeabi_fmul+0xe6>
 8001084:	3404      	adds	r4, #4
 8001086:	0122      	lsls	r2, r4, #4
 8001088:	d503      	bpl.n	8001092 <__aeabi_fmul+0xf2>
 800108a:	4b63      	ldr	r3, [pc, #396]	@ (8001218 <__aeabi_fmul+0x278>)
 800108c:	401c      	ands	r4, r3
 800108e:	002b      	movs	r3, r5
 8001090:	3380      	adds	r3, #128	@ 0x80
 8001092:	2bfe      	cmp	r3, #254	@ 0xfe
 8001094:	dc2c      	bgt.n	80010f0 <__aeabi_fmul+0x150>
 8001096:	01a2      	lsls	r2, r4, #6
 8001098:	0a52      	lsrs	r2, r2, #9
 800109a:	b2d8      	uxtb	r0, r3
 800109c:	e7bd      	b.n	800101a <__aeabi_fmul+0x7a>
 800109e:	2090      	movs	r0, #144	@ 0x90
 80010a0:	0080      	lsls	r0, r0, #2
 80010a2:	4202      	tst	r2, r0
 80010a4:	d127      	bne.n	80010f6 <__aeabi_fmul+0x156>
 80010a6:	38b9      	subs	r0, #185	@ 0xb9
 80010a8:	38ff      	subs	r0, #255	@ 0xff
 80010aa:	4210      	tst	r0, r2
 80010ac:	d06d      	beq.n	800118a <__aeabi_fmul+0x1ea>
 80010ae:	003e      	movs	r6, r7
 80010b0:	46a1      	mov	r9, r4
 80010b2:	468a      	mov	sl, r1
 80010b4:	e7d2      	b.n	800105c <__aeabi_fmul+0xbc>
 80010b6:	2c00      	cmp	r4, #0
 80010b8:	d141      	bne.n	800113e <__aeabi_fmul+0x19e>
 80010ba:	2301      	movs	r3, #1
 80010bc:	4642      	mov	r2, r8
 80010be:	431a      	orrs	r2, r3
 80010c0:	4690      	mov	r8, r2
 80010c2:	002b      	movs	r3, r5
 80010c4:	4642      	mov	r2, r8
 80010c6:	2101      	movs	r1, #1
 80010c8:	1c5d      	adds	r5, r3, #1
 80010ca:	2a0a      	cmp	r2, #10
 80010cc:	dd97      	ble.n	8000ffe <__aeabi_fmul+0x5e>
 80010ce:	e7c5      	b.n	800105c <__aeabi_fmul+0xbc>
 80010d0:	2b00      	cmp	r3, #0
 80010d2:	d126      	bne.n	8001122 <__aeabi_fmul+0x182>
 80010d4:	2304      	movs	r3, #4
 80010d6:	4698      	mov	r8, r3
 80010d8:	3b03      	subs	r3, #3
 80010da:	2500      	movs	r5, #0
 80010dc:	469a      	mov	sl, r3
 80010de:	e77a      	b.n	8000fd6 <__aeabi_fmul+0x36>
 80010e0:	2b00      	cmp	r3, #0
 80010e2:	d118      	bne.n	8001116 <__aeabi_fmul+0x176>
 80010e4:	2308      	movs	r3, #8
 80010e6:	4698      	mov	r8, r3
 80010e8:	3b06      	subs	r3, #6
 80010ea:	25ff      	movs	r5, #255	@ 0xff
 80010ec:	469a      	mov	sl, r3
 80010ee:	e772      	b.n	8000fd6 <__aeabi_fmul+0x36>
 80010f0:	20ff      	movs	r0, #255	@ 0xff
 80010f2:	2200      	movs	r2, #0
 80010f4:	e791      	b.n	800101a <__aeabi_fmul+0x7a>
 80010f6:	2280      	movs	r2, #128	@ 0x80
 80010f8:	2600      	movs	r6, #0
 80010fa:	20ff      	movs	r0, #255	@ 0xff
 80010fc:	03d2      	lsls	r2, r2, #15
 80010fe:	e78c      	b.n	800101a <__aeabi_fmul+0x7a>
 8001100:	4641      	mov	r1, r8
 8001102:	2202      	movs	r2, #2
 8001104:	3501      	adds	r5, #1
 8001106:	4311      	orrs	r1, r2
 8001108:	4688      	mov	r8, r1
 800110a:	35ff      	adds	r5, #255	@ 0xff
 800110c:	290a      	cmp	r1, #10
 800110e:	dca5      	bgt.n	800105c <__aeabi_fmul+0xbc>
 8001110:	2102      	movs	r1, #2
 8001112:	407e      	eors	r6, r7
 8001114:	e774      	b.n	8001000 <__aeabi_fmul+0x60>
 8001116:	230c      	movs	r3, #12
 8001118:	4698      	mov	r8, r3
 800111a:	3b09      	subs	r3, #9
 800111c:	25ff      	movs	r5, #255	@ 0xff
 800111e:	469a      	mov	sl, r3
 8001120:	e759      	b.n	8000fd6 <__aeabi_fmul+0x36>
 8001122:	0018      	movs	r0, r3
 8001124:	f002 fa6a 	bl	80035fc <__clzsi2>
 8001128:	464a      	mov	r2, r9
 800112a:	1f43      	subs	r3, r0, #5
 800112c:	2576      	movs	r5, #118	@ 0x76
 800112e:	409a      	lsls	r2, r3
 8001130:	2300      	movs	r3, #0
 8001132:	426d      	negs	r5, r5
 8001134:	4691      	mov	r9, r2
 8001136:	4698      	mov	r8, r3
 8001138:	469a      	mov	sl, r3
 800113a:	1a2d      	subs	r5, r5, r0
 800113c:	e74b      	b.n	8000fd6 <__aeabi_fmul+0x36>
 800113e:	0020      	movs	r0, r4
 8001140:	f002 fa5c 	bl	80035fc <__clzsi2>
 8001144:	4642      	mov	r2, r8
 8001146:	1f43      	subs	r3, r0, #5
 8001148:	409c      	lsls	r4, r3
 800114a:	1a2b      	subs	r3, r5, r0
 800114c:	3b76      	subs	r3, #118	@ 0x76
 800114e:	2100      	movs	r1, #0
 8001150:	1c5d      	adds	r5, r3, #1
 8001152:	2a0a      	cmp	r2, #10
 8001154:	dc00      	bgt.n	8001158 <__aeabi_fmul+0x1b8>
 8001156:	e752      	b.n	8000ffe <__aeabi_fmul+0x5e>
 8001158:	e780      	b.n	800105c <__aeabi_fmul+0xbc>
 800115a:	2201      	movs	r2, #1
 800115c:	1ad3      	subs	r3, r2, r3
 800115e:	2b1b      	cmp	r3, #27
 8001160:	dd00      	ble.n	8001164 <__aeabi_fmul+0x1c4>
 8001162:	e758      	b.n	8001016 <__aeabi_fmul+0x76>
 8001164:	359e      	adds	r5, #158	@ 0x9e
 8001166:	0022      	movs	r2, r4
 8001168:	40ac      	lsls	r4, r5
 800116a:	40da      	lsrs	r2, r3
 800116c:	1e63      	subs	r3, r4, #1
 800116e:	419c      	sbcs	r4, r3
 8001170:	4322      	orrs	r2, r4
 8001172:	0753      	lsls	r3, r2, #29
 8001174:	d004      	beq.n	8001180 <__aeabi_fmul+0x1e0>
 8001176:	230f      	movs	r3, #15
 8001178:	4013      	ands	r3, r2
 800117a:	2b04      	cmp	r3, #4
 800117c:	d000      	beq.n	8001180 <__aeabi_fmul+0x1e0>
 800117e:	3204      	adds	r2, #4
 8001180:	0153      	lsls	r3, r2, #5
 8001182:	d537      	bpl.n	80011f4 <__aeabi_fmul+0x254>
 8001184:	2001      	movs	r0, #1
 8001186:	2200      	movs	r2, #0
 8001188:	e747      	b.n	800101a <__aeabi_fmul+0x7a>
 800118a:	0c21      	lsrs	r1, r4, #16
 800118c:	464a      	mov	r2, r9
 800118e:	0424      	lsls	r4, r4, #16
 8001190:	0c24      	lsrs	r4, r4, #16
 8001192:	0027      	movs	r7, r4
 8001194:	0c10      	lsrs	r0, r2, #16
 8001196:	0412      	lsls	r2, r2, #16
 8001198:	0c12      	lsrs	r2, r2, #16
 800119a:	4344      	muls	r4, r0
 800119c:	4357      	muls	r7, r2
 800119e:	4348      	muls	r0, r1
 80011a0:	4351      	muls	r1, r2
 80011a2:	0c3a      	lsrs	r2, r7, #16
 80011a4:	1909      	adds	r1, r1, r4
 80011a6:	1852      	adds	r2, r2, r1
 80011a8:	4294      	cmp	r4, r2
 80011aa:	d903      	bls.n	80011b4 <__aeabi_fmul+0x214>
 80011ac:	2180      	movs	r1, #128	@ 0x80
 80011ae:	0249      	lsls	r1, r1, #9
 80011b0:	468c      	mov	ip, r1
 80011b2:	4460      	add	r0, ip
 80011b4:	043f      	lsls	r7, r7, #16
 80011b6:	0411      	lsls	r1, r2, #16
 80011b8:	0c3f      	lsrs	r7, r7, #16
 80011ba:	19c9      	adds	r1, r1, r7
 80011bc:	018c      	lsls	r4, r1, #6
 80011be:	1e67      	subs	r7, r4, #1
 80011c0:	41bc      	sbcs	r4, r7
 80011c2:	0c12      	lsrs	r2, r2, #16
 80011c4:	0e89      	lsrs	r1, r1, #26
 80011c6:	1812      	adds	r2, r2, r0
 80011c8:	430c      	orrs	r4, r1
 80011ca:	0192      	lsls	r2, r2, #6
 80011cc:	4314      	orrs	r4, r2
 80011ce:	0112      	lsls	r2, r2, #4
 80011d0:	d50e      	bpl.n	80011f0 <__aeabi_fmul+0x250>
 80011d2:	2301      	movs	r3, #1
 80011d4:	0862      	lsrs	r2, r4, #1
 80011d6:	401c      	ands	r4, r3
 80011d8:	4314      	orrs	r4, r2
 80011da:	e749      	b.n	8001070 <__aeabi_fmul+0xd0>
 80011dc:	003e      	movs	r6, r7
 80011de:	46a1      	mov	r9, r4
 80011e0:	2280      	movs	r2, #128	@ 0x80
 80011e2:	464b      	mov	r3, r9
 80011e4:	03d2      	lsls	r2, r2, #15
 80011e6:	431a      	orrs	r2, r3
 80011e8:	0252      	lsls	r2, r2, #9
 80011ea:	20ff      	movs	r0, #255	@ 0xff
 80011ec:	0a52      	lsrs	r2, r2, #9
 80011ee:	e714      	b.n	800101a <__aeabi_fmul+0x7a>
 80011f0:	001d      	movs	r5, r3
 80011f2:	e73d      	b.n	8001070 <__aeabi_fmul+0xd0>
 80011f4:	0192      	lsls	r2, r2, #6
 80011f6:	2000      	movs	r0, #0
 80011f8:	0a52      	lsrs	r2, r2, #9
 80011fa:	e70e      	b.n	800101a <__aeabi_fmul+0x7a>
 80011fc:	290f      	cmp	r1, #15
 80011fe:	d1ed      	bne.n	80011dc <__aeabi_fmul+0x23c>
 8001200:	2280      	movs	r2, #128	@ 0x80
 8001202:	464b      	mov	r3, r9
 8001204:	03d2      	lsls	r2, r2, #15
 8001206:	4213      	tst	r3, r2
 8001208:	d0ea      	beq.n	80011e0 <__aeabi_fmul+0x240>
 800120a:	4214      	tst	r4, r2
 800120c:	d1e8      	bne.n	80011e0 <__aeabi_fmul+0x240>
 800120e:	003e      	movs	r6, r7
 8001210:	20ff      	movs	r0, #255	@ 0xff
 8001212:	4322      	orrs	r2, r4
 8001214:	e701      	b.n	800101a <__aeabi_fmul+0x7a>
 8001216:	46c0      	nop			@ (mov r8, r8)
 8001218:	f7ffffff 	.word	0xf7ffffff

0800121c <__aeabi_fsub>:
 800121c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800121e:	4647      	mov	r7, r8
 8001220:	46ce      	mov	lr, r9
 8001222:	024e      	lsls	r6, r1, #9
 8001224:	0243      	lsls	r3, r0, #9
 8001226:	0045      	lsls	r5, r0, #1
 8001228:	0a72      	lsrs	r2, r6, #9
 800122a:	0fc4      	lsrs	r4, r0, #31
 800122c:	0048      	lsls	r0, r1, #1
 800122e:	b580      	push	{r7, lr}
 8001230:	4694      	mov	ip, r2
 8001232:	0a5f      	lsrs	r7, r3, #9
 8001234:	0e2d      	lsrs	r5, r5, #24
 8001236:	099b      	lsrs	r3, r3, #6
 8001238:	0e00      	lsrs	r0, r0, #24
 800123a:	0fc9      	lsrs	r1, r1, #31
 800123c:	09b6      	lsrs	r6, r6, #6
 800123e:	28ff      	cmp	r0, #255	@ 0xff
 8001240:	d024      	beq.n	800128c <__aeabi_fsub+0x70>
 8001242:	2201      	movs	r2, #1
 8001244:	4051      	eors	r1, r2
 8001246:	1a2a      	subs	r2, r5, r0
 8001248:	428c      	cmp	r4, r1
 800124a:	d00f      	beq.n	800126c <__aeabi_fsub+0x50>
 800124c:	2a00      	cmp	r2, #0
 800124e:	dc00      	bgt.n	8001252 <__aeabi_fsub+0x36>
 8001250:	e16a      	b.n	8001528 <__aeabi_fsub+0x30c>
 8001252:	2800      	cmp	r0, #0
 8001254:	d135      	bne.n	80012c2 <__aeabi_fsub+0xa6>
 8001256:	2e00      	cmp	r6, #0
 8001258:	d100      	bne.n	800125c <__aeabi_fsub+0x40>
 800125a:	e0a2      	b.n	80013a2 <__aeabi_fsub+0x186>
 800125c:	1e51      	subs	r1, r2, #1
 800125e:	2a01      	cmp	r2, #1
 8001260:	d100      	bne.n	8001264 <__aeabi_fsub+0x48>
 8001262:	e124      	b.n	80014ae <__aeabi_fsub+0x292>
 8001264:	2aff      	cmp	r2, #255	@ 0xff
 8001266:	d021      	beq.n	80012ac <__aeabi_fsub+0x90>
 8001268:	000a      	movs	r2, r1
 800126a:	e02f      	b.n	80012cc <__aeabi_fsub+0xb0>
 800126c:	2a00      	cmp	r2, #0
 800126e:	dc00      	bgt.n	8001272 <__aeabi_fsub+0x56>
 8001270:	e167      	b.n	8001542 <__aeabi_fsub+0x326>
 8001272:	2800      	cmp	r0, #0
 8001274:	d05e      	beq.n	8001334 <__aeabi_fsub+0x118>
 8001276:	2dff      	cmp	r5, #255	@ 0xff
 8001278:	d018      	beq.n	80012ac <__aeabi_fsub+0x90>
 800127a:	2180      	movs	r1, #128	@ 0x80
 800127c:	04c9      	lsls	r1, r1, #19
 800127e:	430e      	orrs	r6, r1
 8001280:	2a1b      	cmp	r2, #27
 8001282:	dc00      	bgt.n	8001286 <__aeabi_fsub+0x6a>
 8001284:	e076      	b.n	8001374 <__aeabi_fsub+0x158>
 8001286:	002a      	movs	r2, r5
 8001288:	3301      	adds	r3, #1
 800128a:	e032      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800128c:	002a      	movs	r2, r5
 800128e:	3aff      	subs	r2, #255	@ 0xff
 8001290:	4691      	mov	r9, r2
 8001292:	2e00      	cmp	r6, #0
 8001294:	d042      	beq.n	800131c <__aeabi_fsub+0x100>
 8001296:	428c      	cmp	r4, r1
 8001298:	d055      	beq.n	8001346 <__aeabi_fsub+0x12a>
 800129a:	464a      	mov	r2, r9
 800129c:	2a00      	cmp	r2, #0
 800129e:	d100      	bne.n	80012a2 <__aeabi_fsub+0x86>
 80012a0:	e09c      	b.n	80013dc <__aeabi_fsub+0x1c0>
 80012a2:	2d00      	cmp	r5, #0
 80012a4:	d100      	bne.n	80012a8 <__aeabi_fsub+0x8c>
 80012a6:	e077      	b.n	8001398 <__aeabi_fsub+0x17c>
 80012a8:	000c      	movs	r4, r1
 80012aa:	0033      	movs	r3, r6
 80012ac:	08db      	lsrs	r3, r3, #3
 80012ae:	2b00      	cmp	r3, #0
 80012b0:	d100      	bne.n	80012b4 <__aeabi_fsub+0x98>
 80012b2:	e06e      	b.n	8001392 <__aeabi_fsub+0x176>
 80012b4:	2280      	movs	r2, #128	@ 0x80
 80012b6:	03d2      	lsls	r2, r2, #15
 80012b8:	4313      	orrs	r3, r2
 80012ba:	025b      	lsls	r3, r3, #9
 80012bc:	20ff      	movs	r0, #255	@ 0xff
 80012be:	0a5b      	lsrs	r3, r3, #9
 80012c0:	e024      	b.n	800130c <__aeabi_fsub+0xf0>
 80012c2:	2dff      	cmp	r5, #255	@ 0xff
 80012c4:	d0f2      	beq.n	80012ac <__aeabi_fsub+0x90>
 80012c6:	2180      	movs	r1, #128	@ 0x80
 80012c8:	04c9      	lsls	r1, r1, #19
 80012ca:	430e      	orrs	r6, r1
 80012cc:	2101      	movs	r1, #1
 80012ce:	2a1b      	cmp	r2, #27
 80012d0:	dc08      	bgt.n	80012e4 <__aeabi_fsub+0xc8>
 80012d2:	0031      	movs	r1, r6
 80012d4:	2020      	movs	r0, #32
 80012d6:	40d1      	lsrs	r1, r2
 80012d8:	1a82      	subs	r2, r0, r2
 80012da:	4096      	lsls	r6, r2
 80012dc:	0032      	movs	r2, r6
 80012de:	1e50      	subs	r0, r2, #1
 80012e0:	4182      	sbcs	r2, r0
 80012e2:	4311      	orrs	r1, r2
 80012e4:	1a5b      	subs	r3, r3, r1
 80012e6:	015a      	lsls	r2, r3, #5
 80012e8:	d460      	bmi.n	80013ac <__aeabi_fsub+0x190>
 80012ea:	2107      	movs	r1, #7
 80012ec:	002a      	movs	r2, r5
 80012ee:	4019      	ands	r1, r3
 80012f0:	d057      	beq.n	80013a2 <__aeabi_fsub+0x186>
 80012f2:	210f      	movs	r1, #15
 80012f4:	4019      	ands	r1, r3
 80012f6:	2904      	cmp	r1, #4
 80012f8:	d000      	beq.n	80012fc <__aeabi_fsub+0xe0>
 80012fa:	3304      	adds	r3, #4
 80012fc:	0159      	lsls	r1, r3, #5
 80012fe:	d550      	bpl.n	80013a2 <__aeabi_fsub+0x186>
 8001300:	1c50      	adds	r0, r2, #1
 8001302:	2afe      	cmp	r2, #254	@ 0xfe
 8001304:	d045      	beq.n	8001392 <__aeabi_fsub+0x176>
 8001306:	019b      	lsls	r3, r3, #6
 8001308:	b2c0      	uxtb	r0, r0
 800130a:	0a5b      	lsrs	r3, r3, #9
 800130c:	05c0      	lsls	r0, r0, #23
 800130e:	4318      	orrs	r0, r3
 8001310:	07e4      	lsls	r4, r4, #31
 8001312:	4320      	orrs	r0, r4
 8001314:	bcc0      	pop	{r6, r7}
 8001316:	46b9      	mov	r9, r7
 8001318:	46b0      	mov	r8, r6
 800131a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800131c:	2201      	movs	r2, #1
 800131e:	4051      	eors	r1, r2
 8001320:	428c      	cmp	r4, r1
 8001322:	d1ba      	bne.n	800129a <__aeabi_fsub+0x7e>
 8001324:	464a      	mov	r2, r9
 8001326:	2a00      	cmp	r2, #0
 8001328:	d010      	beq.n	800134c <__aeabi_fsub+0x130>
 800132a:	2d00      	cmp	r5, #0
 800132c:	d100      	bne.n	8001330 <__aeabi_fsub+0x114>
 800132e:	e098      	b.n	8001462 <__aeabi_fsub+0x246>
 8001330:	2300      	movs	r3, #0
 8001332:	e7bb      	b.n	80012ac <__aeabi_fsub+0x90>
 8001334:	2e00      	cmp	r6, #0
 8001336:	d034      	beq.n	80013a2 <__aeabi_fsub+0x186>
 8001338:	1e51      	subs	r1, r2, #1
 800133a:	2a01      	cmp	r2, #1
 800133c:	d06e      	beq.n	800141c <__aeabi_fsub+0x200>
 800133e:	2aff      	cmp	r2, #255	@ 0xff
 8001340:	d0b4      	beq.n	80012ac <__aeabi_fsub+0x90>
 8001342:	000a      	movs	r2, r1
 8001344:	e79c      	b.n	8001280 <__aeabi_fsub+0x64>
 8001346:	2a00      	cmp	r2, #0
 8001348:	d000      	beq.n	800134c <__aeabi_fsub+0x130>
 800134a:	e088      	b.n	800145e <__aeabi_fsub+0x242>
 800134c:	20fe      	movs	r0, #254	@ 0xfe
 800134e:	1c6a      	adds	r2, r5, #1
 8001350:	4210      	tst	r0, r2
 8001352:	d000      	beq.n	8001356 <__aeabi_fsub+0x13a>
 8001354:	e092      	b.n	800147c <__aeabi_fsub+0x260>
 8001356:	2d00      	cmp	r5, #0
 8001358:	d000      	beq.n	800135c <__aeabi_fsub+0x140>
 800135a:	e0a4      	b.n	80014a6 <__aeabi_fsub+0x28a>
 800135c:	2b00      	cmp	r3, #0
 800135e:	d100      	bne.n	8001362 <__aeabi_fsub+0x146>
 8001360:	e0cb      	b.n	80014fa <__aeabi_fsub+0x2de>
 8001362:	2e00      	cmp	r6, #0
 8001364:	d000      	beq.n	8001368 <__aeabi_fsub+0x14c>
 8001366:	e0ca      	b.n	80014fe <__aeabi_fsub+0x2e2>
 8001368:	2200      	movs	r2, #0
 800136a:	08db      	lsrs	r3, r3, #3
 800136c:	025b      	lsls	r3, r3, #9
 800136e:	0a5b      	lsrs	r3, r3, #9
 8001370:	b2d0      	uxtb	r0, r2
 8001372:	e7cb      	b.n	800130c <__aeabi_fsub+0xf0>
 8001374:	0031      	movs	r1, r6
 8001376:	2020      	movs	r0, #32
 8001378:	40d1      	lsrs	r1, r2
 800137a:	1a82      	subs	r2, r0, r2
 800137c:	4096      	lsls	r6, r2
 800137e:	0032      	movs	r2, r6
 8001380:	1e50      	subs	r0, r2, #1
 8001382:	4182      	sbcs	r2, r0
 8001384:	430a      	orrs	r2, r1
 8001386:	189b      	adds	r3, r3, r2
 8001388:	015a      	lsls	r2, r3, #5
 800138a:	d5ae      	bpl.n	80012ea <__aeabi_fsub+0xce>
 800138c:	1c6a      	adds	r2, r5, #1
 800138e:	2dfe      	cmp	r5, #254	@ 0xfe
 8001390:	d14a      	bne.n	8001428 <__aeabi_fsub+0x20c>
 8001392:	20ff      	movs	r0, #255	@ 0xff
 8001394:	2300      	movs	r3, #0
 8001396:	e7b9      	b.n	800130c <__aeabi_fsub+0xf0>
 8001398:	22ff      	movs	r2, #255	@ 0xff
 800139a:	2b00      	cmp	r3, #0
 800139c:	d14b      	bne.n	8001436 <__aeabi_fsub+0x21a>
 800139e:	000c      	movs	r4, r1
 80013a0:	0033      	movs	r3, r6
 80013a2:	08db      	lsrs	r3, r3, #3
 80013a4:	2aff      	cmp	r2, #255	@ 0xff
 80013a6:	d100      	bne.n	80013aa <__aeabi_fsub+0x18e>
 80013a8:	e781      	b.n	80012ae <__aeabi_fsub+0x92>
 80013aa:	e7df      	b.n	800136c <__aeabi_fsub+0x150>
 80013ac:	019f      	lsls	r7, r3, #6
 80013ae:	09bf      	lsrs	r7, r7, #6
 80013b0:	0038      	movs	r0, r7
 80013b2:	f002 f923 	bl	80035fc <__clzsi2>
 80013b6:	3805      	subs	r0, #5
 80013b8:	4087      	lsls	r7, r0
 80013ba:	4285      	cmp	r5, r0
 80013bc:	dc21      	bgt.n	8001402 <__aeabi_fsub+0x1e6>
 80013be:	003b      	movs	r3, r7
 80013c0:	2120      	movs	r1, #32
 80013c2:	1b42      	subs	r2, r0, r5
 80013c4:	3201      	adds	r2, #1
 80013c6:	40d3      	lsrs	r3, r2
 80013c8:	1a8a      	subs	r2, r1, r2
 80013ca:	4097      	lsls	r7, r2
 80013cc:	1e7a      	subs	r2, r7, #1
 80013ce:	4197      	sbcs	r7, r2
 80013d0:	2200      	movs	r2, #0
 80013d2:	433b      	orrs	r3, r7
 80013d4:	0759      	lsls	r1, r3, #29
 80013d6:	d000      	beq.n	80013da <__aeabi_fsub+0x1be>
 80013d8:	e78b      	b.n	80012f2 <__aeabi_fsub+0xd6>
 80013da:	e78f      	b.n	80012fc <__aeabi_fsub+0xe0>
 80013dc:	20fe      	movs	r0, #254	@ 0xfe
 80013de:	1c6a      	adds	r2, r5, #1
 80013e0:	4210      	tst	r0, r2
 80013e2:	d112      	bne.n	800140a <__aeabi_fsub+0x1ee>
 80013e4:	2d00      	cmp	r5, #0
 80013e6:	d152      	bne.n	800148e <__aeabi_fsub+0x272>
 80013e8:	2b00      	cmp	r3, #0
 80013ea:	d07c      	beq.n	80014e6 <__aeabi_fsub+0x2ca>
 80013ec:	2e00      	cmp	r6, #0
 80013ee:	d0bb      	beq.n	8001368 <__aeabi_fsub+0x14c>
 80013f0:	1b9a      	subs	r2, r3, r6
 80013f2:	0150      	lsls	r0, r2, #5
 80013f4:	d400      	bmi.n	80013f8 <__aeabi_fsub+0x1dc>
 80013f6:	e08b      	b.n	8001510 <__aeabi_fsub+0x2f4>
 80013f8:	2401      	movs	r4, #1
 80013fa:	2200      	movs	r2, #0
 80013fc:	1af3      	subs	r3, r6, r3
 80013fe:	400c      	ands	r4, r1
 8001400:	e7e8      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 8001402:	4b56      	ldr	r3, [pc, #344]	@ (800155c <__aeabi_fsub+0x340>)
 8001404:	1a2a      	subs	r2, r5, r0
 8001406:	403b      	ands	r3, r7
 8001408:	e7e4      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 800140a:	1b9f      	subs	r7, r3, r6
 800140c:	017a      	lsls	r2, r7, #5
 800140e:	d446      	bmi.n	800149e <__aeabi_fsub+0x282>
 8001410:	2f00      	cmp	r7, #0
 8001412:	d1cd      	bne.n	80013b0 <__aeabi_fsub+0x194>
 8001414:	2400      	movs	r4, #0
 8001416:	2000      	movs	r0, #0
 8001418:	2300      	movs	r3, #0
 800141a:	e777      	b.n	800130c <__aeabi_fsub+0xf0>
 800141c:	199b      	adds	r3, r3, r6
 800141e:	2501      	movs	r5, #1
 8001420:	3201      	adds	r2, #1
 8001422:	0159      	lsls	r1, r3, #5
 8001424:	d400      	bmi.n	8001428 <__aeabi_fsub+0x20c>
 8001426:	e760      	b.n	80012ea <__aeabi_fsub+0xce>
 8001428:	2101      	movs	r1, #1
 800142a:	484d      	ldr	r0, [pc, #308]	@ (8001560 <__aeabi_fsub+0x344>)
 800142c:	4019      	ands	r1, r3
 800142e:	085b      	lsrs	r3, r3, #1
 8001430:	4003      	ands	r3, r0
 8001432:	430b      	orrs	r3, r1
 8001434:	e7ce      	b.n	80013d4 <__aeabi_fsub+0x1b8>
 8001436:	1e57      	subs	r7, r2, #1
 8001438:	2a01      	cmp	r2, #1
 800143a:	d05a      	beq.n	80014f2 <__aeabi_fsub+0x2d6>
 800143c:	000c      	movs	r4, r1
 800143e:	2aff      	cmp	r2, #255	@ 0xff
 8001440:	d033      	beq.n	80014aa <__aeabi_fsub+0x28e>
 8001442:	2201      	movs	r2, #1
 8001444:	2f1b      	cmp	r7, #27
 8001446:	dc07      	bgt.n	8001458 <__aeabi_fsub+0x23c>
 8001448:	2120      	movs	r1, #32
 800144a:	1bc9      	subs	r1, r1, r7
 800144c:	001a      	movs	r2, r3
 800144e:	408b      	lsls	r3, r1
 8001450:	40fa      	lsrs	r2, r7
 8001452:	1e59      	subs	r1, r3, #1
 8001454:	418b      	sbcs	r3, r1
 8001456:	431a      	orrs	r2, r3
 8001458:	0005      	movs	r5, r0
 800145a:	1ab3      	subs	r3, r6, r2
 800145c:	e743      	b.n	80012e6 <__aeabi_fsub+0xca>
 800145e:	2d00      	cmp	r5, #0
 8001460:	d123      	bne.n	80014aa <__aeabi_fsub+0x28e>
 8001462:	22ff      	movs	r2, #255	@ 0xff
 8001464:	2b00      	cmp	r3, #0
 8001466:	d09b      	beq.n	80013a0 <__aeabi_fsub+0x184>
 8001468:	1e51      	subs	r1, r2, #1
 800146a:	2a01      	cmp	r2, #1
 800146c:	d0d6      	beq.n	800141c <__aeabi_fsub+0x200>
 800146e:	2aff      	cmp	r2, #255	@ 0xff
 8001470:	d01b      	beq.n	80014aa <__aeabi_fsub+0x28e>
 8001472:	291b      	cmp	r1, #27
 8001474:	dd2c      	ble.n	80014d0 <__aeabi_fsub+0x2b4>
 8001476:	0002      	movs	r2, r0
 8001478:	1c73      	adds	r3, r6, #1
 800147a:	e73a      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800147c:	2aff      	cmp	r2, #255	@ 0xff
 800147e:	d088      	beq.n	8001392 <__aeabi_fsub+0x176>
 8001480:	199b      	adds	r3, r3, r6
 8001482:	085b      	lsrs	r3, r3, #1
 8001484:	0759      	lsls	r1, r3, #29
 8001486:	d000      	beq.n	800148a <__aeabi_fsub+0x26e>
 8001488:	e733      	b.n	80012f2 <__aeabi_fsub+0xd6>
 800148a:	08db      	lsrs	r3, r3, #3
 800148c:	e76e      	b.n	800136c <__aeabi_fsub+0x150>
 800148e:	2b00      	cmp	r3, #0
 8001490:	d110      	bne.n	80014b4 <__aeabi_fsub+0x298>
 8001492:	2e00      	cmp	r6, #0
 8001494:	d043      	beq.n	800151e <__aeabi_fsub+0x302>
 8001496:	2401      	movs	r4, #1
 8001498:	0033      	movs	r3, r6
 800149a:	400c      	ands	r4, r1
 800149c:	e706      	b.n	80012ac <__aeabi_fsub+0x90>
 800149e:	2401      	movs	r4, #1
 80014a0:	1af7      	subs	r7, r6, r3
 80014a2:	400c      	ands	r4, r1
 80014a4:	e784      	b.n	80013b0 <__aeabi_fsub+0x194>
 80014a6:	2b00      	cmp	r3, #0
 80014a8:	d104      	bne.n	80014b4 <__aeabi_fsub+0x298>
 80014aa:	0033      	movs	r3, r6
 80014ac:	e6fe      	b.n	80012ac <__aeabi_fsub+0x90>
 80014ae:	2501      	movs	r5, #1
 80014b0:	1b9b      	subs	r3, r3, r6
 80014b2:	e718      	b.n	80012e6 <__aeabi_fsub+0xca>
 80014b4:	2e00      	cmp	r6, #0
 80014b6:	d100      	bne.n	80014ba <__aeabi_fsub+0x29e>
 80014b8:	e6f8      	b.n	80012ac <__aeabi_fsub+0x90>
 80014ba:	2280      	movs	r2, #128	@ 0x80
 80014bc:	03d2      	lsls	r2, r2, #15
 80014be:	4297      	cmp	r7, r2
 80014c0:	d304      	bcc.n	80014cc <__aeabi_fsub+0x2b0>
 80014c2:	4594      	cmp	ip, r2
 80014c4:	d202      	bcs.n	80014cc <__aeabi_fsub+0x2b0>
 80014c6:	2401      	movs	r4, #1
 80014c8:	0033      	movs	r3, r6
 80014ca:	400c      	ands	r4, r1
 80014cc:	08db      	lsrs	r3, r3, #3
 80014ce:	e6f1      	b.n	80012b4 <__aeabi_fsub+0x98>
 80014d0:	001a      	movs	r2, r3
 80014d2:	2520      	movs	r5, #32
 80014d4:	40ca      	lsrs	r2, r1
 80014d6:	1a69      	subs	r1, r5, r1
 80014d8:	408b      	lsls	r3, r1
 80014da:	1e59      	subs	r1, r3, #1
 80014dc:	418b      	sbcs	r3, r1
 80014de:	4313      	orrs	r3, r2
 80014e0:	0005      	movs	r5, r0
 80014e2:	199b      	adds	r3, r3, r6
 80014e4:	e750      	b.n	8001388 <__aeabi_fsub+0x16c>
 80014e6:	2e00      	cmp	r6, #0
 80014e8:	d094      	beq.n	8001414 <__aeabi_fsub+0x1f8>
 80014ea:	2401      	movs	r4, #1
 80014ec:	0033      	movs	r3, r6
 80014ee:	400c      	ands	r4, r1
 80014f0:	e73a      	b.n	8001368 <__aeabi_fsub+0x14c>
 80014f2:	000c      	movs	r4, r1
 80014f4:	2501      	movs	r5, #1
 80014f6:	1af3      	subs	r3, r6, r3
 80014f8:	e6f5      	b.n	80012e6 <__aeabi_fsub+0xca>
 80014fa:	0033      	movs	r3, r6
 80014fc:	e734      	b.n	8001368 <__aeabi_fsub+0x14c>
 80014fe:	199b      	adds	r3, r3, r6
 8001500:	2200      	movs	r2, #0
 8001502:	0159      	lsls	r1, r3, #5
 8001504:	d5c1      	bpl.n	800148a <__aeabi_fsub+0x26e>
 8001506:	4a15      	ldr	r2, [pc, #84]	@ (800155c <__aeabi_fsub+0x340>)
 8001508:	4013      	ands	r3, r2
 800150a:	08db      	lsrs	r3, r3, #3
 800150c:	2201      	movs	r2, #1
 800150e:	e72d      	b.n	800136c <__aeabi_fsub+0x150>
 8001510:	2a00      	cmp	r2, #0
 8001512:	d100      	bne.n	8001516 <__aeabi_fsub+0x2fa>
 8001514:	e77e      	b.n	8001414 <__aeabi_fsub+0x1f8>
 8001516:	0013      	movs	r3, r2
 8001518:	2200      	movs	r2, #0
 800151a:	08db      	lsrs	r3, r3, #3
 800151c:	e726      	b.n	800136c <__aeabi_fsub+0x150>
 800151e:	2380      	movs	r3, #128	@ 0x80
 8001520:	2400      	movs	r4, #0
 8001522:	20ff      	movs	r0, #255	@ 0xff
 8001524:	03db      	lsls	r3, r3, #15
 8001526:	e6f1      	b.n	800130c <__aeabi_fsub+0xf0>
 8001528:	2a00      	cmp	r2, #0
 800152a:	d100      	bne.n	800152e <__aeabi_fsub+0x312>
 800152c:	e756      	b.n	80013dc <__aeabi_fsub+0x1c0>
 800152e:	1b47      	subs	r7, r0, r5
 8001530:	003a      	movs	r2, r7
 8001532:	2d00      	cmp	r5, #0
 8001534:	d100      	bne.n	8001538 <__aeabi_fsub+0x31c>
 8001536:	e730      	b.n	800139a <__aeabi_fsub+0x17e>
 8001538:	2280      	movs	r2, #128	@ 0x80
 800153a:	04d2      	lsls	r2, r2, #19
 800153c:	000c      	movs	r4, r1
 800153e:	4313      	orrs	r3, r2
 8001540:	e77f      	b.n	8001442 <__aeabi_fsub+0x226>
 8001542:	2a00      	cmp	r2, #0
 8001544:	d100      	bne.n	8001548 <__aeabi_fsub+0x32c>
 8001546:	e701      	b.n	800134c <__aeabi_fsub+0x130>
 8001548:	1b41      	subs	r1, r0, r5
 800154a:	2d00      	cmp	r5, #0
 800154c:	d101      	bne.n	8001552 <__aeabi_fsub+0x336>
 800154e:	000a      	movs	r2, r1
 8001550:	e788      	b.n	8001464 <__aeabi_fsub+0x248>
 8001552:	2280      	movs	r2, #128	@ 0x80
 8001554:	04d2      	lsls	r2, r2, #19
 8001556:	4313      	orrs	r3, r2
 8001558:	e78b      	b.n	8001472 <__aeabi_fsub+0x256>
 800155a:	46c0      	nop			@ (mov r8, r8)
 800155c:	fbffffff 	.word	0xfbffffff
 8001560:	7dffffff 	.word	0x7dffffff

08001564 <__aeabi_fcmpun>:
 8001564:	0243      	lsls	r3, r0, #9
 8001566:	024a      	lsls	r2, r1, #9
 8001568:	0040      	lsls	r0, r0, #1
 800156a:	0049      	lsls	r1, r1, #1
 800156c:	0a5b      	lsrs	r3, r3, #9
 800156e:	0a52      	lsrs	r2, r2, #9
 8001570:	0e09      	lsrs	r1, r1, #24
 8001572:	0e00      	lsrs	r0, r0, #24
 8001574:	28ff      	cmp	r0, #255	@ 0xff
 8001576:	d006      	beq.n	8001586 <__aeabi_fcmpun+0x22>
 8001578:	2000      	movs	r0, #0
 800157a:	29ff      	cmp	r1, #255	@ 0xff
 800157c:	d102      	bne.n	8001584 <__aeabi_fcmpun+0x20>
 800157e:	1e53      	subs	r3, r2, #1
 8001580:	419a      	sbcs	r2, r3
 8001582:	0010      	movs	r0, r2
 8001584:	4770      	bx	lr
 8001586:	38fe      	subs	r0, #254	@ 0xfe
 8001588:	2b00      	cmp	r3, #0
 800158a:	d1fb      	bne.n	8001584 <__aeabi_fcmpun+0x20>
 800158c:	e7f4      	b.n	8001578 <__aeabi_fcmpun+0x14>
 800158e:	46c0      	nop			@ (mov r8, r8)

08001590 <__aeabi_f2iz>:
 8001590:	0241      	lsls	r1, r0, #9
 8001592:	0042      	lsls	r2, r0, #1
 8001594:	0fc3      	lsrs	r3, r0, #31
 8001596:	0a49      	lsrs	r1, r1, #9
 8001598:	2000      	movs	r0, #0
 800159a:	0e12      	lsrs	r2, r2, #24
 800159c:	2a7e      	cmp	r2, #126	@ 0x7e
 800159e:	dd03      	ble.n	80015a8 <__aeabi_f2iz+0x18>
 80015a0:	2a9d      	cmp	r2, #157	@ 0x9d
 80015a2:	dd02      	ble.n	80015aa <__aeabi_f2iz+0x1a>
 80015a4:	4a09      	ldr	r2, [pc, #36]	@ (80015cc <__aeabi_f2iz+0x3c>)
 80015a6:	1898      	adds	r0, r3, r2
 80015a8:	4770      	bx	lr
 80015aa:	2080      	movs	r0, #128	@ 0x80
 80015ac:	0400      	lsls	r0, r0, #16
 80015ae:	4301      	orrs	r1, r0
 80015b0:	2a95      	cmp	r2, #149	@ 0x95
 80015b2:	dc07      	bgt.n	80015c4 <__aeabi_f2iz+0x34>
 80015b4:	2096      	movs	r0, #150	@ 0x96
 80015b6:	1a82      	subs	r2, r0, r2
 80015b8:	40d1      	lsrs	r1, r2
 80015ba:	4248      	negs	r0, r1
 80015bc:	2b00      	cmp	r3, #0
 80015be:	d1f3      	bne.n	80015a8 <__aeabi_f2iz+0x18>
 80015c0:	0008      	movs	r0, r1
 80015c2:	e7f1      	b.n	80015a8 <__aeabi_f2iz+0x18>
 80015c4:	3a96      	subs	r2, #150	@ 0x96
 80015c6:	4091      	lsls	r1, r2
 80015c8:	e7f7      	b.n	80015ba <__aeabi_f2iz+0x2a>
 80015ca:	46c0      	nop			@ (mov r8, r8)
 80015cc:	7fffffff 	.word	0x7fffffff

080015d0 <__aeabi_i2f>:
 80015d0:	b570      	push	{r4, r5, r6, lr}
 80015d2:	2800      	cmp	r0, #0
 80015d4:	d013      	beq.n	80015fe <__aeabi_i2f+0x2e>
 80015d6:	17c3      	asrs	r3, r0, #31
 80015d8:	18c5      	adds	r5, r0, r3
 80015da:	405d      	eors	r5, r3
 80015dc:	0fc4      	lsrs	r4, r0, #31
 80015de:	0028      	movs	r0, r5
 80015e0:	f002 f80c 	bl	80035fc <__clzsi2>
 80015e4:	239e      	movs	r3, #158	@ 0x9e
 80015e6:	0001      	movs	r1, r0
 80015e8:	1a1b      	subs	r3, r3, r0
 80015ea:	2b96      	cmp	r3, #150	@ 0x96
 80015ec:	dc0f      	bgt.n	800160e <__aeabi_i2f+0x3e>
 80015ee:	2808      	cmp	r0, #8
 80015f0:	d034      	beq.n	800165c <__aeabi_i2f+0x8c>
 80015f2:	3908      	subs	r1, #8
 80015f4:	408d      	lsls	r5, r1
 80015f6:	026d      	lsls	r5, r5, #9
 80015f8:	0a6d      	lsrs	r5, r5, #9
 80015fa:	b2d8      	uxtb	r0, r3
 80015fc:	e002      	b.n	8001604 <__aeabi_i2f+0x34>
 80015fe:	2400      	movs	r4, #0
 8001600:	2000      	movs	r0, #0
 8001602:	2500      	movs	r5, #0
 8001604:	05c0      	lsls	r0, r0, #23
 8001606:	4328      	orrs	r0, r5
 8001608:	07e4      	lsls	r4, r4, #31
 800160a:	4320      	orrs	r0, r4
 800160c:	bd70      	pop	{r4, r5, r6, pc}
 800160e:	2b99      	cmp	r3, #153	@ 0x99
 8001610:	dc16      	bgt.n	8001640 <__aeabi_i2f+0x70>
 8001612:	1f42      	subs	r2, r0, #5
 8001614:	2805      	cmp	r0, #5
 8001616:	d000      	beq.n	800161a <__aeabi_i2f+0x4a>
 8001618:	4095      	lsls	r5, r2
 800161a:	002a      	movs	r2, r5
 800161c:	4811      	ldr	r0, [pc, #68]	@ (8001664 <__aeabi_i2f+0x94>)
 800161e:	4002      	ands	r2, r0
 8001620:	076e      	lsls	r6, r5, #29
 8001622:	d009      	beq.n	8001638 <__aeabi_i2f+0x68>
 8001624:	260f      	movs	r6, #15
 8001626:	4035      	ands	r5, r6
 8001628:	2d04      	cmp	r5, #4
 800162a:	d005      	beq.n	8001638 <__aeabi_i2f+0x68>
 800162c:	3204      	adds	r2, #4
 800162e:	0155      	lsls	r5, r2, #5
 8001630:	d502      	bpl.n	8001638 <__aeabi_i2f+0x68>
 8001632:	239f      	movs	r3, #159	@ 0x9f
 8001634:	4002      	ands	r2, r0
 8001636:	1a5b      	subs	r3, r3, r1
 8001638:	0192      	lsls	r2, r2, #6
 800163a:	0a55      	lsrs	r5, r2, #9
 800163c:	b2d8      	uxtb	r0, r3
 800163e:	e7e1      	b.n	8001604 <__aeabi_i2f+0x34>
 8001640:	2205      	movs	r2, #5
 8001642:	1a12      	subs	r2, r2, r0
 8001644:	0028      	movs	r0, r5
 8001646:	40d0      	lsrs	r0, r2
 8001648:	0002      	movs	r2, r0
 800164a:	0008      	movs	r0, r1
 800164c:	301b      	adds	r0, #27
 800164e:	4085      	lsls	r5, r0
 8001650:	0028      	movs	r0, r5
 8001652:	1e45      	subs	r5, r0, #1
 8001654:	41a8      	sbcs	r0, r5
 8001656:	4302      	orrs	r2, r0
 8001658:	0015      	movs	r5, r2
 800165a:	e7de      	b.n	800161a <__aeabi_i2f+0x4a>
 800165c:	026d      	lsls	r5, r5, #9
 800165e:	2096      	movs	r0, #150	@ 0x96
 8001660:	0a6d      	lsrs	r5, r5, #9
 8001662:	e7cf      	b.n	8001604 <__aeabi_i2f+0x34>
 8001664:	fbffffff 	.word	0xfbffffff

08001668 <__aeabi_ui2f>:
 8001668:	b570      	push	{r4, r5, r6, lr}
 800166a:	1e04      	subs	r4, r0, #0
 800166c:	d00e      	beq.n	800168c <__aeabi_ui2f+0x24>
 800166e:	f001 ffc5 	bl	80035fc <__clzsi2>
 8001672:	239e      	movs	r3, #158	@ 0x9e
 8001674:	0001      	movs	r1, r0
 8001676:	1a1b      	subs	r3, r3, r0
 8001678:	2b96      	cmp	r3, #150	@ 0x96
 800167a:	dc0c      	bgt.n	8001696 <__aeabi_ui2f+0x2e>
 800167c:	2808      	cmp	r0, #8
 800167e:	d02f      	beq.n	80016e0 <__aeabi_ui2f+0x78>
 8001680:	3908      	subs	r1, #8
 8001682:	408c      	lsls	r4, r1
 8001684:	0264      	lsls	r4, r4, #9
 8001686:	0a64      	lsrs	r4, r4, #9
 8001688:	b2d8      	uxtb	r0, r3
 800168a:	e001      	b.n	8001690 <__aeabi_ui2f+0x28>
 800168c:	2000      	movs	r0, #0
 800168e:	2400      	movs	r4, #0
 8001690:	05c0      	lsls	r0, r0, #23
 8001692:	4320      	orrs	r0, r4
 8001694:	bd70      	pop	{r4, r5, r6, pc}
 8001696:	2b99      	cmp	r3, #153	@ 0x99
 8001698:	dc16      	bgt.n	80016c8 <__aeabi_ui2f+0x60>
 800169a:	1f42      	subs	r2, r0, #5
 800169c:	2805      	cmp	r0, #5
 800169e:	d000      	beq.n	80016a2 <__aeabi_ui2f+0x3a>
 80016a0:	4094      	lsls	r4, r2
 80016a2:	0022      	movs	r2, r4
 80016a4:	4810      	ldr	r0, [pc, #64]	@ (80016e8 <__aeabi_ui2f+0x80>)
 80016a6:	4002      	ands	r2, r0
 80016a8:	0765      	lsls	r5, r4, #29
 80016aa:	d009      	beq.n	80016c0 <__aeabi_ui2f+0x58>
 80016ac:	250f      	movs	r5, #15
 80016ae:	402c      	ands	r4, r5
 80016b0:	2c04      	cmp	r4, #4
 80016b2:	d005      	beq.n	80016c0 <__aeabi_ui2f+0x58>
 80016b4:	3204      	adds	r2, #4
 80016b6:	0154      	lsls	r4, r2, #5
 80016b8:	d502      	bpl.n	80016c0 <__aeabi_ui2f+0x58>
 80016ba:	239f      	movs	r3, #159	@ 0x9f
 80016bc:	4002      	ands	r2, r0
 80016be:	1a5b      	subs	r3, r3, r1
 80016c0:	0192      	lsls	r2, r2, #6
 80016c2:	0a54      	lsrs	r4, r2, #9
 80016c4:	b2d8      	uxtb	r0, r3
 80016c6:	e7e3      	b.n	8001690 <__aeabi_ui2f+0x28>
 80016c8:	0002      	movs	r2, r0
 80016ca:	0020      	movs	r0, r4
 80016cc:	321b      	adds	r2, #27
 80016ce:	4090      	lsls	r0, r2
 80016d0:	0002      	movs	r2, r0
 80016d2:	1e50      	subs	r0, r2, #1
 80016d4:	4182      	sbcs	r2, r0
 80016d6:	2005      	movs	r0, #5
 80016d8:	1a40      	subs	r0, r0, r1
 80016da:	40c4      	lsrs	r4, r0
 80016dc:	4314      	orrs	r4, r2
 80016de:	e7e0      	b.n	80016a2 <__aeabi_ui2f+0x3a>
 80016e0:	0264      	lsls	r4, r4, #9
 80016e2:	2096      	movs	r0, #150	@ 0x96
 80016e4:	0a64      	lsrs	r4, r4, #9
 80016e6:	e7d3      	b.n	8001690 <__aeabi_ui2f+0x28>
 80016e8:	fbffffff 	.word	0xfbffffff

080016ec <__aeabi_dadd>:
 80016ec:	b5f0      	push	{r4, r5, r6, r7, lr}
 80016ee:	4657      	mov	r7, sl
 80016f0:	464e      	mov	r6, r9
 80016f2:	4645      	mov	r5, r8
 80016f4:	46de      	mov	lr, fp
 80016f6:	b5e0      	push	{r5, r6, r7, lr}
 80016f8:	b083      	sub	sp, #12
 80016fa:	9000      	str	r0, [sp, #0]
 80016fc:	9101      	str	r1, [sp, #4]
 80016fe:	030c      	lsls	r4, r1, #12
 8001700:	004f      	lsls	r7, r1, #1
 8001702:	0fce      	lsrs	r6, r1, #31
 8001704:	0a61      	lsrs	r1, r4, #9
 8001706:	9c00      	ldr	r4, [sp, #0]
 8001708:	031d      	lsls	r5, r3, #12
 800170a:	0f64      	lsrs	r4, r4, #29
 800170c:	430c      	orrs	r4, r1
 800170e:	9900      	ldr	r1, [sp, #0]
 8001710:	9200      	str	r2, [sp, #0]
 8001712:	9301      	str	r3, [sp, #4]
 8001714:	00c8      	lsls	r0, r1, #3
 8001716:	0059      	lsls	r1, r3, #1
 8001718:	0d4b      	lsrs	r3, r1, #21
 800171a:	4699      	mov	r9, r3
 800171c:	9a00      	ldr	r2, [sp, #0]
 800171e:	9b01      	ldr	r3, [sp, #4]
 8001720:	0a6d      	lsrs	r5, r5, #9
 8001722:	0fd9      	lsrs	r1, r3, #31
 8001724:	0f53      	lsrs	r3, r2, #29
 8001726:	432b      	orrs	r3, r5
 8001728:	469a      	mov	sl, r3
 800172a:	9b00      	ldr	r3, [sp, #0]
 800172c:	0d7f      	lsrs	r7, r7, #21
 800172e:	00da      	lsls	r2, r3, #3
 8001730:	4694      	mov	ip, r2
 8001732:	464a      	mov	r2, r9
 8001734:	46b0      	mov	r8, r6
 8001736:	1aba      	subs	r2, r7, r2
 8001738:	428e      	cmp	r6, r1
 800173a:	d100      	bne.n	800173e <__aeabi_dadd+0x52>
 800173c:	e0b0      	b.n	80018a0 <__aeabi_dadd+0x1b4>
 800173e:	2a00      	cmp	r2, #0
 8001740:	dc00      	bgt.n	8001744 <__aeabi_dadd+0x58>
 8001742:	e078      	b.n	8001836 <__aeabi_dadd+0x14a>
 8001744:	4649      	mov	r1, r9
 8001746:	2900      	cmp	r1, #0
 8001748:	d100      	bne.n	800174c <__aeabi_dadd+0x60>
 800174a:	e0e9      	b.n	8001920 <__aeabi_dadd+0x234>
 800174c:	49c9      	ldr	r1, [pc, #804]	@ (8001a74 <__aeabi_dadd+0x388>)
 800174e:	428f      	cmp	r7, r1
 8001750:	d100      	bne.n	8001754 <__aeabi_dadd+0x68>
 8001752:	e195      	b.n	8001a80 <__aeabi_dadd+0x394>
 8001754:	2501      	movs	r5, #1
 8001756:	2a38      	cmp	r2, #56	@ 0x38
 8001758:	dc16      	bgt.n	8001788 <__aeabi_dadd+0x9c>
 800175a:	2180      	movs	r1, #128	@ 0x80
 800175c:	4653      	mov	r3, sl
 800175e:	0409      	lsls	r1, r1, #16
 8001760:	430b      	orrs	r3, r1
 8001762:	469a      	mov	sl, r3
 8001764:	2a1f      	cmp	r2, #31
 8001766:	dd00      	ble.n	800176a <__aeabi_dadd+0x7e>
 8001768:	e1e7      	b.n	8001b3a <__aeabi_dadd+0x44e>
 800176a:	2120      	movs	r1, #32
 800176c:	4655      	mov	r5, sl
 800176e:	1a8b      	subs	r3, r1, r2
 8001770:	4661      	mov	r1, ip
 8001772:	409d      	lsls	r5, r3
 8001774:	40d1      	lsrs	r1, r2
 8001776:	430d      	orrs	r5, r1
 8001778:	4661      	mov	r1, ip
 800177a:	4099      	lsls	r1, r3
 800177c:	1e4b      	subs	r3, r1, #1
 800177e:	4199      	sbcs	r1, r3
 8001780:	4653      	mov	r3, sl
 8001782:	40d3      	lsrs	r3, r2
 8001784:	430d      	orrs	r5, r1
 8001786:	1ae4      	subs	r4, r4, r3
 8001788:	1b45      	subs	r5, r0, r5
 800178a:	42a8      	cmp	r0, r5
 800178c:	4180      	sbcs	r0, r0
 800178e:	4240      	negs	r0, r0
 8001790:	1a24      	subs	r4, r4, r0
 8001792:	0223      	lsls	r3, r4, #8
 8001794:	d400      	bmi.n	8001798 <__aeabi_dadd+0xac>
 8001796:	e10f      	b.n	80019b8 <__aeabi_dadd+0x2cc>
 8001798:	0264      	lsls	r4, r4, #9
 800179a:	0a64      	lsrs	r4, r4, #9
 800179c:	2c00      	cmp	r4, #0
 800179e:	d100      	bne.n	80017a2 <__aeabi_dadd+0xb6>
 80017a0:	e139      	b.n	8001a16 <__aeabi_dadd+0x32a>
 80017a2:	0020      	movs	r0, r4
 80017a4:	f001 ff2a 	bl	80035fc <__clzsi2>
 80017a8:	0003      	movs	r3, r0
 80017aa:	3b08      	subs	r3, #8
 80017ac:	2120      	movs	r1, #32
 80017ae:	0028      	movs	r0, r5
 80017b0:	1aca      	subs	r2, r1, r3
 80017b2:	40d0      	lsrs	r0, r2
 80017b4:	409c      	lsls	r4, r3
 80017b6:	0002      	movs	r2, r0
 80017b8:	409d      	lsls	r5, r3
 80017ba:	4322      	orrs	r2, r4
 80017bc:	429f      	cmp	r7, r3
 80017be:	dd00      	ble.n	80017c2 <__aeabi_dadd+0xd6>
 80017c0:	e173      	b.n	8001aaa <__aeabi_dadd+0x3be>
 80017c2:	1bd8      	subs	r0, r3, r7
 80017c4:	3001      	adds	r0, #1
 80017c6:	1a09      	subs	r1, r1, r0
 80017c8:	002c      	movs	r4, r5
 80017ca:	408d      	lsls	r5, r1
 80017cc:	40c4      	lsrs	r4, r0
 80017ce:	1e6b      	subs	r3, r5, #1
 80017d0:	419d      	sbcs	r5, r3
 80017d2:	0013      	movs	r3, r2
 80017d4:	40c2      	lsrs	r2, r0
 80017d6:	408b      	lsls	r3, r1
 80017d8:	4325      	orrs	r5, r4
 80017da:	2700      	movs	r7, #0
 80017dc:	0014      	movs	r4, r2
 80017de:	431d      	orrs	r5, r3
 80017e0:	076b      	lsls	r3, r5, #29
 80017e2:	d009      	beq.n	80017f8 <__aeabi_dadd+0x10c>
 80017e4:	230f      	movs	r3, #15
 80017e6:	402b      	ands	r3, r5
 80017e8:	2b04      	cmp	r3, #4
 80017ea:	d005      	beq.n	80017f8 <__aeabi_dadd+0x10c>
 80017ec:	1d2b      	adds	r3, r5, #4
 80017ee:	42ab      	cmp	r3, r5
 80017f0:	41ad      	sbcs	r5, r5
 80017f2:	426d      	negs	r5, r5
 80017f4:	1964      	adds	r4, r4, r5
 80017f6:	001d      	movs	r5, r3
 80017f8:	0223      	lsls	r3, r4, #8
 80017fa:	d400      	bmi.n	80017fe <__aeabi_dadd+0x112>
 80017fc:	e12d      	b.n	8001a5a <__aeabi_dadd+0x36e>
 80017fe:	4a9d      	ldr	r2, [pc, #628]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001800:	3701      	adds	r7, #1
 8001802:	4297      	cmp	r7, r2
 8001804:	d100      	bne.n	8001808 <__aeabi_dadd+0x11c>
 8001806:	e0d3      	b.n	80019b0 <__aeabi_dadd+0x2c4>
 8001808:	4646      	mov	r6, r8
 800180a:	499b      	ldr	r1, [pc, #620]	@ (8001a78 <__aeabi_dadd+0x38c>)
 800180c:	08ed      	lsrs	r5, r5, #3
 800180e:	4021      	ands	r1, r4
 8001810:	074a      	lsls	r2, r1, #29
 8001812:	432a      	orrs	r2, r5
 8001814:	057c      	lsls	r4, r7, #21
 8001816:	024d      	lsls	r5, r1, #9
 8001818:	0b2d      	lsrs	r5, r5, #12
 800181a:	0d64      	lsrs	r4, r4, #21
 800181c:	0524      	lsls	r4, r4, #20
 800181e:	432c      	orrs	r4, r5
 8001820:	07f6      	lsls	r6, r6, #31
 8001822:	4334      	orrs	r4, r6
 8001824:	0010      	movs	r0, r2
 8001826:	0021      	movs	r1, r4
 8001828:	b003      	add	sp, #12
 800182a:	bcf0      	pop	{r4, r5, r6, r7}
 800182c:	46bb      	mov	fp, r7
 800182e:	46b2      	mov	sl, r6
 8001830:	46a9      	mov	r9, r5
 8001832:	46a0      	mov	r8, r4
 8001834:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001836:	2a00      	cmp	r2, #0
 8001838:	d100      	bne.n	800183c <__aeabi_dadd+0x150>
 800183a:	e084      	b.n	8001946 <__aeabi_dadd+0x25a>
 800183c:	464a      	mov	r2, r9
 800183e:	1bd2      	subs	r2, r2, r7
 8001840:	2f00      	cmp	r7, #0
 8001842:	d000      	beq.n	8001846 <__aeabi_dadd+0x15a>
 8001844:	e16d      	b.n	8001b22 <__aeabi_dadd+0x436>
 8001846:	0025      	movs	r5, r4
 8001848:	4305      	orrs	r5, r0
 800184a:	d100      	bne.n	800184e <__aeabi_dadd+0x162>
 800184c:	e127      	b.n	8001a9e <__aeabi_dadd+0x3b2>
 800184e:	1e56      	subs	r6, r2, #1
 8001850:	2a01      	cmp	r2, #1
 8001852:	d100      	bne.n	8001856 <__aeabi_dadd+0x16a>
 8001854:	e23b      	b.n	8001cce <__aeabi_dadd+0x5e2>
 8001856:	4d87      	ldr	r5, [pc, #540]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001858:	42aa      	cmp	r2, r5
 800185a:	d100      	bne.n	800185e <__aeabi_dadd+0x172>
 800185c:	e26a      	b.n	8001d34 <__aeabi_dadd+0x648>
 800185e:	2501      	movs	r5, #1
 8001860:	2e38      	cmp	r6, #56	@ 0x38
 8001862:	dc12      	bgt.n	800188a <__aeabi_dadd+0x19e>
 8001864:	0032      	movs	r2, r6
 8001866:	2a1f      	cmp	r2, #31
 8001868:	dd00      	ble.n	800186c <__aeabi_dadd+0x180>
 800186a:	e1f8      	b.n	8001c5e <__aeabi_dadd+0x572>
 800186c:	2620      	movs	r6, #32
 800186e:	0025      	movs	r5, r4
 8001870:	1ab6      	subs	r6, r6, r2
 8001872:	0007      	movs	r7, r0
 8001874:	4653      	mov	r3, sl
 8001876:	40b0      	lsls	r0, r6
 8001878:	40d4      	lsrs	r4, r2
 800187a:	40b5      	lsls	r5, r6
 800187c:	40d7      	lsrs	r7, r2
 800187e:	1e46      	subs	r6, r0, #1
 8001880:	41b0      	sbcs	r0, r6
 8001882:	1b1b      	subs	r3, r3, r4
 8001884:	469a      	mov	sl, r3
 8001886:	433d      	orrs	r5, r7
 8001888:	4305      	orrs	r5, r0
 800188a:	4662      	mov	r2, ip
 800188c:	1b55      	subs	r5, r2, r5
 800188e:	45ac      	cmp	ip, r5
 8001890:	4192      	sbcs	r2, r2
 8001892:	4653      	mov	r3, sl
 8001894:	4252      	negs	r2, r2
 8001896:	000e      	movs	r6, r1
 8001898:	464f      	mov	r7, r9
 800189a:	4688      	mov	r8, r1
 800189c:	1a9c      	subs	r4, r3, r2
 800189e:	e778      	b.n	8001792 <__aeabi_dadd+0xa6>
 80018a0:	2a00      	cmp	r2, #0
 80018a2:	dc00      	bgt.n	80018a6 <__aeabi_dadd+0x1ba>
 80018a4:	e08e      	b.n	80019c4 <__aeabi_dadd+0x2d8>
 80018a6:	4649      	mov	r1, r9
 80018a8:	2900      	cmp	r1, #0
 80018aa:	d175      	bne.n	8001998 <__aeabi_dadd+0x2ac>
 80018ac:	4661      	mov	r1, ip
 80018ae:	4653      	mov	r3, sl
 80018b0:	4319      	orrs	r1, r3
 80018b2:	d100      	bne.n	80018b6 <__aeabi_dadd+0x1ca>
 80018b4:	e0f6      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 80018b6:	1e51      	subs	r1, r2, #1
 80018b8:	2a01      	cmp	r2, #1
 80018ba:	d100      	bne.n	80018be <__aeabi_dadd+0x1d2>
 80018bc:	e191      	b.n	8001be2 <__aeabi_dadd+0x4f6>
 80018be:	4d6d      	ldr	r5, [pc, #436]	@ (8001a74 <__aeabi_dadd+0x388>)
 80018c0:	42aa      	cmp	r2, r5
 80018c2:	d100      	bne.n	80018c6 <__aeabi_dadd+0x1da>
 80018c4:	e0dc      	b.n	8001a80 <__aeabi_dadd+0x394>
 80018c6:	2501      	movs	r5, #1
 80018c8:	2938      	cmp	r1, #56	@ 0x38
 80018ca:	dc14      	bgt.n	80018f6 <__aeabi_dadd+0x20a>
 80018cc:	000a      	movs	r2, r1
 80018ce:	2a1f      	cmp	r2, #31
 80018d0:	dd00      	ble.n	80018d4 <__aeabi_dadd+0x1e8>
 80018d2:	e1a2      	b.n	8001c1a <__aeabi_dadd+0x52e>
 80018d4:	2120      	movs	r1, #32
 80018d6:	4653      	mov	r3, sl
 80018d8:	1a89      	subs	r1, r1, r2
 80018da:	408b      	lsls	r3, r1
 80018dc:	001d      	movs	r5, r3
 80018de:	4663      	mov	r3, ip
 80018e0:	40d3      	lsrs	r3, r2
 80018e2:	431d      	orrs	r5, r3
 80018e4:	4663      	mov	r3, ip
 80018e6:	408b      	lsls	r3, r1
 80018e8:	0019      	movs	r1, r3
 80018ea:	1e4b      	subs	r3, r1, #1
 80018ec:	4199      	sbcs	r1, r3
 80018ee:	4653      	mov	r3, sl
 80018f0:	40d3      	lsrs	r3, r2
 80018f2:	430d      	orrs	r5, r1
 80018f4:	18e4      	adds	r4, r4, r3
 80018f6:	182d      	adds	r5, r5, r0
 80018f8:	4285      	cmp	r5, r0
 80018fa:	4180      	sbcs	r0, r0
 80018fc:	4240      	negs	r0, r0
 80018fe:	1824      	adds	r4, r4, r0
 8001900:	0223      	lsls	r3, r4, #8
 8001902:	d559      	bpl.n	80019b8 <__aeabi_dadd+0x2cc>
 8001904:	4b5b      	ldr	r3, [pc, #364]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001906:	3701      	adds	r7, #1
 8001908:	429f      	cmp	r7, r3
 800190a:	d051      	beq.n	80019b0 <__aeabi_dadd+0x2c4>
 800190c:	2101      	movs	r1, #1
 800190e:	4b5a      	ldr	r3, [pc, #360]	@ (8001a78 <__aeabi_dadd+0x38c>)
 8001910:	086a      	lsrs	r2, r5, #1
 8001912:	401c      	ands	r4, r3
 8001914:	4029      	ands	r1, r5
 8001916:	430a      	orrs	r2, r1
 8001918:	07e5      	lsls	r5, r4, #31
 800191a:	4315      	orrs	r5, r2
 800191c:	0864      	lsrs	r4, r4, #1
 800191e:	e75f      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001920:	4661      	mov	r1, ip
 8001922:	4653      	mov	r3, sl
 8001924:	4319      	orrs	r1, r3
 8001926:	d100      	bne.n	800192a <__aeabi_dadd+0x23e>
 8001928:	e0bc      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 800192a:	1e51      	subs	r1, r2, #1
 800192c:	2a01      	cmp	r2, #1
 800192e:	d100      	bne.n	8001932 <__aeabi_dadd+0x246>
 8001930:	e164      	b.n	8001bfc <__aeabi_dadd+0x510>
 8001932:	4d50      	ldr	r5, [pc, #320]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001934:	42aa      	cmp	r2, r5
 8001936:	d100      	bne.n	800193a <__aeabi_dadd+0x24e>
 8001938:	e16a      	b.n	8001c10 <__aeabi_dadd+0x524>
 800193a:	2501      	movs	r5, #1
 800193c:	2938      	cmp	r1, #56	@ 0x38
 800193e:	dd00      	ble.n	8001942 <__aeabi_dadd+0x256>
 8001940:	e722      	b.n	8001788 <__aeabi_dadd+0x9c>
 8001942:	000a      	movs	r2, r1
 8001944:	e70e      	b.n	8001764 <__aeabi_dadd+0x78>
 8001946:	4a4d      	ldr	r2, [pc, #308]	@ (8001a7c <__aeabi_dadd+0x390>)
 8001948:	1c7d      	adds	r5, r7, #1
 800194a:	4215      	tst	r5, r2
 800194c:	d000      	beq.n	8001950 <__aeabi_dadd+0x264>
 800194e:	e0d0      	b.n	8001af2 <__aeabi_dadd+0x406>
 8001950:	0025      	movs	r5, r4
 8001952:	4662      	mov	r2, ip
 8001954:	4653      	mov	r3, sl
 8001956:	4305      	orrs	r5, r0
 8001958:	431a      	orrs	r2, r3
 800195a:	2f00      	cmp	r7, #0
 800195c:	d000      	beq.n	8001960 <__aeabi_dadd+0x274>
 800195e:	e137      	b.n	8001bd0 <__aeabi_dadd+0x4e4>
 8001960:	2d00      	cmp	r5, #0
 8001962:	d100      	bne.n	8001966 <__aeabi_dadd+0x27a>
 8001964:	e1a8      	b.n	8001cb8 <__aeabi_dadd+0x5cc>
 8001966:	2a00      	cmp	r2, #0
 8001968:	d100      	bne.n	800196c <__aeabi_dadd+0x280>
 800196a:	e16a      	b.n	8001c42 <__aeabi_dadd+0x556>
 800196c:	4663      	mov	r3, ip
 800196e:	1ac5      	subs	r5, r0, r3
 8001970:	4653      	mov	r3, sl
 8001972:	1ae2      	subs	r2, r4, r3
 8001974:	42a8      	cmp	r0, r5
 8001976:	419b      	sbcs	r3, r3
 8001978:	425b      	negs	r3, r3
 800197a:	1ad3      	subs	r3, r2, r3
 800197c:	021a      	lsls	r2, r3, #8
 800197e:	d400      	bmi.n	8001982 <__aeabi_dadd+0x296>
 8001980:	e203      	b.n	8001d8a <__aeabi_dadd+0x69e>
 8001982:	4663      	mov	r3, ip
 8001984:	1a1d      	subs	r5, r3, r0
 8001986:	45ac      	cmp	ip, r5
 8001988:	4192      	sbcs	r2, r2
 800198a:	4653      	mov	r3, sl
 800198c:	4252      	negs	r2, r2
 800198e:	1b1c      	subs	r4, r3, r4
 8001990:	000e      	movs	r6, r1
 8001992:	4688      	mov	r8, r1
 8001994:	1aa4      	subs	r4, r4, r2
 8001996:	e723      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001998:	4936      	ldr	r1, [pc, #216]	@ (8001a74 <__aeabi_dadd+0x388>)
 800199a:	428f      	cmp	r7, r1
 800199c:	d070      	beq.n	8001a80 <__aeabi_dadd+0x394>
 800199e:	2501      	movs	r5, #1
 80019a0:	2a38      	cmp	r2, #56	@ 0x38
 80019a2:	dca8      	bgt.n	80018f6 <__aeabi_dadd+0x20a>
 80019a4:	2180      	movs	r1, #128	@ 0x80
 80019a6:	4653      	mov	r3, sl
 80019a8:	0409      	lsls	r1, r1, #16
 80019aa:	430b      	orrs	r3, r1
 80019ac:	469a      	mov	sl, r3
 80019ae:	e78e      	b.n	80018ce <__aeabi_dadd+0x1e2>
 80019b0:	003c      	movs	r4, r7
 80019b2:	2500      	movs	r5, #0
 80019b4:	2200      	movs	r2, #0
 80019b6:	e731      	b.n	800181c <__aeabi_dadd+0x130>
 80019b8:	2307      	movs	r3, #7
 80019ba:	402b      	ands	r3, r5
 80019bc:	2b00      	cmp	r3, #0
 80019be:	d000      	beq.n	80019c2 <__aeabi_dadd+0x2d6>
 80019c0:	e710      	b.n	80017e4 <__aeabi_dadd+0xf8>
 80019c2:	e093      	b.n	8001aec <__aeabi_dadd+0x400>
 80019c4:	2a00      	cmp	r2, #0
 80019c6:	d074      	beq.n	8001ab2 <__aeabi_dadd+0x3c6>
 80019c8:	464a      	mov	r2, r9
 80019ca:	1bd2      	subs	r2, r2, r7
 80019cc:	2f00      	cmp	r7, #0
 80019ce:	d100      	bne.n	80019d2 <__aeabi_dadd+0x2e6>
 80019d0:	e0c7      	b.n	8001b62 <__aeabi_dadd+0x476>
 80019d2:	4928      	ldr	r1, [pc, #160]	@ (8001a74 <__aeabi_dadd+0x388>)
 80019d4:	4589      	cmp	r9, r1
 80019d6:	d100      	bne.n	80019da <__aeabi_dadd+0x2ee>
 80019d8:	e185      	b.n	8001ce6 <__aeabi_dadd+0x5fa>
 80019da:	2501      	movs	r5, #1
 80019dc:	2a38      	cmp	r2, #56	@ 0x38
 80019de:	dc12      	bgt.n	8001a06 <__aeabi_dadd+0x31a>
 80019e0:	2180      	movs	r1, #128	@ 0x80
 80019e2:	0409      	lsls	r1, r1, #16
 80019e4:	430c      	orrs	r4, r1
 80019e6:	2a1f      	cmp	r2, #31
 80019e8:	dd00      	ble.n	80019ec <__aeabi_dadd+0x300>
 80019ea:	e1ab      	b.n	8001d44 <__aeabi_dadd+0x658>
 80019ec:	2120      	movs	r1, #32
 80019ee:	0025      	movs	r5, r4
 80019f0:	1a89      	subs	r1, r1, r2
 80019f2:	0007      	movs	r7, r0
 80019f4:	4088      	lsls	r0, r1
 80019f6:	408d      	lsls	r5, r1
 80019f8:	40d7      	lsrs	r7, r2
 80019fa:	1e41      	subs	r1, r0, #1
 80019fc:	4188      	sbcs	r0, r1
 80019fe:	40d4      	lsrs	r4, r2
 8001a00:	433d      	orrs	r5, r7
 8001a02:	4305      	orrs	r5, r0
 8001a04:	44a2      	add	sl, r4
 8001a06:	4465      	add	r5, ip
 8001a08:	4565      	cmp	r5, ip
 8001a0a:	4192      	sbcs	r2, r2
 8001a0c:	4252      	negs	r2, r2
 8001a0e:	4452      	add	r2, sl
 8001a10:	0014      	movs	r4, r2
 8001a12:	464f      	mov	r7, r9
 8001a14:	e774      	b.n	8001900 <__aeabi_dadd+0x214>
 8001a16:	0028      	movs	r0, r5
 8001a18:	f001 fdf0 	bl	80035fc <__clzsi2>
 8001a1c:	0003      	movs	r3, r0
 8001a1e:	3318      	adds	r3, #24
 8001a20:	2b1f      	cmp	r3, #31
 8001a22:	dc00      	bgt.n	8001a26 <__aeabi_dadd+0x33a>
 8001a24:	e6c2      	b.n	80017ac <__aeabi_dadd+0xc0>
 8001a26:	002a      	movs	r2, r5
 8001a28:	3808      	subs	r0, #8
 8001a2a:	4082      	lsls	r2, r0
 8001a2c:	429f      	cmp	r7, r3
 8001a2e:	dd00      	ble.n	8001a32 <__aeabi_dadd+0x346>
 8001a30:	e0a9      	b.n	8001b86 <__aeabi_dadd+0x49a>
 8001a32:	1bdb      	subs	r3, r3, r7
 8001a34:	1c58      	adds	r0, r3, #1
 8001a36:	281f      	cmp	r0, #31
 8001a38:	dc00      	bgt.n	8001a3c <__aeabi_dadd+0x350>
 8001a3a:	e1ac      	b.n	8001d96 <__aeabi_dadd+0x6aa>
 8001a3c:	0015      	movs	r5, r2
 8001a3e:	3b1f      	subs	r3, #31
 8001a40:	40dd      	lsrs	r5, r3
 8001a42:	2820      	cmp	r0, #32
 8001a44:	d005      	beq.n	8001a52 <__aeabi_dadd+0x366>
 8001a46:	2340      	movs	r3, #64	@ 0x40
 8001a48:	1a1b      	subs	r3, r3, r0
 8001a4a:	409a      	lsls	r2, r3
 8001a4c:	1e53      	subs	r3, r2, #1
 8001a4e:	419a      	sbcs	r2, r3
 8001a50:	4315      	orrs	r5, r2
 8001a52:	2307      	movs	r3, #7
 8001a54:	2700      	movs	r7, #0
 8001a56:	402b      	ands	r3, r5
 8001a58:	e7b0      	b.n	80019bc <__aeabi_dadd+0x2d0>
 8001a5a:	08ed      	lsrs	r5, r5, #3
 8001a5c:	4b05      	ldr	r3, [pc, #20]	@ (8001a74 <__aeabi_dadd+0x388>)
 8001a5e:	0762      	lsls	r2, r4, #29
 8001a60:	432a      	orrs	r2, r5
 8001a62:	08e4      	lsrs	r4, r4, #3
 8001a64:	429f      	cmp	r7, r3
 8001a66:	d00f      	beq.n	8001a88 <__aeabi_dadd+0x39c>
 8001a68:	0324      	lsls	r4, r4, #12
 8001a6a:	0b25      	lsrs	r5, r4, #12
 8001a6c:	057c      	lsls	r4, r7, #21
 8001a6e:	0d64      	lsrs	r4, r4, #21
 8001a70:	e6d4      	b.n	800181c <__aeabi_dadd+0x130>
 8001a72:	46c0      	nop			@ (mov r8, r8)
 8001a74:	000007ff 	.word	0x000007ff
 8001a78:	ff7fffff 	.word	0xff7fffff
 8001a7c:	000007fe 	.word	0x000007fe
 8001a80:	08c0      	lsrs	r0, r0, #3
 8001a82:	0762      	lsls	r2, r4, #29
 8001a84:	4302      	orrs	r2, r0
 8001a86:	08e4      	lsrs	r4, r4, #3
 8001a88:	0013      	movs	r3, r2
 8001a8a:	4323      	orrs	r3, r4
 8001a8c:	d100      	bne.n	8001a90 <__aeabi_dadd+0x3a4>
 8001a8e:	e186      	b.n	8001d9e <__aeabi_dadd+0x6b2>
 8001a90:	2580      	movs	r5, #128	@ 0x80
 8001a92:	032d      	lsls	r5, r5, #12
 8001a94:	4325      	orrs	r5, r4
 8001a96:	032d      	lsls	r5, r5, #12
 8001a98:	4cc3      	ldr	r4, [pc, #780]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001a9a:	0b2d      	lsrs	r5, r5, #12
 8001a9c:	e6be      	b.n	800181c <__aeabi_dadd+0x130>
 8001a9e:	4660      	mov	r0, ip
 8001aa0:	4654      	mov	r4, sl
 8001aa2:	000e      	movs	r6, r1
 8001aa4:	0017      	movs	r7, r2
 8001aa6:	08c5      	lsrs	r5, r0, #3
 8001aa8:	e7d8      	b.n	8001a5c <__aeabi_dadd+0x370>
 8001aaa:	4cc0      	ldr	r4, [pc, #768]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001aac:	1aff      	subs	r7, r7, r3
 8001aae:	4014      	ands	r4, r2
 8001ab0:	e696      	b.n	80017e0 <__aeabi_dadd+0xf4>
 8001ab2:	4abf      	ldr	r2, [pc, #764]	@ (8001db0 <__aeabi_dadd+0x6c4>)
 8001ab4:	1c79      	adds	r1, r7, #1
 8001ab6:	4211      	tst	r1, r2
 8001ab8:	d16b      	bne.n	8001b92 <__aeabi_dadd+0x4a6>
 8001aba:	0022      	movs	r2, r4
 8001abc:	4302      	orrs	r2, r0
 8001abe:	2f00      	cmp	r7, #0
 8001ac0:	d000      	beq.n	8001ac4 <__aeabi_dadd+0x3d8>
 8001ac2:	e0db      	b.n	8001c7c <__aeabi_dadd+0x590>
 8001ac4:	2a00      	cmp	r2, #0
 8001ac6:	d100      	bne.n	8001aca <__aeabi_dadd+0x3de>
 8001ac8:	e12d      	b.n	8001d26 <__aeabi_dadd+0x63a>
 8001aca:	4662      	mov	r2, ip
 8001acc:	4653      	mov	r3, sl
 8001ace:	431a      	orrs	r2, r3
 8001ad0:	d100      	bne.n	8001ad4 <__aeabi_dadd+0x3e8>
 8001ad2:	e0b6      	b.n	8001c42 <__aeabi_dadd+0x556>
 8001ad4:	4663      	mov	r3, ip
 8001ad6:	18c5      	adds	r5, r0, r3
 8001ad8:	4285      	cmp	r5, r0
 8001ada:	4180      	sbcs	r0, r0
 8001adc:	4454      	add	r4, sl
 8001ade:	4240      	negs	r0, r0
 8001ae0:	1824      	adds	r4, r4, r0
 8001ae2:	0223      	lsls	r3, r4, #8
 8001ae4:	d502      	bpl.n	8001aec <__aeabi_dadd+0x400>
 8001ae6:	000f      	movs	r7, r1
 8001ae8:	4bb0      	ldr	r3, [pc, #704]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001aea:	401c      	ands	r4, r3
 8001aec:	003a      	movs	r2, r7
 8001aee:	0028      	movs	r0, r5
 8001af0:	e7d8      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 8001af2:	4662      	mov	r2, ip
 8001af4:	1a85      	subs	r5, r0, r2
 8001af6:	42a8      	cmp	r0, r5
 8001af8:	4192      	sbcs	r2, r2
 8001afa:	4653      	mov	r3, sl
 8001afc:	4252      	negs	r2, r2
 8001afe:	4691      	mov	r9, r2
 8001b00:	1ae3      	subs	r3, r4, r3
 8001b02:	001a      	movs	r2, r3
 8001b04:	464b      	mov	r3, r9
 8001b06:	1ad2      	subs	r2, r2, r3
 8001b08:	0013      	movs	r3, r2
 8001b0a:	4691      	mov	r9, r2
 8001b0c:	021a      	lsls	r2, r3, #8
 8001b0e:	d454      	bmi.n	8001bba <__aeabi_dadd+0x4ce>
 8001b10:	464a      	mov	r2, r9
 8001b12:	464c      	mov	r4, r9
 8001b14:	432a      	orrs	r2, r5
 8001b16:	d000      	beq.n	8001b1a <__aeabi_dadd+0x42e>
 8001b18:	e640      	b.n	800179c <__aeabi_dadd+0xb0>
 8001b1a:	2600      	movs	r6, #0
 8001b1c:	2400      	movs	r4, #0
 8001b1e:	2500      	movs	r5, #0
 8001b20:	e67c      	b.n	800181c <__aeabi_dadd+0x130>
 8001b22:	4da1      	ldr	r5, [pc, #644]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b24:	45a9      	cmp	r9, r5
 8001b26:	d100      	bne.n	8001b2a <__aeabi_dadd+0x43e>
 8001b28:	e090      	b.n	8001c4c <__aeabi_dadd+0x560>
 8001b2a:	2501      	movs	r5, #1
 8001b2c:	2a38      	cmp	r2, #56	@ 0x38
 8001b2e:	dd00      	ble.n	8001b32 <__aeabi_dadd+0x446>
 8001b30:	e6ab      	b.n	800188a <__aeabi_dadd+0x19e>
 8001b32:	2580      	movs	r5, #128	@ 0x80
 8001b34:	042d      	lsls	r5, r5, #16
 8001b36:	432c      	orrs	r4, r5
 8001b38:	e695      	b.n	8001866 <__aeabi_dadd+0x17a>
 8001b3a:	0011      	movs	r1, r2
 8001b3c:	4655      	mov	r5, sl
 8001b3e:	3920      	subs	r1, #32
 8001b40:	40cd      	lsrs	r5, r1
 8001b42:	46a9      	mov	r9, r5
 8001b44:	2a20      	cmp	r2, #32
 8001b46:	d006      	beq.n	8001b56 <__aeabi_dadd+0x46a>
 8001b48:	2140      	movs	r1, #64	@ 0x40
 8001b4a:	4653      	mov	r3, sl
 8001b4c:	1a8a      	subs	r2, r1, r2
 8001b4e:	4093      	lsls	r3, r2
 8001b50:	4662      	mov	r2, ip
 8001b52:	431a      	orrs	r2, r3
 8001b54:	4694      	mov	ip, r2
 8001b56:	4665      	mov	r5, ip
 8001b58:	1e6b      	subs	r3, r5, #1
 8001b5a:	419d      	sbcs	r5, r3
 8001b5c:	464b      	mov	r3, r9
 8001b5e:	431d      	orrs	r5, r3
 8001b60:	e612      	b.n	8001788 <__aeabi_dadd+0x9c>
 8001b62:	0021      	movs	r1, r4
 8001b64:	4301      	orrs	r1, r0
 8001b66:	d100      	bne.n	8001b6a <__aeabi_dadd+0x47e>
 8001b68:	e0c4      	b.n	8001cf4 <__aeabi_dadd+0x608>
 8001b6a:	1e51      	subs	r1, r2, #1
 8001b6c:	2a01      	cmp	r2, #1
 8001b6e:	d100      	bne.n	8001b72 <__aeabi_dadd+0x486>
 8001b70:	e0fb      	b.n	8001d6a <__aeabi_dadd+0x67e>
 8001b72:	4d8d      	ldr	r5, [pc, #564]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b74:	42aa      	cmp	r2, r5
 8001b76:	d100      	bne.n	8001b7a <__aeabi_dadd+0x48e>
 8001b78:	e0b5      	b.n	8001ce6 <__aeabi_dadd+0x5fa>
 8001b7a:	2501      	movs	r5, #1
 8001b7c:	2938      	cmp	r1, #56	@ 0x38
 8001b7e:	dd00      	ble.n	8001b82 <__aeabi_dadd+0x496>
 8001b80:	e741      	b.n	8001a06 <__aeabi_dadd+0x31a>
 8001b82:	000a      	movs	r2, r1
 8001b84:	e72f      	b.n	80019e6 <__aeabi_dadd+0x2fa>
 8001b86:	4c89      	ldr	r4, [pc, #548]	@ (8001dac <__aeabi_dadd+0x6c0>)
 8001b88:	1aff      	subs	r7, r7, r3
 8001b8a:	4014      	ands	r4, r2
 8001b8c:	0762      	lsls	r2, r4, #29
 8001b8e:	08e4      	lsrs	r4, r4, #3
 8001b90:	e76a      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001b92:	4a85      	ldr	r2, [pc, #532]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001b94:	4291      	cmp	r1, r2
 8001b96:	d100      	bne.n	8001b9a <__aeabi_dadd+0x4ae>
 8001b98:	e0e3      	b.n	8001d62 <__aeabi_dadd+0x676>
 8001b9a:	4663      	mov	r3, ip
 8001b9c:	18c2      	adds	r2, r0, r3
 8001b9e:	4282      	cmp	r2, r0
 8001ba0:	4180      	sbcs	r0, r0
 8001ba2:	0023      	movs	r3, r4
 8001ba4:	4240      	negs	r0, r0
 8001ba6:	4453      	add	r3, sl
 8001ba8:	181b      	adds	r3, r3, r0
 8001baa:	07dd      	lsls	r5, r3, #31
 8001bac:	085c      	lsrs	r4, r3, #1
 8001bae:	2307      	movs	r3, #7
 8001bb0:	0852      	lsrs	r2, r2, #1
 8001bb2:	4315      	orrs	r5, r2
 8001bb4:	000f      	movs	r7, r1
 8001bb6:	402b      	ands	r3, r5
 8001bb8:	e700      	b.n	80019bc <__aeabi_dadd+0x2d0>
 8001bba:	4663      	mov	r3, ip
 8001bbc:	1a1d      	subs	r5, r3, r0
 8001bbe:	45ac      	cmp	ip, r5
 8001bc0:	4192      	sbcs	r2, r2
 8001bc2:	4653      	mov	r3, sl
 8001bc4:	4252      	negs	r2, r2
 8001bc6:	1b1c      	subs	r4, r3, r4
 8001bc8:	000e      	movs	r6, r1
 8001bca:	4688      	mov	r8, r1
 8001bcc:	1aa4      	subs	r4, r4, r2
 8001bce:	e5e5      	b.n	800179c <__aeabi_dadd+0xb0>
 8001bd0:	2d00      	cmp	r5, #0
 8001bd2:	d000      	beq.n	8001bd6 <__aeabi_dadd+0x4ea>
 8001bd4:	e091      	b.n	8001cfa <__aeabi_dadd+0x60e>
 8001bd6:	2a00      	cmp	r2, #0
 8001bd8:	d138      	bne.n	8001c4c <__aeabi_dadd+0x560>
 8001bda:	2480      	movs	r4, #128	@ 0x80
 8001bdc:	2600      	movs	r6, #0
 8001bde:	0324      	lsls	r4, r4, #12
 8001be0:	e756      	b.n	8001a90 <__aeabi_dadd+0x3a4>
 8001be2:	4663      	mov	r3, ip
 8001be4:	18c5      	adds	r5, r0, r3
 8001be6:	4285      	cmp	r5, r0
 8001be8:	4180      	sbcs	r0, r0
 8001bea:	4454      	add	r4, sl
 8001bec:	4240      	negs	r0, r0
 8001bee:	1824      	adds	r4, r4, r0
 8001bf0:	2701      	movs	r7, #1
 8001bf2:	0223      	lsls	r3, r4, #8
 8001bf4:	d400      	bmi.n	8001bf8 <__aeabi_dadd+0x50c>
 8001bf6:	e6df      	b.n	80019b8 <__aeabi_dadd+0x2cc>
 8001bf8:	2702      	movs	r7, #2
 8001bfa:	e687      	b.n	800190c <__aeabi_dadd+0x220>
 8001bfc:	4663      	mov	r3, ip
 8001bfe:	1ac5      	subs	r5, r0, r3
 8001c00:	42a8      	cmp	r0, r5
 8001c02:	4180      	sbcs	r0, r0
 8001c04:	4653      	mov	r3, sl
 8001c06:	4240      	negs	r0, r0
 8001c08:	1ae4      	subs	r4, r4, r3
 8001c0a:	2701      	movs	r7, #1
 8001c0c:	1a24      	subs	r4, r4, r0
 8001c0e:	e5c0      	b.n	8001792 <__aeabi_dadd+0xa6>
 8001c10:	0762      	lsls	r2, r4, #29
 8001c12:	08c0      	lsrs	r0, r0, #3
 8001c14:	4302      	orrs	r2, r0
 8001c16:	08e4      	lsrs	r4, r4, #3
 8001c18:	e736      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001c1a:	0011      	movs	r1, r2
 8001c1c:	4653      	mov	r3, sl
 8001c1e:	3920      	subs	r1, #32
 8001c20:	40cb      	lsrs	r3, r1
 8001c22:	4699      	mov	r9, r3
 8001c24:	2a20      	cmp	r2, #32
 8001c26:	d006      	beq.n	8001c36 <__aeabi_dadd+0x54a>
 8001c28:	2140      	movs	r1, #64	@ 0x40
 8001c2a:	4653      	mov	r3, sl
 8001c2c:	1a8a      	subs	r2, r1, r2
 8001c2e:	4093      	lsls	r3, r2
 8001c30:	4662      	mov	r2, ip
 8001c32:	431a      	orrs	r2, r3
 8001c34:	4694      	mov	ip, r2
 8001c36:	4665      	mov	r5, ip
 8001c38:	1e6b      	subs	r3, r5, #1
 8001c3a:	419d      	sbcs	r5, r3
 8001c3c:	464b      	mov	r3, r9
 8001c3e:	431d      	orrs	r5, r3
 8001c40:	e659      	b.n	80018f6 <__aeabi_dadd+0x20a>
 8001c42:	0762      	lsls	r2, r4, #29
 8001c44:	08c0      	lsrs	r0, r0, #3
 8001c46:	4302      	orrs	r2, r0
 8001c48:	08e4      	lsrs	r4, r4, #3
 8001c4a:	e70d      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001c4c:	4653      	mov	r3, sl
 8001c4e:	075a      	lsls	r2, r3, #29
 8001c50:	4663      	mov	r3, ip
 8001c52:	08d8      	lsrs	r0, r3, #3
 8001c54:	4653      	mov	r3, sl
 8001c56:	000e      	movs	r6, r1
 8001c58:	4302      	orrs	r2, r0
 8001c5a:	08dc      	lsrs	r4, r3, #3
 8001c5c:	e714      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001c5e:	0015      	movs	r5, r2
 8001c60:	0026      	movs	r6, r4
 8001c62:	3d20      	subs	r5, #32
 8001c64:	40ee      	lsrs	r6, r5
 8001c66:	2a20      	cmp	r2, #32
 8001c68:	d003      	beq.n	8001c72 <__aeabi_dadd+0x586>
 8001c6a:	2540      	movs	r5, #64	@ 0x40
 8001c6c:	1aaa      	subs	r2, r5, r2
 8001c6e:	4094      	lsls	r4, r2
 8001c70:	4320      	orrs	r0, r4
 8001c72:	1e42      	subs	r2, r0, #1
 8001c74:	4190      	sbcs	r0, r2
 8001c76:	0005      	movs	r5, r0
 8001c78:	4335      	orrs	r5, r6
 8001c7a:	e606      	b.n	800188a <__aeabi_dadd+0x19e>
 8001c7c:	2a00      	cmp	r2, #0
 8001c7e:	d07c      	beq.n	8001d7a <__aeabi_dadd+0x68e>
 8001c80:	4662      	mov	r2, ip
 8001c82:	4653      	mov	r3, sl
 8001c84:	08c0      	lsrs	r0, r0, #3
 8001c86:	431a      	orrs	r2, r3
 8001c88:	d100      	bne.n	8001c8c <__aeabi_dadd+0x5a0>
 8001c8a:	e6fa      	b.n	8001a82 <__aeabi_dadd+0x396>
 8001c8c:	0762      	lsls	r2, r4, #29
 8001c8e:	4310      	orrs	r0, r2
 8001c90:	2280      	movs	r2, #128	@ 0x80
 8001c92:	08e4      	lsrs	r4, r4, #3
 8001c94:	0312      	lsls	r2, r2, #12
 8001c96:	4214      	tst	r4, r2
 8001c98:	d008      	beq.n	8001cac <__aeabi_dadd+0x5c0>
 8001c9a:	08d9      	lsrs	r1, r3, #3
 8001c9c:	4211      	tst	r1, r2
 8001c9e:	d105      	bne.n	8001cac <__aeabi_dadd+0x5c0>
 8001ca0:	4663      	mov	r3, ip
 8001ca2:	08d8      	lsrs	r0, r3, #3
 8001ca4:	4653      	mov	r3, sl
 8001ca6:	000c      	movs	r4, r1
 8001ca8:	075b      	lsls	r3, r3, #29
 8001caa:	4318      	orrs	r0, r3
 8001cac:	0f42      	lsrs	r2, r0, #29
 8001cae:	00c0      	lsls	r0, r0, #3
 8001cb0:	08c0      	lsrs	r0, r0, #3
 8001cb2:	0752      	lsls	r2, r2, #29
 8001cb4:	4302      	orrs	r2, r0
 8001cb6:	e6e7      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001cb8:	2a00      	cmp	r2, #0
 8001cba:	d100      	bne.n	8001cbe <__aeabi_dadd+0x5d2>
 8001cbc:	e72d      	b.n	8001b1a <__aeabi_dadd+0x42e>
 8001cbe:	4663      	mov	r3, ip
 8001cc0:	08d8      	lsrs	r0, r3, #3
 8001cc2:	4653      	mov	r3, sl
 8001cc4:	075a      	lsls	r2, r3, #29
 8001cc6:	000e      	movs	r6, r1
 8001cc8:	4302      	orrs	r2, r0
 8001cca:	08dc      	lsrs	r4, r3, #3
 8001ccc:	e6cc      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001cce:	4663      	mov	r3, ip
 8001cd0:	1a1d      	subs	r5, r3, r0
 8001cd2:	45ac      	cmp	ip, r5
 8001cd4:	4192      	sbcs	r2, r2
 8001cd6:	4653      	mov	r3, sl
 8001cd8:	4252      	negs	r2, r2
 8001cda:	1b1c      	subs	r4, r3, r4
 8001cdc:	000e      	movs	r6, r1
 8001cde:	4688      	mov	r8, r1
 8001ce0:	1aa4      	subs	r4, r4, r2
 8001ce2:	3701      	adds	r7, #1
 8001ce4:	e555      	b.n	8001792 <__aeabi_dadd+0xa6>
 8001ce6:	4663      	mov	r3, ip
 8001ce8:	08d9      	lsrs	r1, r3, #3
 8001cea:	4653      	mov	r3, sl
 8001cec:	075a      	lsls	r2, r3, #29
 8001cee:	430a      	orrs	r2, r1
 8001cf0:	08dc      	lsrs	r4, r3, #3
 8001cf2:	e6c9      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001cf4:	4660      	mov	r0, ip
 8001cf6:	4654      	mov	r4, sl
 8001cf8:	e6d4      	b.n	8001aa4 <__aeabi_dadd+0x3b8>
 8001cfa:	08c0      	lsrs	r0, r0, #3
 8001cfc:	2a00      	cmp	r2, #0
 8001cfe:	d100      	bne.n	8001d02 <__aeabi_dadd+0x616>
 8001d00:	e6bf      	b.n	8001a82 <__aeabi_dadd+0x396>
 8001d02:	0762      	lsls	r2, r4, #29
 8001d04:	4310      	orrs	r0, r2
 8001d06:	2280      	movs	r2, #128	@ 0x80
 8001d08:	08e4      	lsrs	r4, r4, #3
 8001d0a:	0312      	lsls	r2, r2, #12
 8001d0c:	4214      	tst	r4, r2
 8001d0e:	d0cd      	beq.n	8001cac <__aeabi_dadd+0x5c0>
 8001d10:	08dd      	lsrs	r5, r3, #3
 8001d12:	4215      	tst	r5, r2
 8001d14:	d1ca      	bne.n	8001cac <__aeabi_dadd+0x5c0>
 8001d16:	4663      	mov	r3, ip
 8001d18:	08d8      	lsrs	r0, r3, #3
 8001d1a:	4653      	mov	r3, sl
 8001d1c:	075b      	lsls	r3, r3, #29
 8001d1e:	000e      	movs	r6, r1
 8001d20:	002c      	movs	r4, r5
 8001d22:	4318      	orrs	r0, r3
 8001d24:	e7c2      	b.n	8001cac <__aeabi_dadd+0x5c0>
 8001d26:	4663      	mov	r3, ip
 8001d28:	08d9      	lsrs	r1, r3, #3
 8001d2a:	4653      	mov	r3, sl
 8001d2c:	075a      	lsls	r2, r3, #29
 8001d2e:	430a      	orrs	r2, r1
 8001d30:	08dc      	lsrs	r4, r3, #3
 8001d32:	e699      	b.n	8001a68 <__aeabi_dadd+0x37c>
 8001d34:	4663      	mov	r3, ip
 8001d36:	08d8      	lsrs	r0, r3, #3
 8001d38:	4653      	mov	r3, sl
 8001d3a:	075a      	lsls	r2, r3, #29
 8001d3c:	000e      	movs	r6, r1
 8001d3e:	4302      	orrs	r2, r0
 8001d40:	08dc      	lsrs	r4, r3, #3
 8001d42:	e6a1      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001d44:	0011      	movs	r1, r2
 8001d46:	0027      	movs	r7, r4
 8001d48:	3920      	subs	r1, #32
 8001d4a:	40cf      	lsrs	r7, r1
 8001d4c:	2a20      	cmp	r2, #32
 8001d4e:	d003      	beq.n	8001d58 <__aeabi_dadd+0x66c>
 8001d50:	2140      	movs	r1, #64	@ 0x40
 8001d52:	1a8a      	subs	r2, r1, r2
 8001d54:	4094      	lsls	r4, r2
 8001d56:	4320      	orrs	r0, r4
 8001d58:	1e42      	subs	r2, r0, #1
 8001d5a:	4190      	sbcs	r0, r2
 8001d5c:	0005      	movs	r5, r0
 8001d5e:	433d      	orrs	r5, r7
 8001d60:	e651      	b.n	8001a06 <__aeabi_dadd+0x31a>
 8001d62:	000c      	movs	r4, r1
 8001d64:	2500      	movs	r5, #0
 8001d66:	2200      	movs	r2, #0
 8001d68:	e558      	b.n	800181c <__aeabi_dadd+0x130>
 8001d6a:	4460      	add	r0, ip
 8001d6c:	4560      	cmp	r0, ip
 8001d6e:	4192      	sbcs	r2, r2
 8001d70:	4454      	add	r4, sl
 8001d72:	4252      	negs	r2, r2
 8001d74:	0005      	movs	r5, r0
 8001d76:	18a4      	adds	r4, r4, r2
 8001d78:	e73a      	b.n	8001bf0 <__aeabi_dadd+0x504>
 8001d7a:	4653      	mov	r3, sl
 8001d7c:	075a      	lsls	r2, r3, #29
 8001d7e:	4663      	mov	r3, ip
 8001d80:	08d9      	lsrs	r1, r3, #3
 8001d82:	4653      	mov	r3, sl
 8001d84:	430a      	orrs	r2, r1
 8001d86:	08dc      	lsrs	r4, r3, #3
 8001d88:	e67e      	b.n	8001a88 <__aeabi_dadd+0x39c>
 8001d8a:	001a      	movs	r2, r3
 8001d8c:	001c      	movs	r4, r3
 8001d8e:	432a      	orrs	r2, r5
 8001d90:	d000      	beq.n	8001d94 <__aeabi_dadd+0x6a8>
 8001d92:	e6ab      	b.n	8001aec <__aeabi_dadd+0x400>
 8001d94:	e6c1      	b.n	8001b1a <__aeabi_dadd+0x42e>
 8001d96:	2120      	movs	r1, #32
 8001d98:	2500      	movs	r5, #0
 8001d9a:	1a09      	subs	r1, r1, r0
 8001d9c:	e519      	b.n	80017d2 <__aeabi_dadd+0xe6>
 8001d9e:	2200      	movs	r2, #0
 8001da0:	2500      	movs	r5, #0
 8001da2:	4c01      	ldr	r4, [pc, #4]	@ (8001da8 <__aeabi_dadd+0x6bc>)
 8001da4:	e53a      	b.n	800181c <__aeabi_dadd+0x130>
 8001da6:	46c0      	nop			@ (mov r8, r8)
 8001da8:	000007ff 	.word	0x000007ff
 8001dac:	ff7fffff 	.word	0xff7fffff
 8001db0:	000007fe 	.word	0x000007fe

08001db4 <__aeabi_ddiv>:
 8001db4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8001db6:	46de      	mov	lr, fp
 8001db8:	4645      	mov	r5, r8
 8001dba:	4657      	mov	r7, sl
 8001dbc:	464e      	mov	r6, r9
 8001dbe:	b5e0      	push	{r5, r6, r7, lr}
 8001dc0:	b087      	sub	sp, #28
 8001dc2:	9200      	str	r2, [sp, #0]
 8001dc4:	9301      	str	r3, [sp, #4]
 8001dc6:	030b      	lsls	r3, r1, #12
 8001dc8:	0b1b      	lsrs	r3, r3, #12
 8001dca:	469b      	mov	fp, r3
 8001dcc:	0fca      	lsrs	r2, r1, #31
 8001dce:	004b      	lsls	r3, r1, #1
 8001dd0:	0004      	movs	r4, r0
 8001dd2:	4680      	mov	r8, r0
 8001dd4:	0d5b      	lsrs	r3, r3, #21
 8001dd6:	9202      	str	r2, [sp, #8]
 8001dd8:	d100      	bne.n	8001ddc <__aeabi_ddiv+0x28>
 8001dda:	e16a      	b.n	80020b2 <__aeabi_ddiv+0x2fe>
 8001ddc:	4ad4      	ldr	r2, [pc, #848]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001dde:	4293      	cmp	r3, r2
 8001de0:	d100      	bne.n	8001de4 <__aeabi_ddiv+0x30>
 8001de2:	e18c      	b.n	80020fe <__aeabi_ddiv+0x34a>
 8001de4:	4659      	mov	r1, fp
 8001de6:	0f42      	lsrs	r2, r0, #29
 8001de8:	00c9      	lsls	r1, r1, #3
 8001dea:	430a      	orrs	r2, r1
 8001dec:	2180      	movs	r1, #128	@ 0x80
 8001dee:	0409      	lsls	r1, r1, #16
 8001df0:	4311      	orrs	r1, r2
 8001df2:	00c2      	lsls	r2, r0, #3
 8001df4:	4690      	mov	r8, r2
 8001df6:	4acf      	ldr	r2, [pc, #828]	@ (8002134 <__aeabi_ddiv+0x380>)
 8001df8:	4689      	mov	r9, r1
 8001dfa:	4692      	mov	sl, r2
 8001dfc:	449a      	add	sl, r3
 8001dfe:	2300      	movs	r3, #0
 8001e00:	2400      	movs	r4, #0
 8001e02:	9303      	str	r3, [sp, #12]
 8001e04:	9e00      	ldr	r6, [sp, #0]
 8001e06:	9f01      	ldr	r7, [sp, #4]
 8001e08:	033b      	lsls	r3, r7, #12
 8001e0a:	0b1b      	lsrs	r3, r3, #12
 8001e0c:	469b      	mov	fp, r3
 8001e0e:	007b      	lsls	r3, r7, #1
 8001e10:	0030      	movs	r0, r6
 8001e12:	0d5b      	lsrs	r3, r3, #21
 8001e14:	0ffd      	lsrs	r5, r7, #31
 8001e16:	2b00      	cmp	r3, #0
 8001e18:	d100      	bne.n	8001e1c <__aeabi_ddiv+0x68>
 8001e1a:	e128      	b.n	800206e <__aeabi_ddiv+0x2ba>
 8001e1c:	4ac4      	ldr	r2, [pc, #784]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001e1e:	4293      	cmp	r3, r2
 8001e20:	d100      	bne.n	8001e24 <__aeabi_ddiv+0x70>
 8001e22:	e177      	b.n	8002114 <__aeabi_ddiv+0x360>
 8001e24:	4659      	mov	r1, fp
 8001e26:	0f72      	lsrs	r2, r6, #29
 8001e28:	00c9      	lsls	r1, r1, #3
 8001e2a:	430a      	orrs	r2, r1
 8001e2c:	2180      	movs	r1, #128	@ 0x80
 8001e2e:	0409      	lsls	r1, r1, #16
 8001e30:	4311      	orrs	r1, r2
 8001e32:	468b      	mov	fp, r1
 8001e34:	49bf      	ldr	r1, [pc, #764]	@ (8002134 <__aeabi_ddiv+0x380>)
 8001e36:	00f2      	lsls	r2, r6, #3
 8001e38:	468c      	mov	ip, r1
 8001e3a:	4651      	mov	r1, sl
 8001e3c:	4463      	add	r3, ip
 8001e3e:	1acb      	subs	r3, r1, r3
 8001e40:	469a      	mov	sl, r3
 8001e42:	2300      	movs	r3, #0
 8001e44:	9e02      	ldr	r6, [sp, #8]
 8001e46:	406e      	eors	r6, r5
 8001e48:	2c0f      	cmp	r4, #15
 8001e4a:	d827      	bhi.n	8001e9c <__aeabi_ddiv+0xe8>
 8001e4c:	49ba      	ldr	r1, [pc, #744]	@ (8002138 <__aeabi_ddiv+0x384>)
 8001e4e:	00a4      	lsls	r4, r4, #2
 8001e50:	5909      	ldr	r1, [r1, r4]
 8001e52:	468f      	mov	pc, r1
 8001e54:	46cb      	mov	fp, r9
 8001e56:	4642      	mov	r2, r8
 8001e58:	9e02      	ldr	r6, [sp, #8]
 8001e5a:	9b03      	ldr	r3, [sp, #12]
 8001e5c:	2b02      	cmp	r3, #2
 8001e5e:	d016      	beq.n	8001e8e <__aeabi_ddiv+0xda>
 8001e60:	2b03      	cmp	r3, #3
 8001e62:	d100      	bne.n	8001e66 <__aeabi_ddiv+0xb2>
 8001e64:	e2a6      	b.n	80023b4 <__aeabi_ddiv+0x600>
 8001e66:	2b01      	cmp	r3, #1
 8001e68:	d000      	beq.n	8001e6c <__aeabi_ddiv+0xb8>
 8001e6a:	e0df      	b.n	800202c <__aeabi_ddiv+0x278>
 8001e6c:	2200      	movs	r2, #0
 8001e6e:	2300      	movs	r3, #0
 8001e70:	2400      	movs	r4, #0
 8001e72:	4690      	mov	r8, r2
 8001e74:	051b      	lsls	r3, r3, #20
 8001e76:	4323      	orrs	r3, r4
 8001e78:	07f6      	lsls	r6, r6, #31
 8001e7a:	4333      	orrs	r3, r6
 8001e7c:	4640      	mov	r0, r8
 8001e7e:	0019      	movs	r1, r3
 8001e80:	b007      	add	sp, #28
 8001e82:	bcf0      	pop	{r4, r5, r6, r7}
 8001e84:	46bb      	mov	fp, r7
 8001e86:	46b2      	mov	sl, r6
 8001e88:	46a9      	mov	r9, r5
 8001e8a:	46a0      	mov	r8, r4
 8001e8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8001e8e:	2200      	movs	r2, #0
 8001e90:	2400      	movs	r4, #0
 8001e92:	4690      	mov	r8, r2
 8001e94:	4ba6      	ldr	r3, [pc, #664]	@ (8002130 <__aeabi_ddiv+0x37c>)
 8001e96:	e7ed      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8001e98:	002e      	movs	r6, r5
 8001e9a:	e7df      	b.n	8001e5c <__aeabi_ddiv+0xa8>
 8001e9c:	45cb      	cmp	fp, r9
 8001e9e:	d200      	bcs.n	8001ea2 <__aeabi_ddiv+0xee>
 8001ea0:	e1d4      	b.n	800224c <__aeabi_ddiv+0x498>
 8001ea2:	d100      	bne.n	8001ea6 <__aeabi_ddiv+0xf2>
 8001ea4:	e1cf      	b.n	8002246 <__aeabi_ddiv+0x492>
 8001ea6:	2301      	movs	r3, #1
 8001ea8:	425b      	negs	r3, r3
 8001eaa:	469c      	mov	ip, r3
 8001eac:	4644      	mov	r4, r8
 8001eae:	4648      	mov	r0, r9
 8001eb0:	2700      	movs	r7, #0
 8001eb2:	44e2      	add	sl, ip
 8001eb4:	465b      	mov	r3, fp
 8001eb6:	0e15      	lsrs	r5, r2, #24
 8001eb8:	021b      	lsls	r3, r3, #8
 8001eba:	431d      	orrs	r5, r3
 8001ebc:	0c19      	lsrs	r1, r3, #16
 8001ebe:	042b      	lsls	r3, r5, #16
 8001ec0:	0212      	lsls	r2, r2, #8
 8001ec2:	9500      	str	r5, [sp, #0]
 8001ec4:	0c1d      	lsrs	r5, r3, #16
 8001ec6:	4691      	mov	r9, r2
 8001ec8:	9102      	str	r1, [sp, #8]
 8001eca:	9503      	str	r5, [sp, #12]
 8001ecc:	f7fe f9f0 	bl	80002b0 <__aeabi_uidivmod>
 8001ed0:	0002      	movs	r2, r0
 8001ed2:	436a      	muls	r2, r5
 8001ed4:	040b      	lsls	r3, r1, #16
 8001ed6:	0c21      	lsrs	r1, r4, #16
 8001ed8:	4680      	mov	r8, r0
 8001eda:	4319      	orrs	r1, r3
 8001edc:	428a      	cmp	r2, r1
 8001ede:	d909      	bls.n	8001ef4 <__aeabi_ddiv+0x140>
 8001ee0:	9d00      	ldr	r5, [sp, #0]
 8001ee2:	2301      	movs	r3, #1
 8001ee4:	46ac      	mov	ip, r5
 8001ee6:	425b      	negs	r3, r3
 8001ee8:	4461      	add	r1, ip
 8001eea:	469c      	mov	ip, r3
 8001eec:	44e0      	add	r8, ip
 8001eee:	428d      	cmp	r5, r1
 8001ef0:	d800      	bhi.n	8001ef4 <__aeabi_ddiv+0x140>
 8001ef2:	e1fb      	b.n	80022ec <__aeabi_ddiv+0x538>
 8001ef4:	1a88      	subs	r0, r1, r2
 8001ef6:	9902      	ldr	r1, [sp, #8]
 8001ef8:	f7fe f9da 	bl	80002b0 <__aeabi_uidivmod>
 8001efc:	9a03      	ldr	r2, [sp, #12]
 8001efe:	0424      	lsls	r4, r4, #16
 8001f00:	4342      	muls	r2, r0
 8001f02:	0409      	lsls	r1, r1, #16
 8001f04:	0c24      	lsrs	r4, r4, #16
 8001f06:	0003      	movs	r3, r0
 8001f08:	430c      	orrs	r4, r1
 8001f0a:	42a2      	cmp	r2, r4
 8001f0c:	d906      	bls.n	8001f1c <__aeabi_ddiv+0x168>
 8001f0e:	9900      	ldr	r1, [sp, #0]
 8001f10:	3b01      	subs	r3, #1
 8001f12:	468c      	mov	ip, r1
 8001f14:	4464      	add	r4, ip
 8001f16:	42a1      	cmp	r1, r4
 8001f18:	d800      	bhi.n	8001f1c <__aeabi_ddiv+0x168>
 8001f1a:	e1e1      	b.n	80022e0 <__aeabi_ddiv+0x52c>
 8001f1c:	1aa0      	subs	r0, r4, r2
 8001f1e:	4642      	mov	r2, r8
 8001f20:	0412      	lsls	r2, r2, #16
 8001f22:	431a      	orrs	r2, r3
 8001f24:	4693      	mov	fp, r2
 8001f26:	464b      	mov	r3, r9
 8001f28:	4659      	mov	r1, fp
 8001f2a:	0c1b      	lsrs	r3, r3, #16
 8001f2c:	001d      	movs	r5, r3
 8001f2e:	9304      	str	r3, [sp, #16]
 8001f30:	040b      	lsls	r3, r1, #16
 8001f32:	4649      	mov	r1, r9
 8001f34:	0409      	lsls	r1, r1, #16
 8001f36:	0c09      	lsrs	r1, r1, #16
 8001f38:	000c      	movs	r4, r1
 8001f3a:	0c1b      	lsrs	r3, r3, #16
 8001f3c:	435c      	muls	r4, r3
 8001f3e:	0c12      	lsrs	r2, r2, #16
 8001f40:	436b      	muls	r3, r5
 8001f42:	4688      	mov	r8, r1
 8001f44:	4351      	muls	r1, r2
 8001f46:	436a      	muls	r2, r5
 8001f48:	0c25      	lsrs	r5, r4, #16
 8001f4a:	46ac      	mov	ip, r5
 8001f4c:	185b      	adds	r3, r3, r1
 8001f4e:	4463      	add	r3, ip
 8001f50:	4299      	cmp	r1, r3
 8001f52:	d903      	bls.n	8001f5c <__aeabi_ddiv+0x1a8>
 8001f54:	2180      	movs	r1, #128	@ 0x80
 8001f56:	0249      	lsls	r1, r1, #9
 8001f58:	468c      	mov	ip, r1
 8001f5a:	4462      	add	r2, ip
 8001f5c:	0c19      	lsrs	r1, r3, #16
 8001f5e:	0424      	lsls	r4, r4, #16
 8001f60:	041b      	lsls	r3, r3, #16
 8001f62:	0c24      	lsrs	r4, r4, #16
 8001f64:	188a      	adds	r2, r1, r2
 8001f66:	191c      	adds	r4, r3, r4
 8001f68:	4290      	cmp	r0, r2
 8001f6a:	d302      	bcc.n	8001f72 <__aeabi_ddiv+0x1be>
 8001f6c:	d116      	bne.n	8001f9c <__aeabi_ddiv+0x1e8>
 8001f6e:	42a7      	cmp	r7, r4
 8001f70:	d214      	bcs.n	8001f9c <__aeabi_ddiv+0x1e8>
 8001f72:	465b      	mov	r3, fp
 8001f74:	9d00      	ldr	r5, [sp, #0]
 8001f76:	3b01      	subs	r3, #1
 8001f78:	444f      	add	r7, r9
 8001f7a:	9305      	str	r3, [sp, #20]
 8001f7c:	454f      	cmp	r7, r9
 8001f7e:	419b      	sbcs	r3, r3
 8001f80:	46ac      	mov	ip, r5
 8001f82:	425b      	negs	r3, r3
 8001f84:	4463      	add	r3, ip
 8001f86:	18c0      	adds	r0, r0, r3
 8001f88:	4285      	cmp	r5, r0
 8001f8a:	d300      	bcc.n	8001f8e <__aeabi_ddiv+0x1da>
 8001f8c:	e1a1      	b.n	80022d2 <__aeabi_ddiv+0x51e>
 8001f8e:	4282      	cmp	r2, r0
 8001f90:	d900      	bls.n	8001f94 <__aeabi_ddiv+0x1e0>
 8001f92:	e1f6      	b.n	8002382 <__aeabi_ddiv+0x5ce>
 8001f94:	d100      	bne.n	8001f98 <__aeabi_ddiv+0x1e4>
 8001f96:	e1f1      	b.n	800237c <__aeabi_ddiv+0x5c8>
 8001f98:	9b05      	ldr	r3, [sp, #20]
 8001f9a:	469b      	mov	fp, r3
 8001f9c:	1b3c      	subs	r4, r7, r4
 8001f9e:	42a7      	cmp	r7, r4
 8001fa0:	41bf      	sbcs	r7, r7
 8001fa2:	9d00      	ldr	r5, [sp, #0]
 8001fa4:	1a80      	subs	r0, r0, r2
 8001fa6:	427f      	negs	r7, r7
 8001fa8:	1bc0      	subs	r0, r0, r7
 8001faa:	4285      	cmp	r5, r0
 8001fac:	d100      	bne.n	8001fb0 <__aeabi_ddiv+0x1fc>
 8001fae:	e1d0      	b.n	8002352 <__aeabi_ddiv+0x59e>
 8001fb0:	9902      	ldr	r1, [sp, #8]
 8001fb2:	f7fe f97d 	bl	80002b0 <__aeabi_uidivmod>
 8001fb6:	9a03      	ldr	r2, [sp, #12]
 8001fb8:	040b      	lsls	r3, r1, #16
 8001fba:	4342      	muls	r2, r0
 8001fbc:	0c21      	lsrs	r1, r4, #16
 8001fbe:	0007      	movs	r7, r0
 8001fc0:	4319      	orrs	r1, r3
 8001fc2:	428a      	cmp	r2, r1
 8001fc4:	d900      	bls.n	8001fc8 <__aeabi_ddiv+0x214>
 8001fc6:	e178      	b.n	80022ba <__aeabi_ddiv+0x506>
 8001fc8:	1a88      	subs	r0, r1, r2
 8001fca:	9902      	ldr	r1, [sp, #8]
 8001fcc:	f7fe f970 	bl	80002b0 <__aeabi_uidivmod>
 8001fd0:	9a03      	ldr	r2, [sp, #12]
 8001fd2:	0424      	lsls	r4, r4, #16
 8001fd4:	4342      	muls	r2, r0
 8001fd6:	0409      	lsls	r1, r1, #16
 8001fd8:	0c24      	lsrs	r4, r4, #16
 8001fda:	0003      	movs	r3, r0
 8001fdc:	430c      	orrs	r4, r1
 8001fde:	42a2      	cmp	r2, r4
 8001fe0:	d900      	bls.n	8001fe4 <__aeabi_ddiv+0x230>
 8001fe2:	e15d      	b.n	80022a0 <__aeabi_ddiv+0x4ec>
 8001fe4:	4641      	mov	r1, r8
 8001fe6:	1aa4      	subs	r4, r4, r2
 8001fe8:	043a      	lsls	r2, r7, #16
 8001fea:	431a      	orrs	r2, r3
 8001fec:	9d04      	ldr	r5, [sp, #16]
 8001fee:	0413      	lsls	r3, r2, #16
 8001ff0:	0c1b      	lsrs	r3, r3, #16
 8001ff2:	4359      	muls	r1, r3
 8001ff4:	4647      	mov	r7, r8
 8001ff6:	436b      	muls	r3, r5
 8001ff8:	469c      	mov	ip, r3
 8001ffa:	0c10      	lsrs	r0, r2, #16
 8001ffc:	4347      	muls	r7, r0
 8001ffe:	0c0b      	lsrs	r3, r1, #16
 8002000:	44bc      	add	ip, r7
 8002002:	4463      	add	r3, ip
 8002004:	4368      	muls	r0, r5
 8002006:	429f      	cmp	r7, r3
 8002008:	d903      	bls.n	8002012 <__aeabi_ddiv+0x25e>
 800200a:	2580      	movs	r5, #128	@ 0x80
 800200c:	026d      	lsls	r5, r5, #9
 800200e:	46ac      	mov	ip, r5
 8002010:	4460      	add	r0, ip
 8002012:	0c1f      	lsrs	r7, r3, #16
 8002014:	0409      	lsls	r1, r1, #16
 8002016:	041b      	lsls	r3, r3, #16
 8002018:	0c09      	lsrs	r1, r1, #16
 800201a:	183f      	adds	r7, r7, r0
 800201c:	185b      	adds	r3, r3, r1
 800201e:	42bc      	cmp	r4, r7
 8002020:	d200      	bcs.n	8002024 <__aeabi_ddiv+0x270>
 8002022:	e102      	b.n	800222a <__aeabi_ddiv+0x476>
 8002024:	d100      	bne.n	8002028 <__aeabi_ddiv+0x274>
 8002026:	e0fd      	b.n	8002224 <__aeabi_ddiv+0x470>
 8002028:	2301      	movs	r3, #1
 800202a:	431a      	orrs	r2, r3
 800202c:	4b43      	ldr	r3, [pc, #268]	@ (800213c <__aeabi_ddiv+0x388>)
 800202e:	4453      	add	r3, sl
 8002030:	2b00      	cmp	r3, #0
 8002032:	dc00      	bgt.n	8002036 <__aeabi_ddiv+0x282>
 8002034:	e0ae      	b.n	8002194 <__aeabi_ddiv+0x3e0>
 8002036:	0751      	lsls	r1, r2, #29
 8002038:	d000      	beq.n	800203c <__aeabi_ddiv+0x288>
 800203a:	e198      	b.n	800236e <__aeabi_ddiv+0x5ba>
 800203c:	4659      	mov	r1, fp
 800203e:	01c9      	lsls	r1, r1, #7
 8002040:	d506      	bpl.n	8002050 <__aeabi_ddiv+0x29c>
 8002042:	4659      	mov	r1, fp
 8002044:	4b3e      	ldr	r3, [pc, #248]	@ (8002140 <__aeabi_ddiv+0x38c>)
 8002046:	4019      	ands	r1, r3
 8002048:	2380      	movs	r3, #128	@ 0x80
 800204a:	468b      	mov	fp, r1
 800204c:	00db      	lsls	r3, r3, #3
 800204e:	4453      	add	r3, sl
 8002050:	493c      	ldr	r1, [pc, #240]	@ (8002144 <__aeabi_ddiv+0x390>)
 8002052:	428b      	cmp	r3, r1
 8002054:	dd00      	ble.n	8002058 <__aeabi_ddiv+0x2a4>
 8002056:	e71a      	b.n	8001e8e <__aeabi_ddiv+0xda>
 8002058:	4659      	mov	r1, fp
 800205a:	08d2      	lsrs	r2, r2, #3
 800205c:	0749      	lsls	r1, r1, #29
 800205e:	4311      	orrs	r1, r2
 8002060:	465a      	mov	r2, fp
 8002062:	055b      	lsls	r3, r3, #21
 8002064:	0254      	lsls	r4, r2, #9
 8002066:	4688      	mov	r8, r1
 8002068:	0b24      	lsrs	r4, r4, #12
 800206a:	0d5b      	lsrs	r3, r3, #21
 800206c:	e702      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 800206e:	465a      	mov	r2, fp
 8002070:	9b00      	ldr	r3, [sp, #0]
 8002072:	431a      	orrs	r2, r3
 8002074:	d100      	bne.n	8002078 <__aeabi_ddiv+0x2c4>
 8002076:	e07e      	b.n	8002176 <__aeabi_ddiv+0x3c2>
 8002078:	465b      	mov	r3, fp
 800207a:	2b00      	cmp	r3, #0
 800207c:	d100      	bne.n	8002080 <__aeabi_ddiv+0x2cc>
 800207e:	e100      	b.n	8002282 <__aeabi_ddiv+0x4ce>
 8002080:	4658      	mov	r0, fp
 8002082:	f001 fabb 	bl	80035fc <__clzsi2>
 8002086:	0002      	movs	r2, r0
 8002088:	0003      	movs	r3, r0
 800208a:	3a0b      	subs	r2, #11
 800208c:	271d      	movs	r7, #29
 800208e:	9e00      	ldr	r6, [sp, #0]
 8002090:	1aba      	subs	r2, r7, r2
 8002092:	0019      	movs	r1, r3
 8002094:	4658      	mov	r0, fp
 8002096:	40d6      	lsrs	r6, r2
 8002098:	3908      	subs	r1, #8
 800209a:	4088      	lsls	r0, r1
 800209c:	0032      	movs	r2, r6
 800209e:	4302      	orrs	r2, r0
 80020a0:	4693      	mov	fp, r2
 80020a2:	9a00      	ldr	r2, [sp, #0]
 80020a4:	408a      	lsls	r2, r1
 80020a6:	4928      	ldr	r1, [pc, #160]	@ (8002148 <__aeabi_ddiv+0x394>)
 80020a8:	4453      	add	r3, sl
 80020aa:	468a      	mov	sl, r1
 80020ac:	449a      	add	sl, r3
 80020ae:	2300      	movs	r3, #0
 80020b0:	e6c8      	b.n	8001e44 <__aeabi_ddiv+0x90>
 80020b2:	465b      	mov	r3, fp
 80020b4:	4303      	orrs	r3, r0
 80020b6:	4699      	mov	r9, r3
 80020b8:	d056      	beq.n	8002168 <__aeabi_ddiv+0x3b4>
 80020ba:	465b      	mov	r3, fp
 80020bc:	2b00      	cmp	r3, #0
 80020be:	d100      	bne.n	80020c2 <__aeabi_ddiv+0x30e>
 80020c0:	e0cd      	b.n	800225e <__aeabi_ddiv+0x4aa>
 80020c2:	4658      	mov	r0, fp
 80020c4:	f001 fa9a 	bl	80035fc <__clzsi2>
 80020c8:	230b      	movs	r3, #11
 80020ca:	425b      	negs	r3, r3
 80020cc:	469c      	mov	ip, r3
 80020ce:	0002      	movs	r2, r0
 80020d0:	4484      	add	ip, r0
 80020d2:	4666      	mov	r6, ip
 80020d4:	231d      	movs	r3, #29
 80020d6:	1b9b      	subs	r3, r3, r6
 80020d8:	0026      	movs	r6, r4
 80020da:	0011      	movs	r1, r2
 80020dc:	4658      	mov	r0, fp
 80020de:	40de      	lsrs	r6, r3
 80020e0:	3908      	subs	r1, #8
 80020e2:	4088      	lsls	r0, r1
 80020e4:	0033      	movs	r3, r6
 80020e6:	4303      	orrs	r3, r0
 80020e8:	4699      	mov	r9, r3
 80020ea:	0023      	movs	r3, r4
 80020ec:	408b      	lsls	r3, r1
 80020ee:	4698      	mov	r8, r3
 80020f0:	4b16      	ldr	r3, [pc, #88]	@ (800214c <__aeabi_ddiv+0x398>)
 80020f2:	2400      	movs	r4, #0
 80020f4:	1a9b      	subs	r3, r3, r2
 80020f6:	469a      	mov	sl, r3
 80020f8:	2300      	movs	r3, #0
 80020fa:	9303      	str	r3, [sp, #12]
 80020fc:	e682      	b.n	8001e04 <__aeabi_ddiv+0x50>
 80020fe:	465a      	mov	r2, fp
 8002100:	4302      	orrs	r2, r0
 8002102:	4691      	mov	r9, r2
 8002104:	d12a      	bne.n	800215c <__aeabi_ddiv+0x3a8>
 8002106:	2200      	movs	r2, #0
 8002108:	469a      	mov	sl, r3
 800210a:	2302      	movs	r3, #2
 800210c:	4690      	mov	r8, r2
 800210e:	2408      	movs	r4, #8
 8002110:	9303      	str	r3, [sp, #12]
 8002112:	e677      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002114:	465a      	mov	r2, fp
 8002116:	9b00      	ldr	r3, [sp, #0]
 8002118:	431a      	orrs	r2, r3
 800211a:	4b0d      	ldr	r3, [pc, #52]	@ (8002150 <__aeabi_ddiv+0x39c>)
 800211c:	469c      	mov	ip, r3
 800211e:	44e2      	add	sl, ip
 8002120:	2a00      	cmp	r2, #0
 8002122:	d117      	bne.n	8002154 <__aeabi_ddiv+0x3a0>
 8002124:	2302      	movs	r3, #2
 8002126:	431c      	orrs	r4, r3
 8002128:	2300      	movs	r3, #0
 800212a:	469b      	mov	fp, r3
 800212c:	3302      	adds	r3, #2
 800212e:	e689      	b.n	8001e44 <__aeabi_ddiv+0x90>
 8002130:	000007ff 	.word	0x000007ff
 8002134:	fffffc01 	.word	0xfffffc01
 8002138:	080206b4 	.word	0x080206b4
 800213c:	000003ff 	.word	0x000003ff
 8002140:	feffffff 	.word	0xfeffffff
 8002144:	000007fe 	.word	0x000007fe
 8002148:	000003f3 	.word	0x000003f3
 800214c:	fffffc0d 	.word	0xfffffc0d
 8002150:	fffff801 	.word	0xfffff801
 8002154:	2303      	movs	r3, #3
 8002156:	0032      	movs	r2, r6
 8002158:	431c      	orrs	r4, r3
 800215a:	e673      	b.n	8001e44 <__aeabi_ddiv+0x90>
 800215c:	469a      	mov	sl, r3
 800215e:	2303      	movs	r3, #3
 8002160:	46d9      	mov	r9, fp
 8002162:	240c      	movs	r4, #12
 8002164:	9303      	str	r3, [sp, #12]
 8002166:	e64d      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002168:	2300      	movs	r3, #0
 800216a:	4698      	mov	r8, r3
 800216c:	469a      	mov	sl, r3
 800216e:	3301      	adds	r3, #1
 8002170:	2404      	movs	r4, #4
 8002172:	9303      	str	r3, [sp, #12]
 8002174:	e646      	b.n	8001e04 <__aeabi_ddiv+0x50>
 8002176:	2301      	movs	r3, #1
 8002178:	431c      	orrs	r4, r3
 800217a:	2300      	movs	r3, #0
 800217c:	469b      	mov	fp, r3
 800217e:	3301      	adds	r3, #1
 8002180:	e660      	b.n	8001e44 <__aeabi_ddiv+0x90>
 8002182:	2300      	movs	r3, #0
 8002184:	2480      	movs	r4, #128	@ 0x80
 8002186:	4698      	mov	r8, r3
 8002188:	2600      	movs	r6, #0
 800218a:	4b92      	ldr	r3, [pc, #584]	@ (80023d4 <__aeabi_ddiv+0x620>)
 800218c:	0324      	lsls	r4, r4, #12
 800218e:	e671      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002190:	2201      	movs	r2, #1
 8002192:	4252      	negs	r2, r2
 8002194:	2101      	movs	r1, #1
 8002196:	1ac9      	subs	r1, r1, r3
 8002198:	2938      	cmp	r1, #56	@ 0x38
 800219a:	dd00      	ble.n	800219e <__aeabi_ddiv+0x3ea>
 800219c:	e666      	b.n	8001e6c <__aeabi_ddiv+0xb8>
 800219e:	291f      	cmp	r1, #31
 80021a0:	dc00      	bgt.n	80021a4 <__aeabi_ddiv+0x3f0>
 80021a2:	e0ab      	b.n	80022fc <__aeabi_ddiv+0x548>
 80021a4:	201f      	movs	r0, #31
 80021a6:	4240      	negs	r0, r0
 80021a8:	1ac3      	subs	r3, r0, r3
 80021aa:	4658      	mov	r0, fp
 80021ac:	40d8      	lsrs	r0, r3
 80021ae:	0003      	movs	r3, r0
 80021b0:	2920      	cmp	r1, #32
 80021b2:	d004      	beq.n	80021be <__aeabi_ddiv+0x40a>
 80021b4:	4658      	mov	r0, fp
 80021b6:	4988      	ldr	r1, [pc, #544]	@ (80023d8 <__aeabi_ddiv+0x624>)
 80021b8:	4451      	add	r1, sl
 80021ba:	4088      	lsls	r0, r1
 80021bc:	4302      	orrs	r2, r0
 80021be:	1e51      	subs	r1, r2, #1
 80021c0:	418a      	sbcs	r2, r1
 80021c2:	431a      	orrs	r2, r3
 80021c4:	2307      	movs	r3, #7
 80021c6:	0019      	movs	r1, r3
 80021c8:	2400      	movs	r4, #0
 80021ca:	4011      	ands	r1, r2
 80021cc:	4213      	tst	r3, r2
 80021ce:	d00c      	beq.n	80021ea <__aeabi_ddiv+0x436>
 80021d0:	230f      	movs	r3, #15
 80021d2:	4013      	ands	r3, r2
 80021d4:	2b04      	cmp	r3, #4
 80021d6:	d100      	bne.n	80021da <__aeabi_ddiv+0x426>
 80021d8:	e0f9      	b.n	80023ce <__aeabi_ddiv+0x61a>
 80021da:	1d11      	adds	r1, r2, #4
 80021dc:	4291      	cmp	r1, r2
 80021de:	419b      	sbcs	r3, r3
 80021e0:	000a      	movs	r2, r1
 80021e2:	425b      	negs	r3, r3
 80021e4:	0759      	lsls	r1, r3, #29
 80021e6:	025b      	lsls	r3, r3, #9
 80021e8:	0b1c      	lsrs	r4, r3, #12
 80021ea:	08d2      	lsrs	r2, r2, #3
 80021ec:	430a      	orrs	r2, r1
 80021ee:	4690      	mov	r8, r2
 80021f0:	2300      	movs	r3, #0
 80021f2:	e63f      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 80021f4:	2480      	movs	r4, #128	@ 0x80
 80021f6:	464b      	mov	r3, r9
 80021f8:	0324      	lsls	r4, r4, #12
 80021fa:	4223      	tst	r3, r4
 80021fc:	d009      	beq.n	8002212 <__aeabi_ddiv+0x45e>
 80021fe:	465b      	mov	r3, fp
 8002200:	4223      	tst	r3, r4
 8002202:	d106      	bne.n	8002212 <__aeabi_ddiv+0x45e>
 8002204:	431c      	orrs	r4, r3
 8002206:	0324      	lsls	r4, r4, #12
 8002208:	002e      	movs	r6, r5
 800220a:	4690      	mov	r8, r2
 800220c:	4b71      	ldr	r3, [pc, #452]	@ (80023d4 <__aeabi_ddiv+0x620>)
 800220e:	0b24      	lsrs	r4, r4, #12
 8002210:	e630      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002212:	2480      	movs	r4, #128	@ 0x80
 8002214:	464b      	mov	r3, r9
 8002216:	0324      	lsls	r4, r4, #12
 8002218:	431c      	orrs	r4, r3
 800221a:	0324      	lsls	r4, r4, #12
 800221c:	9e02      	ldr	r6, [sp, #8]
 800221e:	4b6d      	ldr	r3, [pc, #436]	@ (80023d4 <__aeabi_ddiv+0x620>)
 8002220:	0b24      	lsrs	r4, r4, #12
 8002222:	e627      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002224:	2b00      	cmp	r3, #0
 8002226:	d100      	bne.n	800222a <__aeabi_ddiv+0x476>
 8002228:	e700      	b.n	800202c <__aeabi_ddiv+0x278>
 800222a:	9800      	ldr	r0, [sp, #0]
 800222c:	1e51      	subs	r1, r2, #1
 800222e:	4684      	mov	ip, r0
 8002230:	4464      	add	r4, ip
 8002232:	4284      	cmp	r4, r0
 8002234:	d200      	bcs.n	8002238 <__aeabi_ddiv+0x484>
 8002236:	e084      	b.n	8002342 <__aeabi_ddiv+0x58e>
 8002238:	42bc      	cmp	r4, r7
 800223a:	d200      	bcs.n	800223e <__aeabi_ddiv+0x48a>
 800223c:	e0ae      	b.n	800239c <__aeabi_ddiv+0x5e8>
 800223e:	d100      	bne.n	8002242 <__aeabi_ddiv+0x48e>
 8002240:	e0c1      	b.n	80023c6 <__aeabi_ddiv+0x612>
 8002242:	000a      	movs	r2, r1
 8002244:	e6f0      	b.n	8002028 <__aeabi_ddiv+0x274>
 8002246:	4542      	cmp	r2, r8
 8002248:	d900      	bls.n	800224c <__aeabi_ddiv+0x498>
 800224a:	e62c      	b.n	8001ea6 <__aeabi_ddiv+0xf2>
 800224c:	464b      	mov	r3, r9
 800224e:	07dc      	lsls	r4, r3, #31
 8002250:	0858      	lsrs	r0, r3, #1
 8002252:	4643      	mov	r3, r8
 8002254:	085b      	lsrs	r3, r3, #1
 8002256:	431c      	orrs	r4, r3
 8002258:	4643      	mov	r3, r8
 800225a:	07df      	lsls	r7, r3, #31
 800225c:	e62a      	b.n	8001eb4 <__aeabi_ddiv+0x100>
 800225e:	f001 f9cd 	bl	80035fc <__clzsi2>
 8002262:	2315      	movs	r3, #21
 8002264:	469c      	mov	ip, r3
 8002266:	4484      	add	ip, r0
 8002268:	0002      	movs	r2, r0
 800226a:	4663      	mov	r3, ip
 800226c:	3220      	adds	r2, #32
 800226e:	2b1c      	cmp	r3, #28
 8002270:	dc00      	bgt.n	8002274 <__aeabi_ddiv+0x4c0>
 8002272:	e72e      	b.n	80020d2 <__aeabi_ddiv+0x31e>
 8002274:	0023      	movs	r3, r4
 8002276:	3808      	subs	r0, #8
 8002278:	4083      	lsls	r3, r0
 800227a:	4699      	mov	r9, r3
 800227c:	2300      	movs	r3, #0
 800227e:	4698      	mov	r8, r3
 8002280:	e736      	b.n	80020f0 <__aeabi_ddiv+0x33c>
 8002282:	f001 f9bb 	bl	80035fc <__clzsi2>
 8002286:	0002      	movs	r2, r0
 8002288:	0003      	movs	r3, r0
 800228a:	3215      	adds	r2, #21
 800228c:	3320      	adds	r3, #32
 800228e:	2a1c      	cmp	r2, #28
 8002290:	dc00      	bgt.n	8002294 <__aeabi_ddiv+0x4e0>
 8002292:	e6fb      	b.n	800208c <__aeabi_ddiv+0x2d8>
 8002294:	9900      	ldr	r1, [sp, #0]
 8002296:	3808      	subs	r0, #8
 8002298:	4081      	lsls	r1, r0
 800229a:	2200      	movs	r2, #0
 800229c:	468b      	mov	fp, r1
 800229e:	e702      	b.n	80020a6 <__aeabi_ddiv+0x2f2>
 80022a0:	9900      	ldr	r1, [sp, #0]
 80022a2:	3b01      	subs	r3, #1
 80022a4:	468c      	mov	ip, r1
 80022a6:	4464      	add	r4, ip
 80022a8:	42a1      	cmp	r1, r4
 80022aa:	d900      	bls.n	80022ae <__aeabi_ddiv+0x4fa>
 80022ac:	e69a      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022ae:	42a2      	cmp	r2, r4
 80022b0:	d800      	bhi.n	80022b4 <__aeabi_ddiv+0x500>
 80022b2:	e697      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022b4:	1e83      	subs	r3, r0, #2
 80022b6:	4464      	add	r4, ip
 80022b8:	e694      	b.n	8001fe4 <__aeabi_ddiv+0x230>
 80022ba:	46ac      	mov	ip, r5
 80022bc:	4461      	add	r1, ip
 80022be:	3f01      	subs	r7, #1
 80022c0:	428d      	cmp	r5, r1
 80022c2:	d900      	bls.n	80022c6 <__aeabi_ddiv+0x512>
 80022c4:	e680      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022c6:	428a      	cmp	r2, r1
 80022c8:	d800      	bhi.n	80022cc <__aeabi_ddiv+0x518>
 80022ca:	e67d      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022cc:	1e87      	subs	r7, r0, #2
 80022ce:	4461      	add	r1, ip
 80022d0:	e67a      	b.n	8001fc8 <__aeabi_ddiv+0x214>
 80022d2:	4285      	cmp	r5, r0
 80022d4:	d000      	beq.n	80022d8 <__aeabi_ddiv+0x524>
 80022d6:	e65f      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 80022d8:	45b9      	cmp	r9, r7
 80022da:	d900      	bls.n	80022de <__aeabi_ddiv+0x52a>
 80022dc:	e65c      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 80022de:	e656      	b.n	8001f8e <__aeabi_ddiv+0x1da>
 80022e0:	42a2      	cmp	r2, r4
 80022e2:	d800      	bhi.n	80022e6 <__aeabi_ddiv+0x532>
 80022e4:	e61a      	b.n	8001f1c <__aeabi_ddiv+0x168>
 80022e6:	1e83      	subs	r3, r0, #2
 80022e8:	4464      	add	r4, ip
 80022ea:	e617      	b.n	8001f1c <__aeabi_ddiv+0x168>
 80022ec:	428a      	cmp	r2, r1
 80022ee:	d800      	bhi.n	80022f2 <__aeabi_ddiv+0x53e>
 80022f0:	e600      	b.n	8001ef4 <__aeabi_ddiv+0x140>
 80022f2:	46ac      	mov	ip, r5
 80022f4:	1e83      	subs	r3, r0, #2
 80022f6:	4698      	mov	r8, r3
 80022f8:	4461      	add	r1, ip
 80022fa:	e5fb      	b.n	8001ef4 <__aeabi_ddiv+0x140>
 80022fc:	4837      	ldr	r0, [pc, #220]	@ (80023dc <__aeabi_ddiv+0x628>)
 80022fe:	0014      	movs	r4, r2
 8002300:	4450      	add	r0, sl
 8002302:	4082      	lsls	r2, r0
 8002304:	465b      	mov	r3, fp
 8002306:	0017      	movs	r7, r2
 8002308:	4083      	lsls	r3, r0
 800230a:	40cc      	lsrs	r4, r1
 800230c:	1e7a      	subs	r2, r7, #1
 800230e:	4197      	sbcs	r7, r2
 8002310:	4323      	orrs	r3, r4
 8002312:	433b      	orrs	r3, r7
 8002314:	001a      	movs	r2, r3
 8002316:	465b      	mov	r3, fp
 8002318:	40cb      	lsrs	r3, r1
 800231a:	0751      	lsls	r1, r2, #29
 800231c:	d009      	beq.n	8002332 <__aeabi_ddiv+0x57e>
 800231e:	210f      	movs	r1, #15
 8002320:	4011      	ands	r1, r2
 8002322:	2904      	cmp	r1, #4
 8002324:	d005      	beq.n	8002332 <__aeabi_ddiv+0x57e>
 8002326:	1d11      	adds	r1, r2, #4
 8002328:	4291      	cmp	r1, r2
 800232a:	4192      	sbcs	r2, r2
 800232c:	4252      	negs	r2, r2
 800232e:	189b      	adds	r3, r3, r2
 8002330:	000a      	movs	r2, r1
 8002332:	0219      	lsls	r1, r3, #8
 8002334:	d400      	bmi.n	8002338 <__aeabi_ddiv+0x584>
 8002336:	e755      	b.n	80021e4 <__aeabi_ddiv+0x430>
 8002338:	2200      	movs	r2, #0
 800233a:	2301      	movs	r3, #1
 800233c:	2400      	movs	r4, #0
 800233e:	4690      	mov	r8, r2
 8002340:	e598      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 8002342:	000a      	movs	r2, r1
 8002344:	42bc      	cmp	r4, r7
 8002346:	d000      	beq.n	800234a <__aeabi_ddiv+0x596>
 8002348:	e66e      	b.n	8002028 <__aeabi_ddiv+0x274>
 800234a:	454b      	cmp	r3, r9
 800234c:	d000      	beq.n	8002350 <__aeabi_ddiv+0x59c>
 800234e:	e66b      	b.n	8002028 <__aeabi_ddiv+0x274>
 8002350:	e66c      	b.n	800202c <__aeabi_ddiv+0x278>
 8002352:	4b23      	ldr	r3, [pc, #140]	@ (80023e0 <__aeabi_ddiv+0x62c>)
 8002354:	4a23      	ldr	r2, [pc, #140]	@ (80023e4 <__aeabi_ddiv+0x630>)
 8002356:	4453      	add	r3, sl
 8002358:	4592      	cmp	sl, r2
 800235a:	da00      	bge.n	800235e <__aeabi_ddiv+0x5aa>
 800235c:	e718      	b.n	8002190 <__aeabi_ddiv+0x3dc>
 800235e:	2101      	movs	r1, #1
 8002360:	4249      	negs	r1, r1
 8002362:	1d0a      	adds	r2, r1, #4
 8002364:	428a      	cmp	r2, r1
 8002366:	4189      	sbcs	r1, r1
 8002368:	4249      	negs	r1, r1
 800236a:	448b      	add	fp, r1
 800236c:	e666      	b.n	800203c <__aeabi_ddiv+0x288>
 800236e:	210f      	movs	r1, #15
 8002370:	4011      	ands	r1, r2
 8002372:	2904      	cmp	r1, #4
 8002374:	d100      	bne.n	8002378 <__aeabi_ddiv+0x5c4>
 8002376:	e661      	b.n	800203c <__aeabi_ddiv+0x288>
 8002378:	0011      	movs	r1, r2
 800237a:	e7f2      	b.n	8002362 <__aeabi_ddiv+0x5ae>
 800237c:	42bc      	cmp	r4, r7
 800237e:	d800      	bhi.n	8002382 <__aeabi_ddiv+0x5ce>
 8002380:	e60a      	b.n	8001f98 <__aeabi_ddiv+0x1e4>
 8002382:	2302      	movs	r3, #2
 8002384:	425b      	negs	r3, r3
 8002386:	469c      	mov	ip, r3
 8002388:	9900      	ldr	r1, [sp, #0]
 800238a:	444f      	add	r7, r9
 800238c:	454f      	cmp	r7, r9
 800238e:	419b      	sbcs	r3, r3
 8002390:	44e3      	add	fp, ip
 8002392:	468c      	mov	ip, r1
 8002394:	425b      	negs	r3, r3
 8002396:	4463      	add	r3, ip
 8002398:	18c0      	adds	r0, r0, r3
 800239a:	e5ff      	b.n	8001f9c <__aeabi_ddiv+0x1e8>
 800239c:	4649      	mov	r1, r9
 800239e:	9d00      	ldr	r5, [sp, #0]
 80023a0:	0048      	lsls	r0, r1, #1
 80023a2:	4548      	cmp	r0, r9
 80023a4:	4189      	sbcs	r1, r1
 80023a6:	46ac      	mov	ip, r5
 80023a8:	4249      	negs	r1, r1
 80023aa:	4461      	add	r1, ip
 80023ac:	4681      	mov	r9, r0
 80023ae:	3a02      	subs	r2, #2
 80023b0:	1864      	adds	r4, r4, r1
 80023b2:	e7c7      	b.n	8002344 <__aeabi_ddiv+0x590>
 80023b4:	2480      	movs	r4, #128	@ 0x80
 80023b6:	465b      	mov	r3, fp
 80023b8:	0324      	lsls	r4, r4, #12
 80023ba:	431c      	orrs	r4, r3
 80023bc:	0324      	lsls	r4, r4, #12
 80023be:	4690      	mov	r8, r2
 80023c0:	4b04      	ldr	r3, [pc, #16]	@ (80023d4 <__aeabi_ddiv+0x620>)
 80023c2:	0b24      	lsrs	r4, r4, #12
 80023c4:	e556      	b.n	8001e74 <__aeabi_ddiv+0xc0>
 80023c6:	4599      	cmp	r9, r3
 80023c8:	d3e8      	bcc.n	800239c <__aeabi_ddiv+0x5e8>
 80023ca:	000a      	movs	r2, r1
 80023cc:	e7bd      	b.n	800234a <__aeabi_ddiv+0x596>
 80023ce:	2300      	movs	r3, #0
 80023d0:	e708      	b.n	80021e4 <__aeabi_ddiv+0x430>
 80023d2:	46c0      	nop			@ (mov r8, r8)
 80023d4:	000007ff 	.word	0x000007ff
 80023d8:	0000043e 	.word	0x0000043e
 80023dc:	0000041e 	.word	0x0000041e
 80023e0:	000003ff 	.word	0x000003ff
 80023e4:	fffffc02 	.word	0xfffffc02

080023e8 <__eqdf2>:
 80023e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80023ea:	4657      	mov	r7, sl
 80023ec:	46de      	mov	lr, fp
 80023ee:	464e      	mov	r6, r9
 80023f0:	4645      	mov	r5, r8
 80023f2:	b5e0      	push	{r5, r6, r7, lr}
 80023f4:	000d      	movs	r5, r1
 80023f6:	0004      	movs	r4, r0
 80023f8:	0fe8      	lsrs	r0, r5, #31
 80023fa:	4683      	mov	fp, r0
 80023fc:	0309      	lsls	r1, r1, #12
 80023fe:	0fd8      	lsrs	r0, r3, #31
 8002400:	0b09      	lsrs	r1, r1, #12
 8002402:	4682      	mov	sl, r0
 8002404:	4819      	ldr	r0, [pc, #100]	@ (800246c <__eqdf2+0x84>)
 8002406:	468c      	mov	ip, r1
 8002408:	031f      	lsls	r7, r3, #12
 800240a:	0069      	lsls	r1, r5, #1
 800240c:	005e      	lsls	r6, r3, #1
 800240e:	0d49      	lsrs	r1, r1, #21
 8002410:	0b3f      	lsrs	r7, r7, #12
 8002412:	0d76      	lsrs	r6, r6, #21
 8002414:	4281      	cmp	r1, r0
 8002416:	d018      	beq.n	800244a <__eqdf2+0x62>
 8002418:	4286      	cmp	r6, r0
 800241a:	d00f      	beq.n	800243c <__eqdf2+0x54>
 800241c:	2001      	movs	r0, #1
 800241e:	42b1      	cmp	r1, r6
 8002420:	d10d      	bne.n	800243e <__eqdf2+0x56>
 8002422:	45bc      	cmp	ip, r7
 8002424:	d10b      	bne.n	800243e <__eqdf2+0x56>
 8002426:	4294      	cmp	r4, r2
 8002428:	d109      	bne.n	800243e <__eqdf2+0x56>
 800242a:	45d3      	cmp	fp, sl
 800242c:	d01c      	beq.n	8002468 <__eqdf2+0x80>
 800242e:	2900      	cmp	r1, #0
 8002430:	d105      	bne.n	800243e <__eqdf2+0x56>
 8002432:	4660      	mov	r0, ip
 8002434:	4320      	orrs	r0, r4
 8002436:	1e43      	subs	r3, r0, #1
 8002438:	4198      	sbcs	r0, r3
 800243a:	e000      	b.n	800243e <__eqdf2+0x56>
 800243c:	2001      	movs	r0, #1
 800243e:	bcf0      	pop	{r4, r5, r6, r7}
 8002440:	46bb      	mov	fp, r7
 8002442:	46b2      	mov	sl, r6
 8002444:	46a9      	mov	r9, r5
 8002446:	46a0      	mov	r8, r4
 8002448:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800244a:	2001      	movs	r0, #1
 800244c:	428e      	cmp	r6, r1
 800244e:	d1f6      	bne.n	800243e <__eqdf2+0x56>
 8002450:	4661      	mov	r1, ip
 8002452:	4339      	orrs	r1, r7
 8002454:	000f      	movs	r7, r1
 8002456:	4317      	orrs	r7, r2
 8002458:	4327      	orrs	r7, r4
 800245a:	d1f0      	bne.n	800243e <__eqdf2+0x56>
 800245c:	465b      	mov	r3, fp
 800245e:	4652      	mov	r2, sl
 8002460:	1a98      	subs	r0, r3, r2
 8002462:	1e43      	subs	r3, r0, #1
 8002464:	4198      	sbcs	r0, r3
 8002466:	e7ea      	b.n	800243e <__eqdf2+0x56>
 8002468:	2000      	movs	r0, #0
 800246a:	e7e8      	b.n	800243e <__eqdf2+0x56>
 800246c:	000007ff 	.word	0x000007ff

08002470 <__gedf2>:
 8002470:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002472:	4657      	mov	r7, sl
 8002474:	464e      	mov	r6, r9
 8002476:	4645      	mov	r5, r8
 8002478:	46de      	mov	lr, fp
 800247a:	b5e0      	push	{r5, r6, r7, lr}
 800247c:	000d      	movs	r5, r1
 800247e:	030f      	lsls	r7, r1, #12
 8002480:	0b39      	lsrs	r1, r7, #12
 8002482:	b083      	sub	sp, #12
 8002484:	0004      	movs	r4, r0
 8002486:	4680      	mov	r8, r0
 8002488:	9101      	str	r1, [sp, #4]
 800248a:	0058      	lsls	r0, r3, #1
 800248c:	0fe9      	lsrs	r1, r5, #31
 800248e:	4f31      	ldr	r7, [pc, #196]	@ (8002554 <__gedf2+0xe4>)
 8002490:	0d40      	lsrs	r0, r0, #21
 8002492:	468c      	mov	ip, r1
 8002494:	006e      	lsls	r6, r5, #1
 8002496:	0319      	lsls	r1, r3, #12
 8002498:	4682      	mov	sl, r0
 800249a:	4691      	mov	r9, r2
 800249c:	0d76      	lsrs	r6, r6, #21
 800249e:	0b09      	lsrs	r1, r1, #12
 80024a0:	0fd8      	lsrs	r0, r3, #31
 80024a2:	42be      	cmp	r6, r7
 80024a4:	d01f      	beq.n	80024e6 <__gedf2+0x76>
 80024a6:	45ba      	cmp	sl, r7
 80024a8:	d00f      	beq.n	80024ca <__gedf2+0x5a>
 80024aa:	2e00      	cmp	r6, #0
 80024ac:	d12f      	bne.n	800250e <__gedf2+0x9e>
 80024ae:	4655      	mov	r5, sl
 80024b0:	9e01      	ldr	r6, [sp, #4]
 80024b2:	4334      	orrs	r4, r6
 80024b4:	2d00      	cmp	r5, #0
 80024b6:	d127      	bne.n	8002508 <__gedf2+0x98>
 80024b8:	430a      	orrs	r2, r1
 80024ba:	d03a      	beq.n	8002532 <__gedf2+0xc2>
 80024bc:	2c00      	cmp	r4, #0
 80024be:	d145      	bne.n	800254c <__gedf2+0xdc>
 80024c0:	2800      	cmp	r0, #0
 80024c2:	d11a      	bne.n	80024fa <__gedf2+0x8a>
 80024c4:	2001      	movs	r0, #1
 80024c6:	4240      	negs	r0, r0
 80024c8:	e017      	b.n	80024fa <__gedf2+0x8a>
 80024ca:	4311      	orrs	r1, r2
 80024cc:	d13b      	bne.n	8002546 <__gedf2+0xd6>
 80024ce:	2e00      	cmp	r6, #0
 80024d0:	d102      	bne.n	80024d8 <__gedf2+0x68>
 80024d2:	9f01      	ldr	r7, [sp, #4]
 80024d4:	4327      	orrs	r7, r4
 80024d6:	d0f3      	beq.n	80024c0 <__gedf2+0x50>
 80024d8:	4584      	cmp	ip, r0
 80024da:	d109      	bne.n	80024f0 <__gedf2+0x80>
 80024dc:	4663      	mov	r3, ip
 80024de:	2b00      	cmp	r3, #0
 80024e0:	d0f0      	beq.n	80024c4 <__gedf2+0x54>
 80024e2:	4660      	mov	r0, ip
 80024e4:	e009      	b.n	80024fa <__gedf2+0x8a>
 80024e6:	9f01      	ldr	r7, [sp, #4]
 80024e8:	4327      	orrs	r7, r4
 80024ea:	d12c      	bne.n	8002546 <__gedf2+0xd6>
 80024ec:	45b2      	cmp	sl, r6
 80024ee:	d024      	beq.n	800253a <__gedf2+0xca>
 80024f0:	4663      	mov	r3, ip
 80024f2:	2002      	movs	r0, #2
 80024f4:	3b01      	subs	r3, #1
 80024f6:	4018      	ands	r0, r3
 80024f8:	3801      	subs	r0, #1
 80024fa:	b003      	add	sp, #12
 80024fc:	bcf0      	pop	{r4, r5, r6, r7}
 80024fe:	46bb      	mov	fp, r7
 8002500:	46b2      	mov	sl, r6
 8002502:	46a9      	mov	r9, r5
 8002504:	46a0      	mov	r8, r4
 8002506:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002508:	2c00      	cmp	r4, #0
 800250a:	d0d9      	beq.n	80024c0 <__gedf2+0x50>
 800250c:	e7e4      	b.n	80024d8 <__gedf2+0x68>
 800250e:	4654      	mov	r4, sl
 8002510:	2c00      	cmp	r4, #0
 8002512:	d0ed      	beq.n	80024f0 <__gedf2+0x80>
 8002514:	4584      	cmp	ip, r0
 8002516:	d1eb      	bne.n	80024f0 <__gedf2+0x80>
 8002518:	4556      	cmp	r6, sl
 800251a:	dce9      	bgt.n	80024f0 <__gedf2+0x80>
 800251c:	dbde      	blt.n	80024dc <__gedf2+0x6c>
 800251e:	9b01      	ldr	r3, [sp, #4]
 8002520:	428b      	cmp	r3, r1
 8002522:	d8e5      	bhi.n	80024f0 <__gedf2+0x80>
 8002524:	d1da      	bne.n	80024dc <__gedf2+0x6c>
 8002526:	45c8      	cmp	r8, r9
 8002528:	d8e2      	bhi.n	80024f0 <__gedf2+0x80>
 800252a:	2000      	movs	r0, #0
 800252c:	45c8      	cmp	r8, r9
 800252e:	d2e4      	bcs.n	80024fa <__gedf2+0x8a>
 8002530:	e7d4      	b.n	80024dc <__gedf2+0x6c>
 8002532:	2000      	movs	r0, #0
 8002534:	2c00      	cmp	r4, #0
 8002536:	d0e0      	beq.n	80024fa <__gedf2+0x8a>
 8002538:	e7da      	b.n	80024f0 <__gedf2+0x80>
 800253a:	4311      	orrs	r1, r2
 800253c:	d103      	bne.n	8002546 <__gedf2+0xd6>
 800253e:	4584      	cmp	ip, r0
 8002540:	d1d6      	bne.n	80024f0 <__gedf2+0x80>
 8002542:	2000      	movs	r0, #0
 8002544:	e7d9      	b.n	80024fa <__gedf2+0x8a>
 8002546:	2002      	movs	r0, #2
 8002548:	4240      	negs	r0, r0
 800254a:	e7d6      	b.n	80024fa <__gedf2+0x8a>
 800254c:	4584      	cmp	ip, r0
 800254e:	d0e6      	beq.n	800251e <__gedf2+0xae>
 8002550:	e7ce      	b.n	80024f0 <__gedf2+0x80>
 8002552:	46c0      	nop			@ (mov r8, r8)
 8002554:	000007ff 	.word	0x000007ff

08002558 <__ledf2>:
 8002558:	b5f0      	push	{r4, r5, r6, r7, lr}
 800255a:	4657      	mov	r7, sl
 800255c:	464e      	mov	r6, r9
 800255e:	4645      	mov	r5, r8
 8002560:	46de      	mov	lr, fp
 8002562:	b5e0      	push	{r5, r6, r7, lr}
 8002564:	000d      	movs	r5, r1
 8002566:	030f      	lsls	r7, r1, #12
 8002568:	0004      	movs	r4, r0
 800256a:	4680      	mov	r8, r0
 800256c:	0fe8      	lsrs	r0, r5, #31
 800256e:	0b39      	lsrs	r1, r7, #12
 8002570:	4684      	mov	ip, r0
 8002572:	b083      	sub	sp, #12
 8002574:	0058      	lsls	r0, r3, #1
 8002576:	4f30      	ldr	r7, [pc, #192]	@ (8002638 <__ledf2+0xe0>)
 8002578:	0d40      	lsrs	r0, r0, #21
 800257a:	9101      	str	r1, [sp, #4]
 800257c:	031e      	lsls	r6, r3, #12
 800257e:	0069      	lsls	r1, r5, #1
 8002580:	4682      	mov	sl, r0
 8002582:	4691      	mov	r9, r2
 8002584:	0d49      	lsrs	r1, r1, #21
 8002586:	0b36      	lsrs	r6, r6, #12
 8002588:	0fd8      	lsrs	r0, r3, #31
 800258a:	42b9      	cmp	r1, r7
 800258c:	d020      	beq.n	80025d0 <__ledf2+0x78>
 800258e:	45ba      	cmp	sl, r7
 8002590:	d00f      	beq.n	80025b2 <__ledf2+0x5a>
 8002592:	2900      	cmp	r1, #0
 8002594:	d12b      	bne.n	80025ee <__ledf2+0x96>
 8002596:	9901      	ldr	r1, [sp, #4]
 8002598:	430c      	orrs	r4, r1
 800259a:	4651      	mov	r1, sl
 800259c:	2900      	cmp	r1, #0
 800259e:	d137      	bne.n	8002610 <__ledf2+0xb8>
 80025a0:	4332      	orrs	r2, r6
 80025a2:	d038      	beq.n	8002616 <__ledf2+0xbe>
 80025a4:	2c00      	cmp	r4, #0
 80025a6:	d144      	bne.n	8002632 <__ledf2+0xda>
 80025a8:	2800      	cmp	r0, #0
 80025aa:	d119      	bne.n	80025e0 <__ledf2+0x88>
 80025ac:	2001      	movs	r0, #1
 80025ae:	4240      	negs	r0, r0
 80025b0:	e016      	b.n	80025e0 <__ledf2+0x88>
 80025b2:	4316      	orrs	r6, r2
 80025b4:	d113      	bne.n	80025de <__ledf2+0x86>
 80025b6:	2900      	cmp	r1, #0
 80025b8:	d102      	bne.n	80025c0 <__ledf2+0x68>
 80025ba:	9f01      	ldr	r7, [sp, #4]
 80025bc:	4327      	orrs	r7, r4
 80025be:	d0f3      	beq.n	80025a8 <__ledf2+0x50>
 80025c0:	4584      	cmp	ip, r0
 80025c2:	d020      	beq.n	8002606 <__ledf2+0xae>
 80025c4:	4663      	mov	r3, ip
 80025c6:	2002      	movs	r0, #2
 80025c8:	3b01      	subs	r3, #1
 80025ca:	4018      	ands	r0, r3
 80025cc:	3801      	subs	r0, #1
 80025ce:	e007      	b.n	80025e0 <__ledf2+0x88>
 80025d0:	9f01      	ldr	r7, [sp, #4]
 80025d2:	4327      	orrs	r7, r4
 80025d4:	d103      	bne.n	80025de <__ledf2+0x86>
 80025d6:	458a      	cmp	sl, r1
 80025d8:	d1f4      	bne.n	80025c4 <__ledf2+0x6c>
 80025da:	4316      	orrs	r6, r2
 80025dc:	d01f      	beq.n	800261e <__ledf2+0xc6>
 80025de:	2002      	movs	r0, #2
 80025e0:	b003      	add	sp, #12
 80025e2:	bcf0      	pop	{r4, r5, r6, r7}
 80025e4:	46bb      	mov	fp, r7
 80025e6:	46b2      	mov	sl, r6
 80025e8:	46a9      	mov	r9, r5
 80025ea:	46a0      	mov	r8, r4
 80025ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80025ee:	4654      	mov	r4, sl
 80025f0:	2c00      	cmp	r4, #0
 80025f2:	d0e7      	beq.n	80025c4 <__ledf2+0x6c>
 80025f4:	4584      	cmp	ip, r0
 80025f6:	d1e5      	bne.n	80025c4 <__ledf2+0x6c>
 80025f8:	4551      	cmp	r1, sl
 80025fa:	dce3      	bgt.n	80025c4 <__ledf2+0x6c>
 80025fc:	db03      	blt.n	8002606 <__ledf2+0xae>
 80025fe:	9b01      	ldr	r3, [sp, #4]
 8002600:	42b3      	cmp	r3, r6
 8002602:	d8df      	bhi.n	80025c4 <__ledf2+0x6c>
 8002604:	d00f      	beq.n	8002626 <__ledf2+0xce>
 8002606:	4663      	mov	r3, ip
 8002608:	2b00      	cmp	r3, #0
 800260a:	d0cf      	beq.n	80025ac <__ledf2+0x54>
 800260c:	4660      	mov	r0, ip
 800260e:	e7e7      	b.n	80025e0 <__ledf2+0x88>
 8002610:	2c00      	cmp	r4, #0
 8002612:	d0c9      	beq.n	80025a8 <__ledf2+0x50>
 8002614:	e7d4      	b.n	80025c0 <__ledf2+0x68>
 8002616:	2000      	movs	r0, #0
 8002618:	2c00      	cmp	r4, #0
 800261a:	d0e1      	beq.n	80025e0 <__ledf2+0x88>
 800261c:	e7d2      	b.n	80025c4 <__ledf2+0x6c>
 800261e:	4584      	cmp	ip, r0
 8002620:	d1d0      	bne.n	80025c4 <__ledf2+0x6c>
 8002622:	2000      	movs	r0, #0
 8002624:	e7dc      	b.n	80025e0 <__ledf2+0x88>
 8002626:	45c8      	cmp	r8, r9
 8002628:	d8cc      	bhi.n	80025c4 <__ledf2+0x6c>
 800262a:	2000      	movs	r0, #0
 800262c:	45c8      	cmp	r8, r9
 800262e:	d2d7      	bcs.n	80025e0 <__ledf2+0x88>
 8002630:	e7e9      	b.n	8002606 <__ledf2+0xae>
 8002632:	4584      	cmp	ip, r0
 8002634:	d0e3      	beq.n	80025fe <__ledf2+0xa6>
 8002636:	e7c5      	b.n	80025c4 <__ledf2+0x6c>
 8002638:	000007ff 	.word	0x000007ff

0800263c <__aeabi_dmul>:
 800263c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800263e:	4657      	mov	r7, sl
 8002640:	46de      	mov	lr, fp
 8002642:	464e      	mov	r6, r9
 8002644:	4645      	mov	r5, r8
 8002646:	b5e0      	push	{r5, r6, r7, lr}
 8002648:	001f      	movs	r7, r3
 800264a:	030b      	lsls	r3, r1, #12
 800264c:	0b1b      	lsrs	r3, r3, #12
 800264e:	0016      	movs	r6, r2
 8002650:	469a      	mov	sl, r3
 8002652:	0fca      	lsrs	r2, r1, #31
 8002654:	004b      	lsls	r3, r1, #1
 8002656:	0004      	movs	r4, r0
 8002658:	4693      	mov	fp, r2
 800265a:	b087      	sub	sp, #28
 800265c:	0d5b      	lsrs	r3, r3, #21
 800265e:	d100      	bne.n	8002662 <__aeabi_dmul+0x26>
 8002660:	e0d5      	b.n	800280e <__aeabi_dmul+0x1d2>
 8002662:	4abb      	ldr	r2, [pc, #748]	@ (8002950 <__aeabi_dmul+0x314>)
 8002664:	4293      	cmp	r3, r2
 8002666:	d100      	bne.n	800266a <__aeabi_dmul+0x2e>
 8002668:	e0f8      	b.n	800285c <__aeabi_dmul+0x220>
 800266a:	4651      	mov	r1, sl
 800266c:	0f42      	lsrs	r2, r0, #29
 800266e:	00c9      	lsls	r1, r1, #3
 8002670:	430a      	orrs	r2, r1
 8002672:	2180      	movs	r1, #128	@ 0x80
 8002674:	0409      	lsls	r1, r1, #16
 8002676:	4311      	orrs	r1, r2
 8002678:	00c2      	lsls	r2, r0, #3
 800267a:	4691      	mov	r9, r2
 800267c:	4ab5      	ldr	r2, [pc, #724]	@ (8002954 <__aeabi_dmul+0x318>)
 800267e:	468a      	mov	sl, r1
 8002680:	189d      	adds	r5, r3, r2
 8002682:	2300      	movs	r3, #0
 8002684:	4698      	mov	r8, r3
 8002686:	9302      	str	r3, [sp, #8]
 8002688:	033c      	lsls	r4, r7, #12
 800268a:	007b      	lsls	r3, r7, #1
 800268c:	0ffa      	lsrs	r2, r7, #31
 800268e:	0030      	movs	r0, r6
 8002690:	0b24      	lsrs	r4, r4, #12
 8002692:	0d5b      	lsrs	r3, r3, #21
 8002694:	9200      	str	r2, [sp, #0]
 8002696:	d100      	bne.n	800269a <__aeabi_dmul+0x5e>
 8002698:	e096      	b.n	80027c8 <__aeabi_dmul+0x18c>
 800269a:	4aad      	ldr	r2, [pc, #692]	@ (8002950 <__aeabi_dmul+0x314>)
 800269c:	4293      	cmp	r3, r2
 800269e:	d031      	beq.n	8002704 <__aeabi_dmul+0xc8>
 80026a0:	0f72      	lsrs	r2, r6, #29
 80026a2:	00e4      	lsls	r4, r4, #3
 80026a4:	4322      	orrs	r2, r4
 80026a6:	2480      	movs	r4, #128	@ 0x80
 80026a8:	0424      	lsls	r4, r4, #16
 80026aa:	4314      	orrs	r4, r2
 80026ac:	4aa9      	ldr	r2, [pc, #676]	@ (8002954 <__aeabi_dmul+0x318>)
 80026ae:	00f0      	lsls	r0, r6, #3
 80026b0:	4694      	mov	ip, r2
 80026b2:	4463      	add	r3, ip
 80026b4:	195b      	adds	r3, r3, r5
 80026b6:	1c5a      	adds	r2, r3, #1
 80026b8:	9201      	str	r2, [sp, #4]
 80026ba:	4642      	mov	r2, r8
 80026bc:	2600      	movs	r6, #0
 80026be:	2a0a      	cmp	r2, #10
 80026c0:	dc42      	bgt.n	8002748 <__aeabi_dmul+0x10c>
 80026c2:	465a      	mov	r2, fp
 80026c4:	9900      	ldr	r1, [sp, #0]
 80026c6:	404a      	eors	r2, r1
 80026c8:	4693      	mov	fp, r2
 80026ca:	4642      	mov	r2, r8
 80026cc:	2a02      	cmp	r2, #2
 80026ce:	dc32      	bgt.n	8002736 <__aeabi_dmul+0xfa>
 80026d0:	3a01      	subs	r2, #1
 80026d2:	2a01      	cmp	r2, #1
 80026d4:	d900      	bls.n	80026d8 <__aeabi_dmul+0x9c>
 80026d6:	e149      	b.n	800296c <__aeabi_dmul+0x330>
 80026d8:	2e02      	cmp	r6, #2
 80026da:	d100      	bne.n	80026de <__aeabi_dmul+0xa2>
 80026dc:	e0ca      	b.n	8002874 <__aeabi_dmul+0x238>
 80026de:	2e01      	cmp	r6, #1
 80026e0:	d13d      	bne.n	800275e <__aeabi_dmul+0x122>
 80026e2:	2300      	movs	r3, #0
 80026e4:	2400      	movs	r4, #0
 80026e6:	2200      	movs	r2, #0
 80026e8:	0010      	movs	r0, r2
 80026ea:	465a      	mov	r2, fp
 80026ec:	051b      	lsls	r3, r3, #20
 80026ee:	4323      	orrs	r3, r4
 80026f0:	07d2      	lsls	r2, r2, #31
 80026f2:	4313      	orrs	r3, r2
 80026f4:	0019      	movs	r1, r3
 80026f6:	b007      	add	sp, #28
 80026f8:	bcf0      	pop	{r4, r5, r6, r7}
 80026fa:	46bb      	mov	fp, r7
 80026fc:	46b2      	mov	sl, r6
 80026fe:	46a9      	mov	r9, r5
 8002700:	46a0      	mov	r8, r4
 8002702:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002704:	4b92      	ldr	r3, [pc, #584]	@ (8002950 <__aeabi_dmul+0x314>)
 8002706:	4326      	orrs	r6, r4
 8002708:	18eb      	adds	r3, r5, r3
 800270a:	2e00      	cmp	r6, #0
 800270c:	d100      	bne.n	8002710 <__aeabi_dmul+0xd4>
 800270e:	e0bb      	b.n	8002888 <__aeabi_dmul+0x24c>
 8002710:	2203      	movs	r2, #3
 8002712:	4641      	mov	r1, r8
 8002714:	4311      	orrs	r1, r2
 8002716:	465a      	mov	r2, fp
 8002718:	4688      	mov	r8, r1
 800271a:	9900      	ldr	r1, [sp, #0]
 800271c:	404a      	eors	r2, r1
 800271e:	2180      	movs	r1, #128	@ 0x80
 8002720:	0109      	lsls	r1, r1, #4
 8002722:	468c      	mov	ip, r1
 8002724:	0029      	movs	r1, r5
 8002726:	4461      	add	r1, ip
 8002728:	9101      	str	r1, [sp, #4]
 800272a:	4641      	mov	r1, r8
 800272c:	290a      	cmp	r1, #10
 800272e:	dd00      	ble.n	8002732 <__aeabi_dmul+0xf6>
 8002730:	e233      	b.n	8002b9a <__aeabi_dmul+0x55e>
 8002732:	4693      	mov	fp, r2
 8002734:	2603      	movs	r6, #3
 8002736:	4642      	mov	r2, r8
 8002738:	2701      	movs	r7, #1
 800273a:	4097      	lsls	r7, r2
 800273c:	21a6      	movs	r1, #166	@ 0xa6
 800273e:	003a      	movs	r2, r7
 8002740:	00c9      	lsls	r1, r1, #3
 8002742:	400a      	ands	r2, r1
 8002744:	420f      	tst	r7, r1
 8002746:	d031      	beq.n	80027ac <__aeabi_dmul+0x170>
 8002748:	9e02      	ldr	r6, [sp, #8]
 800274a:	2e02      	cmp	r6, #2
 800274c:	d100      	bne.n	8002750 <__aeabi_dmul+0x114>
 800274e:	e235      	b.n	8002bbc <__aeabi_dmul+0x580>
 8002750:	2e03      	cmp	r6, #3
 8002752:	d100      	bne.n	8002756 <__aeabi_dmul+0x11a>
 8002754:	e1d2      	b.n	8002afc <__aeabi_dmul+0x4c0>
 8002756:	4654      	mov	r4, sl
 8002758:	4648      	mov	r0, r9
 800275a:	2e01      	cmp	r6, #1
 800275c:	d0c1      	beq.n	80026e2 <__aeabi_dmul+0xa6>
 800275e:	9a01      	ldr	r2, [sp, #4]
 8002760:	4b7d      	ldr	r3, [pc, #500]	@ (8002958 <__aeabi_dmul+0x31c>)
 8002762:	4694      	mov	ip, r2
 8002764:	4463      	add	r3, ip
 8002766:	2b00      	cmp	r3, #0
 8002768:	dc00      	bgt.n	800276c <__aeabi_dmul+0x130>
 800276a:	e0c0      	b.n	80028ee <__aeabi_dmul+0x2b2>
 800276c:	0742      	lsls	r2, r0, #29
 800276e:	d009      	beq.n	8002784 <__aeabi_dmul+0x148>
 8002770:	220f      	movs	r2, #15
 8002772:	4002      	ands	r2, r0
 8002774:	2a04      	cmp	r2, #4
 8002776:	d005      	beq.n	8002784 <__aeabi_dmul+0x148>
 8002778:	1d02      	adds	r2, r0, #4
 800277a:	4282      	cmp	r2, r0
 800277c:	4180      	sbcs	r0, r0
 800277e:	4240      	negs	r0, r0
 8002780:	1824      	adds	r4, r4, r0
 8002782:	0010      	movs	r0, r2
 8002784:	01e2      	lsls	r2, r4, #7
 8002786:	d506      	bpl.n	8002796 <__aeabi_dmul+0x15a>
 8002788:	4b74      	ldr	r3, [pc, #464]	@ (800295c <__aeabi_dmul+0x320>)
 800278a:	9a01      	ldr	r2, [sp, #4]
 800278c:	401c      	ands	r4, r3
 800278e:	2380      	movs	r3, #128	@ 0x80
 8002790:	4694      	mov	ip, r2
 8002792:	00db      	lsls	r3, r3, #3
 8002794:	4463      	add	r3, ip
 8002796:	4a72      	ldr	r2, [pc, #456]	@ (8002960 <__aeabi_dmul+0x324>)
 8002798:	4293      	cmp	r3, r2
 800279a:	dc6b      	bgt.n	8002874 <__aeabi_dmul+0x238>
 800279c:	0762      	lsls	r2, r4, #29
 800279e:	08c0      	lsrs	r0, r0, #3
 80027a0:	0264      	lsls	r4, r4, #9
 80027a2:	055b      	lsls	r3, r3, #21
 80027a4:	4302      	orrs	r2, r0
 80027a6:	0b24      	lsrs	r4, r4, #12
 80027a8:	0d5b      	lsrs	r3, r3, #21
 80027aa:	e79d      	b.n	80026e8 <__aeabi_dmul+0xac>
 80027ac:	2190      	movs	r1, #144	@ 0x90
 80027ae:	0089      	lsls	r1, r1, #2
 80027b0:	420f      	tst	r7, r1
 80027b2:	d163      	bne.n	800287c <__aeabi_dmul+0x240>
 80027b4:	2288      	movs	r2, #136	@ 0x88
 80027b6:	423a      	tst	r2, r7
 80027b8:	d100      	bne.n	80027bc <__aeabi_dmul+0x180>
 80027ba:	e0d7      	b.n	800296c <__aeabi_dmul+0x330>
 80027bc:	9b00      	ldr	r3, [sp, #0]
 80027be:	46a2      	mov	sl, r4
 80027c0:	469b      	mov	fp, r3
 80027c2:	4681      	mov	r9, r0
 80027c4:	9602      	str	r6, [sp, #8]
 80027c6:	e7bf      	b.n	8002748 <__aeabi_dmul+0x10c>
 80027c8:	0023      	movs	r3, r4
 80027ca:	4333      	orrs	r3, r6
 80027cc:	d100      	bne.n	80027d0 <__aeabi_dmul+0x194>
 80027ce:	e07f      	b.n	80028d0 <__aeabi_dmul+0x294>
 80027d0:	2c00      	cmp	r4, #0
 80027d2:	d100      	bne.n	80027d6 <__aeabi_dmul+0x19a>
 80027d4:	e1ad      	b.n	8002b32 <__aeabi_dmul+0x4f6>
 80027d6:	0020      	movs	r0, r4
 80027d8:	f000 ff10 	bl	80035fc <__clzsi2>
 80027dc:	0002      	movs	r2, r0
 80027de:	0003      	movs	r3, r0
 80027e0:	3a0b      	subs	r2, #11
 80027e2:	201d      	movs	r0, #29
 80027e4:	0019      	movs	r1, r3
 80027e6:	1a82      	subs	r2, r0, r2
 80027e8:	0030      	movs	r0, r6
 80027ea:	3908      	subs	r1, #8
 80027ec:	40d0      	lsrs	r0, r2
 80027ee:	408c      	lsls	r4, r1
 80027f0:	4304      	orrs	r4, r0
 80027f2:	0030      	movs	r0, r6
 80027f4:	4088      	lsls	r0, r1
 80027f6:	4a5b      	ldr	r2, [pc, #364]	@ (8002964 <__aeabi_dmul+0x328>)
 80027f8:	1aeb      	subs	r3, r5, r3
 80027fa:	4694      	mov	ip, r2
 80027fc:	4463      	add	r3, ip
 80027fe:	1c5a      	adds	r2, r3, #1
 8002800:	9201      	str	r2, [sp, #4]
 8002802:	4642      	mov	r2, r8
 8002804:	2600      	movs	r6, #0
 8002806:	2a0a      	cmp	r2, #10
 8002808:	dc00      	bgt.n	800280c <__aeabi_dmul+0x1d0>
 800280a:	e75a      	b.n	80026c2 <__aeabi_dmul+0x86>
 800280c:	e79c      	b.n	8002748 <__aeabi_dmul+0x10c>
 800280e:	4653      	mov	r3, sl
 8002810:	4303      	orrs	r3, r0
 8002812:	4699      	mov	r9, r3
 8002814:	d054      	beq.n	80028c0 <__aeabi_dmul+0x284>
 8002816:	4653      	mov	r3, sl
 8002818:	2b00      	cmp	r3, #0
 800281a:	d100      	bne.n	800281e <__aeabi_dmul+0x1e2>
 800281c:	e177      	b.n	8002b0e <__aeabi_dmul+0x4d2>
 800281e:	4650      	mov	r0, sl
 8002820:	f000 feec 	bl	80035fc <__clzsi2>
 8002824:	230b      	movs	r3, #11
 8002826:	425b      	negs	r3, r3
 8002828:	469c      	mov	ip, r3
 800282a:	0002      	movs	r2, r0
 800282c:	4484      	add	ip, r0
 800282e:	0011      	movs	r1, r2
 8002830:	4650      	mov	r0, sl
 8002832:	3908      	subs	r1, #8
 8002834:	4088      	lsls	r0, r1
 8002836:	231d      	movs	r3, #29
 8002838:	4680      	mov	r8, r0
 800283a:	4660      	mov	r0, ip
 800283c:	1a1b      	subs	r3, r3, r0
 800283e:	0020      	movs	r0, r4
 8002840:	40d8      	lsrs	r0, r3
 8002842:	0003      	movs	r3, r0
 8002844:	4640      	mov	r0, r8
 8002846:	4303      	orrs	r3, r0
 8002848:	469a      	mov	sl, r3
 800284a:	0023      	movs	r3, r4
 800284c:	408b      	lsls	r3, r1
 800284e:	4699      	mov	r9, r3
 8002850:	2300      	movs	r3, #0
 8002852:	4d44      	ldr	r5, [pc, #272]	@ (8002964 <__aeabi_dmul+0x328>)
 8002854:	4698      	mov	r8, r3
 8002856:	1aad      	subs	r5, r5, r2
 8002858:	9302      	str	r3, [sp, #8]
 800285a:	e715      	b.n	8002688 <__aeabi_dmul+0x4c>
 800285c:	4652      	mov	r2, sl
 800285e:	4302      	orrs	r2, r0
 8002860:	4691      	mov	r9, r2
 8002862:	d126      	bne.n	80028b2 <__aeabi_dmul+0x276>
 8002864:	2200      	movs	r2, #0
 8002866:	001d      	movs	r5, r3
 8002868:	2302      	movs	r3, #2
 800286a:	4692      	mov	sl, r2
 800286c:	3208      	adds	r2, #8
 800286e:	4690      	mov	r8, r2
 8002870:	9302      	str	r3, [sp, #8]
 8002872:	e709      	b.n	8002688 <__aeabi_dmul+0x4c>
 8002874:	2400      	movs	r4, #0
 8002876:	2200      	movs	r2, #0
 8002878:	4b35      	ldr	r3, [pc, #212]	@ (8002950 <__aeabi_dmul+0x314>)
 800287a:	e735      	b.n	80026e8 <__aeabi_dmul+0xac>
 800287c:	2300      	movs	r3, #0
 800287e:	2480      	movs	r4, #128	@ 0x80
 8002880:	469b      	mov	fp, r3
 8002882:	0324      	lsls	r4, r4, #12
 8002884:	4b32      	ldr	r3, [pc, #200]	@ (8002950 <__aeabi_dmul+0x314>)
 8002886:	e72f      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002888:	2202      	movs	r2, #2
 800288a:	4641      	mov	r1, r8
 800288c:	4311      	orrs	r1, r2
 800288e:	2280      	movs	r2, #128	@ 0x80
 8002890:	0112      	lsls	r2, r2, #4
 8002892:	4694      	mov	ip, r2
 8002894:	002a      	movs	r2, r5
 8002896:	4462      	add	r2, ip
 8002898:	4688      	mov	r8, r1
 800289a:	9201      	str	r2, [sp, #4]
 800289c:	290a      	cmp	r1, #10
 800289e:	dd00      	ble.n	80028a2 <__aeabi_dmul+0x266>
 80028a0:	e752      	b.n	8002748 <__aeabi_dmul+0x10c>
 80028a2:	465a      	mov	r2, fp
 80028a4:	2000      	movs	r0, #0
 80028a6:	9900      	ldr	r1, [sp, #0]
 80028a8:	0004      	movs	r4, r0
 80028aa:	404a      	eors	r2, r1
 80028ac:	4693      	mov	fp, r2
 80028ae:	2602      	movs	r6, #2
 80028b0:	e70b      	b.n	80026ca <__aeabi_dmul+0x8e>
 80028b2:	220c      	movs	r2, #12
 80028b4:	001d      	movs	r5, r3
 80028b6:	2303      	movs	r3, #3
 80028b8:	4681      	mov	r9, r0
 80028ba:	4690      	mov	r8, r2
 80028bc:	9302      	str	r3, [sp, #8]
 80028be:	e6e3      	b.n	8002688 <__aeabi_dmul+0x4c>
 80028c0:	2300      	movs	r3, #0
 80028c2:	469a      	mov	sl, r3
 80028c4:	3304      	adds	r3, #4
 80028c6:	4698      	mov	r8, r3
 80028c8:	3b03      	subs	r3, #3
 80028ca:	2500      	movs	r5, #0
 80028cc:	9302      	str	r3, [sp, #8]
 80028ce:	e6db      	b.n	8002688 <__aeabi_dmul+0x4c>
 80028d0:	4642      	mov	r2, r8
 80028d2:	3301      	adds	r3, #1
 80028d4:	431a      	orrs	r2, r3
 80028d6:	002b      	movs	r3, r5
 80028d8:	4690      	mov	r8, r2
 80028da:	1c5a      	adds	r2, r3, #1
 80028dc:	9201      	str	r2, [sp, #4]
 80028de:	4642      	mov	r2, r8
 80028e0:	2400      	movs	r4, #0
 80028e2:	2000      	movs	r0, #0
 80028e4:	2601      	movs	r6, #1
 80028e6:	2a0a      	cmp	r2, #10
 80028e8:	dc00      	bgt.n	80028ec <__aeabi_dmul+0x2b0>
 80028ea:	e6ea      	b.n	80026c2 <__aeabi_dmul+0x86>
 80028ec:	e72c      	b.n	8002748 <__aeabi_dmul+0x10c>
 80028ee:	2201      	movs	r2, #1
 80028f0:	1ad2      	subs	r2, r2, r3
 80028f2:	2a38      	cmp	r2, #56	@ 0x38
 80028f4:	dd00      	ble.n	80028f8 <__aeabi_dmul+0x2bc>
 80028f6:	e6f4      	b.n	80026e2 <__aeabi_dmul+0xa6>
 80028f8:	2a1f      	cmp	r2, #31
 80028fa:	dc00      	bgt.n	80028fe <__aeabi_dmul+0x2c2>
 80028fc:	e12a      	b.n	8002b54 <__aeabi_dmul+0x518>
 80028fe:	211f      	movs	r1, #31
 8002900:	4249      	negs	r1, r1
 8002902:	1acb      	subs	r3, r1, r3
 8002904:	0021      	movs	r1, r4
 8002906:	40d9      	lsrs	r1, r3
 8002908:	000b      	movs	r3, r1
 800290a:	2a20      	cmp	r2, #32
 800290c:	d005      	beq.n	800291a <__aeabi_dmul+0x2de>
 800290e:	4a16      	ldr	r2, [pc, #88]	@ (8002968 <__aeabi_dmul+0x32c>)
 8002910:	9d01      	ldr	r5, [sp, #4]
 8002912:	4694      	mov	ip, r2
 8002914:	4465      	add	r5, ip
 8002916:	40ac      	lsls	r4, r5
 8002918:	4320      	orrs	r0, r4
 800291a:	1e42      	subs	r2, r0, #1
 800291c:	4190      	sbcs	r0, r2
 800291e:	4318      	orrs	r0, r3
 8002920:	2307      	movs	r3, #7
 8002922:	0019      	movs	r1, r3
 8002924:	2400      	movs	r4, #0
 8002926:	4001      	ands	r1, r0
 8002928:	4203      	tst	r3, r0
 800292a:	d00c      	beq.n	8002946 <__aeabi_dmul+0x30a>
 800292c:	230f      	movs	r3, #15
 800292e:	4003      	ands	r3, r0
 8002930:	2b04      	cmp	r3, #4
 8002932:	d100      	bne.n	8002936 <__aeabi_dmul+0x2fa>
 8002934:	e140      	b.n	8002bb8 <__aeabi_dmul+0x57c>
 8002936:	1d03      	adds	r3, r0, #4
 8002938:	4283      	cmp	r3, r0
 800293a:	41a4      	sbcs	r4, r4
 800293c:	0018      	movs	r0, r3
 800293e:	4264      	negs	r4, r4
 8002940:	0761      	lsls	r1, r4, #29
 8002942:	0264      	lsls	r4, r4, #9
 8002944:	0b24      	lsrs	r4, r4, #12
 8002946:	08c2      	lsrs	r2, r0, #3
 8002948:	2300      	movs	r3, #0
 800294a:	430a      	orrs	r2, r1
 800294c:	e6cc      	b.n	80026e8 <__aeabi_dmul+0xac>
 800294e:	46c0      	nop			@ (mov r8, r8)
 8002950:	000007ff 	.word	0x000007ff
 8002954:	fffffc01 	.word	0xfffffc01
 8002958:	000003ff 	.word	0x000003ff
 800295c:	feffffff 	.word	0xfeffffff
 8002960:	000007fe 	.word	0x000007fe
 8002964:	fffffc0d 	.word	0xfffffc0d
 8002968:	0000043e 	.word	0x0000043e
 800296c:	4649      	mov	r1, r9
 800296e:	464a      	mov	r2, r9
 8002970:	0409      	lsls	r1, r1, #16
 8002972:	0c09      	lsrs	r1, r1, #16
 8002974:	000d      	movs	r5, r1
 8002976:	0c16      	lsrs	r6, r2, #16
 8002978:	0c02      	lsrs	r2, r0, #16
 800297a:	0400      	lsls	r0, r0, #16
 800297c:	0c00      	lsrs	r0, r0, #16
 800297e:	4345      	muls	r5, r0
 8002980:	46ac      	mov	ip, r5
 8002982:	0005      	movs	r5, r0
 8002984:	4375      	muls	r5, r6
 8002986:	46a8      	mov	r8, r5
 8002988:	0015      	movs	r5, r2
 800298a:	000f      	movs	r7, r1
 800298c:	4375      	muls	r5, r6
 800298e:	9200      	str	r2, [sp, #0]
 8002990:	9502      	str	r5, [sp, #8]
 8002992:	002a      	movs	r2, r5
 8002994:	9d00      	ldr	r5, [sp, #0]
 8002996:	436f      	muls	r7, r5
 8002998:	4665      	mov	r5, ip
 800299a:	0c2d      	lsrs	r5, r5, #16
 800299c:	46a9      	mov	r9, r5
 800299e:	4447      	add	r7, r8
 80029a0:	444f      	add	r7, r9
 80029a2:	45b8      	cmp	r8, r7
 80029a4:	d905      	bls.n	80029b2 <__aeabi_dmul+0x376>
 80029a6:	0015      	movs	r5, r2
 80029a8:	2280      	movs	r2, #128	@ 0x80
 80029aa:	0252      	lsls	r2, r2, #9
 80029ac:	4690      	mov	r8, r2
 80029ae:	4445      	add	r5, r8
 80029b0:	9502      	str	r5, [sp, #8]
 80029b2:	0c3d      	lsrs	r5, r7, #16
 80029b4:	9503      	str	r5, [sp, #12]
 80029b6:	4665      	mov	r5, ip
 80029b8:	042d      	lsls	r5, r5, #16
 80029ba:	043f      	lsls	r7, r7, #16
 80029bc:	0c2d      	lsrs	r5, r5, #16
 80029be:	46ac      	mov	ip, r5
 80029c0:	003d      	movs	r5, r7
 80029c2:	4465      	add	r5, ip
 80029c4:	9504      	str	r5, [sp, #16]
 80029c6:	0c25      	lsrs	r5, r4, #16
 80029c8:	0424      	lsls	r4, r4, #16
 80029ca:	0c24      	lsrs	r4, r4, #16
 80029cc:	46ac      	mov	ip, r5
 80029ce:	0025      	movs	r5, r4
 80029d0:	4375      	muls	r5, r6
 80029d2:	46a8      	mov	r8, r5
 80029d4:	4665      	mov	r5, ip
 80029d6:	000f      	movs	r7, r1
 80029d8:	4369      	muls	r1, r5
 80029da:	4441      	add	r1, r8
 80029dc:	4689      	mov	r9, r1
 80029de:	4367      	muls	r7, r4
 80029e0:	0c39      	lsrs	r1, r7, #16
 80029e2:	4449      	add	r1, r9
 80029e4:	436e      	muls	r6, r5
 80029e6:	4588      	cmp	r8, r1
 80029e8:	d903      	bls.n	80029f2 <__aeabi_dmul+0x3b6>
 80029ea:	2280      	movs	r2, #128	@ 0x80
 80029ec:	0252      	lsls	r2, r2, #9
 80029ee:	4690      	mov	r8, r2
 80029f0:	4446      	add	r6, r8
 80029f2:	0c0d      	lsrs	r5, r1, #16
 80029f4:	46a8      	mov	r8, r5
 80029f6:	0035      	movs	r5, r6
 80029f8:	4445      	add	r5, r8
 80029fa:	9505      	str	r5, [sp, #20]
 80029fc:	9d03      	ldr	r5, [sp, #12]
 80029fe:	043f      	lsls	r7, r7, #16
 8002a00:	46a8      	mov	r8, r5
 8002a02:	0c3f      	lsrs	r7, r7, #16
 8002a04:	0409      	lsls	r1, r1, #16
 8002a06:	19c9      	adds	r1, r1, r7
 8002a08:	4488      	add	r8, r1
 8002a0a:	4645      	mov	r5, r8
 8002a0c:	9503      	str	r5, [sp, #12]
 8002a0e:	4655      	mov	r5, sl
 8002a10:	042e      	lsls	r6, r5, #16
 8002a12:	0c36      	lsrs	r6, r6, #16
 8002a14:	0c2f      	lsrs	r7, r5, #16
 8002a16:	0035      	movs	r5, r6
 8002a18:	4345      	muls	r5, r0
 8002a1a:	4378      	muls	r0, r7
 8002a1c:	4681      	mov	r9, r0
 8002a1e:	0038      	movs	r0, r7
 8002a20:	46a8      	mov	r8, r5
 8002a22:	0c2d      	lsrs	r5, r5, #16
 8002a24:	46aa      	mov	sl, r5
 8002a26:	9a00      	ldr	r2, [sp, #0]
 8002a28:	4350      	muls	r0, r2
 8002a2a:	4372      	muls	r2, r6
 8002a2c:	444a      	add	r2, r9
 8002a2e:	4452      	add	r2, sl
 8002a30:	4591      	cmp	r9, r2
 8002a32:	d903      	bls.n	8002a3c <__aeabi_dmul+0x400>
 8002a34:	2580      	movs	r5, #128	@ 0x80
 8002a36:	026d      	lsls	r5, r5, #9
 8002a38:	46a9      	mov	r9, r5
 8002a3a:	4448      	add	r0, r9
 8002a3c:	0c15      	lsrs	r5, r2, #16
 8002a3e:	46a9      	mov	r9, r5
 8002a40:	4645      	mov	r5, r8
 8002a42:	042d      	lsls	r5, r5, #16
 8002a44:	0c2d      	lsrs	r5, r5, #16
 8002a46:	46a8      	mov	r8, r5
 8002a48:	4665      	mov	r5, ip
 8002a4a:	437d      	muls	r5, r7
 8002a4c:	0412      	lsls	r2, r2, #16
 8002a4e:	4448      	add	r0, r9
 8002a50:	4490      	add	r8, r2
 8002a52:	46a9      	mov	r9, r5
 8002a54:	0032      	movs	r2, r6
 8002a56:	4665      	mov	r5, ip
 8002a58:	4362      	muls	r2, r4
 8002a5a:	436e      	muls	r6, r5
 8002a5c:	437c      	muls	r4, r7
 8002a5e:	0c17      	lsrs	r7, r2, #16
 8002a60:	1936      	adds	r6, r6, r4
 8002a62:	19bf      	adds	r7, r7, r6
 8002a64:	42bc      	cmp	r4, r7
 8002a66:	d903      	bls.n	8002a70 <__aeabi_dmul+0x434>
 8002a68:	2480      	movs	r4, #128	@ 0x80
 8002a6a:	0264      	lsls	r4, r4, #9
 8002a6c:	46a4      	mov	ip, r4
 8002a6e:	44e1      	add	r9, ip
 8002a70:	9c02      	ldr	r4, [sp, #8]
 8002a72:	9e03      	ldr	r6, [sp, #12]
 8002a74:	46a4      	mov	ip, r4
 8002a76:	9d05      	ldr	r5, [sp, #20]
 8002a78:	4466      	add	r6, ip
 8002a7a:	428e      	cmp	r6, r1
 8002a7c:	4189      	sbcs	r1, r1
 8002a7e:	46ac      	mov	ip, r5
 8002a80:	0412      	lsls	r2, r2, #16
 8002a82:	043c      	lsls	r4, r7, #16
 8002a84:	0c12      	lsrs	r2, r2, #16
 8002a86:	18a2      	adds	r2, r4, r2
 8002a88:	4462      	add	r2, ip
 8002a8a:	4249      	negs	r1, r1
 8002a8c:	1854      	adds	r4, r2, r1
 8002a8e:	4446      	add	r6, r8
 8002a90:	46a4      	mov	ip, r4
 8002a92:	4546      	cmp	r6, r8
 8002a94:	41a4      	sbcs	r4, r4
 8002a96:	4682      	mov	sl, r0
 8002a98:	4264      	negs	r4, r4
 8002a9a:	46a0      	mov	r8, r4
 8002a9c:	42aa      	cmp	r2, r5
 8002a9e:	4192      	sbcs	r2, r2
 8002aa0:	458c      	cmp	ip, r1
 8002aa2:	4189      	sbcs	r1, r1
 8002aa4:	44e2      	add	sl, ip
 8002aa6:	44d0      	add	r8, sl
 8002aa8:	4249      	negs	r1, r1
 8002aaa:	4252      	negs	r2, r2
 8002aac:	430a      	orrs	r2, r1
 8002aae:	45a0      	cmp	r8, r4
 8002ab0:	41a4      	sbcs	r4, r4
 8002ab2:	4582      	cmp	sl, r0
 8002ab4:	4189      	sbcs	r1, r1
 8002ab6:	4264      	negs	r4, r4
 8002ab8:	4249      	negs	r1, r1
 8002aba:	430c      	orrs	r4, r1
 8002abc:	4641      	mov	r1, r8
 8002abe:	0c3f      	lsrs	r7, r7, #16
 8002ac0:	19d2      	adds	r2, r2, r7
 8002ac2:	1912      	adds	r2, r2, r4
 8002ac4:	0dcc      	lsrs	r4, r1, #23
 8002ac6:	9904      	ldr	r1, [sp, #16]
 8002ac8:	0270      	lsls	r0, r6, #9
 8002aca:	4308      	orrs	r0, r1
 8002acc:	1e41      	subs	r1, r0, #1
 8002ace:	4188      	sbcs	r0, r1
 8002ad0:	4641      	mov	r1, r8
 8002ad2:	444a      	add	r2, r9
 8002ad4:	0df6      	lsrs	r6, r6, #23
 8002ad6:	0252      	lsls	r2, r2, #9
 8002ad8:	4330      	orrs	r0, r6
 8002ada:	0249      	lsls	r1, r1, #9
 8002adc:	4314      	orrs	r4, r2
 8002ade:	4308      	orrs	r0, r1
 8002ae0:	01d2      	lsls	r2, r2, #7
 8002ae2:	d535      	bpl.n	8002b50 <__aeabi_dmul+0x514>
 8002ae4:	2201      	movs	r2, #1
 8002ae6:	0843      	lsrs	r3, r0, #1
 8002ae8:	4002      	ands	r2, r0
 8002aea:	4313      	orrs	r3, r2
 8002aec:	07e0      	lsls	r0, r4, #31
 8002aee:	4318      	orrs	r0, r3
 8002af0:	0864      	lsrs	r4, r4, #1
 8002af2:	e634      	b.n	800275e <__aeabi_dmul+0x122>
 8002af4:	9b00      	ldr	r3, [sp, #0]
 8002af6:	46a2      	mov	sl, r4
 8002af8:	469b      	mov	fp, r3
 8002afa:	4681      	mov	r9, r0
 8002afc:	2480      	movs	r4, #128	@ 0x80
 8002afe:	4653      	mov	r3, sl
 8002b00:	0324      	lsls	r4, r4, #12
 8002b02:	431c      	orrs	r4, r3
 8002b04:	0324      	lsls	r4, r4, #12
 8002b06:	464a      	mov	r2, r9
 8002b08:	4b2e      	ldr	r3, [pc, #184]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002b0a:	0b24      	lsrs	r4, r4, #12
 8002b0c:	e5ec      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002b0e:	f000 fd75 	bl	80035fc <__clzsi2>
 8002b12:	2315      	movs	r3, #21
 8002b14:	469c      	mov	ip, r3
 8002b16:	4484      	add	ip, r0
 8002b18:	0002      	movs	r2, r0
 8002b1a:	4663      	mov	r3, ip
 8002b1c:	3220      	adds	r2, #32
 8002b1e:	2b1c      	cmp	r3, #28
 8002b20:	dc00      	bgt.n	8002b24 <__aeabi_dmul+0x4e8>
 8002b22:	e684      	b.n	800282e <__aeabi_dmul+0x1f2>
 8002b24:	2300      	movs	r3, #0
 8002b26:	4699      	mov	r9, r3
 8002b28:	0023      	movs	r3, r4
 8002b2a:	3808      	subs	r0, #8
 8002b2c:	4083      	lsls	r3, r0
 8002b2e:	469a      	mov	sl, r3
 8002b30:	e68e      	b.n	8002850 <__aeabi_dmul+0x214>
 8002b32:	f000 fd63 	bl	80035fc <__clzsi2>
 8002b36:	0002      	movs	r2, r0
 8002b38:	0003      	movs	r3, r0
 8002b3a:	3215      	adds	r2, #21
 8002b3c:	3320      	adds	r3, #32
 8002b3e:	2a1c      	cmp	r2, #28
 8002b40:	dc00      	bgt.n	8002b44 <__aeabi_dmul+0x508>
 8002b42:	e64e      	b.n	80027e2 <__aeabi_dmul+0x1a6>
 8002b44:	0002      	movs	r2, r0
 8002b46:	0034      	movs	r4, r6
 8002b48:	3a08      	subs	r2, #8
 8002b4a:	2000      	movs	r0, #0
 8002b4c:	4094      	lsls	r4, r2
 8002b4e:	e652      	b.n	80027f6 <__aeabi_dmul+0x1ba>
 8002b50:	9301      	str	r3, [sp, #4]
 8002b52:	e604      	b.n	800275e <__aeabi_dmul+0x122>
 8002b54:	4b1c      	ldr	r3, [pc, #112]	@ (8002bc8 <__aeabi_dmul+0x58c>)
 8002b56:	0021      	movs	r1, r4
 8002b58:	469c      	mov	ip, r3
 8002b5a:	0003      	movs	r3, r0
 8002b5c:	9d01      	ldr	r5, [sp, #4]
 8002b5e:	40d3      	lsrs	r3, r2
 8002b60:	4465      	add	r5, ip
 8002b62:	40a9      	lsls	r1, r5
 8002b64:	4319      	orrs	r1, r3
 8002b66:	0003      	movs	r3, r0
 8002b68:	40ab      	lsls	r3, r5
 8002b6a:	1e58      	subs	r0, r3, #1
 8002b6c:	4183      	sbcs	r3, r0
 8002b6e:	4319      	orrs	r1, r3
 8002b70:	0008      	movs	r0, r1
 8002b72:	40d4      	lsrs	r4, r2
 8002b74:	074b      	lsls	r3, r1, #29
 8002b76:	d009      	beq.n	8002b8c <__aeabi_dmul+0x550>
 8002b78:	230f      	movs	r3, #15
 8002b7a:	400b      	ands	r3, r1
 8002b7c:	2b04      	cmp	r3, #4
 8002b7e:	d005      	beq.n	8002b8c <__aeabi_dmul+0x550>
 8002b80:	1d0b      	adds	r3, r1, #4
 8002b82:	428b      	cmp	r3, r1
 8002b84:	4180      	sbcs	r0, r0
 8002b86:	4240      	negs	r0, r0
 8002b88:	1824      	adds	r4, r4, r0
 8002b8a:	0018      	movs	r0, r3
 8002b8c:	0223      	lsls	r3, r4, #8
 8002b8e:	d400      	bmi.n	8002b92 <__aeabi_dmul+0x556>
 8002b90:	e6d6      	b.n	8002940 <__aeabi_dmul+0x304>
 8002b92:	2301      	movs	r3, #1
 8002b94:	2400      	movs	r4, #0
 8002b96:	2200      	movs	r2, #0
 8002b98:	e5a6      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002b9a:	290f      	cmp	r1, #15
 8002b9c:	d1aa      	bne.n	8002af4 <__aeabi_dmul+0x4b8>
 8002b9e:	2380      	movs	r3, #128	@ 0x80
 8002ba0:	4652      	mov	r2, sl
 8002ba2:	031b      	lsls	r3, r3, #12
 8002ba4:	421a      	tst	r2, r3
 8002ba6:	d0a9      	beq.n	8002afc <__aeabi_dmul+0x4c0>
 8002ba8:	421c      	tst	r4, r3
 8002baa:	d1a7      	bne.n	8002afc <__aeabi_dmul+0x4c0>
 8002bac:	431c      	orrs	r4, r3
 8002bae:	9b00      	ldr	r3, [sp, #0]
 8002bb0:	0002      	movs	r2, r0
 8002bb2:	469b      	mov	fp, r3
 8002bb4:	4b03      	ldr	r3, [pc, #12]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002bb6:	e597      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002bb8:	2400      	movs	r4, #0
 8002bba:	e6c1      	b.n	8002940 <__aeabi_dmul+0x304>
 8002bbc:	2400      	movs	r4, #0
 8002bbe:	4b01      	ldr	r3, [pc, #4]	@ (8002bc4 <__aeabi_dmul+0x588>)
 8002bc0:	0022      	movs	r2, r4
 8002bc2:	e591      	b.n	80026e8 <__aeabi_dmul+0xac>
 8002bc4:	000007ff 	.word	0x000007ff
 8002bc8:	0000041e 	.word	0x0000041e

08002bcc <__aeabi_dsub>:
 8002bcc:	b5f0      	push	{r4, r5, r6, r7, lr}
 8002bce:	464e      	mov	r6, r9
 8002bd0:	4645      	mov	r5, r8
 8002bd2:	46de      	mov	lr, fp
 8002bd4:	4657      	mov	r7, sl
 8002bd6:	b5e0      	push	{r5, r6, r7, lr}
 8002bd8:	b085      	sub	sp, #20
 8002bda:	9000      	str	r0, [sp, #0]
 8002bdc:	9101      	str	r1, [sp, #4]
 8002bde:	030c      	lsls	r4, r1, #12
 8002be0:	004f      	lsls	r7, r1, #1
 8002be2:	0fce      	lsrs	r6, r1, #31
 8002be4:	0a61      	lsrs	r1, r4, #9
 8002be6:	9c00      	ldr	r4, [sp, #0]
 8002be8:	46b0      	mov	r8, r6
 8002bea:	0f64      	lsrs	r4, r4, #29
 8002bec:	430c      	orrs	r4, r1
 8002bee:	9900      	ldr	r1, [sp, #0]
 8002bf0:	0d7f      	lsrs	r7, r7, #21
 8002bf2:	00c8      	lsls	r0, r1, #3
 8002bf4:	0011      	movs	r1, r2
 8002bf6:	001a      	movs	r2, r3
 8002bf8:	031b      	lsls	r3, r3, #12
 8002bfa:	469c      	mov	ip, r3
 8002bfc:	9100      	str	r1, [sp, #0]
 8002bfe:	9201      	str	r2, [sp, #4]
 8002c00:	0051      	lsls	r1, r2, #1
 8002c02:	0d4b      	lsrs	r3, r1, #21
 8002c04:	4699      	mov	r9, r3
 8002c06:	9b01      	ldr	r3, [sp, #4]
 8002c08:	9d00      	ldr	r5, [sp, #0]
 8002c0a:	0fd9      	lsrs	r1, r3, #31
 8002c0c:	4663      	mov	r3, ip
 8002c0e:	0f6a      	lsrs	r2, r5, #29
 8002c10:	0a5b      	lsrs	r3, r3, #9
 8002c12:	4313      	orrs	r3, r2
 8002c14:	00ea      	lsls	r2, r5, #3
 8002c16:	4694      	mov	ip, r2
 8002c18:	4693      	mov	fp, r2
 8002c1a:	4ac1      	ldr	r2, [pc, #772]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002c1c:	9003      	str	r0, [sp, #12]
 8002c1e:	9302      	str	r3, [sp, #8]
 8002c20:	4591      	cmp	r9, r2
 8002c22:	d100      	bne.n	8002c26 <__aeabi_dsub+0x5a>
 8002c24:	e0cd      	b.n	8002dc2 <__aeabi_dsub+0x1f6>
 8002c26:	2501      	movs	r5, #1
 8002c28:	4069      	eors	r1, r5
 8002c2a:	464d      	mov	r5, r9
 8002c2c:	1b7d      	subs	r5, r7, r5
 8002c2e:	46aa      	mov	sl, r5
 8002c30:	428e      	cmp	r6, r1
 8002c32:	d100      	bne.n	8002c36 <__aeabi_dsub+0x6a>
 8002c34:	e080      	b.n	8002d38 <__aeabi_dsub+0x16c>
 8002c36:	2d00      	cmp	r5, #0
 8002c38:	dc00      	bgt.n	8002c3c <__aeabi_dsub+0x70>
 8002c3a:	e335      	b.n	80032a8 <__aeabi_dsub+0x6dc>
 8002c3c:	4649      	mov	r1, r9
 8002c3e:	2900      	cmp	r1, #0
 8002c40:	d100      	bne.n	8002c44 <__aeabi_dsub+0x78>
 8002c42:	e0df      	b.n	8002e04 <__aeabi_dsub+0x238>
 8002c44:	4297      	cmp	r7, r2
 8002c46:	d100      	bne.n	8002c4a <__aeabi_dsub+0x7e>
 8002c48:	e194      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002c4a:	4652      	mov	r2, sl
 8002c4c:	2501      	movs	r5, #1
 8002c4e:	2a38      	cmp	r2, #56	@ 0x38
 8002c50:	dc19      	bgt.n	8002c86 <__aeabi_dsub+0xba>
 8002c52:	2280      	movs	r2, #128	@ 0x80
 8002c54:	9b02      	ldr	r3, [sp, #8]
 8002c56:	0412      	lsls	r2, r2, #16
 8002c58:	4313      	orrs	r3, r2
 8002c5a:	9302      	str	r3, [sp, #8]
 8002c5c:	4652      	mov	r2, sl
 8002c5e:	2a1f      	cmp	r2, #31
 8002c60:	dd00      	ble.n	8002c64 <__aeabi_dsub+0x98>
 8002c62:	e1e3      	b.n	800302c <__aeabi_dsub+0x460>
 8002c64:	4653      	mov	r3, sl
 8002c66:	2220      	movs	r2, #32
 8002c68:	4661      	mov	r1, ip
 8002c6a:	9d02      	ldr	r5, [sp, #8]
 8002c6c:	1ad2      	subs	r2, r2, r3
 8002c6e:	4095      	lsls	r5, r2
 8002c70:	40d9      	lsrs	r1, r3
 8002c72:	430d      	orrs	r5, r1
 8002c74:	4661      	mov	r1, ip
 8002c76:	4091      	lsls	r1, r2
 8002c78:	000a      	movs	r2, r1
 8002c7a:	1e51      	subs	r1, r2, #1
 8002c7c:	418a      	sbcs	r2, r1
 8002c7e:	4315      	orrs	r5, r2
 8002c80:	9a02      	ldr	r2, [sp, #8]
 8002c82:	40da      	lsrs	r2, r3
 8002c84:	1aa4      	subs	r4, r4, r2
 8002c86:	1b45      	subs	r5, r0, r5
 8002c88:	42a8      	cmp	r0, r5
 8002c8a:	4180      	sbcs	r0, r0
 8002c8c:	4240      	negs	r0, r0
 8002c8e:	1a24      	subs	r4, r4, r0
 8002c90:	0223      	lsls	r3, r4, #8
 8002c92:	d400      	bmi.n	8002c96 <__aeabi_dsub+0xca>
 8002c94:	e13d      	b.n	8002f12 <__aeabi_dsub+0x346>
 8002c96:	0264      	lsls	r4, r4, #9
 8002c98:	0a64      	lsrs	r4, r4, #9
 8002c9a:	2c00      	cmp	r4, #0
 8002c9c:	d100      	bne.n	8002ca0 <__aeabi_dsub+0xd4>
 8002c9e:	e147      	b.n	8002f30 <__aeabi_dsub+0x364>
 8002ca0:	0020      	movs	r0, r4
 8002ca2:	f000 fcab 	bl	80035fc <__clzsi2>
 8002ca6:	0003      	movs	r3, r0
 8002ca8:	3b08      	subs	r3, #8
 8002caa:	2120      	movs	r1, #32
 8002cac:	0028      	movs	r0, r5
 8002cae:	1aca      	subs	r2, r1, r3
 8002cb0:	40d0      	lsrs	r0, r2
 8002cb2:	409c      	lsls	r4, r3
 8002cb4:	0002      	movs	r2, r0
 8002cb6:	409d      	lsls	r5, r3
 8002cb8:	4322      	orrs	r2, r4
 8002cba:	429f      	cmp	r7, r3
 8002cbc:	dd00      	ble.n	8002cc0 <__aeabi_dsub+0xf4>
 8002cbe:	e177      	b.n	8002fb0 <__aeabi_dsub+0x3e4>
 8002cc0:	1bd8      	subs	r0, r3, r7
 8002cc2:	3001      	adds	r0, #1
 8002cc4:	1a09      	subs	r1, r1, r0
 8002cc6:	002c      	movs	r4, r5
 8002cc8:	408d      	lsls	r5, r1
 8002cca:	40c4      	lsrs	r4, r0
 8002ccc:	1e6b      	subs	r3, r5, #1
 8002cce:	419d      	sbcs	r5, r3
 8002cd0:	0013      	movs	r3, r2
 8002cd2:	40c2      	lsrs	r2, r0
 8002cd4:	408b      	lsls	r3, r1
 8002cd6:	4325      	orrs	r5, r4
 8002cd8:	2700      	movs	r7, #0
 8002cda:	0014      	movs	r4, r2
 8002cdc:	431d      	orrs	r5, r3
 8002cde:	076b      	lsls	r3, r5, #29
 8002ce0:	d009      	beq.n	8002cf6 <__aeabi_dsub+0x12a>
 8002ce2:	230f      	movs	r3, #15
 8002ce4:	402b      	ands	r3, r5
 8002ce6:	2b04      	cmp	r3, #4
 8002ce8:	d005      	beq.n	8002cf6 <__aeabi_dsub+0x12a>
 8002cea:	1d2b      	adds	r3, r5, #4
 8002cec:	42ab      	cmp	r3, r5
 8002cee:	41ad      	sbcs	r5, r5
 8002cf0:	426d      	negs	r5, r5
 8002cf2:	1964      	adds	r4, r4, r5
 8002cf4:	001d      	movs	r5, r3
 8002cf6:	0223      	lsls	r3, r4, #8
 8002cf8:	d400      	bmi.n	8002cfc <__aeabi_dsub+0x130>
 8002cfa:	e140      	b.n	8002f7e <__aeabi_dsub+0x3b2>
 8002cfc:	4a88      	ldr	r2, [pc, #544]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002cfe:	3701      	adds	r7, #1
 8002d00:	4297      	cmp	r7, r2
 8002d02:	d100      	bne.n	8002d06 <__aeabi_dsub+0x13a>
 8002d04:	e101      	b.n	8002f0a <__aeabi_dsub+0x33e>
 8002d06:	2601      	movs	r6, #1
 8002d08:	4643      	mov	r3, r8
 8002d0a:	4986      	ldr	r1, [pc, #536]	@ (8002f24 <__aeabi_dsub+0x358>)
 8002d0c:	08ed      	lsrs	r5, r5, #3
 8002d0e:	4021      	ands	r1, r4
 8002d10:	074a      	lsls	r2, r1, #29
 8002d12:	432a      	orrs	r2, r5
 8002d14:	057c      	lsls	r4, r7, #21
 8002d16:	024d      	lsls	r5, r1, #9
 8002d18:	0b2d      	lsrs	r5, r5, #12
 8002d1a:	0d64      	lsrs	r4, r4, #21
 8002d1c:	401e      	ands	r6, r3
 8002d1e:	0524      	lsls	r4, r4, #20
 8002d20:	432c      	orrs	r4, r5
 8002d22:	07f6      	lsls	r6, r6, #31
 8002d24:	4334      	orrs	r4, r6
 8002d26:	0010      	movs	r0, r2
 8002d28:	0021      	movs	r1, r4
 8002d2a:	b005      	add	sp, #20
 8002d2c:	bcf0      	pop	{r4, r5, r6, r7}
 8002d2e:	46bb      	mov	fp, r7
 8002d30:	46b2      	mov	sl, r6
 8002d32:	46a9      	mov	r9, r5
 8002d34:	46a0      	mov	r8, r4
 8002d36:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8002d38:	2d00      	cmp	r5, #0
 8002d3a:	dc00      	bgt.n	8002d3e <__aeabi_dsub+0x172>
 8002d3c:	e2d0      	b.n	80032e0 <__aeabi_dsub+0x714>
 8002d3e:	4649      	mov	r1, r9
 8002d40:	2900      	cmp	r1, #0
 8002d42:	d000      	beq.n	8002d46 <__aeabi_dsub+0x17a>
 8002d44:	e0d4      	b.n	8002ef0 <__aeabi_dsub+0x324>
 8002d46:	4661      	mov	r1, ip
 8002d48:	9b02      	ldr	r3, [sp, #8]
 8002d4a:	4319      	orrs	r1, r3
 8002d4c:	d100      	bne.n	8002d50 <__aeabi_dsub+0x184>
 8002d4e:	e12b      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002d50:	1e69      	subs	r1, r5, #1
 8002d52:	2d01      	cmp	r5, #1
 8002d54:	d100      	bne.n	8002d58 <__aeabi_dsub+0x18c>
 8002d56:	e1d9      	b.n	800310c <__aeabi_dsub+0x540>
 8002d58:	4295      	cmp	r5, r2
 8002d5a:	d100      	bne.n	8002d5e <__aeabi_dsub+0x192>
 8002d5c:	e10a      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002d5e:	2501      	movs	r5, #1
 8002d60:	2938      	cmp	r1, #56	@ 0x38
 8002d62:	dc17      	bgt.n	8002d94 <__aeabi_dsub+0x1c8>
 8002d64:	468a      	mov	sl, r1
 8002d66:	4653      	mov	r3, sl
 8002d68:	2b1f      	cmp	r3, #31
 8002d6a:	dd00      	ble.n	8002d6e <__aeabi_dsub+0x1a2>
 8002d6c:	e1e7      	b.n	800313e <__aeabi_dsub+0x572>
 8002d6e:	2220      	movs	r2, #32
 8002d70:	1ad2      	subs	r2, r2, r3
 8002d72:	9b02      	ldr	r3, [sp, #8]
 8002d74:	4661      	mov	r1, ip
 8002d76:	4093      	lsls	r3, r2
 8002d78:	001d      	movs	r5, r3
 8002d7a:	4653      	mov	r3, sl
 8002d7c:	40d9      	lsrs	r1, r3
 8002d7e:	4663      	mov	r3, ip
 8002d80:	4093      	lsls	r3, r2
 8002d82:	001a      	movs	r2, r3
 8002d84:	430d      	orrs	r5, r1
 8002d86:	1e51      	subs	r1, r2, #1
 8002d88:	418a      	sbcs	r2, r1
 8002d8a:	4653      	mov	r3, sl
 8002d8c:	4315      	orrs	r5, r2
 8002d8e:	9a02      	ldr	r2, [sp, #8]
 8002d90:	40da      	lsrs	r2, r3
 8002d92:	18a4      	adds	r4, r4, r2
 8002d94:	182d      	adds	r5, r5, r0
 8002d96:	4285      	cmp	r5, r0
 8002d98:	4180      	sbcs	r0, r0
 8002d9a:	4240      	negs	r0, r0
 8002d9c:	1824      	adds	r4, r4, r0
 8002d9e:	0223      	lsls	r3, r4, #8
 8002da0:	d400      	bmi.n	8002da4 <__aeabi_dsub+0x1d8>
 8002da2:	e0b6      	b.n	8002f12 <__aeabi_dsub+0x346>
 8002da4:	4b5e      	ldr	r3, [pc, #376]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002da6:	3701      	adds	r7, #1
 8002da8:	429f      	cmp	r7, r3
 8002daa:	d100      	bne.n	8002dae <__aeabi_dsub+0x1e2>
 8002dac:	e0ad      	b.n	8002f0a <__aeabi_dsub+0x33e>
 8002dae:	2101      	movs	r1, #1
 8002db0:	4b5c      	ldr	r3, [pc, #368]	@ (8002f24 <__aeabi_dsub+0x358>)
 8002db2:	086a      	lsrs	r2, r5, #1
 8002db4:	401c      	ands	r4, r3
 8002db6:	4029      	ands	r1, r5
 8002db8:	430a      	orrs	r2, r1
 8002dba:	07e5      	lsls	r5, r4, #31
 8002dbc:	4315      	orrs	r5, r2
 8002dbe:	0864      	lsrs	r4, r4, #1
 8002dc0:	e78d      	b.n	8002cde <__aeabi_dsub+0x112>
 8002dc2:	4a59      	ldr	r2, [pc, #356]	@ (8002f28 <__aeabi_dsub+0x35c>)
 8002dc4:	9b02      	ldr	r3, [sp, #8]
 8002dc6:	4692      	mov	sl, r2
 8002dc8:	4662      	mov	r2, ip
 8002dca:	44ba      	add	sl, r7
 8002dcc:	431a      	orrs	r2, r3
 8002dce:	d02c      	beq.n	8002e2a <__aeabi_dsub+0x25e>
 8002dd0:	428e      	cmp	r6, r1
 8002dd2:	d02e      	beq.n	8002e32 <__aeabi_dsub+0x266>
 8002dd4:	4652      	mov	r2, sl
 8002dd6:	2a00      	cmp	r2, #0
 8002dd8:	d060      	beq.n	8002e9c <__aeabi_dsub+0x2d0>
 8002dda:	2f00      	cmp	r7, #0
 8002ddc:	d100      	bne.n	8002de0 <__aeabi_dsub+0x214>
 8002dde:	e0db      	b.n	8002f98 <__aeabi_dsub+0x3cc>
 8002de0:	4663      	mov	r3, ip
 8002de2:	000e      	movs	r6, r1
 8002de4:	9c02      	ldr	r4, [sp, #8]
 8002de6:	08d8      	lsrs	r0, r3, #3
 8002de8:	0762      	lsls	r2, r4, #29
 8002dea:	4302      	orrs	r2, r0
 8002dec:	08e4      	lsrs	r4, r4, #3
 8002dee:	0013      	movs	r3, r2
 8002df0:	4323      	orrs	r3, r4
 8002df2:	d100      	bne.n	8002df6 <__aeabi_dsub+0x22a>
 8002df4:	e254      	b.n	80032a0 <__aeabi_dsub+0x6d4>
 8002df6:	2580      	movs	r5, #128	@ 0x80
 8002df8:	032d      	lsls	r5, r5, #12
 8002dfa:	4325      	orrs	r5, r4
 8002dfc:	032d      	lsls	r5, r5, #12
 8002dfe:	4c48      	ldr	r4, [pc, #288]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002e00:	0b2d      	lsrs	r5, r5, #12
 8002e02:	e78c      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002e04:	4661      	mov	r1, ip
 8002e06:	9b02      	ldr	r3, [sp, #8]
 8002e08:	4319      	orrs	r1, r3
 8002e0a:	d100      	bne.n	8002e0e <__aeabi_dsub+0x242>
 8002e0c:	e0cc      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002e0e:	0029      	movs	r1, r5
 8002e10:	3901      	subs	r1, #1
 8002e12:	2d01      	cmp	r5, #1
 8002e14:	d100      	bne.n	8002e18 <__aeabi_dsub+0x24c>
 8002e16:	e188      	b.n	800312a <__aeabi_dsub+0x55e>
 8002e18:	4295      	cmp	r5, r2
 8002e1a:	d100      	bne.n	8002e1e <__aeabi_dsub+0x252>
 8002e1c:	e0aa      	b.n	8002f74 <__aeabi_dsub+0x3a8>
 8002e1e:	2501      	movs	r5, #1
 8002e20:	2938      	cmp	r1, #56	@ 0x38
 8002e22:	dd00      	ble.n	8002e26 <__aeabi_dsub+0x25a>
 8002e24:	e72f      	b.n	8002c86 <__aeabi_dsub+0xba>
 8002e26:	468a      	mov	sl, r1
 8002e28:	e718      	b.n	8002c5c <__aeabi_dsub+0x90>
 8002e2a:	2201      	movs	r2, #1
 8002e2c:	4051      	eors	r1, r2
 8002e2e:	428e      	cmp	r6, r1
 8002e30:	d1d0      	bne.n	8002dd4 <__aeabi_dsub+0x208>
 8002e32:	4653      	mov	r3, sl
 8002e34:	2b00      	cmp	r3, #0
 8002e36:	d100      	bne.n	8002e3a <__aeabi_dsub+0x26e>
 8002e38:	e0be      	b.n	8002fb8 <__aeabi_dsub+0x3ec>
 8002e3a:	2f00      	cmp	r7, #0
 8002e3c:	d000      	beq.n	8002e40 <__aeabi_dsub+0x274>
 8002e3e:	e138      	b.n	80030b2 <__aeabi_dsub+0x4e6>
 8002e40:	46ca      	mov	sl, r9
 8002e42:	0022      	movs	r2, r4
 8002e44:	4302      	orrs	r2, r0
 8002e46:	d100      	bne.n	8002e4a <__aeabi_dsub+0x27e>
 8002e48:	e1e2      	b.n	8003210 <__aeabi_dsub+0x644>
 8002e4a:	4653      	mov	r3, sl
 8002e4c:	1e59      	subs	r1, r3, #1
 8002e4e:	2b01      	cmp	r3, #1
 8002e50:	d100      	bne.n	8002e54 <__aeabi_dsub+0x288>
 8002e52:	e20d      	b.n	8003270 <__aeabi_dsub+0x6a4>
 8002e54:	4a32      	ldr	r2, [pc, #200]	@ (8002f20 <__aeabi_dsub+0x354>)
 8002e56:	4592      	cmp	sl, r2
 8002e58:	d100      	bne.n	8002e5c <__aeabi_dsub+0x290>
 8002e5a:	e1d2      	b.n	8003202 <__aeabi_dsub+0x636>
 8002e5c:	2701      	movs	r7, #1
 8002e5e:	2938      	cmp	r1, #56	@ 0x38
 8002e60:	dc13      	bgt.n	8002e8a <__aeabi_dsub+0x2be>
 8002e62:	291f      	cmp	r1, #31
 8002e64:	dd00      	ble.n	8002e68 <__aeabi_dsub+0x29c>
 8002e66:	e1ee      	b.n	8003246 <__aeabi_dsub+0x67a>
 8002e68:	2220      	movs	r2, #32
 8002e6a:	9b02      	ldr	r3, [sp, #8]
 8002e6c:	1a52      	subs	r2, r2, r1
 8002e6e:	0025      	movs	r5, r4
 8002e70:	0007      	movs	r7, r0
 8002e72:	469a      	mov	sl, r3
 8002e74:	40cc      	lsrs	r4, r1
 8002e76:	4090      	lsls	r0, r2
 8002e78:	4095      	lsls	r5, r2
 8002e7a:	40cf      	lsrs	r7, r1
 8002e7c:	44a2      	add	sl, r4
 8002e7e:	1e42      	subs	r2, r0, #1
 8002e80:	4190      	sbcs	r0, r2
 8002e82:	4653      	mov	r3, sl
 8002e84:	432f      	orrs	r7, r5
 8002e86:	4307      	orrs	r7, r0
 8002e88:	9302      	str	r3, [sp, #8]
 8002e8a:	003d      	movs	r5, r7
 8002e8c:	4465      	add	r5, ip
 8002e8e:	4565      	cmp	r5, ip
 8002e90:	4192      	sbcs	r2, r2
 8002e92:	9b02      	ldr	r3, [sp, #8]
 8002e94:	4252      	negs	r2, r2
 8002e96:	464f      	mov	r7, r9
 8002e98:	18d4      	adds	r4, r2, r3
 8002e9a:	e780      	b.n	8002d9e <__aeabi_dsub+0x1d2>
 8002e9c:	4a23      	ldr	r2, [pc, #140]	@ (8002f2c <__aeabi_dsub+0x360>)
 8002e9e:	1c7d      	adds	r5, r7, #1
 8002ea0:	4215      	tst	r5, r2
 8002ea2:	d000      	beq.n	8002ea6 <__aeabi_dsub+0x2da>
 8002ea4:	e0aa      	b.n	8002ffc <__aeabi_dsub+0x430>
 8002ea6:	4662      	mov	r2, ip
 8002ea8:	0025      	movs	r5, r4
 8002eaa:	9b02      	ldr	r3, [sp, #8]
 8002eac:	4305      	orrs	r5, r0
 8002eae:	431a      	orrs	r2, r3
 8002eb0:	2f00      	cmp	r7, #0
 8002eb2:	d000      	beq.n	8002eb6 <__aeabi_dsub+0x2ea>
 8002eb4:	e0f5      	b.n	80030a2 <__aeabi_dsub+0x4d6>
 8002eb6:	2d00      	cmp	r5, #0
 8002eb8:	d100      	bne.n	8002ebc <__aeabi_dsub+0x2f0>
 8002eba:	e16b      	b.n	8003194 <__aeabi_dsub+0x5c8>
 8002ebc:	2a00      	cmp	r2, #0
 8002ebe:	d100      	bne.n	8002ec2 <__aeabi_dsub+0x2f6>
 8002ec0:	e152      	b.n	8003168 <__aeabi_dsub+0x59c>
 8002ec2:	4663      	mov	r3, ip
 8002ec4:	1ac5      	subs	r5, r0, r3
 8002ec6:	9b02      	ldr	r3, [sp, #8]
 8002ec8:	1ae2      	subs	r2, r4, r3
 8002eca:	42a8      	cmp	r0, r5
 8002ecc:	419b      	sbcs	r3, r3
 8002ece:	425b      	negs	r3, r3
 8002ed0:	1ad3      	subs	r3, r2, r3
 8002ed2:	021a      	lsls	r2, r3, #8
 8002ed4:	d400      	bmi.n	8002ed8 <__aeabi_dsub+0x30c>
 8002ed6:	e1d5      	b.n	8003284 <__aeabi_dsub+0x6b8>
 8002ed8:	4663      	mov	r3, ip
 8002eda:	1a1d      	subs	r5, r3, r0
 8002edc:	45ac      	cmp	ip, r5
 8002ede:	4192      	sbcs	r2, r2
 8002ee0:	2601      	movs	r6, #1
 8002ee2:	9b02      	ldr	r3, [sp, #8]
 8002ee4:	4252      	negs	r2, r2
 8002ee6:	1b1c      	subs	r4, r3, r4
 8002ee8:	4688      	mov	r8, r1
 8002eea:	1aa4      	subs	r4, r4, r2
 8002eec:	400e      	ands	r6, r1
 8002eee:	e6f6      	b.n	8002cde <__aeabi_dsub+0x112>
 8002ef0:	4297      	cmp	r7, r2
 8002ef2:	d03f      	beq.n	8002f74 <__aeabi_dsub+0x3a8>
 8002ef4:	4652      	mov	r2, sl
 8002ef6:	2501      	movs	r5, #1
 8002ef8:	2a38      	cmp	r2, #56	@ 0x38
 8002efa:	dd00      	ble.n	8002efe <__aeabi_dsub+0x332>
 8002efc:	e74a      	b.n	8002d94 <__aeabi_dsub+0x1c8>
 8002efe:	2280      	movs	r2, #128	@ 0x80
 8002f00:	9b02      	ldr	r3, [sp, #8]
 8002f02:	0412      	lsls	r2, r2, #16
 8002f04:	4313      	orrs	r3, r2
 8002f06:	9302      	str	r3, [sp, #8]
 8002f08:	e72d      	b.n	8002d66 <__aeabi_dsub+0x19a>
 8002f0a:	003c      	movs	r4, r7
 8002f0c:	2500      	movs	r5, #0
 8002f0e:	2200      	movs	r2, #0
 8002f10:	e705      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002f12:	2307      	movs	r3, #7
 8002f14:	402b      	ands	r3, r5
 8002f16:	2b00      	cmp	r3, #0
 8002f18:	d000      	beq.n	8002f1c <__aeabi_dsub+0x350>
 8002f1a:	e6e2      	b.n	8002ce2 <__aeabi_dsub+0x116>
 8002f1c:	e06b      	b.n	8002ff6 <__aeabi_dsub+0x42a>
 8002f1e:	46c0      	nop			@ (mov r8, r8)
 8002f20:	000007ff 	.word	0x000007ff
 8002f24:	ff7fffff 	.word	0xff7fffff
 8002f28:	fffff801 	.word	0xfffff801
 8002f2c:	000007fe 	.word	0x000007fe
 8002f30:	0028      	movs	r0, r5
 8002f32:	f000 fb63 	bl	80035fc <__clzsi2>
 8002f36:	0003      	movs	r3, r0
 8002f38:	3318      	adds	r3, #24
 8002f3a:	2b1f      	cmp	r3, #31
 8002f3c:	dc00      	bgt.n	8002f40 <__aeabi_dsub+0x374>
 8002f3e:	e6b4      	b.n	8002caa <__aeabi_dsub+0xde>
 8002f40:	002a      	movs	r2, r5
 8002f42:	3808      	subs	r0, #8
 8002f44:	4082      	lsls	r2, r0
 8002f46:	429f      	cmp	r7, r3
 8002f48:	dd00      	ble.n	8002f4c <__aeabi_dsub+0x380>
 8002f4a:	e0b9      	b.n	80030c0 <__aeabi_dsub+0x4f4>
 8002f4c:	1bdb      	subs	r3, r3, r7
 8002f4e:	1c58      	adds	r0, r3, #1
 8002f50:	281f      	cmp	r0, #31
 8002f52:	dc00      	bgt.n	8002f56 <__aeabi_dsub+0x38a>
 8002f54:	e1a0      	b.n	8003298 <__aeabi_dsub+0x6cc>
 8002f56:	0015      	movs	r5, r2
 8002f58:	3b1f      	subs	r3, #31
 8002f5a:	40dd      	lsrs	r5, r3
 8002f5c:	2820      	cmp	r0, #32
 8002f5e:	d005      	beq.n	8002f6c <__aeabi_dsub+0x3a0>
 8002f60:	2340      	movs	r3, #64	@ 0x40
 8002f62:	1a1b      	subs	r3, r3, r0
 8002f64:	409a      	lsls	r2, r3
 8002f66:	1e53      	subs	r3, r2, #1
 8002f68:	419a      	sbcs	r2, r3
 8002f6a:	4315      	orrs	r5, r2
 8002f6c:	2307      	movs	r3, #7
 8002f6e:	2700      	movs	r7, #0
 8002f70:	402b      	ands	r3, r5
 8002f72:	e7d0      	b.n	8002f16 <__aeabi_dsub+0x34a>
 8002f74:	08c0      	lsrs	r0, r0, #3
 8002f76:	0762      	lsls	r2, r4, #29
 8002f78:	4302      	orrs	r2, r0
 8002f7a:	08e4      	lsrs	r4, r4, #3
 8002f7c:	e737      	b.n	8002dee <__aeabi_dsub+0x222>
 8002f7e:	08ea      	lsrs	r2, r5, #3
 8002f80:	0763      	lsls	r3, r4, #29
 8002f82:	431a      	orrs	r2, r3
 8002f84:	4bd3      	ldr	r3, [pc, #844]	@ (80032d4 <__aeabi_dsub+0x708>)
 8002f86:	08e4      	lsrs	r4, r4, #3
 8002f88:	429f      	cmp	r7, r3
 8002f8a:	d100      	bne.n	8002f8e <__aeabi_dsub+0x3c2>
 8002f8c:	e72f      	b.n	8002dee <__aeabi_dsub+0x222>
 8002f8e:	0324      	lsls	r4, r4, #12
 8002f90:	0b25      	lsrs	r5, r4, #12
 8002f92:	057c      	lsls	r4, r7, #21
 8002f94:	0d64      	lsrs	r4, r4, #21
 8002f96:	e6c2      	b.n	8002d1e <__aeabi_dsub+0x152>
 8002f98:	46ca      	mov	sl, r9
 8002f9a:	0022      	movs	r2, r4
 8002f9c:	4302      	orrs	r2, r0
 8002f9e:	d158      	bne.n	8003052 <__aeabi_dsub+0x486>
 8002fa0:	4663      	mov	r3, ip
 8002fa2:	000e      	movs	r6, r1
 8002fa4:	9c02      	ldr	r4, [sp, #8]
 8002fa6:	9303      	str	r3, [sp, #12]
 8002fa8:	9b03      	ldr	r3, [sp, #12]
 8002faa:	4657      	mov	r7, sl
 8002fac:	08da      	lsrs	r2, r3, #3
 8002fae:	e7e7      	b.n	8002f80 <__aeabi_dsub+0x3b4>
 8002fb0:	4cc9      	ldr	r4, [pc, #804]	@ (80032d8 <__aeabi_dsub+0x70c>)
 8002fb2:	1aff      	subs	r7, r7, r3
 8002fb4:	4014      	ands	r4, r2
 8002fb6:	e692      	b.n	8002cde <__aeabi_dsub+0x112>
 8002fb8:	4dc8      	ldr	r5, [pc, #800]	@ (80032dc <__aeabi_dsub+0x710>)
 8002fba:	1c7a      	adds	r2, r7, #1
 8002fbc:	422a      	tst	r2, r5
 8002fbe:	d000      	beq.n	8002fc2 <__aeabi_dsub+0x3f6>
 8002fc0:	e084      	b.n	80030cc <__aeabi_dsub+0x500>
 8002fc2:	0022      	movs	r2, r4
 8002fc4:	4302      	orrs	r2, r0
 8002fc6:	2f00      	cmp	r7, #0
 8002fc8:	d000      	beq.n	8002fcc <__aeabi_dsub+0x400>
 8002fca:	e0ef      	b.n	80031ac <__aeabi_dsub+0x5e0>
 8002fcc:	2a00      	cmp	r2, #0
 8002fce:	d100      	bne.n	8002fd2 <__aeabi_dsub+0x406>
 8002fd0:	e0e5      	b.n	800319e <__aeabi_dsub+0x5d2>
 8002fd2:	4662      	mov	r2, ip
 8002fd4:	9902      	ldr	r1, [sp, #8]
 8002fd6:	430a      	orrs	r2, r1
 8002fd8:	d100      	bne.n	8002fdc <__aeabi_dsub+0x410>
 8002fda:	e0c5      	b.n	8003168 <__aeabi_dsub+0x59c>
 8002fdc:	4663      	mov	r3, ip
 8002fde:	18c5      	adds	r5, r0, r3
 8002fe0:	468c      	mov	ip, r1
 8002fe2:	4285      	cmp	r5, r0
 8002fe4:	4180      	sbcs	r0, r0
 8002fe6:	4464      	add	r4, ip
 8002fe8:	4240      	negs	r0, r0
 8002fea:	1824      	adds	r4, r4, r0
 8002fec:	0223      	lsls	r3, r4, #8
 8002fee:	d502      	bpl.n	8002ff6 <__aeabi_dsub+0x42a>
 8002ff0:	4bb9      	ldr	r3, [pc, #740]	@ (80032d8 <__aeabi_dsub+0x70c>)
 8002ff2:	3701      	adds	r7, #1
 8002ff4:	401c      	ands	r4, r3
 8002ff6:	46ba      	mov	sl, r7
 8002ff8:	9503      	str	r5, [sp, #12]
 8002ffa:	e7d5      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8002ffc:	4662      	mov	r2, ip
 8002ffe:	1a85      	subs	r5, r0, r2
 8003000:	42a8      	cmp	r0, r5
 8003002:	4192      	sbcs	r2, r2
 8003004:	4252      	negs	r2, r2
 8003006:	4691      	mov	r9, r2
 8003008:	9b02      	ldr	r3, [sp, #8]
 800300a:	1ae3      	subs	r3, r4, r3
 800300c:	001a      	movs	r2, r3
 800300e:	464b      	mov	r3, r9
 8003010:	1ad2      	subs	r2, r2, r3
 8003012:	0013      	movs	r3, r2
 8003014:	4691      	mov	r9, r2
 8003016:	021a      	lsls	r2, r3, #8
 8003018:	d46c      	bmi.n	80030f4 <__aeabi_dsub+0x528>
 800301a:	464a      	mov	r2, r9
 800301c:	464c      	mov	r4, r9
 800301e:	432a      	orrs	r2, r5
 8003020:	d000      	beq.n	8003024 <__aeabi_dsub+0x458>
 8003022:	e63a      	b.n	8002c9a <__aeabi_dsub+0xce>
 8003024:	2600      	movs	r6, #0
 8003026:	2400      	movs	r4, #0
 8003028:	2500      	movs	r5, #0
 800302a:	e678      	b.n	8002d1e <__aeabi_dsub+0x152>
 800302c:	9902      	ldr	r1, [sp, #8]
 800302e:	4653      	mov	r3, sl
 8003030:	000d      	movs	r5, r1
 8003032:	3a20      	subs	r2, #32
 8003034:	40d5      	lsrs	r5, r2
 8003036:	2b20      	cmp	r3, #32
 8003038:	d006      	beq.n	8003048 <__aeabi_dsub+0x47c>
 800303a:	2240      	movs	r2, #64	@ 0x40
 800303c:	1ad2      	subs	r2, r2, r3
 800303e:	000b      	movs	r3, r1
 8003040:	4093      	lsls	r3, r2
 8003042:	4662      	mov	r2, ip
 8003044:	431a      	orrs	r2, r3
 8003046:	4693      	mov	fp, r2
 8003048:	465b      	mov	r3, fp
 800304a:	1e5a      	subs	r2, r3, #1
 800304c:	4193      	sbcs	r3, r2
 800304e:	431d      	orrs	r5, r3
 8003050:	e619      	b.n	8002c86 <__aeabi_dsub+0xba>
 8003052:	4653      	mov	r3, sl
 8003054:	1e5a      	subs	r2, r3, #1
 8003056:	2b01      	cmp	r3, #1
 8003058:	d100      	bne.n	800305c <__aeabi_dsub+0x490>
 800305a:	e0c6      	b.n	80031ea <__aeabi_dsub+0x61e>
 800305c:	4e9d      	ldr	r6, [pc, #628]	@ (80032d4 <__aeabi_dsub+0x708>)
 800305e:	45b2      	cmp	sl, r6
 8003060:	d100      	bne.n	8003064 <__aeabi_dsub+0x498>
 8003062:	e6bd      	b.n	8002de0 <__aeabi_dsub+0x214>
 8003064:	4688      	mov	r8, r1
 8003066:	000e      	movs	r6, r1
 8003068:	2501      	movs	r5, #1
 800306a:	2a38      	cmp	r2, #56	@ 0x38
 800306c:	dc10      	bgt.n	8003090 <__aeabi_dsub+0x4c4>
 800306e:	2a1f      	cmp	r2, #31
 8003070:	dc7f      	bgt.n	8003172 <__aeabi_dsub+0x5a6>
 8003072:	2120      	movs	r1, #32
 8003074:	0025      	movs	r5, r4
 8003076:	1a89      	subs	r1, r1, r2
 8003078:	0007      	movs	r7, r0
 800307a:	4088      	lsls	r0, r1
 800307c:	408d      	lsls	r5, r1
 800307e:	40d7      	lsrs	r7, r2
 8003080:	40d4      	lsrs	r4, r2
 8003082:	1e41      	subs	r1, r0, #1
 8003084:	4188      	sbcs	r0, r1
 8003086:	9b02      	ldr	r3, [sp, #8]
 8003088:	433d      	orrs	r5, r7
 800308a:	1b1b      	subs	r3, r3, r4
 800308c:	4305      	orrs	r5, r0
 800308e:	9302      	str	r3, [sp, #8]
 8003090:	4662      	mov	r2, ip
 8003092:	1b55      	subs	r5, r2, r5
 8003094:	45ac      	cmp	ip, r5
 8003096:	4192      	sbcs	r2, r2
 8003098:	9b02      	ldr	r3, [sp, #8]
 800309a:	4252      	negs	r2, r2
 800309c:	464f      	mov	r7, r9
 800309e:	1a9c      	subs	r4, r3, r2
 80030a0:	e5f6      	b.n	8002c90 <__aeabi_dsub+0xc4>
 80030a2:	2d00      	cmp	r5, #0
 80030a4:	d000      	beq.n	80030a8 <__aeabi_dsub+0x4dc>
 80030a6:	e0b7      	b.n	8003218 <__aeabi_dsub+0x64c>
 80030a8:	2a00      	cmp	r2, #0
 80030aa:	d100      	bne.n	80030ae <__aeabi_dsub+0x4e2>
 80030ac:	e0f0      	b.n	8003290 <__aeabi_dsub+0x6c4>
 80030ae:	2601      	movs	r6, #1
 80030b0:	400e      	ands	r6, r1
 80030b2:	4663      	mov	r3, ip
 80030b4:	9802      	ldr	r0, [sp, #8]
 80030b6:	08d9      	lsrs	r1, r3, #3
 80030b8:	0742      	lsls	r2, r0, #29
 80030ba:	430a      	orrs	r2, r1
 80030bc:	08c4      	lsrs	r4, r0, #3
 80030be:	e696      	b.n	8002dee <__aeabi_dsub+0x222>
 80030c0:	4c85      	ldr	r4, [pc, #532]	@ (80032d8 <__aeabi_dsub+0x70c>)
 80030c2:	1aff      	subs	r7, r7, r3
 80030c4:	4014      	ands	r4, r2
 80030c6:	0762      	lsls	r2, r4, #29
 80030c8:	08e4      	lsrs	r4, r4, #3
 80030ca:	e760      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 80030cc:	4981      	ldr	r1, [pc, #516]	@ (80032d4 <__aeabi_dsub+0x708>)
 80030ce:	428a      	cmp	r2, r1
 80030d0:	d100      	bne.n	80030d4 <__aeabi_dsub+0x508>
 80030d2:	e0c9      	b.n	8003268 <__aeabi_dsub+0x69c>
 80030d4:	4663      	mov	r3, ip
 80030d6:	18c1      	adds	r1, r0, r3
 80030d8:	4281      	cmp	r1, r0
 80030da:	4180      	sbcs	r0, r0
 80030dc:	9b02      	ldr	r3, [sp, #8]
 80030de:	4240      	negs	r0, r0
 80030e0:	18e3      	adds	r3, r4, r3
 80030e2:	181b      	adds	r3, r3, r0
 80030e4:	07dd      	lsls	r5, r3, #31
 80030e6:	085c      	lsrs	r4, r3, #1
 80030e8:	2307      	movs	r3, #7
 80030ea:	0849      	lsrs	r1, r1, #1
 80030ec:	430d      	orrs	r5, r1
 80030ee:	0017      	movs	r7, r2
 80030f0:	402b      	ands	r3, r5
 80030f2:	e710      	b.n	8002f16 <__aeabi_dsub+0x34a>
 80030f4:	4663      	mov	r3, ip
 80030f6:	1a1d      	subs	r5, r3, r0
 80030f8:	45ac      	cmp	ip, r5
 80030fa:	4192      	sbcs	r2, r2
 80030fc:	2601      	movs	r6, #1
 80030fe:	9b02      	ldr	r3, [sp, #8]
 8003100:	4252      	negs	r2, r2
 8003102:	1b1c      	subs	r4, r3, r4
 8003104:	4688      	mov	r8, r1
 8003106:	1aa4      	subs	r4, r4, r2
 8003108:	400e      	ands	r6, r1
 800310a:	e5c6      	b.n	8002c9a <__aeabi_dsub+0xce>
 800310c:	4663      	mov	r3, ip
 800310e:	18c5      	adds	r5, r0, r3
 8003110:	9b02      	ldr	r3, [sp, #8]
 8003112:	4285      	cmp	r5, r0
 8003114:	4180      	sbcs	r0, r0
 8003116:	469c      	mov	ip, r3
 8003118:	4240      	negs	r0, r0
 800311a:	4464      	add	r4, ip
 800311c:	1824      	adds	r4, r4, r0
 800311e:	2701      	movs	r7, #1
 8003120:	0223      	lsls	r3, r4, #8
 8003122:	d400      	bmi.n	8003126 <__aeabi_dsub+0x55a>
 8003124:	e6f5      	b.n	8002f12 <__aeabi_dsub+0x346>
 8003126:	2702      	movs	r7, #2
 8003128:	e641      	b.n	8002dae <__aeabi_dsub+0x1e2>
 800312a:	4663      	mov	r3, ip
 800312c:	1ac5      	subs	r5, r0, r3
 800312e:	42a8      	cmp	r0, r5
 8003130:	4180      	sbcs	r0, r0
 8003132:	9b02      	ldr	r3, [sp, #8]
 8003134:	4240      	negs	r0, r0
 8003136:	1ae4      	subs	r4, r4, r3
 8003138:	2701      	movs	r7, #1
 800313a:	1a24      	subs	r4, r4, r0
 800313c:	e5a8      	b.n	8002c90 <__aeabi_dsub+0xc4>
 800313e:	9d02      	ldr	r5, [sp, #8]
 8003140:	4652      	mov	r2, sl
 8003142:	002b      	movs	r3, r5
 8003144:	3a20      	subs	r2, #32
 8003146:	40d3      	lsrs	r3, r2
 8003148:	0019      	movs	r1, r3
 800314a:	4653      	mov	r3, sl
 800314c:	2b20      	cmp	r3, #32
 800314e:	d006      	beq.n	800315e <__aeabi_dsub+0x592>
 8003150:	2240      	movs	r2, #64	@ 0x40
 8003152:	1ad2      	subs	r2, r2, r3
 8003154:	002b      	movs	r3, r5
 8003156:	4093      	lsls	r3, r2
 8003158:	4662      	mov	r2, ip
 800315a:	431a      	orrs	r2, r3
 800315c:	4693      	mov	fp, r2
 800315e:	465d      	mov	r5, fp
 8003160:	1e6b      	subs	r3, r5, #1
 8003162:	419d      	sbcs	r5, r3
 8003164:	430d      	orrs	r5, r1
 8003166:	e615      	b.n	8002d94 <__aeabi_dsub+0x1c8>
 8003168:	0762      	lsls	r2, r4, #29
 800316a:	08c0      	lsrs	r0, r0, #3
 800316c:	4302      	orrs	r2, r0
 800316e:	08e4      	lsrs	r4, r4, #3
 8003170:	e70d      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 8003172:	0011      	movs	r1, r2
 8003174:	0027      	movs	r7, r4
 8003176:	3920      	subs	r1, #32
 8003178:	40cf      	lsrs	r7, r1
 800317a:	2a20      	cmp	r2, #32
 800317c:	d005      	beq.n	800318a <__aeabi_dsub+0x5be>
 800317e:	2140      	movs	r1, #64	@ 0x40
 8003180:	1a8a      	subs	r2, r1, r2
 8003182:	4094      	lsls	r4, r2
 8003184:	0025      	movs	r5, r4
 8003186:	4305      	orrs	r5, r0
 8003188:	9503      	str	r5, [sp, #12]
 800318a:	9d03      	ldr	r5, [sp, #12]
 800318c:	1e6a      	subs	r2, r5, #1
 800318e:	4195      	sbcs	r5, r2
 8003190:	433d      	orrs	r5, r7
 8003192:	e77d      	b.n	8003090 <__aeabi_dsub+0x4c4>
 8003194:	2a00      	cmp	r2, #0
 8003196:	d100      	bne.n	800319a <__aeabi_dsub+0x5ce>
 8003198:	e744      	b.n	8003024 <__aeabi_dsub+0x458>
 800319a:	2601      	movs	r6, #1
 800319c:	400e      	ands	r6, r1
 800319e:	4663      	mov	r3, ip
 80031a0:	08d9      	lsrs	r1, r3, #3
 80031a2:	9b02      	ldr	r3, [sp, #8]
 80031a4:	075a      	lsls	r2, r3, #29
 80031a6:	430a      	orrs	r2, r1
 80031a8:	08dc      	lsrs	r4, r3, #3
 80031aa:	e6f0      	b.n	8002f8e <__aeabi_dsub+0x3c2>
 80031ac:	2a00      	cmp	r2, #0
 80031ae:	d028      	beq.n	8003202 <__aeabi_dsub+0x636>
 80031b0:	4662      	mov	r2, ip
 80031b2:	9f02      	ldr	r7, [sp, #8]
 80031b4:	08c0      	lsrs	r0, r0, #3
 80031b6:	433a      	orrs	r2, r7
 80031b8:	d100      	bne.n	80031bc <__aeabi_dsub+0x5f0>
 80031ba:	e6dc      	b.n	8002f76 <__aeabi_dsub+0x3aa>
 80031bc:	0762      	lsls	r2, r4, #29
 80031be:	4310      	orrs	r0, r2
 80031c0:	2280      	movs	r2, #128	@ 0x80
 80031c2:	08e4      	lsrs	r4, r4, #3
 80031c4:	0312      	lsls	r2, r2, #12
 80031c6:	4214      	tst	r4, r2
 80031c8:	d009      	beq.n	80031de <__aeabi_dsub+0x612>
 80031ca:	08fd      	lsrs	r5, r7, #3
 80031cc:	4215      	tst	r5, r2
 80031ce:	d106      	bne.n	80031de <__aeabi_dsub+0x612>
 80031d0:	4663      	mov	r3, ip
 80031d2:	2601      	movs	r6, #1
 80031d4:	002c      	movs	r4, r5
 80031d6:	08d8      	lsrs	r0, r3, #3
 80031d8:	077b      	lsls	r3, r7, #29
 80031da:	4318      	orrs	r0, r3
 80031dc:	400e      	ands	r6, r1
 80031de:	0f42      	lsrs	r2, r0, #29
 80031e0:	00c0      	lsls	r0, r0, #3
 80031e2:	08c0      	lsrs	r0, r0, #3
 80031e4:	0752      	lsls	r2, r2, #29
 80031e6:	4302      	orrs	r2, r0
 80031e8:	e601      	b.n	8002dee <__aeabi_dsub+0x222>
 80031ea:	4663      	mov	r3, ip
 80031ec:	1a1d      	subs	r5, r3, r0
 80031ee:	45ac      	cmp	ip, r5
 80031f0:	4192      	sbcs	r2, r2
 80031f2:	9b02      	ldr	r3, [sp, #8]
 80031f4:	4252      	negs	r2, r2
 80031f6:	1b1c      	subs	r4, r3, r4
 80031f8:	000e      	movs	r6, r1
 80031fa:	4688      	mov	r8, r1
 80031fc:	2701      	movs	r7, #1
 80031fe:	1aa4      	subs	r4, r4, r2
 8003200:	e546      	b.n	8002c90 <__aeabi_dsub+0xc4>
 8003202:	4663      	mov	r3, ip
 8003204:	08d9      	lsrs	r1, r3, #3
 8003206:	9b02      	ldr	r3, [sp, #8]
 8003208:	075a      	lsls	r2, r3, #29
 800320a:	430a      	orrs	r2, r1
 800320c:	08dc      	lsrs	r4, r3, #3
 800320e:	e5ee      	b.n	8002dee <__aeabi_dsub+0x222>
 8003210:	4663      	mov	r3, ip
 8003212:	9c02      	ldr	r4, [sp, #8]
 8003214:	9303      	str	r3, [sp, #12]
 8003216:	e6c7      	b.n	8002fa8 <__aeabi_dsub+0x3dc>
 8003218:	08c0      	lsrs	r0, r0, #3
 800321a:	2a00      	cmp	r2, #0
 800321c:	d100      	bne.n	8003220 <__aeabi_dsub+0x654>
 800321e:	e6aa      	b.n	8002f76 <__aeabi_dsub+0x3aa>
 8003220:	0762      	lsls	r2, r4, #29
 8003222:	4310      	orrs	r0, r2
 8003224:	2280      	movs	r2, #128	@ 0x80
 8003226:	08e4      	lsrs	r4, r4, #3
 8003228:	0312      	lsls	r2, r2, #12
 800322a:	4214      	tst	r4, r2
 800322c:	d0d7      	beq.n	80031de <__aeabi_dsub+0x612>
 800322e:	9f02      	ldr	r7, [sp, #8]
 8003230:	08fd      	lsrs	r5, r7, #3
 8003232:	4215      	tst	r5, r2
 8003234:	d1d3      	bne.n	80031de <__aeabi_dsub+0x612>
 8003236:	4663      	mov	r3, ip
 8003238:	2601      	movs	r6, #1
 800323a:	08d8      	lsrs	r0, r3, #3
 800323c:	077b      	lsls	r3, r7, #29
 800323e:	002c      	movs	r4, r5
 8003240:	4318      	orrs	r0, r3
 8003242:	400e      	ands	r6, r1
 8003244:	e7cb      	b.n	80031de <__aeabi_dsub+0x612>
 8003246:	000a      	movs	r2, r1
 8003248:	0027      	movs	r7, r4
 800324a:	3a20      	subs	r2, #32
 800324c:	40d7      	lsrs	r7, r2
 800324e:	2920      	cmp	r1, #32
 8003250:	d005      	beq.n	800325e <__aeabi_dsub+0x692>
 8003252:	2240      	movs	r2, #64	@ 0x40
 8003254:	1a52      	subs	r2, r2, r1
 8003256:	4094      	lsls	r4, r2
 8003258:	0025      	movs	r5, r4
 800325a:	4305      	orrs	r5, r0
 800325c:	9503      	str	r5, [sp, #12]
 800325e:	9d03      	ldr	r5, [sp, #12]
 8003260:	1e6a      	subs	r2, r5, #1
 8003262:	4195      	sbcs	r5, r2
 8003264:	432f      	orrs	r7, r5
 8003266:	e610      	b.n	8002e8a <__aeabi_dsub+0x2be>
 8003268:	0014      	movs	r4, r2
 800326a:	2500      	movs	r5, #0
 800326c:	2200      	movs	r2, #0
 800326e:	e556      	b.n	8002d1e <__aeabi_dsub+0x152>
 8003270:	9b02      	ldr	r3, [sp, #8]
 8003272:	4460      	add	r0, ip
 8003274:	4699      	mov	r9, r3
 8003276:	4560      	cmp	r0, ip
 8003278:	4192      	sbcs	r2, r2
 800327a:	444c      	add	r4, r9
 800327c:	4252      	negs	r2, r2
 800327e:	0005      	movs	r5, r0
 8003280:	18a4      	adds	r4, r4, r2
 8003282:	e74c      	b.n	800311e <__aeabi_dsub+0x552>
 8003284:	001a      	movs	r2, r3
 8003286:	001c      	movs	r4, r3
 8003288:	432a      	orrs	r2, r5
 800328a:	d000      	beq.n	800328e <__aeabi_dsub+0x6c2>
 800328c:	e6b3      	b.n	8002ff6 <__aeabi_dsub+0x42a>
 800328e:	e6c9      	b.n	8003024 <__aeabi_dsub+0x458>
 8003290:	2480      	movs	r4, #128	@ 0x80
 8003292:	2600      	movs	r6, #0
 8003294:	0324      	lsls	r4, r4, #12
 8003296:	e5ae      	b.n	8002df6 <__aeabi_dsub+0x22a>
 8003298:	2120      	movs	r1, #32
 800329a:	2500      	movs	r5, #0
 800329c:	1a09      	subs	r1, r1, r0
 800329e:	e517      	b.n	8002cd0 <__aeabi_dsub+0x104>
 80032a0:	2200      	movs	r2, #0
 80032a2:	2500      	movs	r5, #0
 80032a4:	4c0b      	ldr	r4, [pc, #44]	@ (80032d4 <__aeabi_dsub+0x708>)
 80032a6:	e53a      	b.n	8002d1e <__aeabi_dsub+0x152>
 80032a8:	2d00      	cmp	r5, #0
 80032aa:	d100      	bne.n	80032ae <__aeabi_dsub+0x6e2>
 80032ac:	e5f6      	b.n	8002e9c <__aeabi_dsub+0x2d0>
 80032ae:	464b      	mov	r3, r9
 80032b0:	1bda      	subs	r2, r3, r7
 80032b2:	4692      	mov	sl, r2
 80032b4:	2f00      	cmp	r7, #0
 80032b6:	d100      	bne.n	80032ba <__aeabi_dsub+0x6ee>
 80032b8:	e66f      	b.n	8002f9a <__aeabi_dsub+0x3ce>
 80032ba:	2a38      	cmp	r2, #56	@ 0x38
 80032bc:	dc05      	bgt.n	80032ca <__aeabi_dsub+0x6fe>
 80032be:	2680      	movs	r6, #128	@ 0x80
 80032c0:	0436      	lsls	r6, r6, #16
 80032c2:	4334      	orrs	r4, r6
 80032c4:	4688      	mov	r8, r1
 80032c6:	000e      	movs	r6, r1
 80032c8:	e6d1      	b.n	800306e <__aeabi_dsub+0x4a2>
 80032ca:	4688      	mov	r8, r1
 80032cc:	000e      	movs	r6, r1
 80032ce:	2501      	movs	r5, #1
 80032d0:	e6de      	b.n	8003090 <__aeabi_dsub+0x4c4>
 80032d2:	46c0      	nop			@ (mov r8, r8)
 80032d4:	000007ff 	.word	0x000007ff
 80032d8:	ff7fffff 	.word	0xff7fffff
 80032dc:	000007fe 	.word	0x000007fe
 80032e0:	2d00      	cmp	r5, #0
 80032e2:	d100      	bne.n	80032e6 <__aeabi_dsub+0x71a>
 80032e4:	e668      	b.n	8002fb8 <__aeabi_dsub+0x3ec>
 80032e6:	464b      	mov	r3, r9
 80032e8:	1bd9      	subs	r1, r3, r7
 80032ea:	2f00      	cmp	r7, #0
 80032ec:	d101      	bne.n	80032f2 <__aeabi_dsub+0x726>
 80032ee:	468a      	mov	sl, r1
 80032f0:	e5a7      	b.n	8002e42 <__aeabi_dsub+0x276>
 80032f2:	2701      	movs	r7, #1
 80032f4:	2938      	cmp	r1, #56	@ 0x38
 80032f6:	dd00      	ble.n	80032fa <__aeabi_dsub+0x72e>
 80032f8:	e5c7      	b.n	8002e8a <__aeabi_dsub+0x2be>
 80032fa:	2280      	movs	r2, #128	@ 0x80
 80032fc:	0412      	lsls	r2, r2, #16
 80032fe:	4314      	orrs	r4, r2
 8003300:	e5af      	b.n	8002e62 <__aeabi_dsub+0x296>
 8003302:	46c0      	nop			@ (mov r8, r8)

08003304 <__aeabi_dcmpun>:
 8003304:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003306:	46c6      	mov	lr, r8
 8003308:	031e      	lsls	r6, r3, #12
 800330a:	0b36      	lsrs	r6, r6, #12
 800330c:	46b0      	mov	r8, r6
 800330e:	4e0d      	ldr	r6, [pc, #52]	@ (8003344 <__aeabi_dcmpun+0x40>)
 8003310:	030c      	lsls	r4, r1, #12
 8003312:	004d      	lsls	r5, r1, #1
 8003314:	005f      	lsls	r7, r3, #1
 8003316:	b500      	push	{lr}
 8003318:	0b24      	lsrs	r4, r4, #12
 800331a:	0d6d      	lsrs	r5, r5, #21
 800331c:	0d7f      	lsrs	r7, r7, #21
 800331e:	42b5      	cmp	r5, r6
 8003320:	d00b      	beq.n	800333a <__aeabi_dcmpun+0x36>
 8003322:	4908      	ldr	r1, [pc, #32]	@ (8003344 <__aeabi_dcmpun+0x40>)
 8003324:	2000      	movs	r0, #0
 8003326:	428f      	cmp	r7, r1
 8003328:	d104      	bne.n	8003334 <__aeabi_dcmpun+0x30>
 800332a:	4646      	mov	r6, r8
 800332c:	4316      	orrs	r6, r2
 800332e:	0030      	movs	r0, r6
 8003330:	1e43      	subs	r3, r0, #1
 8003332:	4198      	sbcs	r0, r3
 8003334:	bc80      	pop	{r7}
 8003336:	46b8      	mov	r8, r7
 8003338:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800333a:	4304      	orrs	r4, r0
 800333c:	2001      	movs	r0, #1
 800333e:	2c00      	cmp	r4, #0
 8003340:	d1f8      	bne.n	8003334 <__aeabi_dcmpun+0x30>
 8003342:	e7ee      	b.n	8003322 <__aeabi_dcmpun+0x1e>
 8003344:	000007ff 	.word	0x000007ff

08003348 <__aeabi_d2iz>:
 8003348:	000b      	movs	r3, r1
 800334a:	0002      	movs	r2, r0
 800334c:	b570      	push	{r4, r5, r6, lr}
 800334e:	4d16      	ldr	r5, [pc, #88]	@ (80033a8 <__aeabi_d2iz+0x60>)
 8003350:	030c      	lsls	r4, r1, #12
 8003352:	b082      	sub	sp, #8
 8003354:	0049      	lsls	r1, r1, #1
 8003356:	2000      	movs	r0, #0
 8003358:	9200      	str	r2, [sp, #0]
 800335a:	9301      	str	r3, [sp, #4]
 800335c:	0b24      	lsrs	r4, r4, #12
 800335e:	0d49      	lsrs	r1, r1, #21
 8003360:	0fde      	lsrs	r6, r3, #31
 8003362:	42a9      	cmp	r1, r5
 8003364:	dd04      	ble.n	8003370 <__aeabi_d2iz+0x28>
 8003366:	4811      	ldr	r0, [pc, #68]	@ (80033ac <__aeabi_d2iz+0x64>)
 8003368:	4281      	cmp	r1, r0
 800336a:	dd03      	ble.n	8003374 <__aeabi_d2iz+0x2c>
 800336c:	4b10      	ldr	r3, [pc, #64]	@ (80033b0 <__aeabi_d2iz+0x68>)
 800336e:	18f0      	adds	r0, r6, r3
 8003370:	b002      	add	sp, #8
 8003372:	bd70      	pop	{r4, r5, r6, pc}
 8003374:	2080      	movs	r0, #128	@ 0x80
 8003376:	0340      	lsls	r0, r0, #13
 8003378:	4320      	orrs	r0, r4
 800337a:	4c0e      	ldr	r4, [pc, #56]	@ (80033b4 <__aeabi_d2iz+0x6c>)
 800337c:	1a64      	subs	r4, r4, r1
 800337e:	2c1f      	cmp	r4, #31
 8003380:	dd08      	ble.n	8003394 <__aeabi_d2iz+0x4c>
 8003382:	4b0d      	ldr	r3, [pc, #52]	@ (80033b8 <__aeabi_d2iz+0x70>)
 8003384:	1a5b      	subs	r3, r3, r1
 8003386:	40d8      	lsrs	r0, r3
 8003388:	0003      	movs	r3, r0
 800338a:	4258      	negs	r0, r3
 800338c:	2e00      	cmp	r6, #0
 800338e:	d1ef      	bne.n	8003370 <__aeabi_d2iz+0x28>
 8003390:	0018      	movs	r0, r3
 8003392:	e7ed      	b.n	8003370 <__aeabi_d2iz+0x28>
 8003394:	4b09      	ldr	r3, [pc, #36]	@ (80033bc <__aeabi_d2iz+0x74>)
 8003396:	9a00      	ldr	r2, [sp, #0]
 8003398:	469c      	mov	ip, r3
 800339a:	0003      	movs	r3, r0
 800339c:	4461      	add	r1, ip
 800339e:	408b      	lsls	r3, r1
 80033a0:	40e2      	lsrs	r2, r4
 80033a2:	4313      	orrs	r3, r2
 80033a4:	e7f1      	b.n	800338a <__aeabi_d2iz+0x42>
 80033a6:	46c0      	nop			@ (mov r8, r8)
 80033a8:	000003fe 	.word	0x000003fe
 80033ac:	0000041d 	.word	0x0000041d
 80033b0:	7fffffff 	.word	0x7fffffff
 80033b4:	00000433 	.word	0x00000433
 80033b8:	00000413 	.word	0x00000413
 80033bc:	fffffbed 	.word	0xfffffbed

080033c0 <__aeabi_i2d>:
 80033c0:	b570      	push	{r4, r5, r6, lr}
 80033c2:	2800      	cmp	r0, #0
 80033c4:	d016      	beq.n	80033f4 <__aeabi_i2d+0x34>
 80033c6:	17c3      	asrs	r3, r0, #31
 80033c8:	18c5      	adds	r5, r0, r3
 80033ca:	405d      	eors	r5, r3
 80033cc:	0fc4      	lsrs	r4, r0, #31
 80033ce:	0028      	movs	r0, r5
 80033d0:	f000 f914 	bl	80035fc <__clzsi2>
 80033d4:	4b10      	ldr	r3, [pc, #64]	@ (8003418 <__aeabi_i2d+0x58>)
 80033d6:	1a1b      	subs	r3, r3, r0
 80033d8:	055b      	lsls	r3, r3, #21
 80033da:	0d5b      	lsrs	r3, r3, #21
 80033dc:	280a      	cmp	r0, #10
 80033de:	dc14      	bgt.n	800340a <__aeabi_i2d+0x4a>
 80033e0:	0002      	movs	r2, r0
 80033e2:	002e      	movs	r6, r5
 80033e4:	3215      	adds	r2, #21
 80033e6:	4096      	lsls	r6, r2
 80033e8:	220b      	movs	r2, #11
 80033ea:	1a12      	subs	r2, r2, r0
 80033ec:	40d5      	lsrs	r5, r2
 80033ee:	032d      	lsls	r5, r5, #12
 80033f0:	0b2d      	lsrs	r5, r5, #12
 80033f2:	e003      	b.n	80033fc <__aeabi_i2d+0x3c>
 80033f4:	2400      	movs	r4, #0
 80033f6:	2300      	movs	r3, #0
 80033f8:	2500      	movs	r5, #0
 80033fa:	2600      	movs	r6, #0
 80033fc:	051b      	lsls	r3, r3, #20
 80033fe:	432b      	orrs	r3, r5
 8003400:	07e4      	lsls	r4, r4, #31
 8003402:	4323      	orrs	r3, r4
 8003404:	0030      	movs	r0, r6
 8003406:	0019      	movs	r1, r3
 8003408:	bd70      	pop	{r4, r5, r6, pc}
 800340a:	380b      	subs	r0, #11
 800340c:	4085      	lsls	r5, r0
 800340e:	032d      	lsls	r5, r5, #12
 8003410:	2600      	movs	r6, #0
 8003412:	0b2d      	lsrs	r5, r5, #12
 8003414:	e7f2      	b.n	80033fc <__aeabi_i2d+0x3c>
 8003416:	46c0      	nop			@ (mov r8, r8)
 8003418:	0000041e 	.word	0x0000041e

0800341c <__aeabi_ui2d>:
 800341c:	b510      	push	{r4, lr}
 800341e:	1e04      	subs	r4, r0, #0
 8003420:	d010      	beq.n	8003444 <__aeabi_ui2d+0x28>
 8003422:	f000 f8eb 	bl	80035fc <__clzsi2>
 8003426:	4b0e      	ldr	r3, [pc, #56]	@ (8003460 <__aeabi_ui2d+0x44>)
 8003428:	1a1b      	subs	r3, r3, r0
 800342a:	055b      	lsls	r3, r3, #21
 800342c:	0d5b      	lsrs	r3, r3, #21
 800342e:	280a      	cmp	r0, #10
 8003430:	dc0f      	bgt.n	8003452 <__aeabi_ui2d+0x36>
 8003432:	220b      	movs	r2, #11
 8003434:	0021      	movs	r1, r4
 8003436:	1a12      	subs	r2, r2, r0
 8003438:	40d1      	lsrs	r1, r2
 800343a:	3015      	adds	r0, #21
 800343c:	030a      	lsls	r2, r1, #12
 800343e:	4084      	lsls	r4, r0
 8003440:	0b12      	lsrs	r2, r2, #12
 8003442:	e001      	b.n	8003448 <__aeabi_ui2d+0x2c>
 8003444:	2300      	movs	r3, #0
 8003446:	2200      	movs	r2, #0
 8003448:	051b      	lsls	r3, r3, #20
 800344a:	4313      	orrs	r3, r2
 800344c:	0020      	movs	r0, r4
 800344e:	0019      	movs	r1, r3
 8003450:	bd10      	pop	{r4, pc}
 8003452:	0022      	movs	r2, r4
 8003454:	380b      	subs	r0, #11
 8003456:	4082      	lsls	r2, r0
 8003458:	0312      	lsls	r2, r2, #12
 800345a:	2400      	movs	r4, #0
 800345c:	0b12      	lsrs	r2, r2, #12
 800345e:	e7f3      	b.n	8003448 <__aeabi_ui2d+0x2c>
 8003460:	0000041e 	.word	0x0000041e

08003464 <__aeabi_f2d>:
 8003464:	b570      	push	{r4, r5, r6, lr}
 8003466:	0242      	lsls	r2, r0, #9
 8003468:	0043      	lsls	r3, r0, #1
 800346a:	0fc4      	lsrs	r4, r0, #31
 800346c:	20fe      	movs	r0, #254	@ 0xfe
 800346e:	0e1b      	lsrs	r3, r3, #24
 8003470:	1c59      	adds	r1, r3, #1
 8003472:	0a55      	lsrs	r5, r2, #9
 8003474:	4208      	tst	r0, r1
 8003476:	d00c      	beq.n	8003492 <__aeabi_f2d+0x2e>
 8003478:	21e0      	movs	r1, #224	@ 0xe0
 800347a:	0089      	lsls	r1, r1, #2
 800347c:	468c      	mov	ip, r1
 800347e:	076d      	lsls	r5, r5, #29
 8003480:	0b12      	lsrs	r2, r2, #12
 8003482:	4463      	add	r3, ip
 8003484:	051b      	lsls	r3, r3, #20
 8003486:	4313      	orrs	r3, r2
 8003488:	07e4      	lsls	r4, r4, #31
 800348a:	4323      	orrs	r3, r4
 800348c:	0028      	movs	r0, r5
 800348e:	0019      	movs	r1, r3
 8003490:	bd70      	pop	{r4, r5, r6, pc}
 8003492:	2b00      	cmp	r3, #0
 8003494:	d114      	bne.n	80034c0 <__aeabi_f2d+0x5c>
 8003496:	2d00      	cmp	r5, #0
 8003498:	d01b      	beq.n	80034d2 <__aeabi_f2d+0x6e>
 800349a:	0028      	movs	r0, r5
 800349c:	f000 f8ae 	bl	80035fc <__clzsi2>
 80034a0:	280a      	cmp	r0, #10
 80034a2:	dc1c      	bgt.n	80034de <__aeabi_f2d+0x7a>
 80034a4:	230b      	movs	r3, #11
 80034a6:	002a      	movs	r2, r5
 80034a8:	1a1b      	subs	r3, r3, r0
 80034aa:	40da      	lsrs	r2, r3
 80034ac:	0003      	movs	r3, r0
 80034ae:	3315      	adds	r3, #21
 80034b0:	409d      	lsls	r5, r3
 80034b2:	4b0e      	ldr	r3, [pc, #56]	@ (80034ec <__aeabi_f2d+0x88>)
 80034b4:	0312      	lsls	r2, r2, #12
 80034b6:	1a1b      	subs	r3, r3, r0
 80034b8:	055b      	lsls	r3, r3, #21
 80034ba:	0b12      	lsrs	r2, r2, #12
 80034bc:	0d5b      	lsrs	r3, r3, #21
 80034be:	e7e1      	b.n	8003484 <__aeabi_f2d+0x20>
 80034c0:	2d00      	cmp	r5, #0
 80034c2:	d009      	beq.n	80034d8 <__aeabi_f2d+0x74>
 80034c4:	0b13      	lsrs	r3, r2, #12
 80034c6:	2280      	movs	r2, #128	@ 0x80
 80034c8:	0312      	lsls	r2, r2, #12
 80034ca:	431a      	orrs	r2, r3
 80034cc:	076d      	lsls	r5, r5, #29
 80034ce:	4b08      	ldr	r3, [pc, #32]	@ (80034f0 <__aeabi_f2d+0x8c>)
 80034d0:	e7d8      	b.n	8003484 <__aeabi_f2d+0x20>
 80034d2:	2300      	movs	r3, #0
 80034d4:	2200      	movs	r2, #0
 80034d6:	e7d5      	b.n	8003484 <__aeabi_f2d+0x20>
 80034d8:	2200      	movs	r2, #0
 80034da:	4b05      	ldr	r3, [pc, #20]	@ (80034f0 <__aeabi_f2d+0x8c>)
 80034dc:	e7d2      	b.n	8003484 <__aeabi_f2d+0x20>
 80034de:	0003      	movs	r3, r0
 80034e0:	002a      	movs	r2, r5
 80034e2:	3b0b      	subs	r3, #11
 80034e4:	409a      	lsls	r2, r3
 80034e6:	2500      	movs	r5, #0
 80034e8:	e7e3      	b.n	80034b2 <__aeabi_f2d+0x4e>
 80034ea:	46c0      	nop			@ (mov r8, r8)
 80034ec:	00000389 	.word	0x00000389
 80034f0:	000007ff 	.word	0x000007ff

080034f4 <__aeabi_d2f>:
 80034f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80034f6:	004b      	lsls	r3, r1, #1
 80034f8:	030f      	lsls	r7, r1, #12
 80034fa:	0d5b      	lsrs	r3, r3, #21
 80034fc:	4c3b      	ldr	r4, [pc, #236]	@ (80035ec <__aeabi_d2f+0xf8>)
 80034fe:	0f45      	lsrs	r5, r0, #29
 8003500:	b083      	sub	sp, #12
 8003502:	0a7f      	lsrs	r7, r7, #9
 8003504:	1c5e      	adds	r6, r3, #1
 8003506:	432f      	orrs	r7, r5
 8003508:	9000      	str	r0, [sp, #0]
 800350a:	9101      	str	r1, [sp, #4]
 800350c:	0fca      	lsrs	r2, r1, #31
 800350e:	00c5      	lsls	r5, r0, #3
 8003510:	4226      	tst	r6, r4
 8003512:	d00b      	beq.n	800352c <__aeabi_d2f+0x38>
 8003514:	4936      	ldr	r1, [pc, #216]	@ (80035f0 <__aeabi_d2f+0xfc>)
 8003516:	185c      	adds	r4, r3, r1
 8003518:	2cfe      	cmp	r4, #254	@ 0xfe
 800351a:	dd13      	ble.n	8003544 <__aeabi_d2f+0x50>
 800351c:	20ff      	movs	r0, #255	@ 0xff
 800351e:	2300      	movs	r3, #0
 8003520:	05c0      	lsls	r0, r0, #23
 8003522:	4318      	orrs	r0, r3
 8003524:	07d2      	lsls	r2, r2, #31
 8003526:	4310      	orrs	r0, r2
 8003528:	b003      	add	sp, #12
 800352a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800352c:	2b00      	cmp	r3, #0
 800352e:	d102      	bne.n	8003536 <__aeabi_d2f+0x42>
 8003530:	2000      	movs	r0, #0
 8003532:	2300      	movs	r3, #0
 8003534:	e7f4      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003536:	433d      	orrs	r5, r7
 8003538:	d0f0      	beq.n	800351c <__aeabi_d2f+0x28>
 800353a:	2380      	movs	r3, #128	@ 0x80
 800353c:	03db      	lsls	r3, r3, #15
 800353e:	20ff      	movs	r0, #255	@ 0xff
 8003540:	433b      	orrs	r3, r7
 8003542:	e7ed      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003544:	2c00      	cmp	r4, #0
 8003546:	dd14      	ble.n	8003572 <__aeabi_d2f+0x7e>
 8003548:	9b00      	ldr	r3, [sp, #0]
 800354a:	00ff      	lsls	r7, r7, #3
 800354c:	019b      	lsls	r3, r3, #6
 800354e:	1e58      	subs	r0, r3, #1
 8003550:	4183      	sbcs	r3, r0
 8003552:	0f69      	lsrs	r1, r5, #29
 8003554:	433b      	orrs	r3, r7
 8003556:	430b      	orrs	r3, r1
 8003558:	0759      	lsls	r1, r3, #29
 800355a:	d041      	beq.n	80035e0 <__aeabi_d2f+0xec>
 800355c:	210f      	movs	r1, #15
 800355e:	4019      	ands	r1, r3
 8003560:	2904      	cmp	r1, #4
 8003562:	d028      	beq.n	80035b6 <__aeabi_d2f+0xc2>
 8003564:	3304      	adds	r3, #4
 8003566:	0159      	lsls	r1, r3, #5
 8003568:	d525      	bpl.n	80035b6 <__aeabi_d2f+0xc2>
 800356a:	3401      	adds	r4, #1
 800356c:	2300      	movs	r3, #0
 800356e:	b2e0      	uxtb	r0, r4
 8003570:	e7d6      	b.n	8003520 <__aeabi_d2f+0x2c>
 8003572:	0021      	movs	r1, r4
 8003574:	3117      	adds	r1, #23
 8003576:	dbdb      	blt.n	8003530 <__aeabi_d2f+0x3c>
 8003578:	2180      	movs	r1, #128	@ 0x80
 800357a:	201e      	movs	r0, #30
 800357c:	0409      	lsls	r1, r1, #16
 800357e:	4339      	orrs	r1, r7
 8003580:	1b00      	subs	r0, r0, r4
 8003582:	281f      	cmp	r0, #31
 8003584:	dd1b      	ble.n	80035be <__aeabi_d2f+0xca>
 8003586:	2602      	movs	r6, #2
 8003588:	4276      	negs	r6, r6
 800358a:	1b34      	subs	r4, r6, r4
 800358c:	000e      	movs	r6, r1
 800358e:	40e6      	lsrs	r6, r4
 8003590:	0034      	movs	r4, r6
 8003592:	2820      	cmp	r0, #32
 8003594:	d004      	beq.n	80035a0 <__aeabi_d2f+0xac>
 8003596:	4817      	ldr	r0, [pc, #92]	@ (80035f4 <__aeabi_d2f+0x100>)
 8003598:	4684      	mov	ip, r0
 800359a:	4463      	add	r3, ip
 800359c:	4099      	lsls	r1, r3
 800359e:	430d      	orrs	r5, r1
 80035a0:	002b      	movs	r3, r5
 80035a2:	1e59      	subs	r1, r3, #1
 80035a4:	418b      	sbcs	r3, r1
 80035a6:	4323      	orrs	r3, r4
 80035a8:	0759      	lsls	r1, r3, #29
 80035aa:	d015      	beq.n	80035d8 <__aeabi_d2f+0xe4>
 80035ac:	210f      	movs	r1, #15
 80035ae:	2400      	movs	r4, #0
 80035b0:	4019      	ands	r1, r3
 80035b2:	2904      	cmp	r1, #4
 80035b4:	d117      	bne.n	80035e6 <__aeabi_d2f+0xf2>
 80035b6:	019b      	lsls	r3, r3, #6
 80035b8:	0a5b      	lsrs	r3, r3, #9
 80035ba:	b2e0      	uxtb	r0, r4
 80035bc:	e7b0      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035be:	4c0e      	ldr	r4, [pc, #56]	@ (80035f8 <__aeabi_d2f+0x104>)
 80035c0:	191c      	adds	r4, r3, r4
 80035c2:	002b      	movs	r3, r5
 80035c4:	40a5      	lsls	r5, r4
 80035c6:	40c3      	lsrs	r3, r0
 80035c8:	40a1      	lsls	r1, r4
 80035ca:	1e68      	subs	r0, r5, #1
 80035cc:	4185      	sbcs	r5, r0
 80035ce:	4329      	orrs	r1, r5
 80035d0:	430b      	orrs	r3, r1
 80035d2:	2400      	movs	r4, #0
 80035d4:	0759      	lsls	r1, r3, #29
 80035d6:	d1c1      	bne.n	800355c <__aeabi_d2f+0x68>
 80035d8:	019b      	lsls	r3, r3, #6
 80035da:	2000      	movs	r0, #0
 80035dc:	0a5b      	lsrs	r3, r3, #9
 80035de:	e79f      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035e0:	08db      	lsrs	r3, r3, #3
 80035e2:	b2e0      	uxtb	r0, r4
 80035e4:	e79c      	b.n	8003520 <__aeabi_d2f+0x2c>
 80035e6:	3304      	adds	r3, #4
 80035e8:	e7e5      	b.n	80035b6 <__aeabi_d2f+0xc2>
 80035ea:	46c0      	nop			@ (mov r8, r8)
 80035ec:	000007fe 	.word	0x000007fe
 80035f0:	fffffc80 	.word	0xfffffc80
 80035f4:	fffffca2 	.word	0xfffffca2
 80035f8:	fffffc82 	.word	0xfffffc82

080035fc <__clzsi2>:
 80035fc:	211c      	movs	r1, #28
 80035fe:	2301      	movs	r3, #1
 8003600:	041b      	lsls	r3, r3, #16
 8003602:	4298      	cmp	r0, r3
 8003604:	d301      	bcc.n	800360a <__clzsi2+0xe>
 8003606:	0c00      	lsrs	r0, r0, #16
 8003608:	3910      	subs	r1, #16
 800360a:	0a1b      	lsrs	r3, r3, #8
 800360c:	4298      	cmp	r0, r3
 800360e:	d301      	bcc.n	8003614 <__clzsi2+0x18>
 8003610:	0a00      	lsrs	r0, r0, #8
 8003612:	3908      	subs	r1, #8
 8003614:	091b      	lsrs	r3, r3, #4
 8003616:	4298      	cmp	r0, r3
 8003618:	d301      	bcc.n	800361e <__clzsi2+0x22>
 800361a:	0900      	lsrs	r0, r0, #4
 800361c:	3904      	subs	r1, #4
 800361e:	a202      	add	r2, pc, #8	@ (adr r2, 8003628 <__clzsi2+0x2c>)
 8003620:	5c10      	ldrb	r0, [r2, r0]
 8003622:	1840      	adds	r0, r0, r1
 8003624:	4770      	bx	lr
 8003626:	46c0      	nop			@ (mov r8, r8)
 8003628:	02020304 	.word	0x02020304
 800362c:	01010101 	.word	0x01010101
	...

08003638 <__clzdi2>:
 8003638:	b510      	push	{r4, lr}
 800363a:	2900      	cmp	r1, #0
 800363c:	d103      	bne.n	8003646 <__clzdi2+0xe>
 800363e:	f7ff ffdd 	bl	80035fc <__clzsi2>
 8003642:	3020      	adds	r0, #32
 8003644:	e002      	b.n	800364c <__clzdi2+0x14>
 8003646:	0008      	movs	r0, r1
 8003648:	f7ff ffd8 	bl	80035fc <__clzsi2>
 800364c:	bd10      	pop	{r4, pc}
 800364e:	46c0      	nop			@ (mov r8, r8)

08003650 <WriteUint8ArrayEeprom>:
#include "../Inc/EEProm.h"

uint32_t WriteUint8ArrayEeprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 8003650:	b590      	push	{r4, r7, lr}
 8003652:	b087      	sub	sp, #28
 8003654:	af00      	add	r7, sp, #0
 8003656:	60f8      	str	r0, [r7, #12]
 8003658:	60b9      	str	r1, [r7, #8]
 800365a:	1dbb      	adds	r3, r7, #6
 800365c:	801a      	strh	r2, [r3, #0]
    static uint32_t addr;
    addr = startAddr;
 800365e:	4b17      	ldr	r3, [pc, #92]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 8003660:	68fa      	ldr	r2, [r7, #12]
 8003662:	601a      	str	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 8003664:	f009 fbfa 	bl	800ce5c <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i++)
 8003668:	2316      	movs	r3, #22
 800366a:	18fb      	adds	r3, r7, r3
 800366c:	2200      	movs	r2, #0
 800366e:	801a      	strh	r2, [r3, #0]
 8003670:	e015      	b.n	800369e <WriteUint8ArrayEeprom+0x4e>
    {
        HAL_FLASHEx_DATAEEPROM_Program(FLASH_TYPEPROGRAMDATA_BYTE, addr, data[i]);
 8003672:	4b12      	ldr	r3, [pc, #72]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 8003674:	6819      	ldr	r1, [r3, #0]
 8003676:	2416      	movs	r4, #22
 8003678:	193b      	adds	r3, r7, r4
 800367a:	881b      	ldrh	r3, [r3, #0]
 800367c:	68ba      	ldr	r2, [r7, #8]
 800367e:	18d3      	adds	r3, r2, r3
 8003680:	781b      	ldrb	r3, [r3, #0]
 8003682:	001a      	movs	r2, r3
 8003684:	2000      	movs	r0, #0
 8003686:	f009 fc51 	bl	800cf2c <HAL_FLASHEx_DATAEEPROM_Program>
        addr++;
 800368a:	4b0c      	ldr	r3, [pc, #48]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 800368c:	681b      	ldr	r3, [r3, #0]
 800368e:	1c5a      	adds	r2, r3, #1
 8003690:	4b0a      	ldr	r3, [pc, #40]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 8003692:	601a      	str	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003694:	193b      	adds	r3, r7, r4
 8003696:	881a      	ldrh	r2, [r3, #0]
 8003698:	193b      	adds	r3, r7, r4
 800369a:	3201      	adds	r2, #1
 800369c:	801a      	strh	r2, [r3, #0]
 800369e:	2316      	movs	r3, #22
 80036a0:	18fa      	adds	r2, r7, r3
 80036a2:	1dbb      	adds	r3, r7, #6
 80036a4:	8812      	ldrh	r2, [r2, #0]
 80036a6:	881b      	ldrh	r3, [r3, #0]
 80036a8:	429a      	cmp	r2, r3
 80036aa:	d3e2      	bcc.n	8003672 <WriteUint8ArrayEeprom+0x22>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 80036ac:	f009 fc04 	bl	800ceb8 <HAL_FLASHEx_DATAEEPROM_Lock>
    return addr;
 80036b0:	4b02      	ldr	r3, [pc, #8]	@ (80036bc <WriteUint8ArrayEeprom+0x6c>)
 80036b2:	681b      	ldr	r3, [r3, #0]
}
 80036b4:	0018      	movs	r0, r3
 80036b6:	46bd      	mov	sp, r7
 80036b8:	b007      	add	sp, #28
 80036ba:	bd90      	pop	{r4, r7, pc}
 80036bc:	2000043c 	.word	0x2000043c

080036c0 <WriteUint8ArrayEepromSafe>:

void WriteUint8ArrayEepromSafe(uint32_t startAddr, uint8_t data[], uint16_t size, uint16_t maxSize)
{
 80036c0:	b580      	push	{r7, lr}
 80036c2:	b084      	sub	sp, #16
 80036c4:	af00      	add	r7, sp, #0
 80036c6:	60f8      	str	r0, [r7, #12]
 80036c8:	60b9      	str	r1, [r7, #8]
 80036ca:	0019      	movs	r1, r3
 80036cc:	1dbb      	adds	r3, r7, #6
 80036ce:	801a      	strh	r2, [r3, #0]
 80036d0:	1d3b      	adds	r3, r7, #4
 80036d2:	1c0a      	adds	r2, r1, #0
 80036d4:	801a      	strh	r2, [r3, #0]
    if (size <= maxSize)
 80036d6:	1dba      	adds	r2, r7, #6
 80036d8:	1d3b      	adds	r3, r7, #4
 80036da:	8812      	ldrh	r2, [r2, #0]
 80036dc:	881b      	ldrh	r3, [r3, #0]
 80036de:	429a      	cmp	r2, r3
 80036e0:	d806      	bhi.n	80036f0 <WriteUint8ArrayEepromSafe+0x30>
    {
        WriteUint8ArrayEeprom(startAddr, data, size);
 80036e2:	1dbb      	adds	r3, r7, #6
 80036e4:	881a      	ldrh	r2, [r3, #0]
 80036e6:	68b9      	ldr	r1, [r7, #8]
 80036e8:	68fb      	ldr	r3, [r7, #12]
 80036ea:	0018      	movs	r0, r3
 80036ec:	f7ff ffb0 	bl	8003650 <WriteUint8ArrayEeprom>
    }
}
 80036f0:	46c0      	nop			@ (mov r8, r8)
 80036f2:	46bd      	mov	sp, r7
 80036f4:	b004      	add	sp, #16
 80036f6:	bd80      	pop	{r7, pc}

080036f8 <ReadUint8ArrayEEprom>:

void ReadUint8ArrayEEprom(uint32_t startAddr, uint8_t data[], uint16_t size)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b086      	sub	sp, #24
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	60f8      	str	r0, [r7, #12]
 8003700:	60b9      	str	r1, [r7, #8]
 8003702:	1dbb      	adds	r3, r7, #6
 8003704:	801a      	strh	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003706:	2316      	movs	r3, #22
 8003708:	18fb      	adds	r3, r7, r3
 800370a:	2200      	movs	r2, #0
 800370c:	801a      	strh	r2, [r3, #0]
 800370e:	e010      	b.n	8003732 <ReadUint8ArrayEEprom+0x3a>
    {
        data[i] = *(uint8_t*)(startAddr + i);
 8003710:	2016      	movs	r0, #22
 8003712:	183b      	adds	r3, r7, r0
 8003714:	881a      	ldrh	r2, [r3, #0]
 8003716:	68fb      	ldr	r3, [r7, #12]
 8003718:	18d3      	adds	r3, r2, r3
 800371a:	0019      	movs	r1, r3
 800371c:	183b      	adds	r3, r7, r0
 800371e:	881b      	ldrh	r3, [r3, #0]
 8003720:	68ba      	ldr	r2, [r7, #8]
 8003722:	18d3      	adds	r3, r2, r3
 8003724:	780a      	ldrb	r2, [r1, #0]
 8003726:	701a      	strb	r2, [r3, #0]
    for (uint16_t i = 0; i < size; i++)
 8003728:	183b      	adds	r3, r7, r0
 800372a:	881a      	ldrh	r2, [r3, #0]
 800372c:	183b      	adds	r3, r7, r0
 800372e:	3201      	adds	r2, #1
 8003730:	801a      	strh	r2, [r3, #0]
 8003732:	2316      	movs	r3, #22
 8003734:	18fa      	adds	r2, r7, r3
 8003736:	1dbb      	adds	r3, r7, #6
 8003738:	8812      	ldrh	r2, [r2, #0]
 800373a:	881b      	ldrh	r3, [r3, #0]
 800373c:	429a      	cmp	r2, r3
 800373e:	d3e7      	bcc.n	8003710 <ReadUint8ArrayEEprom+0x18>
    }
}
 8003740:	46c0      	nop			@ (mov r8, r8)
 8003742:	46c0      	nop			@ (mov r8, r8)
 8003744:	46bd      	mov	sp, r7
 8003746:	b006      	add	sp, #24
 8003748:	bd80      	pop	{r7, pc}

0800374a <ClearEEprom>:

void ClearEEprom(uint32_t startAddr, uint16_t size)
{
 800374a:	b590      	push	{r4, r7, lr}
 800374c:	b085      	sub	sp, #20
 800374e:	af00      	add	r7, sp, #0
 8003750:	6078      	str	r0, [r7, #4]
 8003752:	000a      	movs	r2, r1
 8003754:	1cbb      	adds	r3, r7, #2
 8003756:	801a      	strh	r2, [r3, #0]
    HAL_FLASHEx_DATAEEPROM_Unlock();
 8003758:	f009 fb80 	bl	800ce5c <HAL_FLASHEx_DATAEEPROM_Unlock>
    for (uint16_t i = 0; i < size; i+=4)
 800375c:	230e      	movs	r3, #14
 800375e:	18fb      	adds	r3, r7, r3
 8003760:	2200      	movs	r2, #0
 8003762:	801a      	strh	r2, [r3, #0]
 8003764:	e00c      	b.n	8003780 <ClearEEprom+0x36>
    {
        HAL_FLASHEx_DATAEEPROM_Erase(startAddr+i);
 8003766:	240e      	movs	r4, #14
 8003768:	193b      	adds	r3, r7, r4
 800376a:	881a      	ldrh	r2, [r3, #0]
 800376c:	687b      	ldr	r3, [r7, #4]
 800376e:	18d3      	adds	r3, r2, r3
 8003770:	0018      	movs	r0, r3
 8003772:	f009 fbaf 	bl	800ced4 <HAL_FLASHEx_DATAEEPROM_Erase>
    for (uint16_t i = 0; i < size; i+=4)
 8003776:	193b      	adds	r3, r7, r4
 8003778:	193a      	adds	r2, r7, r4
 800377a:	8812      	ldrh	r2, [r2, #0]
 800377c:	3204      	adds	r2, #4
 800377e:	801a      	strh	r2, [r3, #0]
 8003780:	230e      	movs	r3, #14
 8003782:	18fa      	adds	r2, r7, r3
 8003784:	1cbb      	adds	r3, r7, #2
 8003786:	8812      	ldrh	r2, [r2, #0]
 8003788:	881b      	ldrh	r3, [r3, #0]
 800378a:	429a      	cmp	r2, r3
 800378c:	d3eb      	bcc.n	8003766 <ClearEEprom+0x1c>
    }
    HAL_FLASHEx_DATAEEPROM_Lock();
 800378e:	f009 fb93 	bl	800ceb8 <HAL_FLASHEx_DATAEEPROM_Lock>
}
 8003792:	46c0      	nop			@ (mov r8, r8)
 8003794:	46bd      	mov	sp, r7
 8003796:	b005      	add	sp, #20
 8003798:	bd90      	pop	{r4, r7, pc}
	...

0800379c <forceNTPupdate>:
typedef struct {
    char* ATCommand;
    bool* doneFlag;
} ATCommandsParameters;

void forceNTPupdate() {
 800379c:	b580      	push	{r7, lr}
 800379e:	af00      	add	r7, sp, #0
  ESPNTPTimeStamp = 0;
 80037a0:	4b02      	ldr	r3, [pc, #8]	@ (80037ac <forceNTPupdate+0x10>)
 80037a2:	2200      	movs	r2, #0
 80037a4:	601a      	str	r2, [r3, #0]
}
 80037a6:	46c0      	nop			@ (mov r8, r8)
 80037a8:	46bd      	mov	sp, r7
 80037aa:	bd80      	pop	{r7, pc}
 80037ac:	2000098c 	.word	0x2000098c

080037b0 <setCharges>:
void setCharges(){
 80037b0:	b580      	push	{r7, lr}
 80037b2:	af00      	add	r7, sp, #0
  batteryCharge = ReadBatteryVoltage();
 80037b4:	f002 faf2 	bl	8005d9c <ReadBatteryVoltage>
 80037b8:	1c02      	adds	r2, r0, #0
 80037ba:	4b05      	ldr	r3, [pc, #20]	@ (80037d0 <setCharges+0x20>)
 80037bc:	601a      	str	r2, [r3, #0]
  solarCharge = ReadSolarVoltage();
 80037be:	f002 fb4f 	bl	8005e60 <ReadSolarVoltage>
 80037c2:	1c02      	adds	r2, r0, #0
 80037c4:	4b03      	ldr	r3, [pc, #12]	@ (80037d4 <setCharges+0x24>)
 80037c6:	601a      	str	r2, [r3, #0]
}
 80037c8:	46c0      	nop			@ (mov r8, r8)
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	46c0      	nop			@ (mov r8, r8)
 80037d0:	2000056c 	.word	0x2000056c
 80037d4:	20000570 	.word	0x20000570

080037d8 <checkEEprom>:
bool checkEEprom(){
 80037d8:	b580      	push	{r7, lr}
 80037da:	b082      	sub	sp, #8
 80037dc:	af00      	add	r7, sp, #0
  static uint8_t tempConfig[IdSize];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 80037de:	4b15      	ldr	r3, [pc, #84]	@ (8003834 <checkEEprom+0x5c>)
 80037e0:	4815      	ldr	r0, [pc, #84]	@ (8003838 <checkEEprom+0x60>)
 80037e2:	220c      	movs	r2, #12
 80037e4:	0019      	movs	r1, r3
 80037e6:	f7ff ff87 	bl	80036f8 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 80037ea:	1dfb      	adds	r3, r7, #7
 80037ec:	2200      	movs	r2, #0
 80037ee:	701a      	strb	r2, [r3, #0]
 80037f0:	e00e      	b.n	8003810 <checkEEprom+0x38>
    configSum += tempConfig[i];
 80037f2:	1dfb      	adds	r3, r7, #7
 80037f4:	781b      	ldrb	r3, [r3, #0]
 80037f6:	4a0f      	ldr	r2, [pc, #60]	@ (8003834 <checkEEprom+0x5c>)
 80037f8:	5cd3      	ldrb	r3, [r2, r3]
 80037fa:	001a      	movs	r2, r3
 80037fc:	4b0f      	ldr	r3, [pc, #60]	@ (800383c <checkEEprom+0x64>)
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	18d2      	adds	r2, r2, r3
 8003802:	4b0e      	ldr	r3, [pc, #56]	@ (800383c <checkEEprom+0x64>)
 8003804:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 8003806:	1dfb      	adds	r3, r7, #7
 8003808:	781a      	ldrb	r2, [r3, #0]
 800380a:	1dfb      	adds	r3, r7, #7
 800380c:	3201      	adds	r2, #1
 800380e:	701a      	strb	r2, [r3, #0]
 8003810:	1dfb      	adds	r3, r7, #7
 8003812:	781b      	ldrb	r3, [r3, #0]
 8003814:	2b0b      	cmp	r3, #11
 8003816:	d9ec      	bls.n	80037f2 <checkEEprom+0x1a>
  }
  test = (configSum == 0);
 8003818:	4b08      	ldr	r3, [pc, #32]	@ (800383c <checkEEprom+0x64>)
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	425a      	negs	r2, r3
 800381e:	4153      	adcs	r3, r2
 8003820:	b2da      	uxtb	r2, r3
 8003822:	4b07      	ldr	r3, [pc, #28]	@ (8003840 <checkEEprom+0x68>)
 8003824:	701a      	strb	r2, [r3, #0]
  return test;
 8003826:	4b06      	ldr	r3, [pc, #24]	@ (8003840 <checkEEprom+0x68>)
 8003828:	781b      	ldrb	r3, [r3, #0]
}
 800382a:	0018      	movs	r0, r3
 800382c:	46bd      	mov	sp, r7
 800382e:	b002      	add	sp, #8
 8003830:	bd80      	pop	{r7, pc}
 8003832:	46c0      	nop			@ (mov r8, r8)
 8003834:	2000099c 	.word	0x2000099c
 8003838:	0808000c 	.word	0x0808000c
 800383c:	200009a8 	.word	0x200009a8
 8003840:	200009ac 	.word	0x200009ac

08003844 <checkName>:
bool checkName(){
 8003844:	b580      	push	{r7, lr}
 8003846:	b082      	sub	sp, #8
 8003848:	af00      	add	r7, sp, #0
  static uint8_t nameConfig[CustomNameMaxLength];
  static uint32_t configSum = 0;
  static bool test;
  ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 800384a:	4b15      	ldr	r3, [pc, #84]	@ (80038a0 <checkName+0x5c>)
 800384c:	4815      	ldr	r0, [pc, #84]	@ (80038a4 <checkName+0x60>)
 800384e:	221e      	movs	r2, #30
 8003850:	0019      	movs	r1, r3
 8003852:	f7ff ff51 	bl	80036f8 <ReadUint8ArrayEEprom>
  for(uint8_t i = 0; i < IdSize; i++){
 8003856:	1dfb      	adds	r3, r7, #7
 8003858:	2200      	movs	r2, #0
 800385a:	701a      	strb	r2, [r3, #0]
 800385c:	e00e      	b.n	800387c <checkName+0x38>
    configSum += nameConfig[i];
 800385e:	1dfb      	adds	r3, r7, #7
 8003860:	781b      	ldrb	r3, [r3, #0]
 8003862:	4a0f      	ldr	r2, [pc, #60]	@ (80038a0 <checkName+0x5c>)
 8003864:	5cd3      	ldrb	r3, [r2, r3]
 8003866:	001a      	movs	r2, r3
 8003868:	4b0f      	ldr	r3, [pc, #60]	@ (80038a8 <checkName+0x64>)
 800386a:	681b      	ldr	r3, [r3, #0]
 800386c:	18d2      	adds	r2, r2, r3
 800386e:	4b0e      	ldr	r3, [pc, #56]	@ (80038a8 <checkName+0x64>)
 8003870:	601a      	str	r2, [r3, #0]
  for(uint8_t i = 0; i < IdSize; i++){
 8003872:	1dfb      	adds	r3, r7, #7
 8003874:	781a      	ldrb	r2, [r3, #0]
 8003876:	1dfb      	adds	r3, r7, #7
 8003878:	3201      	adds	r2, #1
 800387a:	701a      	strb	r2, [r3, #0]
 800387c:	1dfb      	adds	r3, r7, #7
 800387e:	781b      	ldrb	r3, [r3, #0]
 8003880:	2b0b      	cmp	r3, #11
 8003882:	d9ec      	bls.n	800385e <checkName+0x1a>
  }
  test = (configSum != 0);
 8003884:	4b08      	ldr	r3, [pc, #32]	@ (80038a8 <checkName+0x64>)
 8003886:	681b      	ldr	r3, [r3, #0]
 8003888:	1e5a      	subs	r2, r3, #1
 800388a:	4193      	sbcs	r3, r2
 800388c:	b2da      	uxtb	r2, r3
 800388e:	4b07      	ldr	r3, [pc, #28]	@ (80038ac <checkName+0x68>)
 8003890:	701a      	strb	r2, [r3, #0]
  return test;
 8003892:	4b06      	ldr	r3, [pc, #24]	@ (80038ac <checkName+0x68>)
 8003894:	781b      	ldrb	r3, [r3, #0]
}
 8003896:	0018      	movs	r0, r3
 8003898:	46bd      	mov	sp, r7
 800389a:	b002      	add	sp, #8
 800389c:	bd80      	pop	{r7, pc}
 800389e:	46c0      	nop			@ (mov r8, r8)
 80038a0:	200009b0 	.word	0x200009b0
 80038a4:	08080090 	.word	0x08080090
 80038a8:	200009d0 	.word	0x200009d0
 80038ac:	200009d4 	.word	0x200009d4

080038b0 <ESP_GetHT>:
void ESP_GetHT(float temp, float humid){
 80038b0:	b580      	push	{r7, lr}
 80038b2:	b082      	sub	sp, #8
 80038b4:	af00      	add	r7, sp, #0
 80038b6:	6078      	str	r0, [r7, #4]
 80038b8:	6039      	str	r1, [r7, #0]
  Temperature = temp;
 80038ba:	4b05      	ldr	r3, [pc, #20]	@ (80038d0 <ESP_GetHT+0x20>)
 80038bc:	687a      	ldr	r2, [r7, #4]
 80038be:	601a      	str	r2, [r3, #0]
  Humidity = humid;
 80038c0:	4b04      	ldr	r3, [pc, #16]	@ (80038d4 <ESP_GetHT+0x24>)
 80038c2:	683a      	ldr	r2, [r7, #0]
 80038c4:	601a      	str	r2, [r3, #0]
}
 80038c6:	46c0      	nop			@ (mov r8, r8)
 80038c8:	46bd      	mov	sp, r7
 80038ca:	b002      	add	sp, #8
 80038cc:	bd80      	pop	{r7, pc}
 80038ce:	46c0      	nop			@ (mov r8, r8)
 80038d0:	20000564 	.word	0x20000564
 80038d4:	20000568 	.word	0x20000568

080038d8 <setMeasurement>:
void setMeasurement(float temp, float humid, uint16_t voc){
 80038d8:	b580      	push	{r7, lr}
 80038da:	b084      	sub	sp, #16
 80038dc:	af00      	add	r7, sp, #0
 80038de:	60f8      	str	r0, [r7, #12]
 80038e0:	60b9      	str	r1, [r7, #8]
 80038e2:	1dbb      	adds	r3, r7, #6
 80038e4:	801a      	strh	r2, [r3, #0]
  Temperature = temp;
 80038e6:	4b07      	ldr	r3, [pc, #28]	@ (8003904 <setMeasurement+0x2c>)
 80038e8:	68fa      	ldr	r2, [r7, #12]
 80038ea:	601a      	str	r2, [r3, #0]
  Humidity = humid;
 80038ec:	4b06      	ldr	r3, [pc, #24]	@ (8003908 <setMeasurement+0x30>)
 80038ee:	68ba      	ldr	r2, [r7, #8]
 80038f0:	601a      	str	r2, [r3, #0]
  VOCIndex = voc;
 80038f2:	4b06      	ldr	r3, [pc, #24]	@ (800390c <setMeasurement+0x34>)
 80038f4:	1dba      	adds	r2, r7, #6
 80038f6:	8812      	ldrh	r2, [r2, #0]
 80038f8:	801a      	strh	r2, [r3, #0]
}
 80038fa:	46c0      	nop			@ (mov r8, r8)
 80038fc:	46bd      	mov	sp, r7
 80038fe:	b004      	add	sp, #16
 8003900:	bd80      	pop	{r7, pc}
 8003902:	46c0      	nop			@ (mov r8, r8)
 8003904:	20000564 	.word	0x20000564
 8003908:	20000568 	.word	0x20000568
 800390c:	20000574 	.word	0x20000574

08003910 <setMic>:
void setMic(float dB){
 8003910:	b580      	push	{r7, lr}
 8003912:	b082      	sub	sp, #8
 8003914:	af00      	add	r7, sp, #0
 8003916:	6078      	str	r0, [r7, #4]
  dBC = dB;
 8003918:	4b03      	ldr	r3, [pc, #12]	@ (8003928 <setMic+0x18>)
 800391a:	687a      	ldr	r2, [r7, #4]
 800391c:	601a      	str	r2, [r3, #0]
}
 800391e:	46c0      	nop			@ (mov r8, r8)
 8003920:	46bd      	mov	sp, r7
 8003922:	b002      	add	sp, #8
 8003924:	bd80      	pop	{r7, pc}
 8003926:	46c0      	nop			@ (mov r8, r8)
 8003928:	20000578 	.word	0x20000578

0800392c <SetConfigMode>:

void SetConfigMode(){
 800392c:	b580      	push	{r7, lr}
 800392e:	af00      	add	r7, sp, #0
  ReconfigSet = true;
 8003930:	4b02      	ldr	r3, [pc, #8]	@ (800393c <SetConfigMode+0x10>)
 8003932:	2201      	movs	r2, #1
 8003934:	701a      	strb	r2, [r3, #0]
}
 8003936:	46c0      	nop			@ (mov r8, r8)
 8003938:	46bd      	mov	sp, r7
 800393a:	bd80      	pop	{r7, pc}
 800393c:	2000054b 	.word	0x2000054b

08003940 <ESP_GetUID>:
static ESP_Test TestState = ESP_TEST_INIT;
//static ATCommandsParameters ATCommands[ESP_AT_COMMANDS_COUNT];

//TODO: Add de-init if ESP is off. Otherwise there is going to be 3.3V on the ESP.

void ESP_GetUID(){
 8003940:	b580      	push	{r7, lr}
 8003942:	af00      	add	r7, sp, #0
  uid[0] = HAL_GetUIDw0();
 8003944:	f008 fab4 	bl	800beb0 <HAL_GetUIDw0>
 8003948:	0002      	movs	r2, r0
 800394a:	4b07      	ldr	r3, [pc, #28]	@ (8003968 <ESP_GetUID+0x28>)
 800394c:	601a      	str	r2, [r3, #0]
  uid[1] = HAL_GetUIDw1();
 800394e:	f008 fab9 	bl	800bec4 <HAL_GetUIDw1>
 8003952:	0002      	movs	r2, r0
 8003954:	4b04      	ldr	r3, [pc, #16]	@ (8003968 <ESP_GetUID+0x28>)
 8003956:	605a      	str	r2, [r3, #4]
  uid[2] = HAL_GetUIDw2();
 8003958:	f008 fabe 	bl	800bed8 <HAL_GetUIDw2>
 800395c:	0002      	movs	r2, r0
 800395e:	4b02      	ldr	r3, [pc, #8]	@ (8003968 <ESP_GetUID+0x28>)
 8003960:	609a      	str	r2, [r3, #8]
}
 8003962:	46c0      	nop			@ (mov r8, r8)
 8003964:	46bd      	mov	sp, r7
 8003966:	bd80      	pop	{r7, pc}
 8003968:	20000550 	.word	0x20000550

0800396c <ESP_Init>:
void ESP_Init(UART_HandleTypeDef* espUart) {
 800396c:	b580      	push	{r7, lr}
 800396e:	b082      	sub	sp, #8
 8003970:	af00      	add	r7, sp, #0
 8003972:	6078      	str	r0, [r7, #4]
  EspUart = espUart;
 8003974:	4b08      	ldr	r3, [pc, #32]	@ (8003998 <ESP_Init+0x2c>)
 8003976:	687a      	ldr	r2, [r7, #4]
 8003978:	601a      	str	r2, [r3, #0]
  EspState = ESP_STATE_INIT;
 800397a:	4b08      	ldr	r3, [pc, #32]	@ (800399c <ESP_Init+0x30>)
 800397c:	2202      	movs	r2, #2
 800397e:	701a      	strb	r2, [r3, #0]
  ESP_GetUID();
 8003980:	f7ff ffde 	bl	8003940 <ESP_GetUID>
  beurs = checkEEprom();
 8003984:	f7ff ff28 	bl	80037d8 <checkEEprom>
 8003988:	0003      	movs	r3, r0
 800398a:	001a      	movs	r2, r3
 800398c:	4b04      	ldr	r3, [pc, #16]	@ (80039a0 <ESP_Init+0x34>)
 800398e:	701a      	strb	r2, [r3, #0]
}
 8003990:	46c0      	nop			@ (mov r8, r8)
 8003992:	46bd      	mov	sp, r7
 8003994:	b002      	add	sp, #8
 8003996:	bd80      	pop	{r7, pc}
 8003998:	20000440 	.word	0x20000440
 800399c:	20000028 	.word	0x20000028
 80039a0:	2000054e 	.word	0x2000054e

080039a4 <ESP_Send>:

static bool ESP_Send(uint8_t* command, uint16_t length) {
 80039a4:	b5b0      	push	{r4, r5, r7, lr}
 80039a6:	b084      	sub	sp, #16
 80039a8:	af00      	add	r7, sp, #0
 80039aa:	6078      	str	r0, [r7, #4]
 80039ac:	000a      	movs	r2, r1
 80039ae:	1cbb      	adds	r3, r7, #2
 80039b0:	801a      	strh	r2, [r3, #0]
#ifdef LONGMESSAGES
  printf("ESP_Send: %s", command);
 80039b2:	687a      	ldr	r2, [r7, #4]
 80039b4:	4b10      	ldr	r3, [pc, #64]	@ (80039f8 <ESP_Send+0x54>)
 80039b6:	0011      	movs	r1, r2
 80039b8:	0018      	movs	r0, r3
 80039ba:	f018 fcc9 	bl	801c350 <iprintf>
#else
  Debug("ESP_Send: %s", command);
#endif
  HAL_StatusTypeDef status = HAL_UART_Transmit_DMA(EspUart, command, length);
 80039be:	4b0f      	ldr	r3, [pc, #60]	@ (80039fc <ESP_Send+0x58>)
 80039c0:	6818      	ldr	r0, [r3, #0]
 80039c2:	250f      	movs	r5, #15
 80039c4:	197c      	adds	r4, r7, r5
 80039c6:	1cbb      	adds	r3, r7, #2
 80039c8:	881a      	ldrh	r2, [r3, #0]
 80039ca:	687b      	ldr	r3, [r7, #4]
 80039cc:	0019      	movs	r1, r3
 80039ce:	f00f ff45 	bl	801385c <HAL_UART_Transmit_DMA>
 80039d2:	0003      	movs	r3, r0
 80039d4:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 80039d6:	197b      	adds	r3, r7, r5
 80039d8:	781b      	ldrb	r3, [r3, #0]
 80039da:	2b00      	cmp	r3, #0
 80039dc:	d007      	beq.n	80039ee <ESP_Send+0x4a>
    Error("Error in HAL_UART_Transmit_DMA");
 80039de:	4a08      	ldr	r2, [pc, #32]	@ (8003a00 <ESP_Send+0x5c>)
 80039e0:	4b08      	ldr	r3, [pc, #32]	@ (8003a04 <ESP_Send+0x60>)
 80039e2:	0019      	movs	r1, r3
 80039e4:	2001      	movs	r0, #1
 80039e6:	f007 fe99 	bl	800b71c <CreateLine>
    return false;
 80039ea:	2300      	movs	r3, #0
 80039ec:	e000      	b.n	80039f0 <ESP_Send+0x4c>
  }
  return true;
 80039ee:	2301      	movs	r3, #1
}
 80039f0:	0018      	movs	r0, r3
 80039f2:	46bd      	mov	sp, r7
 80039f4:	b004      	add	sp, #16
 80039f6:	bdb0      	pop	{r4, r5, r7, pc}
 80039f8:	0801f550 	.word	0x0801f550
 80039fc:	20000440 	.word	0x20000440
 8003a00:	0801f560 	.word	0x0801f560
 8003a04:	0801f580 	.word	0x0801f580

08003a08 <ESP_Receive>:
static bool ESP_Receive(uint8_t* reply, uint16_t length) {
 8003a08:	b5b0      	push	{r4, r5, r7, lr}
 8003a0a:	b084      	sub	sp, #16
 8003a0c:	af00      	add	r7, sp, #0
 8003a0e:	6078      	str	r0, [r7, #4]
 8003a10:	000a      	movs	r2, r1
 8003a12:	1cbb      	adds	r3, r7, #2
 8003a14:	801a      	strh	r2, [r3, #0]
//  HAL_UART_DMAStop(EspUart);
  RxComplete = false;
 8003a16:	4b13      	ldr	r3, [pc, #76]	@ (8003a64 <ESP_Receive+0x5c>)
 8003a18:	2200      	movs	r2, #0
 8003a1a:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef status = HAL_UART_Receive_DMA(EspUart, reply, length);
 8003a1c:	4b12      	ldr	r3, [pc, #72]	@ (8003a68 <ESP_Receive+0x60>)
 8003a1e:	6818      	ldr	r0, [r3, #0]
 8003a20:	250f      	movs	r5, #15
 8003a22:	197c      	adds	r4, r7, r5
 8003a24:	1cbb      	adds	r3, r7, #2
 8003a26:	881a      	ldrh	r2, [r3, #0]
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	0019      	movs	r1, r3
 8003a2c:	f00f ffa6 	bl	801397c <HAL_UART_Receive_DMA>
 8003a30:	0003      	movs	r3, r0
 8003a32:	7023      	strb	r3, [r4, #0]
  if (status != HAL_OK) {
 8003a34:	197b      	adds	r3, r7, r5
 8003a36:	781b      	ldrb	r3, [r3, #0]
 8003a38:	2b00      	cmp	r3, #0
 8003a3a:	d00d      	beq.n	8003a58 <ESP_Receive+0x50>
    Error("Error in HAL_UART_Receive_DMA. errorcode: %d", EspUart->ErrorCode);
 8003a3c:	4b0a      	ldr	r3, [pc, #40]	@ (8003a68 <ESP_Receive+0x60>)
 8003a3e:	681b      	ldr	r3, [r3, #0]
 8003a40:	2284      	movs	r2, #132	@ 0x84
 8003a42:	589b      	ldr	r3, [r3, r2]
 8003a44:	4a09      	ldr	r2, [pc, #36]	@ (8003a6c <ESP_Receive+0x64>)
 8003a46:	490a      	ldr	r1, [pc, #40]	@ (8003a70 <ESP_Receive+0x68>)
 8003a48:	2001      	movs	r0, #1
 8003a4a:	f007 fe67 	bl	800b71c <CreateLine>
    RxComplete = true;
 8003a4e:	4b05      	ldr	r3, [pc, #20]	@ (8003a64 <ESP_Receive+0x5c>)
 8003a50:	2201      	movs	r2, #1
 8003a52:	701a      	strb	r2, [r3, #0]
    return false;
 8003a54:	2300      	movs	r3, #0
 8003a56:	e000      	b.n	8003a5a <ESP_Receive+0x52>
  }
  return true;
 8003a58:	2301      	movs	r3, #1
}
 8003a5a:	0018      	movs	r0, r3
 8003a5c:	46bd      	mov	sp, r7
 8003a5e:	b004      	add	sp, #16
 8003a60:	bdb0      	pop	{r4, r5, r7, pc}
 8003a62:	46c0      	nop			@ (mov r8, r8)
 8003a64:	20000444 	.word	0x20000444
 8003a68:	20000440 	.word	0x20000440
 8003a6c:	0801f584 	.word	0x0801f584
 8003a70:	0801f580 	.word	0x0801f580

08003a74 <HAL_UART_ErrorCallback>:
//    Debug("RxComplete");
//  }
//}

// Callback for UART error
void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart) {
 8003a74:	b580      	push	{r7, lr}
 8003a76:	b082      	sub	sp, #8
 8003a78:	af00      	add	r7, sp, #0
 8003a7a:	6078      	str	r0, [r7, #4]
  if (huart == EspUart) {
 8003a7c:	4b08      	ldr	r3, [pc, #32]	@ (8003aa0 <HAL_UART_ErrorCallback+0x2c>)
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	687a      	ldr	r2, [r7, #4]
 8003a82:	429a      	cmp	r2, r3
 8003a84:	d107      	bne.n	8003a96 <HAL_UART_ErrorCallback+0x22>
    // Handle error
    //EspState = ESP_STATE_ERROR;
    Debug("A callback error has occurred, errorcode %d", huart->ErrorCode);
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2284      	movs	r2, #132	@ 0x84
 8003a8a:	589b      	ldr	r3, [r3, r2]
 8003a8c:	4a05      	ldr	r2, [pc, #20]	@ (8003aa4 <HAL_UART_ErrorCallback+0x30>)
 8003a8e:	4906      	ldr	r1, [pc, #24]	@ (8003aa8 <HAL_UART_ErrorCallback+0x34>)
 8003a90:	2003      	movs	r0, #3
 8003a92:	f007 fe43 	bl	800b71c <CreateLine>
  }
}
 8003a96:	46c0      	nop			@ (mov r8, r8)
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	b002      	add	sp, #8
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	46c0      	nop			@ (mov r8, r8)
 8003aa0:	20000440 	.word	0x20000440
 8003aa4:	0801f5b4 	.word	0x0801f5b4
 8003aa8:	0801f5e0 	.word	0x0801f5e0

08003aac <uint8ArrayToString>:
void uint8ArrayToString(char *destination, uint8_t data[])
{
 8003aac:	b580      	push	{r7, lr}
 8003aae:	b084      	sub	sp, #16
 8003ab0:	af00      	add	r7, sp, #0
 8003ab2:	6078      	str	r0, [r7, #4]
 8003ab4:	6039      	str	r1, [r7, #0]
  for (int i = 0; i < 12; i++)
 8003ab6:	2300      	movs	r3, #0
 8003ab8:	60fb      	str	r3, [r7, #12]
 8003aba:	e010      	b.n	8003ade <uint8ArrayToString+0x32>
  {
    sprintf(&destination[i * 2], "%02x", data[i]);
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	005b      	lsls	r3, r3, #1
 8003ac0:	001a      	movs	r2, r3
 8003ac2:	687b      	ldr	r3, [r7, #4]
 8003ac4:	1898      	adds	r0, r3, r2
 8003ac6:	68fb      	ldr	r3, [r7, #12]
 8003ac8:	683a      	ldr	r2, [r7, #0]
 8003aca:	18d3      	adds	r3, r2, r3
 8003acc:	781b      	ldrb	r3, [r3, #0]
 8003ace:	001a      	movs	r2, r3
 8003ad0:	4b07      	ldr	r3, [pc, #28]	@ (8003af0 <uint8ArrayToString+0x44>)
 8003ad2:	0019      	movs	r1, r3
 8003ad4:	f018 fc4c 	bl	801c370 <siprintf>
  for (int i = 0; i < 12; i++)
 8003ad8:	68fb      	ldr	r3, [r7, #12]
 8003ada:	3301      	adds	r3, #1
 8003adc:	60fb      	str	r3, [r7, #12]
 8003ade:	68fb      	ldr	r3, [r7, #12]
 8003ae0:	2b0b      	cmp	r3, #11
 8003ae2:	ddeb      	ble.n	8003abc <uint8ArrayToString+0x10>
  }
}
 8003ae4:	46c0      	nop			@ (mov r8, r8)
 8003ae6:	46c0      	nop			@ (mov r8, r8)
 8003ae8:	46bd      	mov	sp, r7
 8003aea:	b004      	add	sp, #16
 8003aec:	bd80      	pop	{r7, pc}
 8003aee:	46c0      	nop			@ (mov r8, r8)
 8003af0:	0801f5e4 	.word	0x0801f5e4

08003af4 <CreateMessage>:
uint16_t CreateMessage(bool onBeurs){
 8003af4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003af6:	b089      	sub	sp, #36	@ 0x24
 8003af8:	af04      	add	r7, sp, #16
 8003afa:	0002      	movs	r2, r0
 8003afc:	1dfb      	adds	r3, r7, #7
 8003afe:	701a      	strb	r2, [r3, #0]
  static uint8_t soundConfig[IdSize];
  static uint8_t vocConfig[IdSize];
  static uint8_t batteryConfig[IdSize];
  static uint8_t solarConfig[IdSize];
  static uint8_t nameConfig[CustomNameMaxLength];
  ReadUint8ArrayEEprom(TempConfigAddr, tempConfig, IdSize);
 8003b00:	4bb9      	ldr	r3, [pc, #740]	@ (8003de8 <CreateMessage+0x2f4>)
 8003b02:	48ba      	ldr	r0, [pc, #744]	@ (8003dec <CreateMessage+0x2f8>)
 8003b04:	220c      	movs	r2, #12
 8003b06:	0019      	movs	r1, r3
 8003b08:	f7ff fdf6 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(HumidConfigAddr, humidConfig, IdSize);
 8003b0c:	4bb8      	ldr	r3, [pc, #736]	@ (8003df0 <CreateMessage+0x2fc>)
 8003b0e:	48b9      	ldr	r0, [pc, #740]	@ (8003df4 <CreateMessage+0x300>)
 8003b10:	220c      	movs	r2, #12
 8003b12:	0019      	movs	r1, r3
 8003b14:	f7ff fdf0 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(dBcConfigAddr, soundConfig, IdSize);
 8003b18:	4bb7      	ldr	r3, [pc, #732]	@ (8003df8 <CreateMessage+0x304>)
 8003b1a:	48b8      	ldr	r0, [pc, #736]	@ (8003dfc <CreateMessage+0x308>)
 8003b1c:	220c      	movs	r2, #12
 8003b1e:	0019      	movs	r1, r3
 8003b20:	f7ff fdea 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(VocIndexConfigAddr, vocConfig, IdSize);
 8003b24:	4bb6      	ldr	r3, [pc, #728]	@ (8003e00 <CreateMessage+0x30c>)
 8003b26:	48b7      	ldr	r0, [pc, #732]	@ (8003e04 <CreateMessage+0x310>)
 8003b28:	220c      	movs	r2, #12
 8003b2a:	0019      	movs	r1, r3
 8003b2c:	f7ff fde4 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(BatVoltConfigAddr, batteryConfig, IdSize);
 8003b30:	4bb5      	ldr	r3, [pc, #724]	@ (8003e08 <CreateMessage+0x314>)
 8003b32:	48b6      	ldr	r0, [pc, #728]	@ (8003e0c <CreateMessage+0x318>)
 8003b34:	220c      	movs	r2, #12
 8003b36:	0019      	movs	r1, r3
 8003b38:	f7ff fdde 	bl	80036f8 <ReadUint8ArrayEEprom>
  ReadUint8ArrayEEprom(SolVoltConfigAddr, solarConfig, IdSize);
 8003b3c:	4bb4      	ldr	r3, [pc, #720]	@ (8003e10 <CreateMessage+0x31c>)
 8003b3e:	48b5      	ldr	r0, [pc, #724]	@ (8003e14 <CreateMessage+0x320>)
 8003b40:	220c      	movs	r2, #12
 8003b42:	0019      	movs	r1, r3
 8003b44:	f7ff fdd8 	bl	80036f8 <ReadUint8ArrayEEprom>
  if(checkName()){
 8003b48:	f7ff fe7c 	bl	8003844 <checkName>
 8003b4c:	1e03      	subs	r3, r0, #0
 8003b4e:	d006      	beq.n	8003b5e <CreateMessage+0x6a>
    ReadUint8ArrayEEprom(CustomNameConfigAddr, nameConfig, CustomNameMaxLength);
 8003b50:	4bb1      	ldr	r3, [pc, #708]	@ (8003e18 <CreateMessage+0x324>)
 8003b52:	48b2      	ldr	r0, [pc, #712]	@ (8003e1c <CreateMessage+0x328>)
 8003b54:	221e      	movs	r2, #30
 8003b56:	0019      	movs	r1, r3
 8003b58:	f7ff fdce 	bl	80036f8 <ReadUint8ArrayEEprom>
 8003b5c:	e005      	b.n	8003b6a <CreateMessage+0x76>
  }
  else{
    strncpy((char*)nameConfig, user, 5);
 8003b5e:	4bae      	ldr	r3, [pc, #696]	@ (8003e18 <CreateMessage+0x324>)
 8003b60:	4aaf      	ldr	r2, [pc, #700]	@ (8003e20 <CreateMessage+0x32c>)
 8003b62:	6811      	ldr	r1, [r2, #0]
 8003b64:	6019      	str	r1, [r3, #0]
 8003b66:	7912      	ldrb	r2, [r2, #4]
 8003b68:	711a      	strb	r2, [r3, #4]
  }
  //(char*)nameConfig
  //get name etc from EEprom
  setCharges();
 8003b6a:	f7ff fe21 	bl	80037b0 <setCharges>

  memset(message, '\0', 1024);
 8003b6e:	2380      	movs	r3, #128	@ 0x80
 8003b70:	00da      	lsls	r2, r3, #3
 8003b72:	4bac      	ldr	r3, [pc, #688]	@ (8003e24 <CreateMessage+0x330>)
 8003b74:	2100      	movs	r1, #0
 8003b76:	0018      	movs	r0, r3
 8003b78:	f018 fc9e 	bl	801c4b8 <memset>
  uint16_t index = 0;
 8003b7c:	260e      	movs	r6, #14
 8003b7e:	19bb      	adds	r3, r7, r6
 8003b80:	2200      	movs	r2, #0
 8003b82:	801a      	strh	r2, [r3, #0]
  sprintf(&message[index], "[");
 8003b84:	19bb      	adds	r3, r7, r6
 8003b86:	881a      	ldrh	r2, [r3, #0]
 8003b88:	4ba6      	ldr	r3, [pc, #664]	@ (8003e24 <CreateMessage+0x330>)
 8003b8a:	18d3      	adds	r3, r2, r3
 8003b8c:	4aa6      	ldr	r2, [pc, #664]	@ (8003e28 <CreateMessage+0x334>)
 8003b8e:	0011      	movs	r1, r2
 8003b90:	0018      	movs	r0, r3
 8003b92:	f018 fbed 	bl	801c370 <siprintf>
  index = strlen(message);
 8003b96:	4ba3      	ldr	r3, [pc, #652]	@ (8003e24 <CreateMessage+0x330>)
 8003b98:	0018      	movs	r0, r3
 8003b9a:	f7fc fae7 	bl	800016c <strlen>
 8003b9e:	0002      	movs	r2, r0
 8003ba0:	19bb      	adds	r3, r7, r6
 8003ba2:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, tempConfig);
 8003ba4:	4a90      	ldr	r2, [pc, #576]	@ (8003de8 <CreateMessage+0x2f4>)
 8003ba6:	4ba1      	ldr	r3, [pc, #644]	@ (8003e2c <CreateMessage+0x338>)
 8003ba8:	0011      	movs	r1, r2
 8003baa:	0018      	movs	r0, r3
 8003bac:	f7ff ff7e 	bl	8003aac <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"temp\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"C\"},", uid[2], (char*)nameConfig, Buffer, Temperature);
 8003bb0:	19bb      	adds	r3, r7, r6
 8003bb2:	881a      	ldrh	r2, [r3, #0]
 8003bb4:	4b9b      	ldr	r3, [pc, #620]	@ (8003e24 <CreateMessage+0x330>)
 8003bb6:	18d4      	adds	r4, r2, r3
 8003bb8:	4b9d      	ldr	r3, [pc, #628]	@ (8003e30 <CreateMessage+0x33c>)
 8003bba:	689d      	ldr	r5, [r3, #8]
 8003bbc:	4b9d      	ldr	r3, [pc, #628]	@ (8003e34 <CreateMessage+0x340>)
 8003bbe:	681b      	ldr	r3, [r3, #0]
 8003bc0:	1c18      	adds	r0, r3, #0
 8003bc2:	f7ff fc4f 	bl	8003464 <__aeabi_f2d>
 8003bc6:	0002      	movs	r2, r0
 8003bc8:	000b      	movs	r3, r1
 8003bca:	4893      	ldr	r0, [pc, #588]	@ (8003e18 <CreateMessage+0x324>)
 8003bcc:	499a      	ldr	r1, [pc, #616]	@ (8003e38 <CreateMessage+0x344>)
 8003bce:	9202      	str	r2, [sp, #8]
 8003bd0:	9303      	str	r3, [sp, #12]
 8003bd2:	4b96      	ldr	r3, [pc, #600]	@ (8003e2c <CreateMessage+0x338>)
 8003bd4:	9300      	str	r3, [sp, #0]
 8003bd6:	0003      	movs	r3, r0
 8003bd8:	002a      	movs	r2, r5
 8003bda:	0020      	movs	r0, r4
 8003bdc:	f018 fbc8 	bl	801c370 <siprintf>
  index = strlen(message);
 8003be0:	4b90      	ldr	r3, [pc, #576]	@ (8003e24 <CreateMessage+0x330>)
 8003be2:	0018      	movs	r0, r3
 8003be4:	f7fc fac2 	bl	800016c <strlen>
 8003be8:	0002      	movs	r2, r0
 8003bea:	19bb      	adds	r3, r7, r6
 8003bec:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, humidConfig);
 8003bee:	4a80      	ldr	r2, [pc, #512]	@ (8003df0 <CreateMessage+0x2fc>)
 8003bf0:	4b8e      	ldr	r3, [pc, #568]	@ (8003e2c <CreateMessage+0x338>)
 8003bf2:	0011      	movs	r1, r2
 8003bf4:	0018      	movs	r0, r3
 8003bf6:	f7ff ff59 	bl	8003aac <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"humid\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.1f, \"unit\":\"%%\"},", uid[2], (char*)nameConfig, Buffer, Humidity);
 8003bfa:	19bb      	adds	r3, r7, r6
 8003bfc:	881a      	ldrh	r2, [r3, #0]
 8003bfe:	4b89      	ldr	r3, [pc, #548]	@ (8003e24 <CreateMessage+0x330>)
 8003c00:	18d4      	adds	r4, r2, r3
 8003c02:	4b8b      	ldr	r3, [pc, #556]	@ (8003e30 <CreateMessage+0x33c>)
 8003c04:	689d      	ldr	r5, [r3, #8]
 8003c06:	4b8d      	ldr	r3, [pc, #564]	@ (8003e3c <CreateMessage+0x348>)
 8003c08:	681b      	ldr	r3, [r3, #0]
 8003c0a:	1c18      	adds	r0, r3, #0
 8003c0c:	f7ff fc2a 	bl	8003464 <__aeabi_f2d>
 8003c10:	0002      	movs	r2, r0
 8003c12:	000b      	movs	r3, r1
 8003c14:	4880      	ldr	r0, [pc, #512]	@ (8003e18 <CreateMessage+0x324>)
 8003c16:	498a      	ldr	r1, [pc, #552]	@ (8003e40 <CreateMessage+0x34c>)
 8003c18:	9202      	str	r2, [sp, #8]
 8003c1a:	9303      	str	r3, [sp, #12]
 8003c1c:	4b83      	ldr	r3, [pc, #524]	@ (8003e2c <CreateMessage+0x338>)
 8003c1e:	9300      	str	r3, [sp, #0]
 8003c20:	0003      	movs	r3, r0
 8003c22:	002a      	movs	r2, r5
 8003c24:	0020      	movs	r0, r4
 8003c26:	f018 fba3 	bl	801c370 <siprintf>
  index = strlen(message);
 8003c2a:	4b7e      	ldr	r3, [pc, #504]	@ (8003e24 <CreateMessage+0x330>)
 8003c2c:	0018      	movs	r0, r3
 8003c2e:	f7fc fa9d 	bl	800016c <strlen>
 8003c32:	0002      	movs	r2, r0
 8003c34:	19bb      	adds	r3, r7, r6
 8003c36:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, soundConfig);
 8003c38:	4a6f      	ldr	r2, [pc, #444]	@ (8003df8 <CreateMessage+0x304>)
 8003c3a:	4b7c      	ldr	r3, [pc, #496]	@ (8003e2c <CreateMessage+0x338>)
 8003c3c:	0011      	movs	r1, r2
 8003c3e:	0018      	movs	r0, r3
 8003c40:	f7ff ff34 	bl	8003aac <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"Sound\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"dB(A)\"},", uid[2], (char*)nameConfig, Buffer, dBC);
 8003c44:	19bb      	adds	r3, r7, r6
 8003c46:	881a      	ldrh	r2, [r3, #0]
 8003c48:	4b76      	ldr	r3, [pc, #472]	@ (8003e24 <CreateMessage+0x330>)
 8003c4a:	18d4      	adds	r4, r2, r3
 8003c4c:	4b78      	ldr	r3, [pc, #480]	@ (8003e30 <CreateMessage+0x33c>)
 8003c4e:	689d      	ldr	r5, [r3, #8]
 8003c50:	4b7c      	ldr	r3, [pc, #496]	@ (8003e44 <CreateMessage+0x350>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	1c18      	adds	r0, r3, #0
 8003c56:	f7ff fc05 	bl	8003464 <__aeabi_f2d>
 8003c5a:	0002      	movs	r2, r0
 8003c5c:	000b      	movs	r3, r1
 8003c5e:	486e      	ldr	r0, [pc, #440]	@ (8003e18 <CreateMessage+0x324>)
 8003c60:	4979      	ldr	r1, [pc, #484]	@ (8003e48 <CreateMessage+0x354>)
 8003c62:	9202      	str	r2, [sp, #8]
 8003c64:	9303      	str	r3, [sp, #12]
 8003c66:	4b71      	ldr	r3, [pc, #452]	@ (8003e2c <CreateMessage+0x338>)
 8003c68:	9300      	str	r3, [sp, #0]
 8003c6a:	0003      	movs	r3, r0
 8003c6c:	002a      	movs	r2, r5
 8003c6e:	0020      	movs	r0, r4
 8003c70:	f018 fb7e 	bl	801c370 <siprintf>
  index = strlen(message);
 8003c74:	4b6b      	ldr	r3, [pc, #428]	@ (8003e24 <CreateMessage+0x330>)
 8003c76:	0018      	movs	r0, r3
 8003c78:	f7fc fa78 	bl	800016c <strlen>
 8003c7c:	0002      	movs	r2, r0
 8003c7e:	19bb      	adds	r3, r7, r6
 8003c80:	801a      	strh	r2, [r3, #0]

  uint8ArrayToString(Buffer, vocConfig);
 8003c82:	4a5f      	ldr	r2, [pc, #380]	@ (8003e00 <CreateMessage+0x30c>)
 8003c84:	4b69      	ldr	r3, [pc, #420]	@ (8003e2c <CreateMessage+0x338>)
 8003c86:	0011      	movs	r1, r2
 8003c88:	0018      	movs	r0, r3
 8003c8a:	f7ff ff0f 	bl	8003aac <uint8ArrayToString>
  sprintf(&message[index], "{\"name\":\"voc\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%d, \"unit\":\"VOCi\"},", uid[2], (char*)nameConfig, Buffer, VOCIndex);
 8003c8e:	19bb      	adds	r3, r7, r6
 8003c90:	881a      	ldrh	r2, [r3, #0]
 8003c92:	4b64      	ldr	r3, [pc, #400]	@ (8003e24 <CreateMessage+0x330>)
 8003c94:	18d0      	adds	r0, r2, r3
 8003c96:	4b66      	ldr	r3, [pc, #408]	@ (8003e30 <CreateMessage+0x33c>)
 8003c98:	689a      	ldr	r2, [r3, #8]
 8003c9a:	4b6c      	ldr	r3, [pc, #432]	@ (8003e4c <CreateMessage+0x358>)
 8003c9c:	881b      	ldrh	r3, [r3, #0]
 8003c9e:	4c5e      	ldr	r4, [pc, #376]	@ (8003e18 <CreateMessage+0x324>)
 8003ca0:	496b      	ldr	r1, [pc, #428]	@ (8003e50 <CreateMessage+0x35c>)
 8003ca2:	9301      	str	r3, [sp, #4]
 8003ca4:	4b61      	ldr	r3, [pc, #388]	@ (8003e2c <CreateMessage+0x338>)
 8003ca6:	9300      	str	r3, [sp, #0]
 8003ca8:	0023      	movs	r3, r4
 8003caa:	f018 fb61 	bl	801c370 <siprintf>
  index = strlen(message);
 8003cae:	4b5d      	ldr	r3, [pc, #372]	@ (8003e24 <CreateMessage+0x330>)
 8003cb0:	0018      	movs	r0, r3
 8003cb2:	f7fc fa5b 	bl	800016c <strlen>
 8003cb6:	0002      	movs	r2, r0
 8003cb8:	19bb      	adds	r3, r7, r6
 8003cba:	801a      	strh	r2, [r3, #0]

  if(!onBeurs){
 8003cbc:	1dfb      	adds	r3, r7, #7
 8003cbe:	781b      	ldrb	r3, [r3, #0]
 8003cc0:	2201      	movs	r2, #1
 8003cc2:	4053      	eors	r3, r2
 8003cc4:	b2db      	uxtb	r3, r3
 8003cc6:	2b00      	cmp	r3, #0
 8003cc8:	d04a      	beq.n	8003d60 <CreateMessage+0x26c>
    uint8ArrayToString(Buffer, batteryConfig);
 8003cca:	4a4f      	ldr	r2, [pc, #316]	@ (8003e08 <CreateMessage+0x314>)
 8003ccc:	4b57      	ldr	r3, [pc, #348]	@ (8003e2c <CreateMessage+0x338>)
 8003cce:	0011      	movs	r1, r2
 8003cd0:	0018      	movs	r0, r3
 8003cd2:	f7ff feeb 	bl	8003aac <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"battery voltage\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"},", uid[2], (char*)nameConfig, Buffer, batteryCharge);
 8003cd6:	19bb      	adds	r3, r7, r6
 8003cd8:	881a      	ldrh	r2, [r3, #0]
 8003cda:	4b52      	ldr	r3, [pc, #328]	@ (8003e24 <CreateMessage+0x330>)
 8003cdc:	18d4      	adds	r4, r2, r3
 8003cde:	4b54      	ldr	r3, [pc, #336]	@ (8003e30 <CreateMessage+0x33c>)
 8003ce0:	689d      	ldr	r5, [r3, #8]
 8003ce2:	4b5c      	ldr	r3, [pc, #368]	@ (8003e54 <CreateMessage+0x360>)
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	1c18      	adds	r0, r3, #0
 8003ce8:	f7ff fbbc 	bl	8003464 <__aeabi_f2d>
 8003cec:	0002      	movs	r2, r0
 8003cee:	000b      	movs	r3, r1
 8003cf0:	4849      	ldr	r0, [pc, #292]	@ (8003e18 <CreateMessage+0x324>)
 8003cf2:	4959      	ldr	r1, [pc, #356]	@ (8003e58 <CreateMessage+0x364>)
 8003cf4:	9202      	str	r2, [sp, #8]
 8003cf6:	9303      	str	r3, [sp, #12]
 8003cf8:	4b4c      	ldr	r3, [pc, #304]	@ (8003e2c <CreateMessage+0x338>)
 8003cfa:	9300      	str	r3, [sp, #0]
 8003cfc:	0003      	movs	r3, r0
 8003cfe:	002a      	movs	r2, r5
 8003d00:	0020      	movs	r0, r4
 8003d02:	f018 fb35 	bl	801c370 <siprintf>
    index = strlen(message);
 8003d06:	4b47      	ldr	r3, [pc, #284]	@ (8003e24 <CreateMessage+0x330>)
 8003d08:	0018      	movs	r0, r3
 8003d0a:	f7fc fa2f 	bl	800016c <strlen>
 8003d0e:	0002      	movs	r2, r0
 8003d10:	19bb      	adds	r3, r7, r6
 8003d12:	801a      	strh	r2, [r3, #0]

    uint8ArrayToString(Buffer, solarConfig);
 8003d14:	4a3e      	ldr	r2, [pc, #248]	@ (8003e10 <CreateMessage+0x31c>)
 8003d16:	4b45      	ldr	r3, [pc, #276]	@ (8003e2c <CreateMessage+0x338>)
 8003d18:	0011      	movs	r1, r2
 8003d1a:	0018      	movs	r0, r3
 8003d1c:	f7ff fec6 	bl	8003aac <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"solar voltage\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"}", uid[2], (char*)nameConfig, Buffer, solarCharge);
 8003d20:	19bb      	adds	r3, r7, r6
 8003d22:	881a      	ldrh	r2, [r3, #0]
 8003d24:	4b3f      	ldr	r3, [pc, #252]	@ (8003e24 <CreateMessage+0x330>)
 8003d26:	18d4      	adds	r4, r2, r3
 8003d28:	4b41      	ldr	r3, [pc, #260]	@ (8003e30 <CreateMessage+0x33c>)
 8003d2a:	689d      	ldr	r5, [r3, #8]
 8003d2c:	4b4b      	ldr	r3, [pc, #300]	@ (8003e5c <CreateMessage+0x368>)
 8003d2e:	681b      	ldr	r3, [r3, #0]
 8003d30:	1c18      	adds	r0, r3, #0
 8003d32:	f7ff fb97 	bl	8003464 <__aeabi_f2d>
 8003d36:	0002      	movs	r2, r0
 8003d38:	000b      	movs	r3, r1
 8003d3a:	4837      	ldr	r0, [pc, #220]	@ (8003e18 <CreateMessage+0x324>)
 8003d3c:	4948      	ldr	r1, [pc, #288]	@ (8003e60 <CreateMessage+0x36c>)
 8003d3e:	9202      	str	r2, [sp, #8]
 8003d40:	9303      	str	r3, [sp, #12]
 8003d42:	4b3a      	ldr	r3, [pc, #232]	@ (8003e2c <CreateMessage+0x338>)
 8003d44:	9300      	str	r3, [sp, #0]
 8003d46:	0003      	movs	r3, r0
 8003d48:	002a      	movs	r2, r5
 8003d4a:	0020      	movs	r0, r4
 8003d4c:	f018 fb10 	bl	801c370 <siprintf>
    index = strlen(message);
 8003d50:	4b34      	ldr	r3, [pc, #208]	@ (8003e24 <CreateMessage+0x330>)
 8003d52:	0018      	movs	r0, r3
 8003d54:	f7fc fa0a 	bl	800016c <strlen>
 8003d58:	0002      	movs	r2, r0
 8003d5a:	19bb      	adds	r3, r7, r6
 8003d5c:	801a      	strh	r2, [r3, #0]
 8003d5e:	e025      	b.n	8003dac <CreateMessage+0x2b8>
  }
  else{
    uint8ArrayToString(Buffer, batteryConfig);
 8003d60:	4a29      	ldr	r2, [pc, #164]	@ (8003e08 <CreateMessage+0x314>)
 8003d62:	4b32      	ldr	r3, [pc, #200]	@ (8003e2c <CreateMessage+0x338>)
 8003d64:	0011      	movs	r1, r2
 8003d66:	0018      	movs	r0, r3
 8003d68:	f7ff fea0 	bl	8003aac <uint8ArrayToString>
    sprintf(&message[index], "{\"name\":\"battery\", \"id\": %ld, \"user\": \"%s\", \"sensor\": \"%s\", \"value\":%.2f, \"unit\":\"V\"}", uid[2], (char*)nameConfig, Buffer, batteryCharge);
 8003d6c:	260e      	movs	r6, #14
 8003d6e:	19bb      	adds	r3, r7, r6
 8003d70:	881a      	ldrh	r2, [r3, #0]
 8003d72:	4b2c      	ldr	r3, [pc, #176]	@ (8003e24 <CreateMessage+0x330>)
 8003d74:	18d4      	adds	r4, r2, r3
 8003d76:	4b2e      	ldr	r3, [pc, #184]	@ (8003e30 <CreateMessage+0x33c>)
 8003d78:	689d      	ldr	r5, [r3, #8]
 8003d7a:	4b36      	ldr	r3, [pc, #216]	@ (8003e54 <CreateMessage+0x360>)
 8003d7c:	681b      	ldr	r3, [r3, #0]
 8003d7e:	1c18      	adds	r0, r3, #0
 8003d80:	f7ff fb70 	bl	8003464 <__aeabi_f2d>
 8003d84:	0002      	movs	r2, r0
 8003d86:	000b      	movs	r3, r1
 8003d88:	4823      	ldr	r0, [pc, #140]	@ (8003e18 <CreateMessage+0x324>)
 8003d8a:	4936      	ldr	r1, [pc, #216]	@ (8003e64 <CreateMessage+0x370>)
 8003d8c:	9202      	str	r2, [sp, #8]
 8003d8e:	9303      	str	r3, [sp, #12]
 8003d90:	4b26      	ldr	r3, [pc, #152]	@ (8003e2c <CreateMessage+0x338>)
 8003d92:	9300      	str	r3, [sp, #0]
 8003d94:	0003      	movs	r3, r0
 8003d96:	002a      	movs	r2, r5
 8003d98:	0020      	movs	r0, r4
 8003d9a:	f018 fae9 	bl	801c370 <siprintf>
    index = strlen(message);
 8003d9e:	4b21      	ldr	r3, [pc, #132]	@ (8003e24 <CreateMessage+0x330>)
 8003da0:	0018      	movs	r0, r3
 8003da2:	f7fc f9e3 	bl	800016c <strlen>
 8003da6:	0002      	movs	r2, r0
 8003da8:	19bb      	adds	r3, r7, r6
 8003daa:	801a      	strh	r2, [r3, #0]
  }

  Debug("Length of datagram: %d", index);
 8003dac:	240e      	movs	r4, #14
 8003dae:	193b      	adds	r3, r7, r4
 8003db0:	881b      	ldrh	r3, [r3, #0]
 8003db2:	4a2d      	ldr	r2, [pc, #180]	@ (8003e68 <CreateMessage+0x374>)
 8003db4:	492d      	ldr	r1, [pc, #180]	@ (8003e6c <CreateMessage+0x378>)
 8003db6:	2003      	movs	r0, #3
 8003db8:	f007 fcb0 	bl	800b71c <CreateLine>
  index = sprintf(&message[index], "]");
 8003dbc:	193b      	adds	r3, r7, r4
 8003dbe:	881a      	ldrh	r2, [r3, #0]
 8003dc0:	4b18      	ldr	r3, [pc, #96]	@ (8003e24 <CreateMessage+0x330>)
 8003dc2:	18d3      	adds	r3, r2, r3
 8003dc4:	4a2a      	ldr	r2, [pc, #168]	@ (8003e70 <CreateMessage+0x37c>)
 8003dc6:	0011      	movs	r1, r2
 8003dc8:	0018      	movs	r0, r3
 8003dca:	f018 fad1 	bl	801c370 <siprintf>
 8003dce:	0002      	movs	r2, r0
 8003dd0:	193b      	adds	r3, r7, r4
 8003dd2:	801a      	strh	r2, [r3, #0]
  return strlen(message);
 8003dd4:	4b13      	ldr	r3, [pc, #76]	@ (8003e24 <CreateMessage+0x330>)
 8003dd6:	0018      	movs	r0, r3
 8003dd8:	f7fc f9c8 	bl	800016c <strlen>
 8003ddc:	0003      	movs	r3, r0
 8003dde:	b29b      	uxth	r3, r3
}
 8003de0:	0018      	movs	r0, r3
 8003de2:	46bd      	mov	sp, r7
 8003de4:	b005      	add	sp, #20
 8003de6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8003de8:	200009d8 	.word	0x200009d8
 8003dec:	0808000c 	.word	0x0808000c
 8003df0:	200009e4 	.word	0x200009e4
 8003df4:	08080018 	.word	0x08080018
 8003df8:	200009f0 	.word	0x200009f0
 8003dfc:	08080048 	.word	0x08080048
 8003e00:	200009fc 	.word	0x200009fc
 8003e04:	08080030 	.word	0x08080030
 8003e08:	20000a08 	.word	0x20000a08
 8003e0c:	0808006c 	.word	0x0808006c
 8003e10:	20000a14 	.word	0x20000a14
 8003e14:	08080078 	.word	0x08080078
 8003e18:	20000a20 	.word	0x20000a20
 8003e1c:	08080090 	.word	0x08080090
 8003e20:	08020718 	.word	0x08020718
 8003e24:	2000057c 	.word	0x2000057c
 8003e28:	0801f5ec 	.word	0x0801f5ec
 8003e2c:	20000a40 	.word	0x20000a40
 8003e30:	20000550 	.word	0x20000550
 8003e34:	20000564 	.word	0x20000564
 8003e38:	0801f5f0 	.word	0x0801f5f0
 8003e3c:	20000568 	.word	0x20000568
 8003e40:	0801f644 	.word	0x0801f644
 8003e44:	20000578 	.word	0x20000578
 8003e48:	0801f69c 	.word	0x0801f69c
 8003e4c:	20000574 	.word	0x20000574
 8003e50:	0801f6f8 	.word	0x0801f6f8
 8003e54:	2000056c 	.word	0x2000056c
 8003e58:	0801f74c 	.word	0x0801f74c
 8003e5c:	20000570 	.word	0x20000570
 8003e60:	0801f7ac 	.word	0x0801f7ac
 8003e64:	0801f808 	.word	0x0801f808
 8003e68:	0801f860 	.word	0x0801f860
 8003e6c:	0801f5e0 	.word	0x0801f5e0
 8003e70:	0801f878 	.word	0x0801f878

08003e74 <StartProg>:

//void //SetCommandBuffer(const char* command) {
//    strncpy(CommandBuffer, command, ESP_TX_BUFFER_SIZE);
//    CommandEchoed = false; // Reset the flag when a new command is sent
//}
void StartProg(){
 8003e74:	b580      	push	{r7, lr}
 8003e76:	af00      	add	r7, sp, #0
  //InitWifiConfig();
  HAL_Delay(100);
 8003e78:	2064      	movs	r0, #100	@ 0x64
 8003e7a:	f007 fff5 	bl	800be68 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8003e7e:	4b15      	ldr	r3, [pc, #84]	@ (8003ed4 <StartProg+0x60>)
 8003e80:	2200      	movs	r2, #0
 8003e82:	2101      	movs	r1, #1
 8003e84:	0018      	movs	r0, r3
 8003e86:	f009 fa44 	bl	800d312 <HAL_GPIO_WritePin>
  HAL_Delay(100);
 8003e8a:	2064      	movs	r0, #100	@ 0x64
 8003e8c:	f007 ffec 	bl	800be68 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 8003e90:	4b10      	ldr	r3, [pc, #64]	@ (8003ed4 <StartProg+0x60>)
 8003e92:	2200      	movs	r2, #0
 8003e94:	2102      	movs	r1, #2
 8003e96:	0018      	movs	r0, r3
 8003e98:	f009 fa3b 	bl	800d312 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8003e9c:	23fa      	movs	r3, #250	@ 0xfa
 8003e9e:	005b      	lsls	r3, r3, #1
 8003ea0:	0018      	movs	r0, r3
 8003ea2:	f007 ffe1 	bl	800be68 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8003ea6:	4b0b      	ldr	r3, [pc, #44]	@ (8003ed4 <StartProg+0x60>)
 8003ea8:	2201      	movs	r2, #1
 8003eaa:	2101      	movs	r1, #1
 8003eac:	0018      	movs	r0, r3
 8003eae:	f009 fa30 	bl	800d312 <HAL_GPIO_WritePin>
  HAL_Delay(500);
 8003eb2:	23fa      	movs	r3, #250	@ 0xfa
 8003eb4:	005b      	lsls	r3, r3, #1
 8003eb6:	0018      	movs	r0, r3
 8003eb8:	f007 ffd6 	bl	800be68 <HAL_Delay>
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_SET);
 8003ebc:	4b05      	ldr	r3, [pc, #20]	@ (8003ed4 <StartProg+0x60>)
 8003ebe:	2201      	movs	r2, #1
 8003ec0:	2102      	movs	r1, #2
 8003ec2:	0018      	movs	r0, r3
 8003ec4:	f009 fa25 	bl	800d312 <HAL_GPIO_WritePin>
  HAL_Delay(40);
 8003ec8:	2028      	movs	r0, #40	@ 0x28
 8003eca:	f007 ffcd 	bl	800be68 <HAL_Delay>
}
 8003ece:	46c0      	nop			@ (mov r8, r8)
 8003ed0:	46bd      	mov	sp, r7
 8003ed2:	bd80      	pop	{r7, pc}
 8003ed4:	50001c00 	.word	0x50001c00

08003ed8 <ParseBuffer>:
 uint8_t ParseBuffer(uint8_t* buffer, uint16_t len, uint8_t expectation) {
 8003ed8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8003eda:	b0d9      	sub	sp, #356	@ 0x164
 8003edc:	af00      	add	r7, sp, #0
 8003ede:	6078      	str	r0, [r7, #4]
 8003ee0:	0008      	movs	r0, r1
 8003ee2:	0011      	movs	r1, r2
 8003ee4:	4ba1      	ldr	r3, [pc, #644]	@ (800416c <ParseBuffer+0x294>)
 8003ee6:	24b0      	movs	r4, #176	@ 0xb0
 8003ee8:	0064      	lsls	r4, r4, #1
 8003eea:	191b      	adds	r3, r3, r4
 8003eec:	19db      	adds	r3, r3, r7
 8003eee:	1c02      	adds	r2, r0, #0
 8003ef0:	801a      	strh	r2, [r3, #0]
 8003ef2:	4b9f      	ldr	r3, [pc, #636]	@ (8004170 <ParseBuffer+0x298>)
 8003ef4:	191b      	adds	r3, r3, r4
 8003ef6:	19db      	adds	r3, r3, r7
 8003ef8:	1c0a      	adds	r2, r1, #0
 8003efa:	701a      	strb	r2, [r3, #0]
  char tempBuf[256];
  memset(tempBuf, '\0', 256);
 8003efc:	2380      	movs	r3, #128	@ 0x80
 8003efe:	005a      	lsls	r2, r3, #1
 8003f00:	2348      	movs	r3, #72	@ 0x48
 8003f02:	18fb      	adds	r3, r7, r3
 8003f04:	2100      	movs	r1, #0
 8003f06:	0018      	movs	r0, r3
 8003f08:	f018 fad6 	bl	801c4b8 <memset>
  char status = RECEIVE_STATUS_INCOMPLETE;
 8003f0c:	2360      	movs	r3, #96	@ 0x60
 8003f0e:	33ff      	adds	r3, #255	@ 0xff
 8003f10:	18fb      	adds	r3, r7, r3
 8003f12:	2203      	movs	r2, #3
 8003f14:	701a      	strb	r2, [r3, #0]
  for(uint16_t i=0; i<len; i++){
 8003f16:	23ae      	movs	r3, #174	@ 0xae
 8003f18:	005b      	lsls	r3, r3, #1
 8003f1a:	18fb      	adds	r3, r7, r3
 8003f1c:	2200      	movs	r2, #0
 8003f1e:	801a      	strh	r2, [r3, #0]
 8003f20:	e013      	b.n	8003f4a <ParseBuffer+0x72>
    tempBuf[i] = (char)buffer[i];
 8003f22:	20ae      	movs	r0, #174	@ 0xae
 8003f24:	0040      	lsls	r0, r0, #1
 8003f26:	183b      	adds	r3, r7, r0
 8003f28:	881b      	ldrh	r3, [r3, #0]
 8003f2a:	687a      	ldr	r2, [r7, #4]
 8003f2c:	18d2      	adds	r2, r2, r3
 8003f2e:	183b      	adds	r3, r7, r0
 8003f30:	881b      	ldrh	r3, [r3, #0]
 8003f32:	7811      	ldrb	r1, [r2, #0]
 8003f34:	4a8f      	ldr	r2, [pc, #572]	@ (8004174 <ParseBuffer+0x29c>)
 8003f36:	24b0      	movs	r4, #176	@ 0xb0
 8003f38:	0064      	lsls	r4, r4, #1
 8003f3a:	1912      	adds	r2, r2, r4
 8003f3c:	19d2      	adds	r2, r2, r7
 8003f3e:	54d1      	strb	r1, [r2, r3]
  for(uint16_t i=0; i<len; i++){
 8003f40:	183b      	adds	r3, r7, r0
 8003f42:	881a      	ldrh	r2, [r3, #0]
 8003f44:	183b      	adds	r3, r7, r0
 8003f46:	3201      	adds	r2, #1
 8003f48:	801a      	strh	r2, [r3, #0]
 8003f4a:	23ae      	movs	r3, #174	@ 0xae
 8003f4c:	005b      	lsls	r3, r3, #1
 8003f4e:	18fa      	adds	r2, r7, r3
 8003f50:	4b86      	ldr	r3, [pc, #536]	@ (800416c <ParseBuffer+0x294>)
 8003f52:	24b0      	movs	r4, #176	@ 0xb0
 8003f54:	0064      	lsls	r4, r4, #1
 8003f56:	191b      	adds	r3, r3, r4
 8003f58:	19db      	adds	r3, r3, r7
 8003f5a:	8812      	ldrh	r2, [r2, #0]
 8003f5c:	881b      	ldrh	r3, [r3, #0]
 8003f5e:	429a      	cmp	r2, r3
 8003f60:	d3df      	bcc.n	8003f22 <ParseBuffer+0x4a>
  }
  tempBuf[len] = '\0';
 8003f62:	4b82      	ldr	r3, [pc, #520]	@ (800416c <ParseBuffer+0x294>)
 8003f64:	191b      	adds	r3, r3, r4
 8003f66:	19db      	adds	r3, r3, r7
 8003f68:	881b      	ldrh	r3, [r3, #0]
 8003f6a:	4a82      	ldr	r2, [pc, #520]	@ (8004174 <ParseBuffer+0x29c>)
 8003f6c:	1912      	adds	r2, r2, r4
 8003f6e:	19d2      	adds	r2, r2, r7
 8003f70:	2100      	movs	r1, #0
 8003f72:	54d1      	strb	r1, [r2, r3]
#ifdef LONGMESSAGES
  printf("Receive ParseBuffer: %s", tempBuf );
 8003f74:	2648      	movs	r6, #72	@ 0x48
 8003f76:	19ba      	adds	r2, r7, r6
 8003f78:	4b7f      	ldr	r3, [pc, #508]	@ (8004178 <ParseBuffer+0x2a0>)
 8003f7a:	0011      	movs	r1, r2
 8003f7c:	0018      	movs	r0, r3
 8003f7e:	f018 f9e7 	bl	801c350 <iprintf>
#else
  Debug("Receive ParseBuffer: %s", tempBuf );
#endif
  char * ParsePoint = 0;
 8003f82:	2300      	movs	r3, #0
 8003f84:	22ac      	movs	r2, #172	@ 0xac
 8003f86:	0052      	lsls	r2, r2, #1
 8003f88:	18b9      	adds	r1, r7, r2
 8003f8a:	600b      	str	r3, [r1, #0]
  const char OK[] = AT_RESPONSE_OK;
 8003f8c:	4b7b      	ldr	r3, [pc, #492]	@ (800417c <ParseBuffer+0x2a4>)
 8003f8e:	0025      	movs	r5, r4
 8003f90:	195b      	adds	r3, r3, r5
 8003f92:	19db      	adds	r3, r3, r7
 8003f94:	4a7a      	ldr	r2, [pc, #488]	@ (8004180 <ParseBuffer+0x2a8>)
 8003f96:	8811      	ldrh	r1, [r2, #0]
 8003f98:	8019      	strh	r1, [r3, #0]
 8003f9a:	7892      	ldrb	r2, [r2, #2]
 8003f9c:	709a      	strb	r2, [r3, #2]
  const char ERROR[] = AT_RESPONSE_ERROR;
 8003f9e:	4b79      	ldr	r3, [pc, #484]	@ (8004184 <ParseBuffer+0x2ac>)
 8003fa0:	195b      	adds	r3, r3, r5
 8003fa2:	19db      	adds	r3, r3, r7
 8003fa4:	4a78      	ldr	r2, [pc, #480]	@ (8004188 <ParseBuffer+0x2b0>)
 8003fa6:	6811      	ldr	r1, [r2, #0]
 8003fa8:	6019      	str	r1, [r3, #0]
 8003faa:	8892      	ldrh	r2, [r2, #4]
 8003fac:	809a      	strh	r2, [r3, #4]
  const char FAIL[] = AT_RESPONSE_FAIL;
 8003fae:	4b77      	ldr	r3, [pc, #476]	@ (800418c <ParseBuffer+0x2b4>)
 8003fb0:	195b      	adds	r3, r3, r5
 8003fb2:	19db      	adds	r3, r3, r7
 8003fb4:	4a76      	ldr	r2, [pc, #472]	@ (8004190 <ParseBuffer+0x2b8>)
 8003fb6:	6811      	ldr	r1, [r2, #0]
 8003fb8:	6019      	str	r1, [r3, #0]
 8003fba:	7912      	ldrb	r2, [r2, #4]
 8003fbc:	711a      	strb	r2, [r3, #4]
  const char ready[] = AT_RESPONSE_READY;
 8003fbe:	4b75      	ldr	r3, [pc, #468]	@ (8004194 <ParseBuffer+0x2bc>)
 8003fc0:	195b      	adds	r3, r3, r5
 8003fc2:	19db      	adds	r3, r3, r7
 8003fc4:	4a74      	ldr	r2, [pc, #464]	@ (8004198 <ParseBuffer+0x2c0>)
 8003fc6:	6811      	ldr	r1, [r2, #0]
 8003fc8:	6019      	str	r1, [r3, #0]
 8003fca:	8892      	ldrh	r2, [r2, #4]
 8003fcc:	809a      	strh	r2, [r3, #4]
  const char start[] = AT_RESPONSE_START;
 8003fce:	4b73      	ldr	r3, [pc, #460]	@ (800419c <ParseBuffer+0x2c4>)
 8003fd0:	195b      	adds	r3, r3, r5
 8003fd2:	19db      	adds	r3, r3, r7
 8003fd4:	223e      	movs	r2, #62	@ 0x3e
 8003fd6:	801a      	strh	r2, [r3, #0]
  const char WIFI[] = AT_RESPONSE_WIFI;
 8003fd8:	4b71      	ldr	r3, [pc, #452]	@ (80041a0 <ParseBuffer+0x2c8>)
 8003fda:	195b      	adds	r3, r3, r5
 8003fdc:	19db      	adds	r3, r3, r7
 8003fde:	4a71      	ldr	r2, [pc, #452]	@ (80041a4 <ParseBuffer+0x2cc>)
 8003fe0:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003fe2:	c313      	stmia	r3!, {r0, r1, r4}
 8003fe4:	8811      	ldrh	r1, [r2, #0]
 8003fe6:	8019      	strh	r1, [r3, #0]
 8003fe8:	7892      	ldrb	r2, [r2, #2]
 8003fea:	709a      	strb	r2, [r3, #2]
  const char TIME[] = AT_RESPONSE_TIME_UPDATED;
 8003fec:	4b6e      	ldr	r3, [pc, #440]	@ (80041a8 <ParseBuffer+0x2d0>)
 8003fee:	195b      	adds	r3, r3, r5
 8003ff0:	19db      	adds	r3, r3, r7
 8003ff2:	4a6e      	ldr	r2, [pc, #440]	@ (80041ac <ParseBuffer+0x2d4>)
 8003ff4:	ca13      	ldmia	r2!, {r0, r1, r4}
 8003ff6:	c313      	stmia	r3!, {r0, r1, r4}
 8003ff8:	8812      	ldrh	r2, [r2, #0]
 8003ffa:	801a      	strh	r2, [r3, #0]
  if(expectation == RECEIVE_EXPECTATION_OK){
 8003ffc:	4b5c      	ldr	r3, [pc, #368]	@ (8004170 <ParseBuffer+0x298>)
 8003ffe:	195b      	adds	r3, r3, r5
 8004000:	19db      	adds	r3, r3, r7
 8004002:	781b      	ldrb	r3, [r3, #0]
 8004004:	2b00      	cmp	r3, #0
 8004006:	d10b      	bne.n	8004020 <ParseBuffer+0x148>
    ParsePoint = strstr(tempBuf, OK);
 8004008:	2344      	movs	r3, #68	@ 0x44
 800400a:	18fa      	adds	r2, r7, r3
 800400c:	19bb      	adds	r3, r7, r6
 800400e:	0011      	movs	r1, r2
 8004010:	0018      	movs	r0, r3
 8004012:	f018 fa8c 	bl	801c52e <strstr>
 8004016:	0003      	movs	r3, r0
 8004018:	22ac      	movs	r2, #172	@ 0xac
 800401a:	0052      	lsls	r2, r2, #1
 800401c:	18ba      	adds	r2, r7, r2
 800401e:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_READY){
 8004020:	4b53      	ldr	r3, [pc, #332]	@ (8004170 <ParseBuffer+0x298>)
 8004022:	22b0      	movs	r2, #176	@ 0xb0
 8004024:	0052      	lsls	r2, r2, #1
 8004026:	189b      	adds	r3, r3, r2
 8004028:	19db      	adds	r3, r3, r7
 800402a:	781b      	ldrb	r3, [r3, #0]
 800402c:	2b01      	cmp	r3, #1
 800402e:	d10c      	bne.n	800404a <ParseBuffer+0x172>
    ParsePoint = strstr(tempBuf, ready);
 8004030:	232c      	movs	r3, #44	@ 0x2c
 8004032:	18fa      	adds	r2, r7, r3
 8004034:	2348      	movs	r3, #72	@ 0x48
 8004036:	18fb      	adds	r3, r7, r3
 8004038:	0011      	movs	r1, r2
 800403a:	0018      	movs	r0, r3
 800403c:	f018 fa77 	bl	801c52e <strstr>
 8004040:	0003      	movs	r3, r0
 8004042:	22ac      	movs	r2, #172	@ 0xac
 8004044:	0052      	lsls	r2, r2, #1
 8004046:	18ba      	adds	r2, r7, r2
 8004048:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_START){
 800404a:	4b49      	ldr	r3, [pc, #292]	@ (8004170 <ParseBuffer+0x298>)
 800404c:	22b0      	movs	r2, #176	@ 0xb0
 800404e:	0052      	lsls	r2, r2, #1
 8004050:	189b      	adds	r3, r3, r2
 8004052:	19db      	adds	r3, r3, r7
 8004054:	781b      	ldrb	r3, [r3, #0]
 8004056:	2b02      	cmp	r3, #2
 8004058:	d10c      	bne.n	8004074 <ParseBuffer+0x19c>
    ParsePoint = strstr(tempBuf, start);
 800405a:	2328      	movs	r3, #40	@ 0x28
 800405c:	18fa      	adds	r2, r7, r3
 800405e:	2348      	movs	r3, #72	@ 0x48
 8004060:	18fb      	adds	r3, r7, r3
 8004062:	0011      	movs	r1, r2
 8004064:	0018      	movs	r0, r3
 8004066:	f018 fa62 	bl	801c52e <strstr>
 800406a:	0003      	movs	r3, r0
 800406c:	22ac      	movs	r2, #172	@ 0xac
 800406e:	0052      	lsls	r2, r2, #1
 8004070:	18ba      	adds	r2, r7, r2
 8004072:	6013      	str	r3, [r2, #0]
  }
  if(expectation == RECEIVE_EXPECTATION_TIME){
 8004074:	4b3e      	ldr	r3, [pc, #248]	@ (8004170 <ParseBuffer+0x298>)
 8004076:	22b0      	movs	r2, #176	@ 0xb0
 8004078:	0052      	lsls	r2, r2, #1
 800407a:	189b      	adds	r3, r3, r2
 800407c:	19db      	adds	r3, r3, r7
 800407e:	781b      	ldrb	r3, [r3, #0]
 8004080:	2b05      	cmp	r3, #5
 8004082:	d10c      	bne.n	800409e <ParseBuffer+0x1c6>
    ParsePoint = strstr(tempBuf, TIME);
 8004084:	2308      	movs	r3, #8
 8004086:	18fa      	adds	r2, r7, r3
 8004088:	2348      	movs	r3, #72	@ 0x48
 800408a:	18fb      	adds	r3, r7, r3
 800408c:	0011      	movs	r1, r2
 800408e:	0018      	movs	r0, r3
 8004090:	f018 fa4d 	bl	801c52e <strstr>
 8004094:	0003      	movs	r3, r0
 8004096:	22ac      	movs	r2, #172	@ 0xac
 8004098:	0052      	lsls	r2, r2, #1
 800409a:	18ba      	adds	r2, r7, r2
 800409c:	6013      	str	r3, [r2, #0]
  }

  char *ParsePoint2 = strstr(tempBuf, ERROR);
 800409e:	233c      	movs	r3, #60	@ 0x3c
 80040a0:	18fa      	adds	r2, r7, r3
 80040a2:	2448      	movs	r4, #72	@ 0x48
 80040a4:	193b      	adds	r3, r7, r4
 80040a6:	0011      	movs	r1, r2
 80040a8:	0018      	movs	r0, r3
 80040aa:	f018 fa40 	bl	801c52e <strstr>
 80040ae:	0003      	movs	r3, r0
 80040b0:	22aa      	movs	r2, #170	@ 0xaa
 80040b2:	0052      	lsls	r2, r2, #1
 80040b4:	18ba      	adds	r2, r7, r2
 80040b6:	6013      	str	r3, [r2, #0]
  char *ParsePoint3 = strstr(tempBuf, WIFI);
 80040b8:	2318      	movs	r3, #24
 80040ba:	18fa      	adds	r2, r7, r3
 80040bc:	193b      	adds	r3, r7, r4
 80040be:	0011      	movs	r1, r2
 80040c0:	0018      	movs	r0, r3
 80040c2:	f018 fa34 	bl	801c52e <strstr>
 80040c6:	0003      	movs	r3, r0
 80040c8:	22a8      	movs	r2, #168	@ 0xa8
 80040ca:	0052      	lsls	r2, r2, #1
 80040cc:	18ba      	adds	r2, r7, r2
 80040ce:	6013      	str	r3, [r2, #0]
  char *ParsePoint4 = strstr(tempBuf, SSIDBeurs);
 80040d0:	4a37      	ldr	r2, [pc, #220]	@ (80041b0 <ParseBuffer+0x2d8>)
 80040d2:	193b      	adds	r3, r7, r4
 80040d4:	0011      	movs	r1, r2
 80040d6:	0018      	movs	r0, r3
 80040d8:	f018 fa29 	bl	801c52e <strstr>
 80040dc:	0003      	movs	r3, r0
 80040de:	22a6      	movs	r2, #166	@ 0xa6
 80040e0:	0052      	lsls	r2, r2, #1
 80040e2:	18ba      	adds	r2, r7, r2
 80040e4:	6013      	str	r3, [r2, #0]
  char *ParsePoint5 = strstr(tempBuf, FAIL);
 80040e6:	2334      	movs	r3, #52	@ 0x34
 80040e8:	18fa      	adds	r2, r7, r3
 80040ea:	193b      	adds	r3, r7, r4
 80040ec:	0011      	movs	r1, r2
 80040ee:	0018      	movs	r0, r3
 80040f0:	f018 fa1d 	bl	801c52e <strstr>
 80040f4:	0003      	movs	r3, r0
 80040f6:	22a4      	movs	r2, #164	@ 0xa4
 80040f8:	0052      	lsls	r2, r2, #1
 80040fa:	18ba      	adds	r2, r7, r2
 80040fc:	6013      	str	r3, [r2, #0]
  if(len > 1 ){
 80040fe:	4b1b      	ldr	r3, [pc, #108]	@ (800416c <ParseBuffer+0x294>)
 8004100:	21b0      	movs	r1, #176	@ 0xb0
 8004102:	0049      	lsls	r1, r1, #1
 8004104:	185b      	adds	r3, r3, r1
 8004106:	19db      	adds	r3, r3, r7
 8004108:	881b      	ldrh	r3, [r3, #0]
 800410a:	2b01      	cmp	r3, #1
 800410c:	d800      	bhi.n	8004110 <ParseBuffer+0x238>
 800410e:	e0be      	b.n	800428e <ParseBuffer+0x3b6>
    if(ParsePoint != 0 && *ParsePoint == 'O'){
 8004110:	22ac      	movs	r2, #172	@ 0xac
 8004112:	0052      	lsls	r2, r2, #1
 8004114:	18bb      	adds	r3, r7, r2
 8004116:	681b      	ldr	r3, [r3, #0]
 8004118:	2b00      	cmp	r3, #0
 800411a:	d051      	beq.n	80041c0 <ParseBuffer+0x2e8>
 800411c:	18bb      	adds	r3, r7, r2
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	781b      	ldrb	r3, [r3, #0]
 8004122:	2b4f      	cmp	r3, #79	@ 0x4f
 8004124:	d14c      	bne.n	80041c0 <ParseBuffer+0x2e8>
// call function to update time in realtimeclock.c
      status = RECEIVE_STATUS_OK;
 8004126:	2360      	movs	r3, #96	@ 0x60
 8004128:	33ff      	adds	r3, #255	@ 0xff
 800412a:	18fb      	adds	r3, r7, r3
 800412c:	2200      	movs	r2, #0
 800412e:	701a      	strb	r2, [r3, #0]
      if ( ATCommand == AT_CIPSNTPTIME ) {
 8004130:	4b20      	ldr	r3, [pc, #128]	@ (80041b4 <ParseBuffer+0x2dc>)
 8004132:	781b      	ldrb	r3, [r3, #0]
 8004134:	2b12      	cmp	r3, #18
 8004136:	d143      	bne.n	80041c0 <ParseBuffer+0x2e8>
        if ((len == 43) && (tempBuf[33] == '2' )) {  // validity check
 8004138:	4b0c      	ldr	r3, [pc, #48]	@ (800416c <ParseBuffer+0x294>)
 800413a:	185b      	adds	r3, r3, r1
 800413c:	19db      	adds	r3, r3, r7
 800413e:	881b      	ldrh	r3, [r3, #0]
 8004140:	2b2b      	cmp	r3, #43	@ 0x2b
 8004142:	d10b      	bne.n	800415c <ParseBuffer+0x284>
 8004144:	4b0b      	ldr	r3, [pc, #44]	@ (8004174 <ParseBuffer+0x29c>)
 8004146:	185b      	adds	r3, r3, r1
 8004148:	19db      	adds	r3, r3, r7
 800414a:	2221      	movs	r2, #33	@ 0x21
 800414c:	5c9b      	ldrb	r3, [r3, r2]
 800414e:	2b32      	cmp	r3, #50	@ 0x32
 8004150:	d104      	bne.n	800415c <ParseBuffer+0x284>
          ParseTime(tempBuf);
 8004152:	193b      	adds	r3, r7, r4
 8004154:	0018      	movs	r0, r3
 8004156:	f002 f861 	bl	800621c <ParseTime>
 800415a:	e031      	b.n	80041c0 <ParseBuffer+0x2e8>
        }
        else {
          Error("Error getting time");
 800415c:	4a16      	ldr	r2, [pc, #88]	@ (80041b8 <ParseBuffer+0x2e0>)
 800415e:	4b17      	ldr	r3, [pc, #92]	@ (80041bc <ParseBuffer+0x2e4>)
 8004160:	0019      	movs	r1, r3
 8004162:	2001      	movs	r0, #1
 8004164:	f007 fada 	bl	800b71c <CreateLine>
          return RECEIVE_STATUS_TIMEOUT;
 8004168:	2306      	movs	r3, #6
 800416a:	e094      	b.n	8004296 <ParseBuffer+0x3be>
 800416c:	fffffea2 	.word	0xfffffea2
 8004170:	fffffea1 	.word	0xfffffea1
 8004174:	fffffee8 	.word	0xfffffee8
 8004178:	0801f87c 	.word	0x0801f87c
 800417c:	fffffee4 	.word	0xfffffee4
 8004180:	0801f8a8 	.word	0x0801f8a8
 8004184:	fffffedc 	.word	0xfffffedc
 8004188:	0801f8ac 	.word	0x0801f8ac
 800418c:	fffffed4 	.word	0xfffffed4
 8004190:	0801f8b4 	.word	0x0801f8b4
 8004194:	fffffecc 	.word	0xfffffecc
 8004198:	0801f8bc 	.word	0x0801f8bc
 800419c:	fffffec8 	.word	0xfffffec8
 80041a0:	fffffeb8 	.word	0xfffffeb8
 80041a4:	0801f8c4 	.word	0x0801f8c4
 80041a8:	fffffea8 	.word	0xfffffea8
 80041ac:	0801f8d4 	.word	0x0801f8d4
 80041b0:	080206f4 	.word	0x080206f4
 80041b4:	20000996 	.word	0x20000996
 80041b8:	0801f894 	.word	0x0801f894
 80041bc:	0801f580 	.word	0x0801f580
        }
      }
    }
    if(ParsePoint != 0 && *ParsePoint == 'r') {
 80041c0:	22ac      	movs	r2, #172	@ 0xac
 80041c2:	0052      	lsls	r2, r2, #1
 80041c4:	18bb      	adds	r3, r7, r2
 80041c6:	681b      	ldr	r3, [r3, #0]
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d009      	beq.n	80041e0 <ParseBuffer+0x308>
 80041cc:	18bb      	adds	r3, r7, r2
 80041ce:	681b      	ldr	r3, [r3, #0]
 80041d0:	781b      	ldrb	r3, [r3, #0]
 80041d2:	2b72      	cmp	r3, #114	@ 0x72
 80041d4:	d104      	bne.n	80041e0 <ParseBuffer+0x308>
      status = RECEIVE_STATUS_READY;
 80041d6:	2360      	movs	r3, #96	@ 0x60
 80041d8:	33ff      	adds	r3, #255	@ 0xff
 80041da:	18fb      	adds	r3, r7, r3
 80041dc:	2202      	movs	r2, #2
 80041de:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '>') {
 80041e0:	22ac      	movs	r2, #172	@ 0xac
 80041e2:	0052      	lsls	r2, r2, #1
 80041e4:	18bb      	adds	r3, r7, r2
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	2b00      	cmp	r3, #0
 80041ea:	d009      	beq.n	8004200 <ParseBuffer+0x328>
 80041ec:	18bb      	adds	r3, r7, r2
 80041ee:	681b      	ldr	r3, [r3, #0]
 80041f0:	781b      	ldrb	r3, [r3, #0]
 80041f2:	2b3e      	cmp	r3, #62	@ 0x3e
 80041f4:	d104      	bne.n	8004200 <ParseBuffer+0x328>
      status = RECEIVE_STATUS_START;
 80041f6:	2360      	movs	r3, #96	@ 0x60
 80041f8:	33ff      	adds	r3, #255	@ 0xff
 80041fa:	18fb      	adds	r3, r7, r3
 80041fc:	2205      	movs	r2, #5
 80041fe:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint != 0 && *ParsePoint == '+') {
 8004200:	22ac      	movs	r2, #172	@ 0xac
 8004202:	0052      	lsls	r2, r2, #1
 8004204:	18bb      	adds	r3, r7, r2
 8004206:	681b      	ldr	r3, [r3, #0]
 8004208:	2b00      	cmp	r3, #0
 800420a:	d009      	beq.n	8004220 <ParseBuffer+0x348>
 800420c:	18bb      	adds	r3, r7, r2
 800420e:	681b      	ldr	r3, [r3, #0]
 8004210:	781b      	ldrb	r3, [r3, #0]
 8004212:	2b2b      	cmp	r3, #43	@ 0x2b
 8004214:	d104      	bne.n	8004220 <ParseBuffer+0x348>
      status = RECEIVE_STATUS_TIME;
 8004216:	2360      	movs	r3, #96	@ 0x60
 8004218:	33ff      	adds	r3, #255	@ 0xff
 800421a:	18fb      	adds	r3, r7, r3
 800421c:	220b      	movs	r2, #11
 800421e:	701a      	strb	r2, [r3, #0]
    }
    if((ParsePoint2 != 0 && *ParsePoint2 == 'E') || (ParsePoint5 != 0 && *ParsePoint5 == 'F')) {
 8004220:	22aa      	movs	r2, #170	@ 0xaa
 8004222:	0052      	lsls	r2, r2, #1
 8004224:	18bb      	adds	r3, r7, r2
 8004226:	681b      	ldr	r3, [r3, #0]
 8004228:	2b00      	cmp	r3, #0
 800422a:	d004      	beq.n	8004236 <ParseBuffer+0x35e>
 800422c:	18bb      	adds	r3, r7, r2
 800422e:	681b      	ldr	r3, [r3, #0]
 8004230:	781b      	ldrb	r3, [r3, #0]
 8004232:	2b45      	cmp	r3, #69	@ 0x45
 8004234:	d00a      	beq.n	800424c <ParseBuffer+0x374>
 8004236:	22a4      	movs	r2, #164	@ 0xa4
 8004238:	0052      	lsls	r2, r2, #1
 800423a:	18bb      	adds	r3, r7, r2
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	2b00      	cmp	r3, #0
 8004240:	d009      	beq.n	8004256 <ParseBuffer+0x37e>
 8004242:	18bb      	adds	r3, r7, r2
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	781b      	ldrb	r3, [r3, #0]
 8004248:	2b46      	cmp	r3, #70	@ 0x46
 800424a:	d104      	bne.n	8004256 <ParseBuffer+0x37e>
      status = RECEIVE_STATUS_ERROR;
 800424c:	2360      	movs	r3, #96	@ 0x60
 800424e:	33ff      	adds	r3, #255	@ 0xff
 8004250:	18fb      	adds	r3, r7, r3
 8004252:	2201      	movs	r2, #1
 8004254:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint3 != 0 && *ParsePoint3 == 'W'){
 8004256:	22a8      	movs	r2, #168	@ 0xa8
 8004258:	0052      	lsls	r2, r2, #1
 800425a:	18bb      	adds	r3, r7, r2
 800425c:	681b      	ldr	r3, [r3, #0]
 800425e:	2b00      	cmp	r3, #0
 8004260:	d007      	beq.n	8004272 <ParseBuffer+0x39a>
 8004262:	18bb      	adds	r3, r7, r2
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	781b      	ldrb	r3, [r3, #0]
 8004268:	2b57      	cmp	r3, #87	@ 0x57
 800426a:	d102      	bne.n	8004272 <ParseBuffer+0x39a>
      ConnectionMade = true;
 800426c:	4b0c      	ldr	r3, [pc, #48]	@ (80042a0 <ParseBuffer+0x3c8>)
 800426e:	2201      	movs	r2, #1
 8004270:	701a      	strb	r2, [r3, #0]
    }
    if(ParsePoint4 != 0 && *ParsePoint4 == '2'){
 8004272:	22a6      	movs	r2, #166	@ 0xa6
 8004274:	0052      	lsls	r2, r2, #1
 8004276:	18bb      	adds	r3, r7, r2
 8004278:	681b      	ldr	r3, [r3, #0]
 800427a:	2b00      	cmp	r3, #0
 800427c:	d007      	beq.n	800428e <ParseBuffer+0x3b6>
 800427e:	18bb      	adds	r3, r7, r2
 8004280:	681b      	ldr	r3, [r3, #0]
 8004282:	781b      	ldrb	r3, [r3, #0]
 8004284:	2b32      	cmp	r3, #50	@ 0x32
 8004286:	d102      	bne.n	800428e <ParseBuffer+0x3b6>
      beurs = true;
 8004288:	4b06      	ldr	r3, [pc, #24]	@ (80042a4 <ParseBuffer+0x3cc>)
 800428a:	2201      	movs	r2, #1
 800428c:	701a      	strb	r2, [r3, #0]
    }
  }
  return(status);
 800428e:	2360      	movs	r3, #96	@ 0x60
 8004290:	33ff      	adds	r3, #255	@ 0xff
 8004292:	18fb      	adds	r3, r7, r3
 8004294:	781b      	ldrb	r3, [r3, #0]

}
 8004296:	0018      	movs	r0, r3
 8004298:	46bd      	mov	sp, r7
 800429a:	b059      	add	sp, #356	@ 0x164
 800429c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800429e:	46c0      	nop			@ (mov r8, r8)
 80042a0:	2000054c 	.word	0x2000054c
 80042a4:	2000054e 	.word	0x2000054e

080042a8 <PollAwake>:
 //PollAwake, RFPOWER and CheckRFPower necesarry when comming out of sleep mode.
bool PollAwake(){
 80042a8:	b580      	push	{r7, lr}
 80042aa:	b082      	sub	sp, #8
 80042ac:	af00      	add	r7, sp, #0
  char* atCommand = "ATE0\r\n";
 80042ae:	4b0b      	ldr	r3, [pc, #44]	@ (80042dc <PollAwake+0x34>)
 80042b0:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	0018      	movs	r0, r3
 80042b6:	f7fb ff59 	bl	800016c <strlen>
 80042ba:	0003      	movs	r3, r0
 80042bc:	b29a      	uxth	r2, r3
 80042be:	687b      	ldr	r3, [r7, #4]
 80042c0:	0011      	movs	r1, r2
 80042c2:	0018      	movs	r0, r3
 80042c4:	f7ff fb6e 	bl	80039a4 <ESP_Send>
 80042c8:	1e03      	subs	r3, r0, #0
 80042ca:	d001      	beq.n	80042d0 <PollAwake+0x28>
    return true;
 80042cc:	2301      	movs	r3, #1
 80042ce:	e000      	b.n	80042d2 <PollAwake+0x2a>
  }
  else{
    return false;
 80042d0:	2300      	movs	r3, #0
  }
}
 80042d2:	0018      	movs	r0, r3
 80042d4:	46bd      	mov	sp, r7
 80042d6:	b002      	add	sp, #8
 80042d8:	bd80      	pop	{r7, pc}
 80042da:	46c0      	nop			@ (mov r8, r8)
 80042dc:	0801f8e4 	.word	0x0801f8e4

080042e0 <RFPower>:
bool RFPower(){
 80042e0:	b580      	push	{r7, lr}
 80042e2:	b082      	sub	sp, #8
 80042e4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER=70\r\n";
 80042e6:	4b0b      	ldr	r3, [pc, #44]	@ (8004314 <RFPower+0x34>)
 80042e8:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80042ea:	687b      	ldr	r3, [r7, #4]
 80042ec:	0018      	movs	r0, r3
 80042ee:	f7fb ff3d 	bl	800016c <strlen>
 80042f2:	0003      	movs	r3, r0
 80042f4:	b29a      	uxth	r2, r3
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	0011      	movs	r1, r2
 80042fa:	0018      	movs	r0, r3
 80042fc:	f7ff fb52 	bl	80039a4 <ESP_Send>
 8004300:	1e03      	subs	r3, r0, #0
 8004302:	d001      	beq.n	8004308 <RFPower+0x28>
    return true;
 8004304:	2301      	movs	r3, #1
 8004306:	e000      	b.n	800430a <RFPower+0x2a>
  }
  else{
    return false;
 8004308:	2300      	movs	r3, #0
  }
}
 800430a:	0018      	movs	r0, r3
 800430c:	46bd      	mov	sp, r7
 800430e:	b002      	add	sp, #8
 8004310:	bd80      	pop	{r7, pc}
 8004312:	46c0      	nop			@ (mov r8, r8)
 8004314:	0801f8ec 	.word	0x0801f8ec

08004318 <CheckRFPower>:
bool CheckRFPower(){
 8004318:	b580      	push	{r7, lr}
 800431a:	b082      	sub	sp, #8
 800431c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RFPOWER?\r\n";
 800431e:	4b0b      	ldr	r3, [pc, #44]	@ (800434c <CheckRFPower+0x34>)
 8004320:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	0018      	movs	r0, r3
 8004326:	f7fb ff21 	bl	800016c <strlen>
 800432a:	0003      	movs	r3, r0
 800432c:	b29a      	uxth	r2, r3
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	0011      	movs	r1, r2
 8004332:	0018      	movs	r0, r3
 8004334:	f7ff fb36 	bl	80039a4 <ESP_Send>
 8004338:	1e03      	subs	r3, r0, #0
 800433a:	d001      	beq.n	8004340 <CheckRFPower+0x28>
    return true;
 800433c:	2301      	movs	r3, #1
 800433e:	e000      	b.n	8004342 <CheckRFPower+0x2a>
  }
  else{
    return false;
 8004340:	2300      	movs	r3, #0
  }
}
 8004342:	0018      	movs	r0, r3
 8004344:	46bd      	mov	sp, r7
 8004346:	b002      	add	sp, #8
 8004348:	bd80      	pop	{r7, pc}
 800434a:	46c0      	nop			@ (mov r8, r8)
 800434c:	0801f8fc 	.word	0x0801f8fc

08004350 <ATRestore>:
//Only necesarry on first init
bool ATRestore(){
 8004350:	b580      	push	{r7, lr}
 8004352:	b082      	sub	sp, #8
 8004354:	af00      	add	r7, sp, #0
  char* atCommand = "AT+RESTORE\r\n";
 8004356:	4b0b      	ldr	r3, [pc, #44]	@ (8004384 <ATRestore+0x34>)
 8004358:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	0018      	movs	r0, r3
 800435e:	f7fb ff05 	bl	800016c <strlen>
 8004362:	0003      	movs	r3, r0
 8004364:	b29a      	uxth	r2, r3
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	0011      	movs	r1, r2
 800436a:	0018      	movs	r0, r3
 800436c:	f7ff fb1a 	bl	80039a4 <ESP_Send>
 8004370:	1e03      	subs	r3, r0, #0
 8004372:	d001      	beq.n	8004378 <ATRestore+0x28>
    return true;
 8004374:	2301      	movs	r3, #1
 8004376:	e000      	b.n	800437a <ATRestore+0x2a>
  }
  else{
    return false;
 8004378:	2300      	movs	r3, #0
  }
}
 800437a:	0018      	movs	r0, r3
 800437c:	46bd      	mov	sp, r7
 800437e:	b002      	add	sp, #8
 8004380:	bd80      	pop	{r7, pc}
 8004382:	46c0      	nop			@ (mov r8, r8)
 8004384:	0801f90c 	.word	0x0801f90c

08004388 <CWINIT>:
bool CWINIT(){
 8004388:	b580      	push	{r7, lr}
 800438a:	b082      	sub	sp, #8
 800438c:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWINIT=1\r\n";
 800438e:	4b0b      	ldr	r3, [pc, #44]	@ (80043bc <CWINIT+0x34>)
 8004390:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	0018      	movs	r0, r3
 8004396:	f7fb fee9 	bl	800016c <strlen>
 800439a:	0003      	movs	r3, r0
 800439c:	b29a      	uxth	r2, r3
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	0011      	movs	r1, r2
 80043a2:	0018      	movs	r0, r3
 80043a4:	f7ff fafe 	bl	80039a4 <ESP_Send>
 80043a8:	1e03      	subs	r3, r0, #0
 80043aa:	d001      	beq.n	80043b0 <CWINIT+0x28>
    return true;
 80043ac:	2301      	movs	r3, #1
 80043ae:	e000      	b.n	80043b2 <CWINIT+0x2a>
  }
  else{
    return false;
 80043b0:	2300      	movs	r3, #0
  }
}
 80043b2:	0018      	movs	r0, r3
 80043b4:	46bd      	mov	sp, r7
 80043b6:	b002      	add	sp, #8
 80043b8:	bd80      	pop	{r7, pc}
 80043ba:	46c0      	nop			@ (mov r8, r8)
 80043bc:	0801f91c 	.word	0x0801f91c

080043c0 <CWMODE1>:
bool CWMODE1(){
 80043c0:	b580      	push	{r7, lr}
 80043c2:	b082      	sub	sp, #8
 80043c4:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=1\r\n";
 80043c6:	4b0b      	ldr	r3, [pc, #44]	@ (80043f4 <CWMODE1+0x34>)
 80043c8:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	0018      	movs	r0, r3
 80043ce:	f7fb fecd 	bl	800016c <strlen>
 80043d2:	0003      	movs	r3, r0
 80043d4:	b29a      	uxth	r2, r3
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	0011      	movs	r1, r2
 80043da:	0018      	movs	r0, r3
 80043dc:	f7ff fae2 	bl	80039a4 <ESP_Send>
 80043e0:	1e03      	subs	r3, r0, #0
 80043e2:	d001      	beq.n	80043e8 <CWMODE1+0x28>
    return true;
 80043e4:	2301      	movs	r3, #1
 80043e6:	e000      	b.n	80043ea <CWMODE1+0x2a>
  }
  else{
    return false;
 80043e8:	2300      	movs	r3, #0
  }
}
 80043ea:	0018      	movs	r0, r3
 80043ec:	46bd      	mov	sp, r7
 80043ee:	b002      	add	sp, #8
 80043f0:	bd80      	pop	{r7, pc}
 80043f2:	46c0      	nop			@ (mov r8, r8)
 80043f4:	0801f92c 	.word	0x0801f92c

080043f8 <CWMODE2>:
bool CWMODE2(){
 80043f8:	b580      	push	{r7, lr}
 80043fa:	b082      	sub	sp, #8
 80043fc:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=2\r\n";
 80043fe:	4b0b      	ldr	r3, [pc, #44]	@ (800442c <CWMODE2+0x34>)
 8004400:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	0018      	movs	r0, r3
 8004406:	f7fb feb1 	bl	800016c <strlen>
 800440a:	0003      	movs	r3, r0
 800440c:	b29a      	uxth	r2, r3
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	0011      	movs	r1, r2
 8004412:	0018      	movs	r0, r3
 8004414:	f7ff fac6 	bl	80039a4 <ESP_Send>
 8004418:	1e03      	subs	r3, r0, #0
 800441a:	d001      	beq.n	8004420 <CWMODE2+0x28>
    return true;
 800441c:	2301      	movs	r3, #1
 800441e:	e000      	b.n	8004422 <CWMODE2+0x2a>
  }
  else{
    return false;
 8004420:	2300      	movs	r3, #0
  }
}
 8004422:	0018      	movs	r0, r3
 8004424:	46bd      	mov	sp, r7
 8004426:	b002      	add	sp, #8
 8004428:	bd80      	pop	{r7, pc}
 800442a:	46c0      	nop			@ (mov r8, r8)
 800442c:	0801f93c 	.word	0x0801f93c

08004430 <CWAUTOCONN>:
bool CWAUTOCONN(){
 8004430:	b580      	push	{r7, lr}
 8004432:	b082      	sub	sp, #8
 8004434:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWAUTOCONN=1\r\n";
 8004436:	4b0b      	ldr	r3, [pc, #44]	@ (8004464 <CWAUTOCONN+0x34>)
 8004438:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800443a:	687b      	ldr	r3, [r7, #4]
 800443c:	0018      	movs	r0, r3
 800443e:	f7fb fe95 	bl	800016c <strlen>
 8004442:	0003      	movs	r3, r0
 8004444:	b29a      	uxth	r2, r3
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	0011      	movs	r1, r2
 800444a:	0018      	movs	r0, r3
 800444c:	f7ff faaa 	bl	80039a4 <ESP_Send>
 8004450:	1e03      	subs	r3, r0, #0
 8004452:	d001      	beq.n	8004458 <CWAUTOCONN+0x28>
    return true;
 8004454:	2301      	movs	r3, #1
 8004456:	e000      	b.n	800445a <CWAUTOCONN+0x2a>
  }
  else{
    return false;
 8004458:	2300      	movs	r3, #0
  }
}
 800445a:	0018      	movs	r0, r3
 800445c:	46bd      	mov	sp, r7
 800445e:	b002      	add	sp, #8
 8004460:	bd80      	pop	{r7, pc}
 8004462:	46c0      	nop			@ (mov r8, r8)
 8004464:	0801f94c 	.word	0x0801f94c

08004468 <CWJAP>:
bool CWJAP(){
 8004468:	b5f0      	push	{r4, r5, r6, r7, lr}
 800446a:	46c6      	mov	lr, r8
 800446c:	b500      	push	{lr}
 800446e:	b0a2      	sub	sp, #136	@ 0x88
 8004470:	af00      	add	r7, sp, #0
 8004472:	466b      	mov	r3, sp
 8004474:	4698      	mov	r8, r3
  beursTest = true;
 8004476:	4b39      	ldr	r3, [pc, #228]	@ (800455c <CWJAP+0xf4>)
 8004478:	2201      	movs	r2, #1
 800447a:	701a      	strb	r2, [r3, #0]
  char atCommandBuff[100];
  memset(atCommandBuff, '\0', 100);
 800447c:	2618      	movs	r6, #24
 800447e:	19bb      	adds	r3, r7, r6
 8004480:	2264      	movs	r2, #100	@ 0x64
 8004482:	2100      	movs	r1, #0
 8004484:	0018      	movs	r0, r3
 8004486:	f018 f817 	bl	801c4b8 <memset>
  sprintf(atCommandBuff, "AT+CWJAP=\"%s\",\"%s\"\r\n", SSIDBeurs, PasswordBeurs);
 800448a:	4b35      	ldr	r3, [pc, #212]	@ (8004560 <CWJAP+0xf8>)
 800448c:	4a35      	ldr	r2, [pc, #212]	@ (8004564 <CWJAP+0xfc>)
 800448e:	4936      	ldr	r1, [pc, #216]	@ (8004568 <CWJAP+0x100>)
 8004490:	19b8      	adds	r0, r7, r6
 8004492:	f017 ff6d 	bl	801c370 <siprintf>
  uint8_t len = strlen(atCommandBuff);
 8004496:	19bb      	adds	r3, r7, r6
 8004498:	0018      	movs	r0, r3
 800449a:	f7fb fe67 	bl	800016c <strlen>
 800449e:	0002      	movs	r2, r0
 80044a0:	216f      	movs	r1, #111	@ 0x6f
 80044a2:	0030      	movs	r0, r6
 80044a4:	180b      	adds	r3, r1, r0
 80044a6:	19db      	adds	r3, r3, r7
 80044a8:	701a      	strb	r2, [r3, #0]
  char atCommand[len+1];
 80044aa:	180b      	adds	r3, r1, r0
 80044ac:	19db      	adds	r3, r3, r7
 80044ae:	781b      	ldrb	r3, [r3, #0]
 80044b0:	3301      	adds	r3, #1
 80044b2:	1e5a      	subs	r2, r3, #1
 80044b4:	2180      	movs	r1, #128	@ 0x80
 80044b6:	1879      	adds	r1, r7, r1
 80044b8:	600a      	str	r2, [r1, #0]
 80044ba:	001a      	movs	r2, r3
 80044bc:	60ba      	str	r2, [r7, #8]
 80044be:	2200      	movs	r2, #0
 80044c0:	60fa      	str	r2, [r7, #12]
 80044c2:	68b8      	ldr	r0, [r7, #8]
 80044c4:	68f9      	ldr	r1, [r7, #12]
 80044c6:	0002      	movs	r2, r0
 80044c8:	0f52      	lsrs	r2, r2, #29
 80044ca:	000e      	movs	r6, r1
 80044cc:	00f6      	lsls	r6, r6, #3
 80044ce:	617e      	str	r6, [r7, #20]
 80044d0:	697e      	ldr	r6, [r7, #20]
 80044d2:	4316      	orrs	r6, r2
 80044d4:	617e      	str	r6, [r7, #20]
 80044d6:	0002      	movs	r2, r0
 80044d8:	00d2      	lsls	r2, r2, #3
 80044da:	613a      	str	r2, [r7, #16]
 80044dc:	001a      	movs	r2, r3
 80044de:	603a      	str	r2, [r7, #0]
 80044e0:	2200      	movs	r2, #0
 80044e2:	607a      	str	r2, [r7, #4]
 80044e4:	6838      	ldr	r0, [r7, #0]
 80044e6:	6879      	ldr	r1, [r7, #4]
 80044e8:	0002      	movs	r2, r0
 80044ea:	0f52      	lsrs	r2, r2, #29
 80044ec:	000e      	movs	r6, r1
 80044ee:	00f5      	lsls	r5, r6, #3
 80044f0:	4315      	orrs	r5, r2
 80044f2:	0002      	movs	r2, r0
 80044f4:	00d4      	lsls	r4, r2, #3
 80044f6:	3307      	adds	r3, #7
 80044f8:	08db      	lsrs	r3, r3, #3
 80044fa:	00db      	lsls	r3, r3, #3
 80044fc:	466a      	mov	r2, sp
 80044fe:	1ad3      	subs	r3, r2, r3
 8004500:	469d      	mov	sp, r3
 8004502:	466b      	mov	r3, sp
 8004504:	3300      	adds	r3, #0
 8004506:	67fb      	str	r3, [r7, #124]	@ 0x7c
  memset(atCommand, '\0', len+1);
 8004508:	246f      	movs	r4, #111	@ 0x6f
 800450a:	2518      	movs	r5, #24
 800450c:	1963      	adds	r3, r4, r5
 800450e:	19db      	adds	r3, r3, r7
 8004510:	781b      	ldrb	r3, [r3, #0]
 8004512:	3301      	adds	r3, #1
 8004514:	001a      	movs	r2, r3
 8004516:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8004518:	2100      	movs	r1, #0
 800451a:	0018      	movs	r0, r3
 800451c:	f017 ffcc 	bl	801c4b8 <memset>
  strncpy(atCommand, atCommandBuff, len);
 8004520:	1963      	adds	r3, r4, r5
 8004522:	19db      	adds	r3, r3, r7
 8004524:	781a      	ldrb	r2, [r3, #0]
 8004526:	1979      	adds	r1, r7, r5
 8004528:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800452a:	0018      	movs	r0, r3
 800452c:	f017 ffeb 	bl	801c506 <strncpy>
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, len)) {
 8004530:	1963      	adds	r3, r4, r5
 8004532:	19db      	adds	r3, r3, r7
 8004534:	781b      	ldrb	r3, [r3, #0]
 8004536:	b29a      	uxth	r2, r3
 8004538:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 800453a:	0011      	movs	r1, r2
 800453c:	0018      	movs	r0, r3
 800453e:	f7ff fa31 	bl	80039a4 <ESP_Send>
 8004542:	1e03      	subs	r3, r0, #0
 8004544:	d001      	beq.n	800454a <CWJAP+0xe2>
    return true;
 8004546:	2301      	movs	r3, #1
 8004548:	e000      	b.n	800454c <CWJAP+0xe4>
  }
  else{
    return false;
 800454a:	2300      	movs	r3, #0
 800454c:	46c5      	mov	sp, r8
  }
}
 800454e:	0018      	movs	r0, r3
 8004550:	46bd      	mov	sp, r7
 8004552:	b022      	add	sp, #136	@ 0x88
 8004554:	bc80      	pop	{r7}
 8004556:	46b8      	mov	r8, r7
 8004558:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800455a:	46c0      	nop			@ (mov r8, r8)
 800455c:	2000054d 	.word	0x2000054d
 8004560:	08020700 	.word	0x08020700
 8004564:	080206f4 	.word	0x080206f4
 8004568:	0801f960 	.word	0x0801f960

0800456c <CWMODE3>:
bool CWMODE3(){
 800456c:	b580      	push	{r7, lr}
 800456e:	b082      	sub	sp, #8
 8004570:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWMODE=3\r\n";
 8004572:	4b0b      	ldr	r3, [pc, #44]	@ (80045a0 <CWMODE3+0x34>)
 8004574:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	0018      	movs	r0, r3
 800457a:	f7fb fdf7 	bl	800016c <strlen>
 800457e:	0003      	movs	r3, r0
 8004580:	b29a      	uxth	r2, r3
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	0011      	movs	r1, r2
 8004586:	0018      	movs	r0, r3
 8004588:	f7ff fa0c 	bl	80039a4 <ESP_Send>
 800458c:	1e03      	subs	r3, r0, #0
 800458e:	d001      	beq.n	8004594 <CWMODE3+0x28>
    return true;
 8004590:	2301      	movs	r3, #1
 8004592:	e000      	b.n	8004596 <CWMODE3+0x2a>
  }
  else{
    return false;
 8004594:	2300      	movs	r3, #0
  }
}
 8004596:	0018      	movs	r0, r3
 8004598:	46bd      	mov	sp, r7
 800459a:	b002      	add	sp, #8
 800459c:	bd80      	pop	{r7, pc}
 800459e:	46c0      	nop			@ (mov r8, r8)
 80045a0:	0801f978 	.word	0x0801f978

080045a4 <CWSTATE>:
bool CWSTATE(){
 80045a4:	b580      	push	{r7, lr}
 80045a6:	b082      	sub	sp, #8
 80045a8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSTATE?\r\n";
 80045aa:	4b0b      	ldr	r3, [pc, #44]	@ (80045d8 <CWSTATE+0x34>)
 80045ac:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	0018      	movs	r0, r3
 80045b2:	f7fb fddb 	bl	800016c <strlen>
 80045b6:	0003      	movs	r3, r0
 80045b8:	b29a      	uxth	r2, r3
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	0011      	movs	r1, r2
 80045be:	0018      	movs	r0, r3
 80045c0:	f7ff f9f0 	bl	80039a4 <ESP_Send>
 80045c4:	1e03      	subs	r3, r0, #0
 80045c6:	d001      	beq.n	80045cc <CWSTATE+0x28>
    return true;
 80045c8:	2301      	movs	r3, #1
 80045ca:	e000      	b.n	80045ce <CWSTATE+0x2a>
  }
  else{
    return false;
 80045cc:	2300      	movs	r3, #0
  }
}
 80045ce:	0018      	movs	r0, r3
 80045d0:	46bd      	mov	sp, r7
 80045d2:	b002      	add	sp, #8
 80045d4:	bd80      	pop	{r7, pc}
 80045d6:	46c0      	nop			@ (mov r8, r8)
 80045d8:	0801f988 	.word	0x0801f988

080045dc <CWSAP>:
bool CWSAP(){
 80045dc:	b580      	push	{r7, lr}
 80045de:	b082      	sub	sp, #8
 80045e0:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CWSAP=\"WOTS_Config\",\"\",11,0,1\r\n";
 80045e2:	4b0b      	ldr	r3, [pc, #44]	@ (8004610 <CWSAP+0x34>)
 80045e4:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80045e6:	687b      	ldr	r3, [r7, #4]
 80045e8:	0018      	movs	r0, r3
 80045ea:	f7fb fdbf 	bl	800016c <strlen>
 80045ee:	0003      	movs	r3, r0
 80045f0:	b29a      	uxth	r2, r3
 80045f2:	687b      	ldr	r3, [r7, #4]
 80045f4:	0011      	movs	r1, r2
 80045f6:	0018      	movs	r0, r3
 80045f8:	f7ff f9d4 	bl	80039a4 <ESP_Send>
 80045fc:	1e03      	subs	r3, r0, #0
 80045fe:	d001      	beq.n	8004604 <CWSAP+0x28>
    return true;
 8004600:	2301      	movs	r3, #1
 8004602:	e000      	b.n	8004606 <CWSAP+0x2a>
  }
  else{
    return false;
 8004604:	2300      	movs	r3, #0
  }
}
 8004606:	0018      	movs	r0, r3
 8004608:	46bd      	mov	sp, r7
 800460a:	b002      	add	sp, #8
 800460c:	bd80      	pop	{r7, pc}
 800460e:	46c0      	nop			@ (mov r8, r8)
 8004610:	0801f998 	.word	0x0801f998

08004614 <CIPMUX>:
bool CIPMUX(){
 8004614:	b580      	push	{r7, lr}
 8004616:	b082      	sub	sp, #8
 8004618:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPMUX=0\r\n";
 800461a:	4b0b      	ldr	r3, [pc, #44]	@ (8004648 <CIPMUX+0x34>)
 800461c:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 800461e:	687b      	ldr	r3, [r7, #4]
 8004620:	0018      	movs	r0, r3
 8004622:	f7fb fda3 	bl	800016c <strlen>
 8004626:	0003      	movs	r3, r0
 8004628:	b29a      	uxth	r2, r3
 800462a:	687b      	ldr	r3, [r7, #4]
 800462c:	0011      	movs	r1, r2
 800462e:	0018      	movs	r0, r3
 8004630:	f7ff f9b8 	bl	80039a4 <ESP_Send>
 8004634:	1e03      	subs	r3, r0, #0
 8004636:	d001      	beq.n	800463c <CIPMUX+0x28>
    return true;
 8004638:	2301      	movs	r3, #1
 800463a:	e000      	b.n	800463e <CIPMUX+0x2a>
  }
  else{
    return false;
 800463c:	2300      	movs	r3, #0
  }
}
 800463e:	0018      	movs	r0, r3
 8004640:	46bd      	mov	sp, r7
 8004642:	b002      	add	sp, #8
 8004644:	bd80      	pop	{r7, pc}
 8004646:	46c0      	nop			@ (mov r8, r8)
 8004648:	0801f9bc 	.word	0x0801f9bc

0800464c <WEBSERVER>:
//This command sets the webserver, only necessary for first initialization.
bool WEBSERVER(){
 800464c:	b580      	push	{r7, lr}
 800464e:	b082      	sub	sp, #8
 8004650:	af00      	add	r7, sp, #0
  char* atCommand = "AT+WEBSERVER=1,80,60\r\n";
 8004652:	4b0b      	ldr	r3, [pc, #44]	@ (8004680 <WEBSERVER+0x34>)
 8004654:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004656:	687b      	ldr	r3, [r7, #4]
 8004658:	0018      	movs	r0, r3
 800465a:	f7fb fd87 	bl	800016c <strlen>
 800465e:	0003      	movs	r3, r0
 8004660:	b29a      	uxth	r2, r3
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	0011      	movs	r1, r2
 8004666:	0018      	movs	r0, r3
 8004668:	f7ff f99c 	bl	80039a4 <ESP_Send>
 800466c:	1e03      	subs	r3, r0, #0
 800466e:	d001      	beq.n	8004674 <WEBSERVER+0x28>
    return true;
 8004670:	2301      	movs	r3, #1
 8004672:	e000      	b.n	8004676 <WEBSERVER+0x2a>
  }
  else{
    return false;
 8004674:	2300      	movs	r3, #0
  }
}
 8004676:	0018      	movs	r0, r3
 8004678:	46bd      	mov	sp, r7
 800467a:	b002      	add	sp, #8
 800467c:	bd80      	pop	{r7, pc}
 800467e:	46c0      	nop			@ (mov r8, r8)
 8004680:	0801f9cc 	.word	0x0801f9cc

08004684 <HTTPCPOST>:
//These are the commands necesarry for sending data.
bool HTTPCPOST(){
 8004684:	b590      	push	{r4, r7, lr}
 8004686:	b0c5      	sub	sp, #276	@ 0x114
 8004688:	af02      	add	r7, sp, #8
  char atCommandBuff[256];
  memset(atCommandBuff, '\0', 256);
 800468a:	2380      	movs	r3, #128	@ 0x80
 800468c:	005a      	lsls	r2, r3, #1
 800468e:	1d3b      	adds	r3, r7, #4
 8004690:	2100      	movs	r1, #0
 8004692:	0018      	movs	r0, r3
 8004694:	f017 ff10 	bl	801c4b8 <memset>
  uint16_t length = CreateMessage(beurs);
 8004698:	4b22      	ldr	r3, [pc, #136]	@ (8004724 <HTTPCPOST+0xa0>)
 800469a:	781b      	ldrb	r3, [r3, #0]
 800469c:	1dfc      	adds	r4, r7, #7
 800469e:	34ff      	adds	r4, #255	@ 0xff
 80046a0:	0018      	movs	r0, r3
 80046a2:	f7ff fa27 	bl	8003af4 <CreateMessage>
 80046a6:	0003      	movs	r3, r0
 80046a8:	8023      	strh	r3, [r4, #0]
  if(beurs){
 80046aa:	4b1e      	ldr	r3, [pc, #120]	@ (8004724 <HTTPCPOST+0xa0>)
 80046ac:	781b      	ldrb	r3, [r3, #0]
 80046ae:	2b00      	cmp	r3, #0
 80046b0:	d008      	beq.n	80046c4 <HTTPCPOST+0x40>
    sprintf(atCommandBuff, "AT+HTTPCPOST=%s,%d,1,\"content-type: application/json\"\r\n", APIBeurs, length);
 80046b2:	1dfb      	adds	r3, r7, #7
 80046b4:	33ff      	adds	r3, #255	@ 0xff
 80046b6:	881b      	ldrh	r3, [r3, #0]
 80046b8:	4a1b      	ldr	r2, [pc, #108]	@ (8004728 <HTTPCPOST+0xa4>)
 80046ba:	491c      	ldr	r1, [pc, #112]	@ (800472c <HTTPCPOST+0xa8>)
 80046bc:	1d38      	adds	r0, r7, #4
 80046be:	f017 fe57 	bl	801c370 <siprintf>
 80046c2:	e016      	b.n	80046f2 <HTTPCPOST+0x6e>
  }
  else{
    static uint8_t boxConfig[IdSize];
    static char Buffer[25];
    ReadUint8ArrayEEprom(BoxConfigAddr, boxConfig, IdSize);
 80046c4:	4b1a      	ldr	r3, [pc, #104]	@ (8004730 <HTTPCPOST+0xac>)
 80046c6:	481b      	ldr	r0, [pc, #108]	@ (8004734 <HTTPCPOST+0xb0>)
 80046c8:	220c      	movs	r2, #12
 80046ca:	0019      	movs	r1, r3
 80046cc:	f7ff f814 	bl	80036f8 <ReadUint8ArrayEEprom>
    uint8ArrayToString(Buffer, boxConfig);
 80046d0:	4a17      	ldr	r2, [pc, #92]	@ (8004730 <HTTPCPOST+0xac>)
 80046d2:	4b19      	ldr	r3, [pc, #100]	@ (8004738 <HTTPCPOST+0xb4>)
 80046d4:	0011      	movs	r1, r2
 80046d6:	0018      	movs	r0, r3
 80046d8:	f7ff f9e8 	bl	8003aac <uint8ArrayToString>
    sprintf(atCommandBuff, "AT+HTTPCPOST=%s%s/data\",%d,1,\"content-type: application/json\"\r\n", API, Buffer, length);
 80046dc:	1dfb      	adds	r3, r7, #7
 80046de:	33ff      	adds	r3, #255	@ 0xff
 80046e0:	881b      	ldrh	r3, [r3, #0]
 80046e2:	4c15      	ldr	r4, [pc, #84]	@ (8004738 <HTTPCPOST+0xb4>)
 80046e4:	4a15      	ldr	r2, [pc, #84]	@ (800473c <HTTPCPOST+0xb8>)
 80046e6:	4916      	ldr	r1, [pc, #88]	@ (8004740 <HTTPCPOST+0xbc>)
 80046e8:	1d38      	adds	r0, r7, #4
 80046ea:	9300      	str	r3, [sp, #0]
 80046ec:	0023      	movs	r3, r4
 80046ee:	f017 fe3f 	bl	801c370 <siprintf>
  }
  uint16_t len = strlen(atCommandBuff);
 80046f2:	1d3b      	adds	r3, r7, #4
 80046f4:	0018      	movs	r0, r3
 80046f6:	f7fb fd39 	bl	800016c <strlen>
 80046fa:	0002      	movs	r2, r0
 80046fc:	1d7b      	adds	r3, r7, #5
 80046fe:	33ff      	adds	r3, #255	@ 0xff
 8004700:	801a      	strh	r2, [r3, #0]
  if(ESP_Send((uint8_t*)atCommandBuff, len)){
 8004702:	1d7b      	adds	r3, r7, #5
 8004704:	33ff      	adds	r3, #255	@ 0xff
 8004706:	881a      	ldrh	r2, [r3, #0]
 8004708:	1d3b      	adds	r3, r7, #4
 800470a:	0011      	movs	r1, r2
 800470c:	0018      	movs	r0, r3
 800470e:	f7ff f949 	bl	80039a4 <ESP_Send>
 8004712:	1e03      	subs	r3, r0, #0
 8004714:	d001      	beq.n	800471a <HTTPCPOST+0x96>
    return true;
 8004716:	2301      	movs	r3, #1
 8004718:	e000      	b.n	800471c <HTTPCPOST+0x98>
  }
  else{
    return false;
 800471a:	2300      	movs	r3, #0
  }
}
 800471c:	0018      	movs	r0, r3
 800471e:	46bd      	mov	sp, r7
 8004720:	b043      	add	sp, #268	@ 0x10c
 8004722:	bd90      	pop	{r4, r7, pc}
 8004724:	2000054e 	.word	0x2000054e
 8004728:	08020720 	.word	0x08020720
 800472c:	0801f9e4 	.word	0x0801f9e4
 8004730:	20000a5c 	.word	0x20000a5c
 8004734:	08080000 	.word	0x08080000
 8004738:	20000a68 	.word	0x20000a68
 800473c:	0802075c 	.word	0x0802075c
 8004740:	0801fa1c 	.word	0x0801fa1c

08004744 <SENDDATA>:
bool SENDDATA(){
 8004744:	b580      	push	{r7, lr}
 8004746:	b082      	sub	sp, #8
 8004748:	af00      	add	r7, sp, #0
  uint16_t len = strlen(message);
 800474a:	4b0b      	ldr	r3, [pc, #44]	@ (8004778 <SENDDATA+0x34>)
 800474c:	0018      	movs	r0, r3
 800474e:	f7fb fd0d 	bl	800016c <strlen>
 8004752:	0002      	movs	r2, r0
 8004754:	1dbb      	adds	r3, r7, #6
 8004756:	801a      	strh	r2, [r3, #0]
  if(ESP_Send((uint8_t*)message, len)) {
 8004758:	1dbb      	adds	r3, r7, #6
 800475a:	881a      	ldrh	r2, [r3, #0]
 800475c:	4b06      	ldr	r3, [pc, #24]	@ (8004778 <SENDDATA+0x34>)
 800475e:	0011      	movs	r1, r2
 8004760:	0018      	movs	r0, r3
 8004762:	f7ff f91f 	bl	80039a4 <ESP_Send>
 8004766:	1e03      	subs	r3, r0, #0
 8004768:	d001      	beq.n	800476e <SENDDATA+0x2a>
    return true;
 800476a:	2301      	movs	r3, #1
 800476c:	e000      	b.n	8004770 <SENDDATA+0x2c>
  }
  else{
    return false;
 800476e:	2300      	movs	r3, #0
  }
}
 8004770:	0018      	movs	r0, r3
 8004772:	46bd      	mov	sp, r7
 8004774:	b002      	add	sp, #8
 8004776:	bd80      	pop	{r7, pc}
 8004778:	2000057c 	.word	0x2000057c

0800477c <SLEEP>:
bool SLEEP(){
 800477c:	b580      	push	{r7, lr}
 800477e:	b082      	sub	sp, #8
 8004780:	af00      	add	r7, sp, #0
  char* atCommand = "AT+GSLP=30000\r\n";
 8004782:	4b0b      	ldr	r3, [pc, #44]	@ (80047b0 <SLEEP+0x34>)
 8004784:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	0018      	movs	r0, r3
 800478a:	f7fb fcef 	bl	800016c <strlen>
 800478e:	0003      	movs	r3, r0
 8004790:	b29a      	uxth	r2, r3
 8004792:	687b      	ldr	r3, [r7, #4]
 8004794:	0011      	movs	r1, r2
 8004796:	0018      	movs	r0, r3
 8004798:	f7ff f904 	bl	80039a4 <ESP_Send>
 800479c:	1e03      	subs	r3, r0, #0
 800479e:	d001      	beq.n	80047a4 <SLEEP+0x28>
    return true;
 80047a0:	2301      	movs	r3, #1
 80047a2:	e000      	b.n	80047a6 <SLEEP+0x2a>
  }
  else{
    return false;
 80047a4:	2300      	movs	r3, #0
  }
}
 80047a6:	0018      	movs	r0, r3
 80047a8:	46bd      	mov	sp, r7
 80047aa:	b002      	add	sp, #8
 80047ac:	bd80      	pop	{r7, pc}
 80047ae:	46c0      	nop			@ (mov r8, r8)
 80047b0:	0801fa5c 	.word	0x0801fa5c

080047b4 <CIPSNTPCFG>:
bool CIPSNTPCFG(){
 80047b4:	b580      	push	{r7, lr}
 80047b6:	b082      	sub	sp, #8
 80047b8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPCFG=1,100,\"nl.pool.ntp.org\",\"time.google.com\",\"time.windows.com\"\r\n";
 80047ba:	4b0d      	ldr	r3, [pc, #52]	@ (80047f0 <CIPSNTPCFG+0x3c>)
 80047bc:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80047be:	687b      	ldr	r3, [r7, #4]
 80047c0:	0018      	movs	r0, r3
 80047c2:	f7fb fcd3 	bl	800016c <strlen>
 80047c6:	0003      	movs	r3, r0
 80047c8:	b29a      	uxth	r2, r3
 80047ca:	687b      	ldr	r3, [r7, #4]
 80047cc:	0011      	movs	r1, r2
 80047ce:	0018      	movs	r0, r3
 80047d0:	f7ff f8e8 	bl	80039a4 <ESP_Send>
 80047d4:	1e03      	subs	r3, r0, #0
 80047d6:	d006      	beq.n	80047e6 <CIPSNTPCFG+0x32>
    HAL_Delay(1000);
 80047d8:	23fa      	movs	r3, #250	@ 0xfa
 80047da:	009b      	lsls	r3, r3, #2
 80047dc:	0018      	movs	r0, r3
 80047de:	f007 fb43 	bl	800be68 <HAL_Delay>
    return true;
 80047e2:	2301      	movs	r3, #1
 80047e4:	e000      	b.n	80047e8 <CIPSNTPCFG+0x34>
  }
  else{
    return false;
 80047e6:	2300      	movs	r3, #0
  }
}
 80047e8:	0018      	movs	r0, r3
 80047ea:	46bd      	mov	sp, r7
 80047ec:	b002      	add	sp, #8
 80047ee:	bd80      	pop	{r7, pc}
 80047f0:	0801fa6c 	.word	0x0801fa6c

080047f4 <CIPSNTPTIME>:
bool CIPSNTPTIME(){
 80047f4:	b580      	push	{r7, lr}
 80047f6:	b082      	sub	sp, #8
 80047f8:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPTIME?\r\n";
 80047fa:	4b0b      	ldr	r3, [pc, #44]	@ (8004828 <CIPSNTPTIME+0x34>)
 80047fc:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	0018      	movs	r0, r3
 8004802:	f7fb fcb3 	bl	800016c <strlen>
 8004806:	0003      	movs	r3, r0
 8004808:	b29a      	uxth	r2, r3
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	0011      	movs	r1, r2
 800480e:	0018      	movs	r0, r3
 8004810:	f7ff f8c8 	bl	80039a4 <ESP_Send>
 8004814:	1e03      	subs	r3, r0, #0
 8004816:	d001      	beq.n	800481c <CIPSNTPTIME+0x28>
    return true;
 8004818:	2301      	movs	r3, #1
 800481a:	e000      	b.n	800481e <CIPSNTPTIME+0x2a>
  }
  else{
    return false;
 800481c:	2300      	movs	r3, #0
  }
}
 800481e:	0018      	movs	r0, r3
 8004820:	46bd      	mov	sp, r7
 8004822:	b002      	add	sp, #8
 8004824:	bd80      	pop	{r7, pc}
 8004826:	46c0      	nop			@ (mov r8, r8)
 8004828:	0801fabc 	.word	0x0801fabc

0800482c <CIPSNTPINTV>:
bool CIPSNTPINTV(){
 800482c:	b580      	push	{r7, lr}
 800482e:	b082      	sub	sp, #8
 8004830:	af00      	add	r7, sp, #0
  char* atCommand = "AT+CIPSNTPINTV=14400\r\n";
 8004832:	4b0b      	ldr	r3, [pc, #44]	@ (8004860 <CIPSNTPINTV+0x34>)
 8004834:	607b      	str	r3, [r7, #4]
  //SetCommandBuffer(atCommand);
  if(ESP_Send((uint8_t*)atCommand, strlen(atCommand))) {
 8004836:	687b      	ldr	r3, [r7, #4]
 8004838:	0018      	movs	r0, r3
 800483a:	f7fb fc97 	bl	800016c <strlen>
 800483e:	0003      	movs	r3, r0
 8004840:	b29a      	uxth	r2, r3
 8004842:	687b      	ldr	r3, [r7, #4]
 8004844:	0011      	movs	r1, r2
 8004846:	0018      	movs	r0, r3
 8004848:	f7ff f8ac 	bl	80039a4 <ESP_Send>
 800484c:	1e03      	subs	r3, r0, #0
 800484e:	d001      	beq.n	8004854 <CIPSNTPINTV+0x28>
    return true;
 8004850:	2301      	movs	r3, #1
 8004852:	e000      	b.n	8004856 <CIPSNTPINTV+0x2a>
  }
  else{
    return false;
 8004854:	2300      	movs	r3, #0
  }
}
 8004856:	0018      	movs	r0, r3
 8004858:	46bd      	mov	sp, r7
 800485a:	b002      	add	sp, #8
 800485c:	bd80      	pop	{r7, pc}
 800485e:	46c0      	nop			@ (mov r8, r8)
 8004860:	0801fad0 	.word	0x0801fad0

08004864 <DMA_ProcessBuffer>:

Receive_Status DMA_ProcessBuffer(uint8_t expectation) {
 8004864:	b5b0      	push	{r4, r5, r7, lr}
 8004866:	b086      	sub	sp, #24
 8004868:	af02      	add	r7, sp, #8
 800486a:	0002      	movs	r2, r0
 800486c:	1dfb      	adds	r3, r7, #7
 800486e:	701a      	strb	r2, [r3, #0]
    uint16_t pos = ESP_MAX_BUFFER_SIZE - __HAL_DMA_GET_COUNTER(&hdma_usart4_rx);
 8004870:	4b73      	ldr	r3, [pc, #460]	@ (8004a40 <DMA_ProcessBuffer+0x1dc>)
 8004872:	681b      	ldr	r3, [r3, #0]
 8004874:	685b      	ldr	r3, [r3, #4]
 8004876:	b29a      	uxth	r2, r3
 8004878:	200e      	movs	r0, #14
 800487a:	183b      	adds	r3, r7, r0
 800487c:	2180      	movs	r1, #128	@ 0x80
 800487e:	0049      	lsls	r1, r1, #1
 8004880:	1a8a      	subs	r2, r1, r2
 8004882:	801a      	strh	r2, [r3, #0]
    static volatile uint8_t OldPos = 0;
    static volatile uint8_t TempPos = 0;
    Receive_Status status = RECEIVE_STATUS_INCOMPLETE;
 8004884:	230d      	movs	r3, #13
 8004886:	18fb      	adds	r3, r7, r3
 8004888:	2203      	movs	r2, #3
 800488a:	701a      	strb	r2, [r3, #0]
    if(pos > ESP_MAX_BUFFER_SIZE) {
 800488c:	183b      	adds	r3, r7, r0
 800488e:	881a      	ldrh	r2, [r3, #0]
 8004890:	2380      	movs	r3, #128	@ 0x80
 8004892:	005b      	lsls	r3, r3, #1
 8004894:	429a      	cmp	r2, r3
 8004896:	d903      	bls.n	80048a0 <DMA_ProcessBuffer+0x3c>
      pos = ESP_MAX_BUFFER_SIZE;
 8004898:	183b      	adds	r3, r7, r0
 800489a:	2280      	movs	r2, #128	@ 0x80
 800489c:	0052      	lsls	r2, r2, #1
 800489e:	801a      	strh	r2, [r3, #0]
    }
    if(pos == OldPos){
 80048a0:	4b68      	ldr	r3, [pc, #416]	@ (8004a44 <DMA_ProcessBuffer+0x1e0>)
 80048a2:	781b      	ldrb	r3, [r3, #0]
 80048a4:	b2db      	uxtb	r3, r3
 80048a6:	001a      	movs	r2, r3
 80048a8:	230e      	movs	r3, #14
 80048aa:	18fb      	adds	r3, r7, r3
 80048ac:	881b      	ldrh	r3, [r3, #0]
 80048ae:	4293      	cmp	r3, r2
 80048b0:	d131      	bne.n	8004916 <DMA_ProcessBuffer+0xb2>
      if(retry > 30){
 80048b2:	4b65      	ldr	r3, [pc, #404]	@ (8004a48 <DMA_ProcessBuffer+0x1e4>)
 80048b4:	781b      	ldrb	r3, [r3, #0]
 80048b6:	2b1e      	cmp	r3, #30
 80048b8:	d91b      	bls.n	80048f2 <DMA_ProcessBuffer+0x8e>
        retry = 0;
 80048ba:	4b63      	ldr	r3, [pc, #396]	@ (8004a48 <DMA_ProcessBuffer+0x1e4>)
 80048bc:	2200      	movs	r2, #0
 80048be:	701a      	strb	r2, [r3, #0]
        //EspState = ESP_STATE_SEND;
        if(ATCommand == AT_WAKEUP && testRound == true){
 80048c0:	4b62      	ldr	r3, [pc, #392]	@ (8004a4c <DMA_ProcessBuffer+0x1e8>)
 80048c2:	781b      	ldrb	r3, [r3, #0]
 80048c4:	2b00      	cmp	r3, #0
 80048c6:	d107      	bne.n	80048d8 <DMA_ProcessBuffer+0x74>
 80048c8:	4b61      	ldr	r3, [pc, #388]	@ (8004a50 <DMA_ProcessBuffer+0x1ec>)
 80048ca:	781b      	ldrb	r3, [r3, #0]
 80048cc:	2b00      	cmp	r3, #0
 80048ce:	d003      	beq.n	80048d8 <DMA_ProcessBuffer+0x74>
          status = RECEIVE_STATUS_UNPROGGED;
 80048d0:	230d      	movs	r3, #13
 80048d2:	18fb      	adds	r3, r7, r3
 80048d4:	2207      	movs	r2, #7
 80048d6:	701a      	strb	r2, [r3, #0]
        }
        if(ATCommand == AT_CWJAP){
 80048d8:	4b5c      	ldr	r3, [pc, #368]	@ (8004a4c <DMA_ProcessBuffer+0x1e8>)
 80048da:	781b      	ldrb	r3, [r3, #0]
 80048dc:	2b08      	cmp	r3, #8
 80048de:	d103      	bne.n	80048e8 <DMA_ProcessBuffer+0x84>
          EspState = ESP_STATE_MODE_SELECT;
 80048e0:	4b5c      	ldr	r3, [pc, #368]	@ (8004a54 <DMA_ProcessBuffer+0x1f0>)
 80048e2:	220b      	movs	r2, #11
 80048e4:	701a      	strb	r2, [r3, #0]
 80048e6:	e016      	b.n	8004916 <DMA_ProcessBuffer+0xb2>
        }
        else{
          status = RECEIVE_STATUS_TIMEOUT;
 80048e8:	230d      	movs	r3, #13
 80048ea:	18fb      	adds	r3, r7, r3
 80048ec:	2206      	movs	r2, #6
 80048ee:	701a      	strb	r2, [r3, #0]
 80048f0:	e011      	b.n	8004916 <DMA_ProcessBuffer+0xb2>
        }
      }
     else{
       retry ++;
 80048f2:	4b55      	ldr	r3, [pc, #340]	@ (8004a48 <DMA_ProcessBuffer+0x1e4>)
 80048f4:	781b      	ldrb	r3, [r3, #0]
 80048f6:	3301      	adds	r3, #1
 80048f8:	b2da      	uxtb	r2, r3
 80048fa:	4b53      	ldr	r3, [pc, #332]	@ (8004a48 <DMA_ProcessBuffer+0x1e4>)
 80048fc:	701a      	strb	r2, [r3, #0]
       ESPTimeStamp = HAL_GetTick() + ESP_WIFI_RETRY_TIME;
 80048fe:	f007 faa9 	bl	800be54 <HAL_GetTick>
 8004902:	0003      	movs	r3, r0
 8004904:	33f5      	adds	r3, #245	@ 0xf5
 8004906:	33ff      	adds	r3, #255	@ 0xff
 8004908:	001a      	movs	r2, r3
 800490a:	4b53      	ldr	r3, [pc, #332]	@ (8004a58 <DMA_ProcessBuffer+0x1f4>)
 800490c:	601a      	str	r2, [r3, #0]
       status = RECEIVE_STATUS_RETRY;
 800490e:	230d      	movs	r3, #13
 8004910:	18fb      	adds	r3, r7, r3
 8004912:	2204      	movs	r2, #4
 8004914:	701a      	strb	r2, [r3, #0]
      }
    }
    if (pos != OldPos) {
 8004916:	4b4b      	ldr	r3, [pc, #300]	@ (8004a44 <DMA_ProcessBuffer+0x1e0>)
 8004918:	781b      	ldrb	r3, [r3, #0]
 800491a:	b2db      	uxtb	r3, r3
 800491c:	001a      	movs	r2, r3
 800491e:	210e      	movs	r1, #14
 8004920:	187b      	adds	r3, r7, r1
 8004922:	881b      	ldrh	r3, [r3, #0]
 8004924:	4293      	cmp	r3, r2
 8004926:	d100      	bne.n	800492a <DMA_ProcessBuffer+0xc6>
 8004928:	e082      	b.n	8004a30 <DMA_ProcessBuffer+0x1cc>
      retry = 0;
 800492a:	4b47      	ldr	r3, [pc, #284]	@ (8004a48 <DMA_ProcessBuffer+0x1e4>)
 800492c:	2200      	movs	r2, #0
 800492e:	701a      	strb	r2, [r3, #0]
      if(TempPos == OldPos){
 8004930:	4b4a      	ldr	r3, [pc, #296]	@ (8004a5c <DMA_ProcessBuffer+0x1f8>)
 8004932:	781b      	ldrb	r3, [r3, #0]
 8004934:	b2da      	uxtb	r2, r3
 8004936:	4b43      	ldr	r3, [pc, #268]	@ (8004a44 <DMA_ProcessBuffer+0x1e0>)
 8004938:	781b      	ldrb	r3, [r3, #0]
 800493a:	b2db      	uxtb	r3, r3
 800493c:	429a      	cmp	r2, r3
 800493e:	d109      	bne.n	8004954 <DMA_ProcessBuffer+0xf0>
        TempPos = pos;
 8004940:	187b      	adds	r3, r7, r1
 8004942:	881b      	ldrh	r3, [r3, #0]
 8004944:	b2da      	uxtb	r2, r3
 8004946:	4b45      	ldr	r3, [pc, #276]	@ (8004a5c <DMA_ProcessBuffer+0x1f8>)
 8004948:	701a      	strb	r2, [r3, #0]
        status = RECEIVE_STATUS_LOOP;
 800494a:	230d      	movs	r3, #13
 800494c:	18fb      	adds	r3, r7, r3
 800494e:	220a      	movs	r2, #10
 8004950:	701a      	strb	r2, [r3, #0]
 8004952:	e06d      	b.n	8004a30 <DMA_ProcessBuffer+0x1cc>
      }
      else{
        if(TempPos != pos){
 8004954:	4b41      	ldr	r3, [pc, #260]	@ (8004a5c <DMA_ProcessBuffer+0x1f8>)
 8004956:	781b      	ldrb	r3, [r3, #0]
 8004958:	b2db      	uxtb	r3, r3
 800495a:	001a      	movs	r2, r3
 800495c:	210e      	movs	r1, #14
 800495e:	187b      	adds	r3, r7, r1
 8004960:	881b      	ldrh	r3, [r3, #0]
 8004962:	4293      	cmp	r3, r2
 8004964:	d009      	beq.n	800497a <DMA_ProcessBuffer+0x116>
          TempPos = pos;
 8004966:	187b      	adds	r3, r7, r1
 8004968:	881b      	ldrh	r3, [r3, #0]
 800496a:	b2da      	uxtb	r2, r3
 800496c:	4b3b      	ldr	r3, [pc, #236]	@ (8004a5c <DMA_ProcessBuffer+0x1f8>)
 800496e:	701a      	strb	r2, [r3, #0]
          status = RECEIVE_STATUS_LOOP;
 8004970:	230d      	movs	r3, #13
 8004972:	18fb      	adds	r3, r7, r3
 8004974:	220a      	movs	r2, #10
 8004976:	701a      	strb	r2, [r3, #0]
 8004978:	e05a      	b.n	8004a30 <DMA_ProcessBuffer+0x1cc>
        }
        else{
          if (pos > OldPos) {
 800497a:	4b32      	ldr	r3, [pc, #200]	@ (8004a44 <DMA_ProcessBuffer+0x1e0>)
 800497c:	781b      	ldrb	r3, [r3, #0]
 800497e:	b2db      	uxtb	r3, r3
 8004980:	001a      	movs	r2, r3
 8004982:	210e      	movs	r1, #14
 8004984:	187b      	adds	r3, r7, r1
 8004986:	881b      	ldrh	r3, [r3, #0]
 8004988:	4293      	cmp	r3, r2
 800498a:	d917      	bls.n	80049bc <DMA_ProcessBuffer+0x158>
              status = ParseBuffer(&RxBuffer[OldPos], (pos - OldPos), expectation);
 800498c:	4b2d      	ldr	r3, [pc, #180]	@ (8004a44 <DMA_ProcessBuffer+0x1e0>)
 800498e:	781b      	ldrb	r3, [r3, #0]
 8004990:	b2db      	uxtb	r3, r3
 8004992:	001a      	movs	r2, r3
 8004994:	4b32      	ldr	r3, [pc, #200]	@ (8004a60 <DMA_ProcessBuffer+0x1fc>)
 8004996:	18d0      	adds	r0, r2, r3
 8004998:	4b2a      	ldr	r3, [pc, #168]	@ (8004a44 <DMA_ProcessBuffer+0x1e0>)
 800499a:	781b      	ldrb	r3, [r3, #0]
 800499c:	b2db      	uxtb	r3, r3
 800499e:	001a      	movs	r2, r3
 80049a0:	187b      	adds	r3, r7, r1
 80049a2:	881b      	ldrh	r3, [r3, #0]
 80049a4:	1a9b      	subs	r3, r3, r2
 80049a6:	b299      	uxth	r1, r3
 80049a8:	230d      	movs	r3, #13
 80049aa:	18fc      	adds	r4, r7, r3
 80049ac:	1dfb      	adds	r3, r7, #7
 80049ae:	781b      	ldrb	r3, [r3, #0]
 80049b0:	001a      	movs	r2, r3
 80049b2:	f7ff fa91 	bl	8003ed8 <ParseBuffer>
 80049b6:	0003      	movs	r3, r0
 80049b8:	7023      	strb	r3, [r4, #0]
 80049ba:	e026      	b.n	8004a0a <DMA_ProcessBuffer+0x1a6>
          }
          else {
              // Buffer wrap-around
              status = ParseBuffer(&RxBuffer[OldPos], ESP_MAX_BUFFER_SIZE - OldPos, expectation);
 80049bc:	4b21      	ldr	r3, [pc, #132]	@ (8004a44 <DMA_ProcessBuffer+0x1e0>)
 80049be:	781b      	ldrb	r3, [r3, #0]
 80049c0:	b2db      	uxtb	r3, r3
 80049c2:	001a      	movs	r2, r3
 80049c4:	4b26      	ldr	r3, [pc, #152]	@ (8004a60 <DMA_ProcessBuffer+0x1fc>)
 80049c6:	18d0      	adds	r0, r2, r3
 80049c8:	4b1e      	ldr	r3, [pc, #120]	@ (8004a44 <DMA_ProcessBuffer+0x1e0>)
 80049ca:	781b      	ldrb	r3, [r3, #0]
 80049cc:	b2db      	uxtb	r3, r3
 80049ce:	001a      	movs	r2, r3
 80049d0:	2380      	movs	r3, #128	@ 0x80
 80049d2:	005b      	lsls	r3, r3, #1
 80049d4:	1a9b      	subs	r3, r3, r2
 80049d6:	b299      	uxth	r1, r3
 80049d8:	250d      	movs	r5, #13
 80049da:	197c      	adds	r4, r7, r5
 80049dc:	1dfb      	adds	r3, r7, #7
 80049de:	781b      	ldrb	r3, [r3, #0]
 80049e0:	001a      	movs	r2, r3
 80049e2:	f7ff fa79 	bl	8003ed8 <ParseBuffer>
 80049e6:	0003      	movs	r3, r0
 80049e8:	7023      	strb	r3, [r4, #0]
              if (pos > 0) {
 80049ea:	210e      	movs	r1, #14
 80049ec:	187b      	adds	r3, r7, r1
 80049ee:	881b      	ldrh	r3, [r3, #0]
 80049f0:	2b00      	cmp	r3, #0
 80049f2:	d00a      	beq.n	8004a0a <DMA_ProcessBuffer+0x1a6>
                  status = ParseBuffer(&RxBuffer[0], pos, expectation);
 80049f4:	197c      	adds	r4, r7, r5
 80049f6:	1dfb      	adds	r3, r7, #7
 80049f8:	781a      	ldrb	r2, [r3, #0]
 80049fa:	187b      	adds	r3, r7, r1
 80049fc:	8819      	ldrh	r1, [r3, #0]
 80049fe:	4b18      	ldr	r3, [pc, #96]	@ (8004a60 <DMA_ProcessBuffer+0x1fc>)
 8004a00:	0018      	movs	r0, r3
 8004a02:	f7ff fa69 	bl	8003ed8 <ParseBuffer>
 8004a06:	0003      	movs	r3, r0
 8004a08:	7023      	strb	r3, [r4, #0]
              }
          }
          Debug("DMA ESP RxBuffer OldPos: %d, pos: %d", OldPos, pos);
 8004a0a:	4b0e      	ldr	r3, [pc, #56]	@ (8004a44 <DMA_ProcessBuffer+0x1e0>)
 8004a0c:	781b      	ldrb	r3, [r3, #0]
 8004a0e:	b2db      	uxtb	r3, r3
 8004a10:	0018      	movs	r0, r3
 8004a12:	240e      	movs	r4, #14
 8004a14:	193b      	adds	r3, r7, r4
 8004a16:	881b      	ldrh	r3, [r3, #0]
 8004a18:	4a12      	ldr	r2, [pc, #72]	@ (8004a64 <DMA_ProcessBuffer+0x200>)
 8004a1a:	4913      	ldr	r1, [pc, #76]	@ (8004a68 <DMA_ProcessBuffer+0x204>)
 8004a1c:	9300      	str	r3, [sp, #0]
 8004a1e:	0003      	movs	r3, r0
 8004a20:	2003      	movs	r0, #3
 8004a22:	f006 fe7b 	bl	800b71c <CreateLine>
          OldPos = pos;
 8004a26:	193b      	adds	r3, r7, r4
 8004a28:	881b      	ldrh	r3, [r3, #0]
 8004a2a:	b2da      	uxtb	r2, r3
 8004a2c:	4b05      	ldr	r3, [pc, #20]	@ (8004a44 <DMA_ProcessBuffer+0x1e0>)
 8004a2e:	701a      	strb	r2, [r3, #0]
        }
      }
    }
    return status;
 8004a30:	230d      	movs	r3, #13
 8004a32:	18fb      	adds	r3, r7, r3
 8004a34:	781b      	ldrb	r3, [r3, #0]
}
 8004a36:	0018      	movs	r0, r3
 8004a38:	46bd      	mov	sp, r7
 8004a3a:	b004      	add	sp, #16
 8004a3c:	bdb0      	pop	{r4, r5, r7, pc}
 8004a3e:	46c0      	nop			@ (mov r8, r8)
 8004a40:	20002410 	.word	0x20002410
 8004a44:	20000a81 	.word	0x20000a81
 8004a48:	20000994 	.word	0x20000994
 8004a4c:	20000996 	.word	0x20000996
 8004a50:	20000000 	.word	0x20000000
 8004a54:	20000028 	.word	0x20000028
 8004a58:	20000988 	.word	0x20000988
 8004a5c:	20000a82 	.word	0x20000a82
 8004a60:	20000448 	.word	0x20000448
 8004a64:	0801fae8 	.word	0x0801fae8
 8004a68:	0801f5e0 	.word	0x0801f5e0

08004a6c <clearDMABuffer>:

void clearDMABuffer(){
 8004a6c:	b580      	push	{r7, lr}
 8004a6e:	af00      	add	r7, sp, #0
  memset(RxBuffer, '\0', ESP_MAX_BUFFER_SIZE);
 8004a70:	2380      	movs	r3, #128	@ 0x80
 8004a72:	005a      	lsls	r2, r3, #1
 8004a74:	4b03      	ldr	r3, [pc, #12]	@ (8004a84 <clearDMABuffer+0x18>)
 8004a76:	2100      	movs	r1, #0
 8004a78:	0018      	movs	r0, r3
 8004a7a:	f017 fd1d 	bl	801c4b8 <memset>
}
 8004a7e:	46c0      	nop			@ (mov r8, r8)
 8004a80:	46bd      	mov	sp, r7
 8004a82:	bd80      	pop	{r7, pc}
 8004a84:	20000448 	.word	0x20000448

08004a88 <ATCompare>:
//Compares the received status to the expected status (OK, ready, >).
bool ATCompare(uint8_t AT_Command_Received, uint8_t AT_Command_Expected){
 8004a88:	b580      	push	{r7, lr}
 8004a8a:	b084      	sub	sp, #16
 8004a8c:	af00      	add	r7, sp, #0
 8004a8e:	0002      	movs	r2, r0
 8004a90:	1dfb      	adds	r3, r7, #7
 8004a92:	701a      	strb	r2, [r3, #0]
 8004a94:	1dbb      	adds	r3, r7, #6
 8004a96:	1c0a      	adds	r2, r1, #0
 8004a98:	701a      	strb	r2, [r3, #0]
  bool value = false;
 8004a9a:	210f      	movs	r1, #15
 8004a9c:	187b      	adds	r3, r7, r1
 8004a9e:	2200      	movs	r2, #0
 8004aa0:	701a      	strb	r2, [r3, #0]
  if(AT_Command_Expected == RECEIVE_EXPECTATION_OK){
 8004aa2:	1dbb      	adds	r3, r7, #6
 8004aa4:	781b      	ldrb	r3, [r3, #0]
 8004aa6:	2b00      	cmp	r3, #0
 8004aa8:	d105      	bne.n	8004ab6 <ATCompare+0x2e>
    value = (AT_Command_Received == RECEIVE_STATUS_OK);
 8004aaa:	187b      	adds	r3, r7, r1
 8004aac:	1dfa      	adds	r2, r7, #7
 8004aae:	7812      	ldrb	r2, [r2, #0]
 8004ab0:	4251      	negs	r1, r2
 8004ab2:	414a      	adcs	r2, r1
 8004ab4:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_READY){
 8004ab6:	1dbb      	adds	r3, r7, #6
 8004ab8:	781b      	ldrb	r3, [r3, #0]
 8004aba:	2b01      	cmp	r3, #1
 8004abc:	d107      	bne.n	8004ace <ATCompare+0x46>
    value = (AT_Command_Received == RECEIVE_STATUS_READY);
 8004abe:	230f      	movs	r3, #15
 8004ac0:	18fb      	adds	r3, r7, r3
 8004ac2:	1dfa      	adds	r2, r7, #7
 8004ac4:	7812      	ldrb	r2, [r2, #0]
 8004ac6:	3a02      	subs	r2, #2
 8004ac8:	4251      	negs	r1, r2
 8004aca:	414a      	adcs	r2, r1
 8004acc:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_START){
 8004ace:	1dbb      	adds	r3, r7, #6
 8004ad0:	781b      	ldrb	r3, [r3, #0]
 8004ad2:	2b02      	cmp	r3, #2
 8004ad4:	d107      	bne.n	8004ae6 <ATCompare+0x5e>
    value = (AT_Command_Received == RECEIVE_STATUS_START);
 8004ad6:	230f      	movs	r3, #15
 8004ad8:	18fb      	adds	r3, r7, r3
 8004ada:	1dfa      	adds	r2, r7, #7
 8004adc:	7812      	ldrb	r2, [r2, #0]
 8004ade:	3a05      	subs	r2, #5
 8004ae0:	4251      	negs	r1, r2
 8004ae2:	414a      	adcs	r2, r1
 8004ae4:	701a      	strb	r2, [r3, #0]
  }
  if(AT_Command_Expected == RECEIVE_EXPECTATION_TIME){
 8004ae6:	1dbb      	adds	r3, r7, #6
 8004ae8:	781b      	ldrb	r3, [r3, #0]
 8004aea:	2b05      	cmp	r3, #5
 8004aec:	d107      	bne.n	8004afe <ATCompare+0x76>
    value = (AT_Command_Received == RECEIVE_STATUS_TIME);
 8004aee:	230f      	movs	r3, #15
 8004af0:	18fb      	adds	r3, r7, r3
 8004af2:	1dfa      	adds	r2, r7, #7
 8004af4:	7812      	ldrb	r2, [r2, #0]
 8004af6:	3a0b      	subs	r2, #11
 8004af8:	4251      	negs	r1, r2
 8004afa:	414a      	adcs	r2, r1
 8004afc:	701a      	strb	r2, [r3, #0]
  }
  return(value);
 8004afe:	230f      	movs	r3, #15
 8004b00:	18fb      	adds	r3, r7, r3
 8004b02:	781b      	ldrb	r3, [r3, #0]
}
 8004b04:	0018      	movs	r0, r3
 8004b06:	46bd      	mov	sp, r7
 8004b08:	b004      	add	sp, #16
 8004b0a:	bd80      	pop	{r7, pc}

08004b0c <AT_Send>:

bool AT_Send(AT_Commands state){
 8004b0c:	b590      	push	{r4, r7, lr}
 8004b0e:	b085      	sub	sp, #20
 8004b10:	af00      	add	r7, sp, #0
 8004b12:	0002      	movs	r2, r0
 8004b14:	1dfb      	adds	r3, r7, #7
 8004b16:	701a      	strb	r2, [r3, #0]
  bool ATCommandSend = false;
 8004b18:	230f      	movs	r3, #15
 8004b1a:	18fb      	adds	r3, r7, r3
 8004b1c:	2200      	movs	r2, #0
 8004b1e:	701a      	strb	r2, [r3, #0]
  switch (state){
 8004b20:	1dfb      	adds	r3, r7, #7
 8004b22:	781b      	ldrb	r3, [r3, #0]
 8004b24:	2b13      	cmp	r3, #19
 8004b26:	d900      	bls.n	8004b2a <AT_Send+0x1e>
 8004b28:	e18a      	b.n	8004e40 <AT_Send+0x334>
 8004b2a:	009a      	lsls	r2, r3, #2
 8004b2c:	4bc8      	ldr	r3, [pc, #800]	@ (8004e50 <AT_Send+0x344>)
 8004b2e:	18d3      	adds	r3, r2, r3
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	469f      	mov	pc, r3

  case AT_WAKEUP:
  if(TimestampIsReached(ESPTimeStamp)){
 8004b34:	4bc7      	ldr	r3, [pc, #796]	@ (8004e54 <AT_Send+0x348>)
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	0018      	movs	r0, r3
 8004b3a:	f006 fd99 	bl	800b670 <TimestampIsReached>
 8004b3e:	1e03      	subs	r3, r0, #0
 8004b40:	d100      	bne.n	8004b44 <AT_Send+0x38>
 8004b42:	e17c      	b.n	8004e3e <AT_Send+0x332>
    ATCommandSend = PollAwake();
 8004b44:	230f      	movs	r3, #15
 8004b46:	18fc      	adds	r4, r7, r3
 8004b48:	f7ff fbae 	bl	80042a8 <PollAwake>
 8004b4c:	0003      	movs	r3, r0
 8004b4e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8004b50:	f007 f980 	bl	800be54 <HAL_GetTick>
 8004b54:	0003      	movs	r3, r0
 8004b56:	3332      	adds	r3, #50	@ 0x32
 8004b58:	001a      	movs	r2, r3
 8004b5a:	4bbe      	ldr	r3, [pc, #760]	@ (8004e54 <AT_Send+0x348>)
 8004b5c:	601a      	str	r2, [r3, #0]
  }
  break;
 8004b5e:	e16e      	b.n	8004e3e <AT_Send+0x332>

  case AT_SET_RFPOWER:
    Debug("Setting RF Power");
 8004b60:	4abd      	ldr	r2, [pc, #756]	@ (8004e58 <AT_Send+0x34c>)
 8004b62:	4bbe      	ldr	r3, [pc, #760]	@ (8004e5c <AT_Send+0x350>)
 8004b64:	0019      	movs	r1, r3
 8004b66:	2003      	movs	r0, #3
 8004b68:	f006 fdd8 	bl	800b71c <CreateLine>
    ATCommandSend = RFPower();
 8004b6c:	230f      	movs	r3, #15
 8004b6e:	18fc      	adds	r4, r7, r3
 8004b70:	f7ff fbb6 	bl	80042e0 <RFPower>
 8004b74:	0003      	movs	r3, r0
 8004b76:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004b78:	f007 f96c 	bl	800be54 <HAL_GetTick>
 8004b7c:	0003      	movs	r3, r0
 8004b7e:	330a      	adds	r3, #10
 8004b80:	001a      	movs	r2, r3
 8004b82:	4bb4      	ldr	r3, [pc, #720]	@ (8004e54 <AT_Send+0x348>)
 8004b84:	601a      	str	r2, [r3, #0]
    break;
 8004b86:	e15b      	b.n	8004e40 <AT_Send+0x334>

  case AT_CHECK_RFPOWER:
    Debug("Checking RF Power");
 8004b88:	4ab5      	ldr	r2, [pc, #724]	@ (8004e60 <AT_Send+0x354>)
 8004b8a:	4bb4      	ldr	r3, [pc, #720]	@ (8004e5c <AT_Send+0x350>)
 8004b8c:	0019      	movs	r1, r3
 8004b8e:	2003      	movs	r0, #3
 8004b90:	f006 fdc4 	bl	800b71c <CreateLine>
    ATCommandSend = CheckRFPower();
 8004b94:	230f      	movs	r3, #15
 8004b96:	18fc      	adds	r4, r7, r3
 8004b98:	f7ff fbbe 	bl	8004318 <CheckRFPower>
 8004b9c:	0003      	movs	r3, r0
 8004b9e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004ba0:	f007 f958 	bl	800be54 <HAL_GetTick>
 8004ba4:	0003      	movs	r3, r0
 8004ba6:	330a      	adds	r3, #10
 8004ba8:	001a      	movs	r2, r3
 8004baa:	4baa      	ldr	r3, [pc, #680]	@ (8004e54 <AT_Send+0x348>)
 8004bac:	601a      	str	r2, [r3, #0]
    break;
 8004bae:	e147      	b.n	8004e40 <AT_Send+0x334>

  case AT_RESTORE:
    Debug("Restoring ESP");
 8004bb0:	4aac      	ldr	r2, [pc, #688]	@ (8004e64 <AT_Send+0x358>)
 8004bb2:	4baa      	ldr	r3, [pc, #680]	@ (8004e5c <AT_Send+0x350>)
 8004bb4:	0019      	movs	r1, r3
 8004bb6:	2003      	movs	r0, #3
 8004bb8:	f006 fdb0 	bl	800b71c <CreateLine>
    ATCommandSend = ATRestore();
 8004bbc:	230f      	movs	r3, #15
 8004bbe:	18fc      	adds	r4, r7, r3
 8004bc0:	f7ff fbc6 	bl	8004350 <ATRestore>
 8004bc4:	0003      	movs	r3, r0
 8004bc6:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8004bc8:	f007 f944 	bl	800be54 <HAL_GetTick>
 8004bcc:	0003      	movs	r3, r0
 8004bce:	3332      	adds	r3, #50	@ 0x32
 8004bd0:	001a      	movs	r2, r3
 8004bd2:	4ba0      	ldr	r3, [pc, #640]	@ (8004e54 <AT_Send+0x348>)
 8004bd4:	601a      	str	r2, [r3, #0]
    break;
 8004bd6:	e133      	b.n	8004e40 <AT_Send+0x334>

  case AT_CWINIT:
    Debug("Initializing Wi-Fi");
 8004bd8:	4aa3      	ldr	r2, [pc, #652]	@ (8004e68 <AT_Send+0x35c>)
 8004bda:	4ba0      	ldr	r3, [pc, #640]	@ (8004e5c <AT_Send+0x350>)
 8004bdc:	0019      	movs	r1, r3
 8004bde:	2003      	movs	r0, #3
 8004be0:	f006 fd9c 	bl	800b71c <CreateLine>
    ATCommandSend = CWINIT();
 8004be4:	230f      	movs	r3, #15
 8004be6:	18fc      	adds	r4, r7, r3
 8004be8:	f7ff fbce 	bl	8004388 <CWINIT>
 8004bec:	0003      	movs	r3, r0
 8004bee:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004bf0:	f007 f930 	bl	800be54 <HAL_GetTick>
 8004bf4:	0003      	movs	r3, r0
 8004bf6:	33f5      	adds	r3, #245	@ 0xf5
 8004bf8:	33ff      	adds	r3, #255	@ 0xff
 8004bfa:	001a      	movs	r2, r3
 8004bfc:	4b95      	ldr	r3, [pc, #596]	@ (8004e54 <AT_Send+0x348>)
 8004bfe:	601a      	str	r2, [r3, #0]
    break;
 8004c00:	e11e      	b.n	8004e40 <AT_Send+0x334>

  case AT_CWSTATE:
    Debug("Checking current SSID");
 8004c02:	4a9a      	ldr	r2, [pc, #616]	@ (8004e6c <AT_Send+0x360>)
 8004c04:	4b95      	ldr	r3, [pc, #596]	@ (8004e5c <AT_Send+0x350>)
 8004c06:	0019      	movs	r1, r3
 8004c08:	2003      	movs	r0, #3
 8004c0a:	f006 fd87 	bl	800b71c <CreateLine>
    ATCommandSend = CWSTATE();
 8004c0e:	230f      	movs	r3, #15
 8004c10:	18fc      	adds	r4, r7, r3
 8004c12:	f7ff fcc7 	bl	80045a4 <CWSTATE>
 8004c16:	0003      	movs	r3, r0
 8004c18:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004c1a:	f007 f91b 	bl	800be54 <HAL_GetTick>
 8004c1e:	0003      	movs	r3, r0
 8004c20:	33f5      	adds	r3, #245	@ 0xf5
 8004c22:	33ff      	adds	r3, #255	@ 0xff
 8004c24:	001a      	movs	r2, r3
 8004c26:	4b8b      	ldr	r3, [pc, #556]	@ (8004e54 <AT_Send+0x348>)
 8004c28:	601a      	str	r2, [r3, #0]
    break;
 8004c2a:	e109      	b.n	8004e40 <AT_Send+0x334>

  case AT_CWMODE1:
    Debug("Setting to station mode");
 8004c2c:	4a90      	ldr	r2, [pc, #576]	@ (8004e70 <AT_Send+0x364>)
 8004c2e:	4b8b      	ldr	r3, [pc, #556]	@ (8004e5c <AT_Send+0x350>)
 8004c30:	0019      	movs	r1, r3
 8004c32:	2003      	movs	r0, #3
 8004c34:	f006 fd72 	bl	800b71c <CreateLine>
    ATCommandSend = CWMODE1();
 8004c38:	230f      	movs	r3, #15
 8004c3a:	18fc      	adds	r4, r7, r3
 8004c3c:	f7ff fbc0 	bl	80043c0 <CWMODE1>
 8004c40:	0003      	movs	r3, r0
 8004c42:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004c44:	f007 f906 	bl	800be54 <HAL_GetTick>
 8004c48:	0003      	movs	r3, r0
 8004c4a:	330a      	adds	r3, #10
 8004c4c:	001a      	movs	r2, r3
 8004c4e:	4b81      	ldr	r3, [pc, #516]	@ (8004e54 <AT_Send+0x348>)
 8004c50:	601a      	str	r2, [r3, #0]
    break;
 8004c52:	e0f5      	b.n	8004e40 <AT_Send+0x334>

  case AT_CWMODE2:
    Debug("Setting to station mode");
 8004c54:	4a86      	ldr	r2, [pc, #536]	@ (8004e70 <AT_Send+0x364>)
 8004c56:	4b81      	ldr	r3, [pc, #516]	@ (8004e5c <AT_Send+0x350>)
 8004c58:	0019      	movs	r1, r3
 8004c5a:	2003      	movs	r0, #3
 8004c5c:	f006 fd5e 	bl	800b71c <CreateLine>
    ATCommandSend = CWMODE2();
 8004c60:	230f      	movs	r3, #15
 8004c62:	18fc      	adds	r4, r7, r3
 8004c64:	f7ff fbc8 	bl	80043f8 <CWMODE2>
 8004c68:	0003      	movs	r3, r0
 8004c6a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004c6c:	f007 f8f2 	bl	800be54 <HAL_GetTick>
 8004c70:	0003      	movs	r3, r0
 8004c72:	330a      	adds	r3, #10
 8004c74:	001a      	movs	r2, r3
 8004c76:	4b77      	ldr	r3, [pc, #476]	@ (8004e54 <AT_Send+0x348>)
 8004c78:	601a      	str	r2, [r3, #0]
    break;
 8004c7a:	e0e1      	b.n	8004e40 <AT_Send+0x334>

  case AT_CWAUTOCONN:
    Debug("Setting auto connect");
 8004c7c:	4a7d      	ldr	r2, [pc, #500]	@ (8004e74 <AT_Send+0x368>)
 8004c7e:	4b77      	ldr	r3, [pc, #476]	@ (8004e5c <AT_Send+0x350>)
 8004c80:	0019      	movs	r1, r3
 8004c82:	2003      	movs	r0, #3
 8004c84:	f006 fd4a 	bl	800b71c <CreateLine>
    ATCommandSend = CWAUTOCONN();
 8004c88:	230f      	movs	r3, #15
 8004c8a:	18fc      	adds	r4, r7, r3
 8004c8c:	f7ff fbd0 	bl	8004430 <CWAUTOCONN>
 8004c90:	0003      	movs	r3, r0
 8004c92:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004c94:	f007 f8de 	bl	800be54 <HAL_GetTick>
 8004c98:	0003      	movs	r3, r0
 8004c9a:	330a      	adds	r3, #10
 8004c9c:	001a      	movs	r2, r3
 8004c9e:	4b6d      	ldr	r3, [pc, #436]	@ (8004e54 <AT_Send+0x348>)
 8004ca0:	601a      	str	r2, [r3, #0]
    break;
 8004ca2:	e0cd      	b.n	8004e40 <AT_Send+0x334>

  case AT_CWJAP:
    Debug("Connect to Wi-Fi");
 8004ca4:	4a74      	ldr	r2, [pc, #464]	@ (8004e78 <AT_Send+0x36c>)
 8004ca6:	4b6d      	ldr	r3, [pc, #436]	@ (8004e5c <AT_Send+0x350>)
 8004ca8:	0019      	movs	r1, r3
 8004caa:	2003      	movs	r0, #3
 8004cac:	f006 fd36 	bl	800b71c <CreateLine>
    ATCommandSend = CWJAP();
 8004cb0:	230f      	movs	r3, #15
 8004cb2:	18fc      	adds	r4, r7, r3
 8004cb4:	f7ff fbd8 	bl	8004468 <CWJAP>
 8004cb8:	0003      	movs	r3, r0
 8004cba:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_LONG;
 8004cbc:	f007 f8ca 	bl	800be54 <HAL_GetTick>
 8004cc0:	0003      	movs	r3, r0
 8004cc2:	3332      	adds	r3, #50	@ 0x32
 8004cc4:	001a      	movs	r2, r3
 8004cc6:	4b63      	ldr	r3, [pc, #396]	@ (8004e54 <AT_Send+0x348>)
 8004cc8:	601a      	str	r2, [r3, #0]
    break;
 8004cca:	e0b9      	b.n	8004e40 <AT_Send+0x334>

  case AT_CWMODE3:
    Debug("SET in station/soft-ap mode");
 8004ccc:	4a6b      	ldr	r2, [pc, #428]	@ (8004e7c <AT_Send+0x370>)
 8004cce:	4b63      	ldr	r3, [pc, #396]	@ (8004e5c <AT_Send+0x350>)
 8004cd0:	0019      	movs	r1, r3
 8004cd2:	2003      	movs	r0, #3
 8004cd4:	f006 fd22 	bl	800b71c <CreateLine>
    ATCommandSend = CWMODE3();
 8004cd8:	230f      	movs	r3, #15
 8004cda:	18fc      	adds	r4, r7, r3
 8004cdc:	f7ff fc46 	bl	800456c <CWMODE3>
 8004ce0:	0003      	movs	r3, r0
 8004ce2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004ce4:	f007 f8b6 	bl	800be54 <HAL_GetTick>
 8004ce8:	0003      	movs	r3, r0
 8004cea:	330a      	adds	r3, #10
 8004cec:	001a      	movs	r2, r3
 8004cee:	4b59      	ldr	r3, [pc, #356]	@ (8004e54 <AT_Send+0x348>)
 8004cf0:	601a      	str	r2, [r3, #0]
    break;
 8004cf2:	e0a5      	b.n	8004e40 <AT_Send+0x334>

  case AT_CWSAP:
    Debug("SET soft AP mode parameters");
 8004cf4:	4a62      	ldr	r2, [pc, #392]	@ (8004e80 <AT_Send+0x374>)
 8004cf6:	4b59      	ldr	r3, [pc, #356]	@ (8004e5c <AT_Send+0x350>)
 8004cf8:	0019      	movs	r1, r3
 8004cfa:	2003      	movs	r0, #3
 8004cfc:	f006 fd0e 	bl	800b71c <CreateLine>
    ATCommandSend = CWSAP();
 8004d00:	230f      	movs	r3, #15
 8004d02:	18fc      	adds	r4, r7, r3
 8004d04:	f7ff fc6a 	bl	80045dc <CWSAP>
 8004d08:	0003      	movs	r3, r0
 8004d0a:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004d0c:	f007 f8a2 	bl	800be54 <HAL_GetTick>
 8004d10:	0003      	movs	r3, r0
 8004d12:	330a      	adds	r3, #10
 8004d14:	001a      	movs	r2, r3
 8004d16:	4b4f      	ldr	r3, [pc, #316]	@ (8004e54 <AT_Send+0x348>)
 8004d18:	601a      	str	r2, [r3, #0]
    break;
 8004d1a:	e091      	b.n	8004e40 <AT_Send+0x334>

  case AT_CIPMUX:
    ATCommandSend = CIPMUX();
 8004d1c:	230f      	movs	r3, #15
 8004d1e:	18fc      	adds	r4, r7, r3
 8004d20:	f7ff fc78 	bl	8004614 <CIPMUX>
 8004d24:	0003      	movs	r3, r0
 8004d26:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004d28:	f007 f894 	bl	800be54 <HAL_GetTick>
 8004d2c:	0003      	movs	r3, r0
 8004d2e:	330a      	adds	r3, #10
 8004d30:	001a      	movs	r2, r3
 8004d32:	4b48      	ldr	r3, [pc, #288]	@ (8004e54 <AT_Send+0x348>)
 8004d34:	601a      	str	r2, [r3, #0]
    break;
 8004d36:	e083      	b.n	8004e40 <AT_Send+0x334>

  case AT_WEBSERVER:
    ATCommandSend = WEBSERVER();
 8004d38:	230f      	movs	r3, #15
 8004d3a:	18fc      	adds	r4, r7, r3
 8004d3c:	f7ff fc86 	bl	800464c <WEBSERVER>
 8004d40:	0003      	movs	r3, r0
 8004d42:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004d44:	f007 f886 	bl	800be54 <HAL_GetTick>
 8004d48:	0003      	movs	r3, r0
 8004d4a:	330a      	adds	r3, #10
 8004d4c:	001a      	movs	r2, r3
 8004d4e:	4b41      	ldr	r3, [pc, #260]	@ (8004e54 <AT_Send+0x348>)
 8004d50:	601a      	str	r2, [r3, #0]
    break;
 8004d52:	e075      	b.n	8004e40 <AT_Send+0x334>

  case AT_HTTPCPOST:
    ATCommandSend = HTTPCPOST();
 8004d54:	230f      	movs	r3, #15
 8004d56:	18fc      	adds	r4, r7, r3
 8004d58:	f7ff fc94 	bl	8004684 <HTTPCPOST>
 8004d5c:	0003      	movs	r3, r0
 8004d5e:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004d60:	f007 f878 	bl	800be54 <HAL_GetTick>
 8004d64:	0003      	movs	r3, r0
 8004d66:	33f5      	adds	r3, #245	@ 0xf5
 8004d68:	33ff      	adds	r3, #255	@ 0xff
 8004d6a:	001a      	movs	r2, r3
 8004d6c:	4b39      	ldr	r3, [pc, #228]	@ (8004e54 <AT_Send+0x348>)
 8004d6e:	601a      	str	r2, [r3, #0]
    break;
 8004d70:	e066      	b.n	8004e40 <AT_Send+0x334>

  case AT_SENDDATA:
    Debug("Send the data");
 8004d72:	4a44      	ldr	r2, [pc, #272]	@ (8004e84 <AT_Send+0x378>)
 8004d74:	4b39      	ldr	r3, [pc, #228]	@ (8004e5c <AT_Send+0x350>)
 8004d76:	0019      	movs	r1, r3
 8004d78:	2003      	movs	r0, #3
 8004d7a:	f006 fccf 	bl	800b71c <CreateLine>
    ATCommandSend = SENDDATA();
 8004d7e:	230f      	movs	r3, #15
 8004d80:	18fc      	adds	r4, r7, r3
 8004d82:	f7ff fcdf 	bl	8004744 <SENDDATA>
 8004d86:	0003      	movs	r3, r0
 8004d88:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME; // + 7000;
 8004d8a:	f007 f863 	bl	800be54 <HAL_GetTick>
 8004d8e:	0003      	movs	r3, r0
 8004d90:	33f5      	adds	r3, #245	@ 0xf5
 8004d92:	33ff      	adds	r3, #255	@ 0xff
 8004d94:	001a      	movs	r2, r3
 8004d96:	4b2f      	ldr	r3, [pc, #188]	@ (8004e54 <AT_Send+0x348>)
 8004d98:	601a      	str	r2, [r3, #0]
    break;
 8004d9a:	e051      	b.n	8004e40 <AT_Send+0x334>

  case AT_SLEEP:
    Debug("Setting ESP in sleep mode for 5 min");
 8004d9c:	4a3a      	ldr	r2, [pc, #232]	@ (8004e88 <AT_Send+0x37c>)
 8004d9e:	4b2f      	ldr	r3, [pc, #188]	@ (8004e5c <AT_Send+0x350>)
 8004da0:	0019      	movs	r1, r3
 8004da2:	2003      	movs	r0, #3
 8004da4:	f006 fcba 	bl	800b71c <CreateLine>
    ATCommandSend = SLEEP();
 8004da8:	230f      	movs	r3, #15
 8004daa:	18fc      	adds	r4, r7, r3
 8004dac:	f7ff fce6 	bl	800477c <SLEEP>
 8004db0:	0003      	movs	r3, r0
 8004db2:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004db4:	f007 f84e 	bl	800be54 <HAL_GetTick>
 8004db8:	0003      	movs	r3, r0
 8004dba:	330a      	adds	r3, #10
 8004dbc:	001a      	movs	r2, r3
 8004dbe:	4b25      	ldr	r3, [pc, #148]	@ (8004e54 <AT_Send+0x348>)
 8004dc0:	601a      	str	r2, [r3, #0]
    break;
 8004dc2:	e03d      	b.n	8004e40 <AT_Send+0x334>
  case AT_CIPSNTPCFG:
    Debug("Config SNTP client");
 8004dc4:	4a31      	ldr	r2, [pc, #196]	@ (8004e8c <AT_Send+0x380>)
 8004dc6:	4b25      	ldr	r3, [pc, #148]	@ (8004e5c <AT_Send+0x350>)
 8004dc8:	0019      	movs	r1, r3
 8004dca:	2003      	movs	r0, #3
 8004dcc:	f006 fca6 	bl	800b71c <CreateLine>
    ATCommandSend = CIPSNTPCFG();
 8004dd0:	230f      	movs	r3, #15
 8004dd2:	18fc      	adds	r4, r7, r3
 8004dd4:	f7ff fcee 	bl	80047b4 <CIPSNTPCFG>
 8004dd8:	0003      	movs	r3, r0
 8004dda:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004ddc:	f007 f83a 	bl	800be54 <HAL_GetTick>
 8004de0:	0003      	movs	r3, r0
 8004de2:	330a      	adds	r3, #10
 8004de4:	001a      	movs	r2, r3
 8004de6:	4b1b      	ldr	r3, [pc, #108]	@ (8004e54 <AT_Send+0x348>)
 8004de8:	601a      	str	r2, [r3, #0]
    break;
 8004dea:	e029      	b.n	8004e40 <AT_Send+0x334>
  case AT_CIPSNTPTIME:
    Debug("Get time from internet");
 8004dec:	4a28      	ldr	r2, [pc, #160]	@ (8004e90 <AT_Send+0x384>)
 8004dee:	4b1b      	ldr	r3, [pc, #108]	@ (8004e5c <AT_Send+0x350>)
 8004df0:	0019      	movs	r1, r3
 8004df2:	2003      	movs	r0, #3
 8004df4:	f006 fc92 	bl	800b71c <CreateLine>
    ATCommandSend = CIPSNTPTIME();
 8004df8:	230f      	movs	r3, #15
 8004dfa:	18fc      	adds	r4, r7, r3
 8004dfc:	f7ff fcfa 	bl	80047f4 <CIPSNTPTIME>
 8004e00:	0003      	movs	r3, r0
 8004e02:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_WIFI_INIT_TIME;
 8004e04:	f007 f826 	bl	800be54 <HAL_GetTick>
 8004e08:	0003      	movs	r3, r0
 8004e0a:	33f5      	adds	r3, #245	@ 0xf5
 8004e0c:	33ff      	adds	r3, #255	@ 0xff
 8004e0e:	001a      	movs	r2, r3
 8004e10:	4b10      	ldr	r3, [pc, #64]	@ (8004e54 <AT_Send+0x348>)
 8004e12:	601a      	str	r2, [r3, #0]
    break;
 8004e14:	e014      	b.n	8004e40 <AT_Send+0x334>
  case AT_CIPSNTPINTV:
    Debug("Set the interval to timesync");
 8004e16:	4a1f      	ldr	r2, [pc, #124]	@ (8004e94 <AT_Send+0x388>)
 8004e18:	4b10      	ldr	r3, [pc, #64]	@ (8004e5c <AT_Send+0x350>)
 8004e1a:	0019      	movs	r1, r3
 8004e1c:	2003      	movs	r0, #3
 8004e1e:	f006 fc7d 	bl	800b71c <CreateLine>
    ATCommandSend = CIPSNTPINTV();
 8004e22:	230f      	movs	r3, #15
 8004e24:	18fc      	adds	r4, r7, r3
 8004e26:	f7ff fd01 	bl	800482c <CIPSNTPINTV>
 8004e2a:	0003      	movs	r3, r0
 8004e2c:	7023      	strb	r3, [r4, #0]
    ESPTimeStamp = HAL_GetTick() + ESP_RESPONSE_TIME;
 8004e2e:	f007 f811 	bl	800be54 <HAL_GetTick>
 8004e32:	0003      	movs	r3, r0
 8004e34:	330a      	adds	r3, #10
 8004e36:	001a      	movs	r2, r3
 8004e38:	4b06      	ldr	r3, [pc, #24]	@ (8004e54 <AT_Send+0x348>)
 8004e3a:	601a      	str	r2, [r3, #0]
    break;
 8004e3c:	e000      	b.n	8004e40 <AT_Send+0x334>
  break;
 8004e3e:	46c0      	nop			@ (mov r8, r8)
  }

  return(ATCommandSend);
 8004e40:	230f      	movs	r3, #15
 8004e42:	18fb      	adds	r3, r7, r3
 8004e44:	781b      	ldrb	r3, [r3, #0]
}
 8004e46:	0018      	movs	r0, r3
 8004e48:	46bd      	mov	sp, r7
 8004e4a:	b005      	add	sp, #20
 8004e4c:	bd90      	pop	{r4, r7, pc}
 8004e4e:	46c0      	nop			@ (mov r8, r8)
 8004e50:	08020784 	.word	0x08020784
 8004e54:	20000988 	.word	0x20000988
 8004e58:	0801fb10 	.word	0x0801fb10
 8004e5c:	0801f5e0 	.word	0x0801f5e0
 8004e60:	0801fb24 	.word	0x0801fb24
 8004e64:	0801fb38 	.word	0x0801fb38
 8004e68:	0801fb48 	.word	0x0801fb48
 8004e6c:	0801fb5c 	.word	0x0801fb5c
 8004e70:	0801fb74 	.word	0x0801fb74
 8004e74:	0801fb8c 	.word	0x0801fb8c
 8004e78:	0801fba4 	.word	0x0801fba4
 8004e7c:	0801fbb8 	.word	0x0801fbb8
 8004e80:	0801fbd4 	.word	0x0801fbd4
 8004e84:	0801fbf0 	.word	0x0801fbf0
 8004e88:	0801fc00 	.word	0x0801fc00
 8004e8c:	0801fc24 	.word	0x0801fc24
 8004e90:	0801fc38 	.word	0x0801fc38
 8004e94:	0801fc50 	.word	0x0801fc50

08004e98 <ESP_WakeTest>:

void ESP_WakeTest(void) {
 8004e98:	b590      	push	{r4, r7, lr}
 8004e9a:	b083      	sub	sp, #12
 8004e9c:	af00      	add	r7, sp, #0
  bool ATSend = false;
 8004e9e:	1dfb      	adds	r3, r7, #7
 8004ea0:	2200      	movs	r2, #0
 8004ea2:	701a      	strb	r2, [r3, #0]
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
  switch (TestState){
 8004ea4:	4b7a      	ldr	r3, [pc, #488]	@ (8005090 <ESP_WakeTest+0x1f8>)
 8004ea6:	781b      	ldrb	r3, [r3, #0]
 8004ea8:	2b05      	cmp	r3, #5
 8004eaa:	d900      	bls.n	8004eae <ESP_WakeTest+0x16>
 8004eac:	e0d6      	b.n	800505c <ESP_WakeTest+0x1c4>
 8004eae:	009a      	lsls	r2, r3, #2
 8004eb0:	4b78      	ldr	r3, [pc, #480]	@ (8005094 <ESP_WakeTest+0x1fc>)
 8004eb2:	18d3      	adds	r3, r2, r3
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	469f      	mov	pc, r3

    case ESP_TEST_INIT:
      if(!EspTurnedOn){
 8004eb8:	4b77      	ldr	r3, [pc, #476]	@ (8005098 <ESP_WakeTest+0x200>)
 8004eba:	781b      	ldrb	r3, [r3, #0]
 8004ebc:	2201      	movs	r2, #1
 8004ebe:	4053      	eors	r3, r2
 8004ec0:	b2db      	uxtb	r3, r3
 8004ec2:	2b00      	cmp	r3, #0
 8004ec4:	d036      	beq.n	8004f34 <ESP_WakeTest+0x9c>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8004ec6:	2380      	movs	r3, #128	@ 0x80
 8004ec8:	011b      	lsls	r3, r3, #4
 8004eca:	4874      	ldr	r0, [pc, #464]	@ (800509c <ESP_WakeTest+0x204>)
 8004ecc:	2200      	movs	r2, #0
 8004ece:	0019      	movs	r1, r3
 8004ed0:	f008 fa1f 	bl	800d312 <HAL_GPIO_WritePin>
        HAL_Delay(50);
 8004ed4:	2032      	movs	r0, #50	@ 0x32
 8004ed6:	f006 ffc7 	bl	800be68 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 8004eda:	2380      	movs	r3, #128	@ 0x80
 8004edc:	011b      	lsls	r3, r3, #4
 8004ede:	486f      	ldr	r0, [pc, #444]	@ (800509c <ESP_WakeTest+0x204>)
 8004ee0:	2201      	movs	r2, #1
 8004ee2:	0019      	movs	r1, r3
 8004ee4:	f008 fa15 	bl	800d312 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8004ee8:	200a      	movs	r0, #10
 8004eea:	f006 ffbd 	bl	800be68 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8004eee:	4b6c      	ldr	r3, [pc, #432]	@ (80050a0 <ESP_WakeTest+0x208>)
 8004ef0:	2200      	movs	r2, #0
 8004ef2:	2101      	movs	r1, #1
 8004ef4:	0018      	movs	r0, r3
 8004ef6:	f008 fa0c 	bl	800d312 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8004efa:	200a      	movs	r0, #10
 8004efc:	f006 ffb4 	bl	800be68 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 8004f00:	4b67      	ldr	r3, [pc, #412]	@ (80050a0 <ESP_WakeTest+0x208>)
 8004f02:	2201      	movs	r2, #1
 8004f04:	2102      	movs	r1, #2
 8004f06:	0018      	movs	r0, r3
 8004f08:	f008 fa03 	bl	800d312 <HAL_GPIO_WritePin>
        HAL_Delay(10);
 8004f0c:	200a      	movs	r0, #10
 8004f0e:	f006 ffab 	bl	800be68 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8004f12:	4b63      	ldr	r3, [pc, #396]	@ (80050a0 <ESP_WakeTest+0x208>)
 8004f14:	2201      	movs	r2, #1
 8004f16:	2101      	movs	r1, #1
 8004f18:	0018      	movs	r0, r3
 8004f1a:	f008 f9fa 	bl	800d312 <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 8004f1e:	f006 ff99 	bl	800be54 <HAL_GetTick>
 8004f22:	0003      	movs	r3, r0
 8004f24:	22af      	movs	r2, #175	@ 0xaf
 8004f26:	0092      	lsls	r2, r2, #2
 8004f28:	189a      	adds	r2, r3, r2
 8004f2a:	4b5e      	ldr	r3, [pc, #376]	@ (80050a4 <ESP_WakeTest+0x20c>)
 8004f2c:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 8004f2e:	4b5a      	ldr	r3, [pc, #360]	@ (8005098 <ESP_WakeTest+0x200>)
 8004f30:	2201      	movs	r2, #1
 8004f32:	701a      	strb	r2, [r3, #0]
      }
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 8004f34:	2380      	movs	r3, #128	@ 0x80
 8004f36:	005a      	lsls	r2, r3, #1
 8004f38:	4b5b      	ldr	r3, [pc, #364]	@ (80050a8 <ESP_WakeTest+0x210>)
 8004f3a:	0011      	movs	r1, r2
 8004f3c:	0018      	movs	r0, r3
 8004f3e:	f7fe fd63 	bl	8003a08 <ESP_Receive>
 8004f42:	1e03      	subs	r3, r0, #0
 8004f44:	d100      	bne.n	8004f48 <ESP_WakeTest+0xb0>
 8004f46:	e099      	b.n	800507c <ESP_WakeTest+0x1e4>
        TestState = ESP_TEST_SEND;
 8004f48:	4b51      	ldr	r3, [pc, #324]	@ (8005090 <ESP_WakeTest+0x1f8>)
 8004f4a:	2201      	movs	r2, #1
 8004f4c:	701a      	strb	r2, [r3, #0]
      }
      break;
 8004f4e:	e095      	b.n	800507c <ESP_WakeTest+0x1e4>

    case ESP_TEST_SEND:
      if(TimestampIsReached(ESPTimeStamp)){
 8004f50:	4b54      	ldr	r3, [pc, #336]	@ (80050a4 <ESP_WakeTest+0x20c>)
 8004f52:	681b      	ldr	r3, [r3, #0]
 8004f54:	0018      	movs	r0, r3
 8004f56:	f006 fb8b 	bl	800b670 <TimestampIsReached>
 8004f5a:	1e03      	subs	r3, r0, #0
 8004f5c:	d100      	bne.n	8004f60 <ESP_WakeTest+0xc8>
 8004f5e:	e08f      	b.n	8005080 <ESP_WakeTest+0x1e8>
        ATSend = AT_Send(ATCommand);
 8004f60:	4b52      	ldr	r3, [pc, #328]	@ (80050ac <ESP_WakeTest+0x214>)
 8004f62:	781b      	ldrb	r3, [r3, #0]
 8004f64:	1dfc      	adds	r4, r7, #7
 8004f66:	0018      	movs	r0, r3
 8004f68:	f7ff fdd0 	bl	8004b0c <AT_Send>
 8004f6c:	0003      	movs	r3, r0
 8004f6e:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 8004f70:	1dfb      	adds	r3, r7, #7
 8004f72:	781b      	ldrb	r3, [r3, #0]
 8004f74:	2b00      	cmp	r3, #0
 8004f76:	d100      	bne.n	8004f7a <ESP_WakeTest+0xe2>
 8004f78:	e082      	b.n	8005080 <ESP_WakeTest+0x1e8>
          TestState = ESP_TEST_RECEIVE;
 8004f7a:	4b45      	ldr	r3, [pc, #276]	@ (8005090 <ESP_WakeTest+0x1f8>)
 8004f7c:	2202      	movs	r2, #2
 8004f7e:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8004f80:	e07e      	b.n	8005080 <ESP_WakeTest+0x1e8>

    case ESP_TEST_RECEIVE:
      if(TimestampIsReached(ESPTimeStamp)){
 8004f82:	4b48      	ldr	r3, [pc, #288]	@ (80050a4 <ESP_WakeTest+0x20c>)
 8004f84:	681b      	ldr	r3, [r3, #0]
 8004f86:	0018      	movs	r0, r3
 8004f88:	f006 fb72 	bl	800b670 <TimestampIsReached>
 8004f8c:	1e03      	subs	r3, r0, #0
 8004f8e:	d100      	bne.n	8004f92 <ESP_WakeTest+0xfa>
 8004f90:	e078      	b.n	8005084 <ESP_WakeTest+0x1ec>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 8004f92:	4b47      	ldr	r3, [pc, #284]	@ (80050b0 <ESP_WakeTest+0x218>)
 8004f94:	781b      	ldrb	r3, [r3, #0]
 8004f96:	0018      	movs	r0, r3
 8004f98:	f7ff fc64 	bl	8004864 <DMA_ProcessBuffer>
 8004f9c:	0003      	movs	r3, r0
 8004f9e:	001a      	movs	r2, r3
 8004fa0:	4b44      	ldr	r3, [pc, #272]	@ (80050b4 <ESP_WakeTest+0x21c>)
 8004fa2:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 8004fa4:	4b43      	ldr	r3, [pc, #268]	@ (80050b4 <ESP_WakeTest+0x21c>)
 8004fa6:	781a      	ldrb	r2, [r3, #0]
 8004fa8:	4b41      	ldr	r3, [pc, #260]	@ (80050b0 <ESP_WakeTest+0x218>)
 8004faa:	781b      	ldrb	r3, [r3, #0]
 8004fac:	1dbc      	adds	r4, r7, #6
 8004fae:	0019      	movs	r1, r3
 8004fb0:	0010      	movs	r0, r2
 8004fb2:	f7ff fd69 	bl	8004a88 <ATCompare>
 8004fb6:	0003      	movs	r3, r0
 8004fb8:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 8004fba:	4b3e      	ldr	r3, [pc, #248]	@ (80050b4 <ESP_WakeTest+0x21c>)
 8004fbc:	781b      	ldrb	r3, [r3, #0]
 8004fbe:	2b01      	cmp	r3, #1
 8004fc0:	d102      	bne.n	8004fc8 <ESP_WakeTest+0x130>
          TestState = ESP_TEST_SEND;
 8004fc2:	4b33      	ldr	r3, [pc, #204]	@ (8005090 <ESP_WakeTest+0x1f8>)
 8004fc4:	2201      	movs	r2, #1
 8004fc6:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_RETRY){
          //TestState = ESP_TEST_SEND;
          //ESPTimeStamp = HAL_GetTick() + 2*ESP_START_UP_TIME;
        }
        if(ATReceived == RECEIVE_STATUS_UNPROGGED){
 8004fc8:	4b3a      	ldr	r3, [pc, #232]	@ (80050b4 <ESP_WakeTest+0x21c>)
 8004fca:	781b      	ldrb	r3, [r3, #0]
 8004fcc:	2b07      	cmp	r3, #7
 8004fce:	d104      	bne.n	8004fda <ESP_WakeTest+0x142>
          StartProg();
 8004fd0:	f7fe ff50 	bl	8003e74 <StartProg>
          TestState = ESP_TEST_BOOT;
 8004fd4:	4b2e      	ldr	r3, [pc, #184]	@ (8005090 <ESP_WakeTest+0x1f8>)
 8004fd6:	2205      	movs	r2, #5
 8004fd8:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 8004fda:	4b36      	ldr	r3, [pc, #216]	@ (80050b4 <ESP_WakeTest+0x21c>)
 8004fdc:	781b      	ldrb	r3, [r3, #0]
 8004fde:	2b03      	cmp	r3, #3
 8004fe0:	d109      	bne.n	8004ff6 <ESP_WakeTest+0x15e>
          ESPTimeStamp = HAL_GetTick() + 50;
 8004fe2:	f006 ff37 	bl	800be54 <HAL_GetTick>
 8004fe6:	0003      	movs	r3, r0
 8004fe8:	3332      	adds	r3, #50	@ 0x32
 8004fea:	001a      	movs	r2, r3
 8004fec:	4b2d      	ldr	r3, [pc, #180]	@ (80050a4 <ESP_WakeTest+0x20c>)
 8004fee:	601a      	str	r2, [r3, #0]
          TestState = ESP_TEST_SEND;
 8004ff0:	4b27      	ldr	r3, [pc, #156]	@ (8005090 <ESP_WakeTest+0x1f8>)
 8004ff2:	2201      	movs	r2, #1
 8004ff4:	701a      	strb	r2, [r3, #0]
        }
        if(proceed){
 8004ff6:	1dbb      	adds	r3, r7, #6
 8004ff8:	781b      	ldrb	r3, [r3, #0]
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d042      	beq.n	8005084 <ESP_WakeTest+0x1ec>
          TestState = ESP_TEST_VALIDATE;
 8004ffe:	4b24      	ldr	r3, [pc, #144]	@ (8005090 <ESP_WakeTest+0x1f8>)
 8005000:	2203      	movs	r2, #3
 8005002:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8005004:	e03e      	b.n	8005084 <ESP_WakeTest+0x1ec>

    case ESP_TEST_VALIDATE:
      //Set measurement completed
      TIM3 -> CCR1 = LED_OFF;
 8005006:	4b2c      	ldr	r3, [pc, #176]	@ (80050b8 <ESP_WakeTest+0x220>)
 8005008:	22fa      	movs	r2, #250	@ 0xfa
 800500a:	0112      	lsls	r2, r2, #4
 800500c:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = LED_ON;
 800500e:	4b2a      	ldr	r3, [pc, #168]	@ (80050b8 <ESP_WakeTest+0x220>)
 8005010:	4a2a      	ldr	r2, [pc, #168]	@ (80050bc <ESP_WakeTest+0x224>)
 8005012:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = LED_OFF;
 8005014:	4b28      	ldr	r3, [pc, #160]	@ (80050b8 <ESP_WakeTest+0x220>)
 8005016:	22fa      	movs	r2, #250	@ 0xfa
 8005018:	0112      	lsls	r2, r2, #4
 800501a:	63da      	str	r2, [r3, #60]	@ 0x3c
      TestState = ESP_TEST_DEINIT;
 800501c:	4b1c      	ldr	r3, [pc, #112]	@ (8005090 <ESP_WakeTest+0x1f8>)
 800501e:	2204      	movs	r2, #4
 8005020:	701a      	strb	r2, [r3, #0]

      break;
 8005022:	e030      	b.n	8005086 <ESP_WakeTest+0x1ee>

    case ESP_TEST_DEINIT:
      testRound = false;
 8005024:	4b26      	ldr	r3, [pc, #152]	@ (80050c0 <ESP_WakeTest+0x228>)
 8005026:	2200      	movs	r2, #0
 8005028:	701a      	strb	r2, [r3, #0]
      EspTurnedOn = false;
 800502a:	4b1b      	ldr	r3, [pc, #108]	@ (8005098 <ESP_WakeTest+0x200>)
 800502c:	2200      	movs	r2, #0
 800502e:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8005030:	4b1b      	ldr	r3, [pc, #108]	@ (80050a0 <ESP_WakeTest+0x208>)
 8005032:	2200      	movs	r2, #0
 8005034:	2101      	movs	r1, #1
 8005036:	0018      	movs	r0, r3
 8005038:	f008 f96b 	bl	800d312 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 800503c:	2380      	movs	r3, #128	@ 0x80
 800503e:	011b      	lsls	r3, r3, #4
 8005040:	4816      	ldr	r0, [pc, #88]	@ (800509c <ESP_WakeTest+0x204>)
 8005042:	2200      	movs	r2, #0
 8005044:	0019      	movs	r1, r3
 8005046:	f008 f964 	bl	800d312 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 800504a:	4b15      	ldr	r3, [pc, #84]	@ (80050a0 <ESP_WakeTest+0x208>)
 800504c:	2200      	movs	r2, #0
 800504e:	2102      	movs	r1, #2
 8005050:	0018      	movs	r0, r3
 8005052:	f008 f95e 	bl	800d312 <HAL_GPIO_WritePin>
      // Reset ESP, so we're sure that we're in the right state.
      SetESPMeasurementDone();
 8005056:	f002 fe1f 	bl	8007c98 <SetESPMeasurementDone>
      break;
 800505a:	e014      	b.n	8005086 <ESP_WakeTest+0x1ee>

    default:
      TestState = ESP_TEST_INIT;
 800505c:	4b0c      	ldr	r3, [pc, #48]	@ (8005090 <ESP_WakeTest+0x1f8>)
 800505e:	2200      	movs	r2, #0
 8005060:	701a      	strb	r2, [r3, #0]
      break;
 8005062:	e010      	b.n	8005086 <ESP_WakeTest+0x1ee>



    case ESP_TEST_BOOT:
      TIM3 -> CCR1 = 4000;
 8005064:	4b14      	ldr	r3, [pc, #80]	@ (80050b8 <ESP_WakeTest+0x220>)
 8005066:	22fa      	movs	r2, #250	@ 0xfa
 8005068:	0112      	lsls	r2, r2, #4
 800506a:	635a      	str	r2, [r3, #52]	@ 0x34
      TIM3 -> CCR2 = 4000;
 800506c:	4b12      	ldr	r3, [pc, #72]	@ (80050b8 <ESP_WakeTest+0x220>)
 800506e:	22fa      	movs	r2, #250	@ 0xfa
 8005070:	0112      	lsls	r2, r2, #4
 8005072:	639a      	str	r2, [r3, #56]	@ 0x38
      TIM3 -> CCR3 = 0;
 8005074:	4b10      	ldr	r3, [pc, #64]	@ (80050b8 <ESP_WakeTest+0x220>)
 8005076:	2200      	movs	r2, #0
 8005078:	63da      	str	r2, [r3, #60]	@ 0x3c
      //WAIT FOR RESET;
      break;
 800507a:	e004      	b.n	8005086 <ESP_WakeTest+0x1ee>
      break;
 800507c:	46c0      	nop			@ (mov r8, r8)
 800507e:	e002      	b.n	8005086 <ESP_WakeTest+0x1ee>
      break;
 8005080:	46c0      	nop			@ (mov r8, r8)
 8005082:	e000      	b.n	8005086 <ESP_WakeTest+0x1ee>
      break;
 8005084:	46c0      	nop			@ (mov r8, r8)
  }
}
 8005086:	46c0      	nop			@ (mov r8, r8)
 8005088:	46bd      	mov	sp, r7
 800508a:	b003      	add	sp, #12
 800508c:	bd90      	pop	{r4, r7, pc}
 800508e:	46c0      	nop			@ (mov r8, r8)
 8005090:	20000998 	.word	0x20000998
 8005094:	080207d4 	.word	0x080207d4
 8005098:	20000548 	.word	0x20000548
 800509c:	50000800 	.word	0x50000800
 80050a0:	50001c00 	.word	0x50001c00
 80050a4:	20000988 	.word	0x20000988
 80050a8:	20000448 	.word	0x20000448
 80050ac:	20000996 	.word	0x20000996
 80050b0:	20000995 	.word	0x20000995
 80050b4:	20000029 	.word	0x20000029
 80050b8:	40000400 	.word	0x40000400
 80050bc:	00000bb8 	.word	0x00000bb8
 80050c0:	20000000 	.word	0x20000000

080050c4 <ESP_Upkeep>:

ESP_States ESP_Upkeep(void) {
 80050c4:	b5b0      	push	{r4, r5, r7, lr}
 80050c6:	b086      	sub	sp, #24
 80050c8:	af04      	add	r7, sp, #16
  bool ATSend = false;
 80050ca:	1dfb      	adds	r3, r7, #7
 80050cc:	2200      	movs	r2, #0
 80050ce:	701a      	strb	r2, [r3, #0]
  static uint32_t timeoutTimer = 0;
  static Receive_Status ATReceived = RECEIVE_STATUS_INCOMPLETE;
  if (EspState != oldEspState) {
 80050d0:	4bda      	ldr	r3, [pc, #872]	@ (800543c <ESP_Upkeep+0x378>)
 80050d2:	781a      	ldrb	r2, [r3, #0]
 80050d4:	4bda      	ldr	r3, [pc, #872]	@ (8005440 <ESP_Upkeep+0x37c>)
 80050d6:	781b      	ldrb	r3, [r3, #0]
 80050d8:	429a      	cmp	r2, r3
 80050da:	d01f      	beq.n	800511c <ESP_Upkeep+0x58>
    oldEspState = EspState;
 80050dc:	4bd7      	ldr	r3, [pc, #860]	@ (800543c <ESP_Upkeep+0x378>)
 80050de:	781a      	ldrb	r2, [r3, #0]
 80050e0:	4bd7      	ldr	r3, [pc, #860]	@ (8005440 <ESP_Upkeep+0x37c>)
 80050e2:	701a      	strb	r2, [r3, #0]
    if (!((oldEspState == 3) && (ATCommand == AT_HTTPCPOST)) ) {
 80050e4:	4bd6      	ldr	r3, [pc, #856]	@ (8005440 <ESP_Upkeep+0x37c>)
 80050e6:	781b      	ldrb	r3, [r3, #0]
 80050e8:	2b03      	cmp	r3, #3
 80050ea:	d103      	bne.n	80050f4 <ESP_Upkeep+0x30>
 80050ec:	4bd5      	ldr	r3, [pc, #852]	@ (8005444 <ESP_Upkeep+0x380>)
 80050ee:	781b      	ldrb	r3, [r3, #0]
 80050f0:	2b0e      	cmp	r3, #14
 80050f2:	d013      	beq.n	800511c <ESP_Upkeep+0x58>
      Debug("EspState: %d ATcmd: %d Mode: %d ATExp: %d", oldEspState, ATCommand, Mode, ATExpectation);
 80050f4:	4bd2      	ldr	r3, [pc, #840]	@ (8005440 <ESP_Upkeep+0x37c>)
 80050f6:	781b      	ldrb	r3, [r3, #0]
 80050f8:	001d      	movs	r5, r3
 80050fa:	4bd2      	ldr	r3, [pc, #840]	@ (8005444 <ESP_Upkeep+0x380>)
 80050fc:	781b      	ldrb	r3, [r3, #0]
 80050fe:	0018      	movs	r0, r3
 8005100:	4bd1      	ldr	r3, [pc, #836]	@ (8005448 <ESP_Upkeep+0x384>)
 8005102:	781b      	ldrb	r3, [r3, #0]
 8005104:	001c      	movs	r4, r3
 8005106:	4bd1      	ldr	r3, [pc, #836]	@ (800544c <ESP_Upkeep+0x388>)
 8005108:	781b      	ldrb	r3, [r3, #0]
 800510a:	4ad1      	ldr	r2, [pc, #836]	@ (8005450 <ESP_Upkeep+0x38c>)
 800510c:	49d1      	ldr	r1, [pc, #836]	@ (8005454 <ESP_Upkeep+0x390>)
 800510e:	9302      	str	r3, [sp, #8]
 8005110:	9401      	str	r4, [sp, #4]
 8005112:	9000      	str	r0, [sp, #0]
 8005114:	002b      	movs	r3, r5
 8005116:	2003      	movs	r0, #3
 8005118:	f006 fb00 	bl	800b71c <CreateLine>
    }
  }

  switch (EspState) {
 800511c:	4bc7      	ldr	r3, [pc, #796]	@ (800543c <ESP_Upkeep+0x378>)
 800511e:	781b      	ldrb	r3, [r3, #0]
 8005120:	2b0f      	cmp	r3, #15
 8005122:	d900      	bls.n	8005126 <ESP_Upkeep+0x62>
 8005124:	e355      	b.n	80057d2 <ESP_Upkeep+0x70e>
 8005126:	009a      	lsls	r2, r3, #2
 8005128:	4bcb      	ldr	r3, [pc, #812]	@ (8005458 <ESP_Upkeep+0x394>)
 800512a:	18d3      	adds	r3, r2, r3
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	469f      	mov	pc, r3
    case ESP_STATE_OFF:
      // Turning off the ESP
      // Disable UART

//      EspTurnedOn = false;
      EspState = ESP_STATE_IDLE;
 8005130:	4bc2      	ldr	r3, [pc, #776]	@ (800543c <ESP_Upkeep+0x378>)
 8005132:	2201      	movs	r2, #1
 8005134:	701a      	strb	r2, [r3, #0]
      break;
 8005136:	f000 fba4 	bl	8005882 <ESP_Upkeep+0x7be>
    case ESP_STATE_IDLE:
      // Waiting for wake up call.
      break;

    case ESP_STATE_INIT:
      if(!EspTurnedOn){
 800513a:	4bc8      	ldr	r3, [pc, #800]	@ (800545c <ESP_Upkeep+0x398>)
 800513c:	781b      	ldrb	r3, [r3, #0]
 800513e:	2201      	movs	r2, #1
 8005140:	4053      	eors	r3, r2
 8005142:	b2db      	uxtb	r3, r3
 8005144:	2b00      	cmp	r3, #0
 8005146:	d036      	beq.n	80051b6 <ESP_Upkeep+0xf2>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 8005148:	2380      	movs	r3, #128	@ 0x80
 800514a:	011b      	lsls	r3, r3, #4
 800514c:	48c4      	ldr	r0, [pc, #784]	@ (8005460 <ESP_Upkeep+0x39c>)
 800514e:	2200      	movs	r2, #0
 8005150:	0019      	movs	r1, r3
 8005152:	f008 f8de 	bl	800d312 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 8005156:	2001      	movs	r0, #1
 8005158:	f006 fe86 	bl	800be68 <HAL_Delay>
        HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 800515c:	2380      	movs	r3, #128	@ 0x80
 800515e:	011b      	lsls	r3, r3, #4
 8005160:	48bf      	ldr	r0, [pc, #764]	@ (8005460 <ESP_Upkeep+0x39c>)
 8005162:	2201      	movs	r2, #1
 8005164:	0019      	movs	r1, r3
 8005166:	f008 f8d4 	bl	800d312 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 800516a:	2001      	movs	r0, #1
 800516c:	f006 fe7c 	bl	800be68 <HAL_Delay>
        // Reset ESP, so we're sure that we're in the right state.
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 8005170:	4bbc      	ldr	r3, [pc, #752]	@ (8005464 <ESP_Upkeep+0x3a0>)
 8005172:	2200      	movs	r2, #0
 8005174:	2101      	movs	r1, #1
 8005176:	0018      	movs	r0, r3
 8005178:	f008 f8cb 	bl	800d312 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 800517c:	2001      	movs	r0, #1
 800517e:	f006 fe73 	bl	800be68 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 1);
 8005182:	4bb8      	ldr	r3, [pc, #736]	@ (8005464 <ESP_Upkeep+0x3a0>)
 8005184:	2201      	movs	r2, #1
 8005186:	2102      	movs	r1, #2
 8005188:	0018      	movs	r0, r3
 800518a:	f008 f8c2 	bl	800d312 <HAL_GPIO_WritePin>
        HAL_Delay(1);
 800518e:	2001      	movs	r0, #1
 8005190:	f006 fe6a 	bl	800be68 <HAL_Delay>
        HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 8005194:	4bb3      	ldr	r3, [pc, #716]	@ (8005464 <ESP_Upkeep+0x3a0>)
 8005196:	2201      	movs	r2, #1
 8005198:	2101      	movs	r1, #1
 800519a:	0018      	movs	r0, r3
 800519c:	f008 f8b9 	bl	800d312 <HAL_GPIO_WritePin>
        ESPTimeStamp = HAL_GetTick() + ESP_START_UP_TIME;
 80051a0:	f006 fe58 	bl	800be54 <HAL_GetTick>
 80051a4:	0003      	movs	r3, r0
 80051a6:	22af      	movs	r2, #175	@ 0xaf
 80051a8:	0092      	lsls	r2, r2, #2
 80051aa:	189a      	adds	r2, r3, r2
 80051ac:	4bae      	ldr	r3, [pc, #696]	@ (8005468 <ESP_Upkeep+0x3a4>)
 80051ae:	601a      	str	r2, [r3, #0]
        EspTurnedOn = true;
 80051b0:	4baa      	ldr	r3, [pc, #680]	@ (800545c <ESP_Upkeep+0x398>)
 80051b2:	2201      	movs	r2, #1
 80051b4:	701a      	strb	r2, [r3, #0]
      }
      // Wait for ESP to be ready
      // Start reading DMA buffer for AT commands
      if(ESP_Receive(RxBuffer, ESP_MAX_BUFFER_SIZE)) {
 80051b6:	2380      	movs	r3, #128	@ 0x80
 80051b8:	005a      	lsls	r2, r3, #1
 80051ba:	4bac      	ldr	r3, [pc, #688]	@ (800546c <ESP_Upkeep+0x3a8>)
 80051bc:	0011      	movs	r1, r2
 80051be:	0018      	movs	r0, r3
 80051c0:	f7fe fc22 	bl	8003a08 <ESP_Receive>
 80051c4:	1e03      	subs	r3, r0, #0
 80051c6:	d100      	bne.n	80051ca <ESP_Upkeep+0x106>
 80051c8:	e30f      	b.n	80057ea <ESP_Upkeep+0x726>
        EspState = ESP_STATE_WAIT_AWAKE;
 80051ca:	4b9c      	ldr	r3, [pc, #624]	@ (800543c <ESP_Upkeep+0x378>)
 80051cc:	220f      	movs	r2, #15
 80051ce:	701a      	strb	r2, [r3, #0]
        timeoutTimer = HAL_GetTick() + 2000;
 80051d0:	f006 fe40 	bl	800be54 <HAL_GetTick>
 80051d4:	0003      	movs	r3, r0
 80051d6:	22fa      	movs	r2, #250	@ 0xfa
 80051d8:	00d2      	lsls	r2, r2, #3
 80051da:	189a      	adds	r2, r3, r2
 80051dc:	4ba4      	ldr	r3, [pc, #656]	@ (8005470 <ESP_Upkeep+0x3ac>)
 80051de:	601a      	str	r2, [r3, #0]
      }
      break;
 80051e0:	e303      	b.n	80057ea <ESP_Upkeep+0x726>

    case ESP_STATE_WAIT_AWAKE:
        ATReceived = DMA_ProcessBuffer(RECEIVE_EXPECTATION_READY);
 80051e2:	2001      	movs	r0, #1
 80051e4:	f7ff fb3e 	bl	8004864 <DMA_ProcessBuffer>
 80051e8:	0003      	movs	r3, r0
 80051ea:	001a      	movs	r2, r3
 80051ec:	4ba1      	ldr	r3, [pc, #644]	@ (8005474 <ESP_Upkeep+0x3b0>)
 80051ee:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, RECEIVE_EXPECTATION_READY);
 80051f0:	4ba0      	ldr	r3, [pc, #640]	@ (8005474 <ESP_Upkeep+0x3b0>)
 80051f2:	781b      	ldrb	r3, [r3, #0]
 80051f4:	1dbc      	adds	r4, r7, #6
 80051f6:	2101      	movs	r1, #1
 80051f8:	0018      	movs	r0, r3
 80051fa:	f7ff fc45 	bl	8004a88 <ATCompare>
 80051fe:	0003      	movs	r3, r0
 8005200:	7023      	strb	r3, [r4, #0]
        if(proceed || TimestampIsReached(timeoutTimer)){
 8005202:	1dbb      	adds	r3, r7, #6
 8005204:	781b      	ldrb	r3, [r3, #0]
 8005206:	2b00      	cmp	r3, #0
 8005208:	d107      	bne.n	800521a <ESP_Upkeep+0x156>
 800520a:	4b99      	ldr	r3, [pc, #612]	@ (8005470 <ESP_Upkeep+0x3ac>)
 800520c:	681b      	ldr	r3, [r3, #0]
 800520e:	0018      	movs	r0, r3
 8005210:	f006 fa2e 	bl	800b670 <TimestampIsReached>
 8005214:	1e03      	subs	r3, r0, #0
 8005216:	d100      	bne.n	800521a <ESP_Upkeep+0x156>
 8005218:	e2e9      	b.n	80057ee <ESP_Upkeep+0x72a>
          EspState = ESP_STATE_MODE_SELECT;
 800521a:	4b88      	ldr	r3, [pc, #544]	@ (800543c <ESP_Upkeep+0x378>)
 800521c:	220b      	movs	r2, #11
 800521e:	701a      	strb	r2, [r3, #0]
        }
        break;
 8005220:	e2e5      	b.n	80057ee <ESP_Upkeep+0x72a>

    case ESP_STATE_MODE_SELECT:
      memset(ATCommandArray, AT_END, 9);
 8005222:	4b95      	ldr	r3, [pc, #596]	@ (8005478 <ESP_Upkeep+0x3b4>)
 8005224:	2209      	movs	r2, #9
 8005226:	2114      	movs	r1, #20
 8005228:	0018      	movs	r0, r3
 800522a:	f017 f945 	bl	801c4b8 <memset>
      if(!InitIsDone || WifiReset){
 800522e:	4b93      	ldr	r3, [pc, #588]	@ (800547c <ESP_Upkeep+0x3b8>)
 8005230:	781b      	ldrb	r3, [r3, #0]
 8005232:	2201      	movs	r2, #1
 8005234:	4053      	eors	r3, r2
 8005236:	b2db      	uxtb	r3, r3
 8005238:	2b00      	cmp	r3, #0
 800523a:	d103      	bne.n	8005244 <ESP_Upkeep+0x180>
 800523c:	4b90      	ldr	r3, [pc, #576]	@ (8005480 <ESP_Upkeep+0x3bc>)
 800523e:	781b      	ldrb	r3, [r3, #0]
 8005240:	2b00      	cmp	r3, #0
 8005242:	d01a      	beq.n	800527a <ESP_Upkeep+0x1b6>
        memcpy(ATCommandArray, AT_INIT, 7);
 8005244:	4b8c      	ldr	r3, [pc, #560]	@ (8005478 <ESP_Upkeep+0x3b4>)
 8005246:	4a8f      	ldr	r2, [pc, #572]	@ (8005484 <ESP_Upkeep+0x3c0>)
 8005248:	6811      	ldr	r1, [r2, #0]
 800524a:	6019      	str	r1, [r3, #0]
 800524c:	8891      	ldrh	r1, [r2, #4]
 800524e:	8099      	strh	r1, [r3, #4]
 8005250:	7992      	ldrb	r2, [r2, #6]
 8005252:	719a      	strb	r2, [r3, #6]
        EspState = ESP_STATE_SEND;
 8005254:	4b79      	ldr	r3, [pc, #484]	@ (800543c <ESP_Upkeep+0x378>)
 8005256:	2204      	movs	r2, #4
 8005258:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 800525a:	4b8b      	ldr	r3, [pc, #556]	@ (8005488 <ESP_Upkeep+0x3c4>)
 800525c:	2200      	movs	r2, #0
 800525e:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_INIT;
 8005260:	4b79      	ldr	r3, [pc, #484]	@ (8005448 <ESP_Upkeep+0x384>)
 8005262:	2200      	movs	r2, #0
 8005264:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 8005266:	4b88      	ldr	r3, [pc, #544]	@ (8005488 <ESP_Upkeep+0x3c4>)
 8005268:	781b      	ldrb	r3, [r3, #0]
 800526a:	001a      	movs	r2, r3
 800526c:	4b82      	ldr	r3, [pc, #520]	@ (8005478 <ESP_Upkeep+0x3b4>)
 800526e:	5c9a      	ldrb	r2, [r3, r2]
 8005270:	4b74      	ldr	r3, [pc, #464]	@ (8005444 <ESP_Upkeep+0x380>)
 8005272:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005274:	4b75      	ldr	r3, [pc, #468]	@ (800544c <ESP_Upkeep+0x388>)
 8005276:	2200      	movs	r2, #0
 8005278:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && !ConnectionMade){
 800527a:	4b80      	ldr	r3, [pc, #512]	@ (800547c <ESP_Upkeep+0x3b8>)
 800527c:	781b      	ldrb	r3, [r3, #0]
 800527e:	2b00      	cmp	r3, #0
 8005280:	d01f      	beq.n	80052c2 <ESP_Upkeep+0x1fe>
 8005282:	4b82      	ldr	r3, [pc, #520]	@ (800548c <ESP_Upkeep+0x3c8>)
 8005284:	781b      	ldrb	r3, [r3, #0]
 8005286:	2201      	movs	r2, #1
 8005288:	4053      	eors	r3, r2
 800528a:	b2db      	uxtb	r3, r3
 800528c:	2b00      	cmp	r3, #0
 800528e:	d018      	beq.n	80052c2 <ESP_Upkeep+0x1fe>
        memcpy(ATCommandArray, AT_WIFI_CONFIG, 6);
 8005290:	4b79      	ldr	r3, [pc, #484]	@ (8005478 <ESP_Upkeep+0x3b4>)
 8005292:	4a7f      	ldr	r2, [pc, #508]	@ (8005490 <ESP_Upkeep+0x3cc>)
 8005294:	6811      	ldr	r1, [r2, #0]
 8005296:	6019      	str	r1, [r3, #0]
 8005298:	8892      	ldrh	r2, [r2, #4]
 800529a:	809a      	strh	r2, [r3, #4]
        EspState = ESP_STATE_SEND;
 800529c:	4b67      	ldr	r3, [pc, #412]	@ (800543c <ESP_Upkeep+0x378>)
 800529e:	2204      	movs	r2, #4
 80052a0:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80052a2:	4b79      	ldr	r3, [pc, #484]	@ (8005488 <ESP_Upkeep+0x3c4>)
 80052a4:	2200      	movs	r2, #0
 80052a6:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_CONFIG;
 80052a8:	4b67      	ldr	r3, [pc, #412]	@ (8005448 <ESP_Upkeep+0x384>)
 80052aa:	2201      	movs	r2, #1
 80052ac:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80052ae:	4b76      	ldr	r3, [pc, #472]	@ (8005488 <ESP_Upkeep+0x3c4>)
 80052b0:	781b      	ldrb	r3, [r3, #0]
 80052b2:	001a      	movs	r2, r3
 80052b4:	4b70      	ldr	r3, [pc, #448]	@ (8005478 <ESP_Upkeep+0x3b4>)
 80052b6:	5c9a      	ldrb	r2, [r3, r2]
 80052b8:	4b62      	ldr	r3, [pc, #392]	@ (8005444 <ESP_Upkeep+0x380>)
 80052ba:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80052bc:	4b63      	ldr	r3, [pc, #396]	@ (800544c <ESP_Upkeep+0x388>)
 80052be:	2200      	movs	r2, #0
 80052c0:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && !beursTest){
 80052c2:	4b6e      	ldr	r3, [pc, #440]	@ (800547c <ESP_Upkeep+0x3b8>)
 80052c4:	781b      	ldrb	r3, [r3, #0]
 80052c6:	2b00      	cmp	r3, #0
 80052c8:	d021      	beq.n	800530e <ESP_Upkeep+0x24a>
 80052ca:	4b70      	ldr	r3, [pc, #448]	@ (800548c <ESP_Upkeep+0x3c8>)
 80052cc:	781b      	ldrb	r3, [r3, #0]
 80052ce:	2b00      	cmp	r3, #0
 80052d0:	d01d      	beq.n	800530e <ESP_Upkeep+0x24a>
 80052d2:	4b70      	ldr	r3, [pc, #448]	@ (8005494 <ESP_Upkeep+0x3d0>)
 80052d4:	781b      	ldrb	r3, [r3, #0]
 80052d6:	2201      	movs	r2, #1
 80052d8:	4053      	eors	r3, r2
 80052da:	b2db      	uxtb	r3, r3
 80052dc:	2b00      	cmp	r3, #0
 80052de:	d016      	beq.n	800530e <ESP_Upkeep+0x24a>
        memcpy(ATCommandArray, AT_BEURSTEST, 2);
 80052e0:	4b6d      	ldr	r3, [pc, #436]	@ (8005498 <ESP_Upkeep+0x3d4>)
 80052e2:	881a      	ldrh	r2, [r3, #0]
 80052e4:	4b64      	ldr	r3, [pc, #400]	@ (8005478 <ESP_Upkeep+0x3b4>)
 80052e6:	801a      	strh	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 80052e8:	4b54      	ldr	r3, [pc, #336]	@ (800543c <ESP_Upkeep+0x378>)
 80052ea:	2204      	movs	r2, #4
 80052ec:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80052ee:	4b66      	ldr	r3, [pc, #408]	@ (8005488 <ESP_Upkeep+0x3c4>)
 80052f0:	2200      	movs	r2, #0
 80052f2:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_TEST;
 80052f4:	4b54      	ldr	r3, [pc, #336]	@ (8005448 <ESP_Upkeep+0x384>)
 80052f6:	2204      	movs	r2, #4
 80052f8:	701a      	strb	r2, [r3, #0]
        ATCommand = ATCommandArray[ATCounter];
 80052fa:	4b63      	ldr	r3, [pc, #396]	@ (8005488 <ESP_Upkeep+0x3c4>)
 80052fc:	781b      	ldrb	r3, [r3, #0]
 80052fe:	001a      	movs	r2, r3
 8005300:	4b5d      	ldr	r3, [pc, #372]	@ (8005478 <ESP_Upkeep+0x3b4>)
 8005302:	5c9a      	ldrb	r2, [r3, r2]
 8005304:	4b4f      	ldr	r3, [pc, #316]	@ (8005444 <ESP_Upkeep+0x380>)
 8005306:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005308:	4b50      	ldr	r3, [pc, #320]	@ (800544c <ESP_Upkeep+0x388>)
 800530a:	2200      	movs	r2, #0
 800530c:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && beursTest && !setTime){
 800530e:	4b5b      	ldr	r3, [pc, #364]	@ (800547c <ESP_Upkeep+0x3b8>)
 8005310:	781b      	ldrb	r3, [r3, #0]
 8005312:	2b00      	cmp	r3, #0
 8005314:	d02e      	beq.n	8005374 <ESP_Upkeep+0x2b0>
 8005316:	4b5d      	ldr	r3, [pc, #372]	@ (800548c <ESP_Upkeep+0x3c8>)
 8005318:	781b      	ldrb	r3, [r3, #0]
 800531a:	2b00      	cmp	r3, #0
 800531c:	d02a      	beq.n	8005374 <ESP_Upkeep+0x2b0>
 800531e:	4b5d      	ldr	r3, [pc, #372]	@ (8005494 <ESP_Upkeep+0x3d0>)
 8005320:	781b      	ldrb	r3, [r3, #0]
 8005322:	2b00      	cmp	r3, #0
 8005324:	d026      	beq.n	8005374 <ESP_Upkeep+0x2b0>
 8005326:	4b5d      	ldr	r3, [pc, #372]	@ (800549c <ESP_Upkeep+0x3d8>)
 8005328:	781b      	ldrb	r3, [r3, #0]
 800532a:	2201      	movs	r2, #1
 800532c:	4053      	eors	r3, r2
 800532e:	b2db      	uxtb	r3, r3
 8005330:	2b00      	cmp	r3, #0
 8005332:	d01f      	beq.n	8005374 <ESP_Upkeep+0x2b0>
        memcpy(ATCommandArray, AT_SEND, 3);
 8005334:	4b50      	ldr	r3, [pc, #320]	@ (8005478 <ESP_Upkeep+0x3b4>)
 8005336:	4a5a      	ldr	r2, [pc, #360]	@ (80054a0 <ESP_Upkeep+0x3dc>)
 8005338:	8811      	ldrh	r1, [r2, #0]
 800533a:	8019      	strh	r1, [r3, #0]
 800533c:	7892      	ldrb	r2, [r2, #2]
 800533e:	709a      	strb	r2, [r3, #2]
        EspState = ESP_STATE_SEND;
 8005340:	4b3e      	ldr	r3, [pc, #248]	@ (800543c <ESP_Upkeep+0x378>)
 8005342:	2204      	movs	r2, #4
 8005344:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 8005346:	4b50      	ldr	r3, [pc, #320]	@ (8005488 <ESP_Upkeep+0x3c4>)
 8005348:	2200      	movs	r2, #0
 800534a:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_SEND;
 800534c:	4b3e      	ldr	r3, [pc, #248]	@ (8005448 <ESP_Upkeep+0x384>)
 800534e:	2202      	movs	r2, #2
 8005350:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 8005352:	f006 fd7f 	bl	800be54 <HAL_GetTick>
 8005356:	0002      	movs	r2, r0
 8005358:	4b52      	ldr	r3, [pc, #328]	@ (80054a4 <ESP_Upkeep+0x3e0>)
 800535a:	601a      	str	r2, [r3, #0]
        SetESPIndicator();
 800535c:	f005 fb4e 	bl	800a9fc <SetESPIndicator>
        ATCommand = ATCommandArray[ATCounter];
 8005360:	4b49      	ldr	r3, [pc, #292]	@ (8005488 <ESP_Upkeep+0x3c4>)
 8005362:	781b      	ldrb	r3, [r3, #0]
 8005364:	001a      	movs	r2, r3
 8005366:	4b44      	ldr	r3, [pc, #272]	@ (8005478 <ESP_Upkeep+0x3b4>)
 8005368:	5c9a      	ldrb	r2, [r3, r2]
 800536a:	4b36      	ldr	r3, [pc, #216]	@ (8005444 <ESP_Upkeep+0x380>)
 800536c:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 800536e:	4b37      	ldr	r3, [pc, #220]	@ (800544c <ESP_Upkeep+0x388>)
 8005370:	2200      	movs	r2, #0
 8005372:	701a      	strb	r2, [r3, #0]
      }
      if(ReconfigSet){
 8005374:	4b4c      	ldr	r3, [pc, #304]	@ (80054a8 <ESP_Upkeep+0x3e4>)
 8005376:	781b      	ldrb	r3, [r3, #0]
 8005378:	2b00      	cmp	r3, #0
 800537a:	d01a      	beq.n	80053b2 <ESP_Upkeep+0x2ee>
        memcpy(ATCommandArray, AT_WIFI_RECONFIG, 5);
 800537c:	4b3e      	ldr	r3, [pc, #248]	@ (8005478 <ESP_Upkeep+0x3b4>)
 800537e:	4a4b      	ldr	r2, [pc, #300]	@ (80054ac <ESP_Upkeep+0x3e8>)
 8005380:	6811      	ldr	r1, [r2, #0]
 8005382:	6019      	str	r1, [r3, #0]
 8005384:	7912      	ldrb	r2, [r2, #4]
 8005386:	711a      	strb	r2, [r3, #4]
        EspState = ESP_STATE_SEND;
 8005388:	4b2c      	ldr	r3, [pc, #176]	@ (800543c <ESP_Upkeep+0x378>)
 800538a:	2204      	movs	r2, #4
 800538c:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 800538e:	4b3e      	ldr	r3, [pc, #248]	@ (8005488 <ESP_Upkeep+0x3c4>)
 8005390:	2200      	movs	r2, #0
 8005392:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_RECONFIG;
 8005394:	4b2c      	ldr	r3, [pc, #176]	@ (8005448 <ESP_Upkeep+0x384>)
 8005396:	2203      	movs	r2, #3
 8005398:	701a      	strb	r2, [r3, #0]
        SetESPIndicator();
 800539a:	f005 fb2f 	bl	800a9fc <SetESPIndicator>
        ATCommand = ATCommandArray[ATCounter];
 800539e:	4b3a      	ldr	r3, [pc, #232]	@ (8005488 <ESP_Upkeep+0x3c4>)
 80053a0:	781b      	ldrb	r3, [r3, #0]
 80053a2:	001a      	movs	r2, r3
 80053a4:	4b34      	ldr	r3, [pc, #208]	@ (8005478 <ESP_Upkeep+0x3b4>)
 80053a6:	5c9a      	ldrb	r2, [r3, r2]
 80053a8:	4b26      	ldr	r3, [pc, #152]	@ (8005444 <ESP_Upkeep+0x380>)
 80053aa:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80053ac:	4b27      	ldr	r3, [pc, #156]	@ (800544c <ESP_Upkeep+0x388>)
 80053ae:	2200      	movs	r2, #0
 80053b0:	701a      	strb	r2, [r3, #0]
      }
      if(InitIsDone && ConnectionMade && beursTest && setTime){
 80053b2:	4b32      	ldr	r3, [pc, #200]	@ (800547c <ESP_Upkeep+0x3b8>)
 80053b4:	781b      	ldrb	r3, [r3, #0]
 80053b6:	2b00      	cmp	r3, #0
 80053b8:	d100      	bne.n	80053bc <ESP_Upkeep+0x2f8>
 80053ba:	e21a      	b.n	80057f2 <ESP_Upkeep+0x72e>
 80053bc:	4b33      	ldr	r3, [pc, #204]	@ (800548c <ESP_Upkeep+0x3c8>)
 80053be:	781b      	ldrb	r3, [r3, #0]
 80053c0:	2b00      	cmp	r3, #0
 80053c2:	d100      	bne.n	80053c6 <ESP_Upkeep+0x302>
 80053c4:	e215      	b.n	80057f2 <ESP_Upkeep+0x72e>
 80053c6:	4b33      	ldr	r3, [pc, #204]	@ (8005494 <ESP_Upkeep+0x3d0>)
 80053c8:	781b      	ldrb	r3, [r3, #0]
 80053ca:	2b00      	cmp	r3, #0
 80053cc:	d100      	bne.n	80053d0 <ESP_Upkeep+0x30c>
 80053ce:	e210      	b.n	80057f2 <ESP_Upkeep+0x72e>
 80053d0:	4b32      	ldr	r3, [pc, #200]	@ (800549c <ESP_Upkeep+0x3d8>)
 80053d2:	781b      	ldrb	r3, [r3, #0]
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d100      	bne.n	80053da <ESP_Upkeep+0x316>
 80053d8:	e20b      	b.n	80057f2 <ESP_Upkeep+0x72e>
        memcpy(ATCommandArray, AT_SNTP, 4);
 80053da:	4b35      	ldr	r3, [pc, #212]	@ (80054b0 <ESP_Upkeep+0x3ec>)
 80053dc:	681a      	ldr	r2, [r3, #0]
 80053de:	4b26      	ldr	r3, [pc, #152]	@ (8005478 <ESP_Upkeep+0x3b4>)
 80053e0:	601a      	str	r2, [r3, #0]
        EspState = ESP_STATE_SEND;
 80053e2:	4b16      	ldr	r3, [pc, #88]	@ (800543c <ESP_Upkeep+0x378>)
 80053e4:	2204      	movs	r2, #4
 80053e6:	701a      	strb	r2, [r3, #0]
        ATCounter = 0;
 80053e8:	4b27      	ldr	r3, [pc, #156]	@ (8005488 <ESP_Upkeep+0x3c4>)
 80053ea:	2200      	movs	r2, #0
 80053ec:	701a      	strb	r2, [r3, #0]
        Mode = AT_MODE_GETTIME;
 80053ee:	4b16      	ldr	r3, [pc, #88]	@ (8005448 <ESP_Upkeep+0x384>)
 80053f0:	2205      	movs	r2, #5
 80053f2:	701a      	strb	r2, [r3, #0]
        start = HAL_GetTick();
 80053f4:	f006 fd2e 	bl	800be54 <HAL_GetTick>
 80053f8:	0002      	movs	r2, r0
 80053fa:	4b2a      	ldr	r3, [pc, #168]	@ (80054a4 <ESP_Upkeep+0x3e0>)
 80053fc:	601a      	str	r2, [r3, #0]
        SetESPIndicator();
 80053fe:	f005 fafd 	bl	800a9fc <SetESPIndicator>
        ATCommand = ATCommandArray[ATCounter];
 8005402:	4b21      	ldr	r3, [pc, #132]	@ (8005488 <ESP_Upkeep+0x3c4>)
 8005404:	781b      	ldrb	r3, [r3, #0]
 8005406:	001a      	movs	r2, r3
 8005408:	4b1b      	ldr	r3, [pc, #108]	@ (8005478 <ESP_Upkeep+0x3b4>)
 800540a:	5c9a      	ldrb	r2, [r3, r2]
 800540c:	4b0d      	ldr	r3, [pc, #52]	@ (8005444 <ESP_Upkeep+0x380>)
 800540e:	701a      	strb	r2, [r3, #0]
        ATExpectation = RECEIVE_EXPECTATION_OK;
 8005410:	4b0e      	ldr	r3, [pc, #56]	@ (800544c <ESP_Upkeep+0x388>)
 8005412:	2200      	movs	r2, #0
 8005414:	701a      	strb	r2, [r3, #0]
      }
    break;
 8005416:	e1ec      	b.n	80057f2 <ESP_Upkeep+0x72e>

    case ESP_STATE_SEND:
        ATSend = AT_Send(ATCommand);
 8005418:	4b0a      	ldr	r3, [pc, #40]	@ (8005444 <ESP_Upkeep+0x380>)
 800541a:	781b      	ldrb	r3, [r3, #0]
 800541c:	1dfc      	adds	r4, r7, #7
 800541e:	0018      	movs	r0, r3
 8005420:	f7ff fb74 	bl	8004b0c <AT_Send>
 8005424:	0003      	movs	r3, r0
 8005426:	7023      	strb	r3, [r4, #0]
        if(ATSend){
 8005428:	1dfb      	adds	r3, r7, #7
 800542a:	781b      	ldrb	r3, [r3, #0]
 800542c:	2b00      	cmp	r3, #0
 800542e:	d100      	bne.n	8005432 <ESP_Upkeep+0x36e>
 8005430:	e1e1      	b.n	80057f6 <ESP_Upkeep+0x732>
          EspState = ESP_STATE_WAIT_FOR_REPLY;
 8005432:	4b02      	ldr	r3, [pc, #8]	@ (800543c <ESP_Upkeep+0x378>)
 8005434:	2203      	movs	r2, #3
 8005436:	701a      	strb	r2, [r3, #0]
        }
    break;
 8005438:	e1dd      	b.n	80057f6 <ESP_Upkeep+0x732>
 800543a:	46c0      	nop			@ (mov r8, r8)
 800543c:	20000028 	.word	0x20000028
 8005440:	20000002 	.word	0x20000002
 8005444:	20000996 	.word	0x20000996
 8005448:	20000997 	.word	0x20000997
 800544c:	20000995 	.word	0x20000995
 8005450:	0801fc70 	.word	0x0801fc70
 8005454:	0801f5e0 	.word	0x0801f5e0
 8005458:	080207ec 	.word	0x080207ec
 800545c:	20000548 	.word	0x20000548
 8005460:	50000800 	.word	0x50000800
 8005464:	50001c00 	.word	0x50001c00
 8005468:	20000988 	.word	0x20000988
 800546c:	20000448 	.word	0x20000448
 8005470:	20000a84 	.word	0x20000a84
 8005474:	2000002a 	.word	0x2000002a
 8005478:	2000097c 	.word	0x2000097c
 800547c:	20000549 	.word	0x20000549
 8005480:	2000054a 	.word	0x2000054a
 8005484:	20000004 	.word	0x20000004
 8005488:	20000986 	.word	0x20000986
 800548c:	2000054c 	.word	0x2000054c
 8005490:	20000014 	.word	0x20000014
 8005494:	2000054d 	.word	0x2000054d
 8005498:	20000010 	.word	0x20000010
 800549c:	20000001 	.word	0x20000001
 80054a0:	2000000c 	.word	0x2000000c
 80054a4:	2000055c 	.word	0x2000055c
 80054a8:	2000054b 	.word	0x2000054b
 80054ac:	2000001c 	.word	0x2000001c
 80054b0:	20000024 	.word	0x20000024

    case ESP_STATE_WAIT_FOR_REPLY:
      if(TimestampIsReached(ESPTimeStamp)){
 80054b4:	4bd3      	ldr	r3, [pc, #844]	@ (8005804 <ESP_Upkeep+0x740>)
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	0018      	movs	r0, r3
 80054ba:	f006 f8d9 	bl	800b670 <TimestampIsReached>
 80054be:	1e03      	subs	r3, r0, #0
 80054c0:	d100      	bne.n	80054c4 <ESP_Upkeep+0x400>
 80054c2:	e19a      	b.n	80057fa <ESP_Upkeep+0x736>
        ATReceived = DMA_ProcessBuffer(ATExpectation);
 80054c4:	4bd0      	ldr	r3, [pc, #832]	@ (8005808 <ESP_Upkeep+0x744>)
 80054c6:	781b      	ldrb	r3, [r3, #0]
 80054c8:	0018      	movs	r0, r3
 80054ca:	f7ff f9cb 	bl	8004864 <DMA_ProcessBuffer>
 80054ce:	0003      	movs	r3, r0
 80054d0:	001a      	movs	r2, r3
 80054d2:	4bce      	ldr	r3, [pc, #824]	@ (800580c <ESP_Upkeep+0x748>)
 80054d4:	701a      	strb	r2, [r3, #0]
        bool proceed = ATCompare(ATReceived, ATExpectation);
 80054d6:	4bcd      	ldr	r3, [pc, #820]	@ (800580c <ESP_Upkeep+0x748>)
 80054d8:	781a      	ldrb	r2, [r3, #0]
 80054da:	4bcb      	ldr	r3, [pc, #812]	@ (8005808 <ESP_Upkeep+0x744>)
 80054dc:	781b      	ldrb	r3, [r3, #0]
 80054de:	1d7c      	adds	r4, r7, #5
 80054e0:	0019      	movs	r1, r3
 80054e2:	0010      	movs	r0, r2
 80054e4:	f7ff fad0 	bl	8004a88 <ATCompare>
 80054e8:	0003      	movs	r3, r0
 80054ea:	7023      	strb	r3, [r4, #0]
        if(ATReceived == RECEIVE_STATUS_ERROR){
 80054ec:	4bc7      	ldr	r3, [pc, #796]	@ (800580c <ESP_Upkeep+0x748>)
 80054ee:	781b      	ldrb	r3, [r3, #0]
 80054f0:	2b01      	cmp	r3, #1
 80054f2:	d10f      	bne.n	8005514 <ESP_Upkeep+0x450>
          if(ATCommand == AT_SENDDATA){
 80054f4:	4bc6      	ldr	r3, [pc, #792]	@ (8005810 <ESP_Upkeep+0x74c>)
 80054f6:	781b      	ldrb	r3, [r3, #0]
 80054f8:	2b0f      	cmp	r3, #15
 80054fa:	d108      	bne.n	800550e <ESP_Upkeep+0x44a>
            ATCommand = AT_HTTPCPOST;
 80054fc:	4bc4      	ldr	r3, [pc, #784]	@ (8005810 <ESP_Upkeep+0x74c>)
 80054fe:	220e      	movs	r2, #14
 8005500:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 8005502:	4bc1      	ldr	r3, [pc, #772]	@ (8005808 <ESP_Upkeep+0x744>)
 8005504:	2202      	movs	r2, #2
 8005506:	701a      	strb	r2, [r3, #0]
            ATCounter = 1;
 8005508:	4bc2      	ldr	r3, [pc, #776]	@ (8005814 <ESP_Upkeep+0x750>)
 800550a:	2201      	movs	r2, #1
 800550c:	701a      	strb	r2, [r3, #0]
          }
          EspState = ESP_STATE_SEND;
 800550e:	4bc2      	ldr	r3, [pc, #776]	@ (8005818 <ESP_Upkeep+0x754>)
 8005510:	2204      	movs	r2, #4
 8005512:	701a      	strb	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_INCOMPLETE){
 8005514:	4bbd      	ldr	r3, [pc, #756]	@ (800580c <ESP_Upkeep+0x748>)
 8005516:	781b      	ldrb	r3, [r3, #0]
 8005518:	2b03      	cmp	r3, #3
 800551a:	d106      	bne.n	800552a <ESP_Upkeep+0x466>
          ESPTimeStamp = HAL_GetTick() + 10;
 800551c:	f006 fc9a 	bl	800be54 <HAL_GetTick>
 8005520:	0003      	movs	r3, r0
 8005522:	330a      	adds	r3, #10
 8005524:	001a      	movs	r2, r3
 8005526:	4bb7      	ldr	r3, [pc, #732]	@ (8005804 <ESP_Upkeep+0x740>)
 8005528:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_LOOP){
 800552a:	4bb8      	ldr	r3, [pc, #736]	@ (800580c <ESP_Upkeep+0x748>)
 800552c:	781b      	ldrb	r3, [r3, #0]
 800552e:	2b0a      	cmp	r3, #10
 8005530:	d106      	bne.n	8005540 <ESP_Upkeep+0x47c>
          ESPTimeStamp = HAL_GetTick() + 10;
 8005532:	f006 fc8f 	bl	800be54 <HAL_GetTick>
 8005536:	0003      	movs	r3, r0
 8005538:	330a      	adds	r3, #10
 800553a:	001a      	movs	r2, r3
 800553c:	4bb1      	ldr	r3, [pc, #708]	@ (8005804 <ESP_Upkeep+0x740>)
 800553e:	601a      	str	r2, [r3, #0]
        }
        if(ATReceived == RECEIVE_STATUS_TIMEOUT){
 8005540:	4bb2      	ldr	r3, [pc, #712]	@ (800580c <ESP_Upkeep+0x748>)
 8005542:	781b      	ldrb	r3, [r3, #0]
 8005544:	2b06      	cmp	r3, #6
 8005546:	d116      	bne.n	8005576 <ESP_Upkeep+0x4b2>
          if(ATCommand != AT_SENDDATA){
 8005548:	4bb1      	ldr	r3, [pc, #708]	@ (8005810 <ESP_Upkeep+0x74c>)
 800554a:	781b      	ldrb	r3, [r3, #0]
 800554c:	2b0f      	cmp	r3, #15
 800554e:	d003      	beq.n	8005558 <ESP_Upkeep+0x494>
            EspState = ESP_STATE_SEND;
 8005550:	4bb1      	ldr	r3, [pc, #708]	@ (8005818 <ESP_Upkeep+0x754>)
 8005552:	2204      	movs	r2, #4
 8005554:	701a      	strb	r2, [r3, #0]
 8005556:	e00e      	b.n	8005576 <ESP_Upkeep+0x4b2>
          }
          else{
            ATCommand = AT_HTTPCPOST;
 8005558:	4bad      	ldr	r3, [pc, #692]	@ (8005810 <ESP_Upkeep+0x74c>)
 800555a:	220e      	movs	r2, #14
 800555c:	701a      	strb	r2, [r3, #0]
            ATCounter -= 1;
 800555e:	4bad      	ldr	r3, [pc, #692]	@ (8005814 <ESP_Upkeep+0x750>)
 8005560:	781b      	ldrb	r3, [r3, #0]
 8005562:	3b01      	subs	r3, #1
 8005564:	b2da      	uxtb	r2, r3
 8005566:	4bab      	ldr	r3, [pc, #684]	@ (8005814 <ESP_Upkeep+0x750>)
 8005568:	701a      	strb	r2, [r3, #0]
            ATExpectation = RECEIVE_EXPECTATION_START;
 800556a:	4ba7      	ldr	r3, [pc, #668]	@ (8005808 <ESP_Upkeep+0x744>)
 800556c:	2202      	movs	r2, #2
 800556e:	701a      	strb	r2, [r3, #0]
            EspState = ESP_STATE_SEND;
 8005570:	4ba9      	ldr	r3, [pc, #676]	@ (8005818 <ESP_Upkeep+0x754>)
 8005572:	2204      	movs	r2, #4
 8005574:	701a      	strb	r2, [r3, #0]
          }
        }
        if(proceed){
 8005576:	1d7b      	adds	r3, r7, #5
 8005578:	781b      	ldrb	r3, [r3, #0]
 800557a:	2b00      	cmp	r3, #0
 800557c:	d100      	bne.n	8005580 <ESP_Upkeep+0x4bc>
 800557e:	e13c      	b.n	80057fa <ESP_Upkeep+0x736>
          EspState = ESP_STATE_NEXT_AT;
 8005580:	4ba5      	ldr	r3, [pc, #660]	@ (8005818 <ESP_Upkeep+0x754>)
 8005582:	2205      	movs	r2, #5
 8005584:	701a      	strb	r2, [r3, #0]
        }
      }
      break;
 8005586:	e138      	b.n	80057fa <ESP_Upkeep+0x736>

    case ESP_STATE_NEXT_AT:
      ATCounter += 1;
 8005588:	4ba2      	ldr	r3, [pc, #648]	@ (8005814 <ESP_Upkeep+0x750>)
 800558a:	781b      	ldrb	r3, [r3, #0]
 800558c:	3301      	adds	r3, #1
 800558e:	b2da      	uxtb	r2, r3
 8005590:	4ba0      	ldr	r3, [pc, #640]	@ (8005814 <ESP_Upkeep+0x750>)
 8005592:	701a      	strb	r2, [r3, #0]
      ATCommand = ATCommandArray[ATCounter];
 8005594:	4b9f      	ldr	r3, [pc, #636]	@ (8005814 <ESP_Upkeep+0x750>)
 8005596:	781b      	ldrb	r3, [r3, #0]
 8005598:	001a      	movs	r2, r3
 800559a:	4ba0      	ldr	r3, [pc, #640]	@ (800581c <ESP_Upkeep+0x758>)
 800559c:	5c9a      	ldrb	r2, [r3, r2]
 800559e:	4b9c      	ldr	r3, [pc, #624]	@ (8005810 <ESP_Upkeep+0x74c>)
 80055a0:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_RESTORE){
 80055a2:	4b9b      	ldr	r3, [pc, #620]	@ (8005810 <ESP_Upkeep+0x74c>)
 80055a4:	781b      	ldrb	r3, [r3, #0]
 80055a6:	2b03      	cmp	r3, #3
 80055a8:	d102      	bne.n	80055b0 <ESP_Upkeep+0x4ec>
         ATExpectation = RECEIVE_EXPECTATION_READY;
 80055aa:	4b97      	ldr	r3, [pc, #604]	@ (8005808 <ESP_Upkeep+0x744>)
 80055ac:	2201      	movs	r2, #1
 80055ae:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_HTTPCPOST){
 80055b0:	4b97      	ldr	r3, [pc, #604]	@ (8005810 <ESP_Upkeep+0x74c>)
 80055b2:	781b      	ldrb	r3, [r3, #0]
 80055b4:	2b0e      	cmp	r3, #14
 80055b6:	d102      	bne.n	80055be <ESP_Upkeep+0x4fa>
        ATExpectation = RECEIVE_EXPECTATION_START;
 80055b8:	4b93      	ldr	r3, [pc, #588]	@ (8005808 <ESP_Upkeep+0x744>)
 80055ba:	2202      	movs	r2, #2
 80055bc:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand != AT_HTTPCPOST && ATCommand != AT_RESTORE){
 80055be:	4b94      	ldr	r3, [pc, #592]	@ (8005810 <ESP_Upkeep+0x74c>)
 80055c0:	781b      	ldrb	r3, [r3, #0]
 80055c2:	2b0e      	cmp	r3, #14
 80055c4:	d006      	beq.n	80055d4 <ESP_Upkeep+0x510>
 80055c6:	4b92      	ldr	r3, [pc, #584]	@ (8005810 <ESP_Upkeep+0x74c>)
 80055c8:	781b      	ldrb	r3, [r3, #0]
 80055ca:	2b03      	cmp	r3, #3
 80055cc:	d002      	beq.n	80055d4 <ESP_Upkeep+0x510>
        ATExpectation = RECEIVE_EXPECTATION_OK;
 80055ce:	4b8e      	ldr	r3, [pc, #568]	@ (8005808 <ESP_Upkeep+0x744>)
 80055d0:	2200      	movs	r2, #0
 80055d2:	701a      	strb	r2, [r3, #0]
      }
      if(ATCommand == AT_CIPSNTPCFG){
 80055d4:	4b8e      	ldr	r3, [pc, #568]	@ (8005810 <ESP_Upkeep+0x74c>)
 80055d6:	781b      	ldrb	r3, [r3, #0]
 80055d8:	2b11      	cmp	r3, #17
 80055da:	d102      	bne.n	80055e2 <ESP_Upkeep+0x51e>
         ATExpectation = RECEIVE_EXPECTATION_TIME;
 80055dc:	4b8a      	ldr	r3, [pc, #552]	@ (8005808 <ESP_Upkeep+0x744>)
 80055de:	2205      	movs	r2, #5
 80055e0:	701a      	strb	r2, [r3, #0]
      }
      EspState = ESP_STATE_SEND;
 80055e2:	4b8d      	ldr	r3, [pc, #564]	@ (8005818 <ESP_Upkeep+0x754>)
 80055e4:	2204      	movs	r2, #4
 80055e6:	701a      	strb	r2, [r3, #0]
      if(ATCommand == AT_END){
 80055e8:	4b89      	ldr	r3, [pc, #548]	@ (8005810 <ESP_Upkeep+0x74c>)
 80055ea:	781b      	ldrb	r3, [r3, #0]
 80055ec:	2b14      	cmp	r3, #20
 80055ee:	d000      	beq.n	80055f2 <ESP_Upkeep+0x52e>
 80055f0:	e105      	b.n	80057fe <ESP_Upkeep+0x73a>
        if(Mode == AT_MODE_SEND){
 80055f2:	4b8b      	ldr	r3, [pc, #556]	@ (8005820 <ESP_Upkeep+0x75c>)
 80055f4:	781b      	ldrb	r3, [r3, #0]
 80055f6:	2b02      	cmp	r3, #2
 80055f8:	d11d      	bne.n	8005636 <ESP_Upkeep+0x572>
          ESPTimeStamp = HAL_GetTick() + ESP_UNTIL_NEXT_SEND;
 80055fa:	f006 fc2b 	bl	800be54 <HAL_GetTick>
 80055fe:	0003      	movs	r3, r0
 8005600:	4a88      	ldr	r2, [pc, #544]	@ (8005824 <ESP_Upkeep+0x760>)
 8005602:	189a      	adds	r2, r3, r2
 8005604:	4b7f      	ldr	r3, [pc, #508]	@ (8005804 <ESP_Upkeep+0x740>)
 8005606:	601a      	str	r2, [r3, #0]
          ResetESPIndicator();
 8005608:	f005 fa10 	bl	800aa2c <ResetESPIndicator>
          clearDMABuffer();
 800560c:	f7ff fa2e 	bl	8004a6c <clearDMABuffer>
          stop = HAL_GetTick();
 8005610:	f006 fc20 	bl	800be54 <HAL_GetTick>
 8005614:	0002      	movs	r2, r0
 8005616:	4b84      	ldr	r3, [pc, #528]	@ (8005828 <ESP_Upkeep+0x764>)
 8005618:	601a      	str	r2, [r3, #0]
          Debug("Message send in %lu ms", (stop-start));
 800561a:	4b83      	ldr	r3, [pc, #524]	@ (8005828 <ESP_Upkeep+0x764>)
 800561c:	681a      	ldr	r2, [r3, #0]
 800561e:	4b83      	ldr	r3, [pc, #524]	@ (800582c <ESP_Upkeep+0x768>)
 8005620:	681b      	ldr	r3, [r3, #0]
 8005622:	1ad3      	subs	r3, r2, r3
 8005624:	4a82      	ldr	r2, [pc, #520]	@ (8005830 <ESP_Upkeep+0x76c>)
 8005626:	4983      	ldr	r1, [pc, #524]	@ (8005834 <ESP_Upkeep+0x770>)
 8005628:	2003      	movs	r0, #3
 800562a:	f006 f877 	bl	800b71c <CreateLine>
          EspState = ESP_STATE_DEINIT;
 800562e:	4b7a      	ldr	r3, [pc, #488]	@ (8005818 <ESP_Upkeep+0x754>)
 8005630:	220d      	movs	r2, #13
 8005632:	701a      	strb	r2, [r3, #0]
          }
        else{
          EspState = ESP_STATE_RESET;
        }
      }
    break;
 8005634:	e0e3      	b.n	80057fe <ESP_Upkeep+0x73a>
        else if (Mode == AT_MODE_GETTIME) {
 8005636:	4b7a      	ldr	r3, [pc, #488]	@ (8005820 <ESP_Upkeep+0x75c>)
 8005638:	781b      	ldrb	r3, [r3, #0]
 800563a:	2b05      	cmp	r3, #5
 800563c:	d12e      	bne.n	800569c <ESP_Upkeep+0x5d8>
            setTime = false;
 800563e:	4b7e      	ldr	r3, [pc, #504]	@ (8005838 <ESP_Upkeep+0x774>)
 8005640:	2200      	movs	r2, #0
 8005642:	701a      	strb	r2, [r3, #0]
            ESPNTPTimeStamp = HAL_GetTick()+ESP_UNTIL_NEXT_NTP; // every 4 hour
 8005644:	f006 fc06 	bl	800be54 <HAL_GetTick>
 8005648:	0003      	movs	r3, r0
 800564a:	4a7c      	ldr	r2, [pc, #496]	@ (800583c <ESP_Upkeep+0x778>)
 800564c:	189a      	adds	r2, r3, r2
 800564e:	4b7c      	ldr	r3, [pc, #496]	@ (8005840 <ESP_Upkeep+0x77c>)
 8005650:	601a      	str	r2, [r3, #0]
            Debug("Time synchronized by NTP, next NTP should be called at tick: %lu", ESPNTPTimeStamp);
 8005652:	4b7b      	ldr	r3, [pc, #492]	@ (8005840 <ESP_Upkeep+0x77c>)
 8005654:	681b      	ldr	r3, [r3, #0]
 8005656:	4a7b      	ldr	r2, [pc, #492]	@ (8005844 <ESP_Upkeep+0x780>)
 8005658:	4976      	ldr	r1, [pc, #472]	@ (8005834 <ESP_Upkeep+0x770>)
 800565a:	2003      	movs	r0, #3
 800565c:	f006 f85e 	bl	800b71c <CreateLine>
            ESPTimeStamp = savedESPTimeStamp;
 8005660:	4b79      	ldr	r3, [pc, #484]	@ (8005848 <ESP_Upkeep+0x784>)
 8005662:	681a      	ldr	r2, [r3, #0]
 8005664:	4b67      	ldr	r3, [pc, #412]	@ (8005804 <ESP_Upkeep+0x740>)
 8005666:	601a      	str	r2, [r3, #0]
            ResetESPIndicator();
 8005668:	f005 f9e0 	bl	800aa2c <ResetESPIndicator>
            clearDMABuffer();
 800566c:	f7ff f9fe 	bl	8004a6c <clearDMABuffer>
            stop = HAL_GetTick();
 8005670:	f006 fbf0 	bl	800be54 <HAL_GetTick>
 8005674:	0002      	movs	r2, r0
 8005676:	4b6c      	ldr	r3, [pc, #432]	@ (8005828 <ESP_Upkeep+0x764>)
 8005678:	601a      	str	r2, [r3, #0]
            Debug("Message time update in %lu ms", (stop-start));
 800567a:	4b6b      	ldr	r3, [pc, #428]	@ (8005828 <ESP_Upkeep+0x764>)
 800567c:	681a      	ldr	r2, [r3, #0]
 800567e:	4b6b      	ldr	r3, [pc, #428]	@ (800582c <ESP_Upkeep+0x768>)
 8005680:	681b      	ldr	r3, [r3, #0]
 8005682:	1ad3      	subs	r3, r2, r3
 8005684:	4a71      	ldr	r2, [pc, #452]	@ (800584c <ESP_Upkeep+0x788>)
 8005686:	496b      	ldr	r1, [pc, #428]	@ (8005834 <ESP_Upkeep+0x770>)
 8005688:	2003      	movs	r0, #3
 800568a:	f006 f847 	bl	800b71c <CreateLine>
            EspState = ESP_STATE_DEINIT;
 800568e:	4b62      	ldr	r3, [pc, #392]	@ (8005818 <ESP_Upkeep+0x754>)
 8005690:	220d      	movs	r2, #13
 8005692:	701a      	strb	r2, [r3, #0]
            Mode = AT_MODE_SEND;
 8005694:	4b62      	ldr	r3, [pc, #392]	@ (8005820 <ESP_Upkeep+0x75c>)
 8005696:	2202      	movs	r2, #2
 8005698:	701a      	strb	r2, [r3, #0]
    break;
 800569a:	e0b0      	b.n	80057fe <ESP_Upkeep+0x73a>
          EspState = ESP_STATE_RESET;
 800569c:	4b5e      	ldr	r3, [pc, #376]	@ (8005818 <ESP_Upkeep+0x754>)
 800569e:	2209      	movs	r2, #9
 80056a0:	701a      	strb	r2, [r3, #0]
    break;
 80056a2:	e0ac      	b.n	80057fe <ESP_Upkeep+0x73a>

    case ESP_STATE_DEINIT:
      EspTurnedOn = false;
 80056a4:	4b6a      	ldr	r3, [pc, #424]	@ (8005850 <ESP_Upkeep+0x78c>)
 80056a6:	2200      	movs	r2, #0
 80056a8:	701a      	strb	r2, [r3, #0]
      HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_RESET);
 80056aa:	4b6a      	ldr	r3, [pc, #424]	@ (8005854 <ESP_Upkeep+0x790>)
 80056ac:	2200      	movs	r2, #0
 80056ae:	2101      	movs	r1, #1
 80056b0:	0018      	movs	r0, r3
 80056b2:	f007 fe2e 	bl	800d312 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 80056b6:	2001      	movs	r0, #1
 80056b8:	f006 fbd6 	bl	800be68 <HAL_Delay>
      HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_RESET);
 80056bc:	2380      	movs	r3, #128	@ 0x80
 80056be:	011b      	lsls	r3, r3, #4
 80056c0:	4865      	ldr	r0, [pc, #404]	@ (8005858 <ESP_Upkeep+0x794>)
 80056c2:	2200      	movs	r2, #0
 80056c4:	0019      	movs	r1, r3
 80056c6:	f007 fe24 	bl	800d312 <HAL_GPIO_WritePin>
      HAL_Delay(1);
 80056ca:	2001      	movs	r0, #1
 80056cc:	f006 fbcc 	bl	800be68 <HAL_Delay>
      HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, 0);
 80056d0:	4b60      	ldr	r3, [pc, #384]	@ (8005854 <ESP_Upkeep+0x790>)
 80056d2:	2200      	movs	r2, #0
 80056d4:	2102      	movs	r1, #2
 80056d6:	0018      	movs	r0, r3
 80056d8:	f007 fe1b 	bl	800d312 <HAL_GPIO_WritePin>
      EspState = ESP_STATE_RESET;
 80056dc:	4b4e      	ldr	r3, [pc, #312]	@ (8005818 <ESP_Upkeep+0x754>)
 80056de:	2209      	movs	r2, #9
 80056e0:	701a      	strb	r2, [r3, #0]
      HAL_Delay(1);
 80056e2:	2001      	movs	r0, #1
 80056e4:	f006 fbc0 	bl	800be68 <HAL_Delay>
      break;
 80056e8:	e0cb      	b.n	8005882 <ESP_Upkeep+0x7be>

    case ESP_STATE_RESET:
      if(TimestampIsReached(ESPTimeStamp) || ReconfigSet){
 80056ea:	4b46      	ldr	r3, [pc, #280]	@ (8005804 <ESP_Upkeep+0x740>)
 80056ec:	681b      	ldr	r3, [r3, #0]
 80056ee:	0018      	movs	r0, r3
 80056f0:	f005 ffbe 	bl	800b670 <TimestampIsReached>
 80056f4:	1e03      	subs	r3, r0, #0
 80056f6:	d103      	bne.n	8005700 <ESP_Upkeep+0x63c>
 80056f8:	4b58      	ldr	r3, [pc, #352]	@ (800585c <ESP_Upkeep+0x798>)
 80056fa:	781b      	ldrb	r3, [r3, #0]
 80056fc:	2b00      	cmp	r3, #0
 80056fe:	d02f      	beq.n	8005760 <ESP_Upkeep+0x69c>
        if(Mode == AT_MODE_INIT){
 8005700:	4b47      	ldr	r3, [pc, #284]	@ (8005820 <ESP_Upkeep+0x75c>)
 8005702:	781b      	ldrb	r3, [r3, #0]
 8005704:	2b00      	cmp	r3, #0
 8005706:	d105      	bne.n	8005714 <ESP_Upkeep+0x650>
          InitIsDone = true;
 8005708:	4b55      	ldr	r3, [pc, #340]	@ (8005860 <ESP_Upkeep+0x79c>)
 800570a:	2201      	movs	r2, #1
 800570c:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 800570e:	4b42      	ldr	r3, [pc, #264]	@ (8005818 <ESP_Upkeep+0x754>)
 8005710:	220b      	movs	r2, #11
 8005712:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_CONFIG){
 8005714:	4b42      	ldr	r3, [pc, #264]	@ (8005820 <ESP_Upkeep+0x75c>)
 8005716:	781b      	ldrb	r3, [r3, #0]
 8005718:	2b01      	cmp	r3, #1
 800571a:	d108      	bne.n	800572e <ESP_Upkeep+0x66a>
          ConnectionMade = true;
 800571c:	4b51      	ldr	r3, [pc, #324]	@ (8005864 <ESP_Upkeep+0x7a0>)
 800571e:	2201      	movs	r2, #1
 8005720:	701a      	strb	r2, [r3, #0]
          beurs = true;
 8005722:	4b51      	ldr	r3, [pc, #324]	@ (8005868 <ESP_Upkeep+0x7a4>)
 8005724:	2201      	movs	r2, #1
 8005726:	701a      	strb	r2, [r3, #0]
          EspState = ESP_STATE_MODE_SELECT;
 8005728:	4b3b      	ldr	r3, [pc, #236]	@ (8005818 <ESP_Upkeep+0x754>)
 800572a:	220b      	movs	r2, #11
 800572c:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_SEND){
 800572e:	4b3c      	ldr	r3, [pc, #240]	@ (8005820 <ESP_Upkeep+0x75c>)
 8005730:	781b      	ldrb	r3, [r3, #0]
 8005732:	2b02      	cmp	r3, #2
 8005734:	d102      	bne.n	800573c <ESP_Upkeep+0x678>
          EspState = ESP_STATE_INIT;
 8005736:	4b38      	ldr	r3, [pc, #224]	@ (8005818 <ESP_Upkeep+0x754>)
 8005738:	2202      	movs	r2, #2
 800573a:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_RECONFIG){
 800573c:	4b38      	ldr	r3, [pc, #224]	@ (8005820 <ESP_Upkeep+0x75c>)
 800573e:	781b      	ldrb	r3, [r3, #0]
 8005740:	2b03      	cmp	r3, #3
 8005742:	d102      	bne.n	800574a <ESP_Upkeep+0x686>
          EspState = ESP_STATE_CONFIG;
 8005744:	4b34      	ldr	r3, [pc, #208]	@ (8005818 <ESP_Upkeep+0x754>)
 8005746:	220e      	movs	r2, #14
 8005748:	701a      	strb	r2, [r3, #0]
        }
        if(Mode == AT_MODE_TEST){
 800574a:	4b35      	ldr	r3, [pc, #212]	@ (8005820 <ESP_Upkeep+0x75c>)
 800574c:	781b      	ldrb	r3, [r3, #0]
 800574e:	2b04      	cmp	r3, #4
 8005750:	d127      	bne.n	80057a2 <ESP_Upkeep+0x6de>
          EspState = ESP_STATE_MODE_SELECT;
 8005752:	4b31      	ldr	r3, [pc, #196]	@ (8005818 <ESP_Upkeep+0x754>)
 8005754:	220b      	movs	r2, #11
 8005756:	701a      	strb	r2, [r3, #0]
          beursTest = true;
 8005758:	4b44      	ldr	r3, [pc, #272]	@ (800586c <ESP_Upkeep+0x7a8>)
 800575a:	2201      	movs	r2, #1
 800575c:	701a      	strb	r2, [r3, #0]
        if(Mode == AT_MODE_TEST){
 800575e:	e020      	b.n	80057a2 <ESP_Upkeep+0x6de>
        }
      }
      else if (TimestampIsReached(ESPNTPTimeStamp)) {
 8005760:	4b37      	ldr	r3, [pc, #220]	@ (8005840 <ESP_Upkeep+0x77c>)
 8005762:	681b      	ldr	r3, [r3, #0]
 8005764:	0018      	movs	r0, r3
 8005766:	f005 ff83 	bl	800b670 <TimestampIsReached>
 800576a:	1e03      	subs	r3, r0, #0
 800576c:	d100      	bne.n	8005770 <ESP_Upkeep+0x6ac>
 800576e:	e087      	b.n	8005880 <ESP_Upkeep+0x7bc>
        if(Mode == AT_MODE_SEND ) {
 8005770:	4b2b      	ldr	r3, [pc, #172]	@ (8005820 <ESP_Upkeep+0x75c>)
 8005772:	781b      	ldrb	r3, [r3, #0]
 8005774:	2b02      	cmp	r3, #2
 8005776:	d000      	beq.n	800577a <ESP_Upkeep+0x6b6>
 8005778:	e082      	b.n	8005880 <ESP_Upkeep+0x7bc>
            Mode = AT_MODE_GETTIME;
 800577a:	4b29      	ldr	r3, [pc, #164]	@ (8005820 <ESP_Upkeep+0x75c>)
 800577c:	2205      	movs	r2, #5
 800577e:	701a      	strb	r2, [r3, #0]
//          EspState = ESP_STATE_MODE_SELECT;
         EspState = ESP_STATE_INIT;
 8005780:	4b25      	ldr	r3, [pc, #148]	@ (8005818 <ESP_Upkeep+0x754>)
 8005782:	2202      	movs	r2, #2
 8005784:	701a      	strb	r2, [r3, #0]
         savedESPTimeStamp = ESPTimeStamp;
 8005786:	4b1f      	ldr	r3, [pc, #124]	@ (8005804 <ESP_Upkeep+0x740>)
 8005788:	681a      	ldr	r2, [r3, #0]
 800578a:	4b2f      	ldr	r3, [pc, #188]	@ (8005848 <ESP_Upkeep+0x784>)
 800578c:	601a      	str	r2, [r3, #0]
         setTime = true;
 800578e:	4b2a      	ldr	r3, [pc, #168]	@ (8005838 <ESP_Upkeep+0x774>)
 8005790:	2201      	movs	r2, #1
 8005792:	701a      	strb	r2, [r3, #0]
         Debug("setTime to true");
 8005794:	4a36      	ldr	r2, [pc, #216]	@ (8005870 <ESP_Upkeep+0x7ac>)
 8005796:	4b27      	ldr	r3, [pc, #156]	@ (8005834 <ESP_Upkeep+0x770>)
 8005798:	0019      	movs	r1, r3
 800579a:	2003      	movs	r0, #3
 800579c:	f005 ffbe 	bl	800b71c <CreateLine>
        }
      }
      break;
 80057a0:	e06e      	b.n	8005880 <ESP_Upkeep+0x7bc>
 80057a2:	e06d      	b.n	8005880 <ESP_Upkeep+0x7bc>

    case ESP_STATE_CONFIG:
      Debug("Do nothing until reset");
 80057a4:	4a33      	ldr	r2, [pc, #204]	@ (8005874 <ESP_Upkeep+0x7b0>)
 80057a6:	4b23      	ldr	r3, [pc, #140]	@ (8005834 <ESP_Upkeep+0x770>)
 80057a8:	0019      	movs	r1, r3
 80057aa:	2003      	movs	r0, #3
 80057ac:	f005 ffb6 	bl	800b71c <CreateLine>
      Process_PC_Config(GetUsbRxPointer());
 80057b0:	f013 fd6a 	bl	8019288 <GetUsbRxPointer>
 80057b4:	0003      	movs	r3, r0
 80057b6:	0018      	movs	r0, r3
 80057b8:	f000 f8de 	bl	8005978 <Process_PC_Config>
      break;
 80057bc:	e061      	b.n	8005882 <ESP_Upkeep+0x7be>

    case ESP_STATE_ERROR:
      // Handle error state
      Debug("ESP Error occurred");
 80057be:	4a2e      	ldr	r2, [pc, #184]	@ (8005878 <ESP_Upkeep+0x7b4>)
 80057c0:	4b1c      	ldr	r3, [pc, #112]	@ (8005834 <ESP_Upkeep+0x770>)
 80057c2:	0019      	movs	r1, r3
 80057c4:	2003      	movs	r0, #3
 80057c6:	f005 ffa9 	bl	800b71c <CreateLine>
      EspState = ESP_STATE_INIT;
 80057ca:	4b13      	ldr	r3, [pc, #76]	@ (8005818 <ESP_Upkeep+0x754>)
 80057cc:	2202      	movs	r2, #2
 80057ce:	701a      	strb	r2, [r3, #0]
      break;
 80057d0:	e057      	b.n	8005882 <ESP_Upkeep+0x7be>

    default:
      // Handle unexpected state
      Debug("Something went wrong");
 80057d2:	4a2a      	ldr	r2, [pc, #168]	@ (800587c <ESP_Upkeep+0x7b8>)
 80057d4:	4b17      	ldr	r3, [pc, #92]	@ (8005834 <ESP_Upkeep+0x770>)
 80057d6:	0019      	movs	r1, r3
 80057d8:	2003      	movs	r0, #3
 80057da:	f005 ff9f 	bl	800b71c <CreateLine>
      EspState = ESP_STATE_ERROR;
 80057de:	4b0e      	ldr	r3, [pc, #56]	@ (8005818 <ESP_Upkeep+0x754>)
 80057e0:	2207      	movs	r2, #7
 80057e2:	701a      	strb	r2, [r3, #0]
      break;
 80057e4:	e04d      	b.n	8005882 <ESP_Upkeep+0x7be>
      break;
 80057e6:	46c0      	nop			@ (mov r8, r8)
 80057e8:	e04b      	b.n	8005882 <ESP_Upkeep+0x7be>
      break;
 80057ea:	46c0      	nop			@ (mov r8, r8)
 80057ec:	e049      	b.n	8005882 <ESP_Upkeep+0x7be>
        break;
 80057ee:	46c0      	nop			@ (mov r8, r8)
 80057f0:	e047      	b.n	8005882 <ESP_Upkeep+0x7be>
    break;
 80057f2:	46c0      	nop			@ (mov r8, r8)
 80057f4:	e045      	b.n	8005882 <ESP_Upkeep+0x7be>
    break;
 80057f6:	46c0      	nop			@ (mov r8, r8)
 80057f8:	e043      	b.n	8005882 <ESP_Upkeep+0x7be>
      break;
 80057fa:	46c0      	nop			@ (mov r8, r8)
 80057fc:	e041      	b.n	8005882 <ESP_Upkeep+0x7be>
    break;
 80057fe:	46c0      	nop			@ (mov r8, r8)
 8005800:	e03f      	b.n	8005882 <ESP_Upkeep+0x7be>
 8005802:	46c0      	nop			@ (mov r8, r8)
 8005804:	20000988 	.word	0x20000988
 8005808:	20000995 	.word	0x20000995
 800580c:	2000002a 	.word	0x2000002a
 8005810:	20000996 	.word	0x20000996
 8005814:	20000986 	.word	0x20000986
 8005818:	20000028 	.word	0x20000028
 800581c:	2000097c 	.word	0x2000097c
 8005820:	20000997 	.word	0x20000997
 8005824:	000493e0 	.word	0x000493e0
 8005828:	20000560 	.word	0x20000560
 800582c:	2000055c 	.word	0x2000055c
 8005830:	0801fc9c 	.word	0x0801fc9c
 8005834:	0801f5e0 	.word	0x0801f5e0
 8005838:	20000001 	.word	0x20000001
 800583c:	002c4020 	.word	0x002c4020
 8005840:	2000098c 	.word	0x2000098c
 8005844:	0801fcb4 	.word	0x0801fcb4
 8005848:	20000990 	.word	0x20000990
 800584c:	0801fcf8 	.word	0x0801fcf8
 8005850:	20000548 	.word	0x20000548
 8005854:	50001c00 	.word	0x50001c00
 8005858:	50000800 	.word	0x50000800
 800585c:	2000054b 	.word	0x2000054b
 8005860:	20000549 	.word	0x20000549
 8005864:	2000054c 	.word	0x2000054c
 8005868:	2000054e 	.word	0x2000054e
 800586c:	2000054d 	.word	0x2000054d
 8005870:	0801fd18 	.word	0x0801fd18
 8005874:	0801fd28 	.word	0x0801fd28
 8005878:	0801fd40 	.word	0x0801fd40
 800587c:	0801fd54 	.word	0x0801fd54
      break;
 8005880:	46c0      	nop			@ (mov r8, r8)
  }
  return EspState;
 8005882:	4b03      	ldr	r3, [pc, #12]	@ (8005890 <ESP_Upkeep+0x7cc>)
 8005884:	781b      	ldrb	r3, [r3, #0]
}
 8005886:	0018      	movs	r0, r3
 8005888:	46bd      	mov	sp, r7
 800588a:	b002      	add	sp, #8
 800588c:	bdb0      	pop	{r4, r5, r7, pc}
 800588e:	46c0      	nop			@ (mov r8, r8)
 8005890:	20000028 	.word	0x20000028

08005894 <I2CSensors_Init>:
static I2C_HandleTypeDef* SensorI2C = NULL;

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);
static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes);

void I2CSensors_Init(I2C_HandleTypeDef* sensorI2C) {
 8005894:	b580      	push	{r7, lr}
 8005896:	b082      	sub	sp, #8
 8005898:	af00      	add	r7, sp, #0
 800589a:	6078      	str	r0, [r7, #4]
    SensorI2C = sensorI2C;
 800589c:	4b09      	ldr	r3, [pc, #36]	@ (80058c4 <I2CSensors_Init+0x30>)
 800589e:	687a      	ldr	r2, [r7, #4]
 80058a0:	601a      	str	r2, [r3, #0]
    HT_Init(ReadI2C, WriteI2C);
 80058a2:	4a09      	ldr	r2, [pc, #36]	@ (80058c8 <I2CSensors_Init+0x34>)
 80058a4:	4b09      	ldr	r3, [pc, #36]	@ (80058cc <I2CSensors_Init+0x38>)
 80058a6:	0011      	movs	r1, r2
 80058a8:	0018      	movs	r0, r3
 80058aa:	f001 f985 	bl	8006bb8 <HT_Init>
    Gas_Init(ReadI2C, WriteI2C);
 80058ae:	4a06      	ldr	r2, [pc, #24]	@ (80058c8 <I2CSensors_Init+0x34>)
 80058b0:	4b06      	ldr	r3, [pc, #24]	@ (80058cc <I2CSensors_Init+0x38>)
 80058b2:	0011      	movs	r1, r2
 80058b4:	0018      	movs	r0, r3
 80058b6:	f000 ffef 	bl	8006898 <Gas_Init>
}
 80058ba:	46c0      	nop			@ (mov r8, r8)
 80058bc:	46bd      	mov	sp, r7
 80058be:	b002      	add	sp, #8
 80058c0:	bd80      	pop	{r7, pc}
 80058c2:	46c0      	nop			@ (mov r8, r8)
 80058c4:	20000a88 	.word	0x20000a88
 80058c8:	08005925 	.word	0x08005925
 80058cc:	080058d1 	.word	0x080058d1

080058d0 <ReadI2C>:

static bool ReadI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 80058d0:	b5b0      	push	{r4, r5, r7, lr}
 80058d2:	b084      	sub	sp, #16
 80058d4:	af00      	add	r7, sp, #0
 80058d6:	6039      	str	r1, [r7, #0]
 80058d8:	0011      	movs	r1, r2
 80058da:	1dfb      	adds	r3, r7, #7
 80058dc:	1c02      	adds	r2, r0, #0
 80058de:	701a      	strb	r2, [r3, #0]
 80058e0:	1dbb      	adds	r3, r7, #6
 80058e2:	1c0a      	adds	r2, r1, #0
 80058e4:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Receive_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 80058e6:	4b0e      	ldr	r3, [pc, #56]	@ (8005920 <ReadI2C+0x50>)
 80058e8:	6818      	ldr	r0, [r3, #0]
 80058ea:	1dfb      	adds	r3, r7, #7
 80058ec:	781b      	ldrb	r3, [r3, #0]
 80058ee:	b29b      	uxth	r3, r3
 80058f0:	18db      	adds	r3, r3, r3
 80058f2:	b299      	uxth	r1, r3
 80058f4:	1dbb      	adds	r3, r7, #6
 80058f6:	781b      	ldrb	r3, [r3, #0]
 80058f8:	b29b      	uxth	r3, r3
 80058fa:	250f      	movs	r5, #15
 80058fc:	197c      	adds	r4, r7, r5
 80058fe:	683a      	ldr	r2, [r7, #0]
 8005900:	f007 fec0 	bl	800d684 <HAL_I2C_Master_Receive_DMA>
 8005904:	0003      	movs	r3, r0
 8005906:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 8005908:	197b      	adds	r3, r7, r5
 800590a:	781b      	ldrb	r3, [r3, #0]
 800590c:	2b00      	cmp	r3, #0
 800590e:	d001      	beq.n	8005914 <ReadI2C+0x44>
        return false;
 8005910:	2300      	movs	r3, #0
 8005912:	e000      	b.n	8005916 <ReadI2C+0x46>
    }
    return true;
 8005914:	2301      	movs	r3, #1
}
 8005916:	0018      	movs	r0, r3
 8005918:	46bd      	mov	sp, r7
 800591a:	b004      	add	sp, #16
 800591c:	bdb0      	pop	{r4, r5, r7, pc}
 800591e:	46c0      	nop			@ (mov r8, r8)
 8005920:	20000a88 	.word	0x20000a88

08005924 <WriteI2C>:

static bool WriteI2C(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 8005924:	b5b0      	push	{r4, r5, r7, lr}
 8005926:	b084      	sub	sp, #16
 8005928:	af00      	add	r7, sp, #0
 800592a:	6039      	str	r1, [r7, #0]
 800592c:	0011      	movs	r1, r2
 800592e:	1dfb      	adds	r3, r7, #7
 8005930:	1c02      	adds	r2, r0, #0
 8005932:	701a      	strb	r2, [r3, #0]
 8005934:	1dbb      	adds	r3, r7, #6
 8005936:	1c0a      	adds	r2, r1, #0
 8005938:	701a      	strb	r2, [r3, #0]
    HAL_StatusTypeDef status = HAL_I2C_Master_Transmit_DMA(SensorI2C, (address << 1), buffer, nrBytes);
 800593a:	4b0e      	ldr	r3, [pc, #56]	@ (8005974 <WriteI2C+0x50>)
 800593c:	6818      	ldr	r0, [r3, #0]
 800593e:	1dfb      	adds	r3, r7, #7
 8005940:	781b      	ldrb	r3, [r3, #0]
 8005942:	b29b      	uxth	r3, r3
 8005944:	18db      	adds	r3, r3, r3
 8005946:	b299      	uxth	r1, r3
 8005948:	1dbb      	adds	r3, r7, #6
 800594a:	781b      	ldrb	r3, [r3, #0]
 800594c:	b29b      	uxth	r3, r3
 800594e:	250f      	movs	r5, #15
 8005950:	197c      	adds	r4, r7, r5
 8005952:	683a      	ldr	r2, [r7, #0]
 8005954:	f007 fd90 	bl	800d478 <HAL_I2C_Master_Transmit_DMA>
 8005958:	0003      	movs	r3, r0
 800595a:	7023      	strb	r3, [r4, #0]
    if (status != HAL_OK) {
 800595c:	197b      	adds	r3, r7, r5
 800595e:	781b      	ldrb	r3, [r3, #0]
 8005960:	2b00      	cmp	r3, #0
 8005962:	d001      	beq.n	8005968 <WriteI2C+0x44>
        return false;
 8005964:	2300      	movs	r3, #0
 8005966:	e000      	b.n	800596a <WriteI2C+0x46>
    }
    return true;
 8005968:	2301      	movs	r3, #1
}
 800596a:	0018      	movs	r0, r3
 800596c:	46bd      	mov	sp, r7
 800596e:	b004      	add	sp, #16
 8005970:	bdb0      	pop	{r4, r5, r7, pc}
 8005972:	46c0      	nop			@ (mov r8, r8)
 8005974:	20000a88 	.word	0x20000a88

08005978 <Process_PC_Config>:
// Command value:   0 = ...
//                  1 = ...
//**************************************************************************************************

void Process_PC_Config(uint8_t* data) //, uint16_t length)
{
 8005978:	b590      	push	{r4, r7, lr}
 800597a:	b0c3      	sub	sp, #268	@ 0x10c
 800597c:	af3e      	add	r7, sp, #248	@ 0xf8
 800597e:	6078      	str	r0, [r7, #4]
    uint32_t length = GetUsbRxDataSize();
 8005980:	f013 fca2 	bl	80192c8 <GetUsbRxDataSize>
 8005984:	0003      	movs	r3, r0
 8005986:	60fb      	str	r3, [r7, #12]
    if (length > 5)
 8005988:	68fb      	ldr	r3, [r7, #12]
 800598a:	2b05      	cmp	r3, #5
 800598c:	d971      	bls.n	8005a72 <Process_PC_Config+0xfa>
    {
        uint8_t* message = (unsigned char*)strstr((const char*)data, PREABMLE);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	2123      	movs	r1, #35	@ 0x23
 8005992:	0018      	movs	r0, r3
 8005994:	f016 fd98 	bl	801c4c8 <strchr>
 8005998:	0003      	movs	r3, r0
 800599a:	60bb      	str	r3, [r7, #8]
        if(message != NULL)// && strlen((const char*)message) > 5)
 800599c:	68bb      	ldr	r3, [r7, #8]
 800599e:	2b00      	cmp	r3, #0
 80059a0:	d065      	beq.n	8005a6e <Process_PC_Config+0xf6>
        {
            received.Command = message[1];
 80059a2:	68bb      	ldr	r3, [r7, #8]
 80059a4:	785a      	ldrb	r2, [r3, #1]
 80059a6:	4b34      	ldr	r3, [pc, #208]	@ (8005a78 <Process_PC_Config+0x100>)
 80059a8:	701a      	strb	r2, [r3, #0]
            received.PayloadLength = message[2];
 80059aa:	68bb      	ldr	r3, [r7, #8]
 80059ac:	789a      	ldrb	r2, [r3, #2]
 80059ae:	4b32      	ldr	r3, [pc, #200]	@ (8005a78 <Process_PC_Config+0x100>)
 80059b0:	705a      	strb	r2, [r3, #1]
            if (length >= (uint32_t)(received.PayloadLength + HEADER_SIZE + CRC_SIZE))
 80059b2:	4b31      	ldr	r3, [pc, #196]	@ (8005a78 <Process_PC_Config+0x100>)
 80059b4:	785b      	ldrb	r3, [r3, #1]
 80059b6:	3305      	adds	r3, #5
 80059b8:	001a      	movs	r2, r3
 80059ba:	68fb      	ldr	r3, [r7, #12]
 80059bc:	4293      	cmp	r3, r2
 80059be:	d351      	bcc.n	8005a64 <Process_PC_Config+0xec>
            {
                memcpy(received.Payload, &message[3], received.PayloadLength);
 80059c0:	68bb      	ldr	r3, [r7, #8]
 80059c2:	1cd9      	adds	r1, r3, #3
 80059c4:	4b2c      	ldr	r3, [pc, #176]	@ (8005a78 <Process_PC_Config+0x100>)
 80059c6:	785b      	ldrb	r3, [r3, #1]
 80059c8:	001a      	movs	r2, r3
 80059ca:	4b2c      	ldr	r3, [pc, #176]	@ (8005a7c <Process_PC_Config+0x104>)
 80059cc:	0018      	movs	r0, r3
 80059ce:	f016 fe4f 	bl	801c670 <memcpy>
                received.Crc = message[3 + received.PayloadLength] << 8 | message[3 + received.PayloadLength + 1];
 80059d2:	4b29      	ldr	r3, [pc, #164]	@ (8005a78 <Process_PC_Config+0x100>)
 80059d4:	785b      	ldrb	r3, [r3, #1]
 80059d6:	3303      	adds	r3, #3
 80059d8:	001a      	movs	r2, r3
 80059da:	68bb      	ldr	r3, [r7, #8]
 80059dc:	189b      	adds	r3, r3, r2
 80059de:	781b      	ldrb	r3, [r3, #0]
 80059e0:	021b      	lsls	r3, r3, #8
 80059e2:	b21a      	sxth	r2, r3
 80059e4:	4b24      	ldr	r3, [pc, #144]	@ (8005a78 <Process_PC_Config+0x100>)
 80059e6:	785b      	ldrb	r3, [r3, #1]
 80059e8:	3304      	adds	r3, #4
 80059ea:	68b9      	ldr	r1, [r7, #8]
 80059ec:	18cb      	adds	r3, r1, r3
 80059ee:	781b      	ldrb	r3, [r3, #0]
 80059f0:	b21b      	sxth	r3, r3
 80059f2:	4313      	orrs	r3, r2
 80059f4:	b21b      	sxth	r3, r3
 80059f6:	b299      	uxth	r1, r3
 80059f8:	4a1f      	ldr	r2, [pc, #124]	@ (8005a78 <Process_PC_Config+0x100>)
 80059fa:	2381      	movs	r3, #129	@ 0x81
 80059fc:	005b      	lsls	r3, r3, #1
 80059fe:	52d1      	strh	r1, [r2, r3]

                if (received.Crc != CRC16_ARC(message, received.PayloadLength + 3))
 8005a00:	4a1d      	ldr	r2, [pc, #116]	@ (8005a78 <Process_PC_Config+0x100>)
 8005a02:	2381      	movs	r3, #129	@ 0x81
 8005a04:	005b      	lsls	r3, r3, #1
 8005a06:	5ad4      	ldrh	r4, [r2, r3]
 8005a08:	4b1b      	ldr	r3, [pc, #108]	@ (8005a78 <Process_PC_Config+0x100>)
 8005a0a:	785b      	ldrb	r3, [r3, #1]
 8005a0c:	3303      	adds	r3, #3
 8005a0e:	b29a      	uxth	r2, r3
 8005a10:	68bb      	ldr	r3, [r7, #8]
 8005a12:	0011      	movs	r1, r2
 8005a14:	0018      	movs	r0, r3
 8005a16:	f000 f975 	bl	8005d04 <CRC16_ARC>
 8005a1a:	0003      	movs	r3, r0
 8005a1c:	429c      	cmp	r4, r3
 8005a1e:	d007      	beq.n	8005a30 <Process_PC_Config+0xb8>
                {
                    Create_Message(ERROR, received.Payload, received.PayloadLength);
 8005a20:	4b15      	ldr	r3, [pc, #84]	@ (8005a78 <Process_PC_Config+0x100>)
 8005a22:	785a      	ldrb	r2, [r3, #1]
 8005a24:	4b15      	ldr	r3, [pc, #84]	@ (8005a7c <Process_PC_Config+0x104>)
 8005a26:	0019      	movs	r1, r3
 8005a28:	2001      	movs	r0, #1
 8005a2a:	f000 f919 	bl	8005c60 <Create_Message>
 8005a2e:	e016      	b.n	8005a5e <Process_PC_Config+0xe6>
                    //Handel het foutief ontvangen bericht af
                }
                else
                {
                    //Handel het correct ontvangen bericht af
                    ProcessCmd(received);
 8005a30:	4c11      	ldr	r4, [pc, #68]	@ (8005a78 <Process_PC_Config+0x100>)
 8005a32:	466b      	mov	r3, sp
 8005a34:	0018      	movs	r0, r3
 8005a36:	0023      	movs	r3, r4
 8005a38:	3310      	adds	r3, #16
 8005a3a:	22f4      	movs	r2, #244	@ 0xf4
 8005a3c:	0019      	movs	r1, r3
 8005a3e:	f016 fe17 	bl	801c670 <memcpy>
 8005a42:	6820      	ldr	r0, [r4, #0]
 8005a44:	6861      	ldr	r1, [r4, #4]
 8005a46:	68a2      	ldr	r2, [r4, #8]
 8005a48:	68e3      	ldr	r3, [r4, #12]
 8005a4a:	f000 f819 	bl	8005a80 <ProcessCmd>
                    Create_Message(received.Command, received.Payload, received.PayloadLength);
 8005a4e:	4b0a      	ldr	r3, [pc, #40]	@ (8005a78 <Process_PC_Config+0x100>)
 8005a50:	7818      	ldrb	r0, [r3, #0]
 8005a52:	4b09      	ldr	r3, [pc, #36]	@ (8005a78 <Process_PC_Config+0x100>)
 8005a54:	785a      	ldrb	r2, [r3, #1]
 8005a56:	4b09      	ldr	r3, [pc, #36]	@ (8005a7c <Process_PC_Config+0x104>)
 8005a58:	0019      	movs	r1, r3
 8005a5a:	f000 f901 	bl	8005c60 <Create_Message>
                }
                ResetUsbRxDataSize();
 8005a5e:	f013 fc1b 	bl	8019298 <ResetUsbRxDataSize>
                return;
 8005a62:	e006      	b.n	8005a72 <Process_PC_Config+0xfa>
            }
            GetUsbRxNextChunk(length);
 8005a64:	68fb      	ldr	r3, [r7, #12]
 8005a66:	0018      	movs	r0, r3
 8005a68:	f013 fc38 	bl	80192dc <GetUsbRxNextChunk>
 8005a6c:	e001      	b.n	8005a72 <Process_PC_Config+0xfa>
        }
        else
        {
            ResetUsbRxDataSize();
 8005a6e:	f013 fc13 	bl	8019298 <ResetUsbRxDataSize>
        }
    }
}
 8005a72:	46bd      	mov	sp, r7
 8005a74:	b005      	add	sp, #20
 8005a76:	bd90      	pop	{r4, r7, pc}
 8005a78:	20000a8c 	.word	0x20000a8c
 8005a7c:	20000a8e 	.word	0x20000a8e

08005a80 <ProcessCmd>:

void ProcessCmd(Receive_MSG msg)
{
 8005a80:	b084      	sub	sp, #16
 8005a82:	b5b0      	push	{r4, r5, r7, lr}
 8005a84:	b082      	sub	sp, #8
 8005a86:	af00      	add	r7, sp, #0
 8005a88:	2518      	movs	r5, #24
 8005a8a:	197c      	adds	r4, r7, r5
 8005a8c:	6020      	str	r0, [r4, #0]
 8005a8e:	6061      	str	r1, [r4, #4]
 8005a90:	60a2      	str	r2, [r4, #8]
 8005a92:	60e3      	str	r3, [r4, #12]
    switch (msg.Command)
 8005a94:	197b      	adds	r3, r7, r5
 8005a96:	781b      	ldrb	r3, [r3, #0]
 8005a98:	2bfe      	cmp	r3, #254	@ 0xfe
 8005a9a:	d100      	bne.n	8005a9e <ProcessCmd+0x1e>
 8005a9c:	e09c      	b.n	8005bd8 <ProcessCmd+0x158>
 8005a9e:	dd00      	ble.n	8005aa2 <ProcessCmd+0x22>
 8005aa0:	e0bc      	b.n	8005c1c <ProcessCmd+0x19c>
 8005aa2:	2b0c      	cmp	r3, #12
 8005aa4:	dc0a      	bgt.n	8005abc <ProcessCmd+0x3c>
 8005aa6:	2b00      	cmp	r3, #0
 8005aa8:	da00      	bge.n	8005aac <ProcessCmd+0x2c>
 8005aaa:	e0b7      	b.n	8005c1c <ProcessCmd+0x19c>
 8005aac:	2b0c      	cmp	r3, #12
 8005aae:	d900      	bls.n	8005ab2 <ProcessCmd+0x32>
 8005ab0:	e0b4      	b.n	8005c1c <ProcessCmd+0x19c>
 8005ab2:	009a      	lsls	r2, r3, #2
 8005ab4:	4b5d      	ldr	r3, [pc, #372]	@ (8005c2c <ProcessCmd+0x1ac>)
 8005ab6:	18d3      	adds	r3, r2, r3
 8005ab8:	681b      	ldr	r3, [r3, #0]
 8005aba:	469f      	mov	pc, r3
 8005abc:	2bfd      	cmp	r3, #253	@ 0xfd
 8005abe:	d100      	bne.n	8005ac2 <ProcessCmd+0x42>
 8005ac0:	e084      	b.n	8005bcc <ProcessCmd+0x14c>
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
            }
            break;
        }
    }
}
 8005ac2:	e0ab      	b.n	8005c1c <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(BoxConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005ac4:	2118      	movs	r1, #24
 8005ac6:	187b      	adds	r3, r7, r1
 8005ac8:	785b      	ldrb	r3, [r3, #1]
 8005aca:	001a      	movs	r2, r3
 8005acc:	187b      	adds	r3, r7, r1
 8005ace:	1c99      	adds	r1, r3, #2
 8005ad0:	4857      	ldr	r0, [pc, #348]	@ (8005c30 <ProcessCmd+0x1b0>)
 8005ad2:	230c      	movs	r3, #12
 8005ad4:	f7fd fdf4 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005ad8:	e0a0      	b.n	8005c1c <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(TempConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005ada:	2118      	movs	r1, #24
 8005adc:	187b      	adds	r3, r7, r1
 8005ade:	785b      	ldrb	r3, [r3, #1]
 8005ae0:	001a      	movs	r2, r3
 8005ae2:	187b      	adds	r3, r7, r1
 8005ae4:	1c99      	adds	r1, r3, #2
 8005ae6:	4853      	ldr	r0, [pc, #332]	@ (8005c34 <ProcessCmd+0x1b4>)
 8005ae8:	230c      	movs	r3, #12
 8005aea:	f7fd fde9 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005aee:	e095      	b.n	8005c1c <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(HumidConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005af0:	2118      	movs	r1, #24
 8005af2:	187b      	adds	r3, r7, r1
 8005af4:	785b      	ldrb	r3, [r3, #1]
 8005af6:	001a      	movs	r2, r3
 8005af8:	187b      	adds	r3, r7, r1
 8005afa:	1c99      	adds	r1, r3, #2
 8005afc:	484e      	ldr	r0, [pc, #312]	@ (8005c38 <ProcessCmd+0x1b8>)
 8005afe:	230c      	movs	r3, #12
 8005b00:	f7fd fdde 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005b04:	e08a      	b.n	8005c1c <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(VocRawConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005b06:	2118      	movs	r1, #24
 8005b08:	187b      	adds	r3, r7, r1
 8005b0a:	785b      	ldrb	r3, [r3, #1]
 8005b0c:	001a      	movs	r2, r3
 8005b0e:	187b      	adds	r3, r7, r1
 8005b10:	1c99      	adds	r1, r3, #2
 8005b12:	484a      	ldr	r0, [pc, #296]	@ (8005c3c <ProcessCmd+0x1bc>)
 8005b14:	230c      	movs	r3, #12
 8005b16:	f7fd fdd3 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005b1a:	e07f      	b.n	8005c1c <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(VocIndexConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005b1c:	2118      	movs	r1, #24
 8005b1e:	187b      	adds	r3, r7, r1
 8005b20:	785b      	ldrb	r3, [r3, #1]
 8005b22:	001a      	movs	r2, r3
 8005b24:	187b      	adds	r3, r7, r1
 8005b26:	1c99      	adds	r1, r3, #2
 8005b28:	4845      	ldr	r0, [pc, #276]	@ (8005c40 <ProcessCmd+0x1c0>)
 8005b2a:	230c      	movs	r3, #12
 8005b2c:	f7fd fdc8 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005b30:	e074      	b.n	8005c1c <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(dBaConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005b32:	2118      	movs	r1, #24
 8005b34:	187b      	adds	r3, r7, r1
 8005b36:	785b      	ldrb	r3, [r3, #1]
 8005b38:	001a      	movs	r2, r3
 8005b3a:	187b      	adds	r3, r7, r1
 8005b3c:	1c99      	adds	r1, r3, #2
 8005b3e:	4841      	ldr	r0, [pc, #260]	@ (8005c44 <ProcessCmd+0x1c4>)
 8005b40:	230c      	movs	r3, #12
 8005b42:	f7fd fdbd 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005b46:	e069      	b.n	8005c1c <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(dBcConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005b48:	2118      	movs	r1, #24
 8005b4a:	187b      	adds	r3, r7, r1
 8005b4c:	785b      	ldrb	r3, [r3, #1]
 8005b4e:	001a      	movs	r2, r3
 8005b50:	187b      	adds	r3, r7, r1
 8005b52:	1c99      	adds	r1, r3, #2
 8005b54:	483c      	ldr	r0, [pc, #240]	@ (8005c48 <ProcessCmd+0x1c8>)
 8005b56:	230c      	movs	r3, #12
 8005b58:	f7fd fdb2 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005b5c:	e05e      	b.n	8005c1c <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(CustomNameConfigAddr, msg.Payload, msg.PayloadLength, CustomNameMaxLength);
 8005b5e:	2118      	movs	r1, #24
 8005b60:	187b      	adds	r3, r7, r1
 8005b62:	785b      	ldrb	r3, [r3, #1]
 8005b64:	001a      	movs	r2, r3
 8005b66:	187b      	adds	r3, r7, r1
 8005b68:	1c99      	adds	r1, r3, #2
 8005b6a:	4838      	ldr	r0, [pc, #224]	@ (8005c4c <ProcessCmd+0x1cc>)
 8005b6c:	231e      	movs	r3, #30
 8005b6e:	f7fd fda7 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005b72:	e053      	b.n	8005c1c <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(SolVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005b74:	2118      	movs	r1, #24
 8005b76:	187b      	adds	r3, r7, r1
 8005b78:	785b      	ldrb	r3, [r3, #1]
 8005b7a:	001a      	movs	r2, r3
 8005b7c:	187b      	adds	r3, r7, r1
 8005b7e:	1c99      	adds	r1, r3, #2
 8005b80:	4833      	ldr	r0, [pc, #204]	@ (8005c50 <ProcessCmd+0x1d0>)
 8005b82:	230c      	movs	r3, #12
 8005b84:	f7fd fd9c 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005b88:	e048      	b.n	8005c1c <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(BatVoltConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005b8a:	2118      	movs	r1, #24
 8005b8c:	187b      	adds	r3, r7, r1
 8005b8e:	785b      	ldrb	r3, [r3, #1]
 8005b90:	001a      	movs	r2, r3
 8005b92:	187b      	adds	r3, r7, r1
 8005b94:	1c99      	adds	r1, r3, #2
 8005b96:	482f      	ldr	r0, [pc, #188]	@ (8005c54 <ProcessCmd+0x1d4>)
 8005b98:	230c      	movs	r3, #12
 8005b9a:	f7fd fd91 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005b9e:	e03d      	b.n	8005c1c <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(PM10ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005ba0:	2118      	movs	r1, #24
 8005ba2:	187b      	adds	r3, r7, r1
 8005ba4:	785b      	ldrb	r3, [r3, #1]
 8005ba6:	001a      	movs	r2, r3
 8005ba8:	187b      	adds	r3, r7, r1
 8005baa:	1c99      	adds	r1, r3, #2
 8005bac:	482a      	ldr	r0, [pc, #168]	@ (8005c58 <ProcessCmd+0x1d8>)
 8005bae:	230c      	movs	r3, #12
 8005bb0:	f7fd fd86 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005bb4:	e032      	b.n	8005c1c <ProcessCmd+0x19c>
            WriteUint8ArrayEepromSafe(PM2ConfigAddr, msg.Payload, msg.PayloadLength, IdSize);
 8005bb6:	2118      	movs	r1, #24
 8005bb8:	187b      	adds	r3, r7, r1
 8005bba:	785b      	ldrb	r3, [r3, #1]
 8005bbc:	001a      	movs	r2, r3
 8005bbe:	187b      	adds	r3, r7, r1
 8005bc0:	1c99      	adds	r1, r3, #2
 8005bc2:	4826      	ldr	r0, [pc, #152]	@ (8005c5c <ProcessCmd+0x1dc>)
 8005bc4:	230c      	movs	r3, #12
 8005bc6:	f7fd fd7b 	bl	80036c0 <WriteUint8ArrayEepromSafe>
        break;
 8005bca:	e027      	b.n	8005c1c <ProcessCmd+0x19c>
            ClearEEprom(EEPromStartAddr, ConfigSize);
 8005bcc:	4b18      	ldr	r3, [pc, #96]	@ (8005c30 <ProcessCmd+0x1b0>)
 8005bce:	21ba      	movs	r1, #186	@ 0xba
 8005bd0:	0018      	movs	r0, r3
 8005bd2:	f7fd fdba 	bl	800374a <ClearEEprom>
        break;
 8005bd6:	e021      	b.n	8005c1c <ProcessCmd+0x19c>
            uint16_t size = ((uint16_t)msg.Payload[0] << 8 | msg.Payload[1]);
 8005bd8:	2118      	movs	r1, #24
 8005bda:	187b      	adds	r3, r7, r1
 8005bdc:	789b      	ldrb	r3, [r3, #2]
 8005bde:	021b      	lsls	r3, r3, #8
 8005be0:	b21a      	sxth	r2, r3
 8005be2:	187b      	adds	r3, r7, r1
 8005be4:	78db      	ldrb	r3, [r3, #3]
 8005be6:	b21b      	sxth	r3, r3
 8005be8:	4313      	orrs	r3, r2
 8005bea:	b21a      	sxth	r2, r3
 8005bec:	1dbb      	adds	r3, r7, #6
 8005bee:	801a      	strh	r2, [r3, #0]
            if (size < EEPROM_SIZE)
 8005bf0:	1dbb      	adds	r3, r7, #6
 8005bf2:	881a      	ldrh	r2, [r3, #0]
 8005bf4:	23c0      	movs	r3, #192	@ 0xc0
 8005bf6:	015b      	lsls	r3, r3, #5
 8005bf8:	429a      	cmp	r2, r3
 8005bfa:	d207      	bcs.n	8005c0c <ProcessCmd+0x18c>
                ClearEEprom(EEPromStartAddr, size);
 8005bfc:	1dbb      	adds	r3, r7, #6
 8005bfe:	881b      	ldrh	r3, [r3, #0]
 8005c00:	4a0b      	ldr	r2, [pc, #44]	@ (8005c30 <ProcessCmd+0x1b0>)
 8005c02:	0019      	movs	r1, r3
 8005c04:	0010      	movs	r0, r2
 8005c06:	f7fd fda0 	bl	800374a <ClearEEprom>
            break;
 8005c0a:	e006      	b.n	8005c1a <ProcessCmd+0x19a>
                ClearEEprom(EEPROM_START, EEPROM_SIZE);
 8005c0c:	23c0      	movs	r3, #192	@ 0xc0
 8005c0e:	015b      	lsls	r3, r3, #5
 8005c10:	4a07      	ldr	r2, [pc, #28]	@ (8005c30 <ProcessCmd+0x1b0>)
 8005c12:	0019      	movs	r1, r3
 8005c14:	0010      	movs	r0, r2
 8005c16:	f7fd fd98 	bl	800374a <ClearEEprom>
            break;
 8005c1a:	46c0      	nop			@ (mov r8, r8)
}
 8005c1c:	46c0      	nop			@ (mov r8, r8)
 8005c1e:	46bd      	mov	sp, r7
 8005c20:	b002      	add	sp, #8
 8005c22:	bcb0      	pop	{r4, r5, r7}
 8005c24:	bc08      	pop	{r3}
 8005c26:	b004      	add	sp, #16
 8005c28:	4718      	bx	r3
 8005c2a:	46c0      	nop			@ (mov r8, r8)
 8005c2c:	0802082c 	.word	0x0802082c
 8005c30:	08080000 	.word	0x08080000
 8005c34:	0808000c 	.word	0x0808000c
 8005c38:	08080018 	.word	0x08080018
 8005c3c:	08080024 	.word	0x08080024
 8005c40:	08080030 	.word	0x08080030
 8005c44:	0808003c 	.word	0x0808003c
 8005c48:	08080048 	.word	0x08080048
 8005c4c:	08080090 	.word	0x08080090
 8005c50:	08080078 	.word	0x08080078
 8005c54:	0808006c 	.word	0x0808006c
 8005c58:	08080060 	.word	0x08080060
 8005c5c:	08080054 	.word	0x08080054

08005c60 <Create_Message>:

void Create_Message(uint8_t command, uint8_t *payload, uint8_t payloadLength)
{
 8005c60:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005c62:	b085      	sub	sp, #20
 8005c64:	af00      	add	r7, sp, #0
 8005c66:	6039      	str	r1, [r7, #0]
 8005c68:	0011      	movs	r1, r2
 8005c6a:	1dfb      	adds	r3, r7, #7
 8005c6c:	1c02      	adds	r2, r0, #0
 8005c6e:	701a      	strb	r2, [r3, #0]
 8005c70:	1dbb      	adds	r3, r7, #6
 8005c72:	1c0a      	adds	r2, r1, #0
 8005c74:	701a      	strb	r2, [r3, #0]
    static uint8_t message[TOTAL_BUFFER_SIZE];
    message[0] = (uint8_t)PREABMLE[0];
 8005c76:	2223      	movs	r2, #35	@ 0x23
 8005c78:	4b20      	ldr	r3, [pc, #128]	@ (8005cfc <Create_Message+0x9c>)
 8005c7a:	701a      	strb	r2, [r3, #0]
    message[1] = command;
 8005c7c:	4b1f      	ldr	r3, [pc, #124]	@ (8005cfc <Create_Message+0x9c>)
 8005c7e:	1dfa      	adds	r2, r7, #7
 8005c80:	7812      	ldrb	r2, [r2, #0]
 8005c82:	705a      	strb	r2, [r3, #1]
    message[2] = payloadLength;
 8005c84:	4b1d      	ldr	r3, [pc, #116]	@ (8005cfc <Create_Message+0x9c>)
 8005c86:	1dba      	adds	r2, r7, #6
 8005c88:	7812      	ldrb	r2, [r2, #0]
 8005c8a:	709a      	strb	r2, [r3, #2]
    memcpy(&message[3], payload, payloadLength);
 8005c8c:	1dbb      	adds	r3, r7, #6
 8005c8e:	781a      	ldrb	r2, [r3, #0]
 8005c90:	6839      	ldr	r1, [r7, #0]
 8005c92:	4b1b      	ldr	r3, [pc, #108]	@ (8005d00 <Create_Message+0xa0>)
 8005c94:	0018      	movs	r0, r3
 8005c96:	f016 fceb 	bl	801c670 <memcpy>
    uint16_t crcIndex = (HEADER_SIZE + payloadLength);
 8005c9a:	1dbb      	adds	r3, r7, #6
 8005c9c:	781b      	ldrb	r3, [r3, #0]
 8005c9e:	b29a      	uxth	r2, r3
 8005ca0:	250e      	movs	r5, #14
 8005ca2:	197b      	adds	r3, r7, r5
 8005ca4:	3203      	adds	r2, #3
 8005ca6:	801a      	strh	r2, [r3, #0]
    uint16_t calculatedCRC = CRC16_ARC(message, crcIndex);
 8005ca8:	260c      	movs	r6, #12
 8005caa:	19bc      	adds	r4, r7, r6
 8005cac:	197b      	adds	r3, r7, r5
 8005cae:	881a      	ldrh	r2, [r3, #0]
 8005cb0:	4b12      	ldr	r3, [pc, #72]	@ (8005cfc <Create_Message+0x9c>)
 8005cb2:	0011      	movs	r1, r2
 8005cb4:	0018      	movs	r0, r3
 8005cb6:	f000 f825 	bl	8005d04 <CRC16_ARC>
 8005cba:	0003      	movs	r3, r0
 8005cbc:	8023      	strh	r3, [r4, #0]
    message[crcIndex] = calculatedCRC >> 8;
 8005cbe:	0030      	movs	r0, r6
 8005cc0:	183b      	adds	r3, r7, r0
 8005cc2:	881b      	ldrh	r3, [r3, #0]
 8005cc4:	0a1b      	lsrs	r3, r3, #8
 8005cc6:	b29a      	uxth	r2, r3
 8005cc8:	197b      	adds	r3, r7, r5
 8005cca:	881b      	ldrh	r3, [r3, #0]
 8005ccc:	b2d1      	uxtb	r1, r2
 8005cce:	4a0b      	ldr	r2, [pc, #44]	@ (8005cfc <Create_Message+0x9c>)
 8005cd0:	54d1      	strb	r1, [r2, r3]
    message[crcIndex + 1] = calculatedCRC & 0xFF;
 8005cd2:	197b      	adds	r3, r7, r5
 8005cd4:	881b      	ldrh	r3, [r3, #0]
 8005cd6:	3301      	adds	r3, #1
 8005cd8:	183a      	adds	r2, r7, r0
 8005cda:	8812      	ldrh	r2, [r2, #0]
 8005cdc:	b2d1      	uxtb	r1, r2
 8005cde:	4a07      	ldr	r2, [pc, #28]	@ (8005cfc <Create_Message+0x9c>)
 8005ce0:	54d1      	strb	r1, [r2, r3]
    CDC_Transmit_FS(message, (crcIndex + 2));
 8005ce2:	197b      	adds	r3, r7, r5
 8005ce4:	881b      	ldrh	r3, [r3, #0]
 8005ce6:	3302      	adds	r3, #2
 8005ce8:	b29a      	uxth	r2, r3
 8005cea:	4b04      	ldr	r3, [pc, #16]	@ (8005cfc <Create_Message+0x9c>)
 8005cec:	0011      	movs	r1, r2
 8005cee:	0018      	movs	r0, r3
 8005cf0:	f013 fa90 	bl	8019214 <CDC_Transmit_FS>
}
 8005cf4:	46c0      	nop			@ (mov r8, r8)
 8005cf6:	46bd      	mov	sp, r7
 8005cf8:	b005      	add	sp, #20
 8005cfa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005cfc:	20000b90 	.word	0x20000b90
 8005d00:	20000b93 	.word	0x20000b93

08005d04 <CRC16_ARC>:

static uint16_t CRC16_ARC(uint8_t data[], uint16_t size)
{
 8005d04:	b580      	push	{r7, lr}
 8005d06:	b086      	sub	sp, #24
 8005d08:	af00      	add	r7, sp, #0
 8005d0a:	6078      	str	r0, [r7, #4]
 8005d0c:	000a      	movs	r2, r1
 8005d0e:	1cbb      	adds	r3, r7, #2
 8005d10:	801a      	strh	r2, [r3, #0]
    uint16_t crc = 0;
 8005d12:	2316      	movs	r3, #22
 8005d14:	18fb      	adds	r3, r7, r3
 8005d16:	2200      	movs	r2, #0
 8005d18:	801a      	strh	r2, [r3, #0]

    for (int i = 0; i < size; i++)
 8005d1a:	2300      	movs	r3, #0
 8005d1c:	613b      	str	r3, [r7, #16]
 8005d1e:	e02e      	b.n	8005d7e <CRC16_ARC+0x7a>
    {
        crc ^= data[i];
 8005d20:	693b      	ldr	r3, [r7, #16]
 8005d22:	687a      	ldr	r2, [r7, #4]
 8005d24:	18d3      	adds	r3, r2, r3
 8005d26:	781b      	ldrb	r3, [r3, #0]
 8005d28:	0019      	movs	r1, r3
 8005d2a:	2216      	movs	r2, #22
 8005d2c:	18bb      	adds	r3, r7, r2
 8005d2e:	18ba      	adds	r2, r7, r2
 8005d30:	8812      	ldrh	r2, [r2, #0]
 8005d32:	404a      	eors	r2, r1
 8005d34:	801a      	strh	r2, [r3, #0]

        for (int j = 0; j < 8; j++)
 8005d36:	2300      	movs	r3, #0
 8005d38:	60fb      	str	r3, [r7, #12]
 8005d3a:	e01a      	b.n	8005d72 <CRC16_ARC+0x6e>
        {
            if ((crc & 0x0001) != 0)
 8005d3c:	2116      	movs	r1, #22
 8005d3e:	187b      	adds	r3, r7, r1
 8005d40:	881b      	ldrh	r3, [r3, #0]
 8005d42:	2201      	movs	r2, #1
 8005d44:	4013      	ands	r3, r2
 8005d46:	d00b      	beq.n	8005d60 <CRC16_ARC+0x5c>
            {
                crc >>= 1;
 8005d48:	187b      	adds	r3, r7, r1
 8005d4a:	187a      	adds	r2, r7, r1
 8005d4c:	8812      	ldrh	r2, [r2, #0]
 8005d4e:	0852      	lsrs	r2, r2, #1
 8005d50:	801a      	strh	r2, [r3, #0]
                crc ^= 0xA001;
 8005d52:	187b      	adds	r3, r7, r1
 8005d54:	187a      	adds	r2, r7, r1
 8005d56:	8812      	ldrh	r2, [r2, #0]
 8005d58:	490f      	ldr	r1, [pc, #60]	@ (8005d98 <CRC16_ARC+0x94>)
 8005d5a:	404a      	eors	r2, r1
 8005d5c:	801a      	strh	r2, [r3, #0]
 8005d5e:	e005      	b.n	8005d6c <CRC16_ARC+0x68>
            }
            else
            {
                crc >>= 1;
 8005d60:	2216      	movs	r2, #22
 8005d62:	18bb      	adds	r3, r7, r2
 8005d64:	18ba      	adds	r2, r7, r2
 8005d66:	8812      	ldrh	r2, [r2, #0]
 8005d68:	0852      	lsrs	r2, r2, #1
 8005d6a:	801a      	strh	r2, [r3, #0]
        for (int j = 0; j < 8; j++)
 8005d6c:	68fb      	ldr	r3, [r7, #12]
 8005d6e:	3301      	adds	r3, #1
 8005d70:	60fb      	str	r3, [r7, #12]
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2b07      	cmp	r3, #7
 8005d76:	dde1      	ble.n	8005d3c <CRC16_ARC+0x38>
    for (int i = 0; i < size; i++)
 8005d78:	693b      	ldr	r3, [r7, #16]
 8005d7a:	3301      	adds	r3, #1
 8005d7c:	613b      	str	r3, [r7, #16]
 8005d7e:	1cbb      	adds	r3, r7, #2
 8005d80:	881b      	ldrh	r3, [r3, #0]
 8005d82:	693a      	ldr	r2, [r7, #16]
 8005d84:	429a      	cmp	r2, r3
 8005d86:	dbcb      	blt.n	8005d20 <CRC16_ARC+0x1c>
            }
        }
    }
    return crc; 
 8005d88:	2316      	movs	r3, #22
 8005d8a:	18fb      	adds	r3, r7, r3
 8005d8c:	881b      	ldrh	r3, [r3, #0]
}
 8005d8e:	0018      	movs	r0, r3
 8005d90:	46bd      	mov	sp, r7
 8005d92:	b006      	add	sp, #24
 8005d94:	bd80      	pop	{r7, pc}
 8005d96:	46c0      	nop			@ (mov r8, r8)
 8005d98:	ffffa001 	.word	0xffffa001

08005d9c <ReadBatteryVoltage>:

  ADC_ChannelConfTypeDef sConfig = {0};
  GPIO_InitTypeDef GPIO_InitStruct = {0};
  uint32_t Vref = 2915;   // reference voltage in mV

float ReadBatteryVoltage(void){
 8005d9c:	b580      	push	{r7, lr}
 8005d9e:	af00      	add	r7, sp, #0
  /* Channel 14 is de battery voltage */
  static uint32_t value = 0;
  static float trueValue = 0;
   sConfig.Channel = ADC_CHANNEL_14;
 8005da0:	4b26      	ldr	r3, [pc, #152]	@ (8005e3c <ReadBatteryVoltage+0xa0>)
 8005da2:	4a27      	ldr	r2, [pc, #156]	@ (8005e40 <ReadBatteryVoltage+0xa4>)
 8005da4:	601a      	str	r2, [r3, #0]
   sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8005da6:	4b25      	ldr	r3, [pc, #148]	@ (8005e3c <ReadBatteryVoltage+0xa0>)
 8005da8:	2280      	movs	r2, #128	@ 0x80
 8005daa:	0152      	lsls	r2, r2, #5
 8005dac:	605a      	str	r2, [r3, #4]
   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8005dae:	4a23      	ldr	r2, [pc, #140]	@ (8005e3c <ReadBatteryVoltage+0xa0>)
 8005db0:	4b24      	ldr	r3, [pc, #144]	@ (8005e44 <ReadBatteryVoltage+0xa8>)
 8005db2:	0011      	movs	r1, r2
 8005db4:	0018      	movs	r0, r3
 8005db6:	f006 fb09 	bl	800c3cc <HAL_ADC_ConfigChannel>
 8005dba:	1e03      	subs	r3, r0, #0
 8005dbc:	d001      	beq.n	8005dc2 <ReadBatteryVoltage+0x26>
   {
     Error_Handler();
 8005dbe:	f001 fb31 	bl	8007424 <Error_Handler>
   }
   HAL_ADC_Start(&hadc);
 8005dc2:	4b20      	ldr	r3, [pc, #128]	@ (8005e44 <ReadBatteryVoltage+0xa8>)
 8005dc4:	0018      	movs	r0, r3
 8005dc6:	f006 fa05 	bl	800c1d4 <HAL_ADC_Start>
   HAL_ADC_PollForConversion(&hadc, 1);
 8005dca:	4b1e      	ldr	r3, [pc, #120]	@ (8005e44 <ReadBatteryVoltage+0xa8>)
 8005dcc:	2101      	movs	r1, #1
 8005dce:	0018      	movs	r0, r3
 8005dd0:	f006 fa54 	bl	800c27c <HAL_ADC_PollForConversion>
   value = (HAL_ADC_GetValue(&hadc)*Vref*2)/4095;
 8005dd4:	4b1b      	ldr	r3, [pc, #108]	@ (8005e44 <ReadBatteryVoltage+0xa8>)
 8005dd6:	0018      	movs	r0, r3
 8005dd8:	f006 faec 	bl	800c3b4 <HAL_ADC_GetValue>
 8005ddc:	0002      	movs	r2, r0
 8005dde:	4b1a      	ldr	r3, [pc, #104]	@ (8005e48 <ReadBatteryVoltage+0xac>)
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	4353      	muls	r3, r2
 8005de4:	005b      	lsls	r3, r3, #1
 8005de6:	4919      	ldr	r1, [pc, #100]	@ (8005e4c <ReadBatteryVoltage+0xb0>)
 8005de8:	0018      	movs	r0, r3
 8005dea:	f7fa f9db 	bl	80001a4 <__udivsi3>
 8005dee:	0003      	movs	r3, r0
 8005df0:	001a      	movs	r2, r3
 8005df2:	4b17      	ldr	r3, [pc, #92]	@ (8005e50 <ReadBatteryVoltage+0xb4>)
 8005df4:	601a      	str	r2, [r3, #0]
   trueValue = (float)value/1000.0;
 8005df6:	4b16      	ldr	r3, [pc, #88]	@ (8005e50 <ReadBatteryVoltage+0xb4>)
 8005df8:	681b      	ldr	r3, [r3, #0]
 8005dfa:	0018      	movs	r0, r3
 8005dfc:	f7fb fc34 	bl	8001668 <__aeabi_ui2f>
 8005e00:	1c03      	adds	r3, r0, #0
 8005e02:	4914      	ldr	r1, [pc, #80]	@ (8005e54 <ReadBatteryVoltage+0xb8>)
 8005e04:	1c18      	adds	r0, r3, #0
 8005e06:	f7fa fee5 	bl	8000bd4 <__aeabi_fdiv>
 8005e0a:	1c03      	adds	r3, r0, #0
 8005e0c:	1c1a      	adds	r2, r3, #0
 8005e0e:	4b12      	ldr	r3, [pc, #72]	@ (8005e58 <ReadBatteryVoltage+0xbc>)
 8005e10:	601a      	str	r2, [r3, #0]
   /* Disable Channel 14 */
   sConfig.Channel = ADC_CHANNEL_14;
 8005e12:	4b0a      	ldr	r3, [pc, #40]	@ (8005e3c <ReadBatteryVoltage+0xa0>)
 8005e14:	4a0a      	ldr	r2, [pc, #40]	@ (8005e40 <ReadBatteryVoltage+0xa4>)
 8005e16:	601a      	str	r2, [r3, #0]
   sConfig.Rank = ADC_RANK_NONE;
 8005e18:	4b08      	ldr	r3, [pc, #32]	@ (8005e3c <ReadBatteryVoltage+0xa0>)
 8005e1a:	4a10      	ldr	r2, [pc, #64]	@ (8005e5c <ReadBatteryVoltage+0xc0>)
 8005e1c:	605a      	str	r2, [r3, #4]
   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8005e1e:	4a07      	ldr	r2, [pc, #28]	@ (8005e3c <ReadBatteryVoltage+0xa0>)
 8005e20:	4b08      	ldr	r3, [pc, #32]	@ (8005e44 <ReadBatteryVoltage+0xa8>)
 8005e22:	0011      	movs	r1, r2
 8005e24:	0018      	movs	r0, r3
 8005e26:	f006 fad1 	bl	800c3cc <HAL_ADC_ConfigChannel>
 8005e2a:	1e03      	subs	r3, r0, #0
 8005e2c:	d001      	beq.n	8005e32 <ReadBatteryVoltage+0x96>
   {
     Error_Handler();
 8005e2e:	f001 faf9 	bl	8007424 <Error_Handler>
   }
   return trueValue;
 8005e32:	4b09      	ldr	r3, [pc, #36]	@ (8005e58 <ReadBatteryVoltage+0xbc>)
 8005e34:	681b      	ldr	r3, [r3, #0]
 }
 8005e36:	1c18      	adds	r0, r3, #0
 8005e38:	46bd      	mov	sp, r7
 8005e3a:	bd80      	pop	{r7, pc}
 8005e3c:	20000c98 	.word	0x20000c98
 8005e40:	38004000 	.word	0x38004000
 8005e44:	20000cbc 	.word	0x20000cbc
 8005e48:	2000002c 	.word	0x2000002c
 8005e4c:	00000fff 	.word	0x00000fff
 8005e50:	20000ca0 	.word	0x20000ca0
 8005e54:	447a0000 	.word	0x447a0000
 8005e58:	20000ca4 	.word	0x20000ca4
 8005e5c:	00001001 	.word	0x00001001

08005e60 <ReadSolarVoltage>:

/* function to read the actual battery voltage */

float ReadSolarVoltage(void){
 8005e60:	b580      	push	{r7, lr}
 8005e62:	af00      	add	r7, sp, #0
  /* Channel 15 is the Solar voltage */
  static uint32_t value = 0;
  static float trueValue = 0;
   sConfig.Channel = ADC_CHANNEL_15;
 8005e64:	4b27      	ldr	r3, [pc, #156]	@ (8005f04 <ReadSolarVoltage+0xa4>)
 8005e66:	4a28      	ldr	r2, [pc, #160]	@ (8005f08 <ReadSolarVoltage+0xa8>)
 8005e68:	601a      	str	r2, [r3, #0]
   sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 8005e6a:	4b26      	ldr	r3, [pc, #152]	@ (8005f04 <ReadSolarVoltage+0xa4>)
 8005e6c:	2280      	movs	r2, #128	@ 0x80
 8005e6e:	0152      	lsls	r2, r2, #5
 8005e70:	605a      	str	r2, [r3, #4]
   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8005e72:	4a24      	ldr	r2, [pc, #144]	@ (8005f04 <ReadSolarVoltage+0xa4>)
 8005e74:	4b25      	ldr	r3, [pc, #148]	@ (8005f0c <ReadSolarVoltage+0xac>)
 8005e76:	0011      	movs	r1, r2
 8005e78:	0018      	movs	r0, r3
 8005e7a:	f006 faa7 	bl	800c3cc <HAL_ADC_ConfigChannel>
 8005e7e:	1e03      	subs	r3, r0, #0
 8005e80:	d001      	beq.n	8005e86 <ReadSolarVoltage+0x26>
   {
     Error_Handler();
 8005e82:	f001 facf 	bl	8007424 <Error_Handler>
   }
   HAL_ADC_Start(&hadc);
 8005e86:	4b21      	ldr	r3, [pc, #132]	@ (8005f0c <ReadSolarVoltage+0xac>)
 8005e88:	0018      	movs	r0, r3
 8005e8a:	f006 f9a3 	bl	800c1d4 <HAL_ADC_Start>
   HAL_ADC_PollForConversion(&hadc, 1);
 8005e8e:	4b1f      	ldr	r3, [pc, #124]	@ (8005f0c <ReadSolarVoltage+0xac>)
 8005e90:	2101      	movs	r1, #1
 8005e92:	0018      	movs	r0, r3
 8005e94:	f006 f9f2 	bl	800c27c <HAL_ADC_PollForConversion>
   value = (HAL_ADC_GetValue(&hadc)*Vref*3)/4095;
 8005e98:	4b1c      	ldr	r3, [pc, #112]	@ (8005f0c <ReadSolarVoltage+0xac>)
 8005e9a:	0018      	movs	r0, r3
 8005e9c:	f006 fa8a 	bl	800c3b4 <HAL_ADC_GetValue>
 8005ea0:	0002      	movs	r2, r0
 8005ea2:	4b1b      	ldr	r3, [pc, #108]	@ (8005f10 <ReadSolarVoltage+0xb0>)
 8005ea4:	681b      	ldr	r3, [r3, #0]
 8005ea6:	435a      	muls	r2, r3
 8005ea8:	0013      	movs	r3, r2
 8005eaa:	005b      	lsls	r3, r3, #1
 8005eac:	189b      	adds	r3, r3, r2
 8005eae:	4919      	ldr	r1, [pc, #100]	@ (8005f14 <ReadSolarVoltage+0xb4>)
 8005eb0:	0018      	movs	r0, r3
 8005eb2:	f7fa f977 	bl	80001a4 <__udivsi3>
 8005eb6:	0003      	movs	r3, r0
 8005eb8:	001a      	movs	r2, r3
 8005eba:	4b17      	ldr	r3, [pc, #92]	@ (8005f18 <ReadSolarVoltage+0xb8>)
 8005ebc:	601a      	str	r2, [r3, #0]
   trueValue = (float)value / 1000.0;
 8005ebe:	4b16      	ldr	r3, [pc, #88]	@ (8005f18 <ReadSolarVoltage+0xb8>)
 8005ec0:	681b      	ldr	r3, [r3, #0]
 8005ec2:	0018      	movs	r0, r3
 8005ec4:	f7fb fbd0 	bl	8001668 <__aeabi_ui2f>
 8005ec8:	1c03      	adds	r3, r0, #0
 8005eca:	4914      	ldr	r1, [pc, #80]	@ (8005f1c <ReadSolarVoltage+0xbc>)
 8005ecc:	1c18      	adds	r0, r3, #0
 8005ece:	f7fa fe81 	bl	8000bd4 <__aeabi_fdiv>
 8005ed2:	1c03      	adds	r3, r0, #0
 8005ed4:	1c1a      	adds	r2, r3, #0
 8005ed6:	4b12      	ldr	r3, [pc, #72]	@ (8005f20 <ReadSolarVoltage+0xc0>)
 8005ed8:	601a      	str	r2, [r3, #0]
   /* Disable Channel 14 */
   sConfig.Channel = ADC_CHANNEL_15;
 8005eda:	4b0a      	ldr	r3, [pc, #40]	@ (8005f04 <ReadSolarVoltage+0xa4>)
 8005edc:	4a0a      	ldr	r2, [pc, #40]	@ (8005f08 <ReadSolarVoltage+0xa8>)
 8005ede:	601a      	str	r2, [r3, #0]
   sConfig.Rank = ADC_RANK_NONE;
 8005ee0:	4b08      	ldr	r3, [pc, #32]	@ (8005f04 <ReadSolarVoltage+0xa4>)
 8005ee2:	4a10      	ldr	r2, [pc, #64]	@ (8005f24 <ReadSolarVoltage+0xc4>)
 8005ee4:	605a      	str	r2, [r3, #4]
   if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 8005ee6:	4a07      	ldr	r2, [pc, #28]	@ (8005f04 <ReadSolarVoltage+0xa4>)
 8005ee8:	4b08      	ldr	r3, [pc, #32]	@ (8005f0c <ReadSolarVoltage+0xac>)
 8005eea:	0011      	movs	r1, r2
 8005eec:	0018      	movs	r0, r3
 8005eee:	f006 fa6d 	bl	800c3cc <HAL_ADC_ConfigChannel>
 8005ef2:	1e03      	subs	r3, r0, #0
 8005ef4:	d001      	beq.n	8005efa <ReadSolarVoltage+0x9a>
   {
     Error_Handler();
 8005ef6:	f001 fa95 	bl	8007424 <Error_Handler>
   }
   return trueValue;
 8005efa:	4b09      	ldr	r3, [pc, #36]	@ (8005f20 <ReadSolarVoltage+0xc0>)
 8005efc:	681b      	ldr	r3, [r3, #0]
 }
 8005efe:	1c18      	adds	r0, r3, #0
 8005f00:	46bd      	mov	sp, r7
 8005f02:	bd80      	pop	{r7, pc}
 8005f04:	20000c98 	.word	0x20000c98
 8005f08:	3c008000 	.word	0x3c008000
 8005f0c:	20000cbc 	.word	0x20000cbc
 8005f10:	2000002c 	.word	0x2000002c
 8005f14:	00000fff 	.word	0x00000fff
 8005f18:	20000ca8 	.word	0x20000ca8
 8005f1c:	447a0000 	.word	0x447a0000
 8005f20:	20000cac 	.word	0x20000cac
 8005f24:	00001001 	.word	0x00001001

08005f28 <Check_USB_PowerOn>:

// True if 5V on USB Connector
bool   Check_USB_PowerOn(void){
 8005f28:	b580      	push	{r7, lr}
 8005f2a:	af00      	add	r7, sp, #0
return   (HAL_GPIO_ReadPin(VusbDetect_GPIO_Port, VusbDetect_Pin));
 8005f2c:	23a0      	movs	r3, #160	@ 0xa0
 8005f2e:	05db      	lsls	r3, r3, #23
 8005f30:	2180      	movs	r1, #128	@ 0x80
 8005f32:	0018      	movs	r0, r3
 8005f34:	f007 f9d0 	bl	800d2d8 <HAL_GPIO_ReadPin>
 8005f38:	0003      	movs	r3, r0
 8005f3a:	1e5a      	subs	r2, r3, #1
 8005f3c:	4193      	sbcs	r3, r2
 8005f3e:	b2db      	uxtb	r3, r3
}
 8005f40:	0018      	movs	r0, r3
 8005f42:	46bd      	mov	sp, r7
 8005f44:	bd80      	pop	{r7, pc}

08005f46 <BootButton_Pressed>:

// True if Userbutton A ( Boot ) is pressed
// It is NOT Possible to read the Boot0 pin after powerup / Reset!!
// So a copy is hard wired to PA15

bool     BootButton_Pressed(void){
 8005f46:	b580      	push	{r7, lr}
 8005f48:	af00      	add	r7, sp, #0
  return   (HAL_GPIO_ReadPin(BOOT0_GPIO_Port, BOOT0_Pin));
 8005f4a:	2380      	movs	r3, #128	@ 0x80
 8005f4c:	021a      	lsls	r2, r3, #8
 8005f4e:	23a0      	movs	r3, #160	@ 0xa0
 8005f50:	05db      	lsls	r3, r3, #23
 8005f52:	0011      	movs	r1, r2
 8005f54:	0018      	movs	r0, r3
 8005f56:	f007 f9bf 	bl	800d2d8 <HAL_GPIO_ReadPin>
 8005f5a:	0003      	movs	r3, r0
 8005f5c:	1e5a      	subs	r2, r3, #1
 8005f5e:	4193      	sbcs	r3, r2
 8005f60:	b2db      	uxtb	r3, r3
}
 8005f62:	0018      	movs	r0, r3
 8005f64:	46bd      	mov	sp, r7
 8005f66:	bd80      	pop	{r7, pc}

08005f68 <UserButton_Pressed>:

// True if Userbutton B is pressed
bool     UserButton_Pressed(void){
 8005f68:	b580      	push	{r7, lr}
 8005f6a:	af00      	add	r7, sp, #0
  return   (!HAL_GPIO_ReadPin(User_Button_GPIO_Port, User_Button_Pin));
 8005f6c:	4b05      	ldr	r3, [pc, #20]	@ (8005f84 <UserButton_Pressed+0x1c>)
 8005f6e:	2104      	movs	r1, #4
 8005f70:	0018      	movs	r0, r3
 8005f72:	f007 f9b1 	bl	800d2d8 <HAL_GPIO_ReadPin>
 8005f76:	0003      	movs	r3, r0
 8005f78:	425a      	negs	r2, r3
 8005f7a:	4153      	adcs	r3, r2
 8005f7c:	b2db      	uxtb	r3, r3
}
 8005f7e:	0018      	movs	r0, r3
 8005f80:	46bd      	mov	sp, r7
 8005f82:	bd80      	pop	{r7, pc}
 8005f84:	50000c00 	.word	0x50000c00

08005f88 <showTime>:
uint8_t iMinute = 0;
uint8_t myUptimeminute = 0;
uint8_t myUptimehour = 0;
uint16_t myUptimeday = 0;

void showTime() {
 8005f88:	b5f0      	push	{r4, r5, r6, r7, lr}
 8005f8a:	46ce      	mov	lr, r9
 8005f8c:	4647      	mov	r7, r8
 8005f8e:	b580      	push	{r7, lr}
 8005f90:	b08d      	sub	sp, #52	@ 0x34
 8005f92:	af06      	add	r7, sp, #24
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8005f94:	003a      	movs	r2, r7
 8005f96:	1d3b      	adds	r3, r7, #4
 8005f98:	0011      	movs	r1, r2
 8005f9a:	0018      	movs	r0, r3
 8005f9c:	f000 fa04 	bl	80063a8 <RTC_GetTime>
  printf("System time: %02d-%02d-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm\r\n",
      currentDate.Year, currentDate.Month, currentDate.Date, currentTime.Hours, currentTime.Minutes, currentTime.Seconds, myUptimeday, myUptimehour, myUptimeminute);
 8005fa0:	003b      	movs	r3, r7
 8005fa2:	78db      	ldrb	r3, [r3, #3]
  printf("System time: %02d-%02d-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm\r\n",
 8005fa4:	469c      	mov	ip, r3
      currentDate.Year, currentDate.Month, currentDate.Date, currentTime.Hours, currentTime.Minutes, currentTime.Seconds, myUptimeday, myUptimehour, myUptimeminute);
 8005fa6:	003b      	movs	r3, r7
 8005fa8:	785b      	ldrb	r3, [r3, #1]
  printf("System time: %02d-%02d-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm\r\n",
 8005faa:	4698      	mov	r8, r3
      currentDate.Year, currentDate.Month, currentDate.Date, currentTime.Hours, currentTime.Minutes, currentTime.Seconds, myUptimeday, myUptimehour, myUptimeminute);
 8005fac:	003b      	movs	r3, r7
 8005fae:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%02d-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm\r\n",
 8005fb0:	4699      	mov	r9, r3
      currentDate.Year, currentDate.Month, currentDate.Date, currentTime.Hours, currentTime.Minutes, currentTime.Seconds, myUptimeday, myUptimehour, myUptimeminute);
 8005fb2:	1d3b      	adds	r3, r7, #4
 8005fb4:	781b      	ldrb	r3, [r3, #0]
  printf("System time: %02d-%02d-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm\r\n",
 8005fb6:	001a      	movs	r2, r3
      currentDate.Year, currentDate.Month, currentDate.Date, currentTime.Hours, currentTime.Minutes, currentTime.Seconds, myUptimeday, myUptimehour, myUptimeminute);
 8005fb8:	1d3b      	adds	r3, r7, #4
 8005fba:	785b      	ldrb	r3, [r3, #1]
  printf("System time: %02d-%02d-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm\r\n",
 8005fbc:	0019      	movs	r1, r3
      currentDate.Year, currentDate.Month, currentDate.Date, currentTime.Hours, currentTime.Minutes, currentTime.Seconds, myUptimeday, myUptimehour, myUptimeminute);
 8005fbe:	1d3b      	adds	r3, r7, #4
 8005fc0:	789b      	ldrb	r3, [r3, #2]
  printf("System time: %02d-%02d-%02d %02dh:%02dm:%02ds, system uptime is: %dd %02dh:%02dm\r\n",
 8005fc2:	001c      	movs	r4, r3
 8005fc4:	4b0d      	ldr	r3, [pc, #52]	@ (8005ffc <showTime+0x74>)
 8005fc6:	881b      	ldrh	r3, [r3, #0]
 8005fc8:	001d      	movs	r5, r3
 8005fca:	4b0d      	ldr	r3, [pc, #52]	@ (8006000 <showTime+0x78>)
 8005fcc:	781b      	ldrb	r3, [r3, #0]
 8005fce:	001e      	movs	r6, r3
 8005fd0:	4b0c      	ldr	r3, [pc, #48]	@ (8006004 <showTime+0x7c>)
 8005fd2:	781b      	ldrb	r3, [r3, #0]
 8005fd4:	480c      	ldr	r0, [pc, #48]	@ (8006008 <showTime+0x80>)
 8005fd6:	9305      	str	r3, [sp, #20]
 8005fd8:	9604      	str	r6, [sp, #16]
 8005fda:	9503      	str	r5, [sp, #12]
 8005fdc:	9402      	str	r4, [sp, #8]
 8005fde:	9101      	str	r1, [sp, #4]
 8005fe0:	9200      	str	r2, [sp, #0]
 8005fe2:	464b      	mov	r3, r9
 8005fe4:	4642      	mov	r2, r8
 8005fe6:	4661      	mov	r1, ip
 8005fe8:	f016 f9b2 	bl	801c350 <iprintf>
}
 8005fec:	46c0      	nop			@ (mov r8, r8)
 8005fee:	46bd      	mov	sp, r7
 8005ff0:	b007      	add	sp, #28
 8005ff2:	bcc0      	pop	{r6, r7}
 8005ff4:	46b9      	mov	r9, r7
 8005ff6:	46b0      	mov	r8, r6
 8005ff8:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005ffa:	46c0      	nop			@ (mov r8, r8)
 8005ffc:	20000cb8 	.word	0x20000cb8
 8006000:	20000cb6 	.word	0x20000cb6
 8006004:	20000cb5 	.word	0x20000cb5
 8006008:	0801fdb8 	.word	0x0801fdb8

0800600c <setiMinute>:

void setiMinute(uint8_t minute) {
 800600c:	b580      	push	{r7, lr}
 800600e:	b082      	sub	sp, #8
 8006010:	af00      	add	r7, sp, #0
 8006012:	0002      	movs	r2, r0
 8006014:	1dfb      	adds	r3, r7, #7
 8006016:	701a      	strb	r2, [r3, #0]
  iMinute = minute;
 8006018:	4b07      	ldr	r3, [pc, #28]	@ (8006038 <setiMinute+0x2c>)
 800601a:	1dfa      	adds	r2, r7, #7
 800601c:	7812      	ldrb	r2, [r2, #0]
 800601e:	701a      	strb	r2, [r3, #0]
  Debug("iMinute set to: %d", iMinute);
 8006020:	4b05      	ldr	r3, [pc, #20]	@ (8006038 <setiMinute+0x2c>)
 8006022:	781b      	ldrb	r3, [r3, #0]
 8006024:	4a05      	ldr	r2, [pc, #20]	@ (800603c <setiMinute+0x30>)
 8006026:	4906      	ldr	r1, [pc, #24]	@ (8006040 <setiMinute+0x34>)
 8006028:	2003      	movs	r0, #3
 800602a:	f005 fb77 	bl	800b71c <CreateLine>
}
 800602e:	46c0      	nop			@ (mov r8, r8)
 8006030:	46bd      	mov	sp, r7
 8006032:	b002      	add	sp, #8
 8006034:	bd80      	pop	{r7, pc}
 8006036:	46c0      	nop			@ (mov r8, r8)
 8006038:	20000cb4 	.word	0x20000cb4
 800603c:	0801fe0c 	.word	0x0801fe0c
 8006040:	0801fe20 	.word	0x0801fe20

08006044 <UpdateSystemUptime>:

void UpdateSystemUptime() {
 8006044:	b590      	push	{r4, r7, lr}
 8006046:	b089      	sub	sp, #36	@ 0x24
 8006048:	af02      	add	r7, sp, #8
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 800604a:	003a      	movs	r2, r7
 800604c:	1d3b      	adds	r3, r7, #4
 800604e:	0011      	movs	r1, r2
 8006050:	0018      	movs	r0, r3
 8006052:	f000 f9a9 	bl	80063a8 <RTC_GetTime>
  if (iMinute != currentTime.Minutes) {
 8006056:	1d3b      	adds	r3, r7, #4
 8006058:	785a      	ldrb	r2, [r3, #1]
 800605a:	4b1e      	ldr	r3, [pc, #120]	@ (80060d4 <UpdateSystemUptime+0x90>)
 800605c:	781b      	ldrb	r3, [r3, #0]
 800605e:	429a      	cmp	r2, r3
 8006060:	d009      	beq.n	8006076 <UpdateSystemUptime+0x32>
    iMinute = currentTime.Minutes;
 8006062:	1d3b      	adds	r3, r7, #4
 8006064:	785a      	ldrb	r2, [r3, #1]
 8006066:	4b1b      	ldr	r3, [pc, #108]	@ (80060d4 <UpdateSystemUptime+0x90>)
 8006068:	701a      	strb	r2, [r3, #0]
    myUptimeminute++;
 800606a:	4b1b      	ldr	r3, [pc, #108]	@ (80060d8 <UpdateSystemUptime+0x94>)
 800606c:	781b      	ldrb	r3, [r3, #0]
 800606e:	3301      	adds	r3, #1
 8006070:	b2da      	uxtb	r2, r3
 8006072:	4b19      	ldr	r3, [pc, #100]	@ (80060d8 <UpdateSystemUptime+0x94>)
 8006074:	701a      	strb	r2, [r3, #0]
  }
  if (myUptimeminute == 60) {
 8006076:	4b18      	ldr	r3, [pc, #96]	@ (80060d8 <UpdateSystemUptime+0x94>)
 8006078:	781b      	ldrb	r3, [r3, #0]
 800607a:	2b3c      	cmp	r3, #60	@ 0x3c
 800607c:	d115      	bne.n	80060aa <UpdateSystemUptime+0x66>
    myUptimeminute = 0;
 800607e:	4b16      	ldr	r3, [pc, #88]	@ (80060d8 <UpdateSystemUptime+0x94>)
 8006080:	2200      	movs	r2, #0
 8006082:	701a      	strb	r2, [r3, #0]
    myUptimehour++;
 8006084:	4b15      	ldr	r3, [pc, #84]	@ (80060dc <UpdateSystemUptime+0x98>)
 8006086:	781b      	ldrb	r3, [r3, #0]
 8006088:	3301      	adds	r3, #1
 800608a:	b2da      	uxtb	r2, r3
 800608c:	4b13      	ldr	r3, [pc, #76]	@ (80060dc <UpdateSystemUptime+0x98>)
 800608e:	701a      	strb	r2, [r3, #0]
    if (myUptimehour == 24) {
 8006090:	4b12      	ldr	r3, [pc, #72]	@ (80060dc <UpdateSystemUptime+0x98>)
 8006092:	781b      	ldrb	r3, [r3, #0]
 8006094:	2b18      	cmp	r3, #24
 8006096:	d108      	bne.n	80060aa <UpdateSystemUptime+0x66>
      myUptimehour = 0;
 8006098:	4b10      	ldr	r3, [pc, #64]	@ (80060dc <UpdateSystemUptime+0x98>)
 800609a:	2200      	movs	r2, #0
 800609c:	701a      	strb	r2, [r3, #0]
      myUptimeday++;
 800609e:	4b10      	ldr	r3, [pc, #64]	@ (80060e0 <UpdateSystemUptime+0x9c>)
 80060a0:	881b      	ldrh	r3, [r3, #0]
 80060a2:	3301      	adds	r3, #1
 80060a4:	b29a      	uxth	r2, r3
 80060a6:	4b0e      	ldr	r3, [pc, #56]	@ (80060e0 <UpdateSystemUptime+0x9c>)
 80060a8:	801a      	strh	r2, [r3, #0]
    }
  }
  Debug("System uptime is: %dd %02dh:%02dm", myUptimeday, myUptimehour, myUptimeminute);
 80060aa:	4b0d      	ldr	r3, [pc, #52]	@ (80060e0 <UpdateSystemUptime+0x9c>)
 80060ac:	881b      	ldrh	r3, [r3, #0]
 80060ae:	001c      	movs	r4, r3
 80060b0:	4b0a      	ldr	r3, [pc, #40]	@ (80060dc <UpdateSystemUptime+0x98>)
 80060b2:	781b      	ldrb	r3, [r3, #0]
 80060b4:	0018      	movs	r0, r3
 80060b6:	4b08      	ldr	r3, [pc, #32]	@ (80060d8 <UpdateSystemUptime+0x94>)
 80060b8:	781b      	ldrb	r3, [r3, #0]
 80060ba:	4a0a      	ldr	r2, [pc, #40]	@ (80060e4 <UpdateSystemUptime+0xa0>)
 80060bc:	490a      	ldr	r1, [pc, #40]	@ (80060e8 <UpdateSystemUptime+0xa4>)
 80060be:	9301      	str	r3, [sp, #4]
 80060c0:	9000      	str	r0, [sp, #0]
 80060c2:	0023      	movs	r3, r4
 80060c4:	2003      	movs	r0, #3
 80060c6:	f005 fb29 	bl	800b71c <CreateLine>
}
 80060ca:	46c0      	nop			@ (mov r8, r8)
 80060cc:	46bd      	mov	sp, r7
 80060ce:	b007      	add	sp, #28
 80060d0:	bd90      	pop	{r4, r7, pc}
 80060d2:	46c0      	nop			@ (mov r8, r8)
 80060d4:	20000cb4 	.word	0x20000cb4
 80060d8:	20000cb5 	.word	0x20000cb5
 80060dc:	20000cb6 	.word	0x20000cb6
 80060e0:	20000cb8 	.word	0x20000cb8
 80060e4:	0801fe24 	.word	0x0801fe24
 80060e8:	0801fe20 	.word	0x0801fe20

080060ec <aBuff2int>:

//  0         1         2         3  3
//  0         0         0         0  3
//  +CIPSNTPTIME:Thu Jan  1 01:00:03 1970
//OK
uint8_t aBuff2int(char* aBuff, uint8_t start, uint8_t stop) {
 80060ec:	b590      	push	{r4, r7, lr}
 80060ee:	b085      	sub	sp, #20
 80060f0:	af00      	add	r7, sp, #0
 80060f2:	6078      	str	r0, [r7, #4]
 80060f4:	0008      	movs	r0, r1
 80060f6:	0011      	movs	r1, r2
 80060f8:	1cfb      	adds	r3, r7, #3
 80060fa:	1c02      	adds	r2, r0, #0
 80060fc:	701a      	strb	r2, [r3, #0]
 80060fe:	1cbb      	adds	r3, r7, #2
 8006100:	1c0a      	adds	r2, r1, #0
 8006102:	701a      	strb	r2, [r3, #0]
  char iBuff[5];
  uint8_t i;
  uint8_t pos = 0;
 8006104:	230e      	movs	r3, #14
 8006106:	18fb      	adds	r3, r7, r3
 8006108:	2200      	movs	r2, #0
 800610a:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 800610c:	230f      	movs	r3, #15
 800610e:	18fb      	adds	r3, r7, r3
 8006110:	1cfa      	adds	r2, r7, #3
 8006112:	7812      	ldrb	r2, [r2, #0]
 8006114:	701a      	strb	r2, [r3, #0]
 8006116:	e015      	b.n	8006144 <aBuff2int+0x58>
    iBuff[pos] = aBuff[i];
 8006118:	200f      	movs	r0, #15
 800611a:	183b      	adds	r3, r7, r0
 800611c:	781b      	ldrb	r3, [r3, #0]
 800611e:	687a      	ldr	r2, [r7, #4]
 8006120:	18d2      	adds	r2, r2, r3
 8006122:	240e      	movs	r4, #14
 8006124:	193b      	adds	r3, r7, r4
 8006126:	781b      	ldrb	r3, [r3, #0]
 8006128:	7811      	ldrb	r1, [r2, #0]
 800612a:	2208      	movs	r2, #8
 800612c:	18ba      	adds	r2, r7, r2
 800612e:	54d1      	strb	r1, [r2, r3]
    pos++;
 8006130:	193b      	adds	r3, r7, r4
 8006132:	781a      	ldrb	r2, [r3, #0]
 8006134:	193b      	adds	r3, r7, r4
 8006136:	3201      	adds	r2, #1
 8006138:	701a      	strb	r2, [r3, #0]
  for (i = start; i <= stop ; i++){
 800613a:	183b      	adds	r3, r7, r0
 800613c:	781a      	ldrb	r2, [r3, #0]
 800613e:	183b      	adds	r3, r7, r0
 8006140:	3201      	adds	r2, #1
 8006142:	701a      	strb	r2, [r3, #0]
 8006144:	200f      	movs	r0, #15
 8006146:	183a      	adds	r2, r7, r0
 8006148:	1cbb      	adds	r3, r7, #2
 800614a:	7812      	ldrb	r2, [r2, #0]
 800614c:	781b      	ldrb	r3, [r3, #0]
 800614e:	429a      	cmp	r2, r3
 8006150:	d9e2      	bls.n	8006118 <aBuff2int+0x2c>
  }
  iBuff[pos] = '\0';
 8006152:	230e      	movs	r3, #14
 8006154:	18fb      	adds	r3, r7, r3
 8006156:	781b      	ldrb	r3, [r3, #0]
 8006158:	2208      	movs	r2, #8
 800615a:	18ba      	adds	r2, r7, r2
 800615c:	2100      	movs	r1, #0
 800615e:	54d1      	strb	r1, [r2, r3]
  if (start < 20) {
 8006160:	1cfb      	adds	r3, r7, #3
 8006162:	781b      	ldrb	r3, [r3, #0]
 8006164:	2b13      	cmp	r3, #19
 8006166:	d849      	bhi.n	80061fc <aBuff2int+0x110>
    if (start == 17) { //month
 8006168:	1cfb      	adds	r3, r7, #3
 800616a:	781b      	ldrb	r3, [r3, #0]
 800616c:	2b11      	cmp	r3, #17
 800616e:	d122      	bne.n	80061b6 <aBuff2int+0xca>
      for (i = 0; i < 12; i++) {
 8006170:	183b      	adds	r3, r7, r0
 8006172:	2200      	movs	r2, #0
 8006174:	701a      	strb	r2, [r3, #0]
 8006176:	e018      	b.n	80061aa <aBuff2int+0xbe>
        if (strcmp( iBuff, monthNames[i]) == 0) {
 8006178:	240f      	movs	r4, #15
 800617a:	193b      	adds	r3, r7, r4
 800617c:	781a      	ldrb	r2, [r3, #0]
 800617e:	4b25      	ldr	r3, [pc, #148]	@ (8006214 <aBuff2int+0x128>)
 8006180:	0092      	lsls	r2, r2, #2
 8006182:	58d2      	ldr	r2, [r2, r3]
 8006184:	2308      	movs	r3, #8
 8006186:	18fb      	adds	r3, r7, r3
 8006188:	0011      	movs	r1, r2
 800618a:	0018      	movs	r0, r3
 800618c:	f7f9 ffe4 	bl	8000158 <strcmp>
 8006190:	1e03      	subs	r3, r0, #0
 8006192:	d104      	bne.n	800619e <aBuff2int+0xb2>
          return i+1;
 8006194:	193b      	adds	r3, r7, r4
 8006196:	781b      	ldrb	r3, [r3, #0]
 8006198:	3301      	adds	r3, #1
 800619a:	b2db      	uxtb	r3, r3
 800619c:	e035      	b.n	800620a <aBuff2int+0x11e>
      for (i = 0; i < 12; i++) {
 800619e:	210f      	movs	r1, #15
 80061a0:	187b      	adds	r3, r7, r1
 80061a2:	781a      	ldrb	r2, [r3, #0]
 80061a4:	187b      	adds	r3, r7, r1
 80061a6:	3201      	adds	r2, #1
 80061a8:	701a      	strb	r2, [r3, #0]
 80061aa:	230f      	movs	r3, #15
 80061ac:	18fb      	adds	r3, r7, r3
 80061ae:	781b      	ldrb	r3, [r3, #0]
 80061b0:	2b0b      	cmp	r3, #11
 80061b2:	d9e1      	bls.n	8006178 <aBuff2int+0x8c>
 80061b4:	e022      	b.n	80061fc <aBuff2int+0x110>
        }
      }
    }
    else {
      //day
      for (i = 0; i < 7; i++) {
 80061b6:	230f      	movs	r3, #15
 80061b8:	18fb      	adds	r3, r7, r3
 80061ba:	2200      	movs	r2, #0
 80061bc:	701a      	strb	r2, [r3, #0]
 80061be:	e018      	b.n	80061f2 <aBuff2int+0x106>
        if (strcmp( iBuff, dayNames[i]) == 0) {
 80061c0:	240f      	movs	r4, #15
 80061c2:	193b      	adds	r3, r7, r4
 80061c4:	781a      	ldrb	r2, [r3, #0]
 80061c6:	4b14      	ldr	r3, [pc, #80]	@ (8006218 <aBuff2int+0x12c>)
 80061c8:	0092      	lsls	r2, r2, #2
 80061ca:	58d2      	ldr	r2, [r2, r3]
 80061cc:	2308      	movs	r3, #8
 80061ce:	18fb      	adds	r3, r7, r3
 80061d0:	0011      	movs	r1, r2
 80061d2:	0018      	movs	r0, r3
 80061d4:	f7f9 ffc0 	bl	8000158 <strcmp>
 80061d8:	1e03      	subs	r3, r0, #0
 80061da:	d104      	bne.n	80061e6 <aBuff2int+0xfa>
          return i+1;
 80061dc:	193b      	adds	r3, r7, r4
 80061de:	781b      	ldrb	r3, [r3, #0]
 80061e0:	3301      	adds	r3, #1
 80061e2:	b2db      	uxtb	r3, r3
 80061e4:	e011      	b.n	800620a <aBuff2int+0x11e>
      for (i = 0; i < 7; i++) {
 80061e6:	210f      	movs	r1, #15
 80061e8:	187b      	adds	r3, r7, r1
 80061ea:	781a      	ldrb	r2, [r3, #0]
 80061ec:	187b      	adds	r3, r7, r1
 80061ee:	3201      	adds	r2, #1
 80061f0:	701a      	strb	r2, [r3, #0]
 80061f2:	230f      	movs	r3, #15
 80061f4:	18fb      	adds	r3, r7, r3
 80061f6:	781b      	ldrb	r3, [r3, #0]
 80061f8:	2b06      	cmp	r3, #6
 80061fa:	d9e1      	bls.n	80061c0 <aBuff2int+0xd4>
        }
      }
    }
  }
  return atoi(iBuff);
 80061fc:	2308      	movs	r3, #8
 80061fe:	18fb      	adds	r3, r7, r3
 8006200:	0018      	movs	r0, r3
 8006202:	f014 fcca 	bl	801ab9a <atoi>
 8006206:	0003      	movs	r3, r0
 8006208:	b2db      	uxtb	r3, r3
}
 800620a:	0018      	movs	r0, r3
 800620c:	46bd      	mov	sp, r7
 800620e:	b005      	add	sp, #20
 8006210:	bd90      	pop	{r4, r7, pc}
 8006212:	46c0      	nop			@ (mov r8, r8)
 8006214:	20000050 	.word	0x20000050
 8006218:	20000034 	.word	0x20000034

0800621c <ParseTime>:

void ParseTime(char* buffer) {
 800621c:	b5f0      	push	{r4, r5, r6, r7, lr}
 800621e:	b08b      	sub	sp, #44	@ 0x2c
 8006220:	af02      	add	r7, sp, #8
 8006222:	6078      	str	r0, [r7, #4]
  RTC_TimeTypeDef currentTime;
  RTC_DateTypeDef currentDate;
  RTC_GetTime(&currentTime, &currentDate);
 8006224:	2508      	movs	r5, #8
 8006226:	197a      	adds	r2, r7, r5
 8006228:	240c      	movs	r4, #12
 800622a:	193b      	adds	r3, r7, r4
 800622c:	0011      	movs	r1, r2
 800622e:	0018      	movs	r0, r3
 8006230:	f000 f8ba 	bl	80063a8 <RTC_GetTime>
  currentTime.Hours = aBuff2int(buffer, 24, 25);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	2219      	movs	r2, #25
 8006238:	2118      	movs	r1, #24
 800623a:	0018      	movs	r0, r3
 800623c:	f7ff ff56 	bl	80060ec <aBuff2int>
 8006240:	0003      	movs	r3, r0
 8006242:	001a      	movs	r2, r3
 8006244:	193b      	adds	r3, r7, r4
 8006246:	701a      	strb	r2, [r3, #0]
  currentTime.Minutes = aBuff2int(buffer, 27, 28);
 8006248:	687b      	ldr	r3, [r7, #4]
 800624a:	221c      	movs	r2, #28
 800624c:	211b      	movs	r1, #27
 800624e:	0018      	movs	r0, r3
 8006250:	f7ff ff4c 	bl	80060ec <aBuff2int>
 8006254:	0003      	movs	r3, r0
 8006256:	001a      	movs	r2, r3
 8006258:	193b      	adds	r3, r7, r4
 800625a:	705a      	strb	r2, [r3, #1]
  currentTime.Seconds = aBuff2int(buffer, 30, 31);
 800625c:	687b      	ldr	r3, [r7, #4]
 800625e:	221f      	movs	r2, #31
 8006260:	211e      	movs	r1, #30
 8006262:	0018      	movs	r0, r3
 8006264:	f7ff ff42 	bl	80060ec <aBuff2int>
 8006268:	0003      	movs	r3, r0
 800626a:	001a      	movs	r2, r3
 800626c:	193b      	adds	r3, r7, r4
 800626e:	709a      	strb	r2, [r3, #2]
  currentDate.Year = aBuff2int(buffer, 35, 36);
 8006270:	687b      	ldr	r3, [r7, #4]
 8006272:	2224      	movs	r2, #36	@ 0x24
 8006274:	2123      	movs	r1, #35	@ 0x23
 8006276:	0018      	movs	r0, r3
 8006278:	f7ff ff38 	bl	80060ec <aBuff2int>
 800627c:	0003      	movs	r3, r0
 800627e:	001a      	movs	r2, r3
 8006280:	002e      	movs	r6, r5
 8006282:	19bb      	adds	r3, r7, r6
 8006284:	70da      	strb	r2, [r3, #3]
  currentDate.Month = aBuff2int(buffer, 17, 19);
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	2213      	movs	r2, #19
 800628a:	2111      	movs	r1, #17
 800628c:	0018      	movs	r0, r3
 800628e:	f7ff ff2d 	bl	80060ec <aBuff2int>
 8006292:	0003      	movs	r3, r0
 8006294:	001a      	movs	r2, r3
 8006296:	19bb      	adds	r3, r7, r6
 8006298:	705a      	strb	r2, [r3, #1]
  currentDate.Date = aBuff2int(buffer, 21,22);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	2216      	movs	r2, #22
 800629e:	2115      	movs	r1, #21
 80062a0:	0018      	movs	r0, r3
 80062a2:	f7ff ff23 	bl	80060ec <aBuff2int>
 80062a6:	0003      	movs	r3, r0
 80062a8:	001a      	movs	r2, r3
 80062aa:	19bb      	adds	r3, r7, r6
 80062ac:	709a      	strb	r2, [r3, #2]
  currentDate.WeekDay = aBuff2int(buffer, 13, 15);
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	220f      	movs	r2, #15
 80062b2:	210d      	movs	r1, #13
 80062b4:	0018      	movs	r0, r3
 80062b6:	f7ff ff19 	bl	80060ec <aBuff2int>
 80062ba:	0003      	movs	r3, r0
 80062bc:	001a      	movs	r2, r3
 80062be:	19bb      	adds	r3, r7, r6
 80062c0:	701a      	strb	r2, [r3, #0]
  Debug("Current RTC time before update is: %02dh:%02dm:%02ds", currentTime.Hours , currentTime.Minutes, currentTime.Seconds);
 80062c2:	0025      	movs	r5, r4
 80062c4:	197b      	adds	r3, r7, r5
 80062c6:	781b      	ldrb	r3, [r3, #0]
 80062c8:	001c      	movs	r4, r3
 80062ca:	197b      	adds	r3, r7, r5
 80062cc:	785b      	ldrb	r3, [r3, #1]
 80062ce:	0018      	movs	r0, r3
 80062d0:	197b      	adds	r3, r7, r5
 80062d2:	789b      	ldrb	r3, [r3, #2]
 80062d4:	4a09      	ldr	r2, [pc, #36]	@ (80062fc <ParseTime+0xe0>)
 80062d6:	490a      	ldr	r1, [pc, #40]	@ (8006300 <ParseTime+0xe4>)
 80062d8:	9301      	str	r3, [sp, #4]
 80062da:	9000      	str	r0, [sp, #0]
 80062dc:	0023      	movs	r3, r4
 80062de:	2003      	movs	r0, #3
 80062e0:	f005 fa1c 	bl	800b71c <CreateLine>
  RTC_SetTime(&currentTime);
 80062e4:	197b      	adds	r3, r7, r5
 80062e6:	0018      	movs	r0, r3
 80062e8:	f000 f80c 	bl	8006304 <RTC_SetTime>
  RTC_SetDate(&currentDate);
 80062ec:	19bb      	adds	r3, r7, r6
 80062ee:	0018      	movs	r0, r3
 80062f0:	f000 f83c 	bl	800636c <RTC_SetDate>
//  Debug("PARSETIME parameters => weekday: %d, year: %d, month: %d, day: %d, hours: %d, minutes: %d, seconds: %d", weekday, year, month, day, hours, minutes, seconds);
}
 80062f4:	46c0      	nop			@ (mov r8, r8)
 80062f6:	46bd      	mov	sp, r7
 80062f8:	b009      	add	sp, #36	@ 0x24
 80062fa:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80062fc:	0801fe48 	.word	0x0801fe48
 8006300:	0801fe20 	.word	0x0801fe20

08006304 <RTC_SetTime>:

// Functie om de tijd in te stellen
void RTC_SetTime(RTC_TimeTypeDef* sTime) {
 8006304:	b580      	push	{r7, lr}
 8006306:	b082      	sub	sp, #8
 8006308:	af00      	add	r7, sp, #0
 800630a:	6078      	str	r0, [r7, #4]
    sTime->TimeFormat = RTC_HOURFORMAT_24;
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	2200      	movs	r2, #0
 8006310:	70da      	strb	r2, [r3, #3]
    sTime->DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2200      	movs	r2, #0
 8006316:	60da      	str	r2, [r3, #12]
    sTime->StoreOperation = RTC_STOREOPERATION_RESET;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2200      	movs	r2, #0
 800631c:	611a      	str	r2, [r3, #16]
    
    if (HAL_RTC_SetTime(RealTime_Handle, sTime, RTC_FORMAT_BIN) != HAL_OK) {
 800631e:	4b0f      	ldr	r3, [pc, #60]	@ (800635c <RTC_SetTime+0x58>)
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	6879      	ldr	r1, [r7, #4]
 8006324:	2200      	movs	r2, #0
 8006326:	0018      	movs	r0, r3
 8006328:	f00c f982 	bl	8012630 <HAL_RTC_SetTime>
 800632c:	1e03      	subs	r3, r0, #0
 800632e:	d005      	beq.n	800633c <RTC_SetTime+0x38>
        // Foutafhandeling
      Error("Error setting time to RTC");
 8006330:	4a0b      	ldr	r2, [pc, #44]	@ (8006360 <RTC_SetTime+0x5c>)
 8006332:	4b0c      	ldr	r3, [pc, #48]	@ (8006364 <RTC_SetTime+0x60>)
 8006334:	0019      	movs	r1, r3
 8006336:	2001      	movs	r0, #1
 8006338:	f005 f9f0 	bl	800b71c <CreateLine>
    }
    if (firstTimeUpdate) {
 800633c:	4b0a      	ldr	r3, [pc, #40]	@ (8006368 <RTC_SetTime+0x64>)
 800633e:	781b      	ldrb	r3, [r3, #0]
 8006340:	2b00      	cmp	r3, #0
 8006342:	d007      	beq.n	8006354 <RTC_SetTime+0x50>
      firstTimeUpdate = false;
 8006344:	4b08      	ldr	r3, [pc, #32]	@ (8006368 <RTC_SetTime+0x64>)
 8006346:	2200      	movs	r2, #0
 8006348:	701a      	strb	r2, [r3, #0]
      setiMinute(sTime->Minutes);
 800634a:	687b      	ldr	r3, [r7, #4]
 800634c:	785b      	ldrb	r3, [r3, #1]
 800634e:	0018      	movs	r0, r3
 8006350:	f7ff fe5c 	bl	800600c <setiMinute>
    }
}
 8006354:	46c0      	nop			@ (mov r8, r8)
 8006356:	46bd      	mov	sp, r7
 8006358:	b002      	add	sp, #8
 800635a:	bd80      	pop	{r7, pc}
 800635c:	20000cb0 	.word	0x20000cb0
 8006360:	0801fe80 	.word	0x0801fe80
 8006364:	0801fe9c 	.word	0x0801fe9c
 8006368:	20000030 	.word	0x20000030

0800636c <RTC_SetDate>:

// Functie om de datum in te stellen
void RTC_SetDate(RTC_DateTypeDef* sDate) {
 800636c:	b580      	push	{r7, lr}
 800636e:	b082      	sub	sp, #8
 8006370:	af00      	add	r7, sp, #0
 8006372:	6078      	str	r0, [r7, #4]
    if (HAL_RTC_SetDate(RealTime_Handle, sDate, RTC_FORMAT_BIN) != HAL_OK) {
 8006374:	4b09      	ldr	r3, [pc, #36]	@ (800639c <RTC_SetDate+0x30>)
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	6879      	ldr	r1, [r7, #4]
 800637a:	2200      	movs	r2, #0
 800637c:	0018      	movs	r0, r3
 800637e:	f00c fa5f 	bl	8012840 <HAL_RTC_SetDate>
 8006382:	1e03      	subs	r3, r0, #0
 8006384:	d005      	beq.n	8006392 <RTC_SetDate+0x26>
        // Foutafhandeling
      Error("Error setting date to RTC");
 8006386:	4a06      	ldr	r2, [pc, #24]	@ (80063a0 <RTC_SetDate+0x34>)
 8006388:	4b06      	ldr	r3, [pc, #24]	@ (80063a4 <RTC_SetDate+0x38>)
 800638a:	0019      	movs	r1, r3
 800638c:	2001      	movs	r0, #1
 800638e:	f005 f9c5 	bl	800b71c <CreateLine>
    }
}
 8006392:	46c0      	nop			@ (mov r8, r8)
 8006394:	46bd      	mov	sp, r7
 8006396:	b002      	add	sp, #8
 8006398:	bd80      	pop	{r7, pc}
 800639a:	46c0      	nop			@ (mov r8, r8)
 800639c:	20000cb0 	.word	0x20000cb0
 80063a0:	0801fea0 	.word	0x0801fea0
 80063a4:	0801fe9c 	.word	0x0801fe9c

080063a8 <RTC_GetTime>:

// Functie om de tijd uit te lezen
void RTC_GetTime(RTC_TimeTypeDef* gTime, RTC_DateTypeDef* gDate) {
 80063a8:	b580      	push	{r7, lr}
 80063aa:	b082      	sub	sp, #8
 80063ac:	af00      	add	r7, sp, #0
 80063ae:	6078      	str	r0, [r7, #4]
 80063b0:	6039      	str	r1, [r7, #0]
    if (HAL_RTC_GetTime(RealTime_Handle, gTime, RTC_FORMAT_BIN) != HAL_OK) {
 80063b2:	4b11      	ldr	r3, [pc, #68]	@ (80063f8 <RTC_GetTime+0x50>)
 80063b4:	681b      	ldr	r3, [r3, #0]
 80063b6:	6879      	ldr	r1, [r7, #4]
 80063b8:	2200      	movs	r2, #0
 80063ba:	0018      	movs	r0, r3
 80063bc:	f00c f9e2 	bl	8012784 <HAL_RTC_GetTime>
 80063c0:	1e03      	subs	r3, r0, #0
 80063c2:	d005      	beq.n	80063d0 <RTC_GetTime+0x28>
      Error("Error getting time from RTC");
 80063c4:	4a0d      	ldr	r2, [pc, #52]	@ (80063fc <RTC_GetTime+0x54>)
 80063c6:	4b0e      	ldr	r3, [pc, #56]	@ (8006400 <RTC_GetTime+0x58>)
 80063c8:	0019      	movs	r1, r3
 80063ca:	2001      	movs	r0, #1
 80063cc:	f005 f9a6 	bl	800b71c <CreateLine>
    }
    if (HAL_RTC_GetDate(RealTime_Handle, gDate, RTC_FORMAT_BIN) != HAL_OK) {
 80063d0:	4b09      	ldr	r3, [pc, #36]	@ (80063f8 <RTC_GetTime+0x50>)
 80063d2:	681b      	ldr	r3, [r3, #0]
 80063d4:	6839      	ldr	r1, [r7, #0]
 80063d6:	2200      	movs	r2, #0
 80063d8:	0018      	movs	r0, r3
 80063da:	f00c fac5 	bl	8012968 <HAL_RTC_GetDate>
 80063de:	1e03      	subs	r3, r0, #0
 80063e0:	d005      	beq.n	80063ee <RTC_GetTime+0x46>
      Error("Error getting date from RTC");
 80063e2:	4a08      	ldr	r2, [pc, #32]	@ (8006404 <RTC_GetTime+0x5c>)
 80063e4:	4b06      	ldr	r3, [pc, #24]	@ (8006400 <RTC_GetTime+0x58>)
 80063e6:	0019      	movs	r1, r3
 80063e8:	2001      	movs	r0, #1
 80063ea:	f005 f997 	bl	800b71c <CreateLine>
    }
}
 80063ee:	46c0      	nop			@ (mov r8, r8)
 80063f0:	46bd      	mov	sp, r7
 80063f2:	b002      	add	sp, #8
 80063f4:	bd80      	pop	{r7, pc}
 80063f6:	46c0      	nop			@ (mov r8, r8)
 80063f8:	20000cb0 	.word	0x20000cb0
 80063fc:	0801febc 	.word	0x0801febc
 8006400:	0801fe9c 	.word	0x0801fe9c
 8006404:	0801fed8 	.word	0x0801fed8

08006408 <InitClock>:

    // Instellen op Stop mode met low-power regulator
    HAL_PWR_EnterSTOPMode(PWR_LOWPOWERREGULATOR_ON, PWR_STOPENTRY_WFI);
}

void InitClock(RTC_HandleTypeDef* h_hrtc){
 8006408:	b580      	push	{r7, lr}
 800640a:	b082      	sub	sp, #8
 800640c:	af00      	add	r7, sp, #0
 800640e:	6078      	str	r0, [r7, #4]
  RealTime_Handle = h_hrtc;
 8006410:	4b03      	ldr	r3, [pc, #12]	@ (8006420 <InitClock+0x18>)
 8006412:	687a      	ldr	r2, [r7, #4]
 8006414:	601a      	str	r2, [r3, #0]
}
 8006416:	46c0      	nop			@ (mov r8, r8)
 8006418:	46bd      	mov	sp, r7
 800641a:	b002      	add	sp, #8
 800641c:	bd80      	pop	{r7, pc}
 800641e:	46c0      	nop			@ (mov r8, r8)
 8006420:	20000cb0 	.word	0x20000cb0

08006424 <MX_ADC_Init>:

ADC_HandleTypeDef hadc;

/* ADC init function */
void MX_ADC_Init(void)
{
 8006424:	b580      	push	{r7, lr}
 8006426:	b082      	sub	sp, #8
 8006428:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN ADC_Init 0 */

  /* USER CODE END ADC_Init 0 */

  ADC_ChannelConfTypeDef sConfig = {0};
 800642a:	003b      	movs	r3, r7
 800642c:	0018      	movs	r0, r3
 800642e:	2308      	movs	r3, #8
 8006430:	001a      	movs	r2, r3
 8006432:	2100      	movs	r1, #0
 8006434:	f016 f840 	bl	801c4b8 <memset>

  /* USER CODE END ADC_Init 1 */

  /** Configure the global features of the ADC (Clock, Resolution, Data Alignment and number of conversion)
  */
  hadc.Instance = ADC1;
 8006438:	4b30      	ldr	r3, [pc, #192]	@ (80064fc <MX_ADC_Init+0xd8>)
 800643a:	4a31      	ldr	r2, [pc, #196]	@ (8006500 <MX_ADC_Init+0xdc>)
 800643c:	601a      	str	r2, [r3, #0]
  hadc.Init.OversamplingMode = DISABLE;
 800643e:	4b2f      	ldr	r3, [pc, #188]	@ (80064fc <MX_ADC_Init+0xd8>)
 8006440:	2200      	movs	r2, #0
 8006442:	63da      	str	r2, [r3, #60]	@ 0x3c
  hadc.Init.ClockPrescaler = ADC_CLOCK_SYNC_PCLK_DIV1;
 8006444:	4b2d      	ldr	r3, [pc, #180]	@ (80064fc <MX_ADC_Init+0xd8>)
 8006446:	22c0      	movs	r2, #192	@ 0xc0
 8006448:	0612      	lsls	r2, r2, #24
 800644a:	605a      	str	r2, [r3, #4]
  hadc.Init.Resolution = ADC_RESOLUTION_12B;
 800644c:	4b2b      	ldr	r3, [pc, #172]	@ (80064fc <MX_ADC_Init+0xd8>)
 800644e:	2200      	movs	r2, #0
 8006450:	609a      	str	r2, [r3, #8]
  hadc.Init.SamplingTime = ADC_SAMPLETIME_1CYCLE_5;
 8006452:	4b2a      	ldr	r3, [pc, #168]	@ (80064fc <MX_ADC_Init+0xd8>)
 8006454:	2200      	movs	r2, #0
 8006456:	639a      	str	r2, [r3, #56]	@ 0x38
  hadc.Init.ScanConvMode = ADC_SCAN_DIRECTION_FORWARD;
 8006458:	4b28      	ldr	r3, [pc, #160]	@ (80064fc <MX_ADC_Init+0xd8>)
 800645a:	2201      	movs	r2, #1
 800645c:	611a      	str	r2, [r3, #16]
  hadc.Init.DataAlign = ADC_DATAALIGN_RIGHT;
 800645e:	4b27      	ldr	r3, [pc, #156]	@ (80064fc <MX_ADC_Init+0xd8>)
 8006460:	2200      	movs	r2, #0
 8006462:	60da      	str	r2, [r3, #12]
  hadc.Init.ContinuousConvMode = DISABLE;
 8006464:	4b25      	ldr	r3, [pc, #148]	@ (80064fc <MX_ADC_Init+0xd8>)
 8006466:	2220      	movs	r2, #32
 8006468:	2100      	movs	r1, #0
 800646a:	5499      	strb	r1, [r3, r2]
  hadc.Init.DiscontinuousConvMode = ENABLE;
 800646c:	4b23      	ldr	r3, [pc, #140]	@ (80064fc <MX_ADC_Init+0xd8>)
 800646e:	2221      	movs	r2, #33	@ 0x21
 8006470:	2101      	movs	r1, #1
 8006472:	5499      	strb	r1, [r3, r2]
  hadc.Init.ExternalTrigConvEdge = ADC_EXTERNALTRIGCONVEDGE_NONE;
 8006474:	4b21      	ldr	r3, [pc, #132]	@ (80064fc <MX_ADC_Init+0xd8>)
 8006476:	2200      	movs	r2, #0
 8006478:	629a      	str	r2, [r3, #40]	@ 0x28
  hadc.Init.ExternalTrigConv = ADC_SOFTWARE_START;
 800647a:	4b20      	ldr	r3, [pc, #128]	@ (80064fc <MX_ADC_Init+0xd8>)
 800647c:	22c2      	movs	r2, #194	@ 0xc2
 800647e:	32ff      	adds	r2, #255	@ 0xff
 8006480:	625a      	str	r2, [r3, #36]	@ 0x24
  hadc.Init.DMAContinuousRequests = DISABLE;
 8006482:	4b1e      	ldr	r3, [pc, #120]	@ (80064fc <MX_ADC_Init+0xd8>)
 8006484:	222c      	movs	r2, #44	@ 0x2c
 8006486:	2100      	movs	r1, #0
 8006488:	5499      	strb	r1, [r3, r2]
  hadc.Init.EOCSelection = ADC_EOC_SINGLE_CONV;
 800648a:	4b1c      	ldr	r3, [pc, #112]	@ (80064fc <MX_ADC_Init+0xd8>)
 800648c:	2204      	movs	r2, #4
 800648e:	615a      	str	r2, [r3, #20]
  hadc.Init.Overrun = ADC_OVR_DATA_PRESERVED;
 8006490:	4b1a      	ldr	r3, [pc, #104]	@ (80064fc <MX_ADC_Init+0xd8>)
 8006492:	2200      	movs	r2, #0
 8006494:	631a      	str	r2, [r3, #48]	@ 0x30
  hadc.Init.LowPowerAutoWait = DISABLE;
 8006496:	4b19      	ldr	r3, [pc, #100]	@ (80064fc <MX_ADC_Init+0xd8>)
 8006498:	2200      	movs	r2, #0
 800649a:	619a      	str	r2, [r3, #24]
  hadc.Init.LowPowerFrequencyMode = DISABLE;
 800649c:	4b17      	ldr	r3, [pc, #92]	@ (80064fc <MX_ADC_Init+0xd8>)
 800649e:	2200      	movs	r2, #0
 80064a0:	635a      	str	r2, [r3, #52]	@ 0x34
  hadc.Init.LowPowerAutoPowerOff = DISABLE;
 80064a2:	4b16      	ldr	r3, [pc, #88]	@ (80064fc <MX_ADC_Init+0xd8>)
 80064a4:	2200      	movs	r2, #0
 80064a6:	61da      	str	r2, [r3, #28]
  if (HAL_ADC_Init(&hadc) != HAL_OK)
 80064a8:	4b14      	ldr	r3, [pc, #80]	@ (80064fc <MX_ADC_Init+0xd8>)
 80064aa:	0018      	movs	r0, r3
 80064ac:	f005 fd1e 	bl	800beec <HAL_ADC_Init>
 80064b0:	1e03      	subs	r3, r0, #0
 80064b2:	d001      	beq.n	80064b8 <MX_ADC_Init+0x94>
  {
    Error_Handler();
 80064b4:	f000 ffb6 	bl	8007424 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_14;
 80064b8:	003b      	movs	r3, r7
 80064ba:	4a12      	ldr	r2, [pc, #72]	@ (8006504 <MX_ADC_Init+0xe0>)
 80064bc:	601a      	str	r2, [r3, #0]
  sConfig.Rank = ADC_RANK_CHANNEL_NUMBER;
 80064be:	003b      	movs	r3, r7
 80064c0:	2280      	movs	r2, #128	@ 0x80
 80064c2:	0152      	lsls	r2, r2, #5
 80064c4:	605a      	str	r2, [r3, #4]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80064c6:	003a      	movs	r2, r7
 80064c8:	4b0c      	ldr	r3, [pc, #48]	@ (80064fc <MX_ADC_Init+0xd8>)
 80064ca:	0011      	movs	r1, r2
 80064cc:	0018      	movs	r0, r3
 80064ce:	f005 ff7d 	bl	800c3cc <HAL_ADC_ConfigChannel>
 80064d2:	1e03      	subs	r3, r0, #0
 80064d4:	d001      	beq.n	80064da <MX_ADC_Init+0xb6>
  {
    Error_Handler();
 80064d6:	f000 ffa5 	bl	8007424 <Error_Handler>
  }

  /** Configure for the selected ADC regular channel to be converted.
  */
  sConfig.Channel = ADC_CHANNEL_15;
 80064da:	003b      	movs	r3, r7
 80064dc:	4a0a      	ldr	r2, [pc, #40]	@ (8006508 <MX_ADC_Init+0xe4>)
 80064de:	601a      	str	r2, [r3, #0]
  if (HAL_ADC_ConfigChannel(&hadc, &sConfig) != HAL_OK)
 80064e0:	003a      	movs	r2, r7
 80064e2:	4b06      	ldr	r3, [pc, #24]	@ (80064fc <MX_ADC_Init+0xd8>)
 80064e4:	0011      	movs	r1, r2
 80064e6:	0018      	movs	r0, r3
 80064e8:	f005 ff70 	bl	800c3cc <HAL_ADC_ConfigChannel>
 80064ec:	1e03      	subs	r3, r0, #0
 80064ee:	d001      	beq.n	80064f4 <MX_ADC_Init+0xd0>
  {
    Error_Handler();
 80064f0:	f000 ff98 	bl	8007424 <Error_Handler>
  }
  /* USER CODE BEGIN ADC_Init 2 */

  /* USER CODE END ADC_Init 2 */

}
 80064f4:	46c0      	nop			@ (mov r8, r8)
 80064f6:	46bd      	mov	sp, r7
 80064f8:	b002      	add	sp, #8
 80064fa:	bd80      	pop	{r7, pc}
 80064fc:	20000cbc 	.word	0x20000cbc
 8006500:	40012400 	.word	0x40012400
 8006504:	38004000 	.word	0x38004000
 8006508:	3c008000 	.word	0x3c008000

0800650c <HAL_ADC_MspInit>:

void HAL_ADC_MspInit(ADC_HandleTypeDef* adcHandle)
{
 800650c:	b590      	push	{r4, r7, lr}
 800650e:	b089      	sub	sp, #36	@ 0x24
 8006510:	af00      	add	r7, sp, #0
 8006512:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006514:	240c      	movs	r4, #12
 8006516:	193b      	adds	r3, r7, r4
 8006518:	0018      	movs	r0, r3
 800651a:	2314      	movs	r3, #20
 800651c:	001a      	movs	r2, r3
 800651e:	2100      	movs	r1, #0
 8006520:	f015 ffca 	bl	801c4b8 <memset>
  if(adcHandle->Instance==ADC1)
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	4a14      	ldr	r2, [pc, #80]	@ (800657c <HAL_ADC_MspInit+0x70>)
 800652a:	4293      	cmp	r3, r2
 800652c:	d121      	bne.n	8006572 <HAL_ADC_MspInit+0x66>
  {
  /* USER CODE BEGIN ADC1_MspInit 0 */

  /* USER CODE END ADC1_MspInit 0 */
    /* ADC1 clock enable */
    __HAL_RCC_ADC1_CLK_ENABLE();
 800652e:	4b14      	ldr	r3, [pc, #80]	@ (8006580 <HAL_ADC_MspInit+0x74>)
 8006530:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8006532:	4b13      	ldr	r3, [pc, #76]	@ (8006580 <HAL_ADC_MspInit+0x74>)
 8006534:	2180      	movs	r1, #128	@ 0x80
 8006536:	0089      	lsls	r1, r1, #2
 8006538:	430a      	orrs	r2, r1
 800653a:	635a      	str	r2, [r3, #52]	@ 0x34

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800653c:	4b10      	ldr	r3, [pc, #64]	@ (8006580 <HAL_ADC_MspInit+0x74>)
 800653e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006540:	4b0f      	ldr	r3, [pc, #60]	@ (8006580 <HAL_ADC_MspInit+0x74>)
 8006542:	2104      	movs	r1, #4
 8006544:	430a      	orrs	r2, r1
 8006546:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006548:	4b0d      	ldr	r3, [pc, #52]	@ (8006580 <HAL_ADC_MspInit+0x74>)
 800654a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800654c:	2204      	movs	r2, #4
 800654e:	4013      	ands	r3, r2
 8006550:	60bb      	str	r3, [r7, #8]
 8006552:	68bb      	ldr	r3, [r7, #8]
    /**ADC GPIO Configuration
    PC4     ------> ADC_IN14
    PC5     ------> ADC_IN15
    */
    GPIO_InitStruct.Pin = BatMeasure_Pin|SolarMeasure_Pin;
 8006554:	193b      	adds	r3, r7, r4
 8006556:	2230      	movs	r2, #48	@ 0x30
 8006558:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 800655a:	193b      	adds	r3, r7, r4
 800655c:	2203      	movs	r2, #3
 800655e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006560:	193b      	adds	r3, r7, r4
 8006562:	2200      	movs	r2, #0
 8006564:	609a      	str	r2, [r3, #8]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006566:	193b      	adds	r3, r7, r4
 8006568:	4a06      	ldr	r2, [pc, #24]	@ (8006584 <HAL_ADC_MspInit+0x78>)
 800656a:	0019      	movs	r1, r3
 800656c:	0010      	movs	r0, r2
 800656e:	f006 fd35 	bl	800cfdc <HAL_GPIO_Init>

  /* USER CODE BEGIN ADC1_MspInit 1 */

  /* USER CODE END ADC1_MspInit 1 */
  }
}
 8006572:	46c0      	nop			@ (mov r8, r8)
 8006574:	46bd      	mov	sp, r7
 8006576:	b009      	add	sp, #36	@ 0x24
 8006578:	bd90      	pop	{r4, r7, pc}
 800657a:	46c0      	nop			@ (mov r8, r8)
 800657c:	40012400 	.word	0x40012400
 8006580:	40021000 	.word	0x40021000
 8006584:	50000800 	.word	0x50000800

08006588 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
void MX_DMA_Init(void)
{
 8006588:	b580      	push	{r7, lr}
 800658a:	b082      	sub	sp, #8
 800658c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800658e:	4b10      	ldr	r3, [pc, #64]	@ (80065d0 <MX_DMA_Init+0x48>)
 8006590:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8006592:	4b0f      	ldr	r3, [pc, #60]	@ (80065d0 <MX_DMA_Init+0x48>)
 8006594:	2101      	movs	r1, #1
 8006596:	430a      	orrs	r2, r1
 8006598:	631a      	str	r2, [r3, #48]	@ 0x30
 800659a:	4b0d      	ldr	r3, [pc, #52]	@ (80065d0 <MX_DMA_Init+0x48>)
 800659c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800659e:	2201      	movs	r2, #1
 80065a0:	4013      	ands	r3, r2
 80065a2:	607b      	str	r3, [r7, #4]
 80065a4:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Channel2_3_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel2_3_IRQn, 0, 0);
 80065a6:	2200      	movs	r2, #0
 80065a8:	2100      	movs	r1, #0
 80065aa:	200a      	movs	r0, #10
 80065ac:	f006 f8c8 	bl	800c740 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel2_3_IRQn);
 80065b0:	200a      	movs	r0, #10
 80065b2:	f006 f8da 	bl	800c76a <HAL_NVIC_EnableIRQ>
  /* DMA1_Channel4_5_6_7_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Channel4_5_6_7_IRQn, 3, 0);
 80065b6:	2200      	movs	r2, #0
 80065b8:	2103      	movs	r1, #3
 80065ba:	200b      	movs	r0, #11
 80065bc:	f006 f8c0 	bl	800c740 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Channel4_5_6_7_IRQn);
 80065c0:	200b      	movs	r0, #11
 80065c2:	f006 f8d2 	bl	800c76a <HAL_NVIC_EnableIRQ>

}
 80065c6:	46c0      	nop			@ (mov r8, r8)
 80065c8:	46bd      	mov	sp, r7
 80065ca:	b002      	add	sp, #8
 80065cc:	bd80      	pop	{r7, pc}
 80065ce:	46c0      	nop			@ (mov r8, r8)
 80065d0:	40021000 	.word	0x40021000

080065d4 <accessLUT10log10>:


// Obtain the value from the lookup table (LUT) and convert it to
// integer and fractional parts:
static void accessLUT10log10(uint32_t index, uint32_t * intPart, uint32_t * fracPart)
{
 80065d4:	b580      	push	{r7, lr}
 80065d6:	b086      	sub	sp, #24
 80065d8:	af00      	add	r7, sp, #0
 80065da:	60f8      	str	r0, [r7, #12]
 80065dc:	60b9      	str	r1, [r7, #8]
 80065de:	607a      	str	r2, [r7, #4]
    if (index >= LUT_10LOG10_LENGTH)
 80065e0:	68fb      	ldr	r3, [r7, #12]
 80065e2:	2b7f      	cmp	r3, #127	@ 0x7f
 80065e4:	d901      	bls.n	80065ea <accessLUT10log10+0x16>
    {
        index = LUT_10LOG10_LENGTH - 1;
 80065e6:	237f      	movs	r3, #127	@ 0x7f
 80065e8:	60fb      	str	r3, [r7, #12]
    }
    uint8_t x = LUT10log10[index];
 80065ea:	2017      	movs	r0, #23
 80065ec:	183b      	adds	r3, r7, r0
 80065ee:	490d      	ldr	r1, [pc, #52]	@ (8006624 <accessLUT10log10+0x50>)
 80065f0:	68fa      	ldr	r2, [r7, #12]
 80065f2:	188a      	adds	r2, r1, r2
 80065f4:	7812      	ldrb	r2, [r2, #0]
 80065f6:	701a      	strb	r2, [r3, #0]
    intPart[0] = (uint32_t) (x >> fracPartLSBs);
 80065f8:	0001      	movs	r1, r0
 80065fa:	187b      	adds	r3, r7, r1
 80065fc:	781b      	ldrb	r3, [r3, #0]
 80065fe:	2206      	movs	r2, #6
 8006600:	4113      	asrs	r3, r2
 8006602:	001a      	movs	r2, r3
 8006604:	68bb      	ldr	r3, [r7, #8]
 8006606:	601a      	str	r2, [r3, #0]
    fracPart[0] = ((uint32_t) x) - (intPart[0] << fracPartLSBs);
 8006608:	187b      	adds	r3, r7, r1
 800660a:	781a      	ldrb	r2, [r3, #0]
 800660c:	68bb      	ldr	r3, [r7, #8]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	2106      	movs	r1, #6
 8006612:	408b      	lsls	r3, r1
 8006614:	1ad2      	subs	r2, r2, r3
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	601a      	str	r2, [r3, #0]
}
 800661a:	46c0      	nop			@ (mov r8, r8)
 800661c:	46bd      	mov	sp, r7
 800661e:	b006      	add	sp, #24
 8006620:	bd80      	pop	{r7, pc}
 8006622:	46c0      	nop			@ (mov r8, r8)
 8006624:	08020860 	.word	0x08020860

08006628 <efficient10log10>:

// Calculate 10*log10(P), returning the result as an integer part
// and a 1-decimal-place fractional part.
// i.e. result = integerPart + (fractionalPart/10);
void efficient10log10(uint64_t P, int32_t * integerPart, int32_t * fractionalPart)
{
 8006628:	b5b0      	push	{r4, r5, r7, lr}
 800662a:	b090      	sub	sp, #64	@ 0x40
 800662c:	af00      	add	r7, sp, #0
 800662e:	6138      	str	r0, [r7, #16]
 8006630:	6179      	str	r1, [r7, #20]
 8006632:	60fa      	str	r2, [r7, #12]
 8006634:	60bb      	str	r3, [r7, #8]
    // NOTE: the CLZ (count leading zeros) instruction is not available on M0/M0+
    // so use a simple shifting algorithm:
    uint64_t limit = (((uint64_t) 1) << mantissa_kBits) - 1; // limit = ((2^kBits)-1)
 8006636:	2308      	movs	r3, #8
 8006638:	001a      	movs	r2, r3
 800663a:	3a20      	subs	r2, #32
 800663c:	2a00      	cmp	r2, #0
 800663e:	db03      	blt.n	8006648 <efficient10log10+0x20>
 8006640:	2101      	movs	r1, #1
 8006642:	4091      	lsls	r1, r2
 8006644:	000d      	movs	r5, r1
 8006646:	e008      	b.n	800665a <efficient10log10+0x32>
 8006648:	2220      	movs	r2, #32
 800664a:	1ad2      	subs	r2, r2, r3
 800664c:	2101      	movs	r1, #1
 800664e:	40d1      	lsrs	r1, r2
 8006650:	000a      	movs	r2, r1
 8006652:	2100      	movs	r1, #0
 8006654:	4099      	lsls	r1, r3
 8006656:	000d      	movs	r5, r1
 8006658:	4315      	orrs	r5, r2
 800665a:	2201      	movs	r2, #1
 800665c:	409a      	lsls	r2, r3
 800665e:	0014      	movs	r4, r2
 8006660:	2201      	movs	r2, #1
 8006662:	4252      	negs	r2, r2
 8006664:	17d3      	asrs	r3, r2, #31
 8006666:	1912      	adds	r2, r2, r4
 8006668:	416b      	adcs	r3, r5
 800666a:	633a      	str	r2, [r7, #48]	@ 0x30
 800666c:	637b      	str	r3, [r7, #52]	@ 0x34
    // Bit-shift P downwards until the remaining mantissa is a
    // "mantissa_kBits" length value
    uint16_t bShift = 0;
 800666e:	2336      	movs	r3, #54	@ 0x36
 8006670:	2208      	movs	r2, #8
 8006672:	189b      	adds	r3, r3, r2
 8006674:	19db      	adds	r3, r3, r7
 8006676:	2200      	movs	r2, #0
 8006678:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 800667a:	e017      	b.n	80066ac <efficient10log10+0x84>
    {
        P = P >> 1;
 800667c:	697b      	ldr	r3, [r7, #20]
 800667e:	07db      	lsls	r3, r3, #31
 8006680:	693a      	ldr	r2, [r7, #16]
 8006682:	0852      	lsrs	r2, r2, #1
 8006684:	603a      	str	r2, [r7, #0]
 8006686:	683a      	ldr	r2, [r7, #0]
 8006688:	431a      	orrs	r2, r3
 800668a:	603a      	str	r2, [r7, #0]
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	085b      	lsrs	r3, r3, #1
 8006690:	607b      	str	r3, [r7, #4]
 8006692:	683b      	ldr	r3, [r7, #0]
 8006694:	687c      	ldr	r4, [r7, #4]
 8006696:	613b      	str	r3, [r7, #16]
 8006698:	617c      	str	r4, [r7, #20]
        bShift++;
 800669a:	2136      	movs	r1, #54	@ 0x36
 800669c:	2008      	movs	r0, #8
 800669e:	180b      	adds	r3, r1, r0
 80066a0:	19db      	adds	r3, r3, r7
 80066a2:	881a      	ldrh	r2, [r3, #0]
 80066a4:	180b      	adds	r3, r1, r0
 80066a6:	19db      	adds	r3, r3, r7
 80066a8:	3201      	adds	r2, #1
 80066aa:	801a      	strh	r2, [r3, #0]
    while (P > limit)
 80066ac:	697a      	ldr	r2, [r7, #20]
 80066ae:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066b0:	429a      	cmp	r2, r3
 80066b2:	d8e3      	bhi.n	800667c <efficient10log10+0x54>
 80066b4:	697a      	ldr	r2, [r7, #20]
 80066b6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80066b8:	429a      	cmp	r2, r3
 80066ba:	d103      	bne.n	80066c4 <efficient10log10+0x9c>
 80066bc:	693a      	ldr	r2, [r7, #16]
 80066be:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80066c0:	429a      	cmp	r2, r3
 80066c2:	d8db      	bhi.n	800667c <efficient10log10+0x54>
    }
    // Calculate the index to the LUT:
    uint32_t ind = ((uint32_t) P) - (((uint32_t) 1) << (mantissa_kBits-1));
 80066c4:	693a      	ldr	r2, [r7, #16]
 80066c6:	2308      	movs	r3, #8
 80066c8:	3b01      	subs	r3, #1
 80066ca:	2101      	movs	r1, #1
 80066cc:	4099      	lsls	r1, r3
 80066ce:	000b      	movs	r3, r1
 80066d0:	1ad3      	subs	r3, r2, r3
 80066d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
    // Do the lookup:
    uint32_t lutIntPart = 0;
 80066d4:	2300      	movs	r3, #0
 80066d6:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t lutFracPart = 0;
 80066d8:	2300      	movs	r3, #0
 80066da:	627b      	str	r3, [r7, #36]	@ 0x24
    accessLUT10log10(ind, &lutIntPart, &lutFracPart);
 80066dc:	231c      	movs	r3, #28
 80066de:	2408      	movs	r4, #8
 80066e0:	191b      	adds	r3, r3, r4
 80066e2:	19da      	adds	r2, r3, r7
 80066e4:	2320      	movs	r3, #32
 80066e6:	191b      	adds	r3, r3, r4
 80066e8:	19d9      	adds	r1, r3, r7
 80066ea:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80066ec:	0018      	movs	r0, r3
 80066ee:	f7ff ff71 	bl	80065d4 <accessLUT10log10>
    // Provide the result as an integer and fractional part
    // (with the fractional part x10)
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 80066f2:	2215      	movs	r2, #21
 80066f4:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80066f6:	18d3      	adds	r3, r2, r3
                        + (bShift * TLT2_intPart));
 80066f8:	2036      	movs	r0, #54	@ 0x36
 80066fa:	1902      	adds	r2, r0, r4
 80066fc:	19d2      	adds	r2, r2, r7
 80066fe:	8812      	ldrh	r2, [r2, #0]
 8006700:	2103      	movs	r1, #3
 8006702:	434a      	muls	r2, r1
 8006704:	189b      	adds	r3, r3, r2
    int32_t intPart = (int32_t) (intOffset10log10 + lutIntPart
 8006706:	623b      	str	r3, [r7, #32]
    int32_t fracPart = (int32_t) (lutFracPart
                        + ((bShift * TLT2_shiftedFracPart) >> TLT2_bitshift));
 8006708:	0021      	movs	r1, r4
 800670a:	1843      	adds	r3, r0, r1
 800670c:	19db      	adds	r3, r3, r7
 800670e:	881b      	ldrh	r3, [r3, #0]
 8006710:	2201      	movs	r2, #1
 8006712:	4353      	muls	r3, r2
 8006714:	2203      	movs	r2, #3
 8006716:	4113      	asrs	r3, r2
 8006718:	001a      	movs	r2, r3
 800671a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800671c:	18d3      	adds	r3, r2, r3
    int32_t fracPart = (int32_t) (lutFracPart
 800671e:	61fb      	str	r3, [r7, #28]
    // Make a correction if fractional part is not in range 0->9:
    correctIntFracNumber(&intPart, &fracPart);
 8006720:	2314      	movs	r3, #20
 8006722:	185b      	adds	r3, r3, r1
 8006724:	19da      	adds	r2, r3, r7
 8006726:	2318      	movs	r3, #24
 8006728:	185b      	adds	r3, r3, r1
 800672a:	19db      	adds	r3, r3, r7
 800672c:	0011      	movs	r1, r2
 800672e:	0018      	movs	r0, r3
 8006730:	f000 f80a 	bl	8006748 <correctIntFracNumber>
    integerPart[0] = intPart;
 8006734:	6a3a      	ldr	r2, [r7, #32]
 8006736:	68fb      	ldr	r3, [r7, #12]
 8006738:	601a      	str	r2, [r3, #0]
    fractionalPart[0] = fracPart;
 800673a:	69fa      	ldr	r2, [r7, #28]
 800673c:	68bb      	ldr	r3, [r7, #8]
 800673e:	601a      	str	r2, [r3, #0]
}
 8006740:	46c0      	nop			@ (mov r8, r8)
 8006742:	46bd      	mov	sp, r7
 8006744:	b010      	add	sp, #64	@ 0x40
 8006746:	bdb0      	pop	{r4, r5, r7, pc}

08006748 <correctIntFracNumber>:
// 1-decimal-place fractional parts, correct the result if the fractional
// part has grown to be larger than 9.
// Valid numbers have same sign of both int and frac parts
// (or one/both parts zero) AND |fracPart| < 10
void correctIntFracNumber(int32_t * intPart, int32_t * fracPart)
{
 8006748:	b580      	push	{r7, lr}
 800674a:	b082      	sub	sp, #8
 800674c:	af00      	add	r7, sp, #0
 800674e:	6078      	str	r0, [r7, #4]
 8006750:	6039      	str	r1, [r7, #0]
    while (fracPart[0] >= 10)
 8006752:	e00a      	b.n	800676a <correctIntFracNumber+0x22>
    {
        intPart[0] = intPart[0] + 1;
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	1c5a      	adds	r2, r3, #1
 800675a:	687b      	ldr	r3, [r7, #4]
 800675c:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 800675e:	683b      	ldr	r3, [r7, #0]
 8006760:	681b      	ldr	r3, [r3, #0]
 8006762:	3b0a      	subs	r3, #10
 8006764:	001a      	movs	r2, r3
 8006766:	683b      	ldr	r3, [r7, #0]
 8006768:	601a      	str	r2, [r3, #0]
    while (fracPart[0] >= 10)
 800676a:	683b      	ldr	r3, [r7, #0]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	2b09      	cmp	r3, #9
 8006770:	dcf0      	bgt.n	8006754 <correctIntFracNumber+0xc>
    }
    while (fracPart[0] <= -10)
 8006772:	e00a      	b.n	800678a <correctIntFracNumber+0x42>
    {
        intPart[0] = intPart[0] - 1;
 8006774:	687b      	ldr	r3, [r7, #4]
 8006776:	681b      	ldr	r3, [r3, #0]
 8006778:	1e5a      	subs	r2, r3, #1
 800677a:	687b      	ldr	r3, [r7, #4]
 800677c:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 800677e:	683b      	ldr	r3, [r7, #0]
 8006780:	681b      	ldr	r3, [r3, #0]
 8006782:	330a      	adds	r3, #10
 8006784:	001a      	movs	r2, r3
 8006786:	683b      	ldr	r3, [r7, #0]
 8006788:	601a      	str	r2, [r3, #0]
    while (fracPart[0] <= -10)
 800678a:	683b      	ldr	r3, [r7, #0]
 800678c:	681b      	ldr	r3, [r3, #0]
 800678e:	3309      	adds	r3, #9
 8006790:	dbf0      	blt.n	8006774 <correctIntFracNumber+0x2c>
    }
    // now correct cases where signs are not consistent:
    if ((intPart[0] < 0) && (fracPart[0] > 0))
 8006792:	687b      	ldr	r3, [r7, #4]
 8006794:	681b      	ldr	r3, [r3, #0]
 8006796:	2b00      	cmp	r3, #0
 8006798:	da0f      	bge.n	80067ba <correctIntFracNumber+0x72>
 800679a:	683b      	ldr	r3, [r7, #0]
 800679c:	681b      	ldr	r3, [r3, #0]
 800679e:	2b00      	cmp	r3, #0
 80067a0:	dd0b      	ble.n	80067ba <correctIntFracNumber+0x72>
    {
        intPart[0] = intPart[0] + 1;
 80067a2:	687b      	ldr	r3, [r7, #4]
 80067a4:	681b      	ldr	r3, [r3, #0]
 80067a6:	1c5a      	adds	r2, r3, #1
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] - 10;
 80067ac:	683b      	ldr	r3, [r7, #0]
 80067ae:	681b      	ldr	r3, [r3, #0]
 80067b0:	3b0a      	subs	r3, #10
 80067b2:	001a      	movs	r2, r3
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	601a      	str	r2, [r3, #0]
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
    {
        intPart[0] = intPart[0] - 1;
        fracPart[0] = fracPart[0] + 10;
    }
}
 80067b8:	e012      	b.n	80067e0 <correctIntFracNumber+0x98>
    else if ((intPart[0] > 0) && (fracPart[0] < 0))
 80067ba:	687b      	ldr	r3, [r7, #4]
 80067bc:	681b      	ldr	r3, [r3, #0]
 80067be:	2b00      	cmp	r3, #0
 80067c0:	dd0e      	ble.n	80067e0 <correctIntFracNumber+0x98>
 80067c2:	683b      	ldr	r3, [r7, #0]
 80067c4:	681b      	ldr	r3, [r3, #0]
 80067c6:	2b00      	cmp	r3, #0
 80067c8:	da0a      	bge.n	80067e0 <correctIntFracNumber+0x98>
        intPart[0] = intPart[0] - 1;
 80067ca:	687b      	ldr	r3, [r7, #4]
 80067cc:	681b      	ldr	r3, [r3, #0]
 80067ce:	1e5a      	subs	r2, r3, #1
 80067d0:	687b      	ldr	r3, [r7, #4]
 80067d2:	601a      	str	r2, [r3, #0]
        fracPart[0] = fracPart[0] + 10;
 80067d4:	683b      	ldr	r3, [r7, #0]
 80067d6:	681b      	ldr	r3, [r3, #0]
 80067d8:	330a      	adds	r3, #10
 80067da:	001a      	movs	r2, r3
 80067dc:	683b      	ldr	r3, [r7, #0]
 80067de:	601a      	str	r2, [r3, #0]
}
 80067e0:	46c0      	nop			@ (mov r8, r8)
 80067e2:	46bd      	mov	sp, r7
 80067e4:	b002      	add	sp, #8
 80067e6:	bd80      	pop	{r7, pc}

080067e8 <Gadget_Init>:
//    .VOC_measurementEnabled = true,
//    .PM_measurementEnabled = false,
//    .MIC_measurementEnabled = true
//};

void Gadget_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, UART_HandleTypeDef* espUart, ADC_HandleTypeDef* ADC_HANDLER) {
 80067e8:	b580      	push	{r7, lr}
 80067ea:	b084      	sub	sp, #16
 80067ec:	af00      	add	r7, sp, #0
 80067ee:	60f8      	str	r0, [r7, #12]
 80067f0:	60b9      	str	r1, [r7, #8]
 80067f2:	607a      	str	r2, [r7, #4]
 80067f4:	603b      	str	r3, [r7, #0]
  // TODO: Add gadget re-init. So it works after sleep mode again.
  // Check battery power
  // Init sensor + peripherals
  Meas_SetEnabledSensors(SensorSetTest);
 80067f6:	4b0c      	ldr	r3, [pc, #48]	@ (8006828 <Gadget_Init+0x40>)
 80067f8:	6818      	ldr	r0, [r3, #0]
 80067fa:	f001 f9ff 	bl	8007bfc <Meas_SetEnabledSensors>
  Meas_Init(sensorI2C, micI2s, ADC_HANDLER);
 80067fe:	683a      	ldr	r2, [r7, #0]
 8006800:	68b9      	ldr	r1, [r7, #8]
 8006802:	68fb      	ldr	r3, [r7, #12]
 8006804:	0018      	movs	r0, r3
 8006806:	f000 fe71 	bl	80074ec <Meas_Init>
  // Working on ESP, disabling it now
  ESP_Init(espUart);
 800680a:	687b      	ldr	r3, [r7, #4]
 800680c:	0018      	movs	r0, r3
 800680e:	f7fd f8ad 	bl	800396c <ESP_Init>
//  Gadget_SetSleepDuration();
  Debug("Gadget initialised.");
 8006812:	4a06      	ldr	r2, [pc, #24]	@ (800682c <Gadget_Init+0x44>)
 8006814:	4b06      	ldr	r3, [pc, #24]	@ (8006830 <Gadget_Init+0x48>)
 8006816:	0019      	movs	r1, r3
 8006818:	2003      	movs	r0, #3
 800681a:	f004 ff7f 	bl	800b71c <CreateLine>
}
 800681e:	46c0      	nop			@ (mov r8, r8)
 8006820:	46bd      	mov	sp, r7
 8006822:	b004      	add	sp, #16
 8006824:	bd80      	pop	{r7, pc}
 8006826:	46c0      	nop			@ (mov r8, r8)
 8006828:	20000080 	.word	0x20000080
 800682c:	0801ff24 	.word	0x0801ff24
 8006830:	0801ff38 	.word	0x0801ff38

08006834 <Gadget_Test>:

void Gadget_ReInit(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s) {

}

void Gadget_Test(){
 8006834:	b580      	push	{r7, lr}
 8006836:	af00      	add	r7, sp, #0
  Meas_Test();
 8006838:	f000 ff90 	bl	800775c <Meas_Test>
}
 800683c:	46c0      	nop			@ (mov r8, r8)
 800683e:	46bd      	mov	sp, r7
 8006840:	bd80      	pop	{r7, pc}
	...

08006844 <UpkeepGadget>:

bool UpkeepGadget() {
 8006844:	b580      	push	{r7, lr}
 8006846:	b082      	sub	sp, #8
 8006848:	af00      	add	r7, sp, #0
   * 	Yes: create data format
   * 	Transmit data
   * 	Close connection
   * 	Disable ESP
   */
  MeasurementStatus = Meas_Upkeep();
 800684a:	f001 f947 	bl	8007adc <Meas_Upkeep>
 800684e:	0003      	movs	r3, r0
 8006850:	001a      	movs	r2, r3
 8006852:	4b0f      	ldr	r3, [pc, #60]	@ (8006890 <UpkeepGadget+0x4c>)
 8006854:	701a      	strb	r2, [r3, #0]
  MicrophoneStatus = Mic_Upkeep();
 8006856:	f001 f827 	bl	80078a8 <Mic_Upkeep>
 800685a:	0003      	movs	r3, r0
 800685c:	001a      	movs	r2, r3
 800685e:	4b0d      	ldr	r3, [pc, #52]	@ (8006894 <UpkeepGadget+0x50>)
 8006860:	701a      	strb	r2, [r3, #0]
  gadgetBusy = (MeasurementStatus != MEAS_STATE_WAIT_FOR_READY || MicrophoneStatus != MIC_STATE_WAIT);
 8006862:	4b0b      	ldr	r3, [pc, #44]	@ (8006890 <UpkeepGadget+0x4c>)
 8006864:	781b      	ldrb	r3, [r3, #0]
 8006866:	2b04      	cmp	r3, #4
 8006868:	d103      	bne.n	8006872 <UpkeepGadget+0x2e>
 800686a:	4b0a      	ldr	r3, [pc, #40]	@ (8006894 <UpkeepGadget+0x50>)
 800686c:	781b      	ldrb	r3, [r3, #0]
 800686e:	2b03      	cmp	r3, #3
 8006870:	d001      	beq.n	8006876 <UpkeepGadget+0x32>
 8006872:	2201      	movs	r2, #1
 8006874:	e000      	b.n	8006878 <UpkeepGadget+0x34>
 8006876:	2200      	movs	r2, #0
 8006878:	1dfb      	adds	r3, r7, #7
 800687a:	701a      	strb	r2, [r3, #0]
 800687c:	781a      	ldrb	r2, [r3, #0]
 800687e:	2101      	movs	r1, #1
 8006880:	400a      	ands	r2, r1
 8006882:	701a      	strb	r2, [r3, #0]
  return gadgetBusy;
 8006884:	1dfb      	adds	r3, r7, #7
 8006886:	781b      	ldrb	r3, [r3, #0]
//  }
//  if(Battery) {
//    Meas_SetEnabledSensors(SensorSetBatt);
//  }

}
 8006888:	0018      	movs	r0, r3
 800688a:	46bd      	mov	sp, r7
 800688c:	b002      	add	sp, #8
 800688e:	bd80      	pop	{r7, pc}
 8006890:	20000d18 	.word	0x20000d18
 8006894:	20000d19 	.word	0x20000d19

08006898 <Gas_Init>:

#include "gasSensor.h"
#include "stm32l0xx_it.h"
#include "utils.h"

void Gas_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8006898:	b580      	push	{r7, lr}
 800689a:	b082      	sub	sp, #8
 800689c:	af00      	add	r7, sp, #0
 800689e:	6078      	str	r0, [r7, #4]
 80068a0:	6039      	str	r1, [r7, #0]
  SGP_Init(readFunction, writeFunction);
 80068a2:	683a      	ldr	r2, [r7, #0]
 80068a4:	687b      	ldr	r3, [r7, #4]
 80068a6:	0011      	movs	r1, r2
 80068a8:	0018      	movs	r0, r3
 80068aa:	f002 fb1f 	bl	8008eec <SGP_Init>
}
 80068ae:	46c0      	nop			@ (mov r8, r8)
 80068b0:	46bd      	mov	sp, r7
 80068b2:	b002      	add	sp, #8
 80068b4:	bd80      	pop	{r7, pc}

080068b6 <Gas_StartMeasurement>:

void Gas_StartMeasurement(void){
 80068b6:	b580      	push	{r7, lr}
 80068b8:	af00      	add	r7, sp, #0
  SGP_StartMeasurement();
 80068ba:	f002 fb31 	bl	8008f20 <SGP_StartMeasurement>
}
 80068be:	46c0      	nop			@ (mov r8, r8)
 80068c0:	46bd      	mov	sp, r7
 80068c2:	bd80      	pop	{r7, pc}

080068c4 <Gas_GetMeasurementValues>:

bool Gas_GetMeasurementValues(int32_t* vocIndex) {
 80068c4:	b580      	push	{r7, lr}
 80068c6:	b082      	sub	sp, #8
 80068c8:	af00      	add	r7, sp, #0
 80068ca:	6078      	str	r0, [r7, #4]
  return SGP_GetMeasurementValues(vocIndex);
 80068cc:	687b      	ldr	r3, [r7, #4]
 80068ce:	0018      	movs	r0, r3
 80068d0:	f002 fb96 	bl	8009000 <SGP_GetMeasurementValues>
 80068d4:	0003      	movs	r3, r0
}
 80068d6:	0018      	movs	r0, r3
 80068d8:	46bd      	mov	sp, r7
 80068da:	b002      	add	sp, #8
 80068dc:	bd80      	pop	{r7, pc}

080068de <Gas_DeviceConnected>:

bool Gas_DeviceConnected(void) {
 80068de:	b580      	push	{r7, lr}
 80068e0:	af00      	add	r7, sp, #0
  return SGP_DeviceConnected();
 80068e2:	f002 fda3 	bl	800942c <SGP_DeviceConnected>
 80068e6:	0003      	movs	r3, r0
}
 80068e8:	0018      	movs	r0, r3
 80068ea:	46bd      	mov	sp, r7
 80068ec:	bd80      	pop	{r7, pc}
	...

080068f0 <MX_GPIO_Init>:
        * EXTI
        * Free pins are configured automatically as Analog (this feature is enabled through
        * the Code Generation settings)
*/
void MX_GPIO_Init(void)
{
 80068f0:	b590      	push	{r4, r7, lr}
 80068f2:	b08b      	sub	sp, #44	@ 0x2c
 80068f4:	af00      	add	r7, sp, #0

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80068f6:	2414      	movs	r4, #20
 80068f8:	193b      	adds	r3, r7, r4
 80068fa:	0018      	movs	r0, r3
 80068fc:	2314      	movs	r3, #20
 80068fe:	001a      	movs	r2, r3
 8006900:	2100      	movs	r1, #0
 8006902:	f015 fdd9 	bl	801c4b8 <memset>

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 8006906:	4b7c      	ldr	r3, [pc, #496]	@ (8006af8 <MX_GPIO_Init+0x208>)
 8006908:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800690a:	4b7b      	ldr	r3, [pc, #492]	@ (8006af8 <MX_GPIO_Init+0x208>)
 800690c:	2104      	movs	r1, #4
 800690e:	430a      	orrs	r2, r1
 8006910:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006912:	4b79      	ldr	r3, [pc, #484]	@ (8006af8 <MX_GPIO_Init+0x208>)
 8006914:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006916:	2204      	movs	r2, #4
 8006918:	4013      	ands	r3, r2
 800691a:	613b      	str	r3, [r7, #16]
 800691c:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 800691e:	4b76      	ldr	r3, [pc, #472]	@ (8006af8 <MX_GPIO_Init+0x208>)
 8006920:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006922:	4b75      	ldr	r3, [pc, #468]	@ (8006af8 <MX_GPIO_Init+0x208>)
 8006924:	2180      	movs	r1, #128	@ 0x80
 8006926:	430a      	orrs	r2, r1
 8006928:	62da      	str	r2, [r3, #44]	@ 0x2c
 800692a:	4b73      	ldr	r3, [pc, #460]	@ (8006af8 <MX_GPIO_Init+0x208>)
 800692c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800692e:	2280      	movs	r2, #128	@ 0x80
 8006930:	4013      	ands	r3, r2
 8006932:	60fb      	str	r3, [r7, #12]
 8006934:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8006936:	4b70      	ldr	r3, [pc, #448]	@ (8006af8 <MX_GPIO_Init+0x208>)
 8006938:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800693a:	4b6f      	ldr	r3, [pc, #444]	@ (8006af8 <MX_GPIO_Init+0x208>)
 800693c:	2101      	movs	r1, #1
 800693e:	430a      	orrs	r2, r1
 8006940:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006942:	4b6d      	ldr	r3, [pc, #436]	@ (8006af8 <MX_GPIO_Init+0x208>)
 8006944:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006946:	2201      	movs	r2, #1
 8006948:	4013      	ands	r3, r2
 800694a:	60bb      	str	r3, [r7, #8]
 800694c:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800694e:	4b6a      	ldr	r3, [pc, #424]	@ (8006af8 <MX_GPIO_Init+0x208>)
 8006950:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006952:	4b69      	ldr	r3, [pc, #420]	@ (8006af8 <MX_GPIO_Init+0x208>)
 8006954:	2102      	movs	r1, #2
 8006956:	430a      	orrs	r2, r1
 8006958:	62da      	str	r2, [r3, #44]	@ 0x2c
 800695a:	4b67      	ldr	r3, [pc, #412]	@ (8006af8 <MX_GPIO_Init+0x208>)
 800695c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800695e:	2202      	movs	r2, #2
 8006960:	4013      	ands	r3, r2
 8006962:	607b      	str	r3, [r7, #4]
 8006964:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_GPIOD_CLK_ENABLE();
 8006966:	4b64      	ldr	r3, [pc, #400]	@ (8006af8 <MX_GPIO_Init+0x208>)
 8006968:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800696a:	4b63      	ldr	r3, [pc, #396]	@ (8006af8 <MX_GPIO_Init+0x208>)
 800696c:	2108      	movs	r1, #8
 800696e:	430a      	orrs	r2, r1
 8006970:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006972:	4b61      	ldr	r3, [pc, #388]	@ (8006af8 <MX_GPIO_Init+0x208>)
 8006974:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006976:	2208      	movs	r2, #8
 8006978:	4013      	ands	r3, r2
 800697a:	603b      	str	r3, [r7, #0]
 800697c:	683b      	ldr	r3, [r7, #0]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_EN_GPIO_Port, ESP32_EN_Pin, GPIO_PIN_SET);
 800697e:	4b5f      	ldr	r3, [pc, #380]	@ (8006afc <MX_GPIO_Init+0x20c>)
 8006980:	2201      	movs	r2, #1
 8006982:	2101      	movs	r1, #1
 8006984:	0018      	movs	r0, r3
 8006986:	f006 fcc4 	bl	800d312 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(ESP32_BOOT_GPIO_Port, ESP32_BOOT_Pin, GPIO_PIN_RESET);
 800698a:	4b5c      	ldr	r3, [pc, #368]	@ (8006afc <MX_GPIO_Init+0x20c>)
 800698c:	2200      	movs	r2, #0
 800698e:	2102      	movs	r1, #2
 8006990:	0018      	movs	r0, r3
 8006992:	f006 fcbe 	bl	800d312 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin, GPIO_PIN_SET);
 8006996:	495a      	ldr	r1, [pc, #360]	@ (8006b00 <MX_GPIO_Init+0x210>)
 8006998:	4b5a      	ldr	r3, [pc, #360]	@ (8006b04 <MX_GPIO_Init+0x214>)
 800699a:	2201      	movs	r2, #1
 800699c:	0018      	movs	r0, r3
 800699e:	f006 fcb8 	bl	800d312 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Wireless_PSU_EN_GPIO_Port, Wireless_PSU_EN_Pin, GPIO_PIN_SET);
 80069a2:	2380      	movs	r3, #128	@ 0x80
 80069a4:	011b      	lsls	r3, r3, #4
 80069a6:	4858      	ldr	r0, [pc, #352]	@ (8006b08 <MX_GPIO_Init+0x218>)
 80069a8:	2201      	movs	r2, #1
 80069aa:	0019      	movs	r1, r3
 80069ac:	f006 fcb1 	bl	800d312 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(Boost_Enable_GPIO_Port, Boost_Enable_Pin, GPIO_PIN_RESET);
 80069b0:	2380      	movs	r3, #128	@ 0x80
 80069b2:	015b      	lsls	r3, r3, #5
 80069b4:	4854      	ldr	r0, [pc, #336]	@ (8006b08 <MX_GPIO_Init+0x218>)
 80069b6:	2200      	movs	r2, #0
 80069b8:	0019      	movs	r1, r3
 80069ba:	f006 fcaa 	bl	800d312 <HAL_GPIO_WritePin>

  /*Configure GPIO pins : PC13 PC2 PC3 */
  GPIO_InitStruct.Pin = GPIO_PIN_13|GPIO_PIN_2|GPIO_PIN_3;
 80069be:	193b      	adds	r3, r7, r4
 80069c0:	4a52      	ldr	r2, [pc, #328]	@ (8006b0c <MX_GPIO_Init+0x21c>)
 80069c2:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 80069c4:	193b      	adds	r3, r7, r4
 80069c6:	2203      	movs	r2, #3
 80069c8:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069ca:	193b      	adds	r3, r7, r4
 80069cc:	2200      	movs	r2, #0
 80069ce:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 80069d0:	193b      	adds	r3, r7, r4
 80069d2:	4a4d      	ldr	r2, [pc, #308]	@ (8006b08 <MX_GPIO_Init+0x218>)
 80069d4:	0019      	movs	r1, r3
 80069d6:	0010      	movs	r0, r2
 80069d8:	f006 fb00 	bl	800cfdc <HAL_GPIO_Init>

  /*Configure GPIO pins : PHPin PHPin */
  GPIO_InitStruct.Pin = ESP32_EN_Pin|ESP32_BOOT_Pin;
 80069dc:	193b      	adds	r3, r7, r4
 80069de:	2203      	movs	r2, #3
 80069e0:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80069e2:	193b      	adds	r3, r7, r4
 80069e4:	2201      	movs	r2, #1
 80069e6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80069e8:	193b      	adds	r3, r7, r4
 80069ea:	2200      	movs	r2, #0
 80069ec:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80069ee:	193b      	adds	r3, r7, r4
 80069f0:	2200      	movs	r2, #0
 80069f2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOH, &GPIO_InitStruct);
 80069f4:	193b      	adds	r3, r7, r4
 80069f6:	4a41      	ldr	r2, [pc, #260]	@ (8006afc <MX_GPIO_Init+0x20c>)
 80069f8:	0019      	movs	r1, r3
 80069fa:	0010      	movs	r0, r2
 80069fc:	f006 faee 	bl	800cfdc <HAL_GPIO_Init>

  /*Configure GPIO pins : PA4 PA5 PA6 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5|GPIO_PIN_6;
 8006a00:	193b      	adds	r3, r7, r4
 8006a02:	2270      	movs	r2, #112	@ 0x70
 8006a04:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006a06:	193b      	adds	r3, r7, r4
 8006a08:	2203      	movs	r2, #3
 8006a0a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a0c:	193b      	adds	r3, r7, r4
 8006a0e:	2200      	movs	r2, #0
 8006a10:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a12:	193a      	adds	r2, r7, r4
 8006a14:	23a0      	movs	r3, #160	@ 0xa0
 8006a16:	05db      	lsls	r3, r3, #23
 8006a18:	0011      	movs	r1, r2
 8006a1a:	0018      	movs	r0, r3
 8006a1c:	f006 fade 	bl	800cfdc <HAL_GPIO_Init>

  /*Configure GPIO pins : PAPin PAPin PAPin */
  GPIO_InitStruct.Pin = VusbDetect_Pin|Wireless_PSU_PG_Pin|BOOT0_Pin;
 8006a20:	193b      	adds	r3, r7, r4
 8006a22:	4a3b      	ldr	r2, [pc, #236]	@ (8006b10 <MX_GPIO_Init+0x220>)
 8006a24:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006a26:	193b      	adds	r3, r7, r4
 8006a28:	2200      	movs	r2, #0
 8006a2a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a2c:	193b      	adds	r3, r7, r4
 8006a2e:	2200      	movs	r2, #0
 8006a30:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8006a32:	193a      	adds	r2, r7, r4
 8006a34:	23a0      	movs	r3, #160	@ 0xa0
 8006a36:	05db      	lsls	r3, r3, #23
 8006a38:	0011      	movs	r1, r2
 8006a3a:	0018      	movs	r0, r3
 8006a3c:	f006 face 	bl	800cfdc <HAL_GPIO_Init>

  /*Configure GPIO pins : PBPin PBPin PBPin */
  GPIO_InitStruct.Pin = MCU_LED_C_R_Pin|MCU_LED_C_G_Pin|MCU_LED_C_B_Pin;
 8006a40:	193b      	adds	r3, r7, r4
 8006a42:	4a2f      	ldr	r2, [pc, #188]	@ (8006b00 <MX_GPIO_Init+0x210>)
 8006a44:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006a46:	193b      	adds	r3, r7, r4
 8006a48:	2201      	movs	r2, #1
 8006a4a:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a4c:	193b      	adds	r3, r7, r4
 8006a4e:	2200      	movs	r2, #0
 8006a50:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006a52:	193b      	adds	r3, r7, r4
 8006a54:	2200      	movs	r2, #0
 8006a56:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006a58:	193b      	adds	r3, r7, r4
 8006a5a:	4a2a      	ldr	r2, [pc, #168]	@ (8006b04 <MX_GPIO_Init+0x214>)
 8006a5c:	0019      	movs	r1, r3
 8006a5e:	0010      	movs	r0, r2
 8006a60:	f006 fabc 	bl	800cfdc <HAL_GPIO_Init>

  /*Configure GPIO pins : PB1 PB2 PB14 PB3
                           PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_1|GPIO_PIN_2|GPIO_PIN_14|GPIO_PIN_3
 8006a64:	193b      	adds	r3, r7, r4
 8006a66:	4a2b      	ldr	r2, [pc, #172]	@ (8006b14 <MX_GPIO_Init+0x224>)
 8006a68:	601a      	str	r2, [r3, #0]
                          |GPIO_PIN_4|GPIO_PIN_5;
  GPIO_InitStruct.Mode = GPIO_MODE_ANALOG;
 8006a6a:	193b      	adds	r3, r7, r4
 8006a6c:	2203      	movs	r2, #3
 8006a6e:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a70:	193b      	adds	r3, r7, r4
 8006a72:	2200      	movs	r2, #0
 8006a74:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006a76:	193b      	adds	r3, r7, r4
 8006a78:	4a22      	ldr	r2, [pc, #136]	@ (8006b04 <MX_GPIO_Init+0x214>)
 8006a7a:	0019      	movs	r1, r3
 8006a7c:	0010      	movs	r0, r2
 8006a7e:	f006 faad 	bl	800cfdc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = Charger_status_Pin;
 8006a82:	0021      	movs	r1, r4
 8006a84:	187b      	adds	r3, r7, r1
 8006a86:	2280      	movs	r2, #128	@ 0x80
 8006a88:	0092      	lsls	r2, r2, #2
 8006a8a:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006a8c:	000c      	movs	r4, r1
 8006a8e:	193b      	adds	r3, r7, r4
 8006a90:	2200      	movs	r2, #0
 8006a92:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006a94:	193b      	adds	r3, r7, r4
 8006a96:	2200      	movs	r2, #0
 8006a98:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(Charger_status_GPIO_Port, &GPIO_InitStruct);
 8006a9a:	193b      	adds	r3, r7, r4
 8006a9c:	4a1a      	ldr	r2, [pc, #104]	@ (8006b08 <MX_GPIO_Init+0x218>)
 8006a9e:	0019      	movs	r1, r3
 8006aa0:	0010      	movs	r0, r2
 8006aa2:	f006 fa9b 	bl	800cfdc <HAL_GPIO_Init>

  /*Configure GPIO pins : PCPin PCPin */
  GPIO_InitStruct.Pin = Wireless_PSU_EN_Pin|Boost_Enable_Pin;
 8006aa6:	0021      	movs	r1, r4
 8006aa8:	187b      	adds	r3, r7, r1
 8006aaa:	22c0      	movs	r2, #192	@ 0xc0
 8006aac:	0152      	lsls	r2, r2, #5
 8006aae:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8006ab0:	000c      	movs	r4, r1
 8006ab2:	193b      	adds	r3, r7, r4
 8006ab4:	2201      	movs	r2, #1
 8006ab6:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006ab8:	193b      	adds	r3, r7, r4
 8006aba:	2200      	movs	r2, #0
 8006abc:	609a      	str	r2, [r3, #8]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006abe:	193b      	adds	r3, r7, r4
 8006ac0:	2200      	movs	r2, #0
 8006ac2:	60da      	str	r2, [r3, #12]
  HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8006ac4:	193b      	adds	r3, r7, r4
 8006ac6:	4a10      	ldr	r2, [pc, #64]	@ (8006b08 <MX_GPIO_Init+0x218>)
 8006ac8:	0019      	movs	r1, r3
 8006aca:	0010      	movs	r0, r2
 8006acc:	f006 fa86 	bl	800cfdc <HAL_GPIO_Init>

  /*Configure GPIO pin : PtPin */
  GPIO_InitStruct.Pin = User_Button_Pin;
 8006ad0:	0021      	movs	r1, r4
 8006ad2:	187b      	adds	r3, r7, r1
 8006ad4:	2204      	movs	r2, #4
 8006ad6:	601a      	str	r2, [r3, #0]
  GPIO_InitStruct.Mode = GPIO_MODE_INPUT;
 8006ad8:	187b      	adds	r3, r7, r1
 8006ada:	2200      	movs	r2, #0
 8006adc:	605a      	str	r2, [r3, #4]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8006ade:	187b      	adds	r3, r7, r1
 8006ae0:	2201      	movs	r2, #1
 8006ae2:	609a      	str	r2, [r3, #8]
  HAL_GPIO_Init(User_Button_GPIO_Port, &GPIO_InitStruct);
 8006ae4:	187b      	adds	r3, r7, r1
 8006ae6:	4a0c      	ldr	r2, [pc, #48]	@ (8006b18 <MX_GPIO_Init+0x228>)
 8006ae8:	0019      	movs	r1, r3
 8006aea:	0010      	movs	r0, r2
 8006aec:	f006 fa76 	bl	800cfdc <HAL_GPIO_Init>

}
 8006af0:	46c0      	nop			@ (mov r8, r8)
 8006af2:	46bd      	mov	sp, r7
 8006af4:	b00b      	add	sp, #44	@ 0x2c
 8006af6:	bd90      	pop	{r4, r7, pc}
 8006af8:	40021000 	.word	0x40021000
 8006afc:	50001c00 	.word	0x50001c00
 8006b00:	00000301 	.word	0x00000301
 8006b04:	50000400 	.word	0x50000400
 8006b08:	50000800 	.word	0x50000800
 8006b0c:	0000200c 	.word	0x0000200c
 8006b10:	00008180 	.word	0x00008180
 8006b14:	0000403e 	.word	0x0000403e
 8006b18:	50000c00 	.word	0x50000c00

08006b1c <GPIO_InitPWMLEDs>:

/* USER CODE BEGIN 2 */
void GPIO_InitPWMLEDs(TIM_HandleTypeDef* timer2, TIM_HandleTypeDef* timer3) {
 8006b1c:	b580      	push	{r7, lr}
 8006b1e:	b082      	sub	sp, #8
 8006b20:	af00      	add	r7, sp, #0
 8006b22:	6078      	str	r0, [r7, #4]
 8006b24:	6039      	str	r1, [r7, #0]
  // Timer 2 PWM init
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_1);
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	2100      	movs	r1, #0
 8006b2a:	0018      	movs	r0, r3
 8006b2c:	f00c f9d8 	bl	8012ee0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_3);
 8006b30:	687b      	ldr	r3, [r7, #4]
 8006b32:	2108      	movs	r1, #8
 8006b34:	0018      	movs	r0, r3
 8006b36:	f00c f9d3 	bl	8012ee0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer2, TIM_CHANNEL_4);
 8006b3a:	687b      	ldr	r3, [r7, #4]
 8006b3c:	210c      	movs	r1, #12
 8006b3e:	0018      	movs	r0, r3
 8006b40:	f00c f9ce 	bl	8012ee0 <HAL_TIM_PWM_Start>
  TIM2 -> ARR = 4000;
 8006b44:	2380      	movs	r3, #128	@ 0x80
 8006b46:	05db      	lsls	r3, r3, #23
 8006b48:	22fa      	movs	r2, #250	@ 0xfa
 8006b4a:	0112      	lsls	r2, r2, #4
 8006b4c:	62da      	str	r2, [r3, #44]	@ 0x2c

  // Resetting the LEDs.
  // CCR1 = Red, CCR3 = Green, CCR4 = Blue.
  TIM2 -> CCR1 = 4000;
 8006b4e:	2380      	movs	r3, #128	@ 0x80
 8006b50:	05db      	lsls	r3, r3, #23
 8006b52:	22fa      	movs	r2, #250	@ 0xfa
 8006b54:	0112      	lsls	r2, r2, #4
 8006b56:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM2 -> CCR3 = 4000;
 8006b58:	2380      	movs	r3, #128	@ 0x80
 8006b5a:	05db      	lsls	r3, r3, #23
 8006b5c:	22fa      	movs	r2, #250	@ 0xfa
 8006b5e:	0112      	lsls	r2, r2, #4
 8006b60:	63da      	str	r2, [r3, #60]	@ 0x3c
  TIM2 -> CCR4 = 4000;
 8006b62:	2380      	movs	r3, #128	@ 0x80
 8006b64:	05db      	lsls	r3, r3, #23
 8006b66:	22fa      	movs	r2, #250	@ 0xfa
 8006b68:	0112      	lsls	r2, r2, #4
 8006b6a:	641a      	str	r2, [r3, #64]	@ 0x40

  // Timer 3 PWM init
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_1);
 8006b6c:	683b      	ldr	r3, [r7, #0]
 8006b6e:	2100      	movs	r1, #0
 8006b70:	0018      	movs	r0, r3
 8006b72:	f00c f9b5 	bl	8012ee0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_2);
 8006b76:	683b      	ldr	r3, [r7, #0]
 8006b78:	2104      	movs	r1, #4
 8006b7a:	0018      	movs	r0, r3
 8006b7c:	f00c f9b0 	bl	8012ee0 <HAL_TIM_PWM_Start>
  HAL_TIM_PWM_Start(timer3, TIM_CHANNEL_3);
 8006b80:	683b      	ldr	r3, [r7, #0]
 8006b82:	2108      	movs	r1, #8
 8006b84:	0018      	movs	r0, r3
 8006b86:	f00c f9ab 	bl	8012ee0 <HAL_TIM_PWM_Start>
  TIM3 -> ARR = 4000;
 8006b8a:	4b0a      	ldr	r3, [pc, #40]	@ (8006bb4 <GPIO_InitPWMLEDs+0x98>)
 8006b8c:	22fa      	movs	r2, #250	@ 0xfa
 8006b8e:	0112      	lsls	r2, r2, #4
 8006b90:	62da      	str	r2, [r3, #44]	@ 0x2c

  // CCR1 = Red, CCR2 = Green, CCR3 = Blue.
  TIM3 -> CCR1 = 4000;
 8006b92:	4b08      	ldr	r3, [pc, #32]	@ (8006bb4 <GPIO_InitPWMLEDs+0x98>)
 8006b94:	22fa      	movs	r2, #250	@ 0xfa
 8006b96:	0112      	lsls	r2, r2, #4
 8006b98:	635a      	str	r2, [r3, #52]	@ 0x34
  TIM3 -> CCR2 = 4000;
 8006b9a:	4b06      	ldr	r3, [pc, #24]	@ (8006bb4 <GPIO_InitPWMLEDs+0x98>)
 8006b9c:	22fa      	movs	r2, #250	@ 0xfa
 8006b9e:	0112      	lsls	r2, r2, #4
 8006ba0:	639a      	str	r2, [r3, #56]	@ 0x38
  TIM3 -> CCR3 = 4000;
 8006ba2:	4b04      	ldr	r3, [pc, #16]	@ (8006bb4 <GPIO_InitPWMLEDs+0x98>)
 8006ba4:	22fa      	movs	r2, #250	@ 0xfa
 8006ba6:	0112      	lsls	r2, r2, #4
 8006ba8:	63da      	str	r2, [r3, #60]	@ 0x3c
}
 8006baa:	46c0      	nop			@ (mov r8, r8)
 8006bac:	46bd      	mov	sp, r7
 8006bae:	b002      	add	sp, #8
 8006bb0:	bd80      	pop	{r7, pc}
 8006bb2:	46c0      	nop			@ (mov r8, r8)
 8006bb4:	40000400 	.word	0x40000400

08006bb8 <HT_Init>:
#include <stdlib.h>
#include "humidTemp.h"
#include "utils.h"
#include "wsenHIDS.h"

void HT_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8006bb8:	b580      	push	{r7, lr}
 8006bba:	b082      	sub	sp, #8
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
 8006bc0:	6039      	str	r1, [r7, #0]
  HIDS_Init(readFunction, writeFunction);
 8006bc2:	683a      	ldr	r2, [r7, #0]
 8006bc4:	687b      	ldr	r3, [r7, #4]
 8006bc6:	0011      	movs	r1, r2
 8006bc8:	0018      	movs	r0, r3
 8006bca:	f004 ff07 	bl	800b9dc <HIDS_Init>
}
 8006bce:	46c0      	nop			@ (mov r8, r8)
 8006bd0:	46bd      	mov	sp, r7
 8006bd2:	b002      	add	sp, #8
 8006bd4:	bd80      	pop	{r7, pc}

08006bd6 <HT_StartMeasurement>:

void HT_StartMeasurement() {
 8006bd6:	b580      	push	{r7, lr}
 8006bd8:	af00      	add	r7, sp, #0
  HIDS_StartMeasurement();
 8006bda:	f004 ff21 	bl	800ba20 <HIDS_StartMeasurement>
}
 8006bde:	46c0      	nop			@ (mov r8, r8)
 8006be0:	46bd      	mov	sp, r7
 8006be2:	bd80      	pop	{r7, pc}

08006be4 <HT_GetMeasurementValues>:

void HT_SetMeasurementDuration(uint32_t duration) {
  HIDS_SetMeasurementDuration(duration);
}

bool HT_GetMeasurementValues(float* humidity_perc, float* temperature) {
 8006be4:	b580      	push	{r7, lr}
 8006be6:	b082      	sub	sp, #8
 8006be8:	af00      	add	r7, sp, #0
 8006bea:	6078      	str	r0, [r7, #4]
 8006bec:	6039      	str	r1, [r7, #0]
  return HIDS_GetMeasurementValues(humidity_perc, temperature);
 8006bee:	683a      	ldr	r2, [r7, #0]
 8006bf0:	687b      	ldr	r3, [r7, #4]
 8006bf2:	0011      	movs	r1, r2
 8006bf4:	0018      	movs	r0, r3
 8006bf6:	f004 fff9 	bl	800bbec <HIDS_GetMeasurementValues>
 8006bfa:	0003      	movs	r3, r0
}
 8006bfc:	0018      	movs	r0, r3
 8006bfe:	46bd      	mov	sp, r7
 8006c00:	b002      	add	sp, #8
 8006c02:	bd80      	pop	{r7, pc}

08006c04 <HT_DeviceConnected>:

bool HT_DeviceConnected() {
 8006c04:	b580      	push	{r7, lr}
 8006c06:	af00      	add	r7, sp, #0
  return HIDS_DeviceConnected();
 8006c08:	f004 ff94 	bl	800bb34 <HIDS_DeviceConnected>
 8006c0c:	0003      	movs	r3, r0
}
 8006c0e:	0018      	movs	r0, r3
 8006c10:	46bd      	mov	sp, r7
 8006c12:	bd80      	pop	{r7, pc}

08006c14 <MX_I2C1_Init>:
DMA_HandleTypeDef hdma_i2c1_rx;
DMA_HandleTypeDef hdma_i2c1_tx;

/* I2C1 init function */
void MX_I2C1_Init(void)
{
 8006c14:	b580      	push	{r7, lr}
 8006c16:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8006c18:	4b1b      	ldr	r3, [pc, #108]	@ (8006c88 <MX_I2C1_Init+0x74>)
 8006c1a:	4a1c      	ldr	r2, [pc, #112]	@ (8006c8c <MX_I2C1_Init+0x78>)
 8006c1c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.Timing = 0x00503D58;
 8006c1e:	4b1a      	ldr	r3, [pc, #104]	@ (8006c88 <MX_I2C1_Init+0x74>)
 8006c20:	4a1b      	ldr	r2, [pc, #108]	@ (8006c90 <MX_I2C1_Init+0x7c>)
 8006c22:	605a      	str	r2, [r3, #4]
  hi2c1.Init.OwnAddress1 = 0;
 8006c24:	4b18      	ldr	r3, [pc, #96]	@ (8006c88 <MX_I2C1_Init+0x74>)
 8006c26:	2200      	movs	r2, #0
 8006c28:	609a      	str	r2, [r3, #8]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006c2a:	4b17      	ldr	r3, [pc, #92]	@ (8006c88 <MX_I2C1_Init+0x74>)
 8006c2c:	2201      	movs	r2, #1
 8006c2e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006c30:	4b15      	ldr	r3, [pc, #84]	@ (8006c88 <MX_I2C1_Init+0x74>)
 8006c32:	2200      	movs	r2, #0
 8006c34:	611a      	str	r2, [r3, #16]
  hi2c1.Init.OwnAddress2 = 0;
 8006c36:	4b14      	ldr	r3, [pc, #80]	@ (8006c88 <MX_I2C1_Init+0x74>)
 8006c38:	2200      	movs	r2, #0
 8006c3a:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8006c3c:	4b12      	ldr	r3, [pc, #72]	@ (8006c88 <MX_I2C1_Init+0x74>)
 8006c3e:	2200      	movs	r2, #0
 8006c40:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006c42:	4b11      	ldr	r3, [pc, #68]	@ (8006c88 <MX_I2C1_Init+0x74>)
 8006c44:	2200      	movs	r2, #0
 8006c46:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006c48:	4b0f      	ldr	r3, [pc, #60]	@ (8006c88 <MX_I2C1_Init+0x74>)
 8006c4a:	2200      	movs	r2, #0
 8006c4c:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8006c4e:	4b0e      	ldr	r3, [pc, #56]	@ (8006c88 <MX_I2C1_Init+0x74>)
 8006c50:	0018      	movs	r0, r3
 8006c52:	f006 fb7b 	bl	800d34c <HAL_I2C_Init>
 8006c56:	1e03      	subs	r3, r0, #0
 8006c58:	d001      	beq.n	8006c5e <MX_I2C1_Init+0x4a>
  {
    Error_Handler();
 8006c5a:	f000 fbe3 	bl	8007424 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c1, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006c5e:	4b0a      	ldr	r3, [pc, #40]	@ (8006c88 <MX_I2C1_Init+0x74>)
 8006c60:	2100      	movs	r1, #0
 8006c62:	0018      	movs	r0, r3
 8006c64:	f008 faea 	bl	800f23c <HAL_I2CEx_ConfigAnalogFilter>
 8006c68:	1e03      	subs	r3, r0, #0
 8006c6a:	d001      	beq.n	8006c70 <MX_I2C1_Init+0x5c>
  {
    Error_Handler();
 8006c6c:	f000 fbda 	bl	8007424 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c1, 0) != HAL_OK)
 8006c70:	4b05      	ldr	r3, [pc, #20]	@ (8006c88 <MX_I2C1_Init+0x74>)
 8006c72:	2100      	movs	r1, #0
 8006c74:	0018      	movs	r0, r3
 8006c76:	f008 fb2d 	bl	800f2d4 <HAL_I2CEx_ConfigDigitalFilter>
 8006c7a:	1e03      	subs	r3, r0, #0
 8006c7c:	d001      	beq.n	8006c82 <MX_I2C1_Init+0x6e>
  {
    Error_Handler();
 8006c7e:	f000 fbd1 	bl	8007424 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8006c82:	46c0      	nop			@ (mov r8, r8)
 8006c84:	46bd      	mov	sp, r7
 8006c86:	bd80      	pop	{r7, pc}
 8006c88:	20000d1c 	.word	0x20000d1c
 8006c8c:	40005400 	.word	0x40005400
 8006c90:	00503d58 	.word	0x00503d58

08006c94 <MX_I2C2_Init>:
/* I2C2 init function */
void MX_I2C2_Init(void)
{
 8006c94:	b580      	push	{r7, lr}
 8006c96:	af00      	add	r7, sp, #0
  /* USER CODE END I2C2_Init 0 */

  /* USER CODE BEGIN I2C2_Init 1 */

  /* USER CODE END I2C2_Init 1 */
  hi2c2.Instance = I2C2;
 8006c98:	4b1b      	ldr	r3, [pc, #108]	@ (8006d08 <MX_I2C2_Init+0x74>)
 8006c9a:	4a1c      	ldr	r2, [pc, #112]	@ (8006d0c <MX_I2C2_Init+0x78>)
 8006c9c:	601a      	str	r2, [r3, #0]
  hi2c2.Init.Timing = 0x00503D58;
 8006c9e:	4b1a      	ldr	r3, [pc, #104]	@ (8006d08 <MX_I2C2_Init+0x74>)
 8006ca0:	4a1b      	ldr	r2, [pc, #108]	@ (8006d10 <MX_I2C2_Init+0x7c>)
 8006ca2:	605a      	str	r2, [r3, #4]
  hi2c2.Init.OwnAddress1 = 0;
 8006ca4:	4b18      	ldr	r3, [pc, #96]	@ (8006d08 <MX_I2C2_Init+0x74>)
 8006ca6:	2200      	movs	r2, #0
 8006ca8:	609a      	str	r2, [r3, #8]
  hi2c2.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8006caa:	4b17      	ldr	r3, [pc, #92]	@ (8006d08 <MX_I2C2_Init+0x74>)
 8006cac:	2201      	movs	r2, #1
 8006cae:	60da      	str	r2, [r3, #12]
  hi2c2.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8006cb0:	4b15      	ldr	r3, [pc, #84]	@ (8006d08 <MX_I2C2_Init+0x74>)
 8006cb2:	2200      	movs	r2, #0
 8006cb4:	611a      	str	r2, [r3, #16]
  hi2c2.Init.OwnAddress2 = 0;
 8006cb6:	4b14      	ldr	r3, [pc, #80]	@ (8006d08 <MX_I2C2_Init+0x74>)
 8006cb8:	2200      	movs	r2, #0
 8006cba:	615a      	str	r2, [r3, #20]
  hi2c2.Init.OwnAddress2Masks = I2C_OA2_NOMASK;
 8006cbc:	4b12      	ldr	r3, [pc, #72]	@ (8006d08 <MX_I2C2_Init+0x74>)
 8006cbe:	2200      	movs	r2, #0
 8006cc0:	619a      	str	r2, [r3, #24]
  hi2c2.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8006cc2:	4b11      	ldr	r3, [pc, #68]	@ (8006d08 <MX_I2C2_Init+0x74>)
 8006cc4:	2200      	movs	r2, #0
 8006cc6:	61da      	str	r2, [r3, #28]
  hi2c2.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8006cc8:	4b0f      	ldr	r3, [pc, #60]	@ (8006d08 <MX_I2C2_Init+0x74>)
 8006cca:	2200      	movs	r2, #0
 8006ccc:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c2) != HAL_OK)
 8006cce:	4b0e      	ldr	r3, [pc, #56]	@ (8006d08 <MX_I2C2_Init+0x74>)
 8006cd0:	0018      	movs	r0, r3
 8006cd2:	f006 fb3b 	bl	800d34c <HAL_I2C_Init>
 8006cd6:	1e03      	subs	r3, r0, #0
 8006cd8:	d001      	beq.n	8006cde <MX_I2C2_Init+0x4a>
  {
    Error_Handler();
 8006cda:	f000 fba3 	bl	8007424 <Error_Handler>
  }

  /** Configure Analogue filter
  */
  if (HAL_I2CEx_ConfigAnalogFilter(&hi2c2, I2C_ANALOGFILTER_ENABLE) != HAL_OK)
 8006cde:	4b0a      	ldr	r3, [pc, #40]	@ (8006d08 <MX_I2C2_Init+0x74>)
 8006ce0:	2100      	movs	r1, #0
 8006ce2:	0018      	movs	r0, r3
 8006ce4:	f008 faaa 	bl	800f23c <HAL_I2CEx_ConfigAnalogFilter>
 8006ce8:	1e03      	subs	r3, r0, #0
 8006cea:	d001      	beq.n	8006cf0 <MX_I2C2_Init+0x5c>
  {
    Error_Handler();
 8006cec:	f000 fb9a 	bl	8007424 <Error_Handler>
  }

  /** Configure Digital filter
  */
  if (HAL_I2CEx_ConfigDigitalFilter(&hi2c2, 0) != HAL_OK)
 8006cf0:	4b05      	ldr	r3, [pc, #20]	@ (8006d08 <MX_I2C2_Init+0x74>)
 8006cf2:	2100      	movs	r1, #0
 8006cf4:	0018      	movs	r0, r3
 8006cf6:	f008 faed 	bl	800f2d4 <HAL_I2CEx_ConfigDigitalFilter>
 8006cfa:	1e03      	subs	r3, r0, #0
 8006cfc:	d001      	beq.n	8006d02 <MX_I2C2_Init+0x6e>
  {
    Error_Handler();
 8006cfe:	f000 fb91 	bl	8007424 <Error_Handler>
  }
  /* USER CODE BEGIN I2C2_Init 2 */

  /* USER CODE END I2C2_Init 2 */

}
 8006d02:	46c0      	nop			@ (mov r8, r8)
 8006d04:	46bd      	mov	sp, r7
 8006d06:	bd80      	pop	{r7, pc}
 8006d08:	20000d70 	.word	0x20000d70
 8006d0c:	40005800 	.word	0x40005800
 8006d10:	00503d58 	.word	0x00503d58

08006d14 <HAL_I2C_MspInit>:

void HAL_I2C_MspInit(I2C_HandleTypeDef* i2cHandle)
{
 8006d14:	b590      	push	{r4, r7, lr}
 8006d16:	b08b      	sub	sp, #44	@ 0x2c
 8006d18:	af00      	add	r7, sp, #0
 8006d1a:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006d1c:	2414      	movs	r4, #20
 8006d1e:	193b      	adds	r3, r7, r4
 8006d20:	0018      	movs	r0, r3
 8006d22:	2314      	movs	r3, #20
 8006d24:	001a      	movs	r2, r3
 8006d26:	2100      	movs	r1, #0
 8006d28:	f015 fbc6 	bl	801c4b8 <memset>
  if(i2cHandle->Instance==I2C1)
 8006d2c:	687b      	ldr	r3, [r7, #4]
 8006d2e:	681b      	ldr	r3, [r3, #0]
 8006d30:	4a5d      	ldr	r2, [pc, #372]	@ (8006ea8 <HAL_I2C_MspInit+0x194>)
 8006d32:	4293      	cmp	r3, r2
 8006d34:	d000      	beq.n	8006d38 <HAL_I2C_MspInit+0x24>
 8006d36:	e083      	b.n	8006e40 <HAL_I2C_MspInit+0x12c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006d38:	4b5c      	ldr	r3, [pc, #368]	@ (8006eac <HAL_I2C_MspInit+0x198>)
 8006d3a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006d3c:	4b5b      	ldr	r3, [pc, #364]	@ (8006eac <HAL_I2C_MspInit+0x198>)
 8006d3e:	2102      	movs	r1, #2
 8006d40:	430a      	orrs	r2, r1
 8006d42:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006d44:	4b59      	ldr	r3, [pc, #356]	@ (8006eac <HAL_I2C_MspInit+0x198>)
 8006d46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006d48:	2202      	movs	r2, #2
 8006d4a:	4013      	ands	r3, r2
 8006d4c:	613b      	str	r3, [r7, #16]
 8006d4e:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8006d50:	0021      	movs	r1, r4
 8006d52:	187b      	adds	r3, r7, r1
 8006d54:	22c0      	movs	r2, #192	@ 0xc0
 8006d56:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006d58:	187b      	adds	r3, r7, r1
 8006d5a:	2212      	movs	r2, #18
 8006d5c:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006d5e:	187b      	adds	r3, r7, r1
 8006d60:	2200      	movs	r2, #0
 8006d62:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006d64:	187b      	adds	r3, r7, r1
 8006d66:	2203      	movs	r2, #3
 8006d68:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF1_I2C1;
 8006d6a:	187b      	adds	r3, r7, r1
 8006d6c:	2201      	movs	r2, #1
 8006d6e:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006d70:	187b      	adds	r3, r7, r1
 8006d72:	4a4f      	ldr	r2, [pc, #316]	@ (8006eb0 <HAL_I2C_MspInit+0x19c>)
 8006d74:	0019      	movs	r1, r3
 8006d76:	0010      	movs	r0, r2
 8006d78:	f006 f930 	bl	800cfdc <HAL_GPIO_Init>

    /* I2C1 clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8006d7c:	4b4b      	ldr	r3, [pc, #300]	@ (8006eac <HAL_I2C_MspInit+0x198>)
 8006d7e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006d80:	4b4a      	ldr	r3, [pc, #296]	@ (8006eac <HAL_I2C_MspInit+0x198>)
 8006d82:	2180      	movs	r1, #128	@ 0x80
 8006d84:	0389      	lsls	r1, r1, #14
 8006d86:	430a      	orrs	r2, r1
 8006d88:	639a      	str	r2, [r3, #56]	@ 0x38

    /* I2C1 DMA Init */
    /* I2C1_RX Init */
    hdma_i2c1_rx.Instance = DMA1_Channel3;
 8006d8a:	4b4a      	ldr	r3, [pc, #296]	@ (8006eb4 <HAL_I2C_MspInit+0x1a0>)
 8006d8c:	4a4a      	ldr	r2, [pc, #296]	@ (8006eb8 <HAL_I2C_MspInit+0x1a4>)
 8006d8e:	601a      	str	r2, [r3, #0]
    hdma_i2c1_rx.Init.Request = DMA_REQUEST_6;
 8006d90:	4b48      	ldr	r3, [pc, #288]	@ (8006eb4 <HAL_I2C_MspInit+0x1a0>)
 8006d92:	2206      	movs	r2, #6
 8006d94:	605a      	str	r2, [r3, #4]
    hdma_i2c1_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006d96:	4b47      	ldr	r3, [pc, #284]	@ (8006eb4 <HAL_I2C_MspInit+0x1a0>)
 8006d98:	2200      	movs	r2, #0
 8006d9a:	609a      	str	r2, [r3, #8]
    hdma_i2c1_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006d9c:	4b45      	ldr	r3, [pc, #276]	@ (8006eb4 <HAL_I2C_MspInit+0x1a0>)
 8006d9e:	2200      	movs	r2, #0
 8006da0:	60da      	str	r2, [r3, #12]
    hdma_i2c1_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006da2:	4b44      	ldr	r3, [pc, #272]	@ (8006eb4 <HAL_I2C_MspInit+0x1a0>)
 8006da4:	2280      	movs	r2, #128	@ 0x80
 8006da6:	611a      	str	r2, [r3, #16]
    hdma_i2c1_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006da8:	4b42      	ldr	r3, [pc, #264]	@ (8006eb4 <HAL_I2C_MspInit+0x1a0>)
 8006daa:	2200      	movs	r2, #0
 8006dac:	615a      	str	r2, [r3, #20]
    hdma_i2c1_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006dae:	4b41      	ldr	r3, [pc, #260]	@ (8006eb4 <HAL_I2C_MspInit+0x1a0>)
 8006db0:	2200      	movs	r2, #0
 8006db2:	619a      	str	r2, [r3, #24]
    hdma_i2c1_rx.Init.Mode = DMA_NORMAL;
 8006db4:	4b3f      	ldr	r3, [pc, #252]	@ (8006eb4 <HAL_I2C_MspInit+0x1a0>)
 8006db6:	2200      	movs	r2, #0
 8006db8:	61da      	str	r2, [r3, #28]
    hdma_i2c1_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006dba:	4b3e      	ldr	r3, [pc, #248]	@ (8006eb4 <HAL_I2C_MspInit+0x1a0>)
 8006dbc:	2200      	movs	r2, #0
 8006dbe:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_rx) != HAL_OK)
 8006dc0:	4b3c      	ldr	r3, [pc, #240]	@ (8006eb4 <HAL_I2C_MspInit+0x1a0>)
 8006dc2:	0018      	movs	r0, r3
 8006dc4:	f005 fcee 	bl	800c7a4 <HAL_DMA_Init>
 8006dc8:	1e03      	subs	r3, r0, #0
 8006dca:	d001      	beq.n	8006dd0 <HAL_I2C_MspInit+0xbc>
    {
      Error_Handler();
 8006dcc:	f000 fb2a 	bl	8007424 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmarx,hdma_i2c1_rx);
 8006dd0:	687b      	ldr	r3, [r7, #4]
 8006dd2:	4a38      	ldr	r2, [pc, #224]	@ (8006eb4 <HAL_I2C_MspInit+0x1a0>)
 8006dd4:	63da      	str	r2, [r3, #60]	@ 0x3c
 8006dd6:	4b37      	ldr	r3, [pc, #220]	@ (8006eb4 <HAL_I2C_MspInit+0x1a0>)
 8006dd8:	687a      	ldr	r2, [r7, #4]
 8006dda:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1_TX Init */
    hdma_i2c1_tx.Instance = DMA1_Channel2;
 8006ddc:	4b37      	ldr	r3, [pc, #220]	@ (8006ebc <HAL_I2C_MspInit+0x1a8>)
 8006dde:	4a38      	ldr	r2, [pc, #224]	@ (8006ec0 <HAL_I2C_MspInit+0x1ac>)
 8006de0:	601a      	str	r2, [r3, #0]
    hdma_i2c1_tx.Init.Request = DMA_REQUEST_6;
 8006de2:	4b36      	ldr	r3, [pc, #216]	@ (8006ebc <HAL_I2C_MspInit+0x1a8>)
 8006de4:	2206      	movs	r2, #6
 8006de6:	605a      	str	r2, [r3, #4]
    hdma_i2c1_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8006de8:	4b34      	ldr	r3, [pc, #208]	@ (8006ebc <HAL_I2C_MspInit+0x1a8>)
 8006dea:	2210      	movs	r2, #16
 8006dec:	609a      	str	r2, [r3, #8]
    hdma_i2c1_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006dee:	4b33      	ldr	r3, [pc, #204]	@ (8006ebc <HAL_I2C_MspInit+0x1a8>)
 8006df0:	2200      	movs	r2, #0
 8006df2:	60da      	str	r2, [r3, #12]
    hdma_i2c1_tx.Init.MemInc = DMA_MINC_ENABLE;
 8006df4:	4b31      	ldr	r3, [pc, #196]	@ (8006ebc <HAL_I2C_MspInit+0x1a8>)
 8006df6:	2280      	movs	r2, #128	@ 0x80
 8006df8:	611a      	str	r2, [r3, #16]
    hdma_i2c1_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8006dfa:	4b30      	ldr	r3, [pc, #192]	@ (8006ebc <HAL_I2C_MspInit+0x1a8>)
 8006dfc:	2200      	movs	r2, #0
 8006dfe:	615a      	str	r2, [r3, #20]
    hdma_i2c1_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8006e00:	4b2e      	ldr	r3, [pc, #184]	@ (8006ebc <HAL_I2C_MspInit+0x1a8>)
 8006e02:	2200      	movs	r2, #0
 8006e04:	619a      	str	r2, [r3, #24]
    hdma_i2c1_tx.Init.Mode = DMA_NORMAL;
 8006e06:	4b2d      	ldr	r3, [pc, #180]	@ (8006ebc <HAL_I2C_MspInit+0x1a8>)
 8006e08:	2200      	movs	r2, #0
 8006e0a:	61da      	str	r2, [r3, #28]
    hdma_i2c1_tx.Init.Priority = DMA_PRIORITY_LOW;
 8006e0c:	4b2b      	ldr	r3, [pc, #172]	@ (8006ebc <HAL_I2C_MspInit+0x1a8>)
 8006e0e:	2200      	movs	r2, #0
 8006e10:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_i2c1_tx) != HAL_OK)
 8006e12:	4b2a      	ldr	r3, [pc, #168]	@ (8006ebc <HAL_I2C_MspInit+0x1a8>)
 8006e14:	0018      	movs	r0, r3
 8006e16:	f005 fcc5 	bl	800c7a4 <HAL_DMA_Init>
 8006e1a:	1e03      	subs	r3, r0, #0
 8006e1c:	d001      	beq.n	8006e22 <HAL_I2C_MspInit+0x10e>
    {
      Error_Handler();
 8006e1e:	f000 fb01 	bl	8007424 <Error_Handler>
    }

    __HAL_LINKDMA(i2cHandle,hdmatx,hdma_i2c1_tx);
 8006e22:	687b      	ldr	r3, [r7, #4]
 8006e24:	4a25      	ldr	r2, [pc, #148]	@ (8006ebc <HAL_I2C_MspInit+0x1a8>)
 8006e26:	639a      	str	r2, [r3, #56]	@ 0x38
 8006e28:	4b24      	ldr	r3, [pc, #144]	@ (8006ebc <HAL_I2C_MspInit+0x1a8>)
 8006e2a:	687a      	ldr	r2, [r7, #4]
 8006e2c:	629a      	str	r2, [r3, #40]	@ 0x28

    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_IRQn, 0, 0);
 8006e2e:	2200      	movs	r2, #0
 8006e30:	2100      	movs	r1, #0
 8006e32:	2017      	movs	r0, #23
 8006e34:	f005 fc84 	bl	800c740 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_IRQn);
 8006e38:	2017      	movs	r0, #23
 8006e3a:	f005 fc96 	bl	800c76a <HAL_NVIC_EnableIRQ>
    __HAL_RCC_I2C2_CLK_ENABLE();
  /* USER CODE BEGIN I2C2_MspInit 1 */

  /* USER CODE END I2C2_MspInit 1 */
  }
}
 8006e3e:	e02e      	b.n	8006e9e <HAL_I2C_MspInit+0x18a>
  else if(i2cHandle->Instance==I2C2)
 8006e40:	687b      	ldr	r3, [r7, #4]
 8006e42:	681b      	ldr	r3, [r3, #0]
 8006e44:	4a1f      	ldr	r2, [pc, #124]	@ (8006ec4 <HAL_I2C_MspInit+0x1b0>)
 8006e46:	4293      	cmp	r3, r2
 8006e48:	d129      	bne.n	8006e9e <HAL_I2C_MspInit+0x18a>
    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006e4a:	4b18      	ldr	r3, [pc, #96]	@ (8006eac <HAL_I2C_MspInit+0x198>)
 8006e4c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006e4e:	4b17      	ldr	r3, [pc, #92]	@ (8006eac <HAL_I2C_MspInit+0x198>)
 8006e50:	2102      	movs	r1, #2
 8006e52:	430a      	orrs	r2, r1
 8006e54:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006e56:	4b15      	ldr	r3, [pc, #84]	@ (8006eac <HAL_I2C_MspInit+0x198>)
 8006e58:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006e5a:	2202      	movs	r2, #2
 8006e5c:	4013      	ands	r3, r2
 8006e5e:	60fb      	str	r3, [r7, #12]
 8006e60:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_10|GPIO_PIN_11;
 8006e62:	2114      	movs	r1, #20
 8006e64:	187b      	adds	r3, r7, r1
 8006e66:	22c0      	movs	r2, #192	@ 0xc0
 8006e68:	0112      	lsls	r2, r2, #4
 8006e6a:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8006e6c:	187b      	adds	r3, r7, r1
 8006e6e:	2212      	movs	r2, #18
 8006e70:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006e72:	187b      	adds	r3, r7, r1
 8006e74:	2200      	movs	r2, #0
 8006e76:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8006e78:	187b      	adds	r3, r7, r1
 8006e7a:	2203      	movs	r2, #3
 8006e7c:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_I2C2;
 8006e7e:	187b      	adds	r3, r7, r1
 8006e80:	2206      	movs	r2, #6
 8006e82:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006e84:	187b      	adds	r3, r7, r1
 8006e86:	4a0a      	ldr	r2, [pc, #40]	@ (8006eb0 <HAL_I2C_MspInit+0x19c>)
 8006e88:	0019      	movs	r1, r3
 8006e8a:	0010      	movs	r0, r2
 8006e8c:	f006 f8a6 	bl	800cfdc <HAL_GPIO_Init>
    __HAL_RCC_I2C2_CLK_ENABLE();
 8006e90:	4b06      	ldr	r3, [pc, #24]	@ (8006eac <HAL_I2C_MspInit+0x198>)
 8006e92:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006e94:	4b05      	ldr	r3, [pc, #20]	@ (8006eac <HAL_I2C_MspInit+0x198>)
 8006e96:	2180      	movs	r1, #128	@ 0x80
 8006e98:	03c9      	lsls	r1, r1, #15
 8006e9a:	430a      	orrs	r2, r1
 8006e9c:	639a      	str	r2, [r3, #56]	@ 0x38
}
 8006e9e:	46c0      	nop			@ (mov r8, r8)
 8006ea0:	46bd      	mov	sp, r7
 8006ea2:	b00b      	add	sp, #44	@ 0x2c
 8006ea4:	bd90      	pop	{r4, r7, pc}
 8006ea6:	46c0      	nop			@ (mov r8, r8)
 8006ea8:	40005400 	.word	0x40005400
 8006eac:	40021000 	.word	0x40021000
 8006eb0:	50000400 	.word	0x50000400
 8006eb4:	20000dc4 	.word	0x20000dc4
 8006eb8:	40020030 	.word	0x40020030
 8006ebc:	20000e0c 	.word	0x20000e0c
 8006ec0:	4002001c 	.word	0x4002001c
 8006ec4:	40005800 	.word	0x40005800

08006ec8 <MX_I2S2_Init>:
I2S_HandleTypeDef hi2s2;
DMA_HandleTypeDef hdma_spi2_rx;

/* I2S2 init function */
void MX_I2S2_Init(void)
{
 8006ec8:	b580      	push	{r7, lr}
 8006eca:	af00      	add	r7, sp, #0
  /* USER CODE END I2S2_Init 0 */

  /* USER CODE BEGIN I2S2_Init 1 */

  /* USER CODE END I2S2_Init 1 */
  hi2s2.Instance = SPI2;
 8006ecc:	4b10      	ldr	r3, [pc, #64]	@ (8006f10 <MX_I2S2_Init+0x48>)
 8006ece:	4a11      	ldr	r2, [pc, #68]	@ (8006f14 <MX_I2S2_Init+0x4c>)
 8006ed0:	601a      	str	r2, [r3, #0]
  hi2s2.Init.Mode = I2S_MODE_MASTER_RX;
 8006ed2:	4b0f      	ldr	r3, [pc, #60]	@ (8006f10 <MX_I2S2_Init+0x48>)
 8006ed4:	22c0      	movs	r2, #192	@ 0xc0
 8006ed6:	0092      	lsls	r2, r2, #2
 8006ed8:	605a      	str	r2, [r3, #4]
  hi2s2.Init.Standard = I2S_STANDARD_PHILIPS;
 8006eda:	4b0d      	ldr	r3, [pc, #52]	@ (8006f10 <MX_I2S2_Init+0x48>)
 8006edc:	2200      	movs	r2, #0
 8006ede:	609a      	str	r2, [r3, #8]
  hi2s2.Init.DataFormat = I2S_DATAFORMAT_24B;
 8006ee0:	4b0b      	ldr	r3, [pc, #44]	@ (8006f10 <MX_I2S2_Init+0x48>)
 8006ee2:	2203      	movs	r2, #3
 8006ee4:	60da      	str	r2, [r3, #12]
  hi2s2.Init.MCLKOutput = I2S_MCLKOUTPUT_DISABLE;
 8006ee6:	4b0a      	ldr	r3, [pc, #40]	@ (8006f10 <MX_I2S2_Init+0x48>)
 8006ee8:	2200      	movs	r2, #0
 8006eea:	611a      	str	r2, [r3, #16]
  hi2s2.Init.AudioFreq = I2S_AUDIOFREQ_16K;
 8006eec:	4b08      	ldr	r3, [pc, #32]	@ (8006f10 <MX_I2S2_Init+0x48>)
 8006eee:	22fa      	movs	r2, #250	@ 0xfa
 8006ef0:	0192      	lsls	r2, r2, #6
 8006ef2:	615a      	str	r2, [r3, #20]
  hi2s2.Init.CPOL = I2S_CPOL_LOW;
 8006ef4:	4b06      	ldr	r3, [pc, #24]	@ (8006f10 <MX_I2S2_Init+0x48>)
 8006ef6:	2200      	movs	r2, #0
 8006ef8:	619a      	str	r2, [r3, #24]
  if (HAL_I2S_Init(&hi2s2) != HAL_OK)
 8006efa:	4b05      	ldr	r3, [pc, #20]	@ (8006f10 <MX_I2S2_Init+0x48>)
 8006efc:	0018      	movs	r0, r3
 8006efe:	f008 fa35 	bl	800f36c <HAL_I2S_Init>
 8006f02:	1e03      	subs	r3, r0, #0
 8006f04:	d001      	beq.n	8006f0a <MX_I2S2_Init+0x42>
  {
    Error_Handler();
 8006f06:	f000 fa8d 	bl	8007424 <Error_Handler>
  }
  /* USER CODE BEGIN I2S2_Init 2 */

  /* USER CODE END I2S2_Init 2 */

}
 8006f0a:	46c0      	nop			@ (mov r8, r8)
 8006f0c:	46bd      	mov	sp, r7
 8006f0e:	bd80      	pop	{r7, pc}
 8006f10:	20000e54 	.word	0x20000e54
 8006f14:	40003800 	.word	0x40003800

08006f18 <HAL_I2S_MspInit>:

void HAL_I2S_MspInit(I2S_HandleTypeDef* i2sHandle)
{
 8006f18:	b590      	push	{r4, r7, lr}
 8006f1a:	b089      	sub	sp, #36	@ 0x24
 8006f1c:	af00      	add	r7, sp, #0
 8006f1e:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8006f20:	240c      	movs	r4, #12
 8006f22:	193b      	adds	r3, r7, r4
 8006f24:	0018      	movs	r0, r3
 8006f26:	2314      	movs	r3, #20
 8006f28:	001a      	movs	r2, r3
 8006f2a:	2100      	movs	r1, #0
 8006f2c:	f015 fac4 	bl	801c4b8 <memset>
  if(i2sHandle->Instance==SPI2)
 8006f30:	687b      	ldr	r3, [r7, #4]
 8006f32:	681b      	ldr	r3, [r3, #0]
 8006f34:	4a2d      	ldr	r2, [pc, #180]	@ (8006fec <HAL_I2S_MspInit+0xd4>)
 8006f36:	4293      	cmp	r3, r2
 8006f38:	d154      	bne.n	8006fe4 <HAL_I2S_MspInit+0xcc>
  {
  /* USER CODE BEGIN SPI2_MspInit 0 */

  /* USER CODE END SPI2_MspInit 0 */
    /* I2S2 clock enable */
    __HAL_RCC_SPI2_CLK_ENABLE();
 8006f3a:	4b2d      	ldr	r3, [pc, #180]	@ (8006ff0 <HAL_I2S_MspInit+0xd8>)
 8006f3c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8006f3e:	4b2c      	ldr	r3, [pc, #176]	@ (8006ff0 <HAL_I2S_MspInit+0xd8>)
 8006f40:	2180      	movs	r1, #128	@ 0x80
 8006f42:	01c9      	lsls	r1, r1, #7
 8006f44:	430a      	orrs	r2, r1
 8006f46:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8006f48:	4b29      	ldr	r3, [pc, #164]	@ (8006ff0 <HAL_I2S_MspInit+0xd8>)
 8006f4a:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8006f4c:	4b28      	ldr	r3, [pc, #160]	@ (8006ff0 <HAL_I2S_MspInit+0xd8>)
 8006f4e:	2102      	movs	r1, #2
 8006f50:	430a      	orrs	r2, r1
 8006f52:	62da      	str	r2, [r3, #44]	@ 0x2c
 8006f54:	4b26      	ldr	r3, [pc, #152]	@ (8006ff0 <HAL_I2S_MspInit+0xd8>)
 8006f56:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8006f58:	2202      	movs	r2, #2
 8006f5a:	4013      	ands	r3, r2
 8006f5c:	60bb      	str	r3, [r7, #8]
 8006f5e:	68bb      	ldr	r3, [r7, #8]
    /**I2S2 GPIO Configuration
    PB12     ------> I2S2_WS
    PB13     ------> I2S2_CK
    PB15     ------> I2S2_SD
    */
    GPIO_InitStruct.Pin = GPIO_PIN_12|GPIO_PIN_13|GPIO_PIN_15;
 8006f60:	193b      	adds	r3, r7, r4
 8006f62:	22b0      	movs	r2, #176	@ 0xb0
 8006f64:	0212      	lsls	r2, r2, #8
 8006f66:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8006f68:	0021      	movs	r1, r4
 8006f6a:	187b      	adds	r3, r7, r1
 8006f6c:	2202      	movs	r2, #2
 8006f6e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8006f70:	187b      	adds	r3, r7, r1
 8006f72:	2200      	movs	r2, #0
 8006f74:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8006f76:	187b      	adds	r3, r7, r1
 8006f78:	2200      	movs	r2, #0
 8006f7a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF0_SPI2;
 8006f7c:	187b      	adds	r3, r7, r1
 8006f7e:	2200      	movs	r2, #0
 8006f80:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8006f82:	187b      	adds	r3, r7, r1
 8006f84:	4a1b      	ldr	r2, [pc, #108]	@ (8006ff4 <HAL_I2S_MspInit+0xdc>)
 8006f86:	0019      	movs	r1, r3
 8006f88:	0010      	movs	r0, r2
 8006f8a:	f006 f827 	bl	800cfdc <HAL_GPIO_Init>

    /* I2S2 DMA Init */
    /* SPI2_RX Init */
    hdma_spi2_rx.Instance = DMA1_Channel4;
 8006f8e:	4b1a      	ldr	r3, [pc, #104]	@ (8006ff8 <HAL_I2S_MspInit+0xe0>)
 8006f90:	4a1a      	ldr	r2, [pc, #104]	@ (8006ffc <HAL_I2S_MspInit+0xe4>)
 8006f92:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx.Init.Request = DMA_REQUEST_2;
 8006f94:	4b18      	ldr	r3, [pc, #96]	@ (8006ff8 <HAL_I2S_MspInit+0xe0>)
 8006f96:	2202      	movs	r2, #2
 8006f98:	605a      	str	r2, [r3, #4]
    hdma_spi2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8006f9a:	4b17      	ldr	r3, [pc, #92]	@ (8006ff8 <HAL_I2S_MspInit+0xe0>)
 8006f9c:	2200      	movs	r2, #0
 8006f9e:	609a      	str	r2, [r3, #8]
    hdma_spi2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8006fa0:	4b15      	ldr	r3, [pc, #84]	@ (8006ff8 <HAL_I2S_MspInit+0xe0>)
 8006fa2:	2200      	movs	r2, #0
 8006fa4:	60da      	str	r2, [r3, #12]
    hdma_spi2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8006fa6:	4b14      	ldr	r3, [pc, #80]	@ (8006ff8 <HAL_I2S_MspInit+0xe0>)
 8006fa8:	2280      	movs	r2, #128	@ 0x80
 8006faa:	611a      	str	r2, [r3, #16]
    hdma_spi2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_HALFWORD;
 8006fac:	4b12      	ldr	r3, [pc, #72]	@ (8006ff8 <HAL_I2S_MspInit+0xe0>)
 8006fae:	2280      	movs	r2, #128	@ 0x80
 8006fb0:	0052      	lsls	r2, r2, #1
 8006fb2:	615a      	str	r2, [r3, #20]
    hdma_spi2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_HALFWORD;
 8006fb4:	4b10      	ldr	r3, [pc, #64]	@ (8006ff8 <HAL_I2S_MspInit+0xe0>)
 8006fb6:	2280      	movs	r2, #128	@ 0x80
 8006fb8:	00d2      	lsls	r2, r2, #3
 8006fba:	619a      	str	r2, [r3, #24]
    hdma_spi2_rx.Init.Mode = DMA_CIRCULAR;
 8006fbc:	4b0e      	ldr	r3, [pc, #56]	@ (8006ff8 <HAL_I2S_MspInit+0xe0>)
 8006fbe:	2220      	movs	r2, #32
 8006fc0:	61da      	str	r2, [r3, #28]
    hdma_spi2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8006fc2:	4b0d      	ldr	r3, [pc, #52]	@ (8006ff8 <HAL_I2S_MspInit+0xe0>)
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_spi2_rx) != HAL_OK)
 8006fc8:	4b0b      	ldr	r3, [pc, #44]	@ (8006ff8 <HAL_I2S_MspInit+0xe0>)
 8006fca:	0018      	movs	r0, r3
 8006fcc:	f005 fbea 	bl	800c7a4 <HAL_DMA_Init>
 8006fd0:	1e03      	subs	r3, r0, #0
 8006fd2:	d001      	beq.n	8006fd8 <HAL_I2S_MspInit+0xc0>
    {
      Error_Handler();
 8006fd4:	f000 fa26 	bl	8007424 <Error_Handler>
    }

    __HAL_LINKDMA(i2sHandle,hdmarx,hdma_spi2_rx);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	4a07      	ldr	r2, [pc, #28]	@ (8006ff8 <HAL_I2S_MspInit+0xe0>)
 8006fdc:	631a      	str	r2, [r3, #48]	@ 0x30
 8006fde:	4b06      	ldr	r3, [pc, #24]	@ (8006ff8 <HAL_I2S_MspInit+0xe0>)
 8006fe0:	687a      	ldr	r2, [r7, #4]
 8006fe2:	629a      	str	r2, [r3, #40]	@ 0x28

  /* USER CODE BEGIN SPI2_MspInit 1 */

  /* USER CODE END SPI2_MspInit 1 */
  }
}
 8006fe4:	46c0      	nop			@ (mov r8, r8)
 8006fe6:	46bd      	mov	sp, r7
 8006fe8:	b009      	add	sp, #36	@ 0x24
 8006fea:	bd90      	pop	{r4, r7, pc}
 8006fec:	40003800 	.word	0x40003800
 8006ff0:	40021000 	.word	0x40021000
 8006ff4:	50000400 	.word	0x50000400
 8006ff8:	20000e90 	.word	0x20000e90
 8006ffc:	40020044 	.word	0x40020044

08007000 <SetTestDone>:
/* USER CODE END PV */

/* Private function prototypes -----------------------------------------------*/
void SystemClock_Config(void);
/* USER CODE BEGIN PFP */
void SetTestDone(){
 8007000:	b580      	push	{r7, lr}
 8007002:	af00      	add	r7, sp, #0
  testDone = true;
 8007004:	4b1e      	ldr	r3, [pc, #120]	@ (8007080 <SetTestDone+0x80>)
 8007006:	2201      	movs	r2, #1
 8007008:	701a      	strb	r2, [r3, #0]
//  Info("testDone true in SetTestDone\r\n");
  HAL_Delay(1000);
 800700a:	23fa      	movs	r3, #250	@ 0xfa
 800700c:	009b      	lsls	r3, r3, #2
 800700e:	0018      	movs	r0, r3
 8007010:	f004 ff2a 	bl	800be68 <HAL_Delay>
  SetDBLED(false, false, true);
 8007014:	2201      	movs	r2, #1
 8007016:	2100      	movs	r1, #0
 8007018:	2000      	movs	r0, #0
 800701a:	f003 fc15 	bl	800a848 <SetDBLED>
  SetStatusLED(4000, 4000, 3000);
 800701e:	4a19      	ldr	r2, [pc, #100]	@ (8007084 <SetTestDone+0x84>)
 8007020:	23fa      	movs	r3, #250	@ 0xfa
 8007022:	0119      	lsls	r1, r3, #4
 8007024:	23fa      	movs	r3, #250	@ 0xfa
 8007026:	011b      	lsls	r3, r3, #4
 8007028:	0018      	movs	r0, r3
 800702a:	f003 fbd9 	bl	800a7e0 <SetStatusLED>
  SetVocLED(4000, 4000, 3000);
 800702e:	4a15      	ldr	r2, [pc, #84]	@ (8007084 <SetTestDone+0x84>)
 8007030:	23fa      	movs	r3, #250	@ 0xfa
 8007032:	0119      	lsls	r1, r3, #4
 8007034:	23fa      	movs	r3, #250	@ 0xfa
 8007036:	011b      	lsls	r3, r3, #4
 8007038:	0018      	movs	r0, r3
 800703a:	f003 fc4f 	bl	800a8dc <SetVocLED>
  HAL_Delay(1000);
 800703e:	23fa      	movs	r3, #250	@ 0xfa
 8007040:	009b      	lsls	r3, r3, #2
 8007042:	0018      	movs	r0, r3
 8007044:	f004 ff10 	bl	800be68 <HAL_Delay>
  SetDBLED(false, false, false);
 8007048:	2200      	movs	r2, #0
 800704a:	2100      	movs	r1, #0
 800704c:	2000      	movs	r0, #0
 800704e:	f003 fbfb 	bl	800a848 <SetDBLED>
  SetStatusLED(4000, 4000, 4000);
 8007052:	23fa      	movs	r3, #250	@ 0xfa
 8007054:	011a      	lsls	r2, r3, #4
 8007056:	23fa      	movs	r3, #250	@ 0xfa
 8007058:	0119      	lsls	r1, r3, #4
 800705a:	23fa      	movs	r3, #250	@ 0xfa
 800705c:	011b      	lsls	r3, r3, #4
 800705e:	0018      	movs	r0, r3
 8007060:	f003 fbbe 	bl	800a7e0 <SetStatusLED>
  SetVocLED(4000, 4000, 4000);
 8007064:	23fa      	movs	r3, #250	@ 0xfa
 8007066:	011a      	lsls	r2, r3, #4
 8007068:	23fa      	movs	r3, #250	@ 0xfa
 800706a:	0119      	lsls	r1, r3, #4
 800706c:	23fa      	movs	r3, #250	@ 0xfa
 800706e:	011b      	lsls	r3, r3, #4
 8007070:	0018      	movs	r0, r3
 8007072:	f003 fc33 	bl	800a8dc <SetVocLED>
  InitDone();
 8007076:	f003 fb5d 	bl	800a734 <InitDone>
}
 800707a:	46c0      	nop			@ (mov r8, r8)
 800707c:	46bd      	mov	sp, r7
 800707e:	bd80      	pop	{r7, pc}
 8007080:	20000ed8 	.word	0x20000ed8
 8007084:	00000bb8 	.word	0x00000bb8

08007088 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8007088:	b580      	push	{r7, lr}
 800708a:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800708c:	f004 fe7c 	bl	800bd88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 8007090:	f000 f8f6 	bl	8007280 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8007094:	f7ff fc2c 	bl	80068f0 <MX_GPIO_Init>
  MX_DMA_Init();
 8007098:	f7ff fa76 	bl	8006588 <MX_DMA_Init>
  MX_I2C1_Init();
 800709c:	f7ff fdba 	bl	8006c14 <MX_I2C1_Init>
  MX_I2S2_Init();
 80070a0:	f7ff ff12 	bl	8006ec8 <MX_I2S2_Init>
  MX_USART1_UART_Init();
 80070a4:	f004 f948 	bl	800b338 <MX_USART1_UART_Init>
  MX_I2C2_Init();
 80070a8:	f7ff fdf4 	bl	8006c94 <MX_I2C2_Init>
  MX_TIM2_Init();
 80070ac:	f003 ff3c 	bl	800af28 <MX_TIM2_Init>
  MX_TIM3_Init();
 80070b0:	f003 ffae 	bl	800b010 <MX_TIM3_Init>
  MX_USART4_UART_Init();
 80070b4:	f004 f974 	bl	800b3a0 <MX_USART4_UART_Init>
  MX_ADC_Init();
 80070b8:	f7ff f9b4 	bl	8006424 <MX_ADC_Init>
  MX_USB_DEVICE_Init();
 80070bc:	f012 f80a 	bl	80190d4 <MX_USB_DEVICE_Init>
  MX_RTC_Init();
 80070c0:	f000 ff68 	bl	8007f94 <MX_RTC_Init>
  MX_LPUART1_UART_Init();
 80070c4:	f004 f902 	bl	800b2cc <MX_LPUART1_UART_Init>
  MX_TIM6_Init();
 80070c8:	f004 f820 	bl	800b10c <MX_TIM6_Init>
	 * : Default network: Sensor community
	 * : Different modes for outside and inside (check solar?)
	 * : Add CLI via usb-c
	 * : Network not found? Sleep
	 */
  GPIO_InitPWMLEDs(&htim2, &htim3);
 80070cc:	4a53      	ldr	r2, [pc, #332]	@ (800721c <main+0x194>)
 80070ce:	4b54      	ldr	r3, [pc, #336]	@ (8007220 <main+0x198>)
 80070d0:	0011      	movs	r1, r2
 80070d2:	0018      	movs	r0, r3
 80070d4:	f7ff fd22 	bl	8006b1c <GPIO_InitPWMLEDs>
  if(UserButton_Pressed()){
 80070d8:	f7fe ff46 	bl	8005f68 <UserButton_Pressed>
 80070dc:	1e03      	subs	r3, r0, #0
 80070de:	d004      	beq.n	80070ea <main+0x62>
    EnableESPProg();
 80070e0:	f012 f8c8 	bl	8019274 <EnableESPProg>
    ESP_Programming = true;
 80070e4:	4b4f      	ldr	r3, [pc, #316]	@ (8007224 <main+0x19c>)
 80070e6:	2201      	movs	r2, #1
 80070e8:	701a      	strb	r2, [r3, #0]
  }
  //uint32_t LedBlinkTimestamp = HAL_GetTick() + LED_BLINK_INTERVAL;
  SetVerboseLevel(VERBOSE_ALL);
 80070ea:	2003      	movs	r0, #3
 80070ec:	f004 fb80 	bl	800b7f0 <SetVerboseLevel>
  BinaryReleaseInfo();
 80070f0:	f004 fb96 	bl	800b820 <BinaryReleaseInfo>
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 80070f4:	494c      	ldr	r1, [pc, #304]	@ (8007228 <main+0x1a0>)
 80070f6:	4b4d      	ldr	r3, [pc, #308]	@ (800722c <main+0x1a4>)
 80070f8:	2201      	movs	r2, #1
 80070fa:	0018      	movs	r0, r3
 80070fc:	f00c fb50 	bl	80137a0 <HAL_UART_Receive_IT>
  InitClock(&hrtc);
 8007100:	4b4b      	ldr	r3, [pc, #300]	@ (8007230 <main+0x1a8>)
 8007102:	0018      	movs	r0, r3
 8007104:	f7ff f980 	bl	8006408 <InitClock>
  if (!soundInit(&hdma_spi2_rx, &hi2s2, &htim6, DMA1_Channel4_5_6_7_IRQn))
 8007108:	4a4a      	ldr	r2, [pc, #296]	@ (8007234 <main+0x1ac>)
 800710a:	494b      	ldr	r1, [pc, #300]	@ (8007238 <main+0x1b0>)
 800710c:	484b      	ldr	r0, [pc, #300]	@ (800723c <main+0x1b4>)
 800710e:	230b      	movs	r3, #11
 8007110:	f002 fc86 	bl	8009a20 <soundInit>
 8007114:	0003      	movs	r3, r0
 8007116:	001a      	movs	r2, r3
 8007118:	2301      	movs	r3, #1
 800711a:	4053      	eors	r3, r2
 800711c:	b2db      	uxtb	r3, r3
 800711e:	2b00      	cmp	r3, #0
 8007120:	d005      	beq.n	800712e <main+0xa6>
  {
      errorHandler(__func__, __LINE__, __FILE__);
 8007122:	4a47      	ldr	r2, [pc, #284]	@ (8007240 <main+0x1b8>)
 8007124:	4b47      	ldr	r3, [pc, #284]	@ (8007244 <main+0x1bc>)
 8007126:	21d7      	movs	r1, #215	@ 0xd7
 8007128:	0018      	movs	r0, r3
 800712a:	f004 fbab 	bl	800b884 <errorHandler>
  }

  Gadget_Init(&hi2c1, &hi2s2, &huart4, &hadc);
 800712e:	4b46      	ldr	r3, [pc, #280]	@ (8007248 <main+0x1c0>)
 8007130:	4a46      	ldr	r2, [pc, #280]	@ (800724c <main+0x1c4>)
 8007132:	4941      	ldr	r1, [pc, #260]	@ (8007238 <main+0x1b0>)
 8007134:	4846      	ldr	r0, [pc, #280]	@ (8007250 <main+0x1c8>)
 8007136:	f7ff fb57 	bl	80067e8 <Gadget_Init>
  Debug("Clock init done");
 800713a:	4a46      	ldr	r2, [pc, #280]	@ (8007254 <main+0x1cc>)
 800713c:	4b46      	ldr	r3, [pc, #280]	@ (8007258 <main+0x1d0>)
 800713e:	0019      	movs	r1, r3
 8007140:	2003      	movs	r0, #3
 8007142:	f004 faeb 	bl	800b71c <CreateLine>

  /* Infinite loop */
  /* USER CODE BEGIN WHILE */
  while (1) {
	  // Upkeep gadget
    if(testDone && !ESP_Programming && !batteryEmpty){
 8007146:	4b45      	ldr	r3, [pc, #276]	@ (800725c <main+0x1d4>)
 8007148:	781b      	ldrb	r3, [r3, #0]
 800714a:	2b00      	cmp	r3, #0
 800714c:	d019      	beq.n	8007182 <main+0xfa>
 800714e:	4b35      	ldr	r3, [pc, #212]	@ (8007224 <main+0x19c>)
 8007150:	781b      	ldrb	r3, [r3, #0]
 8007152:	2201      	movs	r2, #1
 8007154:	4053      	eors	r3, r2
 8007156:	b2db      	uxtb	r3, r3
 8007158:	2b00      	cmp	r3, #0
 800715a:	d012      	beq.n	8007182 <main+0xfa>
 800715c:	4b40      	ldr	r3, [pc, #256]	@ (8007260 <main+0x1d8>)
 800715e:	781b      	ldrb	r3, [r3, #0]
 8007160:	2201      	movs	r2, #1
 8007162:	4053      	eors	r3, r2
 8007164:	b2db      	uxtb	r3, r3
 8007166:	2b00      	cmp	r3, #0
 8007168:	d00b      	beq.n	8007182 <main+0xfa>
      MeasurementBusy = UpkeepGadget();
 800716a:	f7ff fb6b 	bl	8006844 <UpkeepGadget>
 800716e:	0003      	movs	r3, r0
 8007170:	001a      	movs	r2, r3
 8007172:	4b3c      	ldr	r3, [pc, #240]	@ (8007264 <main+0x1dc>)
 8007174:	701a      	strb	r2, [r3, #0]
      ESP_Status = ESP_Upkeep();
 8007176:	f7fd ffa5 	bl	80050c4 <ESP_Upkeep>
 800717a:	0003      	movs	r3, r0
 800717c:	001a      	movs	r2, r3
 800717e:	4b3a      	ldr	r3, [pc, #232]	@ (8007268 <main+0x1e0>)
 8007180:	701a      	strb	r2, [r3, #0]

    }
    if(!testDone && !ESP_Programming && !batteryEmpty){
 8007182:	4b36      	ldr	r3, [pc, #216]	@ (800725c <main+0x1d4>)
 8007184:	781b      	ldrb	r3, [r3, #0]
 8007186:	2201      	movs	r2, #1
 8007188:	4053      	eors	r3, r2
 800718a:	b2db      	uxtb	r3, r3
 800718c:	2b00      	cmp	r3, #0
 800718e:	d00f      	beq.n	80071b0 <main+0x128>
 8007190:	4b24      	ldr	r3, [pc, #144]	@ (8007224 <main+0x19c>)
 8007192:	781b      	ldrb	r3, [r3, #0]
 8007194:	2201      	movs	r2, #1
 8007196:	4053      	eors	r3, r2
 8007198:	b2db      	uxtb	r3, r3
 800719a:	2b00      	cmp	r3, #0
 800719c:	d008      	beq.n	80071b0 <main+0x128>
 800719e:	4b30      	ldr	r3, [pc, #192]	@ (8007260 <main+0x1d8>)
 80071a0:	781b      	ldrb	r3, [r3, #0]
 80071a2:	2201      	movs	r2, #1
 80071a4:	4053      	eors	r3, r2
 80071a6:	b2db      	uxtb	r3, r3
 80071a8:	2b00      	cmp	r3, #0
 80071aa:	d001      	beq.n	80071b0 <main+0x128>
      Gadget_Test();
 80071ac:	f7ff fb42 	bl	8006834 <Gadget_Test>
    }
    Status_Upkeep();
 80071b0:	f003 fd64 	bl	800ac7c <Status_Upkeep>
    if(TimestampIsReached(batteryReadTimer)){
 80071b4:	4b2d      	ldr	r3, [pc, #180]	@ (800726c <main+0x1e4>)
 80071b6:	681b      	ldr	r3, [r3, #0]
 80071b8:	0018      	movs	r0, r3
 80071ba:	f004 fa59 	bl	800b670 <TimestampIsReached>
 80071be:	1e03      	subs	r3, r0, #0
 80071c0:	d00c      	beq.n	80071dc <main+0x154>
      charge = Battery_Upkeep();
 80071c2:	f003 fd62 	bl	800ac8a <Battery_Upkeep>
 80071c6:	0003      	movs	r3, r0
 80071c8:	001a      	movs	r2, r3
 80071ca:	4b29      	ldr	r3, [pc, #164]	@ (8007270 <main+0x1e8>)
 80071cc:	701a      	strb	r2, [r3, #0]
      batteryReadTimer  = HAL_GetTick() + 60000;
 80071ce:	f004 fe41 	bl	800be54 <HAL_GetTick>
 80071d2:	0003      	movs	r3, r0
 80071d4:	4a27      	ldr	r2, [pc, #156]	@ (8007274 <main+0x1ec>)
 80071d6:	189a      	adds	r2, r3, r2
 80071d8:	4b24      	ldr	r3, [pc, #144]	@ (800726c <main+0x1e4>)
 80071da:	601a      	str	r2, [r3, #0]
    }
    if(charge == BATTERY_LOW || charge == BATTERY_CRITICAL){

    }
    if(charge == BATTERY_CRITICAL && ESP_Status == ESP_STATE_RESET){
 80071dc:	4b24      	ldr	r3, [pc, #144]	@ (8007270 <main+0x1e8>)
 80071de:	781b      	ldrb	r3, [r3, #0]
 80071e0:	2b00      	cmp	r3, #0
 80071e2:	d107      	bne.n	80071f4 <main+0x16c>
 80071e4:	4b20      	ldr	r3, [pc, #128]	@ (8007268 <main+0x1e0>)
 80071e6:	781b      	ldrb	r3, [r3, #0]
 80071e8:	2b09      	cmp	r3, #9
 80071ea:	d103      	bne.n	80071f4 <main+0x16c>
      batteryEmpty = true;
 80071ec:	4b1c      	ldr	r3, [pc, #112]	@ (8007260 <main+0x1d8>)
 80071ee:	2201      	movs	r2, #1
 80071f0:	701a      	strb	r2, [r3, #0]
 80071f2:	e002      	b.n	80071fa <main+0x172>
    }
    else{
      batteryEmpty = false;
 80071f4:	4b1a      	ldr	r3, [pc, #104]	@ (8007260 <main+0x1d8>)
 80071f6:	2200      	movs	r2, #0
 80071f8:	701a      	strb	r2, [r3, #0]
    }
    if(charge == BATTERY_FULL){

    }
    if(TimestampIsReached(timeReadTimer)){
 80071fa:	4b1f      	ldr	r3, [pc, #124]	@ (8007278 <main+0x1f0>)
 80071fc:	681b      	ldr	r3, [r3, #0]
 80071fe:	0018      	movs	r0, r3
 8007200:	f004 fa36 	bl	800b670 <TimestampIsReached>
 8007204:	1e03      	subs	r3, r0, #0
 8007206:	d09e      	beq.n	8007146 <main+0xbe>
      UpdateSystemUptime();
 8007208:	f7fe ff1c 	bl	8006044 <UpdateSystemUptime>
      timeReadTimer  = HAL_GetTick() + 30000;
 800720c:	f004 fe22 	bl	800be54 <HAL_GetTick>
 8007210:	0003      	movs	r3, r0
 8007212:	4a1a      	ldr	r2, [pc, #104]	@ (800727c <main+0x1f4>)
 8007214:	189a      	adds	r2, r3, r2
 8007216:	4b18      	ldr	r3, [pc, #96]	@ (8007278 <main+0x1f0>)
 8007218:	601a      	str	r2, [r3, #0]
    if(testDone && !ESP_Programming && !batteryEmpty){
 800721a:	e794      	b.n	8007146 <main+0xbe>
 800721c:	20002168 	.word	0x20002168
 8007220:	20002128 	.word	0x20002128
 8007224:	20000ed9 	.word	0x20000ed9
 8007228:	20000ee8 	.word	0x20000ee8
 800722c:	200022a0 	.word	0x200022a0
 8007230:	20001198 	.word	0x20001198
 8007234:	200021a8 	.word	0x200021a8
 8007238:	20000e54 	.word	0x20000e54
 800723c:	20000e90 	.word	0x20000e90
 8007240:	0801ff3c 	.word	0x0801ff3c
 8007244:	080208e0 	.word	0x080208e0
 8007248:	20000cbc 	.word	0x20000cbc
 800724c:	20002358 	.word	0x20002358
 8007250:	20000d1c 	.word	0x20000d1c
 8007254:	0801ff50 	.word	0x0801ff50
 8007258:	0801ff60 	.word	0x0801ff60
 800725c:	20000ed8 	.word	0x20000ed8
 8007260:	20000eda 	.word	0x20000eda
 8007264:	20000edb 	.word	0x20000edb
 8007268:	20000ee5 	.word	0x20000ee5
 800726c:	20000edc 	.word	0x20000edc
 8007270:	20000ee4 	.word	0x20000ee4
 8007274:	0000ea60 	.word	0x0000ea60
 8007278:	20000ee0 	.word	0x20000ee0
 800727c:	00007530 	.word	0x00007530

08007280 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8007280:	b590      	push	{r4, r7, lr}
 8007282:	b09d      	sub	sp, #116	@ 0x74
 8007284:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8007286:	2438      	movs	r4, #56	@ 0x38
 8007288:	193b      	adds	r3, r7, r4
 800728a:	0018      	movs	r0, r3
 800728c:	2338      	movs	r3, #56	@ 0x38
 800728e:	001a      	movs	r2, r3
 8007290:	2100      	movs	r1, #0
 8007292:	f015 f911 	bl	801c4b8 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8007296:	2324      	movs	r3, #36	@ 0x24
 8007298:	18fb      	adds	r3, r7, r3
 800729a:	0018      	movs	r0, r3
 800729c:	2314      	movs	r3, #20
 800729e:	001a      	movs	r2, r3
 80072a0:	2100      	movs	r1, #0
 80072a2:	f015 f909 	bl	801c4b8 <memset>
  RCC_PeriphCLKInitTypeDef PeriphClkInit = {0};
 80072a6:	003b      	movs	r3, r7
 80072a8:	0018      	movs	r0, r3
 80072aa:	2324      	movs	r3, #36	@ 0x24
 80072ac:	001a      	movs	r2, r3
 80072ae:	2100      	movs	r1, #0
 80072b0:	f015 f902 	bl	801c4b8 <memset>

  /** Configure the main internal regulator output voltage
  */
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80072b4:	4b34      	ldr	r3, [pc, #208]	@ (8007388 <SystemClock_Config+0x108>)
 80072b6:	681b      	ldr	r3, [r3, #0]
 80072b8:	4a34      	ldr	r2, [pc, #208]	@ (800738c <SystemClock_Config+0x10c>)
 80072ba:	401a      	ands	r2, r3
 80072bc:	4b32      	ldr	r3, [pc, #200]	@ (8007388 <SystemClock_Config+0x108>)
 80072be:	2180      	movs	r1, #128	@ 0x80
 80072c0:	0109      	lsls	r1, r1, #4
 80072c2:	430a      	orrs	r2, r1
 80072c4:	601a      	str	r2, [r3, #0]

  /** Configure LSE Drive Capability
  */
  HAL_PWR_EnableBkUpAccess();
 80072c6:	f00a f9b5 	bl	8011634 <HAL_PWR_EnableBkUpAccess>
  __HAL_RCC_LSEDRIVE_CONFIG(RCC_LSEDRIVE_MEDIUMHIGH);
 80072ca:	4b31      	ldr	r3, [pc, #196]	@ (8007390 <SystemClock_Config+0x110>)
 80072cc:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 80072ce:	4a2f      	ldr	r2, [pc, #188]	@ (800738c <SystemClock_Config+0x10c>)
 80072d0:	401a      	ands	r2, r3
 80072d2:	4b2f      	ldr	r3, [pc, #188]	@ (8007390 <SystemClock_Config+0x110>)
 80072d4:	2180      	movs	r1, #128	@ 0x80
 80072d6:	0149      	lsls	r1, r1, #5
 80072d8:	430a      	orrs	r2, r1
 80072da:	651a      	str	r2, [r3, #80]	@ 0x50

  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI|RCC_OSCILLATORTYPE_LSE
 80072dc:	193b      	adds	r3, r7, r4
 80072de:	2226      	movs	r2, #38	@ 0x26
 80072e0:	601a      	str	r2, [r3, #0]
                              |RCC_OSCILLATORTYPE_HSI48;
  RCC_OscInitStruct.LSEState = RCC_LSE_ON;
 80072e2:	193b      	adds	r3, r7, r4
 80072e4:	2280      	movs	r2, #128	@ 0x80
 80072e6:	0052      	lsls	r2, r2, #1
 80072e8:	609a      	str	r2, [r3, #8]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80072ea:	0021      	movs	r1, r4
 80072ec:	187b      	adds	r3, r7, r1
 80072ee:	2201      	movs	r2, #1
 80072f0:	60da      	str	r2, [r3, #12]
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80072f2:	187b      	adds	r3, r7, r1
 80072f4:	2210      	movs	r2, #16
 80072f6:	611a      	str	r2, [r3, #16]
  RCC_OscInitStruct.HSI48State = RCC_HSI48_ON;
 80072f8:	187b      	adds	r3, r7, r1
 80072fa:	2201      	movs	r2, #1
 80072fc:	619a      	str	r2, [r3, #24]
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_NONE;
 80072fe:	187b      	adds	r3, r7, r1
 8007300:	2200      	movs	r2, #0
 8007302:	629a      	str	r2, [r3, #40]	@ 0x28
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8007304:	187b      	adds	r3, r7, r1
 8007306:	0018      	movs	r0, r3
 8007308:	f00a f9a2 	bl	8011650 <HAL_RCC_OscConfig>
 800730c:	1e03      	subs	r3, r0, #0
 800730e:	d001      	beq.n	8007314 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8007310:	f000 f888 	bl	8007424 <Error_Handler>
  }

  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8007314:	2124      	movs	r1, #36	@ 0x24
 8007316:	187b      	adds	r3, r7, r1
 8007318:	220f      	movs	r2, #15
 800731a:	601a      	str	r2, [r3, #0]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_HSI;
 800731c:	187b      	adds	r3, r7, r1
 800731e:	2201      	movs	r2, #1
 8007320:	605a      	str	r2, [r3, #4]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8007322:	187b      	adds	r3, r7, r1
 8007324:	2200      	movs	r2, #0
 8007326:	609a      	str	r2, [r3, #8]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV1;
 8007328:	187b      	adds	r3, r7, r1
 800732a:	2200      	movs	r2, #0
 800732c:	60da      	str	r2, [r3, #12]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800732e:	187b      	adds	r3, r7, r1
 8007330:	2200      	movs	r2, #0
 8007332:	611a      	str	r2, [r3, #16]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_0) != HAL_OK)
 8007334:	187b      	adds	r3, r7, r1
 8007336:	2100      	movs	r1, #0
 8007338:	0018      	movs	r0, r3
 800733a:	f00a fd5d 	bl	8011df8 <HAL_RCC_ClockConfig>
 800733e:	1e03      	subs	r3, r0, #0
 8007340:	d001      	beq.n	8007346 <SystemClock_Config+0xc6>
  {
    Error_Handler();
 8007342:	f000 f86f 	bl	8007424 <Error_Handler>
  }
  PeriphClkInit.PeriphClockSelection = RCC_PERIPHCLK_USART1|RCC_PERIPHCLK_LPUART1
 8007346:	003b      	movs	r3, r7
 8007348:	226d      	movs	r2, #109	@ 0x6d
 800734a:	601a      	str	r2, [r3, #0]
                              |RCC_PERIPHCLK_I2C1|RCC_PERIPHCLK_RTC
                              |RCC_PERIPHCLK_USB;
  PeriphClkInit.Usart1ClockSelection = RCC_USART1CLKSOURCE_PCLK2;
 800734c:	003b      	movs	r3, r7
 800734e:	2200      	movs	r2, #0
 8007350:	609a      	str	r2, [r3, #8]
  PeriphClkInit.Lpuart1ClockSelection = RCC_LPUART1CLKSOURCE_PCLK1;
 8007352:	003b      	movs	r3, r7
 8007354:	2200      	movs	r2, #0
 8007356:	611a      	str	r2, [r3, #16]
  PeriphClkInit.I2c1ClockSelection = RCC_I2C1CLKSOURCE_PCLK1;
 8007358:	003b      	movs	r3, r7
 800735a:	2200      	movs	r2, #0
 800735c:	615a      	str	r2, [r3, #20]
  PeriphClkInit.RTCClockSelection = RCC_RTCCLKSOURCE_LSE;
 800735e:	003b      	movs	r3, r7
 8007360:	2280      	movs	r2, #128	@ 0x80
 8007362:	0252      	lsls	r2, r2, #9
 8007364:	605a      	str	r2, [r3, #4]
  PeriphClkInit.UsbClockSelection = RCC_USBCLKSOURCE_HSI48;
 8007366:	003b      	movs	r3, r7
 8007368:	2280      	movs	r2, #128	@ 0x80
 800736a:	04d2      	lsls	r2, r2, #19
 800736c:	621a      	str	r2, [r3, #32]
  if (HAL_RCCEx_PeriphCLKConfig(&PeriphClkInit) != HAL_OK)
 800736e:	003b      	movs	r3, r7
 8007370:	0018      	movs	r0, r3
 8007372:	f00a ff65 	bl	8012240 <HAL_RCCEx_PeriphCLKConfig>
 8007376:	1e03      	subs	r3, r0, #0
 8007378:	d001      	beq.n	800737e <SystemClock_Config+0xfe>
  {
    Error_Handler();
 800737a:	f000 f853 	bl	8007424 <Error_Handler>
  }
}
 800737e:	46c0      	nop			@ (mov r8, r8)
 8007380:	46bd      	mov	sp, r7
 8007382:	b01d      	add	sp, #116	@ 0x74
 8007384:	bd90      	pop	{r4, r7, pc}
 8007386:	46c0      	nop			@ (mov r8, r8)
 8007388:	40007000 	.word	0x40007000
 800738c:	ffffe7ff 	.word	0xffffe7ff
 8007390:	40021000 	.word	0x40021000

08007394 <printString>:

/* USER CODE BEGIN 4 */
// Provide a print interface for print_functions.
void printString(const char * str, uint16_t length)
{
 8007394:	b590      	push	{r4, r7, lr}
 8007396:	b083      	sub	sp, #12
 8007398:	af00      	add	r7, sp, #0
 800739a:	6078      	str	r0, [r7, #4]
 800739c:	000a      	movs	r2, r1
 800739e:	1cbb      	adds	r3, r7, #2
 80073a0:	801a      	strh	r2, [r3, #0]
    HAL_UART_Transmit(&huart1, (uint8_t*) str, length, 0xFFFF);
 80073a2:	4c06      	ldr	r4, [pc, #24]	@ (80073bc <printString+0x28>)
 80073a4:	1cbb      	adds	r3, r7, #2
 80073a6:	881a      	ldrh	r2, [r3, #0]
 80073a8:	6879      	ldr	r1, [r7, #4]
 80073aa:	4805      	ldr	r0, [pc, #20]	@ (80073c0 <printString+0x2c>)
 80073ac:	0023      	movs	r3, r4
 80073ae:	f00c f957 	bl	8013660 <HAL_UART_Transmit>
}
 80073b2:	46c0      	nop			@ (mov r8, r8)
 80073b4:	46bd      	mov	sp, r7
 80073b6:	b003      	add	sp, #12
 80073b8:	bd90      	pop	{r4, r7, pc}
 80073ba:	46c0      	nop			@ (mov r8, r8)
 80073bc:	0000ffff 	.word	0x0000ffff
 80073c0:	200022a0 	.word	0x200022a0

080073c4 <HAL_UART_RxCpltCallback>:

void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 80073c4:	b580      	push	{r7, lr}
 80073c6:	b082      	sub	sp, #8
 80073c8:	af00      	add	r7, sp, #0
 80073ca:	6078      	str	r0, [r7, #4]
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1);
 80073cc:	4911      	ldr	r1, [pc, #68]	@ (8007414 <HAL_UART_RxCpltCallback+0x50>)
 80073ce:	4b12      	ldr	r3, [pc, #72]	@ (8007418 <HAL_UART_RxCpltCallback+0x54>)
 80073d0:	2201      	movs	r2, #1
 80073d2:	0018      	movs	r0, r3
 80073d4:	f00c f9e4 	bl	80137a0 <HAL_UART_Receive_IT>
  switch (u1_rx_buff[0]){
 80073d8:	4b0e      	ldr	r3, [pc, #56]	@ (8007414 <HAL_UART_RxCpltCallback+0x50>)
 80073da:	781b      	ldrb	r3, [r3, #0]
 80073dc:	2b3f      	cmp	r3, #63	@ 0x3f
 80073de:	d002      	beq.n	80073e6 <HAL_UART_RxCpltCallback+0x22>
 80073e0:	2b74      	cmp	r3, #116	@ 0x74
 80073e2:	d003      	beq.n	80073ec <HAL_UART_RxCpltCallback+0x28>
 80073e4:	e005      	b.n	80073f2 <HAL_UART_RxCpltCallback+0x2e>

  case (uint8_t)'?':
    showTime();
 80073e6:	f7fe fdcf 	bl	8005f88 <showTime>
    break;
 80073ea:	e009      	b.n	8007400 <HAL_UART_RxCpltCallback+0x3c>
  case (uint8_t)'t':
    forceNTPupdate();
 80073ec:	f7fc f9d6 	bl	800379c <forceNTPupdate>
  break;
 80073f0:	e006      	b.n	8007400 <HAL_UART_RxCpltCallback+0x3c>
  default:
     Error("Error unknown request from Serial UART1 (TTY)\r\n");
 80073f2:	4a0a      	ldr	r2, [pc, #40]	@ (800741c <HAL_UART_RxCpltCallback+0x58>)
 80073f4:	4b0a      	ldr	r3, [pc, #40]	@ (8007420 <HAL_UART_RxCpltCallback+0x5c>)
 80073f6:	0019      	movs	r1, r3
 80073f8:	2001      	movs	r0, #1
 80073fa:	f004 f98f 	bl	800b71c <CreateLine>
  break;
 80073fe:	46c0      	nop			@ (mov r8, r8)
  }
  HAL_UART_Receive_IT(&huart1, u1_rx_buff, 1); //Re-arm the interrupt
 8007400:	4904      	ldr	r1, [pc, #16]	@ (8007414 <HAL_UART_RxCpltCallback+0x50>)
 8007402:	4b05      	ldr	r3, [pc, #20]	@ (8007418 <HAL_UART_RxCpltCallback+0x54>)
 8007404:	2201      	movs	r2, #1
 8007406:	0018      	movs	r0, r3
 8007408:	f00c f9ca 	bl	80137a0 <HAL_UART_Receive_IT>
}
 800740c:	46c0      	nop			@ (mov r8, r8)
 800740e:	46bd      	mov	sp, r7
 8007410:	b002      	add	sp, #8
 8007412:	bd80      	pop	{r7, pc}
 8007414:	20000ee8 	.word	0x20000ee8
 8007418:	200022a0 	.word	0x200022a0
 800741c:	0801ff64 	.word	0x0801ff64
 8007420:	0801ff94 	.word	0x0801ff94

08007424 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8007424:	b580      	push	{r7, lr}
 8007426:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN Error_Handler_Debug */
  /* User can add his own implementation to report the HAL error return state */
  Error("Trapped in Error_Handler, wait for reset");
 8007428:	4a04      	ldr	r2, [pc, #16]	@ (800743c <Error_Handler+0x18>)
 800742a:	4b05      	ldr	r3, [pc, #20]	@ (8007440 <Error_Handler+0x1c>)
 800742c:	0019      	movs	r1, r3
 800742e:	2001      	movs	r0, #1
 8007430:	f004 f974 	bl	800b71c <CreateLine>
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8007434:	b672      	cpsid	i
}
 8007436:	46c0      	nop			@ (mov r8, r8)
  __disable_irq();
  while (1)
 8007438:	46c0      	nop			@ (mov r8, r8)
 800743a:	e7fd      	b.n	8007438 <Error_Handler+0x14>
 800743c:	0801ff98 	.word	0x0801ff98
 8007440:	0801ff94 	.word	0x0801ff94

08007444 <HT_StartMeasurementWrapper>:
static uint32_t MicStamp;

SoundData_t soundData = {0};


static void HT_StartMeasurementWrapper(void) {
 8007444:	b580      	push	{r7, lr}
 8007446:	af00      	add	r7, sp, #0
  HT_StartMeasurement();
 8007448:	f7ff fbc5 	bl	8006bd6 <HT_StartMeasurement>
}
 800744c:	46c0      	nop			@ (mov r8, r8)
 800744e:	46bd      	mov	sp, r7
 8007450:	bd80      	pop	{r7, pc}
	...

08007454 <HT_IsMeasurementDoneWrapper>:

static bool HT_IsMeasurementDoneWrapper(void) {
 8007454:	b580      	push	{r7, lr}
 8007456:	af00      	add	r7, sp, #0
  return HT_GetMeasurementValues(&MeasurementCtx.humidityPerc, &MeasurementCtx.temperature);
 8007458:	4a04      	ldr	r2, [pc, #16]	@ (800746c <HT_IsMeasurementDoneWrapper+0x18>)
 800745a:	4b05      	ldr	r3, [pc, #20]	@ (8007470 <HT_IsMeasurementDoneWrapper+0x1c>)
 800745c:	0011      	movs	r1, r2
 800745e:	0018      	movs	r0, r3
 8007460:	f7ff fbc0 	bl	8006be4 <HT_GetMeasurementValues>
 8007464:	0003      	movs	r3, r0
}
 8007466:	0018      	movs	r0, r3
 8007468:	46bd      	mov	sp, r7
 800746a:	bd80      	pop	{r7, pc}
 800746c:	20000efc 	.word	0x20000efc
 8007470:	20000ef8 	.word	0x20000ef8

08007474 <VOC_StartMeasurementWrapper>:

static void VOC_StartMeasurementWrapper(void) {
 8007474:	b580      	push	{r7, lr}
 8007476:	af00      	add	r7, sp, #0
  Gas_StartMeasurement();
 8007478:	f7ff fa1d 	bl	80068b6 <Gas_StartMeasurement>
}
 800747c:	46c0      	nop			@ (mov r8, r8)
 800747e:	46bd      	mov	sp, r7
 8007480:	bd80      	pop	{r7, pc}
	...

08007484 <VOC_IsMeasurementDoneWrapper>:

static bool VOC_IsMeasurementDoneWrapper(void) {
 8007484:	b580      	push	{r7, lr}
 8007486:	af00      	add	r7, sp, #0
  return Gas_GetMeasurementValues(&MeasurementCtx.vocIndex);
 8007488:	4b03      	ldr	r3, [pc, #12]	@ (8007498 <VOC_IsMeasurementDoneWrapper+0x14>)
 800748a:	0018      	movs	r0, r3
 800748c:	f7ff fa1a 	bl	80068c4 <Gas_GetMeasurementValues>
 8007490:	0003      	movs	r3, r0
}
 8007492:	0018      	movs	r0, r3
 8007494:	46bd      	mov	sp, r7
 8007496:	bd80      	pop	{r7, pc}
 8007498:	20000f00 	.word	0x20000f00

0800749c <PM_StartMeasurementWrapper>:

static void PM_StartMeasurementWrapper(void) {
 800749c:	b580      	push	{r7, lr}
 800749e:	af00      	add	r7, sp, #0
}
 80074a0:	46c0      	nop			@ (mov r8, r8)
 80074a2:	46bd      	mov	sp, r7
 80074a4:	bd80      	pop	{r7, pc}

080074a6 <PM_IsMeasurementDoneWrapper>:

static bool PM_IsMeasurementDoneWrapper(void) {
 80074a6:	b580      	push	{r7, lr}
 80074a8:	af00      	add	r7, sp, #0
  return true;
 80074aa:	2301      	movs	r3, #1
}
 80074ac:	0018      	movs	r0, r3
 80074ae:	46bd      	mov	sp, r7
 80074b0:	bd80      	pop	{r7, pc}

080074b2 <MIC_IsTestMeasurementDoneWrapper>:
void Meas_TestStart(){
  MIC_StartMeasurementWrapper();
}
*/

bool MIC_IsTestMeasurementDoneWrapper(void) {
 80074b2:	b580      	push	{r7, lr}
 80074b4:	af00      	add	r7, sp, #0
  return MIC_TestMeasurementDone();
 80074b6:	f000 fd1b 	bl	8007ef0 <MIC_TestMeasurementDone>
 80074ba:	0003      	movs	r3, r0
}
 80074bc:	0018      	movs	r0, r3
 80074be:	46bd      	mov	sp, r7
 80074c0:	bd80      	pop	{r7, pc}
	...

080074c4 <testInit>:

void testInit(){
 80074c4:	b580      	push	{r7, lr}
 80074c6:	af00      	add	r7, sp, #0
  MeasTest.ESP_Tested = false;
 80074c8:	4b07      	ldr	r3, [pc, #28]	@ (80074e8 <testInit+0x24>)
 80074ca:	2200      	movs	r2, #0
 80074cc:	70da      	strb	r2, [r3, #3]
  MeasTest.MIC_Tested = false;
 80074ce:	4b06      	ldr	r3, [pc, #24]	@ (80074e8 <testInit+0x24>)
 80074d0:	2200      	movs	r2, #0
 80074d2:	709a      	strb	r2, [r3, #2]
//  MeasTest.MIC_Tested = true;
  MeasTest.HT_Tested = false;
 80074d4:	4b04      	ldr	r3, [pc, #16]	@ (80074e8 <testInit+0x24>)
 80074d6:	2200      	movs	r2, #0
 80074d8:	701a      	strb	r2, [r3, #0]
  MeasTest.VOC_Tested = false;
 80074da:	4b03      	ldr	r3, [pc, #12]	@ (80074e8 <testInit+0x24>)
 80074dc:	2200      	movs	r2, #0
 80074de:	705a      	strb	r2, [r3, #1]
}
 80074e0:	46c0      	nop			@ (mov r8, r8)
 80074e2:	46bd      	mov	sp, r7
 80074e4:	bd80      	pop	{r7, pc}
 80074e6:	46c0      	nop			@ (mov r8, r8)
 80074e8:	20000f3c 	.word	0x20000f3c

080074ec <Meas_Init>:
void Meas_Init(I2C_HandleTypeDef* sensorI2C, I2S_HandleTypeDef* micI2s, ADC_HandleTypeDef* ADC_HANDLER) {
 80074ec:	b5b0      	push	{r4, r5, r7, lr}
 80074ee:	b092      	sub	sp, #72	@ 0x48
 80074f0:	af00      	add	r7, sp, #0
 80074f2:	60f8      	str	r0, [r7, #12]
 80074f4:	60b9      	str	r1, [r7, #8]
 80074f6:	607a      	str	r2, [r7, #4]
  //MeasState = MEAS_STATE_INIT;
  testInit();
 80074f8:	f7ff ffe4 	bl	80074c4 <testInit>
  if(MeasEnabled.HT_measurementEnabled || MeasEnabled.VOC_measurementEnabled) {
 80074fc:	4b6e      	ldr	r3, [pc, #440]	@ (80076b8 <Meas_Init+0x1cc>)
 80074fe:	781b      	ldrb	r3, [r3, #0]
 8007500:	2b00      	cmp	r3, #0
 8007502:	d103      	bne.n	800750c <Meas_Init+0x20>
 8007504:	4b6c      	ldr	r3, [pc, #432]	@ (80076b8 <Meas_Init+0x1cc>)
 8007506:	785b      	ldrb	r3, [r3, #1]
 8007508:	2b00      	cmp	r3, #0
 800750a:	d068      	beq.n	80075de <Meas_Init+0xf2>
    I2CSensors_Init(sensorI2C);
 800750c:	68fb      	ldr	r3, [r7, #12]
 800750e:	0018      	movs	r0, r3
 8007510:	f7fe f9c0 	bl	8005894 <I2CSensors_Init>
    if(!HT_DeviceConnected()) {
 8007514:	f7ff fb76 	bl	8006c04 <HT_DeviceConnected>
 8007518:	0003      	movs	r3, r0
 800751a:	001a      	movs	r2, r3
 800751c:	2301      	movs	r3, #1
 800751e:	4053      	eors	r3, r2
 8007520:	b2db      	uxtb	r3, r3
 8007522:	2b00      	cmp	r3, #0
 8007524:	d00c      	beq.n	8007540 <Meas_Init+0x54>
       Error("Humidity / Temperature sensor NOT connected!");
 8007526:	4a65      	ldr	r2, [pc, #404]	@ (80076bc <Meas_Init+0x1d0>)
 8007528:	4b65      	ldr	r3, [pc, #404]	@ (80076c0 <Meas_Init+0x1d4>)
 800752a:	0019      	movs	r1, r3
 800752c:	2001      	movs	r0, #1
 800752e:	f004 f8f5 	bl	800b71c <CreateLine>
       MeasTest.HT_Tested = false;
 8007532:	4b64      	ldr	r3, [pc, #400]	@ (80076c4 <Meas_Init+0x1d8>)
 8007534:	2200      	movs	r2, #0
 8007536:	701a      	strb	r2, [r3, #0]
       MeasEnabled.HT_measurementEnabled = false;
 8007538:	4b5f      	ldr	r3, [pc, #380]	@ (80076b8 <Meas_Init+0x1cc>)
 800753a:	2200      	movs	r2, #0
 800753c:	701a      	strb	r2, [r3, #0]
 800753e:	e008      	b.n	8007552 <Meas_Init+0x66>
       // HT Device NOT connected, turning LED on RED.
    }else {
      // HT Device is connected, turning led on GREEN.
      MeasTest.HT_Tested = true;
 8007540:	4b60      	ldr	r3, [pc, #384]	@ (80076c4 <Meas_Init+0x1d8>)
 8007542:	2201      	movs	r2, #1
 8007544:	701a      	strb	r2, [r3, #0]
      Debug("Humidity / Temperature sensor initialised.");
 8007546:	4a60      	ldr	r2, [pc, #384]	@ (80076c8 <Meas_Init+0x1dc>)
 8007548:	4b60      	ldr	r3, [pc, #384]	@ (80076cc <Meas_Init+0x1e0>)
 800754a:	0019      	movs	r1, r3
 800754c:	2003      	movs	r0, #3
 800754e:	f004 f8e5 	bl	800b71c <CreateLine>
    }
    if(!Gas_DeviceConnected()) {
 8007552:	f7ff f9c4 	bl	80068de <Gas_DeviceConnected>
 8007556:	0003      	movs	r3, r0
 8007558:	001a      	movs	r2, r3
 800755a:	2301      	movs	r3, #1
 800755c:	4053      	eors	r3, r2
 800755e:	b2db      	uxtb	r3, r3
 8007560:	2b00      	cmp	r3, #0
 8007562:	d00c      	beq.n	800757e <Meas_Init+0x92>
      MeasTest.VOC_Tested = false;
 8007564:	4b57      	ldr	r3, [pc, #348]	@ (80076c4 <Meas_Init+0x1d8>)
 8007566:	2200      	movs	r2, #0
 8007568:	705a      	strb	r2, [r3, #1]
       Error("SGP device not connected!");
 800756a:	4a59      	ldr	r2, [pc, #356]	@ (80076d0 <Meas_Init+0x1e4>)
 800756c:	4b54      	ldr	r3, [pc, #336]	@ (80076c0 <Meas_Init+0x1d4>)
 800756e:	0019      	movs	r1, r3
 8007570:	2001      	movs	r0, #1
 8007572:	f004 f8d3 	bl	800b71c <CreateLine>
       MeasEnabled.VOC_measurementEnabled = false;
 8007576:	4b50      	ldr	r3, [pc, #320]	@ (80076b8 <Meas_Init+0x1cc>)
 8007578:	2200      	movs	r2, #0
 800757a:	705a      	strb	r2, [r3, #1]
 800757c:	e008      	b.n	8007590 <Meas_Init+0xa4>
    }else{
      MeasTest.VOC_Tested = true;
 800757e:	4b51      	ldr	r3, [pc, #324]	@ (80076c4 <Meas_Init+0x1d8>)
 8007580:	2201      	movs	r2, #1
 8007582:	705a      	strb	r2, [r3, #1]
      Debug("SGP sensor initialised.");
 8007584:	4a53      	ldr	r2, [pc, #332]	@ (80076d4 <Meas_Init+0x1e8>)
 8007586:	4b51      	ldr	r3, [pc, #324]	@ (80076cc <Meas_Init+0x1e0>)
 8007588:	0019      	movs	r1, r3
 800758a:	2003      	movs	r0, #3
 800758c:	f004 f8c6 	bl	800b71c <CreateLine>
    }
    if(MeasTest.VOC_Tested && MeasTest.HT_Tested){
 8007590:	4b4c      	ldr	r3, [pc, #304]	@ (80076c4 <Meas_Init+0x1d8>)
 8007592:	785b      	ldrb	r3, [r3, #1]
 8007594:	2b00      	cmp	r3, #0
 8007596:	d009      	beq.n	80075ac <Meas_Init+0xc0>
 8007598:	4b4a      	ldr	r3, [pc, #296]	@ (80076c4 <Meas_Init+0x1d8>)
 800759a:	781b      	ldrb	r3, [r3, #0]
 800759c:	2b00      	cmp	r3, #0
 800759e:	d005      	beq.n	80075ac <Meas_Init+0xc0>
      SetDBLED(false, true, false);
 80075a0:	2200      	movs	r2, #0
 80075a2:	2101      	movs	r1, #1
 80075a4:	2000      	movs	r0, #0
 80075a6:	f003 f94f 	bl	800a848 <SetDBLED>
 80075aa:	e018      	b.n	80075de <Meas_Init+0xf2>
    }
    else{
      SetDBLED(true, false, false);
 80075ac:	2200      	movs	r2, #0
 80075ae:	2100      	movs	r1, #0
 80075b0:	2001      	movs	r0, #1
 80075b2:	f003 f949 	bl	800a848 <SetDBLED>
      HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 0);
 80075b6:	4b48      	ldr	r3, [pc, #288]	@ (80076d8 <Meas_Init+0x1ec>)
 80075b8:	2200      	movs	r2, #0
 80075ba:	2101      	movs	r1, #1
 80075bc:	0018      	movs	r0, r3
 80075be:	f005 fea8 	bl	800d312 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
 80075c2:	2380      	movs	r3, #128	@ 0x80
 80075c4:	005b      	lsls	r3, r3, #1
 80075c6:	4844      	ldr	r0, [pc, #272]	@ (80076d8 <Meas_Init+0x1ec>)
 80075c8:	2201      	movs	r2, #1
 80075ca:	0019      	movs	r1, r3
 80075cc:	f005 fea1 	bl	800d312 <HAL_GPIO_WritePin>
      HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
 80075d0:	2380      	movs	r3, #128	@ 0x80
 80075d2:	009b      	lsls	r3, r3, #2
 80075d4:	4840      	ldr	r0, [pc, #256]	@ (80076d8 <Meas_Init+0x1ec>)
 80075d6:	2201      	movs	r2, #1
 80075d8:	0019      	movs	r1, r3
 80075da:	f005 fe9a 	bl	800d312 <HAL_GPIO_WritePin>
    }
  }
  if(MeasEnabled.MIC_measurementEnabled) {
 80075de:	4b36      	ldr	r3, [pc, #216]	@ (80076b8 <Meas_Init+0x1cc>)
 80075e0:	78db      	ldrb	r3, [r3, #3]
 80075e2:	2b00      	cmp	r3, #0
 80075e4:	d008      	beq.n	80075f8 <Meas_Init+0x10c>
//    MIC_Init(micI2s);
//    Meas_TestStart();
    Info("Meas_Init calls enableMicrophone");
 80075e6:	4a3d      	ldr	r2, [pc, #244]	@ (80076dc <Meas_Init+0x1f0>)
 80075e8:	4b3d      	ldr	r3, [pc, #244]	@ (80076e0 <Meas_Init+0x1f4>)
 80075ea:	0019      	movs	r1, r3
 80075ec:	2002      	movs	r0, #2
 80075ee:	f004 f895 	bl	800b71c <CreateLine>
          enableMicrophone(true);
 80075f2:	2001      	movs	r0, #1
 80075f4:	f002 fa7c 	bl	8009af0 <enableMicrophone>

  }
  uint8_t offset = 0;
 80075f8:	2547      	movs	r5, #71	@ 0x47
 80075fa:	197b      	adds	r3, r7, r5
 80075fc:	2200      	movs	r2, #0
 80075fe:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {HT_StartMeasurementWrapper, HT_IsMeasurementDoneWrapper, &MeasurementCtx.HT_measurementDone, MeasEnabled.HT_measurementEnabled};
 8007600:	197b      	adds	r3, r7, r5
 8007602:	781b      	ldrb	r3, [r3, #0]
 8007604:	197a      	adds	r2, r7, r5
 8007606:	1c59      	adds	r1, r3, #1
 8007608:	7011      	strb	r1, [r2, #0]
 800760a:	4a2b      	ldr	r2, [pc, #172]	@ (80076b8 <Meas_Init+0x1cc>)
 800760c:	7814      	ldrb	r4, [r2, #0]
 800760e:	4a35      	ldr	r2, [pc, #212]	@ (80076e4 <Meas_Init+0x1f8>)
 8007610:	0119      	lsls	r1, r3, #4
 8007612:	4835      	ldr	r0, [pc, #212]	@ (80076e8 <Meas_Init+0x1fc>)
 8007614:	5088      	str	r0, [r1, r2]
 8007616:	4933      	ldr	r1, [pc, #204]	@ (80076e4 <Meas_Init+0x1f8>)
 8007618:	011a      	lsls	r2, r3, #4
 800761a:	188a      	adds	r2, r1, r2
 800761c:	3204      	adds	r2, #4
 800761e:	4933      	ldr	r1, [pc, #204]	@ (80076ec <Meas_Init+0x200>)
 8007620:	6011      	str	r1, [r2, #0]
 8007622:	4930      	ldr	r1, [pc, #192]	@ (80076e4 <Meas_Init+0x1f8>)
 8007624:	011a      	lsls	r2, r3, #4
 8007626:	188a      	adds	r2, r1, r2
 8007628:	3208      	adds	r2, #8
 800762a:	4931      	ldr	r1, [pc, #196]	@ (80076f0 <Meas_Init+0x204>)
 800762c:	6011      	str	r1, [r2, #0]
 800762e:	4a2d      	ldr	r2, [pc, #180]	@ (80076e4 <Meas_Init+0x1f8>)
 8007630:	011b      	lsls	r3, r3, #4
 8007632:	18d3      	adds	r3, r2, r3
 8007634:	330c      	adds	r3, #12
 8007636:	1c22      	adds	r2, r4, #0
 8007638:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {VOC_StartMeasurementWrapper, VOC_IsMeasurementDoneWrapper, &MeasurementCtx.VOC_measurementDone, MeasEnabled.VOC_measurementEnabled};
 800763a:	197b      	adds	r3, r7, r5
 800763c:	781b      	ldrb	r3, [r3, #0]
 800763e:	197a      	adds	r2, r7, r5
 8007640:	1c59      	adds	r1, r3, #1
 8007642:	7011      	strb	r1, [r2, #0]
 8007644:	4a1c      	ldr	r2, [pc, #112]	@ (80076b8 <Meas_Init+0x1cc>)
 8007646:	7854      	ldrb	r4, [r2, #1]
 8007648:	4a26      	ldr	r2, [pc, #152]	@ (80076e4 <Meas_Init+0x1f8>)
 800764a:	0119      	lsls	r1, r3, #4
 800764c:	4829      	ldr	r0, [pc, #164]	@ (80076f4 <Meas_Init+0x208>)
 800764e:	5088      	str	r0, [r1, r2]
 8007650:	4924      	ldr	r1, [pc, #144]	@ (80076e4 <Meas_Init+0x1f8>)
 8007652:	011a      	lsls	r2, r3, #4
 8007654:	188a      	adds	r2, r1, r2
 8007656:	3204      	adds	r2, #4
 8007658:	4927      	ldr	r1, [pc, #156]	@ (80076f8 <Meas_Init+0x20c>)
 800765a:	6011      	str	r1, [r2, #0]
 800765c:	4921      	ldr	r1, [pc, #132]	@ (80076e4 <Meas_Init+0x1f8>)
 800765e:	011a      	lsls	r2, r3, #4
 8007660:	188a      	adds	r2, r1, r2
 8007662:	3208      	adds	r2, #8
 8007664:	4925      	ldr	r1, [pc, #148]	@ (80076fc <Meas_Init+0x210>)
 8007666:	6011      	str	r1, [r2, #0]
 8007668:	4a1e      	ldr	r2, [pc, #120]	@ (80076e4 <Meas_Init+0x1f8>)
 800766a:	011b      	lsls	r3, r3, #4
 800766c:	18d3      	adds	r3, r2, r3
 800766e:	330c      	adds	r3, #12
 8007670:	1c22      	adds	r2, r4, #0
 8007672:	701a      	strb	r2, [r3, #0]
  Measurements[offset++] = (MeasurementParameters) {PM_StartMeasurementWrapper, PM_IsMeasurementDoneWrapper, &MeasurementCtx.PM_measurementDone, MeasEnabled.PM_measurementEnabled};
 8007674:	197b      	adds	r3, r7, r5
 8007676:	781b      	ldrb	r3, [r3, #0]
 8007678:	197a      	adds	r2, r7, r5
 800767a:	1c59      	adds	r1, r3, #1
 800767c:	7011      	strb	r1, [r2, #0]
 800767e:	4a0e      	ldr	r2, [pc, #56]	@ (80076b8 <Meas_Init+0x1cc>)
 8007680:	7894      	ldrb	r4, [r2, #2]
 8007682:	4a18      	ldr	r2, [pc, #96]	@ (80076e4 <Meas_Init+0x1f8>)
 8007684:	0119      	lsls	r1, r3, #4
 8007686:	481e      	ldr	r0, [pc, #120]	@ (8007700 <Meas_Init+0x214>)
 8007688:	5088      	str	r0, [r1, r2]
 800768a:	4916      	ldr	r1, [pc, #88]	@ (80076e4 <Meas_Init+0x1f8>)
 800768c:	011a      	lsls	r2, r3, #4
 800768e:	188a      	adds	r2, r1, r2
 8007690:	3204      	adds	r2, #4
 8007692:	491c      	ldr	r1, [pc, #112]	@ (8007704 <Meas_Init+0x218>)
 8007694:	6011      	str	r1, [r2, #0]
 8007696:	4913      	ldr	r1, [pc, #76]	@ (80076e4 <Meas_Init+0x1f8>)
 8007698:	011a      	lsls	r2, r3, #4
 800769a:	188a      	adds	r2, r1, r2
 800769c:	3208      	adds	r2, #8
 800769e:	491a      	ldr	r1, [pc, #104]	@ (8007708 <Meas_Init+0x21c>)
 80076a0:	6011      	str	r1, [r2, #0]
 80076a2:	4a10      	ldr	r2, [pc, #64]	@ (80076e4 <Meas_Init+0x1f8>)
 80076a4:	011b      	lsls	r3, r3, #4
 80076a6:	18d3      	adds	r3, r2, r3
 80076a8:	330c      	adds	r3, #12
 80076aa:	1c22      	adds	r2, r4, #0
 80076ac:	701a      	strb	r2, [r3, #0]
//  Measurements[offset++] = (MeasurementParameters) {MIC_StartMeasurementWrapper, MIC_IsMeasurementDoneWrapper, &MeasurementCtx.MIC_measurementDone, MeasEnabled.MIC_measurementEnabled};
}
 80076ae:	46c0      	nop			@ (mov r8, r8)
 80076b0:	46bd      	mov	sp, r7
 80076b2:	b012      	add	sp, #72	@ 0x48
 80076b4:	bdb0      	pop	{r4, r5, r7, pc}
 80076b6:	46c0      	nop			@ (mov r8, r8)
 80076b8:	20000f38 	.word	0x20000f38
 80076bc:	0801ffc4 	.word	0x0801ffc4
 80076c0:	0801fff4 	.word	0x0801fff4
 80076c4:	20000f3c 	.word	0x20000f3c
 80076c8:	0801fff8 	.word	0x0801fff8
 80076cc:	08020024 	.word	0x08020024
 80076d0:	08020028 	.word	0x08020028
 80076d4:	08020044 	.word	0x08020044
 80076d8:	50000400 	.word	0x50000400
 80076dc:	0802005c 	.word	0x0802005c
 80076e0:	08020080 	.word	0x08020080
 80076e4:	20000f08 	.word	0x20000f08
 80076e8:	08007445 	.word	0x08007445
 80076ec:	08007455 	.word	0x08007455
 80076f0:	20000f04 	.word	0x20000f04
 80076f4:	08007475 	.word	0x08007475
 80076f8:	08007485 	.word	0x08007485
 80076fc:	20000f05 	.word	0x20000f05
 8007700:	0800749d 	.word	0x0800749d
 8007704:	080074a7 	.word	0x080074a7
 8007708:	20000f06 	.word	0x20000f06

0800770c <StartMeasurements>:

void StartMeasurements(void) {
 800770c:	b580      	push	{r7, lr}
 800770e:	af00      	add	r7, sp, #0
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8007710:	4b10      	ldr	r3, [pc, #64]	@ (8007754 <StartMeasurements+0x48>)
 8007712:	2200      	movs	r2, #0
 8007714:	701a      	strb	r2, [r3, #0]
 8007716:	e015      	b.n	8007744 <StartMeasurements+0x38>
    if(Measurements[CurrentMeasurementIndex].enabled) {
 8007718:	4b0e      	ldr	r3, [pc, #56]	@ (8007754 <StartMeasurements+0x48>)
 800771a:	781b      	ldrb	r3, [r3, #0]
 800771c:	4a0e      	ldr	r2, [pc, #56]	@ (8007758 <StartMeasurements+0x4c>)
 800771e:	011b      	lsls	r3, r3, #4
 8007720:	18d3      	adds	r3, r2, r3
 8007722:	330c      	adds	r3, #12
 8007724:	781b      	ldrb	r3, [r3, #0]
 8007726:	2b00      	cmp	r3, #0
 8007728:	d006      	beq.n	8007738 <StartMeasurements+0x2c>
      Measurements[CurrentMeasurementIndex].startFunc();
 800772a:	4b0a      	ldr	r3, [pc, #40]	@ (8007754 <StartMeasurements+0x48>)
 800772c:	781b      	ldrb	r3, [r3, #0]
 800772e:	001a      	movs	r2, r3
 8007730:	4b09      	ldr	r3, [pc, #36]	@ (8007758 <StartMeasurements+0x4c>)
 8007732:	0112      	lsls	r2, r2, #4
 8007734:	58d3      	ldr	r3, [r2, r3]
 8007736:	4798      	blx	r3
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8007738:	4b06      	ldr	r3, [pc, #24]	@ (8007754 <StartMeasurements+0x48>)
 800773a:	781b      	ldrb	r3, [r3, #0]
 800773c:	3301      	adds	r3, #1
 800773e:	b2da      	uxtb	r2, r3
 8007740:	4b04      	ldr	r3, [pc, #16]	@ (8007754 <StartMeasurements+0x48>)
 8007742:	701a      	strb	r2, [r3, #0]
 8007744:	4b03      	ldr	r3, [pc, #12]	@ (8007754 <StartMeasurements+0x48>)
 8007746:	781b      	ldrb	r3, [r3, #0]
 8007748:	2b02      	cmp	r3, #2
 800774a:	d9e5      	bls.n	8007718 <StartMeasurements+0xc>
    }
  }
}
 800774c:	46c0      	nop			@ (mov r8, r8)
 800774e:	46c0      	nop			@ (mov r8, r8)
 8007750:	46bd      	mov	sp, r7
 8007752:	bd80      	pop	{r7, pc}
 8007754:	20000f40 	.word	0x20000f40
 8007758:	20000f08 	.word	0x20000f08

0800775c <Meas_Test>:

void Meas_Test(){
 800775c:	b580      	push	{r7, lr}
 800775e:	af00      	add	r7, sp, #0
  if(!MeasTest.ESP_Tested){
 8007760:	4b23      	ldr	r3, [pc, #140]	@ (80077f0 <Meas_Test+0x94>)
 8007762:	78db      	ldrb	r3, [r3, #3]
 8007764:	2201      	movs	r2, #1
 8007766:	4053      	eors	r3, r2
 8007768:	b2db      	uxtb	r3, r3
 800776a:	2b00      	cmp	r3, #0
 800776c:	d001      	beq.n	8007772 <Meas_Test+0x16>
    ESP_WakeTest();
 800776e:	f7fd fb93 	bl	8004e98 <ESP_WakeTest>
  }

  if(!MeasTest.MIC_Tested){
 8007772:	4b1f      	ldr	r3, [pc, #124]	@ (80077f0 <Meas_Test+0x94>)
 8007774:	789b      	ldrb	r3, [r3, #2]
 8007776:	2201      	movs	r2, #1
 8007778:	4053      	eors	r3, r2
 800777a:	b2db      	uxtb	r3, r3
 800777c:	2b00      	cmp	r3, #0
 800777e:	d01b      	beq.n	80077b8 <Meas_Test+0x5c>
    if(MIC_IsTestMeasurementDoneWrapper()){
 8007780:	f7ff fe97 	bl	80074b2 <MIC_IsTestMeasurementDoneWrapper>
 8007784:	1e03      	subs	r3, r0, #0
 8007786:	d00b      	beq.n	80077a0 <Meas_Test+0x44>
//      Info("In Meas_Test return of MIC_IsTestMeasurementDoneWrapper = 1");
      MeasTest.MIC_Tested = true;
 8007788:	4b19      	ldr	r3, [pc, #100]	@ (80077f0 <Meas_Test+0x94>)
 800778a:	2201      	movs	r2, #1
 800778c:	709a      	strb	r2, [r3, #2]
      SetStatusLED(LED_OFF, LED_ON, LED_OFF);
 800778e:	23fa      	movs	r3, #250	@ 0xfa
 8007790:	011a      	lsls	r2, r3, #4
 8007792:	4918      	ldr	r1, [pc, #96]	@ (80077f4 <Meas_Test+0x98>)
 8007794:	23fa      	movs	r3, #250	@ 0xfa
 8007796:	011b      	lsls	r3, r3, #4
 8007798:	0018      	movs	r0, r3
 800779a:	f003 f821 	bl	800a7e0 <SetStatusLED>
 800779e:	e00b      	b.n	80077b8 <Meas_Test+0x5c>
    }
    else{
      if (micSettlingComplete()) {
 80077a0:	f002 f982 	bl	8009aa8 <micSettlingComplete>
 80077a4:	1e03      	subs	r3, r0, #0
 80077a6:	d007      	beq.n	80077b8 <Meas_Test+0x5c>
        SetStatusLED(LED_ON, LED_OFF, LED_OFF);
 80077a8:	23fa      	movs	r3, #250	@ 0xfa
 80077aa:	011a      	lsls	r2, r3, #4
 80077ac:	23fa      	movs	r3, #250	@ 0xfa
 80077ae:	011b      	lsls	r3, r3, #4
 80077b0:	4810      	ldr	r0, [pc, #64]	@ (80077f4 <Meas_Test+0x98>)
 80077b2:	0019      	movs	r1, r3
 80077b4:	f003 f814 	bl	800a7e0 <SetStatusLED>
      }
    }
  }
//  print("HT_Tested: %d, VOC_Tested: %d, ESP_Tested: %d, MIC_Tested: %d\r\n", MeasTest.HT_Tested, MeasTest.VOC_Tested, MeasTest.ESP_Tested, MeasTest.MIC_Tested);
  if(MeasTest.HT_Tested && MeasTest.VOC_Tested && MeasTest.ESP_Tested && MeasTest.MIC_Tested){
 80077b8:	4b0d      	ldr	r3, [pc, #52]	@ (80077f0 <Meas_Test+0x94>)
 80077ba:	781b      	ldrb	r3, [r3, #0]
 80077bc:	2b00      	cmp	r3, #0
 80077be:	d013      	beq.n	80077e8 <Meas_Test+0x8c>
 80077c0:	4b0b      	ldr	r3, [pc, #44]	@ (80077f0 <Meas_Test+0x94>)
 80077c2:	785b      	ldrb	r3, [r3, #1]
 80077c4:	2b00      	cmp	r3, #0
 80077c6:	d00f      	beq.n	80077e8 <Meas_Test+0x8c>
 80077c8:	4b09      	ldr	r3, [pc, #36]	@ (80077f0 <Meas_Test+0x94>)
 80077ca:	78db      	ldrb	r3, [r3, #3]
 80077cc:	2b00      	cmp	r3, #0
 80077ce:	d00b      	beq.n	80077e8 <Meas_Test+0x8c>
 80077d0:	4b07      	ldr	r3, [pc, #28]	@ (80077f0 <Meas_Test+0x94>)
 80077d2:	789b      	ldrb	r3, [r3, #2]
 80077d4:	2b00      	cmp	r3, #0
 80077d6:	d007      	beq.n	80077e8 <Meas_Test+0x8c>
    Info("Test completed");
 80077d8:	4a07      	ldr	r2, [pc, #28]	@ (80077f8 <Meas_Test+0x9c>)
 80077da:	4b08      	ldr	r3, [pc, #32]	@ (80077fc <Meas_Test+0xa0>)
 80077dc:	0019      	movs	r1, r3
 80077de:	2002      	movs	r0, #2
 80077e0:	f003 ff9c 	bl	800b71c <CreateLine>
    SetTestDone();
 80077e4:	f7ff fc0c 	bl	8007000 <SetTestDone>
  }
}
 80077e8:	46c0      	nop			@ (mov r8, r8)
 80077ea:	46bd      	mov	sp, r7
 80077ec:	bd80      	pop	{r7, pc}
 80077ee:	46c0      	nop			@ (mov r8, r8)
 80077f0:	20000f3c 	.word	0x20000f3c
 80077f4:	00000bb8 	.word	0x00000bb8
 80077f8:	08020084 	.word	0x08020084
 80077fc:	08020080 	.word	0x08020080

08007800 <ResetMeasurements>:
void ResetMeasurements(void) {
 8007800:	b580      	push	{r7, lr}
 8007802:	af00      	add	r7, sp, #0
  MeasurementCtx.humidityPerc = 0;
 8007804:	4b0b      	ldr	r3, [pc, #44]	@ (8007834 <ResetMeasurements+0x34>)
 8007806:	2200      	movs	r2, #0
 8007808:	601a      	str	r2, [r3, #0]
  MeasurementCtx.temperature = 0;
 800780a:	4b0a      	ldr	r3, [pc, #40]	@ (8007834 <ResetMeasurements+0x34>)
 800780c:	2200      	movs	r2, #0
 800780e:	605a      	str	r2, [r3, #4]
  MeasurementCtx.vocIndex = 0;
 8007810:	4b08      	ldr	r3, [pc, #32]	@ (8007834 <ResetMeasurements+0x34>)
 8007812:	2200      	movs	r2, #0
 8007814:	609a      	str	r2, [r3, #8]
  MeasurementCtx.HT_measurementDone = false;
 8007816:	4b07      	ldr	r3, [pc, #28]	@ (8007834 <ResetMeasurements+0x34>)
 8007818:	2200      	movs	r2, #0
 800781a:	731a      	strb	r2, [r3, #12]
  MeasurementCtx.VOC_measurementDone = false;
 800781c:	4b05      	ldr	r3, [pc, #20]	@ (8007834 <ResetMeasurements+0x34>)
 800781e:	2200      	movs	r2, #0
 8007820:	735a      	strb	r2, [r3, #13]
  MeasurementCtx.PM_measurementDone = false;
 8007822:	4b04      	ldr	r3, [pc, #16]	@ (8007834 <ResetMeasurements+0x34>)
 8007824:	2200      	movs	r2, #0
 8007826:	739a      	strb	r2, [r3, #14]
  MeasurementCtx.MIC_measurementDone = false;
 8007828:	4b02      	ldr	r3, [pc, #8]	@ (8007834 <ResetMeasurements+0x34>)
 800782a:	2200      	movs	r2, #0
 800782c:	73da      	strb	r2, [r3, #15]
}
 800782e:	46c0      	nop			@ (mov r8, r8)
 8007830:	46bd      	mov	sp, r7
 8007832:	bd80      	pop	{r7, pc}
 8007834:	20000ef8 	.word	0x20000ef8

08007838 <MeasurementsCompleted>:

bool MeasurementsCompleted(void) {
 8007838:	b580      	push	{r7, lr}
 800783a:	af00      	add	r7, sp, #0
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 800783c:	4b18      	ldr	r3, [pc, #96]	@ (80078a0 <MeasurementsCompleted+0x68>)
 800783e:	2200      	movs	r2, #0
 8007840:	701a      	strb	r2, [r3, #0]
 8007842:	e024      	b.n	800788e <MeasurementsCompleted+0x56>
    if(Measurements[CurrentMeasurementIndex].enabled) {
 8007844:	4b16      	ldr	r3, [pc, #88]	@ (80078a0 <MeasurementsCompleted+0x68>)
 8007846:	781b      	ldrb	r3, [r3, #0]
 8007848:	4a16      	ldr	r2, [pc, #88]	@ (80078a4 <MeasurementsCompleted+0x6c>)
 800784a:	011b      	lsls	r3, r3, #4
 800784c:	18d3      	adds	r3, r2, r3
 800784e:	330c      	adds	r3, #12
 8007850:	781b      	ldrb	r3, [r3, #0]
 8007852:	2b00      	cmp	r3, #0
 8007854:	d015      	beq.n	8007882 <MeasurementsCompleted+0x4a>
      if(Measurements[CurrentMeasurementIndex].doneFunc()) {
 8007856:	4b12      	ldr	r3, [pc, #72]	@ (80078a0 <MeasurementsCompleted+0x68>)
 8007858:	781b      	ldrb	r3, [r3, #0]
 800785a:	4a12      	ldr	r2, [pc, #72]	@ (80078a4 <MeasurementsCompleted+0x6c>)
 800785c:	011b      	lsls	r3, r3, #4
 800785e:	18d3      	adds	r3, r2, r3
 8007860:	3304      	adds	r3, #4
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	4798      	blx	r3
 8007866:	1e03      	subs	r3, r0, #0
 8007868:	d009      	beq.n	800787e <MeasurementsCompleted+0x46>
        *Measurements[CurrentMeasurementIndex].doneFlag = true;
 800786a:	4b0d      	ldr	r3, [pc, #52]	@ (80078a0 <MeasurementsCompleted+0x68>)
 800786c:	781b      	ldrb	r3, [r3, #0]
 800786e:	4a0d      	ldr	r2, [pc, #52]	@ (80078a4 <MeasurementsCompleted+0x6c>)
 8007870:	011b      	lsls	r3, r3, #4
 8007872:	18d3      	adds	r3, r2, r3
 8007874:	3308      	adds	r3, #8
 8007876:	681b      	ldr	r3, [r3, #0]
 8007878:	2201      	movs	r2, #1
 800787a:	701a      	strb	r2, [r3, #0]
 800787c:	e001      	b.n	8007882 <MeasurementsCompleted+0x4a>
      }else {
        return false;
 800787e:	2300      	movs	r3, #0
 8007880:	e00a      	b.n	8007898 <MeasurementsCompleted+0x60>
  for(CurrentMeasurementIndex = 0; CurrentMeasurementIndex < MEAS_MEASUREMENT_COUNT; CurrentMeasurementIndex++) {
 8007882:	4b07      	ldr	r3, [pc, #28]	@ (80078a0 <MeasurementsCompleted+0x68>)
 8007884:	781b      	ldrb	r3, [r3, #0]
 8007886:	3301      	adds	r3, #1
 8007888:	b2da      	uxtb	r2, r3
 800788a:	4b05      	ldr	r3, [pc, #20]	@ (80078a0 <MeasurementsCompleted+0x68>)
 800788c:	701a      	strb	r2, [r3, #0]
 800788e:	4b04      	ldr	r3, [pc, #16]	@ (80078a0 <MeasurementsCompleted+0x68>)
 8007890:	781b      	ldrb	r3, [r3, #0]
 8007892:	2b02      	cmp	r3, #2
 8007894:	d9d6      	bls.n	8007844 <MeasurementsCompleted+0xc>
      }
    }
  }
  return true;
 8007896:	2301      	movs	r3, #1
}
 8007898:	0018      	movs	r0, r3
 800789a:	46bd      	mov	sp, r7
 800789c:	bd80      	pop	{r7, pc}
 800789e:	46c0      	nop			@ (mov r8, r8)
 80078a0:	20000f40 	.word	0x20000f40
 80078a4:	20000f08 	.word	0x20000f08

080078a8 <Mic_Upkeep>:


MicrophoneState Mic_Upkeep(){
 80078a8:	b590      	push	{r4, r7, lr}
 80078aa:	b085      	sub	sp, #20
 80078ac:	af02      	add	r7, sp, #8
  static MicrophoneState MicState = MIC_STATE_INIT;
  switch(MicState){
 80078ae:	4b7d      	ldr	r3, [pc, #500]	@ (8007aa4 <Mic_Upkeep+0x1fc>)
 80078b0:	781b      	ldrb	r3, [r3, #0]
 80078b2:	2b03      	cmp	r3, #3
 80078b4:	d100      	bne.n	80078b8 <Mic_Upkeep+0x10>
 80078b6:	e0c0      	b.n	8007a3a <Mic_Upkeep+0x192>
 80078b8:	dd00      	ble.n	80078bc <Mic_Upkeep+0x14>
 80078ba:	e0dd      	b.n	8007a78 <Mic_Upkeep+0x1d0>
 80078bc:	2b02      	cmp	r3, #2
 80078be:	d037      	beq.n	8007930 <Mic_Upkeep+0x88>
 80078c0:	dd00      	ble.n	80078c4 <Mic_Upkeep+0x1c>
 80078c2:	e0d9      	b.n	8007a78 <Mic_Upkeep+0x1d0>
 80078c4:	2b00      	cmp	r3, #0
 80078c6:	d002      	beq.n	80078ce <Mic_Upkeep+0x26>
 80078c8:	2b01      	cmp	r3, #1
 80078ca:	d014      	beq.n	80078f6 <Mic_Upkeep+0x4e>
 80078cc:	e0d4      	b.n	8007a78 <Mic_Upkeep+0x1d0>

  case MIC_STATE_INIT:
    //reset if necesarry
    if (!enableMicrophone(true))
 80078ce:	2001      	movs	r0, #1
 80078d0:	f002 f90e 	bl	8009af0 <enableMicrophone>
 80078d4:	0003      	movs	r3, r0
 80078d6:	001a      	movs	r2, r3
 80078d8:	2301      	movs	r3, #1
 80078da:	4053      	eors	r3, r2
 80078dc:	b2db      	uxtb	r3, r3
 80078de:	2b00      	cmp	r3, #0
 80078e0:	d005      	beq.n	80078ee <Mic_Upkeep+0x46>
      {
        errorHandler(__func__, __LINE__, __FILE__);
 80078e2:	4a71      	ldr	r2, [pc, #452]	@ (8007aa8 <Mic_Upkeep+0x200>)
 80078e4:	4b71      	ldr	r3, [pc, #452]	@ (8007aac <Mic_Upkeep+0x204>)
 80078e6:	21d4      	movs	r1, #212	@ 0xd4
 80078e8:	0018      	movs	r0, r3
 80078ea:	f003 ffcb 	bl	800b884 <errorHandler>
      }
  MicState = MIC_STATE_START_MEASUREMENT;
 80078ee:	4b6d      	ldr	r3, [pc, #436]	@ (8007aa4 <Mic_Upkeep+0x1fc>)
 80078f0:	2201      	movs	r2, #1
 80078f2:	701a      	strb	r2, [r3, #0]
//  Info("MIC_STATE_START_MEASUREMENT\r\n");
    break;
 80078f4:	e0cf      	b.n	8007a96 <Mic_Upkeep+0x1ee>

  case MIC_STATE_START_MEASUREMENT:
//    MIC_StartMeasurementWrapper();
    if (micSettlingComplete() || DataReady) {
 80078f6:	f002 f8d7 	bl	8009aa8 <micSettlingComplete>
 80078fa:	1e03      	subs	r3, r0, #0
 80078fc:	d105      	bne.n	800790a <Mic_Upkeep+0x62>
 80078fe:	4b6c      	ldr	r3, [pc, #432]	@ (8007ab0 <Mic_Upkeep+0x208>)
 8007900:	781b      	ldrb	r3, [r3, #0]
 8007902:	b2db      	uxtb	r3, r3
 8007904:	2b00      	cmp	r3, #0
 8007906:	d100      	bne.n	800790a <Mic_Upkeep+0x62>
 8007908:	e0c0      	b.n	8007a8c <Mic_Upkeep+0x1e4>
      if (!startSPLcalculation())
 800790a:	f002 f95b 	bl	8009bc4 <startSPLcalculation>
 800790e:	0003      	movs	r3, r0
 8007910:	001a      	movs	r2, r3
 8007912:	2301      	movs	r3, #1
 8007914:	4053      	eors	r3, r2
 8007916:	b2db      	uxtb	r3, r3
 8007918:	2b00      	cmp	r3, #0
 800791a:	d005      	beq.n	8007928 <Mic_Upkeep+0x80>
      {
//        Info("startSPLcalculation returns false");
        errorHandler(__func__, __LINE__, __FILE__);
 800791c:	4a62      	ldr	r2, [pc, #392]	@ (8007aa8 <Mic_Upkeep+0x200>)
 800791e:	4b63      	ldr	r3, [pc, #396]	@ (8007aac <Mic_Upkeep+0x204>)
 8007920:	21e0      	movs	r1, #224	@ 0xe0
 8007922:	0018      	movs	r0, r3
 8007924:	f003 ffae 	bl	800b884 <errorHandler>
      }
      MicState = MIC_STATE_WAIT_FOR_COMPLETION;
 8007928:	4b5e      	ldr	r3, [pc, #376]	@ (8007aa4 <Mic_Upkeep+0x1fc>)
 800792a:	2202      	movs	r2, #2
 800792c:	701a      	strb	r2, [r3, #0]
//      Info("MIC_STATE_WAIT_FOR_COMPLETION\r\n");
    }
    break;
 800792e:	e0ad      	b.n	8007a8c <Mic_Upkeep+0x1e4>
  case MIC_STATE_WAIT_FOR_COMPLETION:
//    if(MIC_IsMeasurementDoneWrapper()){
//      MicState = MIC_STATE_WAIT;
//      MicStamp = HAL_GetTick() + 1000;
//    }
    if (getSoundData(&soundData, true, true)) {
 8007930:	4b60      	ldr	r3, [pc, #384]	@ (8007ab4 <Mic_Upkeep+0x20c>)
 8007932:	2201      	movs	r2, #1
 8007934:	2101      	movs	r1, #1
 8007936:	0018      	movs	r0, r3
 8007938:	f001 ff98 	bl	800986c <getSoundData>
 800793c:	1e03      	subs	r3, r0, #0
 800793e:	d100      	bne.n	8007942 <Mic_Upkeep+0x9a>
 8007940:	e0a6      	b.n	8007a90 <Mic_Upkeep+0x1e8>
      clearMaximumAmplitude();
 8007942:	f002 f891 	bl	8009a68 <clearMaximumAmplitude>
      print("SPL_dBA: %u.%u peak_amp_mPa: %u.%02u   \r\n", soundData.SPL_dBA_int,
 8007946:	4b5b      	ldr	r3, [pc, #364]	@ (8007ab4 <Mic_Upkeep+0x20c>)
 8007948:	781b      	ldrb	r3, [r3, #0]
 800794a:	0019      	movs	r1, r3
             soundData.SPL_dBA_fr_1dp, soundData.peak_amp_mPa_int,
 800794c:	4b59      	ldr	r3, [pc, #356]	@ (8007ab4 <Mic_Upkeep+0x20c>)
 800794e:	785b      	ldrb	r3, [r3, #1]
      print("SPL_dBA: %u.%u peak_amp_mPa: %u.%02u   \r\n", soundData.SPL_dBA_int,
 8007950:	001a      	movs	r2, r3
             soundData.SPL_dBA_fr_1dp, soundData.peak_amp_mPa_int,
 8007952:	4b58      	ldr	r3, [pc, #352]	@ (8007ab4 <Mic_Upkeep+0x20c>)
 8007954:	89db      	ldrh	r3, [r3, #14]
      print("SPL_dBA: %u.%u peak_amp_mPa: %u.%02u   \r\n", soundData.SPL_dBA_int,
 8007956:	001c      	movs	r4, r3
             soundData.peak_amp_mPa_fr_2dp);
 8007958:	4b56      	ldr	r3, [pc, #344]	@ (8007ab4 <Mic_Upkeep+0x20c>)
 800795a:	7c1b      	ldrb	r3, [r3, #16]
      print("SPL_dBA: %u.%u peak_amp_mPa: %u.%02u   \r\n", soundData.SPL_dBA_int,
 800795c:	4856      	ldr	r0, [pc, #344]	@ (8007ab8 <Mic_Upkeep+0x210>)
 800795e:	9300      	str	r3, [sp, #0]
 8007960:	0023      	movs	r3, r4
 8007962:	f000 faf5 	bl	8007f50 <print>
      char dBbuffer[8];
      sprintf(dBbuffer, "%u.%1u", soundData.SPL_dBA_int, soundData.SPL_dBA_fr_1dp);
 8007966:	4b53      	ldr	r3, [pc, #332]	@ (8007ab4 <Mic_Upkeep+0x20c>)
 8007968:	781b      	ldrb	r3, [r3, #0]
 800796a:	001a      	movs	r2, r3
 800796c:	4b51      	ldr	r3, [pc, #324]	@ (8007ab4 <Mic_Upkeep+0x20c>)
 800796e:	785b      	ldrb	r3, [r3, #1]
 8007970:	4952      	ldr	r1, [pc, #328]	@ (8007abc <Mic_Upkeep+0x214>)
 8007972:	0038      	movs	r0, r7
 8007974:	f014 fcfc 	bl	801c370 <siprintf>

      dBValue = atof(dBbuffer);
 8007978:	003b      	movs	r3, r7
 800797a:	0018      	movs	r0, r3
 800797c:	f013 f908 	bl	801ab90 <atof>
 8007980:	0002      	movs	r2, r0
 8007982:	000b      	movs	r3, r1
 8007984:	0010      	movs	r0, r2
 8007986:	0019      	movs	r1, r3
 8007988:	f7fb fdb4 	bl	80034f4 <__aeabi_d2f>
 800798c:	1c02      	adds	r2, r0, #0
 800798e:	4b4c      	ldr	r3, [pc, #304]	@ (8007ac0 <Mic_Upkeep+0x218>)
 8007990:	601a      	str	r2, [r3, #0]
//      dBValue = roundf(dBValue * 100) / 100;
      dBValue = ((int)(dBValue * 100 + .5) / 100.0);
 8007992:	4b4b      	ldr	r3, [pc, #300]	@ (8007ac0 <Mic_Upkeep+0x218>)
 8007994:	681b      	ldr	r3, [r3, #0]
 8007996:	494b      	ldr	r1, [pc, #300]	@ (8007ac4 <Mic_Upkeep+0x21c>)
 8007998:	1c18      	adds	r0, r3, #0
 800799a:	f7f9 fb01 	bl	8000fa0 <__aeabi_fmul>
 800799e:	1c03      	adds	r3, r0, #0
 80079a0:	1c18      	adds	r0, r3, #0
 80079a2:	f7fb fd5f 	bl	8003464 <__aeabi_f2d>
 80079a6:	2200      	movs	r2, #0
 80079a8:	4b47      	ldr	r3, [pc, #284]	@ (8007ac8 <Mic_Upkeep+0x220>)
 80079aa:	f7f9 fe9f 	bl	80016ec <__aeabi_dadd>
 80079ae:	0002      	movs	r2, r0
 80079b0:	000b      	movs	r3, r1
 80079b2:	0010      	movs	r0, r2
 80079b4:	0019      	movs	r1, r3
 80079b6:	f7fb fcc7 	bl	8003348 <__aeabi_d2iz>
 80079ba:	0003      	movs	r3, r0
 80079bc:	0018      	movs	r0, r3
 80079be:	f7fb fcff 	bl	80033c0 <__aeabi_i2d>
 80079c2:	2200      	movs	r2, #0
 80079c4:	4b41      	ldr	r3, [pc, #260]	@ (8007acc <Mic_Upkeep+0x224>)
 80079c6:	f7fa f9f5 	bl	8001db4 <__aeabi_ddiv>
 80079ca:	0002      	movs	r2, r0
 80079cc:	000b      	movs	r3, r1
 80079ce:	0010      	movs	r0, r2
 80079d0:	0019      	movs	r1, r3
 80079d2:	f7fb fd8f 	bl	80034f4 <__aeabi_d2f>
 80079d6:	1c02      	adds	r2, r0, #0
 80079d8:	4b39      	ldr	r3, [pc, #228]	@ (8007ac0 <Mic_Upkeep+0x218>)
 80079da:	601a      	str	r2, [r3, #0]
      MIC_Print();
 80079dc:	f000 f966 	bl	8007cac <MIC_Print>
      if (!startSPLcalculation()) {
 80079e0:	f002 f8f0 	bl	8009bc4 <startSPLcalculation>
 80079e4:	0003      	movs	r3, r0
 80079e6:	001a      	movs	r2, r3
 80079e8:	2301      	movs	r3, #1
 80079ea:	4053      	eors	r3, r2
 80079ec:	b2db      	uxtb	r3, r3
 80079ee:	2b00      	cmp	r3, #0
 80079f0:	d005      	beq.n	80079fe <Mic_Upkeep+0x156>
        errorHandler(__func__, __LINE__, __FILE__);
 80079f2:	4a2d      	ldr	r2, [pc, #180]	@ (8007aa8 <Mic_Upkeep+0x200>)
 80079f4:	4b2d      	ldr	r3, [pc, #180]	@ (8007aac <Mic_Upkeep+0x204>)
 80079f6:	21f9      	movs	r1, #249	@ 0xf9
 80079f8:	0018      	movs	r0, r3
 80079fa:	f003 ff43 	bl	800b884 <errorHandler>
      }
      if (!enableMicrophone(false))
 80079fe:	2000      	movs	r0, #0
 8007a00:	f002 f876 	bl	8009af0 <enableMicrophone>
 8007a04:	0003      	movs	r3, r0
 8007a06:	001a      	movs	r2, r3
 8007a08:	2301      	movs	r3, #1
 8007a0a:	4053      	eors	r3, r2
 8007a0c:	b2db      	uxtb	r3, r3
 8007a0e:	2b00      	cmp	r3, #0
 8007a10:	d005      	beq.n	8007a1e <Mic_Upkeep+0x176>
        {
          errorHandler(__func__, __LINE__, __FILE__);
 8007a12:	4a25      	ldr	r2, [pc, #148]	@ (8007aa8 <Mic_Upkeep+0x200>)
 8007a14:	4b25      	ldr	r3, [pc, #148]	@ (8007aac <Mic_Upkeep+0x204>)
 8007a16:	21fd      	movs	r1, #253	@ 0xfd
 8007a18:	0018      	movs	r0, r3
 8007a1a:	f003 ff33 	bl	800b884 <errorHandler>
        }

      MicStamp = HAL_GetTick() + 1000;
 8007a1e:	f004 fa19 	bl	800be54 <HAL_GetTick>
 8007a22:	0003      	movs	r3, r0
 8007a24:	22fa      	movs	r2, #250	@ 0xfa
 8007a26:	0092      	lsls	r2, r2, #2
 8007a28:	189a      	adds	r2, r3, r2
 8007a2a:	4b29      	ldr	r3, [pc, #164]	@ (8007ad0 <Mic_Upkeep+0x228>)
 8007a2c:	601a      	str	r2, [r3, #0]
      MicState = MIC_STATE_WAIT;
 8007a2e:	4b1d      	ldr	r3, [pc, #116]	@ (8007aa4 <Mic_Upkeep+0x1fc>)
 8007a30:	2203      	movs	r2, #3
 8007a32:	701a      	strb	r2, [r3, #0]
      ResetMICIndicator();
 8007a34:	f002 ffcc 	bl	800a9d0 <ResetMICIndicator>
//      Info("MIC_STATE_WAIT\r\n");
    }
    break;
 8007a38:	e02a      	b.n	8007a90 <Mic_Upkeep+0x1e8>

  case MIC_STATE_WAIT:
    if(TimestampIsReached(MicStamp)){
 8007a3a:	4b25      	ldr	r3, [pc, #148]	@ (8007ad0 <Mic_Upkeep+0x228>)
 8007a3c:	681b      	ldr	r3, [r3, #0]
 8007a3e:	0018      	movs	r0, r3
 8007a40:	f003 fe16 	bl	800b670 <TimestampIsReached>
 8007a44:	1e03      	subs	r3, r0, #0
 8007a46:	d025      	beq.n	8007a94 <Mic_Upkeep+0x1ec>
      if (!enableMicrophone(true))
 8007a48:	2001      	movs	r0, #1
 8007a4a:	f002 f851 	bl	8009af0 <enableMicrophone>
 8007a4e:	0003      	movs	r3, r0
 8007a50:	001a      	movs	r2, r3
 8007a52:	2301      	movs	r3, #1
 8007a54:	4053      	eors	r3, r2
 8007a56:	b2db      	uxtb	r3, r3
 8007a58:	2b00      	cmp	r3, #0
 8007a5a:	d007      	beq.n	8007a6c <Mic_Upkeep+0x1c4>
        {
          errorHandler(__func__, __LINE__, __FILE__);
 8007a5c:	4a12      	ldr	r2, [pc, #72]	@ (8007aa8 <Mic_Upkeep+0x200>)
 8007a5e:	230c      	movs	r3, #12
 8007a60:	33ff      	adds	r3, #255	@ 0xff
 8007a62:	0019      	movs	r1, r3
 8007a64:	4b11      	ldr	r3, [pc, #68]	@ (8007aac <Mic_Upkeep+0x204>)
 8007a66:	0018      	movs	r0, r3
 8007a68:	f003 ff0c 	bl	800b884 <errorHandler>
        }
      MicState = MIC_STATE_START_MEASUREMENT;
 8007a6c:	4b0d      	ldr	r3, [pc, #52]	@ (8007aa4 <Mic_Upkeep+0x1fc>)
 8007a6e:	2201      	movs	r2, #1
 8007a70:	701a      	strb	r2, [r3, #0]
      SetMICIndicator();
 8007a72:	f002 ff95 	bl	800a9a0 <SetMICIndicator>
//      Info("MIC_STATE_START_MEASUREMENT\r\n");
    }
    break;
 8007a76:	e00d      	b.n	8007a94 <Mic_Upkeep+0x1ec>

  default:
    Debug("Unexpected ocurrence happened");
 8007a78:	4a16      	ldr	r2, [pc, #88]	@ (8007ad4 <Mic_Upkeep+0x22c>)
 8007a7a:	4b17      	ldr	r3, [pc, #92]	@ (8007ad8 <Mic_Upkeep+0x230>)
 8007a7c:	0019      	movs	r1, r3
 8007a7e:	2003      	movs	r0, #3
 8007a80:	f003 fe4c 	bl	800b71c <CreateLine>
    MicState = MIC_STATE_INIT;
 8007a84:	4b07      	ldr	r3, [pc, #28]	@ (8007aa4 <Mic_Upkeep+0x1fc>)
 8007a86:	2200      	movs	r2, #0
 8007a88:	701a      	strb	r2, [r3, #0]
//    Info("MIC_STATE_INIT due to Unexpected ocurrence\r\n");
    break;
 8007a8a:	e004      	b.n	8007a96 <Mic_Upkeep+0x1ee>
    break;
 8007a8c:	46c0      	nop			@ (mov r8, r8)
 8007a8e:	e002      	b.n	8007a96 <Mic_Upkeep+0x1ee>
    break;
 8007a90:	46c0      	nop			@ (mov r8, r8)
 8007a92:	e000      	b.n	8007a96 <Mic_Upkeep+0x1ee>
    break;
 8007a94:	46c0      	nop			@ (mov r8, r8)
  }

  return MicState;
 8007a96:	4b03      	ldr	r3, [pc, #12]	@ (8007aa4 <Mic_Upkeep+0x1fc>)
 8007a98:	781b      	ldrb	r3, [r3, #0]
}
 8007a9a:	0018      	movs	r0, r3
 8007a9c:	46bd      	mov	sp, r7
 8007a9e:	b003      	add	sp, #12
 8007aa0:	bd90      	pop	{r4, r7, pc}
 8007aa2:	46c0      	nop			@ (mov r8, r8)
 8007aa4:	20000f5e 	.word	0x20000f5e
 8007aa8:	08020094 	.word	0x08020094
 8007aac:	08020904 	.word	0x08020904
 8007ab0:	20001280 	.word	0x20001280
 8007ab4:	20000f4c 	.word	0x20000f4c
 8007ab8:	080200b0 	.word	0x080200b0
 8007abc:	080200dc 	.word	0x080200dc
 8007ac0:	20000f90 	.word	0x20000f90
 8007ac4:	42c80000 	.word	0x42c80000
 8007ac8:	3fe00000 	.word	0x3fe00000
 8007acc:	40590000 	.word	0x40590000
 8007ad0:	20000f48 	.word	0x20000f48
 8007ad4:	080200e4 	.word	0x080200e4
 8007ad8:	08020024 	.word	0x08020024

08007adc <Meas_Upkeep>:
//      MicState = MIC_STATE_INIT;
//      break;
//    }
//}

MeasurementState Meas_Upkeep(void) {
 8007adc:	b5b0      	push	{r4, r5, r7, lr}
 8007ade:	b084      	sub	sp, #16
 8007ae0:	af04      	add	r7, sp, #16
  static MeasurementState MeasState = MEAS_STATE_INIT;
  switch(MeasState) {
 8007ae2:	4b3c      	ldr	r3, [pc, #240]	@ (8007bd4 <Meas_Upkeep+0xf8>)
 8007ae4:	781b      	ldrb	r3, [r3, #0]
 8007ae6:	2b06      	cmp	r3, #6
 8007ae8:	d868      	bhi.n	8007bbc <Meas_Upkeep+0xe0>
 8007aea:	009a      	lsls	r2, r3, #2
 8007aec:	4b3a      	ldr	r3, [pc, #232]	@ (8007bd8 <Meas_Upkeep+0xfc>)
 8007aee:	18d3      	adds	r3, r2, r3
 8007af0:	681b      	ldr	r3, [r3, #0]
 8007af2:	469f      	mov	pc, r3
  case MEAS_STATE_OFF:

    Debug("Measurements are turned off.");
 8007af4:	4a39      	ldr	r2, [pc, #228]	@ (8007bdc <Meas_Upkeep+0x100>)
 8007af6:	4b3a      	ldr	r3, [pc, #232]	@ (8007be0 <Meas_Upkeep+0x104>)
 8007af8:	0019      	movs	r1, r3
 8007afa:	2003      	movs	r0, #3
 8007afc:	f003 fe0e 	bl	800b71c <CreateLine>
    break;
 8007b00:	e063      	b.n	8007bca <Meas_Upkeep+0xee>

  case MEAS_STATE_INIT:
    ResetMeasurements();
 8007b02:	f7ff fe7d 	bl	8007800 <ResetMeasurements>
    MeasState = MEAS_STATE_START_MEASUREMENTS;
 8007b06:	4b33      	ldr	r3, [pc, #204]	@ (8007bd4 <Meas_Upkeep+0xf8>)
 8007b08:	2201      	movs	r2, #1
 8007b0a:	701a      	strb	r2, [r3, #0]
    break;
 8007b0c:	e05d      	b.n	8007bca <Meas_Upkeep+0xee>

  case MEAS_STATE_START_MEASUREMENTS:
    StartMeasurements();
 8007b0e:	f7ff fdfd 	bl	800770c <StartMeasurements>
    SetMeasurementIndicator();
 8007b12:	f002 ff17 	bl	800a944 <SetMeasurementIndicator>
    MeasState = MEAS_STATE_WAIT_FOR_COMPLETION;
 8007b16:	4b2f      	ldr	r3, [pc, #188]	@ (8007bd4 <Meas_Upkeep+0xf8>)
 8007b18:	2202      	movs	r2, #2
 8007b1a:	701a      	strb	r2, [r3, #0]
   break;
 8007b1c:	e055      	b.n	8007bca <Meas_Upkeep+0xee>

  case MEAS_STATE_WAIT_FOR_COMPLETION:
    if(MeasurementsCompleted()) {
 8007b1e:	f7ff fe8b 	bl	8007838 <MeasurementsCompleted>
 8007b22:	1e03      	subs	r3, r0, #0
 8007b24:	d04e      	beq.n	8007bc4 <Meas_Upkeep+0xe8>
      MeasState = MEAS_STATE_PROCESS_RESULTS;
 8007b26:	4b2b      	ldr	r3, [pc, #172]	@ (8007bd4 <Meas_Upkeep+0xf8>)
 8007b28:	2203      	movs	r2, #3
 8007b2a:	701a      	strb	r2, [r3, #0]
    }
    break;
 8007b2c:	e04a      	b.n	8007bc4 <Meas_Upkeep+0xe8>

  case MEAS_STATE_PROCESS_RESULTS:

    // TODO: Return values and let gadget handle with too high humidity and the sensor values
    // TODO: Check if all measurements are ready for the next measurement before switching states. Only check for the enabled measurements.
    Debug("Processing results.");
 8007b2e:	4a2d      	ldr	r2, [pc, #180]	@ (8007be4 <Meas_Upkeep+0x108>)
 8007b30:	4b2b      	ldr	r3, [pc, #172]	@ (8007be0 <Meas_Upkeep+0x104>)
 8007b32:	0019      	movs	r1, r3
 8007b34:	2003      	movs	r0, #3
 8007b36:	f003 fdf1 	bl	800b71c <CreateLine>
    Debug("SGP40 index value: %d", MeasurementCtx.vocIndex);
 8007b3a:	4b2b      	ldr	r3, [pc, #172]	@ (8007be8 <Meas_Upkeep+0x10c>)
 8007b3c:	689b      	ldr	r3, [r3, #8]
 8007b3e:	4a2b      	ldr	r2, [pc, #172]	@ (8007bec <Meas_Upkeep+0x110>)
 8007b40:	4927      	ldr	r1, [pc, #156]	@ (8007be0 <Meas_Upkeep+0x104>)
 8007b42:	2003      	movs	r0, #3
 8007b44:	f003 fdea 	bl	800b71c <CreateLine>
    Debug("Humidity value: %3.2f%%, Temperature value: %3.2fC", MeasurementCtx.humidityPerc, MeasurementCtx.temperature);
 8007b48:	4b27      	ldr	r3, [pc, #156]	@ (8007be8 <Meas_Upkeep+0x10c>)
 8007b4a:	681b      	ldr	r3, [r3, #0]
 8007b4c:	1c18      	adds	r0, r3, #0
 8007b4e:	f7fb fc89 	bl	8003464 <__aeabi_f2d>
 8007b52:	0004      	movs	r4, r0
 8007b54:	000d      	movs	r5, r1
 8007b56:	4b24      	ldr	r3, [pc, #144]	@ (8007be8 <Meas_Upkeep+0x10c>)
 8007b58:	685b      	ldr	r3, [r3, #4]
 8007b5a:	1c18      	adds	r0, r3, #0
 8007b5c:	f7fb fc82 	bl	8003464 <__aeabi_f2d>
 8007b60:	0002      	movs	r2, r0
 8007b62:	000b      	movs	r3, r1
 8007b64:	4822      	ldr	r0, [pc, #136]	@ (8007bf0 <Meas_Upkeep+0x114>)
 8007b66:	491e      	ldr	r1, [pc, #120]	@ (8007be0 <Meas_Upkeep+0x104>)
 8007b68:	9202      	str	r2, [sp, #8]
 8007b6a:	9303      	str	r3, [sp, #12]
 8007b6c:	9400      	str	r4, [sp, #0]
 8007b6e:	9501      	str	r5, [sp, #4]
 8007b70:	0002      	movs	r2, r0
 8007b72:	2003      	movs	r0, #3
 8007b74:	f003 fdd2 	bl	800b71c <CreateLine>
    setMeasurement(MeasurementCtx.temperature, MeasurementCtx.humidityPerc, MeasurementCtx.vocIndex);
 8007b78:	4b1b      	ldr	r3, [pc, #108]	@ (8007be8 <Meas_Upkeep+0x10c>)
 8007b7a:	6858      	ldr	r0, [r3, #4]
 8007b7c:	4b1a      	ldr	r3, [pc, #104]	@ (8007be8 <Meas_Upkeep+0x10c>)
 8007b7e:	6819      	ldr	r1, [r3, #0]
 8007b80:	4b19      	ldr	r3, [pc, #100]	@ (8007be8 <Meas_Upkeep+0x10c>)
 8007b82:	689b      	ldr	r3, [r3, #8]
 8007b84:	b29b      	uxth	r3, r3
 8007b86:	001a      	movs	r2, r3
 8007b88:	f7fb fea6 	bl	80038d8 <setMeasurement>
    ResetMeasurementIndicator();
 8007b8c:	f002 fef2 	bl	800a974 <ResetMeasurementIndicator>
    MeasStamp = HAL_GetTick() + 10000;
 8007b90:	f004 f960 	bl	800be54 <HAL_GetTick>
 8007b94:	0003      	movs	r3, r0
 8007b96:	4a17      	ldr	r2, [pc, #92]	@ (8007bf4 <Meas_Upkeep+0x118>)
 8007b98:	189a      	adds	r2, r3, r2
 8007b9a:	4b17      	ldr	r3, [pc, #92]	@ (8007bf8 <Meas_Upkeep+0x11c>)
 8007b9c:	601a      	str	r2, [r3, #0]
    MeasState = MEAS_STATE_WAIT;
 8007b9e:	4b0d      	ldr	r3, [pc, #52]	@ (8007bd4 <Meas_Upkeep+0xf8>)
 8007ba0:	2206      	movs	r2, #6
 8007ba2:	701a      	strb	r2, [r3, #0]
    break;
 8007ba4:	e011      	b.n	8007bca <Meas_Upkeep+0xee>

  case MEAS_STATE_WAIT:
    if(TimestampIsReached(MeasStamp)){
 8007ba6:	4b14      	ldr	r3, [pc, #80]	@ (8007bf8 <Meas_Upkeep+0x11c>)
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	0018      	movs	r0, r3
 8007bac:	f003 fd60 	bl	800b670 <TimestampIsReached>
 8007bb0:	1e03      	subs	r3, r0, #0
 8007bb2:	d009      	beq.n	8007bc8 <Meas_Upkeep+0xec>
      MeasState = MEAS_STATE_INIT;
 8007bb4:	4b07      	ldr	r3, [pc, #28]	@ (8007bd4 <Meas_Upkeep+0xf8>)
 8007bb6:	2200      	movs	r2, #0
 8007bb8:	701a      	strb	r2, [r3, #0]
    }

    break;
 8007bba:	e005      	b.n	8007bc8 <Meas_Upkeep+0xec>

  default:
    // Handle unexpected state
    MeasState = MEAS_STATE_INIT;
 8007bbc:	4b05      	ldr	r3, [pc, #20]	@ (8007bd4 <Meas_Upkeep+0xf8>)
 8007bbe:	2200      	movs	r2, #0
 8007bc0:	701a      	strb	r2, [r3, #0]
    break;
 8007bc2:	e002      	b.n	8007bca <Meas_Upkeep+0xee>
    break;
 8007bc4:	46c0      	nop			@ (mov r8, r8)
 8007bc6:	e000      	b.n	8007bca <Meas_Upkeep+0xee>
    break;
 8007bc8:	46c0      	nop			@ (mov r8, r8)
  }

  return MeasState;
 8007bca:	4b02      	ldr	r3, [pc, #8]	@ (8007bd4 <Meas_Upkeep+0xf8>)
 8007bcc:	781b      	ldrb	r3, [r3, #0]
}
 8007bce:	0018      	movs	r0, r3
 8007bd0:	46bd      	mov	sp, r7
 8007bd2:	bdb0      	pop	{r4, r5, r7, pc}
 8007bd4:	20000f5f 	.word	0x20000f5f
 8007bd8:	080208e8 	.word	0x080208e8
 8007bdc:	08020104 	.word	0x08020104
 8007be0:	08020024 	.word	0x08020024
 8007be4:	08020124 	.word	0x08020124
 8007be8:	20000ef8 	.word	0x20000ef8
 8007bec:	08020138 	.word	0x08020138
 8007bf0:	08020150 	.word	0x08020150
 8007bf4:	00002710 	.word	0x00002710
 8007bf8:	20000f44 	.word	0x20000f44

08007bfc <Meas_SetEnabledSensors>:
float getHumidity(){
  float Humidity = MeasurementCtx.humidityPerc;
  return Humidity;
}

void Meas_SetEnabledSensors(EnabledMeasurements enabled) {
 8007bfc:	b590      	push	{r4, r7, lr}
 8007bfe:	b085      	sub	sp, #20
 8007c00:	af00      	add	r7, sp, #0
 8007c02:	1d3b      	adds	r3, r7, #4
 8007c04:	6018      	str	r0, [r3, #0]
  uint8_t offset = 0;
 8007c06:	240f      	movs	r4, #15
 8007c08:	193b      	adds	r3, r7, r4
 8007c0a:	2200      	movs	r2, #0
 8007c0c:	701a      	strb	r2, [r3, #0]
  MeasEnabled = enabled;
 8007c0e:	4b20      	ldr	r3, [pc, #128]	@ (8007c90 <Meas_SetEnabledSensors+0x94>)
 8007c10:	1d3a      	adds	r2, r7, #4
 8007c12:	6812      	ldr	r2, [r2, #0]
 8007c14:	601a      	str	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.HT_measurementEnabled;
 8007c16:	193b      	adds	r3, r7, r4
 8007c18:	781b      	ldrb	r3, [r3, #0]
 8007c1a:	193a      	adds	r2, r7, r4
 8007c1c:	1c59      	adds	r1, r3, #1
 8007c1e:	7011      	strb	r1, [r2, #0]
 8007c20:	0018      	movs	r0, r3
 8007c22:	1d3b      	adds	r3, r7, #4
 8007c24:	7819      	ldrb	r1, [r3, #0]
 8007c26:	4a1b      	ldr	r2, [pc, #108]	@ (8007c94 <Meas_SetEnabledSensors+0x98>)
 8007c28:	0103      	lsls	r3, r0, #4
 8007c2a:	18d3      	adds	r3, r2, r3
 8007c2c:	330c      	adds	r3, #12
 8007c2e:	1c0a      	adds	r2, r1, #0
 8007c30:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.VOC_measurementEnabled;
 8007c32:	193b      	adds	r3, r7, r4
 8007c34:	781b      	ldrb	r3, [r3, #0]
 8007c36:	193a      	adds	r2, r7, r4
 8007c38:	1c59      	adds	r1, r3, #1
 8007c3a:	7011      	strb	r1, [r2, #0]
 8007c3c:	0018      	movs	r0, r3
 8007c3e:	1d3b      	adds	r3, r7, #4
 8007c40:	7859      	ldrb	r1, [r3, #1]
 8007c42:	4a14      	ldr	r2, [pc, #80]	@ (8007c94 <Meas_SetEnabledSensors+0x98>)
 8007c44:	0103      	lsls	r3, r0, #4
 8007c46:	18d3      	adds	r3, r2, r3
 8007c48:	330c      	adds	r3, #12
 8007c4a:	1c0a      	adds	r2, r1, #0
 8007c4c:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.PM_measurementEnabled;
 8007c4e:	193b      	adds	r3, r7, r4
 8007c50:	781b      	ldrb	r3, [r3, #0]
 8007c52:	193a      	adds	r2, r7, r4
 8007c54:	1c59      	adds	r1, r3, #1
 8007c56:	7011      	strb	r1, [r2, #0]
 8007c58:	0018      	movs	r0, r3
 8007c5a:	1d3b      	adds	r3, r7, #4
 8007c5c:	7899      	ldrb	r1, [r3, #2]
 8007c5e:	4a0d      	ldr	r2, [pc, #52]	@ (8007c94 <Meas_SetEnabledSensors+0x98>)
 8007c60:	0103      	lsls	r3, r0, #4
 8007c62:	18d3      	adds	r3, r2, r3
 8007c64:	330c      	adds	r3, #12
 8007c66:	1c0a      	adds	r2, r1, #0
 8007c68:	701a      	strb	r2, [r3, #0]
  Measurements[offset++].enabled = enabled.MIC_measurementEnabled;
 8007c6a:	193b      	adds	r3, r7, r4
 8007c6c:	781b      	ldrb	r3, [r3, #0]
 8007c6e:	193a      	adds	r2, r7, r4
 8007c70:	1c59      	adds	r1, r3, #1
 8007c72:	7011      	strb	r1, [r2, #0]
 8007c74:	0018      	movs	r0, r3
 8007c76:	1d3b      	adds	r3, r7, #4
 8007c78:	78d9      	ldrb	r1, [r3, #3]
 8007c7a:	4a06      	ldr	r2, [pc, #24]	@ (8007c94 <Meas_SetEnabledSensors+0x98>)
 8007c7c:	0103      	lsls	r3, r0, #4
 8007c7e:	18d3      	adds	r3, r2, r3
 8007c80:	330c      	adds	r3, #12
 8007c82:	1c0a      	adds	r2, r1, #0
 8007c84:	701a      	strb	r2, [r3, #0]
}
 8007c86:	46c0      	nop			@ (mov r8, r8)
 8007c88:	46bd      	mov	sp, r7
 8007c8a:	b005      	add	sp, #20
 8007c8c:	bd90      	pop	{r4, r7, pc}
 8007c8e:	46c0      	nop			@ (mov r8, r8)
 8007c90:	20000f38 	.word	0x20000f38
 8007c94:	20000f08 	.word	0x20000f08

08007c98 <SetESPMeasurementDone>:
  Measurements[offset++].enabled = false;
  Measurements[offset++].enabled = false;
  Measurements[offset++].enabled = false;
}

void SetESPMeasurementDone(){
 8007c98:	b580      	push	{r7, lr}
 8007c9a:	af00      	add	r7, sp, #0
  MeasTest.ESP_Tested = true;
 8007c9c:	4b02      	ldr	r3, [pc, #8]	@ (8007ca8 <SetESPMeasurementDone+0x10>)
 8007c9e:	2201      	movs	r2, #1
 8007ca0:	70da      	strb	r2, [r3, #3]
}
 8007ca2:	46c0      	nop			@ (mov r8, r8)
 8007ca4:	46bd      	mov	sp, r7
 8007ca6:	bd80      	pop	{r7, pc}
 8007ca8:	20000f3c 	.word	0x20000f3c

08007cac <MIC_Print>:
  }
  return(false);
}
*/

void MIC_Print(void) {
 8007cac:	b580      	push	{r7, lr}
 8007cae:	b082      	sub	sp, #8
 8007cb0:	af00      	add	r7, sp, #0
//    sample[i] = ConvertAudio(&AudioRxBuffer[4*i+2]);
//    //Info("0x%08x", sample);
//  }
  //filter();
  //dBc = MIC_GetDB();
  dBc = dBValue;
 8007cb2:	4b81      	ldr	r3, [pc, #516]	@ (8007eb8 <MIC_Print+0x20c>)
 8007cb4:	681a      	ldr	r2, [r3, #0]
 8007cb6:	4b81      	ldr	r3, [pc, #516]	@ (8007ebc <MIC_Print+0x210>)
 8007cb8:	601a      	str	r2, [r3, #0]
//  Info("IN MIC_Print dBc: %02.1f", dBc);

  if(counter < nrOfSamples){
 8007cba:	4b81      	ldr	r3, [pc, #516]	@ (8007ec0 <MIC_Print+0x214>)
 8007cbc:	781b      	ldrb	r3, [r3, #0]
 8007cbe:	2b09      	cmp	r3, #9
 8007cc0:	d80e      	bhi.n	8007ce0 <MIC_Print+0x34>
    dBcSamples[counter] = dBc;
 8007cc2:	4b7f      	ldr	r3, [pc, #508]	@ (8007ec0 <MIC_Print+0x214>)
 8007cc4:	781b      	ldrb	r3, [r3, #0]
 8007cc6:	001a      	movs	r2, r3
 8007cc8:	4b7c      	ldr	r3, [pc, #496]	@ (8007ebc <MIC_Print+0x210>)
 8007cca:	6819      	ldr	r1, [r3, #0]
 8007ccc:	4b7d      	ldr	r3, [pc, #500]	@ (8007ec4 <MIC_Print+0x218>)
 8007cce:	0092      	lsls	r2, r2, #2
 8007cd0:	50d1      	str	r1, [r2, r3]
    counter += 1;
 8007cd2:	4b7b      	ldr	r3, [pc, #492]	@ (8007ec0 <MIC_Print+0x214>)
 8007cd4:	781b      	ldrb	r3, [r3, #0]
 8007cd6:	3301      	adds	r3, #1
 8007cd8:	b2da      	uxtb	r2, r3
 8007cda:	4b79      	ldr	r3, [pc, #484]	@ (8007ec0 <MIC_Print+0x214>)
 8007cdc:	701a      	strb	r2, [r3, #0]
 8007cde:	e013      	b.n	8007d08 <MIC_Print+0x5c>
    if ( counter == nrOfSamples ){
//      Debug("IN MIC_Print dBcSamples[counter] == %d", nrOfSamples);
    }
  }
  else{
    counter = 0;
 8007ce0:	4b77      	ldr	r3, [pc, #476]	@ (8007ec0 <MIC_Print+0x214>)
 8007ce2:	2200      	movs	r2, #0
 8007ce4:	701a      	strb	r2, [r3, #0]
    dBcSamples[counter] = dBc;
 8007ce6:	4b76      	ldr	r3, [pc, #472]	@ (8007ec0 <MIC_Print+0x214>)
 8007ce8:	781b      	ldrb	r3, [r3, #0]
 8007cea:	001a      	movs	r2, r3
 8007cec:	4b73      	ldr	r3, [pc, #460]	@ (8007ebc <MIC_Print+0x210>)
 8007cee:	6819      	ldr	r1, [r3, #0]
 8007cf0:	4b74      	ldr	r3, [pc, #464]	@ (8007ec4 <MIC_Print+0x218>)
 8007cf2:	0092      	lsls	r2, r2, #2
 8007cf4:	50d1      	str	r1, [r2, r3]
    counter += 1;
 8007cf6:	4b72      	ldr	r3, [pc, #456]	@ (8007ec0 <MIC_Print+0x214>)
 8007cf8:	781b      	ldrb	r3, [r3, #0]
 8007cfa:	3301      	adds	r3, #1
 8007cfc:	b2da      	uxtb	r2, r3
 8007cfe:	4b70      	ldr	r3, [pc, #448]	@ (8007ec0 <MIC_Print+0x214>)
 8007d00:	701a      	strb	r2, [r3, #0]
    averageReached = true;
 8007d02:	4b71      	ldr	r3, [pc, #452]	@ (8007ec8 <MIC_Print+0x21c>)
 8007d04:	2201      	movs	r2, #1
 8007d06:	701a      	strb	r2, [r3, #0]
  }
  if(!averageReached){
 8007d08:	4b6f      	ldr	r3, [pc, #444]	@ (8007ec8 <MIC_Print+0x21c>)
 8007d0a:	781b      	ldrb	r3, [r3, #0]
 8007d0c:	2201      	movs	r2, #1
 8007d0e:	4053      	eors	r3, r2
 8007d10:	b2db      	uxtb	r3, r3
 8007d12:	2b00      	cmp	r3, #0
 8007d14:	d005      	beq.n	8007d22 <MIC_Print+0x76>
      setMic(dBc); // individual is only stored in case of no average level is available
 8007d16:	4b69      	ldr	r3, [pc, #420]	@ (8007ebc <MIC_Print+0x210>)
 8007d18:	681b      	ldr	r3, [r3, #0]
 8007d1a:	1c18      	adds	r0, r3, #0
 8007d1c:	f7fb fdf8 	bl	8003910 <setMic>
 8007d20:	e02d      	b.n	8007d7e <MIC_Print+0xd2>
  }
  else{
    dBcAverage = 0.0;
 8007d22:	4b6a      	ldr	r3, [pc, #424]	@ (8007ecc <MIC_Print+0x220>)
 8007d24:	2200      	movs	r2, #0
 8007d26:	601a      	str	r2, [r3, #0]
    for(uint8_t i=0;i<nrOfSamples;i++){
 8007d28:	1dfb      	adds	r3, r7, #7
 8007d2a:	2200      	movs	r2, #0
 8007d2c:	701a      	strb	r2, [r3, #0]
 8007d2e:	e013      	b.n	8007d58 <MIC_Print+0xac>
      dBcAverage += dBcSamples[i];
 8007d30:	1dfb      	adds	r3, r7, #7
 8007d32:	781a      	ldrb	r2, [r3, #0]
 8007d34:	4b63      	ldr	r3, [pc, #396]	@ (8007ec4 <MIC_Print+0x218>)
 8007d36:	0092      	lsls	r2, r2, #2
 8007d38:	58d2      	ldr	r2, [r2, r3]
 8007d3a:	4b64      	ldr	r3, [pc, #400]	@ (8007ecc <MIC_Print+0x220>)
 8007d3c:	681b      	ldr	r3, [r3, #0]
 8007d3e:	1c19      	adds	r1, r3, #0
 8007d40:	1c10      	adds	r0, r2, #0
 8007d42:	f7f8 fdbd 	bl	80008c0 <__aeabi_fadd>
 8007d46:	1c03      	adds	r3, r0, #0
 8007d48:	1c1a      	adds	r2, r3, #0
 8007d4a:	4b60      	ldr	r3, [pc, #384]	@ (8007ecc <MIC_Print+0x220>)
 8007d4c:	601a      	str	r2, [r3, #0]
    for(uint8_t i=0;i<nrOfSamples;i++){
 8007d4e:	1dfb      	adds	r3, r7, #7
 8007d50:	781a      	ldrb	r2, [r3, #0]
 8007d52:	1dfb      	adds	r3, r7, #7
 8007d54:	3201      	adds	r2, #1
 8007d56:	701a      	strb	r2, [r3, #0]
 8007d58:	1dfb      	adds	r3, r7, #7
 8007d5a:	781b      	ldrb	r3, [r3, #0]
 8007d5c:	2b09      	cmp	r3, #9
 8007d5e:	d9e7      	bls.n	8007d30 <MIC_Print+0x84>
    }
    dBcAverage = dBcAverage/(float)nrOfSamples;
 8007d60:	4b5a      	ldr	r3, [pc, #360]	@ (8007ecc <MIC_Print+0x220>)
 8007d62:	681b      	ldr	r3, [r3, #0]
 8007d64:	495a      	ldr	r1, [pc, #360]	@ (8007ed0 <MIC_Print+0x224>)
 8007d66:	1c18      	adds	r0, r3, #0
 8007d68:	f7f8 ff34 	bl	8000bd4 <__aeabi_fdiv>
 8007d6c:	1c03      	adds	r3, r0, #0
 8007d6e:	1c1a      	adds	r2, r3, #0
 8007d70:	4b56      	ldr	r3, [pc, #344]	@ (8007ecc <MIC_Print+0x220>)
 8007d72:	601a      	str	r2, [r3, #0]
//    Debug("dBcAverage value for upload: %02.1f", dBcAverage);
    setMic(dBcAverage);
 8007d74:	4b55      	ldr	r3, [pc, #340]	@ (8007ecc <MIC_Print+0x220>)
 8007d76:	681b      	ldr	r3, [r3, #0]
 8007d78:	1c18      	adds	r0, r3, #0
 8007d7a:	f7fb fdc9 	bl	8003910 <setMic>

//Currently is set as the individual dBc, should be set to average.
//  HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, 1);
//  HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, 1);
//  HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, 1);
  if(dBc >= 90){//white
 8007d7e:	4b4f      	ldr	r3, [pc, #316]	@ (8007ebc <MIC_Print+0x210>)
 8007d80:	681b      	ldr	r3, [r3, #0]
 8007d82:	4954      	ldr	r1, [pc, #336]	@ (8007ed4 <MIC_Print+0x228>)
 8007d84:	1c18      	adds	r0, r3, #0
 8007d86:	f7f8 fbf1 	bl	800056c <__aeabi_fcmpge>
 8007d8a:	1e03      	subs	r3, r0, #0
 8007d8c:	d004      	beq.n	8007d98 <MIC_Print+0xec>
    SetDBLED(true, true, true);
 8007d8e:	2201      	movs	r2, #1
 8007d90:	2101      	movs	r1, #1
 8007d92:	2001      	movs	r0, #1
 8007d94:	f002 fd58 	bl	800a848 <SetDBLED>
  }
  if(dBc < 90 && dBc >= 80){ //red
 8007d98:	4b48      	ldr	r3, [pc, #288]	@ (8007ebc <MIC_Print+0x210>)
 8007d9a:	681b      	ldr	r3, [r3, #0]
 8007d9c:	494d      	ldr	r1, [pc, #308]	@ (8007ed4 <MIC_Print+0x228>)
 8007d9e:	1c18      	adds	r0, r3, #0
 8007da0:	f7f8 fbc6 	bl	8000530 <__aeabi_fcmplt>
 8007da4:	1e03      	subs	r3, r0, #0
 8007da6:	d00c      	beq.n	8007dc2 <MIC_Print+0x116>
 8007da8:	4b44      	ldr	r3, [pc, #272]	@ (8007ebc <MIC_Print+0x210>)
 8007daa:	681b      	ldr	r3, [r3, #0]
 8007dac:	494a      	ldr	r1, [pc, #296]	@ (8007ed8 <MIC_Print+0x22c>)
 8007dae:	1c18      	adds	r0, r3, #0
 8007db0:	f7f8 fbdc 	bl	800056c <__aeabi_fcmpge>
 8007db4:	1e03      	subs	r3, r0, #0
 8007db6:	d004      	beq.n	8007dc2 <MIC_Print+0x116>
    SetDBLED(true, false, false);
 8007db8:	2200      	movs	r2, #0
 8007dba:	2100      	movs	r1, #0
 8007dbc:	2001      	movs	r0, #1
 8007dbe:	f002 fd43 	bl	800a848 <SetDBLED>
  }
  if(dBc < 80 && dBc >= 70){//yellow
 8007dc2:	4b3e      	ldr	r3, [pc, #248]	@ (8007ebc <MIC_Print+0x210>)
 8007dc4:	681b      	ldr	r3, [r3, #0]
 8007dc6:	4944      	ldr	r1, [pc, #272]	@ (8007ed8 <MIC_Print+0x22c>)
 8007dc8:	1c18      	adds	r0, r3, #0
 8007dca:	f7f8 fbb1 	bl	8000530 <__aeabi_fcmplt>
 8007dce:	1e03      	subs	r3, r0, #0
 8007dd0:	d00c      	beq.n	8007dec <MIC_Print+0x140>
 8007dd2:	4b3a      	ldr	r3, [pc, #232]	@ (8007ebc <MIC_Print+0x210>)
 8007dd4:	681b      	ldr	r3, [r3, #0]
 8007dd6:	4941      	ldr	r1, [pc, #260]	@ (8007edc <MIC_Print+0x230>)
 8007dd8:	1c18      	adds	r0, r3, #0
 8007dda:	f7f8 fbc7 	bl	800056c <__aeabi_fcmpge>
 8007dde:	1e03      	subs	r3, r0, #0
 8007de0:	d004      	beq.n	8007dec <MIC_Print+0x140>
    SetDBLED(true, true, false);
 8007de2:	2200      	movs	r2, #0
 8007de4:	2101      	movs	r1, #1
 8007de6:	2001      	movs	r0, #1
 8007de8:	f002 fd2e 	bl	800a848 <SetDBLED>
  }
  if(dBc < 70 && dBc >= 60){//Green
 8007dec:	4b33      	ldr	r3, [pc, #204]	@ (8007ebc <MIC_Print+0x210>)
 8007dee:	681b      	ldr	r3, [r3, #0]
 8007df0:	493a      	ldr	r1, [pc, #232]	@ (8007edc <MIC_Print+0x230>)
 8007df2:	1c18      	adds	r0, r3, #0
 8007df4:	f7f8 fb9c 	bl	8000530 <__aeabi_fcmplt>
 8007df8:	1e03      	subs	r3, r0, #0
 8007dfa:	d00c      	beq.n	8007e16 <MIC_Print+0x16a>
 8007dfc:	4b2f      	ldr	r3, [pc, #188]	@ (8007ebc <MIC_Print+0x210>)
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	4937      	ldr	r1, [pc, #220]	@ (8007ee0 <MIC_Print+0x234>)
 8007e02:	1c18      	adds	r0, r3, #0
 8007e04:	f7f8 fbb2 	bl	800056c <__aeabi_fcmpge>
 8007e08:	1e03      	subs	r3, r0, #0
 8007e0a:	d004      	beq.n	8007e16 <MIC_Print+0x16a>
    SetDBLED(false, true, false);
 8007e0c:	2200      	movs	r2, #0
 8007e0e:	2101      	movs	r1, #1
 8007e10:	2000      	movs	r0, #0
 8007e12:	f002 fd19 	bl	800a848 <SetDBLED>
  }
  if(dBc < 60 && dBc >= 50){//blue
 8007e16:	4b29      	ldr	r3, [pc, #164]	@ (8007ebc <MIC_Print+0x210>)
 8007e18:	681b      	ldr	r3, [r3, #0]
 8007e1a:	4931      	ldr	r1, [pc, #196]	@ (8007ee0 <MIC_Print+0x234>)
 8007e1c:	1c18      	adds	r0, r3, #0
 8007e1e:	f7f8 fb87 	bl	8000530 <__aeabi_fcmplt>
 8007e22:	1e03      	subs	r3, r0, #0
 8007e24:	d00c      	beq.n	8007e40 <MIC_Print+0x194>
 8007e26:	4b25      	ldr	r3, [pc, #148]	@ (8007ebc <MIC_Print+0x210>)
 8007e28:	681b      	ldr	r3, [r3, #0]
 8007e2a:	492e      	ldr	r1, [pc, #184]	@ (8007ee4 <MIC_Print+0x238>)
 8007e2c:	1c18      	adds	r0, r3, #0
 8007e2e:	f7f8 fb9d 	bl	800056c <__aeabi_fcmpge>
 8007e32:	1e03      	subs	r3, r0, #0
 8007e34:	d004      	beq.n	8007e40 <MIC_Print+0x194>
    SetDBLED(false, false, true);
 8007e36:	2201      	movs	r2, #1
 8007e38:	2100      	movs	r1, #0
 8007e3a:	2000      	movs	r0, #0
 8007e3c:	f002 fd04 	bl	800a848 <SetDBLED>
  }
  if(dBc < 50 && dBc >= 40){//light blue
 8007e40:	4b1e      	ldr	r3, [pc, #120]	@ (8007ebc <MIC_Print+0x210>)
 8007e42:	681b      	ldr	r3, [r3, #0]
 8007e44:	4927      	ldr	r1, [pc, #156]	@ (8007ee4 <MIC_Print+0x238>)
 8007e46:	1c18      	adds	r0, r3, #0
 8007e48:	f7f8 fb72 	bl	8000530 <__aeabi_fcmplt>
 8007e4c:	1e03      	subs	r3, r0, #0
 8007e4e:	d00c      	beq.n	8007e6a <MIC_Print+0x1be>
 8007e50:	4b1a      	ldr	r3, [pc, #104]	@ (8007ebc <MIC_Print+0x210>)
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	4924      	ldr	r1, [pc, #144]	@ (8007ee8 <MIC_Print+0x23c>)
 8007e56:	1c18      	adds	r0, r3, #0
 8007e58:	f7f8 fb88 	bl	800056c <__aeabi_fcmpge>
 8007e5c:	1e03      	subs	r3, r0, #0
 8007e5e:	d004      	beq.n	8007e6a <MIC_Print+0x1be>
    SetDBLED(false, true, true);
 8007e60:	2201      	movs	r2, #1
 8007e62:	2101      	movs	r1, #1
 8007e64:	2000      	movs	r0, #0
 8007e66:	f002 fcef 	bl	800a848 <SetDBLED>
  }
  if(dBc < 40 && dBc >= 35){//purple
 8007e6a:	4b14      	ldr	r3, [pc, #80]	@ (8007ebc <MIC_Print+0x210>)
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	491e      	ldr	r1, [pc, #120]	@ (8007ee8 <MIC_Print+0x23c>)
 8007e70:	1c18      	adds	r0, r3, #0
 8007e72:	f7f8 fb5d 	bl	8000530 <__aeabi_fcmplt>
 8007e76:	1e03      	subs	r3, r0, #0
 8007e78:	d00c      	beq.n	8007e94 <MIC_Print+0x1e8>
 8007e7a:	4b10      	ldr	r3, [pc, #64]	@ (8007ebc <MIC_Print+0x210>)
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	491b      	ldr	r1, [pc, #108]	@ (8007eec <MIC_Print+0x240>)
 8007e80:	1c18      	adds	r0, r3, #0
 8007e82:	f7f8 fb73 	bl	800056c <__aeabi_fcmpge>
 8007e86:	1e03      	subs	r3, r0, #0
 8007e88:	d004      	beq.n	8007e94 <MIC_Print+0x1e8>
    SetDBLED(true, false, true);
 8007e8a:	2201      	movs	r2, #1
 8007e8c:	2100      	movs	r1, #0
 8007e8e:	2001      	movs	r0, #1
 8007e90:	f002 fcda 	bl	800a848 <SetDBLED>
  }
  if(dBc < 35){//off
 8007e94:	4b09      	ldr	r3, [pc, #36]	@ (8007ebc <MIC_Print+0x210>)
 8007e96:	681b      	ldr	r3, [r3, #0]
 8007e98:	4914      	ldr	r1, [pc, #80]	@ (8007eec <MIC_Print+0x240>)
 8007e9a:	1c18      	adds	r0, r3, #0
 8007e9c:	f7f8 fb48 	bl	8000530 <__aeabi_fcmplt>
 8007ea0:	1e03      	subs	r3, r0, #0
 8007ea2:	d100      	bne.n	8007ea6 <MIC_Print+0x1fa>
    SetDBLED(false, false, false);
  }
}
 8007ea4:	e004      	b.n	8007eb0 <MIC_Print+0x204>
    SetDBLED(false, false, false);
 8007ea6:	2200      	movs	r2, #0
 8007ea8:	2100      	movs	r1, #0
 8007eaa:	2000      	movs	r0, #0
 8007eac:	f002 fccc 	bl	800a848 <SetDBLED>
}
 8007eb0:	46c0      	nop			@ (mov r8, r8)
 8007eb2:	46bd      	mov	sp, r7
 8007eb4:	b002      	add	sp, #8
 8007eb6:	bd80      	pop	{r7, pc}
 8007eb8:	20000f90 	.word	0x20000f90
 8007ebc:	20000f60 	.word	0x20000f60
 8007ec0:	20000f94 	.word	0x20000f94
 8007ec4:	20000f64 	.word	0x20000f64
 8007ec8:	20000f95 	.word	0x20000f95
 8007ecc:	20000f8c 	.word	0x20000f8c
 8007ed0:	41200000 	.word	0x41200000
 8007ed4:	42b40000 	.word	0x42b40000
 8007ed8:	42a00000 	.word	0x42a00000
 8007edc:	428c0000 	.word	0x428c0000
 8007ee0:	42700000 	.word	0x42700000
 8007ee4:	42480000 	.word	0x42480000
 8007ee8:	42200000 	.word	0x42200000
 8007eec:	420c0000 	.word	0x420c0000

08007ef0 <MIC_TestMeasurementDone>:
  return false;
}



bool MIC_TestMeasurementDone(void) {
 8007ef0:	b580      	push	{r7, lr}
 8007ef2:	b082      	sub	sp, #8
 8007ef4:	af00      	add	r7, sp, #0
  bool Check;
  Info("DataReady in MIC_TestMeasurementDone: %d", DataReady);
 8007ef6:	4b11      	ldr	r3, [pc, #68]	@ (8007f3c <MIC_TestMeasurementDone+0x4c>)
 8007ef8:	781b      	ldrb	r3, [r3, #0]
 8007efa:	b2db      	uxtb	r3, r3
 8007efc:	4a10      	ldr	r2, [pc, #64]	@ (8007f40 <MIC_TestMeasurementDone+0x50>)
 8007efe:	4911      	ldr	r1, [pc, #68]	@ (8007f44 <MIC_TestMeasurementDone+0x54>)
 8007f00:	2002      	movs	r0, #2
 8007f02:	f003 fc0b 	bl	800b71c <CreateLine>
  if(DataReady) {
 8007f06:	4b0d      	ldr	r3, [pc, #52]	@ (8007f3c <MIC_TestMeasurementDone+0x4c>)
 8007f08:	781b      	ldrb	r3, [r3, #0]
 8007f0a:	b2db      	uxtb	r3, r3
 8007f0c:	2b00      	cmp	r3, #0
 8007f0e:	d010      	beq.n	8007f32 <MIC_TestMeasurementDone+0x42>
//    Check = MIC_Check();
    Check = micEnabled;
 8007f10:	1dfb      	adds	r3, r7, #7
 8007f12:	4a0d      	ldr	r2, [pc, #52]	@ (8007f48 <MIC_TestMeasurementDone+0x58>)
 8007f14:	7812      	ldrb	r2, [r2, #0]
 8007f16:	701a      	strb	r2, [r3, #0]
    Info("status micEnabled: %d",micEnabled );
 8007f18:	4b0b      	ldr	r3, [pc, #44]	@ (8007f48 <MIC_TestMeasurementDone+0x58>)
 8007f1a:	781b      	ldrb	r3, [r3, #0]
 8007f1c:	b2db      	uxtb	r3, r3
 8007f1e:	4a0b      	ldr	r2, [pc, #44]	@ (8007f4c <MIC_TestMeasurementDone+0x5c>)
 8007f20:	4908      	ldr	r1, [pc, #32]	@ (8007f44 <MIC_TestMeasurementDone+0x54>)
 8007f22:	2002      	movs	r0, #2
 8007f24:	f003 fbfa 	bl	800b71c <CreateLine>
    ResetMICIndicator();
 8007f28:	f002 fd52 	bl	800a9d0 <ResetMICIndicator>
    return Check;
 8007f2c:	1dfb      	adds	r3, r7, #7
 8007f2e:	781b      	ldrb	r3, [r3, #0]
 8007f30:	e000      	b.n	8007f34 <MIC_TestMeasurementDone+0x44>
  }
  return false;
 8007f32:	2300      	movs	r3, #0
}
 8007f34:	0018      	movs	r0, r3
 8007f36:	46bd      	mov	sp, r7
 8007f38:	b002      	add	sp, #8
 8007f3a:	bd80      	pop	{r7, pc}
 8007f3c:	20001280 	.word	0x20001280
 8007f40:	08020184 	.word	0x08020184
 8007f44:	080201b0 	.word	0x080201b0
 8007f48:	20001281 	.word	0x20001281
 8007f4c:	080201b4 	.word	0x080201b4

08007f50 <print>:

static char strbuf[512] = {0};

// Format a string for printing. Call this just like printf().
void print(const char* format, ...)
{
 8007f50:	b40f      	push	{r0, r1, r2, r3}
 8007f52:	b580      	push	{r7, lr}
 8007f54:	b082      	sub	sp, #8
 8007f56:	af00      	add	r7, sp, #0
    va_list argptr;
    va_start(argptr, format);
 8007f58:	2314      	movs	r3, #20
 8007f5a:	18fb      	adds	r3, r7, r3
 8007f5c:	607b      	str	r3, [r7, #4]
    vsnprintf(strbuf, sizeof strbuf, format, argptr);
 8007f5e:	687b      	ldr	r3, [r7, #4]
 8007f60:	693a      	ldr	r2, [r7, #16]
 8007f62:	2180      	movs	r1, #128	@ 0x80
 8007f64:	0089      	lsls	r1, r1, #2
 8007f66:	480a      	ldr	r0, [pc, #40]	@ (8007f90 <print+0x40>)
 8007f68:	f014 fa9a 	bl	801c4a0 <vsniprintf>
    va_end(argptr);
    printString(strbuf, strlen(strbuf));
 8007f6c:	4b08      	ldr	r3, [pc, #32]	@ (8007f90 <print+0x40>)
 8007f6e:	0018      	movs	r0, r3
 8007f70:	f7f8 f8fc 	bl	800016c <strlen>
 8007f74:	0003      	movs	r3, r0
 8007f76:	b29a      	uxth	r2, r3
 8007f78:	4b05      	ldr	r3, [pc, #20]	@ (8007f90 <print+0x40>)
 8007f7a:	0011      	movs	r1, r2
 8007f7c:	0018      	movs	r0, r3
 8007f7e:	f7ff fa09 	bl	8007394 <printString>
}
 8007f82:	46c0      	nop			@ (mov r8, r8)
 8007f84:	46bd      	mov	sp, r7
 8007f86:	b002      	add	sp, #8
 8007f88:	bc80      	pop	{r7}
 8007f8a:	bc08      	pop	{r3}
 8007f8c:	b004      	add	sp, #16
 8007f8e:	4718      	bx	r3
 8007f90:	20000f98 	.word	0x20000f98

08007f94 <MX_RTC_Init>:

RTC_HandleTypeDef hrtc;

/* RTC init function */
void MX_RTC_Init(void)
{
 8007f94:	b580      	push	{r7, lr}
 8007f96:	b086      	sub	sp, #24
 8007f98:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN RTC_Init 0 */

  /* USER CODE END RTC_Init 0 */

  RTC_TimeTypeDef sTime = {0};
 8007f9a:	1d3b      	adds	r3, r7, #4
 8007f9c:	0018      	movs	r0, r3
 8007f9e:	2314      	movs	r3, #20
 8007fa0:	001a      	movs	r2, r3
 8007fa2:	2100      	movs	r1, #0
 8007fa4:	f014 fa88 	bl	801c4b8 <memset>
  RTC_DateTypeDef sDate = {0};
 8007fa8:	003b      	movs	r3, r7
 8007faa:	2200      	movs	r2, #0
 8007fac:	601a      	str	r2, [r3, #0]

  /* USER CODE END RTC_Init 1 */

  /** Initialize RTC Only
  */
  hrtc.Instance = RTC;
 8007fae:	4b2e      	ldr	r3, [pc, #184]	@ (8008068 <MX_RTC_Init+0xd4>)
 8007fb0:	4a2e      	ldr	r2, [pc, #184]	@ (800806c <MX_RTC_Init+0xd8>)
 8007fb2:	601a      	str	r2, [r3, #0]
  hrtc.Init.HourFormat = RTC_HOURFORMAT_24;
 8007fb4:	4b2c      	ldr	r3, [pc, #176]	@ (8008068 <MX_RTC_Init+0xd4>)
 8007fb6:	2200      	movs	r2, #0
 8007fb8:	605a      	str	r2, [r3, #4]
  hrtc.Init.AsynchPrediv = 127;
 8007fba:	4b2b      	ldr	r3, [pc, #172]	@ (8008068 <MX_RTC_Init+0xd4>)
 8007fbc:	227f      	movs	r2, #127	@ 0x7f
 8007fbe:	609a      	str	r2, [r3, #8]
  hrtc.Init.SynchPrediv = 255;
 8007fc0:	4b29      	ldr	r3, [pc, #164]	@ (8008068 <MX_RTC_Init+0xd4>)
 8007fc2:	22ff      	movs	r2, #255	@ 0xff
 8007fc4:	60da      	str	r2, [r3, #12]
  hrtc.Init.OutPut = RTC_OUTPUT_DISABLE;
 8007fc6:	4b28      	ldr	r3, [pc, #160]	@ (8008068 <MX_RTC_Init+0xd4>)
 8007fc8:	2200      	movs	r2, #0
 8007fca:	611a      	str	r2, [r3, #16]
  hrtc.Init.OutPutRemap = RTC_OUTPUT_REMAP_NONE;
 8007fcc:	4b26      	ldr	r3, [pc, #152]	@ (8008068 <MX_RTC_Init+0xd4>)
 8007fce:	2200      	movs	r2, #0
 8007fd0:	615a      	str	r2, [r3, #20]
  hrtc.Init.OutPutPolarity = RTC_OUTPUT_POLARITY_HIGH;
 8007fd2:	4b25      	ldr	r3, [pc, #148]	@ (8008068 <MX_RTC_Init+0xd4>)
 8007fd4:	2200      	movs	r2, #0
 8007fd6:	619a      	str	r2, [r3, #24]
  hrtc.Init.OutPutType = RTC_OUTPUT_TYPE_OPENDRAIN;
 8007fd8:	4b23      	ldr	r3, [pc, #140]	@ (8008068 <MX_RTC_Init+0xd4>)
 8007fda:	2200      	movs	r2, #0
 8007fdc:	61da      	str	r2, [r3, #28]
  if (HAL_RTC_Init(&hrtc) != HAL_OK)
 8007fde:	4b22      	ldr	r3, [pc, #136]	@ (8008068 <MX_RTC_Init+0xd4>)
 8007fe0:	0018      	movs	r0, r3
 8007fe2:	f00a fa89 	bl	80124f8 <HAL_RTC_Init>
 8007fe6:	1e03      	subs	r3, r0, #0
 8007fe8:	d001      	beq.n	8007fee <MX_RTC_Init+0x5a>
  {
    Error_Handler();
 8007fea:	f7ff fa1b 	bl	8007424 <Error_Handler>

  /* USER CODE END Check_RTC_BKUP */

  /** Initialize RTC and set the Time and Date
  */
  sTime.Hours = 13;
 8007fee:	1d3b      	adds	r3, r7, #4
 8007ff0:	220d      	movs	r2, #13
 8007ff2:	701a      	strb	r2, [r3, #0]
  sTime.Minutes = 0;
 8007ff4:	1d3b      	adds	r3, r7, #4
 8007ff6:	2200      	movs	r2, #0
 8007ff8:	705a      	strb	r2, [r3, #1]
  sTime.Seconds = 0;
 8007ffa:	1d3b      	adds	r3, r7, #4
 8007ffc:	2200      	movs	r2, #0
 8007ffe:	709a      	strb	r2, [r3, #2]
  sTime.DayLightSaving = RTC_DAYLIGHTSAVING_NONE;
 8008000:	1d3b      	adds	r3, r7, #4
 8008002:	2200      	movs	r2, #0
 8008004:	60da      	str	r2, [r3, #12]
  sTime.StoreOperation = RTC_STOREOPERATION_RESET;
 8008006:	1d3b      	adds	r3, r7, #4
 8008008:	2200      	movs	r2, #0
 800800a:	611a      	str	r2, [r3, #16]
  if (HAL_RTC_SetTime(&hrtc, &sTime, RTC_FORMAT_BIN) != HAL_OK)
 800800c:	1d39      	adds	r1, r7, #4
 800800e:	4b16      	ldr	r3, [pc, #88]	@ (8008068 <MX_RTC_Init+0xd4>)
 8008010:	2200      	movs	r2, #0
 8008012:	0018      	movs	r0, r3
 8008014:	f00a fb0c 	bl	8012630 <HAL_RTC_SetTime>
 8008018:	1e03      	subs	r3, r0, #0
 800801a:	d001      	beq.n	8008020 <MX_RTC_Init+0x8c>
  {
    Error_Handler();
 800801c:	f7ff fa02 	bl	8007424 <Error_Handler>
  }
  sDate.WeekDay = RTC_WEEKDAY_SATURDAY;
 8008020:	003b      	movs	r3, r7
 8008022:	2206      	movs	r2, #6
 8008024:	701a      	strb	r2, [r3, #0]
  sDate.Month = RTC_MONTH_NOVEMBER;
 8008026:	003b      	movs	r3, r7
 8008028:	2211      	movs	r2, #17
 800802a:	705a      	strb	r2, [r3, #1]
  sDate.Date = 23;
 800802c:	003b      	movs	r3, r7
 800802e:	2217      	movs	r2, #23
 8008030:	709a      	strb	r2, [r3, #2]
  sDate.Year = 24;
 8008032:	003b      	movs	r3, r7
 8008034:	2218      	movs	r2, #24
 8008036:	70da      	strb	r2, [r3, #3]

  if (HAL_RTC_SetDate(&hrtc, &sDate, RTC_FORMAT_BIN) != HAL_OK)
 8008038:	0039      	movs	r1, r7
 800803a:	4b0b      	ldr	r3, [pc, #44]	@ (8008068 <MX_RTC_Init+0xd4>)
 800803c:	2200      	movs	r2, #0
 800803e:	0018      	movs	r0, r3
 8008040:	f00a fbfe 	bl	8012840 <HAL_RTC_SetDate>
 8008044:	1e03      	subs	r3, r0, #0
 8008046:	d001      	beq.n	800804c <MX_RTC_Init+0xb8>
  {
    Error_Handler();
 8008048:	f7ff f9ec 	bl	8007424 <Error_Handler>
  }

  /** Enable the WakeUp
  */
  if (HAL_RTCEx_SetWakeUpTimer(&hrtc, 0, RTC_WAKEUPCLOCK_RTCCLK_DIV16) != HAL_OK)
 800804c:	4b06      	ldr	r3, [pc, #24]	@ (8008068 <MX_RTC_Init+0xd4>)
 800804e:	2200      	movs	r2, #0
 8008050:	2100      	movs	r1, #0
 8008052:	0018      	movs	r0, r3
 8008054:	f00a fdae 	bl	8012bb4 <HAL_RTCEx_SetWakeUpTimer>
 8008058:	1e03      	subs	r3, r0, #0
 800805a:	d001      	beq.n	8008060 <MX_RTC_Init+0xcc>
  {
    Error_Handler();
 800805c:	f7ff f9e2 	bl	8007424 <Error_Handler>
  }
  /* USER CODE BEGIN RTC_Init 2 */

  /* USER CODE END RTC_Init 2 */

}
 8008060:	46c0      	nop			@ (mov r8, r8)
 8008062:	46bd      	mov	sp, r7
 8008064:	b006      	add	sp, #24
 8008066:	bd80      	pop	{r7, pc}
 8008068:	20001198 	.word	0x20001198
 800806c:	40002800 	.word	0x40002800

08008070 <HAL_RTC_MspInit>:

void HAL_RTC_MspInit(RTC_HandleTypeDef* rtcHandle)
{
 8008070:	b580      	push	{r7, lr}
 8008072:	b082      	sub	sp, #8
 8008074:	af00      	add	r7, sp, #0
 8008076:	6078      	str	r0, [r7, #4]

  if(rtcHandle->Instance==RTC)
 8008078:	687b      	ldr	r3, [r7, #4]
 800807a:	681b      	ldr	r3, [r3, #0]
 800807c:	4a06      	ldr	r2, [pc, #24]	@ (8008098 <HAL_RTC_MspInit+0x28>)
 800807e:	4293      	cmp	r3, r2
 8008080:	d106      	bne.n	8008090 <HAL_RTC_MspInit+0x20>
  {
  /* USER CODE BEGIN RTC_MspInit 0 */

  /* USER CODE END RTC_MspInit 0 */
    /* RTC clock enable */
    __HAL_RCC_RTC_ENABLE();
 8008082:	4b06      	ldr	r3, [pc, #24]	@ (800809c <HAL_RTC_MspInit+0x2c>)
 8008084:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8008086:	4b05      	ldr	r3, [pc, #20]	@ (800809c <HAL_RTC_MspInit+0x2c>)
 8008088:	2180      	movs	r1, #128	@ 0x80
 800808a:	02c9      	lsls	r1, r1, #11
 800808c:	430a      	orrs	r2, r1
 800808e:	651a      	str	r2, [r3, #80]	@ 0x50
  /* USER CODE BEGIN RTC_MspInit 1 */

  /* USER CODE END RTC_MspInit 1 */
  }
}
 8008090:	46c0      	nop			@ (mov r8, r8)
 8008092:	46bd      	mov	sp, r7
 8008094:	b002      	add	sp, #8
 8008096:	bd80      	pop	{r7, pc}
 8008098:	40002800 	.word	0x40002800
 800809c:	40021000 	.word	0x40021000

080080a0 <GasIndexAlgorithm_init_with_sampling_interval>:
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample);

void GasIndexAlgorithm_init_with_sampling_interval(
    GasIndexAlgorithmParams* params, int32_t algorithm_type,
    float sampling_interval) {
 80080a0:	b580      	push	{r7, lr}
 80080a2:	b084      	sub	sp, #16
 80080a4:	af00      	add	r7, sp, #0
 80080a6:	60f8      	str	r0, [r7, #12]
 80080a8:	60b9      	str	r1, [r7, #8]
 80080aa:	607a      	str	r2, [r7, #4]
    params->mAlgorithm_Type = algorithm_type;
 80080ac:	68fb      	ldr	r3, [r7, #12]
 80080ae:	68ba      	ldr	r2, [r7, #8]
 80080b0:	601a      	str	r2, [r3, #0]
    params->mSamplingInterval = sampling_interval;
 80080b2:	68fb      	ldr	r3, [r7, #12]
 80080b4:	687a      	ldr	r2, [r7, #4]
 80080b6:	605a      	str	r2, [r3, #4]
    if ((algorithm_type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 80080b8:	68bb      	ldr	r3, [r7, #8]
 80080ba:	2b01      	cmp	r3, #1
 80080bc:	d113      	bne.n	80080e6 <GasIndexAlgorithm_init_with_sampling_interval+0x46>
        params->mIndex_Offset = GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT;
 80080be:	68fb      	ldr	r3, [r7, #12]
 80080c0:	22fe      	movs	r2, #254	@ 0xfe
 80080c2:	0592      	lsls	r2, r2, #22
 80080c4:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_NOX_SRAW_MINIMUM;
 80080c6:	68fb      	ldr	r3, [r7, #12]
 80080c8:	4a1a      	ldr	r2, [pc, #104]	@ (8008134 <GasIndexAlgorithm_init_with_sampling_interval+0x94>)
 80080ca:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 80080cc:	68fb      	ldr	r3, [r7, #12]
 80080ce:	4a1a      	ldr	r2, [pc, #104]	@ (8008138 <GasIndexAlgorithm_init_with_sampling_interval+0x98>)
 80080d0:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_NOX_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_NOX;
 80080d2:	68fb      	ldr	r3, [r7, #12]
 80080d4:	4a19      	ldr	r2, [pc, #100]	@ (800813c <GasIndexAlgorithm_init_with_sampling_interval+0x9c>)
 80080d6:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 80080d8:	68fb      	ldr	r3, [r7, #12]
 80080da:	4a19      	ldr	r2, [pc, #100]	@ (8008140 <GasIndexAlgorithm_init_with_sampling_interval+0xa0>)
 80080dc:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_NOX;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_NOX;
 80080de:	68fb      	ldr	r3, [r7, #12]
 80080e0:	4a18      	ldr	r2, [pc, #96]	@ (8008144 <GasIndexAlgorithm_init_with_sampling_interval+0xa4>)
 80080e2:	61da      	str	r2, [r3, #28]
 80080e4:	e011      	b.n	800810a <GasIndexAlgorithm_init_with_sampling_interval+0x6a>
    } else {
        params->mIndex_Offset = GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT;
 80080e6:	68fb      	ldr	r3, [r7, #12]
 80080e8:	4a17      	ldr	r2, [pc, #92]	@ (8008148 <GasIndexAlgorithm_init_with_sampling_interval+0xa8>)
 80080ea:	609a      	str	r2, [r3, #8]
        params->mSraw_Minimum = GasIndexAlgorithm_VOC_SRAW_MINIMUM;
 80080ec:	68fb      	ldr	r3, [r7, #12]
 80080ee:	4a17      	ldr	r2, [pc, #92]	@ (800814c <GasIndexAlgorithm_init_with_sampling_interval+0xac>)
 80080f0:	60da      	str	r2, [r3, #12]
        params->mGating_Max_Duration_Minutes =
 80080f2:	68fb      	ldr	r3, [r7, #12]
 80080f4:	4a16      	ldr	r2, [pc, #88]	@ (8008150 <GasIndexAlgorithm_init_with_sampling_interval+0xb0>)
 80080f6:	611a      	str	r2, [r3, #16]
            GasIndexAlgorithm_GATING_VOC_MAX_DURATION_MINUTES;
        params->mInit_Duration_Mean = GasIndexAlgorithm_INIT_DURATION_MEAN_VOC;
 80080f8:	68fb      	ldr	r3, [r7, #12]
 80080fa:	4a16      	ldr	r2, [pc, #88]	@ (8008154 <GasIndexAlgorithm_init_with_sampling_interval+0xb4>)
 80080fc:	615a      	str	r2, [r3, #20]
        params->mInit_Duration_Variance =
 80080fe:	68fb      	ldr	r3, [r7, #12]
 8008100:	4a15      	ldr	r2, [pc, #84]	@ (8008158 <GasIndexAlgorithm_init_with_sampling_interval+0xb8>)
 8008102:	619a      	str	r2, [r3, #24]
            GasIndexAlgorithm_INIT_DURATION_VARIANCE_VOC;
        params->mGating_Threshold = GasIndexAlgorithm_GATING_THRESHOLD_VOC;
 8008104:	68fb      	ldr	r3, [r7, #12]
 8008106:	4a15      	ldr	r2, [pc, #84]	@ (800815c <GasIndexAlgorithm_init_with_sampling_interval+0xbc>)
 8008108:	61da      	str	r2, [r3, #28]
    }
    params->mIndex_Gain = GasIndexAlgorithm_INDEX_GAIN;
 800810a:	68fb      	ldr	r3, [r7, #12]
 800810c:	4a14      	ldr	r2, [pc, #80]	@ (8008160 <GasIndexAlgorithm_init_with_sampling_interval+0xc0>)
 800810e:	621a      	str	r2, [r3, #32]
    params->mTau_Mean_Hours = GasIndexAlgorithm_TAU_MEAN_HOURS;
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	4a14      	ldr	r2, [pc, #80]	@ (8008164 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 8008114:	625a      	str	r2, [r3, #36]	@ 0x24
    params->mTau_Variance_Hours = GasIndexAlgorithm_TAU_VARIANCE_HOURS;
 8008116:	68fb      	ldr	r3, [r7, #12]
 8008118:	4a12      	ldr	r2, [pc, #72]	@ (8008164 <GasIndexAlgorithm_init_with_sampling_interval+0xc4>)
 800811a:	629a      	str	r2, [r3, #40]	@ 0x28
    params->mSraw_Std_Initial = GasIndexAlgorithm_SRAW_STD_INITIAL;
 800811c:	68fb      	ldr	r3, [r7, #12]
 800811e:	4a12      	ldr	r2, [pc, #72]	@ (8008168 <GasIndexAlgorithm_init_with_sampling_interval+0xc8>)
 8008120:	62da      	str	r2, [r3, #44]	@ 0x2c
    GasIndexAlgorithm_reset(params);
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	0018      	movs	r0, r3
 8008126:	f000 f831 	bl	800818c <GasIndexAlgorithm_reset>
}
 800812a:	46c0      	nop			@ (mov r8, r8)
 800812c:	46bd      	mov	sp, r7
 800812e:	b004      	add	sp, #16
 8008130:	bd80      	pop	{r7, pc}
 8008132:	46c0      	nop			@ (mov r8, r8)
 8008134:	00002710 	.word	0x00002710
 8008138:	44340000 	.word	0x44340000
 800813c:	46859800 	.word	0x46859800
 8008140:	46a05000 	.word	0x46a05000
 8008144:	41f00000 	.word	0x41f00000
 8008148:	42c80000 	.word	0x42c80000
 800814c:	00004e20 	.word	0x00004e20
 8008150:	43340000 	.word	0x43340000
 8008154:	4528c000 	.word	0x4528c000
 8008158:	45a32000 	.word	0x45a32000
 800815c:	43aa0000 	.word	0x43aa0000
 8008160:	43660000 	.word	0x43660000
 8008164:	41400000 	.word	0x41400000
 8008168:	42480000 	.word	0x42480000

0800816c <GasIndexAlgorithm_init>:

void GasIndexAlgorithm_init(GasIndexAlgorithmParams* params,
                            int32_t algorithm_type) {
 800816c:	b580      	push	{r7, lr}
 800816e:	b082      	sub	sp, #8
 8008170:	af00      	add	r7, sp, #0
 8008172:	6078      	str	r0, [r7, #4]
 8008174:	6039      	str	r1, [r7, #0]
    GasIndexAlgorithm_init_with_sampling_interval(
 8008176:	22fe      	movs	r2, #254	@ 0xfe
 8008178:	0592      	lsls	r2, r2, #22
 800817a:	6839      	ldr	r1, [r7, #0]
 800817c:	687b      	ldr	r3, [r7, #4]
 800817e:	0018      	movs	r0, r3
 8008180:	f7ff ff8e 	bl	80080a0 <GasIndexAlgorithm_init_with_sampling_interval>
        params, algorithm_type, GasIndexAlgorithm_DEFAULT_SAMPLING_INTERVAL);
}
 8008184:	46c0      	nop			@ (mov r8, r8)
 8008186:	46bd      	mov	sp, r7
 8008188:	b002      	add	sp, #8
 800818a:	bd80      	pop	{r7, pc}

0800818c <GasIndexAlgorithm_reset>:

void GasIndexAlgorithm_reset(GasIndexAlgorithmParams* params) {
 800818c:	b580      	push	{r7, lr}
 800818e:	b082      	sub	sp, #8
 8008190:	af00      	add	r7, sp, #0
 8008192:	6078      	str	r0, [r7, #4]
    params->mUptime = 0.f;
 8008194:	687b      	ldr	r3, [r7, #4]
 8008196:	2200      	movs	r2, #0
 8008198:	631a      	str	r2, [r3, #48]	@ 0x30
    params->mSraw = 0.f;
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	2200      	movs	r2, #0
 800819e:	635a      	str	r2, [r3, #52]	@ 0x34
    params->mGas_Index = 0;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	2200      	movs	r2, #0
 80081a4:	639a      	str	r2, [r3, #56]	@ 0x38
    GasIndexAlgorithm__init_instances(params);
 80081a6:	687b      	ldr	r3, [r7, #4]
 80081a8:	0018      	movs	r0, r3
 80081aa:	f000 f805 	bl	80081b8 <GasIndexAlgorithm__init_instances>
}
 80081ae:	46c0      	nop			@ (mov r8, r8)
 80081b0:	46bd      	mov	sp, r7
 80081b2:	b002      	add	sp, #8
 80081b4:	bd80      	pop	{r7, pc}
	...

080081b8 <GasIndexAlgorithm__init_instances>:

static void GasIndexAlgorithm__init_instances(GasIndexAlgorithmParams* params) {
 80081b8:	b590      	push	{r4, r7, lr}
 80081ba:	b083      	sub	sp, #12
 80081bc:	af00      	add	r7, sp, #0
 80081be:	6078      	str	r0, [r7, #4]

    GasIndexAlgorithm__mean_variance_estimator__set_parameters(params);
 80081c0:	687b      	ldr	r3, [r7, #4]
 80081c2:	0018      	movs	r0, r3
 80081c4:	f000 f8e8 	bl	8008398 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>
    GasIndexAlgorithm__mox_model__set_parameters(
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	0018      	movs	r0, r3
 80081cc:	f000 f9a6 	bl	800851c <GasIndexAlgorithm__mean_variance_estimator__get_std>
 80081d0:	1c04      	adds	r4, r0, #0
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	0018      	movs	r0, r3
 80081d6:	f000 f9ab 	bl	8008530 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 80081da:	1c02      	adds	r2, r0, #0
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	1c21      	adds	r1, r4, #0
 80081e0:	0018      	movs	r0, r3
 80081e2:	f000 fc3b 	bl	8008a5c <GasIndexAlgorithm__mox_model__set_parameters>
        params, GasIndexAlgorithm__mean_variance_estimator__get_std(params),
        GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 80081e6:	687b      	ldr	r3, [r7, #4]
 80081e8:	681b      	ldr	r3, [r3, #0]
 80081ea:	2b01      	cmp	r3, #1
 80081ec:	d107      	bne.n	80081fe <GasIndexAlgorithm__init_instances+0x46>
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 80081ee:	23fe      	movs	r3, #254	@ 0xfe
 80081f0:	059b      	lsls	r3, r3, #22
 80081f2:	4a0a      	ldr	r2, [pc, #40]	@ (800821c <GasIndexAlgorithm__init_instances+0x64>)
 80081f4:	490a      	ldr	r1, [pc, #40]	@ (8008220 <GasIndexAlgorithm__init_instances+0x68>)
 80081f6:	6878      	ldr	r0, [r7, #4]
 80081f8:	f000 fc86 	bl	8008b08 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
 80081fc:	e005      	b.n	800820a <GasIndexAlgorithm__init_instances+0x52>
            params, GasIndexAlgorithm_SIGMOID_X0_NOX,
            GasIndexAlgorithm_SIGMOID_K_NOX,
            GasIndexAlgorithm_NOX_INDEX_OFFSET_DEFAULT);
    } else {
        GasIndexAlgorithm__sigmoid_scaled__set_parameters(
 80081fe:	4b09      	ldr	r3, [pc, #36]	@ (8008224 <GasIndexAlgorithm__init_instances+0x6c>)
 8008200:	4a09      	ldr	r2, [pc, #36]	@ (8008228 <GasIndexAlgorithm__init_instances+0x70>)
 8008202:	490a      	ldr	r1, [pc, #40]	@ (800822c <GasIndexAlgorithm__init_instances+0x74>)
 8008204:	6878      	ldr	r0, [r7, #4]
 8008206:	f000 fc7f 	bl	8008b08 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>
            params, GasIndexAlgorithm_SIGMOID_X0_VOC,
            GasIndexAlgorithm_SIGMOID_K_VOC,
            GasIndexAlgorithm_VOC_INDEX_OFFSET_DEFAULT);
    }
    GasIndexAlgorithm__adaptive_lowpass__set_parameters(params);
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	0018      	movs	r0, r3
 800820e:	f000 fd35 	bl	8008c7c <GasIndexAlgorithm__adaptive_lowpass__set_parameters>
}
 8008212:	46c0      	nop			@ (mov r8, r8)
 8008214:	46bd      	mov	sp, r7
 8008216:	b003      	add	sp, #12
 8008218:	bd90      	pop	{r4, r7, pc}
 800821a:	46c0      	nop			@ (mov r8, r8)
 800821c:	bc257a78 	.word	0xbc257a78
 8008220:	44198000 	.word	0x44198000
 8008224:	42c80000 	.word	0x42c80000
 8008228:	bbd4fdf4 	.word	0xbbd4fdf4
 800822c:	43550000 	.word	0x43550000

08008230 <GasIndexAlgorithm_process>:
    *gain_factor = ((int32_t)(params->mIndex_Gain));
    return;
}

void GasIndexAlgorithm_process(GasIndexAlgorithmParams* params, int32_t sraw,
                               int32_t* gas_index) {
 8008230:	b590      	push	{r4, r7, lr}
 8008232:	b085      	sub	sp, #20
 8008234:	af00      	add	r7, sp, #0
 8008236:	60f8      	str	r0, [r7, #12]
 8008238:	60b9      	str	r1, [r7, #8]
 800823a:	607a      	str	r2, [r7, #4]

    if ((params->mUptime <= GasIndexAlgorithm_INITIAL_BLACKOUT)) {
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8008240:	4952      	ldr	r1, [pc, #328]	@ (800838c <GasIndexAlgorithm_process+0x15c>)
 8008242:	1c18      	adds	r0, r3, #0
 8008244:	f7f8 f97e 	bl	8000544 <__aeabi_fcmple>
 8008248:	1e03      	subs	r3, r0, #0
 800824a:	d00c      	beq.n	8008266 <GasIndexAlgorithm_process+0x36>
        params->mUptime = (params->mUptime + params->mSamplingInterval);
 800824c:	68fb      	ldr	r3, [r7, #12]
 800824e:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 8008250:	68fb      	ldr	r3, [r7, #12]
 8008252:	685b      	ldr	r3, [r3, #4]
 8008254:	1c19      	adds	r1, r3, #0
 8008256:	1c10      	adds	r0, r2, #0
 8008258:	f7f8 fb32 	bl	80008c0 <__aeabi_fadd>
 800825c:	1c03      	adds	r3, r0, #0
 800825e:	1c1a      	adds	r2, r3, #0
 8008260:	68fb      	ldr	r3, [r7, #12]
 8008262:	631a      	str	r2, [r3, #48]	@ 0x30
 8008264:	e080      	b.n	8008368 <GasIndexAlgorithm_process+0x138>
    } else {
        if (((sraw > 0) && (sraw < 65000))) {
 8008266:	68bb      	ldr	r3, [r7, #8]
 8008268:	2b00      	cmp	r3, #0
 800826a:	dd25      	ble.n	80082b8 <GasIndexAlgorithm_process+0x88>
 800826c:	68bb      	ldr	r3, [r7, #8]
 800826e:	4a48      	ldr	r2, [pc, #288]	@ (8008390 <GasIndexAlgorithm_process+0x160>)
 8008270:	4293      	cmp	r3, r2
 8008272:	dc21      	bgt.n	80082b8 <GasIndexAlgorithm_process+0x88>
            if ((sraw < (params->mSraw_Minimum + 1))) {
 8008274:	68fb      	ldr	r3, [r7, #12]
 8008276:	68db      	ldr	r3, [r3, #12]
 8008278:	68ba      	ldr	r2, [r7, #8]
 800827a:	429a      	cmp	r2, r3
 800827c:	dc04      	bgt.n	8008288 <GasIndexAlgorithm_process+0x58>
                sraw = (params->mSraw_Minimum + 1);
 800827e:	68fb      	ldr	r3, [r7, #12]
 8008280:	68db      	ldr	r3, [r3, #12]
 8008282:	3301      	adds	r3, #1
 8008284:	60bb      	str	r3, [r7, #8]
 8008286:	e00d      	b.n	80082a4 <GasIndexAlgorithm_process+0x74>
            } else if ((sraw > (params->mSraw_Minimum + 32767))) {
 8008288:	68fb      	ldr	r3, [r7, #12]
 800828a:	68db      	ldr	r3, [r3, #12]
 800828c:	4a41      	ldr	r2, [pc, #260]	@ (8008394 <GasIndexAlgorithm_process+0x164>)
 800828e:	4694      	mov	ip, r2
 8008290:	4463      	add	r3, ip
 8008292:	68ba      	ldr	r2, [r7, #8]
 8008294:	429a      	cmp	r2, r3
 8008296:	dd05      	ble.n	80082a4 <GasIndexAlgorithm_process+0x74>
                sraw = (params->mSraw_Minimum + 32767);
 8008298:	68fb      	ldr	r3, [r7, #12]
 800829a:	68db      	ldr	r3, [r3, #12]
 800829c:	4a3d      	ldr	r2, [pc, #244]	@ (8008394 <GasIndexAlgorithm_process+0x164>)
 800829e:	4694      	mov	ip, r2
 80082a0:	4463      	add	r3, ip
 80082a2:	60bb      	str	r3, [r7, #8]
            }
            params->mSraw = ((float)((sraw - params->mSraw_Minimum)));
 80082a4:	68fb      	ldr	r3, [r7, #12]
 80082a6:	68db      	ldr	r3, [r3, #12]
 80082a8:	68ba      	ldr	r2, [r7, #8]
 80082aa:	1ad3      	subs	r3, r2, r3
 80082ac:	0018      	movs	r0, r3
 80082ae:	f7f9 f98f 	bl	80015d0 <__aeabi_i2f>
 80082b2:	1c02      	adds	r2, r0, #0
 80082b4:	68fb      	ldr	r3, [r7, #12]
 80082b6:	635a      	str	r2, [r3, #52]	@ 0x34
        }
        if (((params->mAlgorithm_Type ==
 80082b8:	68fb      	ldr	r3, [r7, #12]
 80082ba:	681b      	ldr	r3, [r3, #0]
 80082bc:	2b00      	cmp	r3, #0
 80082be:	d005      	beq.n	80082cc <GasIndexAlgorithm_process+0x9c>
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
             GasIndexAlgorithm__mean_variance_estimator__is_initialized(
 80082c0:	68fb      	ldr	r3, [r7, #12]
 80082c2:	0018      	movs	r0, r3
 80082c4:	f000 f945 	bl	8008552 <GasIndexAlgorithm__mean_variance_estimator__is_initialized>
 80082c8:	1e03      	subs	r3, r0, #0
              GasIndexAlgorithm_ALGORITHM_TYPE_VOC) ||
 80082ca:	d014      	beq.n	80082f6 <GasIndexAlgorithm_process+0xc6>
                 params))) {
            params->mGas_Index =
                GasIndexAlgorithm__mox_model__process(params, params->mSraw);
 80082cc:	68fb      	ldr	r3, [r7, #12]
 80082ce:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80082d0:	68fb      	ldr	r3, [r7, #12]
 80082d2:	1c11      	adds	r1, r2, #0
 80082d4:	0018      	movs	r0, r3
 80082d6:	f000 fbd1 	bl	8008a7c <GasIndexAlgorithm__mox_model__process>
 80082da:	1c02      	adds	r2, r0, #0
            params->mGas_Index =
 80082dc:	68fb      	ldr	r3, [r7, #12]
 80082de:	639a      	str	r2, [r3, #56]	@ 0x38
            params->mGas_Index = GasIndexAlgorithm__sigmoid_scaled__process(
 80082e0:	68fb      	ldr	r3, [r7, #12]
 80082e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80082e4:	68fb      	ldr	r3, [r7, #12]
 80082e6:	1c11      	adds	r1, r2, #0
 80082e8:	0018      	movs	r0, r3
 80082ea:	f000 fc25 	bl	8008b38 <GasIndexAlgorithm__sigmoid_scaled__process>
 80082ee:	1c02      	adds	r2, r0, #0
 80082f0:	68fb      	ldr	r3, [r7, #12]
 80082f2:	639a      	str	r2, [r3, #56]	@ 0x38
 80082f4:	e003      	b.n	80082fe <GasIndexAlgorithm_process+0xce>
                params, params->mGas_Index);
        } else {
            params->mGas_Index = params->mIndex_Offset;
 80082f6:	68fb      	ldr	r3, [r7, #12]
 80082f8:	689a      	ldr	r2, [r3, #8]
 80082fa:	68fb      	ldr	r3, [r7, #12]
 80082fc:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        params->mGas_Index = GasIndexAlgorithm__adaptive_lowpass__process(
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008302:	68fb      	ldr	r3, [r7, #12]
 8008304:	1c11      	adds	r1, r2, #0
 8008306:	0018      	movs	r0, r3
 8008308:	f000 fcec 	bl	8008ce4 <GasIndexAlgorithm__adaptive_lowpass__process>
 800830c:	1c02      	adds	r2, r0, #0
 800830e:	68fb      	ldr	r3, [r7, #12]
 8008310:	639a      	str	r2, [r3, #56]	@ 0x38
            params, params->mGas_Index);
        if ((params->mGas_Index < 0.5f)) {
 8008312:	68fb      	ldr	r3, [r7, #12]
 8008314:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 8008316:	21fc      	movs	r1, #252	@ 0xfc
 8008318:	0589      	lsls	r1, r1, #22
 800831a:	1c18      	adds	r0, r3, #0
 800831c:	f7f8 f908 	bl	8000530 <__aeabi_fcmplt>
 8008320:	1e03      	subs	r3, r0, #0
 8008322:	d003      	beq.n	800832c <GasIndexAlgorithm_process+0xfc>
            params->mGas_Index = 0.5f;
 8008324:	68fb      	ldr	r3, [r7, #12]
 8008326:	22fc      	movs	r2, #252	@ 0xfc
 8008328:	0592      	lsls	r2, r2, #22
 800832a:	639a      	str	r2, [r3, #56]	@ 0x38
        }
        if ((params->mSraw > 0.f)) {
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8008330:	2100      	movs	r1, #0
 8008332:	1c18      	adds	r0, r3, #0
 8008334:	f7f8 f910 	bl	8000558 <__aeabi_fcmpgt>
 8008338:	1e03      	subs	r3, r0, #0
 800833a:	d015      	beq.n	8008368 <GasIndexAlgorithm_process+0x138>
            GasIndexAlgorithm__mean_variance_estimator__process(params,
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8008340:	68fb      	ldr	r3, [r7, #12]
 8008342:	1c11      	adds	r1, r2, #0
 8008344:	0018      	movs	r0, r3
 8008346:	f000 fa4f 	bl	80087e8 <GasIndexAlgorithm__mean_variance_estimator__process>
                                                                params->mSraw);
            GasIndexAlgorithm__mox_model__set_parameters(
 800834a:	68fb      	ldr	r3, [r7, #12]
 800834c:	0018      	movs	r0, r3
 800834e:	f000 f8e5 	bl	800851c <GasIndexAlgorithm__mean_variance_estimator__get_std>
 8008352:	1c04      	adds	r4, r0, #0
 8008354:	68fb      	ldr	r3, [r7, #12]
 8008356:	0018      	movs	r0, r3
 8008358:	f000 f8ea 	bl	8008530 <GasIndexAlgorithm__mean_variance_estimator__get_mean>
 800835c:	1c02      	adds	r2, r0, #0
 800835e:	68fb      	ldr	r3, [r7, #12]
 8008360:	1c21      	adds	r1, r4, #0
 8008362:	0018      	movs	r0, r3
 8008364:	f000 fb7a 	bl	8008a5c <GasIndexAlgorithm__mox_model__set_parameters>
                params,
                GasIndexAlgorithm__mean_variance_estimator__get_std(params),
                GasIndexAlgorithm__mean_variance_estimator__get_mean(params));
        }
    }
    *gas_index = ((int32_t)((params->mGas_Index + 0.5f)));
 8008368:	68fb      	ldr	r3, [r7, #12]
 800836a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800836c:	21fc      	movs	r1, #252	@ 0xfc
 800836e:	0589      	lsls	r1, r1, #22
 8008370:	1c18      	adds	r0, r3, #0
 8008372:	f7f8 faa5 	bl	80008c0 <__aeabi_fadd>
 8008376:	1c03      	adds	r3, r0, #0
 8008378:	1c18      	adds	r0, r3, #0
 800837a:	f7f9 f909 	bl	8001590 <__aeabi_f2iz>
 800837e:	0002      	movs	r2, r0
 8008380:	687b      	ldr	r3, [r7, #4]
 8008382:	601a      	str	r2, [r3, #0]
    return;
 8008384:	46c0      	nop			@ (mov r8, r8)
}
 8008386:	46bd      	mov	sp, r7
 8008388:	b005      	add	sp, #20
 800838a:	bd90      	pop	{r4, r7, pc}
 800838c:	42340000 	.word	0x42340000
 8008390:	0000fde7 	.word	0x0000fde7
 8008394:	00007fff 	.word	0x00007fff

08008398 <GasIndexAlgorithm__mean_variance_estimator__set_parameters>:

static void GasIndexAlgorithm__mean_variance_estimator__set_parameters(
    GasIndexAlgorithmParams* params) {
 8008398:	b5b0      	push	{r4, r5, r7, lr}
 800839a:	b082      	sub	sp, #8
 800839c:	af00      	add	r7, sp, #0
 800839e:	6078      	str	r0, [r7, #4]

    params->m_Mean_Variance_Estimator___Initialized = false;
 80083a0:	687b      	ldr	r3, [r7, #4]
 80083a2:	223c      	movs	r2, #60	@ 0x3c
 80083a4:	2100      	movs	r1, #0
 80083a6:	5499      	strb	r1, [r3, r2]
    params->m_Mean_Variance_Estimator___Mean = 0.f;
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	2200      	movs	r2, #0
 80083ac:	641a      	str	r2, [r3, #64]	@ 0x40
    params->m_Mean_Variance_Estimator___Sraw_Offset = 0.f;
 80083ae:	687b      	ldr	r3, [r7, #4]
 80083b0:	2200      	movs	r2, #0
 80083b2:	645a      	str	r2, [r3, #68]	@ 0x44
    params->m_Mean_Variance_Estimator___Std = params->mSraw_Std_Initial;
 80083b4:	687b      	ldr	r3, [r7, #4]
 80083b6:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 80083b8:	687b      	ldr	r3, [r7, #4]
 80083ba:	649a      	str	r2, [r3, #72]	@ 0x48
    params->m_Mean_Variance_Estimator___Gamma_Mean =
        (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
          (params->mSamplingInterval / 3600.f)) /
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	685b      	ldr	r3, [r3, #4]
 80083c0:	4952      	ldr	r1, [pc, #328]	@ (800850c <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 80083c2:	1c18      	adds	r0, r3, #0
 80083c4:	f7f8 fc06 	bl	8000bd4 <__aeabi_fdiv>
 80083c8:	1c03      	adds	r3, r0, #0
           GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 80083ca:	2188      	movs	r1, #136	@ 0x88
 80083cc:	05c9      	lsls	r1, r1, #23
 80083ce:	1c18      	adds	r0, r3, #0
 80083d0:	f7f8 fde6 	bl	8000fa0 <__aeabi_fmul>
 80083d4:	1c03      	adds	r3, r0, #0
 80083d6:	1c1d      	adds	r5, r3, #0
         (params->mTau_Mean_Hours + (params->mSamplingInterval / 3600.f)));
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	6a5c      	ldr	r4, [r3, #36]	@ 0x24
 80083dc:	687b      	ldr	r3, [r7, #4]
 80083de:	685b      	ldr	r3, [r3, #4]
 80083e0:	494a      	ldr	r1, [pc, #296]	@ (800850c <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 80083e2:	1c18      	adds	r0, r3, #0
 80083e4:	f7f8 fbf6 	bl	8000bd4 <__aeabi_fdiv>
 80083e8:	1c03      	adds	r3, r0, #0
 80083ea:	1c19      	adds	r1, r3, #0
 80083ec:	1c20      	adds	r0, r4, #0
 80083ee:	f7f8 fa67 	bl	80008c0 <__aeabi_fadd>
 80083f2:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 80083f4:	1c19      	adds	r1, r3, #0
 80083f6:	1c28      	adds	r0, r5, #0
 80083f8:	f7f8 fbec 	bl	8000bd4 <__aeabi_fdiv>
 80083fc:	1c03      	adds	r3, r0, #0
 80083fe:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Mean =
 8008400:	687b      	ldr	r3, [r7, #4]
 8008402:	64da      	str	r2, [r3, #76]	@ 0x4c
    params->m_Mean_Variance_Estimator___Gamma_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          (params->mSamplingInterval / 3600.f)) /
 8008404:	687b      	ldr	r3, [r7, #4]
 8008406:	685b      	ldr	r3, [r3, #4]
 8008408:	4940      	ldr	r1, [pc, #256]	@ (800850c <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800840a:	1c18      	adds	r0, r3, #0
 800840c:	f7f8 fbe2 	bl	8000bd4 <__aeabi_fdiv>
 8008410:	1c03      	adds	r3, r0, #0
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 8008412:	2185      	movs	r1, #133	@ 0x85
 8008414:	05c9      	lsls	r1, r1, #23
 8008416:	1c18      	adds	r0, r3, #0
 8008418:	f7f8 fdc2 	bl	8000fa0 <__aeabi_fmul>
 800841c:	1c03      	adds	r3, r0, #0
 800841e:	1c1d      	adds	r5, r3, #0
         (params->mTau_Variance_Hours + (params->mSamplingInterval / 3600.f)));
 8008420:	687b      	ldr	r3, [r7, #4]
 8008422:	6a9c      	ldr	r4, [r3, #40]	@ 0x28
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	685b      	ldr	r3, [r3, #4]
 8008428:	4938      	ldr	r1, [pc, #224]	@ (800850c <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x174>)
 800842a:	1c18      	adds	r0, r3, #0
 800842c:	f7f8 fbd2 	bl	8000bd4 <__aeabi_fdiv>
 8008430:	1c03      	adds	r3, r0, #0
 8008432:	1c19      	adds	r1, r3, #0
 8008434:	1c20      	adds	r0, r4, #0
 8008436:	f7f8 fa43 	bl	80008c0 <__aeabi_fadd>
 800843a:	1c03      	adds	r3, r0, #0
          (params->mSamplingInterval / 3600.f)) /
 800843c:	1c19      	adds	r1, r3, #0
 800843e:	1c28      	adds	r0, r5, #0
 8008440:	f7f8 fbc8 	bl	8000bd4 <__aeabi_fdiv>
 8008444:	1c03      	adds	r3, r0, #0
 8008446:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Variance =
 8008448:	687b      	ldr	r3, [r7, #4]
 800844a:	651a      	str	r2, [r3, #80]	@ 0x50
    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 800844c:	687b      	ldr	r3, [r7, #4]
 800844e:	681b      	ldr	r3, [r3, #0]
 8008450:	2b01      	cmp	r3, #1
 8008452:	d118      	bne.n	8008486 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0xee>
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 8008454:	687b      	ldr	r3, [r7, #4]
 8008456:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 8008458:	2188      	movs	r1, #136	@ 0x88
 800845a:	05c9      	lsls	r1, r1, #23
 800845c:	1c18      	adds	r0, r3, #0
 800845e:	f7f8 fd9f 	bl	8000fa0 <__aeabi_fmul>
 8008462:	1c03      	adds	r3, r0, #0
 8008464:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
              params->mSamplingInterval));
 8008466:	687b      	ldr	r3, [r7, #4]
 8008468:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_NOX +
 800846a:	4929      	ldr	r1, [pc, #164]	@ (8008510 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x178>)
 800846c:	1c18      	adds	r0, r3, #0
 800846e:	f7f8 fa27 	bl	80008c0 <__aeabi_fadd>
 8008472:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 8008474:	1c19      	adds	r1, r3, #0
 8008476:	1c20      	adds	r0, r4, #0
 8008478:	f7f8 fbac 	bl	8000bd4 <__aeabi_fdiv>
 800847c:	1c03      	adds	r3, r0, #0
 800847e:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 8008480:	687b      	ldr	r3, [r7, #4]
 8008482:	655a      	str	r2, [r3, #84]	@ 0x54
 8008484:	e017      	b.n	80084b6 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x11e>
    } else {
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
            (((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING *
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
              params->mSamplingInterval) /
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	685b      	ldr	r3, [r3, #4]
               GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING) *
 800848a:	2188      	movs	r1, #136	@ 0x88
 800848c:	05c9      	lsls	r1, r1, #23
 800848e:	1c18      	adds	r0, r3, #0
 8008490:	f7f8 fd86 	bl	8000fa0 <__aeabi_fmul>
 8008494:	1c03      	adds	r3, r0, #0
 8008496:	1c1c      	adds	r4, r3, #0
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
              params->mSamplingInterval));
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	685b      	ldr	r3, [r3, #4]
             (GasIndexAlgorithm_TAU_INITIAL_MEAN_VOC +
 800849c:	491d      	ldr	r1, [pc, #116]	@ (8008514 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x17c>)
 800849e:	1c18      	adds	r0, r3, #0
 80084a0:	f7f8 fa0e 	bl	80008c0 <__aeabi_fadd>
 80084a4:	1c03      	adds	r3, r0, #0
              params->mSamplingInterval) /
 80084a6:	1c19      	adds	r1, r3, #0
 80084a8:	1c20      	adds	r0, r4, #0
 80084aa:	f7f8 fb93 	bl	8000bd4 <__aeabi_fdiv>
 80084ae:	1c03      	adds	r3, r0, #0
 80084b0:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Gamma_Initial_Mean =
 80084b2:	687b      	ldr	r3, [r7, #4]
 80084b4:	655a      	str	r2, [r3, #84]	@ 0x54
    }
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
          params->mSamplingInterval) /
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	685b      	ldr	r3, [r3, #4]
        ((GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 80084ba:	2185      	movs	r1, #133	@ 0x85
 80084bc:	05c9      	lsls	r1, r1, #23
 80084be:	1c18      	adds	r0, r3, #0
 80084c0:	f7f8 fd6e 	bl	8000fa0 <__aeabi_fmul>
 80084c4:	1c03      	adds	r3, r0, #0
 80084c6:	1c1c      	adds	r4, r3, #0
         (GasIndexAlgorithm_TAU_INITIAL_VARIANCE + params->mSamplingInterval));
 80084c8:	687b      	ldr	r3, [r7, #4]
 80084ca:	685b      	ldr	r3, [r3, #4]
 80084cc:	4912      	ldr	r1, [pc, #72]	@ (8008518 <GasIndexAlgorithm__mean_variance_estimator__set_parameters+0x180>)
 80084ce:	1c18      	adds	r0, r3, #0
 80084d0:	f7f8 f9f6 	bl	80008c0 <__aeabi_fadd>
 80084d4:	1c03      	adds	r3, r0, #0
          params->mSamplingInterval) /
 80084d6:	1c19      	adds	r1, r3, #0
 80084d8:	1c20      	adds	r0, r4, #0
 80084da:	f7f8 fb7b 	bl	8000bd4 <__aeabi_fdiv>
 80084de:	1c03      	adds	r3, r0, #0
 80084e0:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gamma_Initial_Variance =
 80084e2:	687b      	ldr	r3, [r7, #4]
 80084e4:	659a      	str	r2, [r3, #88]	@ 0x58
    params->m_Mean_Variance_Estimator__Gamma_Mean = 0.f;
 80084e6:	687b      	ldr	r3, [r7, #4]
 80084e8:	2200      	movs	r2, #0
 80084ea:	65da      	str	r2, [r3, #92]	@ 0x5c
    params->m_Mean_Variance_Estimator__Gamma_Variance = 0.f;
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	2200      	movs	r2, #0
 80084f0:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Uptime_Gamma = 0.f;
 80084f2:	687b      	ldr	r3, [r7, #4]
 80084f4:	2200      	movs	r2, #0
 80084f6:	665a      	str	r2, [r3, #100]	@ 0x64
    params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 80084f8:	687b      	ldr	r3, [r7, #4]
 80084fa:	2200      	movs	r2, #0
 80084fc:	669a      	str	r2, [r3, #104]	@ 0x68
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 80084fe:	687b      	ldr	r3, [r7, #4]
 8008500:	2200      	movs	r2, #0
 8008502:	66da      	str	r2, [r3, #108]	@ 0x6c
}
 8008504:	46c0      	nop			@ (mov r8, r8)
 8008506:	46bd      	mov	sp, r7
 8008508:	b002      	add	sp, #8
 800850a:	bdb0      	pop	{r4, r5, r7, pc}
 800850c:	45610000 	.word	0x45610000
 8008510:	44960000 	.word	0x44960000
 8008514:	41a00000 	.word	0x41a00000
 8008518:	451c4000 	.word	0x451c4000

0800851c <GasIndexAlgorithm__mean_variance_estimator__get_std>:
    params->m_Mean_Variance_Estimator___Uptime_Gamma = uptime_gamma;
    params->m_Mean_Variance_Estimator___Initialized = true;
}

static float GasIndexAlgorithm__mean_variance_estimator__get_std(
    const GasIndexAlgorithmParams* params) {
 800851c:	b580      	push	{r7, lr}
 800851e:	b082      	sub	sp, #8
 8008520:	af00      	add	r7, sp, #0
 8008522:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Std;
 8008524:	687b      	ldr	r3, [r7, #4]
 8008526:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
}
 8008528:	1c18      	adds	r0, r3, #0
 800852a:	46bd      	mov	sp, r7
 800852c:	b002      	add	sp, #8
 800852e:	bd80      	pop	{r7, pc}

08008530 <GasIndexAlgorithm__mean_variance_estimator__get_mean>:

static float GasIndexAlgorithm__mean_variance_estimator__get_mean(
    const GasIndexAlgorithmParams* params) {
 8008530:	b580      	push	{r7, lr}
 8008532:	b082      	sub	sp, #8
 8008534:	af00      	add	r7, sp, #0
 8008536:	6078      	str	r0, [r7, #4]

    return (params->m_Mean_Variance_Estimator___Mean +
 8008538:	687b      	ldr	r3, [r7, #4]
 800853a:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
            params->m_Mean_Variance_Estimator___Sraw_Offset);
 800853c:	687b      	ldr	r3, [r7, #4]
 800853e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    return (params->m_Mean_Variance_Estimator___Mean +
 8008540:	1c19      	adds	r1, r3, #0
 8008542:	1c10      	adds	r0, r2, #0
 8008544:	f7f8 f9bc 	bl	80008c0 <__aeabi_fadd>
 8008548:	1c03      	adds	r3, r0, #0
}
 800854a:	1c18      	adds	r0, r3, #0
 800854c:	46bd      	mov	sp, r7
 800854e:	b002      	add	sp, #8
 8008550:	bd80      	pop	{r7, pc}

08008552 <GasIndexAlgorithm__mean_variance_estimator__is_initialized>:

static bool GasIndexAlgorithm__mean_variance_estimator__is_initialized(
    GasIndexAlgorithmParams* params) {
 8008552:	b580      	push	{r7, lr}
 8008554:	b082      	sub	sp, #8
 8008556:	af00      	add	r7, sp, #0
 8008558:	6078      	str	r0, [r7, #4]

    return params->m_Mean_Variance_Estimator___Initialized;
 800855a:	687b      	ldr	r3, [r7, #4]
 800855c:	223c      	movs	r2, #60	@ 0x3c
 800855e:	5c9b      	ldrb	r3, [r3, r2]
}
 8008560:	0018      	movs	r0, r3
 8008562:	46bd      	mov	sp, r7
 8008564:	b002      	add	sp, #8
 8008566:	bd80      	pop	{r7, pc}

08008568 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>:

static void GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(
    GasIndexAlgorithmParams* params) {
 8008568:	b5b0      	push	{r4, r5, r7, lr}
 800856a:	b08c      	sub	sp, #48	@ 0x30
 800856c:	af00      	add	r7, sp, #0
 800856e:	6078      	str	r0, [r7, #4]
    float gamma_variance;
    float gating_threshold_variance;
    float sigmoid_gating_variance;

    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
                    params->mSamplingInterval);
 8008570:	687b      	ldr	r3, [r7, #4]
 8008572:	685b      	ldr	r3, [r3, #4]
    uptime_limit = (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__FIX16_MAX -
 8008574:	1c19      	adds	r1, r3, #0
 8008576:	4895      	ldr	r0, [pc, #596]	@ (80087cc <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x264>)
 8008578:	f7f8 fe50 	bl	800121c <__aeabi_fsub>
 800857c:	1c03      	adds	r3, r0, #0
 800857e:	62fb      	str	r3, [r7, #44]	@ 0x2c
    if ((params->m_Mean_Variance_Estimator___Uptime_Gamma < uptime_limit)) {
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6e5b      	ldr	r3, [r3, #100]	@ 0x64
 8008584:	1c19      	adds	r1, r3, #0
 8008586:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 8008588:	f7f7 ffe6 	bl	8000558 <__aeabi_fcmpgt>
 800858c:	1e03      	subs	r3, r0, #0
 800858e:	d00b      	beq.n	80085a8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x40>
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 8008590:	687b      	ldr	r3, [r7, #4]
 8008592:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
             params->mSamplingInterval);
 8008594:	687b      	ldr	r3, [r7, #4]
 8008596:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gamma +
 8008598:	1c19      	adds	r1, r3, #0
 800859a:	1c10      	adds	r0, r2, #0
 800859c:	f7f8 f990 	bl	80008c0 <__aeabi_fadd>
 80085a0:	1c03      	adds	r3, r0, #0
 80085a2:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gamma =
 80085a4:	687b      	ldr	r3, [r7, #4]
 80085a6:	665a      	str	r2, [r3, #100]	@ 0x64
    }
    if ((params->m_Mean_Variance_Estimator___Uptime_Gating < uptime_limit)) {
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 80085ac:	1c19      	adds	r1, r3, #0
 80085ae:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 80085b0:	f7f7 ffd2 	bl	8000558 <__aeabi_fcmpgt>
 80085b4:	1e03      	subs	r3, r0, #0
 80085b6:	d00b      	beq.n	80085d0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x68>
        params->m_Mean_Variance_Estimator___Uptime_Gating =
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 80085b8:	687b      	ldr	r3, [r7, #4]
 80085ba:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
             params->mSamplingInterval);
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	685b      	ldr	r3, [r3, #4]
            (params->m_Mean_Variance_Estimator___Uptime_Gating +
 80085c0:	1c19      	adds	r1, r3, #0
 80085c2:	1c10      	adds	r0, r2, #0
 80085c4:	f7f8 f97c 	bl	80008c0 <__aeabi_fadd>
 80085c8:	1c03      	adds	r3, r0, #0
 80085ca:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Uptime_Gating =
 80085cc:	687b      	ldr	r3, [r7, #4]
 80085ce:	669a      	str	r2, [r3, #104]	@ 0x68
    }
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 80085d0:	687b      	ldr	r3, [r7, #4]
 80085d2:	6959      	ldr	r1, [r3, #20]
 80085d4:	4a7e      	ldr	r2, [pc, #504]	@ (80087d0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	0018      	movs	r0, r3
 80085da:	f000 f9f1 	bl	80089c0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Mean,
        GasIndexAlgorithm_INIT_TRANSITION_MEAN);
    sigmoid_gamma_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 80085de:	687b      	ldr	r3, [r7, #4]
 80085e0:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 80085e2:	687b      	ldr	r3, [r7, #4]
 80085e4:	1c11      	adds	r1, r2, #0
 80085e6:	0018      	movs	r0, r3
 80085e8:	f000 f9fa 	bl	80089e0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 80085ec:	1c03      	adds	r3, r0, #0
 80085ee:	62bb      	str	r3, [r7, #40]	@ 0x28
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 80085f0:	687b      	ldr	r3, [r7, #4]
 80085f2:	6cdc      	ldr	r4, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 80085f4:	687b      	ldr	r3, [r7, #4]
 80085f6:	6d5a      	ldr	r2, [r3, #84]	@ 0x54
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 80085f8:	687b      	ldr	r3, [r7, #4]
 80085fa:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
                  ((params->m_Mean_Variance_Estimator___Gamma_Initial_Mean -
 80085fc:	1c19      	adds	r1, r3, #0
 80085fe:	1c10      	adds	r0, r2, #0
 8008600:	f7f8 fe0c 	bl	800121c <__aeabi_fsub>
 8008604:	1c03      	adds	r3, r0, #0
                    params->m_Mean_Variance_Estimator___Gamma_Mean) *
 8008606:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 8008608:	1c18      	adds	r0, r3, #0
 800860a:	f7f8 fcc9 	bl	8000fa0 <__aeabi_fmul>
 800860e:	1c03      	adds	r3, r0, #0
    gamma_mean = (params->m_Mean_Variance_Estimator___Gamma_Mean +
 8008610:	1c19      	adds	r1, r3, #0
 8008612:	1c20      	adds	r0, r4, #0
 8008614:	f7f8 f954 	bl	80008c0 <__aeabi_fadd>
 8008618:	1c03      	adds	r3, r0, #0
 800861a:	627b      	str	r3, [r7, #36]	@ 0x24
                   sigmoid_gamma_mean));
    gating_threshold_mean =
        (params->mGating_Threshold +
 800861c:	687b      	ldr	r3, [r7, #4]
 800861e:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 8008624:	1c19      	adds	r1, r3, #0
 8008626:	486b      	ldr	r0, [pc, #428]	@ (80087d4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 8008628:	f7f8 fdf8 	bl	800121c <__aeabi_fsub>
 800862c:	1c03      	adds	r3, r0, #0
 800862e:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8008630:	687b      	ldr	r3, [r7, #4]
 8008632:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 8008634:	687b      	ldr	r3, [r7, #4]
 8008636:	1c11      	adds	r1, r2, #0
 8008638:	0018      	movs	r0, r3
 800863a:	f000 f9d1 	bl	80089e0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 800863e:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 8008640:	1c19      	adds	r1, r3, #0
 8008642:	1c28      	adds	r0, r5, #0
 8008644:	f7f8 fcac 	bl	8000fa0 <__aeabi_fmul>
 8008648:	1c03      	adds	r3, r0, #0
    gating_threshold_mean =
 800864a:	1c19      	adds	r1, r3, #0
 800864c:	1c20      	adds	r0, r4, #0
 800864e:	f7f8 f937 	bl	80008c0 <__aeabi_fadd>
 8008652:	1c03      	adds	r3, r0, #0
 8008654:	623b      	str	r3, [r7, #32]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8008656:	4a60      	ldr	r2, [pc, #384]	@ (80087d8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 8008658:	6a39      	ldr	r1, [r7, #32]
 800865a:	687b      	ldr	r3, [r7, #4]
 800865c:	0018      	movs	r0, r3
 800865e:	f000 f9af 	bl	80089c0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_mean,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_mean =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8008662:	687b      	ldr	r3, [r7, #4]
 8008664:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	1c11      	adds	r1, r2, #0
 800866a:	0018      	movs	r0, r3
 800866c:	f000 f9b8 	bl	80089e0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8008670:	1c03      	adds	r3, r0, #0
 8008672:	61fb      	str	r3, [r7, #28]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Mean =
        (sigmoid_gating_mean * gamma_mean);
 8008674:	6a79      	ldr	r1, [r7, #36]	@ 0x24
 8008676:	69f8      	ldr	r0, [r7, #28]
 8008678:	f7f8 fc92 	bl	8000fa0 <__aeabi_fmul>
 800867c:	1c03      	adds	r3, r0, #0
 800867e:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Mean =
 8008680:	687b      	ldr	r3, [r7, #4]
 8008682:	65da      	str	r2, [r3, #92]	@ 0x5c
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8008684:	687b      	ldr	r3, [r7, #4]
 8008686:	6999      	ldr	r1, [r3, #24]
 8008688:	4a51      	ldr	r2, [pc, #324]	@ (80087d0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x268>)
 800868a:	687b      	ldr	r3, [r7, #4]
 800868c:	0018      	movs	r0, r3
 800868e:	f000 f997 	bl	80089c0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, params->mInit_Duration_Variance,
        GasIndexAlgorithm_INIT_TRANSITION_VARIANCE);
    sigmoid_gamma_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8008692:	687b      	ldr	r3, [r7, #4]
 8008694:	6e5a      	ldr	r2, [r3, #100]	@ 0x64
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	1c11      	adds	r1, r2, #0
 800869a:	0018      	movs	r0, r3
 800869c:	f000 f9a0 	bl	80089e0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 80086a0:	1c03      	adds	r3, r0, #0
 80086a2:	61bb      	str	r3, [r7, #24]
            params, params->m_Mean_Variance_Estimator___Uptime_Gamma);
    gamma_variance =
        (params->m_Mean_Variance_Estimator___Gamma_Variance +
 80086a4:	687b      	ldr	r3, [r7, #4]
 80086a6:	6d1c      	ldr	r4, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 80086a8:	687b      	ldr	r3, [r7, #4]
 80086aa:	6d9a      	ldr	r2, [r3, #88]	@ 0x58
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 80086ac:	687b      	ldr	r3, [r7, #4]
 80086ae:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
         ((params->m_Mean_Variance_Estimator___Gamma_Initial_Variance -
 80086b0:	1c19      	adds	r1, r3, #0
 80086b2:	1c10      	adds	r0, r2, #0
 80086b4:	f7f8 fdb2 	bl	800121c <__aeabi_fsub>
 80086b8:	1c03      	adds	r3, r0, #0
 80086ba:	1c1d      	adds	r5, r3, #0
          (sigmoid_gamma_variance - sigmoid_gamma_mean)));
 80086bc:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 80086be:	69b8      	ldr	r0, [r7, #24]
 80086c0:	f7f8 fdac 	bl	800121c <__aeabi_fsub>
 80086c4:	1c03      	adds	r3, r0, #0
           params->m_Mean_Variance_Estimator___Gamma_Variance) *
 80086c6:	1c19      	adds	r1, r3, #0
 80086c8:	1c28      	adds	r0, r5, #0
 80086ca:	f7f8 fc69 	bl	8000fa0 <__aeabi_fmul>
 80086ce:	1c03      	adds	r3, r0, #0
    gamma_variance =
 80086d0:	1c19      	adds	r1, r3, #0
 80086d2:	1c20      	adds	r0, r4, #0
 80086d4:	f7f8 f8f4 	bl	80008c0 <__aeabi_fadd>
 80086d8:	1c03      	adds	r3, r0, #0
 80086da:	617b      	str	r3, [r7, #20]
    gating_threshold_variance =
        (params->mGating_Threshold +
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	69dc      	ldr	r4, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
           params->mGating_Threshold) *
 80086e0:	687b      	ldr	r3, [r7, #4]
 80086e2:	69db      	ldr	r3, [r3, #28]
         ((GasIndexAlgorithm_GATING_THRESHOLD_INITIAL -
 80086e4:	1c19      	adds	r1, r3, #0
 80086e6:	483b      	ldr	r0, [pc, #236]	@ (80087d4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x26c>)
 80086e8:	f7f8 fd98 	bl	800121c <__aeabi_fsub>
 80086ec:	1c03      	adds	r3, r0, #0
 80086ee:	1c1d      	adds	r5, r3, #0
          GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	6e9a      	ldr	r2, [r3, #104]	@ 0x68
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	1c11      	adds	r1, r2, #0
 80086f8:	0018      	movs	r0, r3
 80086fa:	f000 f971 	bl	80089e0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 80086fe:	1c03      	adds	r3, r0, #0
           params->mGating_Threshold) *
 8008700:	1c19      	adds	r1, r3, #0
 8008702:	1c28      	adds	r0, r5, #0
 8008704:	f7f8 fc4c 	bl	8000fa0 <__aeabi_fmul>
 8008708:	1c03      	adds	r3, r0, #0
    gating_threshold_variance =
 800870a:	1c19      	adds	r1, r3, #0
 800870c:	1c20      	adds	r0, r4, #0
 800870e:	f7f8 f8d7 	bl	80008c0 <__aeabi_fadd>
 8008712:	1c03      	adds	r3, r0, #0
 8008714:	613b      	str	r3, [r7, #16]
              params, params->m_Mean_Variance_Estimator___Uptime_Gating)));
    GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
 8008716:	4a30      	ldr	r2, [pc, #192]	@ (80087d8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x270>)
 8008718:	6939      	ldr	r1, [r7, #16]
 800871a:	687b      	ldr	r3, [r7, #4]
 800871c:	0018      	movs	r0, r3
 800871e:	f000 f94f 	bl	80089c0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>
        params, gating_threshold_variance,
        GasIndexAlgorithm_GATING_THRESHOLD_TRANSITION);
    sigmoid_gating_variance =
        GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
 8008722:	687b      	ldr	r3, [r7, #4]
 8008724:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8008726:	687b      	ldr	r3, [r7, #4]
 8008728:	1c11      	adds	r1, r2, #0
 800872a:	0018      	movs	r0, r3
 800872c:	f000 f958 	bl	80089e0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>
 8008730:	1c03      	adds	r3, r0, #0
 8008732:	60fb      	str	r3, [r7, #12]
            params, params->mGas_Index);
    params->m_Mean_Variance_Estimator__Gamma_Variance =
        (sigmoid_gating_variance * gamma_variance);
 8008734:	6979      	ldr	r1, [r7, #20]
 8008736:	68f8      	ldr	r0, [r7, #12]
 8008738:	f7f8 fc32 	bl	8000fa0 <__aeabi_fmul>
 800873c:	1c03      	adds	r3, r0, #0
 800873e:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator__Gamma_Variance =
 8008740:	687b      	ldr	r3, [r7, #4]
 8008742:	661a      	str	r2, [r3, #96]	@ 0x60
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6edc      	ldr	r4, [r3, #108]	@ 0x6c
         ((params->mSamplingInterval / 60.f) *
 8008748:	687b      	ldr	r3, [r7, #4]
 800874a:	685b      	ldr	r3, [r3, #4]
 800874c:	4923      	ldr	r1, [pc, #140]	@ (80087dc <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x274>)
 800874e:	1c18      	adds	r0, r3, #0
 8008750:	f7f8 fa40 	bl	8000bd4 <__aeabi_fdiv>
 8008754:	1c03      	adds	r3, r0, #0
 8008756:	1c1d      	adds	r5, r3, #0
          (((1.f - sigmoid_gating_mean) *
 8008758:	69f9      	ldr	r1, [r7, #28]
 800875a:	20fe      	movs	r0, #254	@ 0xfe
 800875c:	0580      	lsls	r0, r0, #22
 800875e:	f7f8 fd5d 	bl	800121c <__aeabi_fsub>
 8008762:	1c03      	adds	r3, r0, #0
 8008764:	491e      	ldr	r1, [pc, #120]	@ (80087e0 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x278>)
 8008766:	1c18      	adds	r0, r3, #0
 8008768:	f7f8 fc1a 	bl	8000fa0 <__aeabi_fmul>
 800876c:	1c03      	adds	r3, r0, #0
            (1.f + GasIndexAlgorithm_GATING_MAX_RATIO)) -
 800876e:	491d      	ldr	r1, [pc, #116]	@ (80087e4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x27c>)
 8008770:	1c18      	adds	r0, r3, #0
 8008772:	f7f8 fd53 	bl	800121c <__aeabi_fsub>
 8008776:	1c03      	adds	r3, r0, #0
         ((params->mSamplingInterval / 60.f) *
 8008778:	1c19      	adds	r1, r3, #0
 800877a:	1c28      	adds	r0, r5, #0
 800877c:	f7f8 fc10 	bl	8000fa0 <__aeabi_fmul>
 8008780:	1c03      	adds	r3, r0, #0
        (params->m_Mean_Variance_Estimator___Gating_Duration_Minutes +
 8008782:	1c19      	adds	r1, r3, #0
 8008784:	1c20      	adds	r0, r4, #0
 8008786:	f7f8 f89b 	bl	80008c0 <__aeabi_fadd>
 800878a:	1c03      	adds	r3, r0, #0
 800878c:	1c1a      	adds	r2, r3, #0
    params->m_Mean_Variance_Estimator___Gating_Duration_Minutes =
 800878e:	687b      	ldr	r3, [r7, #4]
 8008790:	66da      	str	r2, [r3, #108]	@ 0x6c
           GasIndexAlgorithm_GATING_MAX_RATIO)));
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes < 0.f)) {
 8008792:	687b      	ldr	r3, [r7, #4]
 8008794:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8008796:	2100      	movs	r1, #0
 8008798:	1c18      	adds	r0, r3, #0
 800879a:	f7f7 fec9 	bl	8000530 <__aeabi_fcmplt>
 800879e:	1e03      	subs	r3, r0, #0
 80087a0:	d002      	beq.n	80087a8 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x240>
        params->m_Mean_Variance_Estimator___Gating_Duration_Minutes = 0.f;
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	2200      	movs	r2, #0
 80087a6:	66da      	str	r2, [r3, #108]	@ 0x6c
    }
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 80087a8:	687b      	ldr	r3, [r7, #4]
 80087aa:	6eda      	ldr	r2, [r3, #108]	@ 0x6c
         params->mGating_Max_Duration_Minutes)) {
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	691b      	ldr	r3, [r3, #16]
    if ((params->m_Mean_Variance_Estimator___Gating_Duration_Minutes >
 80087b0:	1c19      	adds	r1, r3, #0
 80087b2:	1c10      	adds	r0, r2, #0
 80087b4:	f7f7 fed0 	bl	8000558 <__aeabi_fcmpgt>
 80087b8:	1e03      	subs	r3, r0, #0
 80087ba:	d100      	bne.n	80087be <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x256>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
    }
}
 80087bc:	e002      	b.n	80087c4 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma+0x25c>
        params->m_Mean_Variance_Estimator___Uptime_Gating = 0.f;
 80087be:	687b      	ldr	r3, [r7, #4]
 80087c0:	2200      	movs	r2, #0
 80087c2:	669a      	str	r2, [r3, #104]	@ 0x68
}
 80087c4:	46c0      	nop			@ (mov r8, r8)
 80087c6:	46bd      	mov	sp, r7
 80087c8:	b00c      	add	sp, #48	@ 0x30
 80087ca:	bdb0      	pop	{r4, r5, r7, pc}
 80087cc:	46fffe00 	.word	0x46fffe00
 80087d0:	3c23d70a 	.word	0x3c23d70a
 80087d4:	43ff0000 	.word	0x43ff0000
 80087d8:	3db851ec 	.word	0x3db851ec
 80087dc:	42700000 	.word	0x42700000
 80087e0:	3fa66666 	.word	0x3fa66666
 80087e4:	3e99999a 	.word	0x3e99999a

080087e8 <GasIndexAlgorithm__mean_variance_estimator__process>:

static void GasIndexAlgorithm__mean_variance_estimator__process(
    GasIndexAlgorithmParams* params, float sraw) {
 80087e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 80087ea:	b087      	sub	sp, #28
 80087ec:	af00      	add	r7, sp, #0
 80087ee:	6078      	str	r0, [r7, #4]
 80087f0:	6039      	str	r1, [r7, #0]

    float delta_sgp;
    float c;
    float additional_scaling;

    if ((params->m_Mean_Variance_Estimator___Initialized == false)) {
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	223c      	movs	r2, #60	@ 0x3c
 80087f6:	5c9b      	ldrb	r3, [r3, r2]
 80087f8:	2201      	movs	r2, #1
 80087fa:	4053      	eors	r3, r2
 80087fc:	b2db      	uxtb	r3, r3
 80087fe:	2b00      	cmp	r3, #0
 8008800:	d00a      	beq.n	8008818 <GasIndexAlgorithm__mean_variance_estimator__process+0x30>
        params->m_Mean_Variance_Estimator___Initialized = true;
 8008802:	687b      	ldr	r3, [r7, #4]
 8008804:	223c      	movs	r2, #60	@ 0x3c
 8008806:	2101      	movs	r1, #1
 8008808:	5499      	strb	r1, [r3, r2]
        params->m_Mean_Variance_Estimator___Sraw_Offset = sraw;
 800880a:	687b      	ldr	r3, [r7, #4]
 800880c:	683a      	ldr	r2, [r7, #0]
 800880e:	645a      	str	r2, [r3, #68]	@ 0x44
        params->m_Mean_Variance_Estimator___Mean = 0.f;
 8008810:	687b      	ldr	r3, [r7, #4]
 8008812:	2200      	movs	r2, #0
 8008814:	641a      	str	r2, [r3, #64]	@ 0x40
        params->m_Mean_Variance_Estimator___Mean =
            (params->m_Mean_Variance_Estimator___Mean +
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
              GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__ADDITIONAL_GAMMA_MEAN_SCALING));
    }
}
 8008816:	e0c8      	b.n	80089aa <GasIndexAlgorithm__mean_variance_estimator__process+0x1c2>
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 8008818:	687b      	ldr	r3, [r7, #4]
 800881a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800881c:	4965      	ldr	r1, [pc, #404]	@ (80089b4 <GasIndexAlgorithm__mean_variance_estimator__process+0x1cc>)
 800881e:	1c18      	adds	r0, r3, #0
 8008820:	f7f7 fea4 	bl	800056c <__aeabi_fcmpge>
 8008824:	1e03      	subs	r3, r0, #0
 8008826:	d107      	bne.n	8008838 <GasIndexAlgorithm__mean_variance_estimator__process+0x50>
             (params->m_Mean_Variance_Estimator___Mean <= -100.f))) {
 8008828:	687b      	ldr	r3, [r7, #4]
 800882a:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
        if (((params->m_Mean_Variance_Estimator___Mean >= 100.f) ||
 800882c:	4962      	ldr	r1, [pc, #392]	@ (80089b8 <GasIndexAlgorithm__mean_variance_estimator__process+0x1d0>)
 800882e:	1c18      	adds	r0, r3, #0
 8008830:	f7f7 fe88 	bl	8000544 <__aeabi_fcmple>
 8008834:	1e03      	subs	r3, r0, #0
 8008836:	d00e      	beq.n	8008856 <GasIndexAlgorithm__mean_variance_estimator__process+0x6e>
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 8008838:	687b      	ldr	r3, [r7, #4]
 800883a:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
                 params->m_Mean_Variance_Estimator___Mean);
 800883c:	687b      	ldr	r3, [r7, #4]
 800883e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
                (params->m_Mean_Variance_Estimator___Sraw_Offset +
 8008840:	1c19      	adds	r1, r3, #0
 8008842:	1c10      	adds	r0, r2, #0
 8008844:	f7f8 f83c 	bl	80008c0 <__aeabi_fadd>
 8008848:	1c03      	adds	r3, r0, #0
 800884a:	1c1a      	adds	r2, r3, #0
            params->m_Mean_Variance_Estimator___Sraw_Offset =
 800884c:	687b      	ldr	r3, [r7, #4]
 800884e:	645a      	str	r2, [r3, #68]	@ 0x44
            params->m_Mean_Variance_Estimator___Mean = 0.f;
 8008850:	687b      	ldr	r3, [r7, #4]
 8008852:	2200      	movs	r2, #0
 8008854:	641a      	str	r2, [r3, #64]	@ 0x40
        sraw = (sraw - params->m_Mean_Variance_Estimator___Sraw_Offset);
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800885a:	1c19      	adds	r1, r3, #0
 800885c:	6838      	ldr	r0, [r7, #0]
 800885e:	f7f8 fcdd 	bl	800121c <__aeabi_fsub>
 8008862:	1c03      	adds	r3, r0, #0
 8008864:	603b      	str	r3, [r7, #0]
        GasIndexAlgorithm__mean_variance_estimator___calculate_gamma(params);
 8008866:	687b      	ldr	r3, [r7, #4]
 8008868:	0018      	movs	r0, r3
 800886a:	f7ff fe7d 	bl	8008568 <GasIndexAlgorithm__mean_variance_estimator___calculate_gamma>
        delta_sgp = ((sraw - params->m_Mean_Variance_Estimator___Mean) /
 800886e:	687b      	ldr	r3, [r7, #4]
 8008870:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 8008872:	1c19      	adds	r1, r3, #0
 8008874:	6838      	ldr	r0, [r7, #0]
 8008876:	f7f8 fcd1 	bl	800121c <__aeabi_fsub>
 800887a:	1c03      	adds	r3, r0, #0
 800887c:	2185      	movs	r1, #133	@ 0x85
 800887e:	05c9      	lsls	r1, r1, #23
 8008880:	1c18      	adds	r0, r3, #0
 8008882:	f7f8 f9a7 	bl	8000bd4 <__aeabi_fdiv>
 8008886:	1c03      	adds	r3, r0, #0
 8008888:	60fb      	str	r3, [r7, #12]
        if ((delta_sgp < 0.f)) {
 800888a:	2100      	movs	r1, #0
 800888c:	68f8      	ldr	r0, [r7, #12]
 800888e:	f7f7 fe4f 	bl	8000530 <__aeabi_fcmplt>
 8008892:	1e03      	subs	r3, r0, #0
 8008894:	d008      	beq.n	80088a8 <GasIndexAlgorithm__mean_variance_estimator__process+0xc0>
            c = (params->m_Mean_Variance_Estimator___Std - delta_sgp);
 8008896:	687b      	ldr	r3, [r7, #4]
 8008898:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800889a:	68f9      	ldr	r1, [r7, #12]
 800889c:	1c18      	adds	r0, r3, #0
 800889e:	f7f8 fcbd 	bl	800121c <__aeabi_fsub>
 80088a2:	1c03      	adds	r3, r0, #0
 80088a4:	617b      	str	r3, [r7, #20]
 80088a6:	e007      	b.n	80088b8 <GasIndexAlgorithm__mean_variance_estimator__process+0xd0>
            c = (params->m_Mean_Variance_Estimator___Std + delta_sgp);
 80088a8:	687b      	ldr	r3, [r7, #4]
 80088aa:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 80088ac:	1c19      	adds	r1, r3, #0
 80088ae:	68f8      	ldr	r0, [r7, #12]
 80088b0:	f7f8 f806 	bl	80008c0 <__aeabi_fadd>
 80088b4:	1c03      	adds	r3, r0, #0
 80088b6:	617b      	str	r3, [r7, #20]
        additional_scaling = 1.f;
 80088b8:	23fe      	movs	r3, #254	@ 0xfe
 80088ba:	059b      	lsls	r3, r3, #22
 80088bc:	613b      	str	r3, [r7, #16]
        if ((c > 1440.f)) {
 80088be:	493f      	ldr	r1, [pc, #252]	@ (80089bc <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 80088c0:	6978      	ldr	r0, [r7, #20]
 80088c2:	f7f7 fe49 	bl	8000558 <__aeabi_fcmpgt>
 80088c6:	1e03      	subs	r3, r0, #0
 80088c8:	d010      	beq.n	80088ec <GasIndexAlgorithm__mean_variance_estimator__process+0x104>
            additional_scaling = ((c / 1440.f) * (c / 1440.f));
 80088ca:	493c      	ldr	r1, [pc, #240]	@ (80089bc <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 80088cc:	6978      	ldr	r0, [r7, #20]
 80088ce:	f7f8 f981 	bl	8000bd4 <__aeabi_fdiv>
 80088d2:	1c03      	adds	r3, r0, #0
 80088d4:	1c1c      	adds	r4, r3, #0
 80088d6:	4939      	ldr	r1, [pc, #228]	@ (80089bc <GasIndexAlgorithm__mean_variance_estimator__process+0x1d4>)
 80088d8:	6978      	ldr	r0, [r7, #20]
 80088da:	f7f8 f97b 	bl	8000bd4 <__aeabi_fdiv>
 80088de:	1c03      	adds	r3, r0, #0
 80088e0:	1c19      	adds	r1, r3, #0
 80088e2:	1c20      	adds	r0, r4, #0
 80088e4:	f7f8 fb5c 	bl	8000fa0 <__aeabi_fmul>
 80088e8:	1c03      	adds	r3, r0, #0
 80088ea:	613b      	str	r3, [r7, #16]
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING -
 80088f0:	1c19      	adds	r1, r3, #0
 80088f2:	2085      	movs	r0, #133	@ 0x85
 80088f4:	05c0      	lsls	r0, r0, #23
 80088f6:	f7f8 fc91 	bl	800121c <__aeabi_fsub>
 80088fa:	1c03      	adds	r3, r0, #0
            (sqrtf((additional_scaling *
 80088fc:	6939      	ldr	r1, [r7, #16]
 80088fe:	1c18      	adds	r0, r3, #0
 8008900:	f7f8 fb4e 	bl	8000fa0 <__aeabi_fmul>
 8008904:	1c03      	adds	r3, r0, #0
 8008906:	1c18      	adds	r0, r3, #0
 8008908:	f016 fc42 	bl	801f190 <sqrtf>
 800890c:	1c06      	adds	r6, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 800890e:	687b      	ldr	r3, [r7, #4]
 8008910:	6c9c      	ldr	r4, [r3, #72]	@ 0x48
                   (params->m_Mean_Variance_Estimator___Std /
 8008912:	687b      	ldr	r3, [r7, #4]
 8008914:	6c9d      	ldr	r5, [r3, #72]	@ 0x48
                    (GasIndexAlgorithm_MEAN_VARIANCE_ESTIMATOR__GAMMA_SCALING *
 8008916:	2185      	movs	r1, #133	@ 0x85
 8008918:	05c9      	lsls	r1, r1, #23
 800891a:	6938      	ldr	r0, [r7, #16]
 800891c:	f7f8 fb40 	bl	8000fa0 <__aeabi_fmul>
 8008920:	1c03      	adds	r3, r0, #0
                   (params->m_Mean_Variance_Estimator___Std /
 8008922:	1c19      	adds	r1, r3, #0
 8008924:	1c28      	adds	r0, r5, #0
 8008926:	f7f8 f955 	bl	8000bd4 <__aeabi_fdiv>
 800892a:	1c03      	adds	r3, r0, #0
                 ((params->m_Mean_Variance_Estimator___Std *
 800892c:	1c19      	adds	r1, r3, #0
 800892e:	1c20      	adds	r0, r4, #0
 8008930:	f7f8 fb36 	bl	8000fa0 <__aeabi_fmul>
 8008934:	1c03      	adds	r3, r0, #0
 8008936:	1c1c      	adds	r4, r3, #0
                  (((params->m_Mean_Variance_Estimator__Gamma_Variance *
 8008938:	687b      	ldr	r3, [r7, #4]
 800893a:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 800893c:	68f9      	ldr	r1, [r7, #12]
 800893e:	1c18      	adds	r0, r3, #0
 8008940:	f7f8 fb2e 	bl	8000fa0 <__aeabi_fmul>
 8008944:	1c03      	adds	r3, r0, #0
                     delta_sgp) /
 8008946:	6939      	ldr	r1, [r7, #16]
 8008948:	1c18      	adds	r0, r3, #0
 800894a:	f7f8 f943 	bl	8000bd4 <__aeabi_fdiv>
 800894e:	1c03      	adds	r3, r0, #0
                    additional_scaling) *
 8008950:	68f9      	ldr	r1, [r7, #12]
 8008952:	1c18      	adds	r0, r3, #0
 8008954:	f7f8 fb24 	bl	8000fa0 <__aeabi_fmul>
 8008958:	1c03      	adds	r3, r0, #0
             sqrtf(
 800895a:	1c19      	adds	r1, r3, #0
 800895c:	1c20      	adds	r0, r4, #0
 800895e:	f7f7 ffaf 	bl	80008c0 <__aeabi_fadd>
 8008962:	1c03      	adds	r3, r0, #0
 8008964:	1c18      	adds	r0, r3, #0
 8008966:	f016 fc13 	bl	801f190 <sqrtf>
 800896a:	1c03      	adds	r3, r0, #0
                     params->m_Mean_Variance_Estimator__Gamma_Variance))) *
 800896c:	1c19      	adds	r1, r3, #0
 800896e:	1c30      	adds	r0, r6, #0
 8008970:	f7f8 fb16 	bl	8000fa0 <__aeabi_fmul>
 8008974:	1c03      	adds	r3, r0, #0
 8008976:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Std =
 8008978:	687b      	ldr	r3, [r7, #4]
 800897a:	649a      	str	r2, [r3, #72]	@ 0x48
            (params->m_Mean_Variance_Estimator___Mean +
 800897c:	687b      	ldr	r3, [r7, #4]
 800897e:	6c1c      	ldr	r4, [r3, #64]	@ 0x40
             ((params->m_Mean_Variance_Estimator__Gamma_Mean * delta_sgp) /
 8008980:	687b      	ldr	r3, [r7, #4]
 8008982:	6ddb      	ldr	r3, [r3, #92]	@ 0x5c
 8008984:	68f9      	ldr	r1, [r7, #12]
 8008986:	1c18      	adds	r0, r3, #0
 8008988:	f7f8 fb0a 	bl	8000fa0 <__aeabi_fmul>
 800898c:	1c03      	adds	r3, r0, #0
 800898e:	2182      	movs	r1, #130	@ 0x82
 8008990:	05c9      	lsls	r1, r1, #23
 8008992:	1c18      	adds	r0, r3, #0
 8008994:	f7f8 f91e 	bl	8000bd4 <__aeabi_fdiv>
 8008998:	1c03      	adds	r3, r0, #0
            (params->m_Mean_Variance_Estimator___Mean +
 800899a:	1c19      	adds	r1, r3, #0
 800899c:	1c20      	adds	r0, r4, #0
 800899e:	f7f7 ff8f 	bl	80008c0 <__aeabi_fadd>
 80089a2:	1c03      	adds	r3, r0, #0
 80089a4:	1c1a      	adds	r2, r3, #0
        params->m_Mean_Variance_Estimator___Mean =
 80089a6:	687b      	ldr	r3, [r7, #4]
 80089a8:	641a      	str	r2, [r3, #64]	@ 0x40
}
 80089aa:	46c0      	nop			@ (mov r8, r8)
 80089ac:	46bd      	mov	sp, r7
 80089ae:	b007      	add	sp, #28
 80089b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80089b2:	46c0      	nop			@ (mov r8, r8)
 80089b4:	42c80000 	.word	0x42c80000
 80089b8:	c2c80000 	.word	0xc2c80000
 80089bc:	44b40000 	.word	0x44b40000

080089c0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters>:

static void
GasIndexAlgorithm__mean_variance_estimator___sigmoid__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K) {
 80089c0:	b580      	push	{r7, lr}
 80089c2:	b084      	sub	sp, #16
 80089c4:	af00      	add	r7, sp, #0
 80089c6:	60f8      	str	r0, [r7, #12]
 80089c8:	60b9      	str	r1, [r7, #8]
 80089ca:	607a      	str	r2, [r7, #4]

    params->m_Mean_Variance_Estimator___Sigmoid__K = K;
 80089cc:	68fb      	ldr	r3, [r7, #12]
 80089ce:	687a      	ldr	r2, [r7, #4]
 80089d0:	671a      	str	r2, [r3, #112]	@ 0x70
    params->m_Mean_Variance_Estimator___Sigmoid__X0 = X0;
 80089d2:	68fb      	ldr	r3, [r7, #12]
 80089d4:	68ba      	ldr	r2, [r7, #8]
 80089d6:	675a      	str	r2, [r3, #116]	@ 0x74
}
 80089d8:	46c0      	nop			@ (mov r8, r8)
 80089da:	46bd      	mov	sp, r7
 80089dc:	b004      	add	sp, #16
 80089de:	bd80      	pop	{r7, pc}

080089e0 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process>:

static float GasIndexAlgorithm__mean_variance_estimator___sigmoid__process(
    GasIndexAlgorithmParams* params, float sample) {
 80089e0:	b590      	push	{r4, r7, lr}
 80089e2:	b085      	sub	sp, #20
 80089e4:	af00      	add	r7, sp, #0
 80089e6:	6078      	str	r0, [r7, #4]
 80089e8:	6039      	str	r1, [r7, #0]

    float x;

    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 80089ea:	687b      	ldr	r3, [r7, #4]
 80089ec:	6f1c      	ldr	r4, [r3, #112]	@ 0x70
         (sample - params->m_Mean_Variance_Estimator___Sigmoid__X0));
 80089ee:	687b      	ldr	r3, [r7, #4]
 80089f0:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 80089f2:	1c19      	adds	r1, r3, #0
 80089f4:	6838      	ldr	r0, [r7, #0]
 80089f6:	f7f8 fc11 	bl	800121c <__aeabi_fsub>
 80089fa:	1c03      	adds	r3, r0, #0
    x = (params->m_Mean_Variance_Estimator___Sigmoid__K *
 80089fc:	1c19      	adds	r1, r3, #0
 80089fe:	1c20      	adds	r0, r4, #0
 8008a00:	f7f8 face 	bl	8000fa0 <__aeabi_fmul>
 8008a04:	1c03      	adds	r3, r0, #0
 8008a06:	60fb      	str	r3, [r7, #12]
    if ((x < -50.f)) {
 8008a08:	4912      	ldr	r1, [pc, #72]	@ (8008a54 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x74>)
 8008a0a:	68f8      	ldr	r0, [r7, #12]
 8008a0c:	f7f7 fd90 	bl	8000530 <__aeabi_fcmplt>
 8008a10:	1e03      	subs	r3, r0, #0
 8008a12:	d002      	beq.n	8008a1a <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x3a>
        return 1.f;
 8008a14:	23fe      	movs	r3, #254	@ 0xfe
 8008a16:	059b      	lsls	r3, r3, #22
 8008a18:	e018      	b.n	8008a4c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else if ((x > 50.f)) {
 8008a1a:	490f      	ldr	r1, [pc, #60]	@ (8008a58 <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x78>)
 8008a1c:	68f8      	ldr	r0, [r7, #12]
 8008a1e:	f7f7 fd9b 	bl	8000558 <__aeabi_fcmpgt>
 8008a22:	1e03      	subs	r3, r0, #0
 8008a24:	d001      	beq.n	8008a2a <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x4a>
        return 0.f;
 8008a26:	2300      	movs	r3, #0
 8008a28:	e010      	b.n	8008a4c <GasIndexAlgorithm__mean_variance_estimator___sigmoid__process+0x6c>
    } else {
        return (1.f / (1.f + expf(x)));
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	1c18      	adds	r0, r3, #0
 8008a2e:	f016 fb87 	bl	801f140 <expf>
 8008a32:	1c03      	adds	r3, r0, #0
 8008a34:	21fe      	movs	r1, #254	@ 0xfe
 8008a36:	0589      	lsls	r1, r1, #22
 8008a38:	1c18      	adds	r0, r3, #0
 8008a3a:	f7f7 ff41 	bl	80008c0 <__aeabi_fadd>
 8008a3e:	1c03      	adds	r3, r0, #0
 8008a40:	1c19      	adds	r1, r3, #0
 8008a42:	20fe      	movs	r0, #254	@ 0xfe
 8008a44:	0580      	lsls	r0, r0, #22
 8008a46:	f7f8 f8c5 	bl	8000bd4 <__aeabi_fdiv>
 8008a4a:	1c03      	adds	r3, r0, #0
    }
}
 8008a4c:	1c18      	adds	r0, r3, #0
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	b005      	add	sp, #20
 8008a52:	bd90      	pop	{r4, r7, pc}
 8008a54:	c2480000 	.word	0xc2480000
 8008a58:	42480000 	.word	0x42480000

08008a5c <GasIndexAlgorithm__mox_model__set_parameters>:

static void
GasIndexAlgorithm__mox_model__set_parameters(GasIndexAlgorithmParams* params,
                                             float SRAW_STD, float SRAW_MEAN) {
 8008a5c:	b580      	push	{r7, lr}
 8008a5e:	b084      	sub	sp, #16
 8008a60:	af00      	add	r7, sp, #0
 8008a62:	60f8      	str	r0, [r7, #12]
 8008a64:	60b9      	str	r1, [r7, #8]
 8008a66:	607a      	str	r2, [r7, #4]

    params->m_Mox_Model__Sraw_Std = SRAW_STD;
 8008a68:	68fb      	ldr	r3, [r7, #12]
 8008a6a:	68ba      	ldr	r2, [r7, #8]
 8008a6c:	679a      	str	r2, [r3, #120]	@ 0x78
    params->m_Mox_Model__Sraw_Mean = SRAW_MEAN;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	687a      	ldr	r2, [r7, #4]
 8008a72:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8008a74:	46c0      	nop			@ (mov r8, r8)
 8008a76:	46bd      	mov	sp, r7
 8008a78:	b004      	add	sp, #16
 8008a7a:	bd80      	pop	{r7, pc}

08008a7c <GasIndexAlgorithm__mox_model__process>:

static float
GasIndexAlgorithm__mox_model__process(GasIndexAlgorithmParams* params,
                                      float sraw) {
 8008a7c:	b590      	push	{r4, r7, lr}
 8008a7e:	b083      	sub	sp, #12
 8008a80:	af00      	add	r7, sp, #0
 8008a82:	6078      	str	r0, [r7, #4]
 8008a84:	6039      	str	r1, [r7, #0]

    if ((params->mAlgorithm_Type == GasIndexAlgorithm_ALGORITHM_TYPE_NOX)) {
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	2b01      	cmp	r3, #1
 8008a8c:	d114      	bne.n	8008ab8 <GasIndexAlgorithm__mox_model__process+0x3c>
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 8008a8e:	687b      	ldr	r3, [r7, #4]
 8008a90:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008a92:	1c19      	adds	r1, r3, #0
 8008a94:	6838      	ldr	r0, [r7, #0]
 8008a96:	f7f8 fbc1 	bl	800121c <__aeabi_fsub>
 8008a9a:	1c03      	adds	r3, r0, #0
 8008a9c:	4918      	ldr	r1, [pc, #96]	@ (8008b00 <GasIndexAlgorithm__mox_model__process+0x84>)
 8008a9e:	1c18      	adds	r0, r3, #0
 8008aa0:	f7f8 f898 	bl	8000bd4 <__aeabi_fdiv>
 8008aa4:	1c03      	adds	r3, r0, #0
 8008aa6:	1c1a      	adds	r2, r3, #0
                 GasIndexAlgorithm_SRAW_STD_NOX) *
                params->mIndex_Gain);
 8008aa8:	687b      	ldr	r3, [r7, #4]
 8008aaa:	6a1b      	ldr	r3, [r3, #32]
                 GasIndexAlgorithm_SRAW_STD_NOX) *
 8008aac:	1c19      	adds	r1, r3, #0
 8008aae:	1c10      	adds	r0, r2, #0
 8008ab0:	f7f8 fa76 	bl	8000fa0 <__aeabi_fmul>
 8008ab4:	1c03      	adds	r3, r0, #0
 8008ab6:	e01f      	b.n	8008af8 <GasIndexAlgorithm__mox_model__process+0x7c>
    } else {
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 8008ab8:	687b      	ldr	r3, [r7, #4]
 8008aba:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8008abc:	1c19      	adds	r1, r3, #0
 8008abe:	6838      	ldr	r0, [r7, #0]
 8008ac0:	f7f8 fbac 	bl	800121c <__aeabi_fsub>
 8008ac4:	1c03      	adds	r3, r0, #0
 8008ac6:	1c1a      	adds	r2, r3, #0
 8008ac8:	2380      	movs	r3, #128	@ 0x80
 8008aca:	061b      	lsls	r3, r3, #24
 8008acc:	4053      	eors	r3, r2
 8008ace:	001c      	movs	r4, r3
                 (-1.f * (params->m_Mox_Model__Sraw_Std +
 8008ad0:	687b      	ldr	r3, [r7, #4]
 8008ad2:	6f9b      	ldr	r3, [r3, #120]	@ 0x78
 8008ad4:	490b      	ldr	r1, [pc, #44]	@ (8008b04 <GasIndexAlgorithm__mox_model__process+0x88>)
 8008ad6:	1c18      	adds	r0, r3, #0
 8008ad8:	f7f7 fef2 	bl	80008c0 <__aeabi_fadd>
 8008adc:	1c03      	adds	r3, r0, #0
        return (((sraw - params->m_Mox_Model__Sraw_Mean) /
 8008ade:	1c19      	adds	r1, r3, #0
 8008ae0:	1c20      	adds	r0, r4, #0
 8008ae2:	f7f8 f877 	bl	8000bd4 <__aeabi_fdiv>
 8008ae6:	1c03      	adds	r3, r0, #0
 8008ae8:	1c1a      	adds	r2, r3, #0
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
                params->mIndex_Gain);
 8008aea:	687b      	ldr	r3, [r7, #4]
 8008aec:	6a1b      	ldr	r3, [r3, #32]
                          GasIndexAlgorithm_SRAW_STD_BONUS_VOC))) *
 8008aee:	1c19      	adds	r1, r3, #0
 8008af0:	1c10      	adds	r0, r2, #0
 8008af2:	f7f8 fa55 	bl	8000fa0 <__aeabi_fmul>
 8008af6:	1c03      	adds	r3, r0, #0
    }
}
 8008af8:	1c18      	adds	r0, r3, #0
 8008afa:	46bd      	mov	sp, r7
 8008afc:	b003      	add	sp, #12
 8008afe:	bd90      	pop	{r4, r7, pc}
 8008b00:	44fa0000 	.word	0x44fa0000
 8008b04:	435c0000 	.word	0x435c0000

08008b08 <GasIndexAlgorithm__sigmoid_scaled__set_parameters>:

static void GasIndexAlgorithm__sigmoid_scaled__set_parameters(
    GasIndexAlgorithmParams* params, float X0, float K, float offset_default) {
 8008b08:	b580      	push	{r7, lr}
 8008b0a:	b084      	sub	sp, #16
 8008b0c:	af00      	add	r7, sp, #0
 8008b0e:	60f8      	str	r0, [r7, #12]
 8008b10:	60b9      	str	r1, [r7, #8]
 8008b12:	607a      	str	r2, [r7, #4]
 8008b14:	603b      	str	r3, [r7, #0]

    params->m_Sigmoid_Scaled__K = K;
 8008b16:	68fb      	ldr	r3, [r7, #12]
 8008b18:	2180      	movs	r1, #128	@ 0x80
 8008b1a:	687a      	ldr	r2, [r7, #4]
 8008b1c:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__X0 = X0;
 8008b1e:	68fb      	ldr	r3, [r7, #12]
 8008b20:	2184      	movs	r1, #132	@ 0x84
 8008b22:	68ba      	ldr	r2, [r7, #8]
 8008b24:	505a      	str	r2, [r3, r1]
    params->m_Sigmoid_Scaled__Offset_Default = offset_default;
 8008b26:	68fb      	ldr	r3, [r7, #12]
 8008b28:	2188      	movs	r1, #136	@ 0x88
 8008b2a:	683a      	ldr	r2, [r7, #0]
 8008b2c:	505a      	str	r2, [r3, r1]
}
 8008b2e:	46c0      	nop			@ (mov r8, r8)
 8008b30:	46bd      	mov	sp, r7
 8008b32:	b004      	add	sp, #16
 8008b34:	bd80      	pop	{r7, pc}
	...

08008b38 <GasIndexAlgorithm__sigmoid_scaled__process>:

static float
GasIndexAlgorithm__sigmoid_scaled__process(GasIndexAlgorithmParams* params,
                                           float sample) {
 8008b38:	b590      	push	{r4, r7, lr}
 8008b3a:	b085      	sub	sp, #20
 8008b3c:	af00      	add	r7, sp, #0
 8008b3e:	6078      	str	r0, [r7, #4]
 8008b40:	6039      	str	r1, [r7, #0]

    float x;
    float shift;

    x = (params->m_Sigmoid_Scaled__K * (sample - params->m_Sigmoid_Scaled__X0));
 8008b42:	687b      	ldr	r3, [r7, #4]
 8008b44:	2280      	movs	r2, #128	@ 0x80
 8008b46:	589c      	ldr	r4, [r3, r2]
 8008b48:	687b      	ldr	r3, [r7, #4]
 8008b4a:	2284      	movs	r2, #132	@ 0x84
 8008b4c:	589b      	ldr	r3, [r3, r2]
 8008b4e:	1c19      	adds	r1, r3, #0
 8008b50:	6838      	ldr	r0, [r7, #0]
 8008b52:	f7f8 fb63 	bl	800121c <__aeabi_fsub>
 8008b56:	1c03      	adds	r3, r0, #0
 8008b58:	1c19      	adds	r1, r3, #0
 8008b5a:	1c20      	adds	r0, r4, #0
 8008b5c:	f7f8 fa20 	bl	8000fa0 <__aeabi_fmul>
 8008b60:	1c03      	adds	r3, r0, #0
 8008b62:	60bb      	str	r3, [r7, #8]
    if ((x < -50.f)) {
 8008b64:	4940      	ldr	r1, [pc, #256]	@ (8008c68 <GasIndexAlgorithm__sigmoid_scaled__process+0x130>)
 8008b66:	68b8      	ldr	r0, [r7, #8]
 8008b68:	f7f7 fce2 	bl	8000530 <__aeabi_fcmplt>
 8008b6c:	1e03      	subs	r3, r0, #0
 8008b6e:	d001      	beq.n	8008b74 <GasIndexAlgorithm__sigmoid_scaled__process+0x3c>
        return GasIndexAlgorithm_SIGMOID_L;
 8008b70:	4b3e      	ldr	r3, [pc, #248]	@ (8008c6c <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8008b72:	e075      	b.n	8008c60 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else if ((x > 50.f)) {
 8008b74:	493e      	ldr	r1, [pc, #248]	@ (8008c70 <GasIndexAlgorithm__sigmoid_scaled__process+0x138>)
 8008b76:	68b8      	ldr	r0, [r7, #8]
 8008b78:	f7f7 fcee 	bl	8000558 <__aeabi_fcmpgt>
 8008b7c:	1e03      	subs	r3, r0, #0
 8008b7e:	d001      	beq.n	8008b84 <GasIndexAlgorithm__sigmoid_scaled__process+0x4c>
        return 0.f;
 8008b80:	2300      	movs	r3, #0
 8008b82:	e06d      	b.n	8008c60 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
    } else {
        if ((sample >= 0.f)) {
 8008b84:	2100      	movs	r1, #0
 8008b86:	6838      	ldr	r0, [r7, #0]
 8008b88:	f7f7 fcf0 	bl	800056c <__aeabi_fcmpge>
 8008b8c:	1e03      	subs	r3, r0, #0
 8008b8e:	d047      	beq.n	8008c20 <GasIndexAlgorithm__sigmoid_scaled__process+0xe8>
            if ((params->m_Sigmoid_Scaled__Offset_Default == 1.f)) {
 8008b90:	687b      	ldr	r3, [r7, #4]
 8008b92:	2288      	movs	r2, #136	@ 0x88
 8008b94:	589b      	ldr	r3, [r3, r2]
 8008b96:	21fe      	movs	r1, #254	@ 0xfe
 8008b98:	0589      	lsls	r1, r1, #22
 8008b9a:	1c18      	adds	r0, r3, #0
 8008b9c:	f7f7 fcc2 	bl	8000524 <__aeabi_fcmpeq>
 8008ba0:	1e03      	subs	r3, r0, #0
 8008ba2:	d00e      	beq.n	8008bc2 <GasIndexAlgorithm__sigmoid_scaled__process+0x8a>
                shift = ((500.f / 499.f) * (1.f - params->mIndex_Offset));
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	689b      	ldr	r3, [r3, #8]
 8008ba8:	1c19      	adds	r1, r3, #0
 8008baa:	20fe      	movs	r0, #254	@ 0xfe
 8008bac:	0580      	lsls	r0, r0, #22
 8008bae:	f7f8 fb35 	bl	800121c <__aeabi_fsub>
 8008bb2:	1c03      	adds	r3, r0, #0
 8008bb4:	492f      	ldr	r1, [pc, #188]	@ (8008c74 <GasIndexAlgorithm__sigmoid_scaled__process+0x13c>)
 8008bb6:	1c18      	adds	r0, r3, #0
 8008bb8:	f7f8 f9f2 	bl	8000fa0 <__aeabi_fmul>
 8008bbc:	1c03      	adds	r3, r0, #0
 8008bbe:	60fb      	str	r3, [r7, #12]
 8008bc0:	e012      	b.n	8008be8 <GasIndexAlgorithm__sigmoid_scaled__process+0xb0>
            } else {
                shift = ((GasIndexAlgorithm_SIGMOID_L -
                          (5.f * params->mIndex_Offset)) /
 8008bc2:	687b      	ldr	r3, [r7, #4]
 8008bc4:	689b      	ldr	r3, [r3, #8]
 8008bc6:	492c      	ldr	r1, [pc, #176]	@ (8008c78 <GasIndexAlgorithm__sigmoid_scaled__process+0x140>)
 8008bc8:	1c18      	adds	r0, r3, #0
 8008bca:	f7f8 f9e9 	bl	8000fa0 <__aeabi_fmul>
 8008bce:	1c03      	adds	r3, r0, #0
                shift = ((GasIndexAlgorithm_SIGMOID_L -
 8008bd0:	1c19      	adds	r1, r3, #0
 8008bd2:	4826      	ldr	r0, [pc, #152]	@ (8008c6c <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8008bd4:	f7f8 fb22 	bl	800121c <__aeabi_fsub>
 8008bd8:	1c03      	adds	r3, r0, #0
 8008bda:	2181      	movs	r1, #129	@ 0x81
 8008bdc:	05c9      	lsls	r1, r1, #23
 8008bde:	1c18      	adds	r0, r3, #0
 8008be0:	f7f7 fff8 	bl	8000bd4 <__aeabi_fdiv>
 8008be4:	1c03      	adds	r3, r0, #0
 8008be6:	60fb      	str	r3, [r7, #12]
                         4.f);
            }
            return (((GasIndexAlgorithm_SIGMOID_L + shift) / (1.f + expf(x))) -
 8008be8:	4920      	ldr	r1, [pc, #128]	@ (8008c6c <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8008bea:	68f8      	ldr	r0, [r7, #12]
 8008bec:	f7f7 fe68 	bl	80008c0 <__aeabi_fadd>
 8008bf0:	1c03      	adds	r3, r0, #0
 8008bf2:	1c1c      	adds	r4, r3, #0
 8008bf4:	68bb      	ldr	r3, [r7, #8]
 8008bf6:	1c18      	adds	r0, r3, #0
 8008bf8:	f016 faa2 	bl	801f140 <expf>
 8008bfc:	1c03      	adds	r3, r0, #0
 8008bfe:	21fe      	movs	r1, #254	@ 0xfe
 8008c00:	0589      	lsls	r1, r1, #22
 8008c02:	1c18      	adds	r0, r3, #0
 8008c04:	f7f7 fe5c 	bl	80008c0 <__aeabi_fadd>
 8008c08:	1c03      	adds	r3, r0, #0
 8008c0a:	1c19      	adds	r1, r3, #0
 8008c0c:	1c20      	adds	r0, r4, #0
 8008c0e:	f7f7 ffe1 	bl	8000bd4 <__aeabi_fdiv>
 8008c12:	1c03      	adds	r3, r0, #0
 8008c14:	68f9      	ldr	r1, [r7, #12]
 8008c16:	1c18      	adds	r0, r3, #0
 8008c18:	f7f8 fb00 	bl	800121c <__aeabi_fsub>
 8008c1c:	1c03      	adds	r3, r0, #0
 8008c1e:	e01f      	b.n	8008c60 <GasIndexAlgorithm__sigmoid_scaled__process+0x128>
                    shift);
        } else {
            return ((params->mIndex_Offset /
 8008c20:	687b      	ldr	r3, [r7, #4]
 8008c22:	689a      	ldr	r2, [r3, #8]
                     params->m_Sigmoid_Scaled__Offset_Default) *
 8008c24:	687b      	ldr	r3, [r7, #4]
 8008c26:	2188      	movs	r1, #136	@ 0x88
 8008c28:	585b      	ldr	r3, [r3, r1]
            return ((params->mIndex_Offset /
 8008c2a:	1c19      	adds	r1, r3, #0
 8008c2c:	1c10      	adds	r0, r2, #0
 8008c2e:	f7f7 ffd1 	bl	8000bd4 <__aeabi_fdiv>
 8008c32:	1c03      	adds	r3, r0, #0
 8008c34:	1c1c      	adds	r4, r3, #0
                    (GasIndexAlgorithm_SIGMOID_L / (1.f + expf(x))));
 8008c36:	68bb      	ldr	r3, [r7, #8]
 8008c38:	1c18      	adds	r0, r3, #0
 8008c3a:	f016 fa81 	bl	801f140 <expf>
 8008c3e:	1c03      	adds	r3, r0, #0
 8008c40:	21fe      	movs	r1, #254	@ 0xfe
 8008c42:	0589      	lsls	r1, r1, #22
 8008c44:	1c18      	adds	r0, r3, #0
 8008c46:	f7f7 fe3b 	bl	80008c0 <__aeabi_fadd>
 8008c4a:	1c03      	adds	r3, r0, #0
 8008c4c:	1c19      	adds	r1, r3, #0
 8008c4e:	4807      	ldr	r0, [pc, #28]	@ (8008c6c <GasIndexAlgorithm__sigmoid_scaled__process+0x134>)
 8008c50:	f7f7 ffc0 	bl	8000bd4 <__aeabi_fdiv>
 8008c54:	1c03      	adds	r3, r0, #0
                     params->m_Sigmoid_Scaled__Offset_Default) *
 8008c56:	1c19      	adds	r1, r3, #0
 8008c58:	1c20      	adds	r0, r4, #0
 8008c5a:	f7f8 f9a1 	bl	8000fa0 <__aeabi_fmul>
 8008c5e:	1c03      	adds	r3, r0, #0
        }
    }
}
 8008c60:	1c18      	adds	r0, r3, #0
 8008c62:	46bd      	mov	sp, r7
 8008c64:	b005      	add	sp, #20
 8008c66:	bd90      	pop	{r4, r7, pc}
 8008c68:	c2480000 	.word	0xc2480000
 8008c6c:	43fa0000 	.word	0x43fa0000
 8008c70:	42480000 	.word	0x42480000
 8008c74:	3f8041ab 	.word	0x3f8041ab
 8008c78:	40a00000 	.word	0x40a00000

08008c7c <GasIndexAlgorithm__adaptive_lowpass__set_parameters>:

static void GasIndexAlgorithm__adaptive_lowpass__set_parameters(
    GasIndexAlgorithmParams* params) {
 8008c7c:	b590      	push	{r4, r7, lr}
 8008c7e:	b083      	sub	sp, #12
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]

    params->m_Adaptive_Lowpass__A1 =
        (params->mSamplingInterval /
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_FAST + params->mSamplingInterval));
 8008c88:	687b      	ldr	r3, [r7, #4]
 8008c8a:	685b      	ldr	r3, [r3, #4]
 8008c8c:	4913      	ldr	r1, [pc, #76]	@ (8008cdc <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x60>)
 8008c8e:	1c18      	adds	r0, r3, #0
 8008c90:	f7f7 fe16 	bl	80008c0 <__aeabi_fadd>
 8008c94:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 8008c96:	1c19      	adds	r1, r3, #0
 8008c98:	1c20      	adds	r0, r4, #0
 8008c9a:	f7f7 ff9b 	bl	8000bd4 <__aeabi_fdiv>
 8008c9e:	1c03      	adds	r3, r0, #0
 8008ca0:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A1 =
 8008ca2:	687b      	ldr	r3, [r7, #4]
 8008ca4:	228c      	movs	r2, #140	@ 0x8c
 8008ca6:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass__A2 =
        (params->mSamplingInterval /
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	685c      	ldr	r4, [r3, #4]
         (GasIndexAlgorithm_LP_TAU_SLOW + params->mSamplingInterval));
 8008cac:	687b      	ldr	r3, [r7, #4]
 8008cae:	685b      	ldr	r3, [r3, #4]
 8008cb0:	490b      	ldr	r1, [pc, #44]	@ (8008ce0 <GasIndexAlgorithm__adaptive_lowpass__set_parameters+0x64>)
 8008cb2:	1c18      	adds	r0, r3, #0
 8008cb4:	f7f7 fe04 	bl	80008c0 <__aeabi_fadd>
 8008cb8:	1c03      	adds	r3, r0, #0
        (params->mSamplingInterval /
 8008cba:	1c19      	adds	r1, r3, #0
 8008cbc:	1c20      	adds	r0, r4, #0
 8008cbe:	f7f7 ff89 	bl	8000bd4 <__aeabi_fdiv>
 8008cc2:	1c03      	adds	r3, r0, #0
 8008cc4:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass__A2 =
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	2290      	movs	r2, #144	@ 0x90
 8008cca:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___Initialized = false;
 8008ccc:	687b      	ldr	r3, [r7, #4]
 8008cce:	2294      	movs	r2, #148	@ 0x94
 8008cd0:	2100      	movs	r1, #0
 8008cd2:	5499      	strb	r1, [r3, r2]
}
 8008cd4:	46c0      	nop			@ (mov r8, r8)
 8008cd6:	46bd      	mov	sp, r7
 8008cd8:	b003      	add	sp, #12
 8008cda:	bd90      	pop	{r4, r7, pc}
 8008cdc:	41a00000 	.word	0x41a00000
 8008ce0:	43fa0000 	.word	0x43fa0000

08008ce4 <GasIndexAlgorithm__adaptive_lowpass__process>:

static float
GasIndexAlgorithm__adaptive_lowpass__process(GasIndexAlgorithmParams* params,
                                             float sample) {
 8008ce4:	b590      	push	{r4, r7, lr}
 8008ce6:	b087      	sub	sp, #28
 8008ce8:	af00      	add	r7, sp, #0
 8008cea:	6078      	str	r0, [r7, #4]
 8008cec:	6039      	str	r1, [r7, #0]
    float abs_delta;
    float F1;
    float tau_a;
    float a3;

    if ((params->m_Adaptive_Lowpass___Initialized == false)) {
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	2294      	movs	r2, #148	@ 0x94
 8008cf2:	5c9b      	ldrb	r3, [r3, r2]
 8008cf4:	2201      	movs	r2, #1
 8008cf6:	4053      	eors	r3, r2
 8008cf8:	b2db      	uxtb	r3, r3
 8008cfa:	2b00      	cmp	r3, #0
 8008cfc:	d00f      	beq.n	8008d1e <GasIndexAlgorithm__adaptive_lowpass__process+0x3a>
        params->m_Adaptive_Lowpass___X1 = sample;
 8008cfe:	687b      	ldr	r3, [r7, #4]
 8008d00:	2198      	movs	r1, #152	@ 0x98
 8008d02:	683a      	ldr	r2, [r7, #0]
 8008d04:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X2 = sample;
 8008d06:	687b      	ldr	r3, [r7, #4]
 8008d08:	219c      	movs	r1, #156	@ 0x9c
 8008d0a:	683a      	ldr	r2, [r7, #0]
 8008d0c:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___X3 = sample;
 8008d0e:	687b      	ldr	r3, [r7, #4]
 8008d10:	21a0      	movs	r1, #160	@ 0xa0
 8008d12:	683a      	ldr	r2, [r7, #0]
 8008d14:	505a      	str	r2, [r3, r1]
        params->m_Adaptive_Lowpass___Initialized = true;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	2294      	movs	r2, #148	@ 0x94
 8008d1a:	2101      	movs	r1, #1
 8008d1c:	5499      	strb	r1, [r3, r2]
    }
    params->m_Adaptive_Lowpass___X1 =
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 8008d1e:	687b      	ldr	r3, [r7, #4]
 8008d20:	228c      	movs	r2, #140	@ 0x8c
 8008d22:	589b      	ldr	r3, [r3, r2]
 8008d24:	1c19      	adds	r1, r3, #0
 8008d26:	20fe      	movs	r0, #254	@ 0xfe
 8008d28:	0580      	lsls	r0, r0, #22
 8008d2a:	f7f8 fa77 	bl	800121c <__aeabi_fsub>
 8008d2e:	1c03      	adds	r3, r0, #0
 8008d30:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X1) +
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	2298      	movs	r2, #152	@ 0x98
 8008d36:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A1) *
 8008d38:	1c19      	adds	r1, r3, #0
 8008d3a:	f7f8 f931 	bl	8000fa0 <__aeabi_fmul>
 8008d3e:	1c03      	adds	r3, r0, #0
 8008d40:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A1 * sample));
 8008d42:	687b      	ldr	r3, [r7, #4]
 8008d44:	228c      	movs	r2, #140	@ 0x8c
 8008d46:	589b      	ldr	r3, [r3, r2]
 8008d48:	6839      	ldr	r1, [r7, #0]
 8008d4a:	1c18      	adds	r0, r3, #0
 8008d4c:	f7f8 f928 	bl	8000fa0 <__aeabi_fmul>
 8008d50:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X1) +
 8008d52:	1c19      	adds	r1, r3, #0
 8008d54:	1c20      	adds	r0, r4, #0
 8008d56:	f7f7 fdb3 	bl	80008c0 <__aeabi_fadd>
 8008d5a:	1c03      	adds	r3, r0, #0
 8008d5c:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X1 =
 8008d5e:	687b      	ldr	r3, [r7, #4]
 8008d60:	2298      	movs	r2, #152	@ 0x98
 8008d62:	5099      	str	r1, [r3, r2]
    params->m_Adaptive_Lowpass___X2 =
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	2290      	movs	r2, #144	@ 0x90
 8008d68:	589b      	ldr	r3, [r3, r2]
 8008d6a:	1c19      	adds	r1, r3, #0
 8008d6c:	20fe      	movs	r0, #254	@ 0xfe
 8008d6e:	0580      	lsls	r0, r0, #22
 8008d70:	f7f8 fa54 	bl	800121c <__aeabi_fsub>
 8008d74:	1c03      	adds	r3, r0, #0
 8008d76:	1c18      	adds	r0, r3, #0
          params->m_Adaptive_Lowpass___X2) +
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	229c      	movs	r2, #156	@ 0x9c
 8008d7c:	589b      	ldr	r3, [r3, r2]
        (((1.f - params->m_Adaptive_Lowpass__A2) *
 8008d7e:	1c19      	adds	r1, r3, #0
 8008d80:	f7f8 f90e 	bl	8000fa0 <__aeabi_fmul>
 8008d84:	1c03      	adds	r3, r0, #0
 8008d86:	1c1c      	adds	r4, r3, #0
         (params->m_Adaptive_Lowpass__A2 * sample));
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	2290      	movs	r2, #144	@ 0x90
 8008d8c:	589b      	ldr	r3, [r3, r2]
 8008d8e:	6839      	ldr	r1, [r7, #0]
 8008d90:	1c18      	adds	r0, r3, #0
 8008d92:	f7f8 f905 	bl	8000fa0 <__aeabi_fmul>
 8008d96:	1c03      	adds	r3, r0, #0
          params->m_Adaptive_Lowpass___X2) +
 8008d98:	1c19      	adds	r1, r3, #0
 8008d9a:	1c20      	adds	r0, r4, #0
 8008d9c:	f7f7 fd90 	bl	80008c0 <__aeabi_fadd>
 8008da0:	1c03      	adds	r3, r0, #0
 8008da2:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X2 =
 8008da4:	687b      	ldr	r3, [r7, #4]
 8008da6:	229c      	movs	r2, #156	@ 0x9c
 8008da8:	5099      	str	r1, [r3, r2]
    abs_delta =
        (params->m_Adaptive_Lowpass___X1 - params->m_Adaptive_Lowpass___X2);
 8008daa:	687b      	ldr	r3, [r7, #4]
 8008dac:	2298      	movs	r2, #152	@ 0x98
 8008dae:	589a      	ldr	r2, [r3, r2]
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	219c      	movs	r1, #156	@ 0x9c
 8008db4:	585b      	ldr	r3, [r3, r1]
    abs_delta =
 8008db6:	1c19      	adds	r1, r3, #0
 8008db8:	1c10      	adds	r0, r2, #0
 8008dba:	f7f8 fa2f 	bl	800121c <__aeabi_fsub>
 8008dbe:	1c03      	adds	r3, r0, #0
 8008dc0:	617b      	str	r3, [r7, #20]
    if ((abs_delta < 0.f)) {
 8008dc2:	2100      	movs	r1, #0
 8008dc4:	6978      	ldr	r0, [r7, #20]
 8008dc6:	f7f7 fbb3 	bl	8000530 <__aeabi_fcmplt>
 8008dca:	1e03      	subs	r3, r0, #0
 8008dcc:	d004      	beq.n	8008dd8 <GasIndexAlgorithm__adaptive_lowpass__process+0xf4>
        abs_delta = (-1.f * abs_delta);
 8008dce:	697b      	ldr	r3, [r7, #20]
 8008dd0:	2280      	movs	r2, #128	@ 0x80
 8008dd2:	0612      	lsls	r2, r2, #24
 8008dd4:	4053      	eors	r3, r2
 8008dd6:	617b      	str	r3, [r7, #20]
    }
    F1 = expf((GasIndexAlgorithm_LP_ALPHA * abs_delta));
 8008dd8:	4923      	ldr	r1, [pc, #140]	@ (8008e68 <GasIndexAlgorithm__adaptive_lowpass__process+0x184>)
 8008dda:	6978      	ldr	r0, [r7, #20]
 8008ddc:	f7f8 f8e0 	bl	8000fa0 <__aeabi_fmul>
 8008de0:	1c03      	adds	r3, r0, #0
 8008de2:	1c18      	adds	r0, r3, #0
 8008de4:	f016 f9ac 	bl	801f140 <expf>
 8008de8:	1c03      	adds	r3, r0, #0
 8008dea:	613b      	str	r3, [r7, #16]
    tau_a = (((GasIndexAlgorithm_LP_TAU_SLOW - GasIndexAlgorithm_LP_TAU_FAST) *
 8008dec:	491f      	ldr	r1, [pc, #124]	@ (8008e6c <GasIndexAlgorithm__adaptive_lowpass__process+0x188>)
 8008dee:	6938      	ldr	r0, [r7, #16]
 8008df0:	f7f8 f8d6 	bl	8000fa0 <__aeabi_fmul>
 8008df4:	1c03      	adds	r3, r0, #0
 8008df6:	491e      	ldr	r1, [pc, #120]	@ (8008e70 <GasIndexAlgorithm__adaptive_lowpass__process+0x18c>)
 8008df8:	1c18      	adds	r0, r3, #0
 8008dfa:	f7f7 fd61 	bl	80008c0 <__aeabi_fadd>
 8008dfe:	1c03      	adds	r3, r0, #0
 8008e00:	60fb      	str	r3, [r7, #12]
              F1) +
             GasIndexAlgorithm_LP_TAU_FAST);
    a3 = (params->mSamplingInterval / (params->mSamplingInterval + tau_a));
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	685c      	ldr	r4, [r3, #4]
 8008e06:	687b      	ldr	r3, [r7, #4]
 8008e08:	685b      	ldr	r3, [r3, #4]
 8008e0a:	68f9      	ldr	r1, [r7, #12]
 8008e0c:	1c18      	adds	r0, r3, #0
 8008e0e:	f7f7 fd57 	bl	80008c0 <__aeabi_fadd>
 8008e12:	1c03      	adds	r3, r0, #0
 8008e14:	1c19      	adds	r1, r3, #0
 8008e16:	1c20      	adds	r0, r4, #0
 8008e18:	f7f7 fedc 	bl	8000bd4 <__aeabi_fdiv>
 8008e1c:	1c03      	adds	r3, r0, #0
 8008e1e:	60bb      	str	r3, [r7, #8]
    params->m_Adaptive_Lowpass___X3 =
        (((1.f - a3) * params->m_Adaptive_Lowpass___X3) + (a3 * sample));
 8008e20:	68b9      	ldr	r1, [r7, #8]
 8008e22:	20fe      	movs	r0, #254	@ 0xfe
 8008e24:	0580      	lsls	r0, r0, #22
 8008e26:	f7f8 f9f9 	bl	800121c <__aeabi_fsub>
 8008e2a:	1c03      	adds	r3, r0, #0
 8008e2c:	1c18      	adds	r0, r3, #0
 8008e2e:	687b      	ldr	r3, [r7, #4]
 8008e30:	22a0      	movs	r2, #160	@ 0xa0
 8008e32:	589b      	ldr	r3, [r3, r2]
 8008e34:	1c19      	adds	r1, r3, #0
 8008e36:	f7f8 f8b3 	bl	8000fa0 <__aeabi_fmul>
 8008e3a:	1c03      	adds	r3, r0, #0
 8008e3c:	1c1c      	adds	r4, r3, #0
 8008e3e:	6839      	ldr	r1, [r7, #0]
 8008e40:	68b8      	ldr	r0, [r7, #8]
 8008e42:	f7f8 f8ad 	bl	8000fa0 <__aeabi_fmul>
 8008e46:	1c03      	adds	r3, r0, #0
 8008e48:	1c19      	adds	r1, r3, #0
 8008e4a:	1c20      	adds	r0, r4, #0
 8008e4c:	f7f7 fd38 	bl	80008c0 <__aeabi_fadd>
 8008e50:	1c03      	adds	r3, r0, #0
 8008e52:	1c19      	adds	r1, r3, #0
    params->m_Adaptive_Lowpass___X3 =
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	22a0      	movs	r2, #160	@ 0xa0
 8008e58:	5099      	str	r1, [r3, r2]
    return params->m_Adaptive_Lowpass___X3;
 8008e5a:	687b      	ldr	r3, [r7, #4]
 8008e5c:	22a0      	movs	r2, #160	@ 0xa0
 8008e5e:	589b      	ldr	r3, [r3, r2]
}
 8008e60:	1c18      	adds	r0, r3, #0
 8008e62:	46bd      	mov	sp, r7
 8008e64:	b007      	add	sp, #28
 8008e66:	bd90      	pop	{r4, r7, pc}
 8008e68:	be4ccccd 	.word	0xbe4ccccd
 8008e6c:	43f00000 	.word	0x43f00000
 8008e70:	41a00000 	.word	0x41a00000

08008e74 <ReadRegister>:
//#define SGP_TEST_BUFFER_SIZE 6
//#define SGP_TEST_SEGMENT_SIZE 3
// static uint8_t SGP_TestBuffer[SGP_TEST_BUFFER_SIZE] = {0xBE, 0xEF, 0x92,
// 0xBE, 0xEF, 0x92};

static void ReadRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 8008e74:	b590      	push	{r4, r7, lr}
 8008e76:	b083      	sub	sp, #12
 8008e78:	af00      	add	r7, sp, #0
 8008e7a:	6039      	str	r1, [r7, #0]
 8008e7c:	0011      	movs	r1, r2
 8008e7e:	1dfb      	adds	r3, r7, #7
 8008e80:	1c02      	adds	r2, r0, #0
 8008e82:	701a      	strb	r2, [r3, #0]
 8008e84:	1dbb      	adds	r3, r7, #6
 8008e86:	1c0a      	adds	r2, r1, #0
 8008e88:	701a      	strb	r2, [r3, #0]
  if (ReadFunction != NULL) {
 8008e8a:	4b08      	ldr	r3, [pc, #32]	@ (8008eac <ReadRegister+0x38>)
 8008e8c:	681b      	ldr	r3, [r3, #0]
 8008e8e:	2b00      	cmp	r3, #0
 8008e90:	d008      	beq.n	8008ea4 <ReadRegister+0x30>
    ReadFunction(address, buffer, nrBytes);
 8008e92:	4b06      	ldr	r3, [pc, #24]	@ (8008eac <ReadRegister+0x38>)
 8008e94:	681b      	ldr	r3, [r3, #0]
 8008e96:	1dba      	adds	r2, r7, #6
 8008e98:	7814      	ldrb	r4, [r2, #0]
 8008e9a:	6839      	ldr	r1, [r7, #0]
 8008e9c:	1dfa      	adds	r2, r7, #7
 8008e9e:	7810      	ldrb	r0, [r2, #0]
 8008ea0:	0022      	movs	r2, r4
 8008ea2:	4798      	blx	r3
  }
}
 8008ea4:	46c0      	nop			@ (mov r8, r8)
 8008ea6:	46bd      	mov	sp, r7
 8008ea8:	b003      	add	sp, #12
 8008eaa:	bd90      	pop	{r4, r7, pc}
 8008eac:	200011bc 	.word	0x200011bc

08008eb0 <WriteRegister>:

static void WriteRegister(uint8_t address, uint8_t *buffer, uint8_t nrBytes) {
 8008eb0:	b590      	push	{r4, r7, lr}
 8008eb2:	b083      	sub	sp, #12
 8008eb4:	af00      	add	r7, sp, #0
 8008eb6:	6039      	str	r1, [r7, #0]
 8008eb8:	0011      	movs	r1, r2
 8008eba:	1dfb      	adds	r3, r7, #7
 8008ebc:	1c02      	adds	r2, r0, #0
 8008ebe:	701a      	strb	r2, [r3, #0]
 8008ec0:	1dbb      	adds	r3, r7, #6
 8008ec2:	1c0a      	adds	r2, r1, #0
 8008ec4:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 8008ec6:	4b08      	ldr	r3, [pc, #32]	@ (8008ee8 <WriteRegister+0x38>)
 8008ec8:	681b      	ldr	r3, [r3, #0]
 8008eca:	2b00      	cmp	r3, #0
 8008ecc:	d008      	beq.n	8008ee0 <WriteRegister+0x30>
    WriteFunction(address, buffer, nrBytes);
 8008ece:	4b06      	ldr	r3, [pc, #24]	@ (8008ee8 <WriteRegister+0x38>)
 8008ed0:	681b      	ldr	r3, [r3, #0]
 8008ed2:	1dba      	adds	r2, r7, #6
 8008ed4:	7814      	ldrb	r4, [r2, #0]
 8008ed6:	6839      	ldr	r1, [r7, #0]
 8008ed8:	1dfa      	adds	r2, r7, #7
 8008eda:	7810      	ldrb	r0, [r2, #0]
 8008edc:	0022      	movs	r2, r4
 8008ede:	4798      	blx	r3
  }
}
 8008ee0:	46c0      	nop			@ (mov r8, r8)
 8008ee2:	46bd      	mov	sp, r7
 8008ee4:	b003      	add	sp, #12
 8008ee6:	bd90      	pop	{r4, r7, pc}
 8008ee8:	200011c0 	.word	0x200011c0

08008eec <SGP_Init>:

void SGP_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 8008eec:	b580      	push	{r7, lr}
 8008eee:	b082      	sub	sp, #8
 8008ef0:	af00      	add	r7, sp, #0
 8008ef2:	6078      	str	r0, [r7, #4]
 8008ef4:	6039      	str	r1, [r7, #0]
  ReadFunction = readFunction;
 8008ef6:	4b07      	ldr	r3, [pc, #28]	@ (8008f14 <SGP_Init+0x28>)
 8008ef8:	687a      	ldr	r2, [r7, #4]
 8008efa:	601a      	str	r2, [r3, #0]
  WriteFunction = writeFunction;
 8008efc:	4b06      	ldr	r3, [pc, #24]	@ (8008f18 <SGP_Init+0x2c>)
 8008efe:	683a      	ldr	r2, [r7, #0]
 8008f00:	601a      	str	r2, [r3, #0]
  GasIndexAlgorithm_init(&params, GasIndexAlgorithm_ALGORITHM_TYPE_VOC);
 8008f02:	4b06      	ldr	r3, [pc, #24]	@ (8008f1c <SGP_Init+0x30>)
 8008f04:	2100      	movs	r1, #0
 8008f06:	0018      	movs	r0, r3
 8008f08:	f7ff f930 	bl	800816c <GasIndexAlgorithm_init>
}
 8008f0c:	46c0      	nop			@ (mov r8, r8)
 8008f0e:	46bd      	mov	sp, r7
 8008f10:	b002      	add	sp, #8
 8008f12:	bd80      	pop	{r7, pc}
 8008f14:	200011bc 	.word	0x200011bc
 8008f18:	200011c0 	.word	0x200011c0
 8008f1c:	200011d0 	.word	0x200011d0

08008f20 <SGP_StartMeasurement>:

void SGP_StartMeasurement(void) {
 8008f20:	b580      	push	{r7, lr}
 8008f22:	af00      	add	r7, sp, #0
  if(HT_MeasurementReceived){
 8008f24:	4b13      	ldr	r3, [pc, #76]	@ (8008f74 <SGP_StartMeasurement+0x54>)
 8008f26:	781b      	ldrb	r3, [r3, #0]
 8008f28:	2b00      	cmp	r3, #0
 8008f2a:	d00d      	beq.n	8008f48 <SGP_StartMeasurement+0x28>
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8008f2c:	4b12      	ldr	r3, [pc, #72]	@ (8008f78 <SGP_StartMeasurement+0x58>)
 8008f2e:	2208      	movs	r2, #8
 8008f30:	0019      	movs	r1, r3
 8008f32:	2059      	movs	r0, #89	@ 0x59
 8008f34:	f7ff ffbc 	bl	8008eb0 <WriteRegister>
    SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 8008f38:	f002 fc6a 	bl	800b810 <GetCurrentHalTicks>
 8008f3c:	0003      	movs	r3, r0
 8008f3e:	331e      	adds	r3, #30
 8008f40:	001a      	movs	r2, r3
 8008f42:	4b0e      	ldr	r3, [pc, #56]	@ (8008f7c <SGP_StartMeasurement+0x5c>)
 8008f44:	601a      	str	r2, [r3, #0]
 8008f46:	e00c      	b.n	8008f62 <SGP_StartMeasurement+0x42>
  }
  else{
    WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8008f48:	4b0d      	ldr	r3, [pc, #52]	@ (8008f80 <SGP_StartMeasurement+0x60>)
 8008f4a:	2208      	movs	r2, #8
 8008f4c:	0019      	movs	r1, r3
 8008f4e:	2059      	movs	r0, #89	@ 0x59
 8008f50:	f7ff ffae 	bl	8008eb0 <WriteRegister>
    SGP_HeatUpTime = GetCurrentHalTicks() + SGP_SENSOR_HEATUP_TIME;
 8008f54:	f002 fc5c 	bl	800b810 <GetCurrentHalTicks>
 8008f58:	0003      	movs	r3, r0
 8008f5a:	33aa      	adds	r3, #170	@ 0xaa
 8008f5c:	001a      	movs	r2, r3
 8008f5e:	4b09      	ldr	r3, [pc, #36]	@ (8008f84 <SGP_StartMeasurement+0x64>)
 8008f60:	601a      	str	r2, [r3, #0]
  }
  HeatUpIsDone = false;
 8008f62:	4b09      	ldr	r3, [pc, #36]	@ (8008f88 <SGP_StartMeasurement+0x68>)
 8008f64:	2200      	movs	r2, #0
 8008f66:	701a      	strb	r2, [r3, #0]
  MeasurementIsReady = false;
 8008f68:	4b08      	ldr	r3, [pc, #32]	@ (8008f8c <SGP_StartMeasurement+0x6c>)
 8008f6a:	2200      	movs	r2, #0
 8008f6c:	701a      	strb	r2, [r3, #0]
}
 8008f6e:	46c0      	nop			@ (mov r8, r8)
 8008f70:	46bd      	mov	sp, r7
 8008f72:	bd80      	pop	{r7, pc}
 8008f74:	20001278 	.word	0x20001278
 8008f78:	20000094 	.word	0x20000094
 8008f7c:	200000a8 	.word	0x200000a8
 8008f80:	2000008c 	.word	0x2000008c
 8008f84:	200000a0 	.word	0x200000a0
 8008f88:	200011ce 	.word	0x200011ce
 8008f8c:	200011cf 	.word	0x200011cf

08008f90 <SGP_HeatedUp>:

static bool SGP_HeatedUp(void) { return TimestampIsReached(SGP_HeatUpTime); }
 8008f90:	b580      	push	{r7, lr}
 8008f92:	af00      	add	r7, sp, #0
 8008f94:	4b04      	ldr	r3, [pc, #16]	@ (8008fa8 <SGP_HeatedUp+0x18>)
 8008f96:	681b      	ldr	r3, [r3, #0]
 8008f98:	0018      	movs	r0, r3
 8008f9a:	f002 fb69 	bl	800b670 <TimestampIsReached>
 8008f9e:	0003      	movs	r3, r0
 8008fa0:	0018      	movs	r0, r3
 8008fa2:	46bd      	mov	sp, r7
 8008fa4:	bd80      	pop	{r7, pc}
 8008fa6:	46c0      	nop			@ (mov r8, r8)
 8008fa8:	200000a0 	.word	0x200000a0

08008fac <SGP_MeasurementReady>:

static bool SGP_MeasurementReady(void) {
 8008fac:	b580      	push	{r7, lr}
 8008fae:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_IdleTime);
 8008fb0:	4b04      	ldr	r3, [pc, #16]	@ (8008fc4 <SGP_MeasurementReady+0x18>)
 8008fb2:	681b      	ldr	r3, [r3, #0]
 8008fb4:	0018      	movs	r0, r3
 8008fb6:	f002 fb5b 	bl	800b670 <TimestampIsReached>
 8008fba:	0003      	movs	r3, r0
}
 8008fbc:	0018      	movs	r0, r3
 8008fbe:	46bd      	mov	sp, r7
 8008fc0:	bd80      	pop	{r7, pc}
 8008fc2:	46c0      	nop			@ (mov r8, r8)
 8008fc4:	200000a8 	.word	0x200000a8

08008fc8 <SGP_MeasurementDone>:

static bool SGP_MeasurementDone(void) {
 8008fc8:	b580      	push	{r7, lr}
 8008fca:	af00      	add	r7, sp, #0
  return TimestampIsReached(SGP_MeasurementDutyCycle);
 8008fcc:	4b04      	ldr	r3, [pc, #16]	@ (8008fe0 <SGP_MeasurementDone+0x18>)
 8008fce:	681b      	ldr	r3, [r3, #0]
 8008fd0:	0018      	movs	r0, r3
 8008fd2:	f002 fb4d 	bl	800b670 <TimestampIsReached>
 8008fd6:	0003      	movs	r3, r0
}
 8008fd8:	0018      	movs	r0, r3
 8008fda:	46bd      	mov	sp, r7
 8008fdc:	bd80      	pop	{r7, pc}
 8008fde:	46c0      	nop			@ (mov r8, r8)
 8008fe0:	200000a4 	.word	0x200000a4

08008fe4 <SGP_TurnHeaterOff>:

void SGP_TurnHeaterOff(void) {
 8008fe4:	b580      	push	{r7, lr}
 8008fe6:	af00      	add	r7, sp, #0
  // This command could take from 0.1 to 1ms.
  WriteRegister(SGP_I2C_ADDRESS, TurnHeaterOffBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 8008fe8:	4b04      	ldr	r3, [pc, #16]	@ (8008ffc <SGP_TurnHeaterOff+0x18>)
 8008fea:	2202      	movs	r2, #2
 8008fec:	0019      	movs	r1, r3
 8008fee:	2059      	movs	r0, #89	@ 0x59
 8008ff0:	f7ff ff5e 	bl	8008eb0 <WriteRegister>
}
 8008ff4:	46c0      	nop			@ (mov r8, r8)
 8008ff6:	46bd      	mov	sp, r7
 8008ff8:	bd80      	pop	{r7, pc}
 8008ffa:	46c0      	nop			@ (mov r8, r8)
 8008ffc:	20000084 	.word	0x20000084

08009000 <SGP_GetMeasurementValues>:

bool SGP_GetMeasurementValues(int32_t *vocIndex) {
 8009000:	b5b0      	push	{r4, r5, r7, lr}
 8009002:	b086      	sub	sp, #24
 8009004:	af02      	add	r7, sp, #8
 8009006:	6078      	str	r0, [r7, #4]
  if (SGP_HeatedUp() && !HeatUpIsDone && !SGP_MsgSent) {
 8009008:	f7ff ffc2 	bl	8008f90 <SGP_HeatedUp>
 800900c:	1e03      	subs	r3, r0, #0
 800900e:	d038      	beq.n	8009082 <SGP_GetMeasurementValues+0x82>
 8009010:	4bd5      	ldr	r3, [pc, #852]	@ (8009368 <SGP_GetMeasurementValues+0x368>)
 8009012:	781b      	ldrb	r3, [r3, #0]
 8009014:	2201      	movs	r2, #1
 8009016:	4053      	eors	r3, r2
 8009018:	b2db      	uxtb	r3, r3
 800901a:	2b00      	cmp	r3, #0
 800901c:	d031      	beq.n	8009082 <SGP_GetMeasurementValues+0x82>
 800901e:	4bd3      	ldr	r3, [pc, #844]	@ (800936c <SGP_GetMeasurementValues+0x36c>)
 8009020:	781b      	ldrb	r3, [r3, #0]
 8009022:	2201      	movs	r2, #1
 8009024:	4053      	eors	r3, r2
 8009026:	b2db      	uxtb	r3, r3
 8009028:	2b00      	cmp	r3, #0
 800902a:	d02a      	beq.n	8009082 <SGP_GetMeasurementValues+0x82>
    Debug("SGP is heated up, starting the measurement.");
 800902c:	4ad0      	ldr	r2, [pc, #832]	@ (8009370 <SGP_GetMeasurementValues+0x370>)
 800902e:	4bd1      	ldr	r3, [pc, #836]	@ (8009374 <SGP_GetMeasurementValues+0x374>)
 8009030:	0019      	movs	r1, r3
 8009032:	2003      	movs	r0, #3
 8009034:	f002 fb72 	bl	800b71c <CreateLine>
    HeatUpIsDone = true;
 8009038:	4bcb      	ldr	r3, [pc, #812]	@ (8009368 <SGP_GetMeasurementValues+0x368>)
 800903a:	2201      	movs	r2, #1
 800903c:	701a      	strb	r2, [r3, #0]
    // SGP is heated up, we ignore the output and start another measurement.
    if(HT_MeasurementReceived){
 800903e:	4bce      	ldr	r3, [pc, #824]	@ (8009378 <SGP_GetMeasurementValues+0x378>)
 8009040:	781b      	ldrb	r3, [r3, #0]
 8009042:	2b00      	cmp	r3, #0
 8009044:	d00d      	beq.n	8009062 <SGP_GetMeasurementValues+0x62>
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawWithCompBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8009046:	4bcd      	ldr	r3, [pc, #820]	@ (800937c <SGP_GetMeasurementValues+0x37c>)
 8009048:	2208      	movs	r2, #8
 800904a:	0019      	movs	r1, r3
 800904c:	2059      	movs	r0, #89	@ 0x59
 800904e:	f7ff ff2f 	bl	8008eb0 <WriteRegister>
      SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 8009052:	f002 fbdd 	bl	800b810 <GetCurrentHalTicks>
 8009056:	0003      	movs	r3, r0
 8009058:	331e      	adds	r3, #30
 800905a:	001a      	movs	r2, r3
 800905c:	4bc8      	ldr	r3, [pc, #800]	@ (8009380 <SGP_GetMeasurementValues+0x380>)
 800905e:	601a      	str	r2, [r3, #0]
 8009060:	e00c      	b.n	800907c <SGP_GetMeasurementValues+0x7c>
    }
    else{
      WriteRegister(SGP_I2C_ADDRESS, MeasureRawSignalBuffer, SGP_LONG_COMMAND_BUFFER_LENGTH);
 8009062:	4bc8      	ldr	r3, [pc, #800]	@ (8009384 <SGP_GetMeasurementValues+0x384>)
 8009064:	2208      	movs	r2, #8
 8009066:	0019      	movs	r1, r3
 8009068:	2059      	movs	r0, #89	@ 0x59
 800906a:	f7ff ff21 	bl	8008eb0 <WriteRegister>
      SGP_IdleTime = GetCurrentHalTicks() + SGP_SENSOR_IDLE_TIME;
 800906e:	f002 fbcf 	bl	800b810 <GetCurrentHalTicks>
 8009072:	0003      	movs	r3, r0
 8009074:	331e      	adds	r3, #30
 8009076:	001a      	movs	r2, r3
 8009078:	4bc1      	ldr	r3, [pc, #772]	@ (8009380 <SGP_GetMeasurementValues+0x380>)
 800907a:	601a      	str	r2, [r3, #0]
    }
    SGP_MsgSent = true;
 800907c:	4bbb      	ldr	r3, [pc, #748]	@ (800936c <SGP_GetMeasurementValues+0x36c>)
 800907e:	2201      	movs	r2, #1
 8009080:	701a      	strb	r2, [r3, #0]
  }
  if (HeatUpIsDone && SGP_MeasurementReady() && !MeasurementIsReady) {
 8009082:	4bb9      	ldr	r3, [pc, #740]	@ (8009368 <SGP_GetMeasurementValues+0x368>)
 8009084:	781b      	ldrb	r3, [r3, #0]
 8009086:	2b00      	cmp	r3, #0
 8009088:	d100      	bne.n	800908c <SGP_GetMeasurementValues+0x8c>
 800908a:	e1a9      	b.n	80093e0 <SGP_GetMeasurementValues+0x3e0>
 800908c:	f7ff ff8e 	bl	8008fac <SGP_MeasurementReady>
 8009090:	1e03      	subs	r3, r0, #0
 8009092:	d100      	bne.n	8009096 <SGP_GetMeasurementValues+0x96>
 8009094:	e1a4      	b.n	80093e0 <SGP_GetMeasurementValues+0x3e0>
 8009096:	4bbc      	ldr	r3, [pc, #752]	@ (8009388 <SGP_GetMeasurementValues+0x388>)
 8009098:	781b      	ldrb	r3, [r3, #0]
 800909a:	2201      	movs	r2, #1
 800909c:	4053      	eors	r3, r2
 800909e:	b2db      	uxtb	r3, r3
 80090a0:	2b00      	cmp	r3, #0
 80090a2:	d100      	bne.n	80090a6 <SGP_GetMeasurementValues+0xa6>
 80090a4:	e19c      	b.n	80093e0 <SGP_GetMeasurementValues+0x3e0>
    Debug("SGP_Measurement[%i] is ready, reading buffer.", SGP_AmountOfSamplesDone + 1);
 80090a6:	4bb9      	ldr	r3, [pc, #740]	@ (800938c <SGP_GetMeasurementValues+0x38c>)
 80090a8:	781b      	ldrb	r3, [r3, #0]
 80090aa:	3301      	adds	r3, #1
 80090ac:	4ab8      	ldr	r2, [pc, #736]	@ (8009390 <SGP_GetMeasurementValues+0x390>)
 80090ae:	49b1      	ldr	r1, [pc, #708]	@ (8009374 <SGP_GetMeasurementValues+0x374>)
 80090b0:	2003      	movs	r0, #3
 80090b2:	f002 fb33 	bl	800b71c <CreateLine>
    MeasurementIsReady = true;
 80090b6:	4bb4      	ldr	r3, [pc, #720]	@ (8009388 <SGP_GetMeasurementValues+0x388>)
 80090b8:	2201      	movs	r2, #1
 80090ba:	701a      	strb	r2, [r3, #0]
    // Measurement is ready to be read, also turning the heater off.
    ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH);
 80090bc:	4bb5      	ldr	r3, [pc, #724]	@ (8009394 <SGP_GetMeasurementValues+0x394>)
 80090be:	2203      	movs	r2, #3
 80090c0:	0019      	movs	r1, r3
 80090c2:	2059      	movs	r0, #89	@ 0x59
 80090c4:	f7ff fed6 	bl	8008e74 <ReadRegister>
    if (!CheckCRC(SGP_ReadBuffer, SGP_MEASURE_BUFFER_RESPONSE_LENGTH, SGP_MEASURE_BUFFER_RESPONSE_LENGTH)) {
 80090c8:	4bb2      	ldr	r3, [pc, #712]	@ (8009394 <SGP_GetMeasurementValues+0x394>)
 80090ca:	2203      	movs	r2, #3
 80090cc:	2103      	movs	r1, #3
 80090ce:	0018      	movs	r0, r3
 80090d0:	f000 f9ec 	bl	80094ac <CheckCRC>
 80090d4:	0003      	movs	r3, r0
 80090d6:	001a      	movs	r2, r3
 80090d8:	2301      	movs	r3, #1
 80090da:	4053      	eors	r3, r2
 80090dc:	b2db      	uxtb	r3, r3
 80090de:	2b00      	cmp	r3, #0
 80090e0:	d02a      	beq.n	8009138 <SGP_GetMeasurementValues+0x138>
      Error("SGP measurements CRC check failed.");
 80090e2:	4aad      	ldr	r2, [pc, #692]	@ (8009398 <SGP_GetMeasurementValues+0x398>)
 80090e4:	4bad      	ldr	r3, [pc, #692]	@ (800939c <SGP_GetMeasurementValues+0x39c>)
 80090e6:	0019      	movs	r1, r3
 80090e8:	2001      	movs	r0, #1
 80090ea:	f002 fb17 	bl	800b71c <CreateLine>
      Info("SGP_Measure buffer structure:");
 80090ee:	4aac      	ldr	r2, [pc, #688]	@ (80093a0 <SGP_GetMeasurementValues+0x3a0>)
 80090f0:	4bac      	ldr	r3, [pc, #688]	@ (80093a4 <SGP_GetMeasurementValues+0x3a4>)
 80090f2:	0019      	movs	r1, r3
 80090f4:	2002      	movs	r0, #2
 80090f6:	f002 fb11 	bl	800b71c <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 80090fa:	230f      	movs	r3, #15
 80090fc:	18fb      	adds	r3, r7, r3
 80090fe:	2200      	movs	r2, #0
 8009100:	701a      	strb	r2, [r3, #0]
 8009102:	e012      	b.n	800912a <SGP_GetMeasurementValues+0x12a>
        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
 8009104:	240f      	movs	r4, #15
 8009106:	193b      	adds	r3, r7, r4
 8009108:	7818      	ldrb	r0, [r3, #0]
 800910a:	193b      	adds	r3, r7, r4
 800910c:	781b      	ldrb	r3, [r3, #0]
 800910e:	4aa1      	ldr	r2, [pc, #644]	@ (8009394 <SGP_GetMeasurementValues+0x394>)
 8009110:	5cd3      	ldrb	r3, [r2, r3]
 8009112:	4aa5      	ldr	r2, [pc, #660]	@ (80093a8 <SGP_GetMeasurementValues+0x3a8>)
 8009114:	4997      	ldr	r1, [pc, #604]	@ (8009374 <SGP_GetMeasurementValues+0x374>)
 8009116:	9300      	str	r3, [sp, #0]
 8009118:	0003      	movs	r3, r0
 800911a:	2003      	movs	r0, #3
 800911c:	f002 fafe 	bl	800b71c <CreateLine>
      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
 8009120:	193b      	adds	r3, r7, r4
 8009122:	781a      	ldrb	r2, [r3, #0]
 8009124:	193b      	adds	r3, r7, r4
 8009126:	3201      	adds	r2, #1
 8009128:	701a      	strb	r2, [r3, #0]
 800912a:	230f      	movs	r3, #15
 800912c:	18fb      	adds	r3, r7, r3
 800912e:	781b      	ldrb	r3, [r3, #0]
 8009130:	2b02      	cmp	r3, #2
 8009132:	d9e7      	bls.n	8009104 <SGP_GetMeasurementValues+0x104>
      }
      return false;
 8009134:	2300      	movs	r3, #0
 8009136:	e16b      	b.n	8009410 <SGP_GetMeasurementValues+0x410>
    }
    SGP_MeasurementDutyCycle = GetCurrentHalTicks() + SGP_SENSOR_DUTYCYCLE;
 8009138:	f002 fb6a 	bl	800b810 <GetCurrentHalTicks>
 800913c:	0003      	movs	r3, r0
 800913e:	22fa      	movs	r2, #250	@ 0xfa
 8009140:	0092      	lsls	r2, r2, #2
 8009142:	189a      	adds	r2, r3, r2
 8009144:	4b99      	ldr	r3, [pc, #612]	@ (80093ac <SGP_GetMeasurementValues+0x3ac>)
 8009146:	601a      	str	r2, [r3, #0]
    SGP_TurnHeaterOff();
 8009148:	f7ff ff4c 	bl	8008fe4 <SGP_TurnHeaterOff>
    SGP_AmountOfSamplesDone += 1;
 800914c:	4b8f      	ldr	r3, [pc, #572]	@ (800938c <SGP_GetMeasurementValues+0x38c>)
 800914e:	781b      	ldrb	r3, [r3, #0]
 8009150:	3301      	adds	r3, #1
 8009152:	b2da      	uxtb	r2, r3
 8009154:	4b8d      	ldr	r3, [pc, #564]	@ (800938c <SGP_GetMeasurementValues+0x38c>)
 8009156:	701a      	strb	r2, [r3, #0]
    if (SGP_AmountOfSamplesDone >= SGP_TotalSamples) {
 8009158:	4b8c      	ldr	r3, [pc, #560]	@ (800938c <SGP_GetMeasurementValues+0x38c>)
 800915a:	781a      	ldrb	r2, [r3, #0]
 800915c:	4b94      	ldr	r3, [pc, #592]	@ (80093b0 <SGP_GetMeasurementValues+0x3b0>)
 800915e:	781b      	ldrb	r3, [r3, #0]
 8009160:	429a      	cmp	r2, r3
 8009162:	d200      	bcs.n	8009166 <SGP_GetMeasurementValues+0x166>
 8009164:	e13c      	b.n	80093e0 <SGP_GetMeasurementValues+0x3e0>
      uint16_t rawSignal = ((SGP_ReadBuffer[1] << 8) | (SGP_ReadBuffer[0]));
 8009166:	4b8b      	ldr	r3, [pc, #556]	@ (8009394 <SGP_GetMeasurementValues+0x394>)
 8009168:	785b      	ldrb	r3, [r3, #1]
 800916a:	021b      	lsls	r3, r3, #8
 800916c:	b21a      	sxth	r2, r3
 800916e:	4b89      	ldr	r3, [pc, #548]	@ (8009394 <SGP_GetMeasurementValues+0x394>)
 8009170:	781b      	ldrb	r3, [r3, #0]
 8009172:	b21b      	sxth	r3, r3
 8009174:	4313      	orrs	r3, r2
 8009176:	b21a      	sxth	r2, r3
 8009178:	240c      	movs	r4, #12
 800917a:	193b      	adds	r3, r7, r4
 800917c:	801a      	strh	r2, [r3, #0]
      Debug("rawSignal value: %d", rawSignal);
 800917e:	193b      	adds	r3, r7, r4
 8009180:	881b      	ldrh	r3, [r3, #0]
 8009182:	4a8c      	ldr	r2, [pc, #560]	@ (80093b4 <SGP_GetMeasurementValues+0x3b4>)
 8009184:	497b      	ldr	r1, [pc, #492]	@ (8009374 <SGP_GetMeasurementValues+0x374>)
 8009186:	2003      	movs	r0, #3
 8009188:	f002 fac8 	bl	800b71c <CreateLine>
      int32_t tempVocIndex = 0;
 800918c:	2300      	movs	r3, #0
 800918e:	60bb      	str	r3, [r7, #8]
      GasIndexAlgorithm_process(&params, rawSignal, &tempVocIndex);
 8009190:	193b      	adds	r3, r7, r4
 8009192:	8819      	ldrh	r1, [r3, #0]
 8009194:	2308      	movs	r3, #8
 8009196:	18fa      	adds	r2, r7, r3
 8009198:	4b87      	ldr	r3, [pc, #540]	@ (80093b8 <SGP_GetMeasurementValues+0x3b8>)
 800919a:	0018      	movs	r0, r3
 800919c:	f7ff f848 	bl	8008230 <GasIndexAlgorithm_process>
      Debug("vocIndex value: %d", tempVocIndex);
 80091a0:	68bb      	ldr	r3, [r7, #8]
 80091a2:	4a86      	ldr	r2, [pc, #536]	@ (80093bc <SGP_GetMeasurementValues+0x3bc>)
 80091a4:	4973      	ldr	r1, [pc, #460]	@ (8009374 <SGP_GetMeasurementValues+0x374>)
 80091a6:	2003      	movs	r0, #3
 80091a8:	f002 fab8 	bl	800b71c <CreateLine>
//      *vocIndex = 1337;
      *vocIndex = tempVocIndex;
 80091ac:	68ba      	ldr	r2, [r7, #8]
 80091ae:	687b      	ldr	r3, [r7, #4]
 80091b0:	601a      	str	r2, [r3, #0]
      if(*vocIndex > 0){
        // TODO add status LED logic.
//        HAL_GPIO_TogglePin(STATUS2_LED_GPIO_Port, STATUS2_LED_Pin);
      }
      if(*vocIndex > 0 && *vocIndex <= 100){
 80091b2:	687b      	ldr	r3, [r7, #4]
 80091b4:	681b      	ldr	r3, [r3, #0]
 80091b6:	2b00      	cmp	r3, #0
 80091b8:	dd5a      	ble.n	8009270 <SGP_GetMeasurementValues+0x270>
 80091ba:	687b      	ldr	r3, [r7, #4]
 80091bc:	681b      	ldr	r3, [r3, #0]
 80091be:	2b64      	cmp	r3, #100	@ 0x64
 80091c0:	dc56      	bgt.n	8009270 <SGP_GetMeasurementValues+0x270>
      Green = (1.0-(*vocIndex/100.0))*TimeValue;
 80091c2:	687b      	ldr	r3, [r7, #4]
 80091c4:	681b      	ldr	r3, [r3, #0]
 80091c6:	0018      	movs	r0, r3
 80091c8:	f7fa f8fa 	bl	80033c0 <__aeabi_i2d>
 80091cc:	2200      	movs	r2, #0
 80091ce:	4b7c      	ldr	r3, [pc, #496]	@ (80093c0 <SGP_GetMeasurementValues+0x3c0>)
 80091d0:	f7f8 fdf0 	bl	8001db4 <__aeabi_ddiv>
 80091d4:	0002      	movs	r2, r0
 80091d6:	000b      	movs	r3, r1
 80091d8:	2000      	movs	r0, #0
 80091da:	497a      	ldr	r1, [pc, #488]	@ (80093c4 <SGP_GetMeasurementValues+0x3c4>)
 80091dc:	f7f9 fcf6 	bl	8002bcc <__aeabi_dsub>
 80091e0:	0002      	movs	r2, r0
 80091e2:	000b      	movs	r3, r1
 80091e4:	0014      	movs	r4, r2
 80091e6:	001d      	movs	r5, r3
 80091e8:	4b77      	ldr	r3, [pc, #476]	@ (80093c8 <SGP_GetMeasurementValues+0x3c8>)
 80091ea:	881b      	ldrh	r3, [r3, #0]
 80091ec:	0018      	movs	r0, r3
 80091ee:	f7fa f8e7 	bl	80033c0 <__aeabi_i2d>
 80091f2:	0002      	movs	r2, r0
 80091f4:	000b      	movs	r3, r1
 80091f6:	0020      	movs	r0, r4
 80091f8:	0029      	movs	r1, r5
 80091fa:	f7f9 fa1f 	bl	800263c <__aeabi_dmul>
 80091fe:	0002      	movs	r2, r0
 8009200:	000b      	movs	r3, r1
 8009202:	0010      	movs	r0, r2
 8009204:	0019      	movs	r1, r3
 8009206:	f7f7 fa21 	bl	800064c <__aeabi_d2uiz>
 800920a:	0003      	movs	r3, r0
 800920c:	b29a      	uxth	r2, r3
 800920e:	4b6f      	ldr	r3, [pc, #444]	@ (80093cc <SGP_GetMeasurementValues+0x3cc>)
 8009210:	801a      	strh	r2, [r3, #0]
      Blue = (*vocIndex/100.0)*TimeValue;
 8009212:	687b      	ldr	r3, [r7, #4]
 8009214:	681b      	ldr	r3, [r3, #0]
 8009216:	0018      	movs	r0, r3
 8009218:	f7fa f8d2 	bl	80033c0 <__aeabi_i2d>
 800921c:	2200      	movs	r2, #0
 800921e:	4b68      	ldr	r3, [pc, #416]	@ (80093c0 <SGP_GetMeasurementValues+0x3c0>)
 8009220:	f7f8 fdc8 	bl	8001db4 <__aeabi_ddiv>
 8009224:	0002      	movs	r2, r0
 8009226:	000b      	movs	r3, r1
 8009228:	0014      	movs	r4, r2
 800922a:	001d      	movs	r5, r3
 800922c:	4b66      	ldr	r3, [pc, #408]	@ (80093c8 <SGP_GetMeasurementValues+0x3c8>)
 800922e:	881b      	ldrh	r3, [r3, #0]
 8009230:	0018      	movs	r0, r3
 8009232:	f7fa f8c5 	bl	80033c0 <__aeabi_i2d>
 8009236:	0002      	movs	r2, r0
 8009238:	000b      	movs	r3, r1
 800923a:	0020      	movs	r0, r4
 800923c:	0029      	movs	r1, r5
 800923e:	f7f9 f9fd 	bl	800263c <__aeabi_dmul>
 8009242:	0002      	movs	r2, r0
 8009244:	000b      	movs	r3, r1
 8009246:	0010      	movs	r0, r2
 8009248:	0019      	movs	r1, r3
 800924a:	f7f7 f9ff 	bl	800064c <__aeabi_d2uiz>
 800924e:	0003      	movs	r3, r0
 8009250:	b29a      	uxth	r2, r3
 8009252:	4b5f      	ldr	r3, [pc, #380]	@ (80093d0 <SGP_GetMeasurementValues+0x3d0>)
 8009254:	801a      	strh	r2, [r3, #0]
      Red = TimeValue;
 8009256:	4b5c      	ldr	r3, [pc, #368]	@ (80093c8 <SGP_GetMeasurementValues+0x3c8>)
 8009258:	881a      	ldrh	r2, [r3, #0]
 800925a:	4b5e      	ldr	r3, [pc, #376]	@ (80093d4 <SGP_GetMeasurementValues+0x3d4>)
 800925c:	801a      	strh	r2, [r3, #0]
      SetVocLED(Red, Green, Blue);
 800925e:	4b5d      	ldr	r3, [pc, #372]	@ (80093d4 <SGP_GetMeasurementValues+0x3d4>)
 8009260:	8818      	ldrh	r0, [r3, #0]
 8009262:	4b5a      	ldr	r3, [pc, #360]	@ (80093cc <SGP_GetMeasurementValues+0x3cc>)
 8009264:	8819      	ldrh	r1, [r3, #0]
 8009266:	4b5a      	ldr	r3, [pc, #360]	@ (80093d0 <SGP_GetMeasurementValues+0x3d0>)
 8009268:	881b      	ldrh	r3, [r3, #0]
 800926a:	001a      	movs	r2, r3
 800926c:	f001 fb36 	bl	800a8dc <SetVocLED>
      }
      if(*vocIndex > 100){
 8009270:	687b      	ldr	r3, [r7, #4]
 8009272:	681b      	ldr	r3, [r3, #0]
 8009274:	2b64      	cmp	r3, #100	@ 0x64
 8009276:	dd66      	ble.n	8009346 <SGP_GetMeasurementValues+0x346>
        Green = (((*vocIndex-100.0)/400.0))*TimeValue;
 8009278:	687b      	ldr	r3, [r7, #4]
 800927a:	681b      	ldr	r3, [r3, #0]
 800927c:	0018      	movs	r0, r3
 800927e:	f7fa f89f 	bl	80033c0 <__aeabi_i2d>
 8009282:	2200      	movs	r2, #0
 8009284:	4b4e      	ldr	r3, [pc, #312]	@ (80093c0 <SGP_GetMeasurementValues+0x3c0>)
 8009286:	f7f9 fca1 	bl	8002bcc <__aeabi_dsub>
 800928a:	0002      	movs	r2, r0
 800928c:	000b      	movs	r3, r1
 800928e:	0010      	movs	r0, r2
 8009290:	0019      	movs	r1, r3
 8009292:	2200      	movs	r2, #0
 8009294:	4b50      	ldr	r3, [pc, #320]	@ (80093d8 <SGP_GetMeasurementValues+0x3d8>)
 8009296:	f7f8 fd8d 	bl	8001db4 <__aeabi_ddiv>
 800929a:	0002      	movs	r2, r0
 800929c:	000b      	movs	r3, r1
 800929e:	0014      	movs	r4, r2
 80092a0:	001d      	movs	r5, r3
 80092a2:	4b49      	ldr	r3, [pc, #292]	@ (80093c8 <SGP_GetMeasurementValues+0x3c8>)
 80092a4:	881b      	ldrh	r3, [r3, #0]
 80092a6:	0018      	movs	r0, r3
 80092a8:	f7fa f88a 	bl	80033c0 <__aeabi_i2d>
 80092ac:	0002      	movs	r2, r0
 80092ae:	000b      	movs	r3, r1
 80092b0:	0020      	movs	r0, r4
 80092b2:	0029      	movs	r1, r5
 80092b4:	f7f9 f9c2 	bl	800263c <__aeabi_dmul>
 80092b8:	0002      	movs	r2, r0
 80092ba:	000b      	movs	r3, r1
 80092bc:	0010      	movs	r0, r2
 80092be:	0019      	movs	r1, r3
 80092c0:	f7f7 f9c4 	bl	800064c <__aeabi_d2uiz>
 80092c4:	0003      	movs	r3, r0
 80092c6:	b29a      	uxth	r2, r3
 80092c8:	4b40      	ldr	r3, [pc, #256]	@ (80093cc <SGP_GetMeasurementValues+0x3cc>)
 80092ca:	801a      	strh	r2, [r3, #0]
        Red = (1.0-((*vocIndex-100.0)/400.0))*TimeValue;
 80092cc:	687b      	ldr	r3, [r7, #4]
 80092ce:	681b      	ldr	r3, [r3, #0]
 80092d0:	0018      	movs	r0, r3
 80092d2:	f7fa f875 	bl	80033c0 <__aeabi_i2d>
 80092d6:	2200      	movs	r2, #0
 80092d8:	4b39      	ldr	r3, [pc, #228]	@ (80093c0 <SGP_GetMeasurementValues+0x3c0>)
 80092da:	f7f9 fc77 	bl	8002bcc <__aeabi_dsub>
 80092de:	0002      	movs	r2, r0
 80092e0:	000b      	movs	r3, r1
 80092e2:	0010      	movs	r0, r2
 80092e4:	0019      	movs	r1, r3
 80092e6:	2200      	movs	r2, #0
 80092e8:	4b3b      	ldr	r3, [pc, #236]	@ (80093d8 <SGP_GetMeasurementValues+0x3d8>)
 80092ea:	f7f8 fd63 	bl	8001db4 <__aeabi_ddiv>
 80092ee:	0002      	movs	r2, r0
 80092f0:	000b      	movs	r3, r1
 80092f2:	2000      	movs	r0, #0
 80092f4:	4933      	ldr	r1, [pc, #204]	@ (80093c4 <SGP_GetMeasurementValues+0x3c4>)
 80092f6:	f7f9 fc69 	bl	8002bcc <__aeabi_dsub>
 80092fa:	0002      	movs	r2, r0
 80092fc:	000b      	movs	r3, r1
 80092fe:	0014      	movs	r4, r2
 8009300:	001d      	movs	r5, r3
 8009302:	4b31      	ldr	r3, [pc, #196]	@ (80093c8 <SGP_GetMeasurementValues+0x3c8>)
 8009304:	881b      	ldrh	r3, [r3, #0]
 8009306:	0018      	movs	r0, r3
 8009308:	f7fa f85a 	bl	80033c0 <__aeabi_i2d>
 800930c:	0002      	movs	r2, r0
 800930e:	000b      	movs	r3, r1
 8009310:	0020      	movs	r0, r4
 8009312:	0029      	movs	r1, r5
 8009314:	f7f9 f992 	bl	800263c <__aeabi_dmul>
 8009318:	0002      	movs	r2, r0
 800931a:	000b      	movs	r3, r1
 800931c:	0010      	movs	r0, r2
 800931e:	0019      	movs	r1, r3
 8009320:	f7f7 f994 	bl	800064c <__aeabi_d2uiz>
 8009324:	0003      	movs	r3, r0
 8009326:	b29a      	uxth	r2, r3
 8009328:	4b2a      	ldr	r3, [pc, #168]	@ (80093d4 <SGP_GetMeasurementValues+0x3d4>)
 800932a:	801a      	strh	r2, [r3, #0]
        Blue = TimeValue;
 800932c:	4b26      	ldr	r3, [pc, #152]	@ (80093c8 <SGP_GetMeasurementValues+0x3c8>)
 800932e:	881a      	ldrh	r2, [r3, #0]
 8009330:	4b27      	ldr	r3, [pc, #156]	@ (80093d0 <SGP_GetMeasurementValues+0x3d0>)
 8009332:	801a      	strh	r2, [r3, #0]
        SetVocLED(Red, Green, Blue);
 8009334:	4b27      	ldr	r3, [pc, #156]	@ (80093d4 <SGP_GetMeasurementValues+0x3d4>)
 8009336:	8818      	ldrh	r0, [r3, #0]
 8009338:	4b24      	ldr	r3, [pc, #144]	@ (80093cc <SGP_GetMeasurementValues+0x3cc>)
 800933a:	8819      	ldrh	r1, [r3, #0]
 800933c:	4b24      	ldr	r3, [pc, #144]	@ (80093d0 <SGP_GetMeasurementValues+0x3d0>)
 800933e:	881b      	ldrh	r3, [r3, #0]
 8009340:	001a      	movs	r2, r3
 8009342:	f001 facb 	bl	800a8dc <SetVocLED>
      }
      SGP_AmountOfSamplesDone = 0;
 8009346:	4b11      	ldr	r3, [pc, #68]	@ (800938c <SGP_GetMeasurementValues+0x38c>)
 8009348:	2200      	movs	r2, #0
 800934a:	701a      	strb	r2, [r3, #0]
      Debug("SGP_Measurement completely done.");
 800934c:	4a23      	ldr	r2, [pc, #140]	@ (80093dc <SGP_GetMeasurementValues+0x3dc>)
 800934e:	4b09      	ldr	r3, [pc, #36]	@ (8009374 <SGP_GetMeasurementValues+0x374>)
 8009350:	0019      	movs	r1, r3
 8009352:	2003      	movs	r0, #3
 8009354:	f002 f9e2 	bl	800b71c <CreateLine>
      HT_MeasurementReceived = false;
 8009358:	4b07      	ldr	r3, [pc, #28]	@ (8009378 <SGP_GetMeasurementValues+0x378>)
 800935a:	2200      	movs	r2, #0
 800935c:	701a      	strb	r2, [r3, #0]
      SGP_MsgSent = false;
 800935e:	4b03      	ldr	r3, [pc, #12]	@ (800936c <SGP_GetMeasurementValues+0x36c>)
 8009360:	2200      	movs	r2, #0
 8009362:	701a      	strb	r2, [r3, #0]
//      for (uint8_t i = 0; i < SGP_MEASURE_BUFFER_RESPONSE_LENGTH; i++) {
//        Debug("SGP_Measurement buffer[%d]: %d", i, SGP_ReadBuffer[i]);
//      }
      return true;
 8009364:	2301      	movs	r3, #1
 8009366:	e053      	b.n	8009410 <SGP_GetMeasurementValues+0x410>
 8009368:	200011ce 	.word	0x200011ce
 800936c:	20001279 	.word	0x20001279
 8009370:	080201cc 	.word	0x080201cc
 8009374:	080201f8 	.word	0x080201f8
 8009378:	20001278 	.word	0x20001278
 800937c:	20000094 	.word	0x20000094
 8009380:	200000a8 	.word	0x200000a8
 8009384:	2000008c 	.word	0x2000008c
 8009388:	200011cf 	.word	0x200011cf
 800938c:	200011cd 	.word	0x200011cd
 8009390:	080201fc 	.word	0x080201fc
 8009394:	200011c4 	.word	0x200011c4
 8009398:	0802022c 	.word	0x0802022c
 800939c:	08020250 	.word	0x08020250
 80093a0:	08020254 	.word	0x08020254
 80093a4:	08020274 	.word	0x08020274
 80093a8:	08020278 	.word	0x08020278
 80093ac:	200000a4 	.word	0x200000a4
 80093b0:	2000009c 	.word	0x2000009c
 80093b4:	08020298 	.word	0x08020298
 80093b8:	200011d0 	.word	0x200011d0
 80093bc:	080202ac 	.word	0x080202ac
 80093c0:	40590000 	.word	0x40590000
 80093c4:	3ff00000 	.word	0x3ff00000
 80093c8:	200000ac 	.word	0x200000ac
 80093cc:	2000127e 	.word	0x2000127e
 80093d0:	2000127c 	.word	0x2000127c
 80093d4:	2000127a 	.word	0x2000127a
 80093d8:	40790000 	.word	0x40790000
 80093dc:	080202c0 	.word	0x080202c0
    }
  }
  if (SGP_MeasurementDone() && HeatUpIsDone && MeasurementIsReady) {
 80093e0:	f7ff fdf2 	bl	8008fc8 <SGP_MeasurementDone>
 80093e4:	1e03      	subs	r3, r0, #0
 80093e6:	d012      	beq.n	800940e <SGP_GetMeasurementValues+0x40e>
 80093e8:	4b0b      	ldr	r3, [pc, #44]	@ (8009418 <SGP_GetMeasurementValues+0x418>)
 80093ea:	781b      	ldrb	r3, [r3, #0]
 80093ec:	2b00      	cmp	r3, #0
 80093ee:	d00e      	beq.n	800940e <SGP_GetMeasurementValues+0x40e>
 80093f0:	4b0a      	ldr	r3, [pc, #40]	@ (800941c <SGP_GetMeasurementValues+0x41c>)
 80093f2:	781b      	ldrb	r3, [r3, #0]
 80093f4:	2b00      	cmp	r3, #0
 80093f6:	d00a      	beq.n	800940e <SGP_GetMeasurementValues+0x40e>
    // Starting next measurement
    Debug("Starting next SGP_measurement.");
 80093f8:	4a09      	ldr	r2, [pc, #36]	@ (8009420 <SGP_GetMeasurementValues+0x420>)
 80093fa:	4b0a      	ldr	r3, [pc, #40]	@ (8009424 <SGP_GetMeasurementValues+0x424>)
 80093fc:	0019      	movs	r1, r3
 80093fe:	2003      	movs	r0, #3
 8009400:	f002 f98c 	bl	800b71c <CreateLine>
    SGP_StartMeasurement();
 8009404:	f7ff fd8c 	bl	8008f20 <SGP_StartMeasurement>
    SGP_MsgSent = false;
 8009408:	4b07      	ldr	r3, [pc, #28]	@ (8009428 <SGP_GetMeasurementValues+0x428>)
 800940a:	2200      	movs	r2, #0
 800940c:	701a      	strb	r2, [r3, #0]
  }
  return false;
 800940e:	2300      	movs	r3, #0
}
 8009410:	0018      	movs	r0, r3
 8009412:	46bd      	mov	sp, r7
 8009414:	b004      	add	sp, #16
 8009416:	bdb0      	pop	{r4, r5, r7, pc}
 8009418:	200011ce 	.word	0x200011ce
 800941c:	200011cf 	.word	0x200011cf
 8009420:	080202e4 	.word	0x080202e4
 8009424:	080201f8 	.word	0x080201f8
 8009428:	20001279 	.word	0x20001279

0800942c <SGP_DeviceConnected>:

bool SGP_DeviceConnected(void) {
 800942c:	b580      	push	{r7, lr}
 800942e:	b084      	sub	sp, #16
 8009430:	af02      	add	r7, sp, #8
  WriteRegister(SGP_I2C_ADDRESS, GetSerialNumberBuffer, SGP_SHORT_COMMAND_BUFFER_LENGTH);
 8009432:	4b1a      	ldr	r3, [pc, #104]	@ (800949c <SGP_DeviceConnected+0x70>)
 8009434:	2202      	movs	r2, #2
 8009436:	0019      	movs	r1, r3
 8009438:	2059      	movs	r0, #89	@ 0x59
 800943a:	f7ff fd39 	bl	8008eb0 <WriteRegister>
  HAL_Delay(1); // 1ms delay for the sensor to respond (according to datasheet)
 800943e:	2001      	movs	r0, #1
 8009440:	f002 fd12 	bl	800be68 <HAL_Delay>
  ReadRegister(SGP_I2C_ADDRESS, SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH);
 8009444:	4b16      	ldr	r3, [pc, #88]	@ (80094a0 <SGP_DeviceConnected+0x74>)
 8009446:	2209      	movs	r2, #9
 8009448:	0019      	movs	r1, r3
 800944a:	2059      	movs	r0, #89	@ 0x59
 800944c:	f7ff fd12 	bl	8008e74 <ReadRegister>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 8009450:	1dfb      	adds	r3, r7, #7
 8009452:	2200      	movs	r2, #0
 8009454:	701a      	strb	r2, [r3, #0]
 8009456:	e011      	b.n	800947c <SGP_DeviceConnected+0x50>
    Info("SGP_Device serial ID[%d]: 0x%X", i, SGP_ReadBuffer[i]);
 8009458:	1dfb      	adds	r3, r7, #7
 800945a:	7818      	ldrb	r0, [r3, #0]
 800945c:	1dfb      	adds	r3, r7, #7
 800945e:	781b      	ldrb	r3, [r3, #0]
 8009460:	4a0f      	ldr	r2, [pc, #60]	@ (80094a0 <SGP_DeviceConnected+0x74>)
 8009462:	5cd3      	ldrb	r3, [r2, r3]
 8009464:	4a0f      	ldr	r2, [pc, #60]	@ (80094a4 <SGP_DeviceConnected+0x78>)
 8009466:	4910      	ldr	r1, [pc, #64]	@ (80094a8 <SGP_DeviceConnected+0x7c>)
 8009468:	9300      	str	r3, [sp, #0]
 800946a:	0003      	movs	r3, r0
 800946c:	2002      	movs	r0, #2
 800946e:	f002 f955 	bl	800b71c <CreateLine>
  for (uint8_t i = 0; i < SGP_SERIAL_NUMBER_RESPONSE_LENGTH; i++) {
 8009472:	1dfb      	adds	r3, r7, #7
 8009474:	781a      	ldrb	r2, [r3, #0]
 8009476:	1dfb      	adds	r3, r7, #7
 8009478:	3201      	adds	r2, #1
 800947a:	701a      	strb	r2, [r3, #0]
 800947c:	1dfb      	adds	r3, r7, #7
 800947e:	781b      	ldrb	r3, [r3, #0]
 8009480:	2b08      	cmp	r3, #8
 8009482:	d9e9      	bls.n	8009458 <SGP_DeviceConnected+0x2c>
  }
  return CheckCRC(SGP_ReadBuffer, SGP_SERIAL_NUMBER_RESPONSE_LENGTH, SGP_SERIAL_NUMBER_SEGMENT_SIZE);
 8009484:	4b06      	ldr	r3, [pc, #24]	@ (80094a0 <SGP_DeviceConnected+0x74>)
 8009486:	2203      	movs	r2, #3
 8009488:	2109      	movs	r1, #9
 800948a:	0018      	movs	r0, r3
 800948c:	f000 f80e 	bl	80094ac <CheckCRC>
 8009490:	0003      	movs	r3, r0
}
 8009492:	0018      	movs	r0, r3
 8009494:	46bd      	mov	sp, r7
 8009496:	b002      	add	sp, #8
 8009498:	bd80      	pop	{r7, pc}
 800949a:	46c0      	nop			@ (mov r8, r8)
 800949c:	20000088 	.word	0x20000088
 80094a0:	200011c4 	.word	0x200011c4
 80094a4:	08020304 	.word	0x08020304
 80094a8:	08020274 	.word	0x08020274

080094ac <CheckCRC>:

static bool CheckCRC(uint8_t *data, uint8_t dataLength, uint8_t segmentSize) {
 80094ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80094ae:	b08f      	sub	sp, #60	@ 0x3c
 80094b0:	af00      	add	r7, sp, #0
 80094b2:	6278      	str	r0, [r7, #36]	@ 0x24
 80094b4:	0008      	movs	r0, r1
 80094b6:	0011      	movs	r1, r2
 80094b8:	2323      	movs	r3, #35	@ 0x23
 80094ba:	18fb      	adds	r3, r7, r3
 80094bc:	1c02      	adds	r2, r0, #0
 80094be:	701a      	strb	r2, [r3, #0]
 80094c0:	2322      	movs	r3, #34	@ 0x22
 80094c2:	18fb      	adds	r3, r7, r3
 80094c4:	1c0a      	adds	r2, r1, #0
 80094c6:	701a      	strb	r2, [r3, #0]
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 80094c8:	2317      	movs	r3, #23
 80094ca:	2220      	movs	r2, #32
 80094cc:	189b      	adds	r3, r3, r2
 80094ce:	19db      	adds	r3, r3, r7
 80094d0:	2200      	movs	r2, #0
 80094d2:	701a      	strb	r2, [r3, #0]
 80094d4:	e09f      	b.n	8009616 <CheckCRC+0x16a>
 80094d6:	466b      	mov	r3, sp
 80094d8:	001e      	movs	r6, r3
    uint8_t crcData[segmentSize];
 80094da:	2322      	movs	r3, #34	@ 0x22
 80094dc:	18fb      	adds	r3, r7, r3
 80094de:	781b      	ldrb	r3, [r3, #0]
 80094e0:	001a      	movs	r2, r3
 80094e2:	3a01      	subs	r2, #1
 80094e4:	633a      	str	r2, [r7, #48]	@ 0x30
 80094e6:	60bb      	str	r3, [r7, #8]
 80094e8:	2200      	movs	r2, #0
 80094ea:	60fa      	str	r2, [r7, #12]
 80094ec:	68b8      	ldr	r0, [r7, #8]
 80094ee:	68f9      	ldr	r1, [r7, #12]
 80094f0:	0002      	movs	r2, r0
 80094f2:	0f52      	lsrs	r2, r2, #29
 80094f4:	000c      	movs	r4, r1
 80094f6:	00e4      	lsls	r4, r4, #3
 80094f8:	61fc      	str	r4, [r7, #28]
 80094fa:	69fc      	ldr	r4, [r7, #28]
 80094fc:	4314      	orrs	r4, r2
 80094fe:	61fc      	str	r4, [r7, #28]
 8009500:	0002      	movs	r2, r0
 8009502:	00d2      	lsls	r2, r2, #3
 8009504:	61ba      	str	r2, [r7, #24]
 8009506:	603b      	str	r3, [r7, #0]
 8009508:	2200      	movs	r2, #0
 800950a:	607a      	str	r2, [r7, #4]
 800950c:	6838      	ldr	r0, [r7, #0]
 800950e:	6879      	ldr	r1, [r7, #4]
 8009510:	0002      	movs	r2, r0
 8009512:	0f52      	lsrs	r2, r2, #29
 8009514:	000c      	movs	r4, r1
 8009516:	00e4      	lsls	r4, r4, #3
 8009518:	617c      	str	r4, [r7, #20]
 800951a:	697c      	ldr	r4, [r7, #20]
 800951c:	4314      	orrs	r4, r2
 800951e:	617c      	str	r4, [r7, #20]
 8009520:	0002      	movs	r2, r0
 8009522:	00d2      	lsls	r2, r2, #3
 8009524:	613a      	str	r2, [r7, #16]
 8009526:	3307      	adds	r3, #7
 8009528:	08db      	lsrs	r3, r3, #3
 800952a:	00db      	lsls	r3, r3, #3
 800952c:	466a      	mov	r2, sp
 800952e:	1ad3      	subs	r3, r2, r3
 8009530:	469d      	mov	sp, r3
 8009532:	466b      	mov	r3, sp
 8009534:	3300      	adds	r3, #0
 8009536:	62fb      	str	r3, [r7, #44]	@ 0x2c

    for (uint8_t j = 0; j < segmentSize; j++) {
 8009538:	2316      	movs	r3, #22
 800953a:	2220      	movs	r2, #32
 800953c:	189b      	adds	r3, r3, r2
 800953e:	19db      	adds	r3, r3, r7
 8009540:	2200      	movs	r2, #0
 8009542:	701a      	strb	r2, [r3, #0]
 8009544:	e01e      	b.n	8009584 <CheckCRC+0xd8>
      crcData[j] = data[i + j];
 8009546:	2317      	movs	r3, #23
 8009548:	2220      	movs	r2, #32
 800954a:	189b      	adds	r3, r3, r2
 800954c:	19db      	adds	r3, r3, r7
 800954e:	781a      	ldrb	r2, [r3, #0]
 8009550:	2116      	movs	r1, #22
 8009552:	2320      	movs	r3, #32
 8009554:	18cb      	adds	r3, r1, r3
 8009556:	19db      	adds	r3, r3, r7
 8009558:	781b      	ldrb	r3, [r3, #0]
 800955a:	18d3      	adds	r3, r2, r3
 800955c:	001a      	movs	r2, r3
 800955e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8009560:	189a      	adds	r2, r3, r2
 8009562:	0008      	movs	r0, r1
 8009564:	2320      	movs	r3, #32
 8009566:	18cb      	adds	r3, r1, r3
 8009568:	19db      	adds	r3, r3, r7
 800956a:	781b      	ldrb	r3, [r3, #0]
 800956c:	7811      	ldrb	r1, [r2, #0]
 800956e:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8009570:	54d1      	strb	r1, [r2, r3]
    for (uint8_t j = 0; j < segmentSize; j++) {
 8009572:	2320      	movs	r3, #32
 8009574:	18c3      	adds	r3, r0, r3
 8009576:	19db      	adds	r3, r3, r7
 8009578:	781a      	ldrb	r2, [r3, #0]
 800957a:	2320      	movs	r3, #32
 800957c:	18c3      	adds	r3, r0, r3
 800957e:	19db      	adds	r3, r3, r7
 8009580:	3201      	adds	r2, #1
 8009582:	701a      	strb	r2, [r3, #0]
 8009584:	2316      	movs	r3, #22
 8009586:	2220      	movs	r2, #32
 8009588:	189b      	adds	r3, r3, r2
 800958a:	19da      	adds	r2, r3, r7
 800958c:	2322      	movs	r3, #34	@ 0x22
 800958e:	18fb      	adds	r3, r7, r3
 8009590:	7812      	ldrb	r2, [r2, #0]
 8009592:	781b      	ldrb	r3, [r3, #0]
 8009594:	429a      	cmp	r2, r3
 8009596:	d3d6      	bcc.n	8009546 <CheckCRC+0x9a>
    }
    uint8_t crc = data[i + segmentSize - 1];
 8009598:	2417      	movs	r4, #23
 800959a:	2320      	movs	r3, #32
 800959c:	18e3      	adds	r3, r4, r3
 800959e:	19db      	adds	r3, r3, r7
 80095a0:	781a      	ldrb	r2, [r3, #0]
 80095a2:	2322      	movs	r3, #34	@ 0x22
 80095a4:	18fb      	adds	r3, r7, r3
 80095a6:	781b      	ldrb	r3, [r3, #0]
 80095a8:	18d3      	adds	r3, r2, r3
 80095aa:	3b01      	subs	r3, #1
 80095ac:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80095ae:	18d2      	adds	r2, r2, r3
 80095b0:	250b      	movs	r5, #11
 80095b2:	2320      	movs	r3, #32
 80095b4:	18eb      	adds	r3, r5, r3
 80095b6:	19db      	adds	r3, r3, r7
 80095b8:	7812      	ldrb	r2, [r2, #0]
 80095ba:	701a      	strb	r2, [r3, #0]

    if (CalculateCRC(crcData, segmentSize - 1) != crc) {
 80095bc:	2322      	movs	r3, #34	@ 0x22
 80095be:	18fb      	adds	r3, r7, r3
 80095c0:	781b      	ldrb	r3, [r3, #0]
 80095c2:	3b01      	subs	r3, #1
 80095c4:	b2da      	uxtb	r2, r3
 80095c6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80095c8:	0011      	movs	r1, r2
 80095ca:	0018      	movs	r0, r3
 80095cc:	f000 f838 	bl	8009640 <CalculateCRC>
 80095d0:	0003      	movs	r3, r0
 80095d2:	001a      	movs	r2, r3
 80095d4:	2320      	movs	r3, #32
 80095d6:	18eb      	adds	r3, r5, r3
 80095d8:	19db      	adds	r3, r3, r7
 80095da:	781b      	ldrb	r3, [r3, #0]
 80095dc:	4293      	cmp	r3, r2
 80095de:	d00c      	beq.n	80095fa <CheckCRC+0x14e>
      Error("CRC check failed for segment: %d.", i + 1);
 80095e0:	2320      	movs	r3, #32
 80095e2:	18e3      	adds	r3, r4, r3
 80095e4:	19db      	adds	r3, r3, r7
 80095e6:	781b      	ldrb	r3, [r3, #0]
 80095e8:	3301      	adds	r3, #1
 80095ea:	4a13      	ldr	r2, [pc, #76]	@ (8009638 <CheckCRC+0x18c>)
 80095ec:	4913      	ldr	r1, [pc, #76]	@ (800963c <CheckCRC+0x190>)
 80095ee:	2001      	movs	r0, #1
 80095f0:	f002 f894 	bl	800b71c <CreateLine>
      return false;
 80095f4:	2300      	movs	r3, #0
 80095f6:	46b5      	mov	sp, r6
 80095f8:	e019      	b.n	800962e <CheckCRC+0x182>
 80095fa:	46b5      	mov	sp, r6
  for (uint8_t i = 0; i < dataLength; i += segmentSize) {
 80095fc:	2217      	movs	r2, #23
 80095fe:	2320      	movs	r3, #32
 8009600:	18d3      	adds	r3, r2, r3
 8009602:	19db      	adds	r3, r3, r7
 8009604:	2120      	movs	r1, #32
 8009606:	1852      	adds	r2, r2, r1
 8009608:	19d1      	adds	r1, r2, r7
 800960a:	2222      	movs	r2, #34	@ 0x22
 800960c:	18ba      	adds	r2, r7, r2
 800960e:	7809      	ldrb	r1, [r1, #0]
 8009610:	7812      	ldrb	r2, [r2, #0]
 8009612:	188a      	adds	r2, r1, r2
 8009614:	701a      	strb	r2, [r3, #0]
 8009616:	2317      	movs	r3, #23
 8009618:	2220      	movs	r2, #32
 800961a:	189b      	adds	r3, r3, r2
 800961c:	19da      	adds	r2, r3, r7
 800961e:	2323      	movs	r3, #35	@ 0x23
 8009620:	18fb      	adds	r3, r7, r3
 8009622:	7812      	ldrb	r2, [r2, #0]
 8009624:	781b      	ldrb	r3, [r3, #0]
 8009626:	429a      	cmp	r2, r3
 8009628:	d200      	bcs.n	800962c <CheckCRC+0x180>
 800962a:	e754      	b.n	80094d6 <CheckCRC+0x2a>
    }
  }
  return true;
 800962c:	2301      	movs	r3, #1
}
 800962e:	0018      	movs	r0, r3
 8009630:	46bd      	mov	sp, r7
 8009632:	b00f      	add	sp, #60	@ 0x3c
 8009634:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8009636:	46c0      	nop			@ (mov r8, r8)
 8009638:	08020324 	.word	0x08020324
 800963c:	08020250 	.word	0x08020250

08009640 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t *data, uint8_t length) {
 8009640:	b580      	push	{r7, lr}
 8009642:	b084      	sub	sp, #16
 8009644:	af00      	add	r7, sp, #0
 8009646:	6078      	str	r0, [r7, #4]
 8009648:	000a      	movs	r2, r1
 800964a:	1cfb      	adds	r3, r7, #3
 800964c:	701a      	strb	r2, [r3, #0]
  uint8_t crc = SGP_CRC_INIT_VALUE;
 800964e:	230f      	movs	r3, #15
 8009650:	18fb      	adds	r3, r7, r3
 8009652:	22ff      	movs	r2, #255	@ 0xff
 8009654:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 8009656:	230e      	movs	r3, #14
 8009658:	18fb      	adds	r3, r7, r3
 800965a:	2200      	movs	r2, #0
 800965c:	701a      	strb	r2, [r3, #0]
 800965e:	e037      	b.n	80096d0 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 8009660:	230e      	movs	r3, #14
 8009662:	18fb      	adds	r3, r7, r3
 8009664:	781b      	ldrb	r3, [r3, #0]
 8009666:	687a      	ldr	r2, [r7, #4]
 8009668:	18d3      	adds	r3, r2, r3
 800966a:	7819      	ldrb	r1, [r3, #0]
 800966c:	220f      	movs	r2, #15
 800966e:	18bb      	adds	r3, r7, r2
 8009670:	18ba      	adds	r2, r7, r2
 8009672:	7812      	ldrb	r2, [r2, #0]
 8009674:	404a      	eors	r2, r1
 8009676:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 8009678:	230d      	movs	r3, #13
 800967a:	18fb      	adds	r3, r7, r3
 800967c:	2200      	movs	r2, #0
 800967e:	701a      	strb	r2, [r3, #0]
 8009680:	e01b      	b.n	80096ba <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & SGP_CRC_MSB_MASK) {
 8009682:	210f      	movs	r1, #15
 8009684:	187b      	adds	r3, r7, r1
 8009686:	781b      	ldrb	r3, [r3, #0]
 8009688:	b25b      	sxtb	r3, r3
 800968a:	2b00      	cmp	r3, #0
 800968c:	da09      	bge.n	80096a2 <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ SGP_CRC_POLYNOMIAL;
 800968e:	187b      	adds	r3, r7, r1
 8009690:	781b      	ldrb	r3, [r3, #0]
 8009692:	005b      	lsls	r3, r3, #1
 8009694:	b25b      	sxtb	r3, r3
 8009696:	2231      	movs	r2, #49	@ 0x31
 8009698:	4053      	eors	r3, r2
 800969a:	b25a      	sxtb	r2, r3
 800969c:	187b      	adds	r3, r7, r1
 800969e:	701a      	strb	r2, [r3, #0]
 80096a0:	e005      	b.n	80096ae <CalculateCRC+0x6e>
      } else {
        crc <<= 1;
 80096a2:	230f      	movs	r3, #15
 80096a4:	18fa      	adds	r2, r7, r3
 80096a6:	18fb      	adds	r3, r7, r3
 80096a8:	781b      	ldrb	r3, [r3, #0]
 80096aa:	18db      	adds	r3, r3, r3
 80096ac:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 80096ae:	210d      	movs	r1, #13
 80096b0:	187b      	adds	r3, r7, r1
 80096b2:	781a      	ldrb	r2, [r3, #0]
 80096b4:	187b      	adds	r3, r7, r1
 80096b6:	3201      	adds	r2, #1
 80096b8:	701a      	strb	r2, [r3, #0]
 80096ba:	230d      	movs	r3, #13
 80096bc:	18fb      	adds	r3, r7, r3
 80096be:	781b      	ldrb	r3, [r3, #0]
 80096c0:	2b07      	cmp	r3, #7
 80096c2:	d9de      	bls.n	8009682 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 80096c4:	210e      	movs	r1, #14
 80096c6:	187b      	adds	r3, r7, r1
 80096c8:	781a      	ldrb	r2, [r3, #0]
 80096ca:	187b      	adds	r3, r7, r1
 80096cc:	3201      	adds	r2, #1
 80096ce:	701a      	strb	r2, [r3, #0]
 80096d0:	230e      	movs	r3, #14
 80096d2:	18fa      	adds	r2, r7, r3
 80096d4:	1cfb      	adds	r3, r7, #3
 80096d6:	7812      	ldrb	r2, [r2, #0]
 80096d8:	781b      	ldrb	r3, [r3, #0]
 80096da:	429a      	cmp	r2, r3
 80096dc:	d3c0      	bcc.n	8009660 <CalculateCRC+0x20>
      }
    }
  }
  //  Info("SGP_CRC calculated value: 0x%X", crc);
  return crc;
 80096de:	230f      	movs	r3, #15
 80096e0:	18fb      	adds	r3, r7, r3
 80096e2:	781b      	ldrb	r3, [r3, #0]
}
 80096e4:	0018      	movs	r0, r3
 80096e6:	46bd      	mov	sp, r7
 80096e8:	b004      	add	sp, #16
 80096ea:	bd80      	pop	{r7, pc}

080096ec <SGP_GetHT>:

void SGP_GetHT(float* temperature, float* humidity){
 80096ec:	b580      	push	{r7, lr}
 80096ee:	b084      	sub	sp, #16
 80096f0:	af00      	add	r7, sp, #0
 80096f2:	6078      	str	r0, [r7, #4]
 80096f4:	6039      	str	r1, [r7, #0]
  uint8_t humBuf[2];
  uint8_t tempBuf[2];
  SGP_Temp = (uint16_t)(((*temperature+45.0f)/175.0f)*(float)0xFFFF);
 80096f6:	687b      	ldr	r3, [r7, #4]
 80096f8:	681b      	ldr	r3, [r3, #0]
 80096fa:	4936      	ldr	r1, [pc, #216]	@ (80097d4 <SGP_GetHT+0xe8>)
 80096fc:	1c18      	adds	r0, r3, #0
 80096fe:	f7f7 f8df 	bl	80008c0 <__aeabi_fadd>
 8009702:	1c03      	adds	r3, r0, #0
 8009704:	4934      	ldr	r1, [pc, #208]	@ (80097d8 <SGP_GetHT+0xec>)
 8009706:	1c18      	adds	r0, r3, #0
 8009708:	f7f7 fa64 	bl	8000bd4 <__aeabi_fdiv>
 800970c:	1c03      	adds	r3, r0, #0
 800970e:	4933      	ldr	r1, [pc, #204]	@ (80097dc <SGP_GetHT+0xf0>)
 8009710:	1c18      	adds	r0, r3, #0
 8009712:	f7f7 fc45 	bl	8000fa0 <__aeabi_fmul>
 8009716:	1c03      	adds	r3, r0, #0
 8009718:	1c18      	adds	r0, r3, #0
 800971a:	f7f6 ff7f 	bl	800061c <__aeabi_f2uiz>
 800971e:	0003      	movs	r3, r0
 8009720:	b29a      	uxth	r2, r3
 8009722:	4b2f      	ldr	r3, [pc, #188]	@ (80097e0 <SGP_GetHT+0xf4>)
 8009724:	801a      	strh	r2, [r3, #0]
  SGP_Hum = ((*humidity/100.0f)*(float)0xFFFF);
 8009726:	683b      	ldr	r3, [r7, #0]
 8009728:	681b      	ldr	r3, [r3, #0]
 800972a:	492e      	ldr	r1, [pc, #184]	@ (80097e4 <SGP_GetHT+0xf8>)
 800972c:	1c18      	adds	r0, r3, #0
 800972e:	f7f7 fa51 	bl	8000bd4 <__aeabi_fdiv>
 8009732:	1c03      	adds	r3, r0, #0
 8009734:	4929      	ldr	r1, [pc, #164]	@ (80097dc <SGP_GetHT+0xf0>)
 8009736:	1c18      	adds	r0, r3, #0
 8009738:	f7f7 fc32 	bl	8000fa0 <__aeabi_fmul>
 800973c:	1c03      	adds	r3, r0, #0
 800973e:	1c18      	adds	r0, r3, #0
 8009740:	f7f6 ff6c 	bl	800061c <__aeabi_f2uiz>
 8009744:	0003      	movs	r3, r0
 8009746:	b29a      	uxth	r2, r3
 8009748:	4b27      	ldr	r3, [pc, #156]	@ (80097e8 <SGP_GetHT+0xfc>)
 800974a:	801a      	strh	r2, [r3, #0]
  humBuf[0] = MeasureRawWithCompBuffer[2] = SGP_Hum >> 8;
 800974c:	4b26      	ldr	r3, [pc, #152]	@ (80097e8 <SGP_GetHT+0xfc>)
 800974e:	881b      	ldrh	r3, [r3, #0]
 8009750:	0a1b      	lsrs	r3, r3, #8
 8009752:	b29b      	uxth	r3, r3
 8009754:	b2da      	uxtb	r2, r3
 8009756:	4b25      	ldr	r3, [pc, #148]	@ (80097ec <SGP_GetHT+0x100>)
 8009758:	709a      	strb	r2, [r3, #2]
 800975a:	4b24      	ldr	r3, [pc, #144]	@ (80097ec <SGP_GetHT+0x100>)
 800975c:	789a      	ldrb	r2, [r3, #2]
 800975e:	210c      	movs	r1, #12
 8009760:	187b      	adds	r3, r7, r1
 8009762:	701a      	strb	r2, [r3, #0]
  humBuf[1] = MeasureRawWithCompBuffer[3] = SGP_Hum;
 8009764:	4b20      	ldr	r3, [pc, #128]	@ (80097e8 <SGP_GetHT+0xfc>)
 8009766:	881b      	ldrh	r3, [r3, #0]
 8009768:	b2da      	uxtb	r2, r3
 800976a:	4b20      	ldr	r3, [pc, #128]	@ (80097ec <SGP_GetHT+0x100>)
 800976c:	70da      	strb	r2, [r3, #3]
 800976e:	4b1f      	ldr	r3, [pc, #124]	@ (80097ec <SGP_GetHT+0x100>)
 8009770:	78da      	ldrb	r2, [r3, #3]
 8009772:	187b      	adds	r3, r7, r1
 8009774:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[4] = CalculateCRC(humBuf, 2);
 8009776:	187b      	adds	r3, r7, r1
 8009778:	2102      	movs	r1, #2
 800977a:	0018      	movs	r0, r3
 800977c:	f7ff ff60 	bl	8009640 <CalculateCRC>
 8009780:	0003      	movs	r3, r0
 8009782:	001a      	movs	r2, r3
 8009784:	4b19      	ldr	r3, [pc, #100]	@ (80097ec <SGP_GetHT+0x100>)
 8009786:	711a      	strb	r2, [r3, #4]
  tempBuf[0] = MeasureRawWithCompBuffer[5] = SGP_Temp >> 8;
 8009788:	4b15      	ldr	r3, [pc, #84]	@ (80097e0 <SGP_GetHT+0xf4>)
 800978a:	881b      	ldrh	r3, [r3, #0]
 800978c:	0a1b      	lsrs	r3, r3, #8
 800978e:	b29b      	uxth	r3, r3
 8009790:	b2da      	uxtb	r2, r3
 8009792:	4b16      	ldr	r3, [pc, #88]	@ (80097ec <SGP_GetHT+0x100>)
 8009794:	715a      	strb	r2, [r3, #5]
 8009796:	4b15      	ldr	r3, [pc, #84]	@ (80097ec <SGP_GetHT+0x100>)
 8009798:	795a      	ldrb	r2, [r3, #5]
 800979a:	2108      	movs	r1, #8
 800979c:	187b      	adds	r3, r7, r1
 800979e:	701a      	strb	r2, [r3, #0]
  tempBuf[1] = MeasureRawWithCompBuffer[6] = SGP_Temp;
 80097a0:	4b0f      	ldr	r3, [pc, #60]	@ (80097e0 <SGP_GetHT+0xf4>)
 80097a2:	881b      	ldrh	r3, [r3, #0]
 80097a4:	b2da      	uxtb	r2, r3
 80097a6:	4b11      	ldr	r3, [pc, #68]	@ (80097ec <SGP_GetHT+0x100>)
 80097a8:	719a      	strb	r2, [r3, #6]
 80097aa:	4b10      	ldr	r3, [pc, #64]	@ (80097ec <SGP_GetHT+0x100>)
 80097ac:	799a      	ldrb	r2, [r3, #6]
 80097ae:	187b      	adds	r3, r7, r1
 80097b0:	705a      	strb	r2, [r3, #1]
  MeasureRawWithCompBuffer[7] = CalculateCRC(tempBuf, 2);
 80097b2:	187b      	adds	r3, r7, r1
 80097b4:	2102      	movs	r1, #2
 80097b6:	0018      	movs	r0, r3
 80097b8:	f7ff ff42 	bl	8009640 <CalculateCRC>
 80097bc:	0003      	movs	r3, r0
 80097be:	001a      	movs	r2, r3
 80097c0:	4b0a      	ldr	r3, [pc, #40]	@ (80097ec <SGP_GetHT+0x100>)
 80097c2:	71da      	strb	r2, [r3, #7]
  HT_MeasurementReceived = true;
 80097c4:	4b0a      	ldr	r3, [pc, #40]	@ (80097f0 <SGP_GetHT+0x104>)
 80097c6:	2201      	movs	r2, #1
 80097c8:	701a      	strb	r2, [r3, #0]
}
 80097ca:	46c0      	nop			@ (mov r8, r8)
 80097cc:	46bd      	mov	sp, r7
 80097ce:	b004      	add	sp, #16
 80097d0:	bd80      	pop	{r7, pc}
 80097d2:	46c0      	nop			@ (mov r8, r8)
 80097d4:	42340000 	.word	0x42340000
 80097d8:	432f0000 	.word	0x432f0000
 80097dc:	477fff00 	.word	0x477fff00
 80097e0:	20001276 	.word	0x20001276
 80097e4:	42c80000 	.word	0x42c80000
 80097e8:	20001274 	.word	0x20001274
 80097ec:	20000094 	.word	0x20000094
 80097f0:	20001278 	.word	0x20001278

080097f4 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80097f4:	b580      	push	{r7, lr}
 80097f6:	b082      	sub	sp, #8
 80097f8:	af00      	add	r7, sp, #0
 80097fa:	0002      	movs	r2, r0
 80097fc:	1dfb      	adds	r3, r7, #7
 80097fe:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8009800:	1dfb      	adds	r3, r7, #7
 8009802:	781b      	ldrb	r3, [r3, #0]
 8009804:	2b7f      	cmp	r3, #127	@ 0x7f
 8009806:	d809      	bhi.n	800981c <__NVIC_EnableIRQ+0x28>
  {
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8009808:	1dfb      	adds	r3, r7, #7
 800980a:	781b      	ldrb	r3, [r3, #0]
 800980c:	001a      	movs	r2, r3
 800980e:	231f      	movs	r3, #31
 8009810:	401a      	ands	r2, r3
 8009812:	4b04      	ldr	r3, [pc, #16]	@ (8009824 <__NVIC_EnableIRQ+0x30>)
 8009814:	2101      	movs	r1, #1
 8009816:	4091      	lsls	r1, r2
 8009818:	000a      	movs	r2, r1
 800981a:	601a      	str	r2, [r3, #0]
  }
}
 800981c:	46c0      	nop			@ (mov r8, r8)
 800981e:	46bd      	mov	sp, r7
 8009820:	b002      	add	sp, #8
 8009822:	bd80      	pop	{r7, pc}
 8009824:	e000e100 	.word	0xe000e100

08009828 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8009828:	b580      	push	{r7, lr}
 800982a:	b082      	sub	sp, #8
 800982c:	af00      	add	r7, sp, #0
 800982e:	0002      	movs	r2, r0
 8009830:	1dfb      	adds	r3, r7, #7
 8009832:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 8009834:	1dfb      	adds	r3, r7, #7
 8009836:	781b      	ldrb	r3, [r3, #0]
 8009838:	2b7f      	cmp	r3, #127	@ 0x7f
 800983a:	d810      	bhi.n	800985e <__NVIC_DisableIRQ+0x36>
  {
    NVIC->ICER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800983c:	1dfb      	adds	r3, r7, #7
 800983e:	781b      	ldrb	r3, [r3, #0]
 8009840:	001a      	movs	r2, r3
 8009842:	231f      	movs	r3, #31
 8009844:	4013      	ands	r3, r2
 8009846:	4908      	ldr	r1, [pc, #32]	@ (8009868 <__NVIC_DisableIRQ+0x40>)
 8009848:	2201      	movs	r2, #1
 800984a:	409a      	lsls	r2, r3
 800984c:	0013      	movs	r3, r2
 800984e:	2280      	movs	r2, #128	@ 0x80
 8009850:	508b      	str	r3, [r1, r2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8009852:	f3bf 8f4f 	dsb	sy
}
 8009856:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 8009858:	f3bf 8f6f 	isb	sy
}
 800985c:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
  }
}
 800985e:	46c0      	nop			@ (mov r8, r8)
 8009860:	46bd      	mov	sp, r7
 8009862:	b002      	add	sp, #8
 8009864:	bd80      	pop	{r7, pc}
 8009866:	46c0      	nop			@ (mov r8, r8)
 8009868:	e000e100 	.word	0xe000e100

0800986c <getSoundData>:
// Note that disabling the interrupt prevents the possibility of corrupted data
// but does not (under non-error conditions) cause loss of sound data because the
// DMA buffer is still being filled with I2S data.
// Return false if no data available.
bool getSoundData(SoundData_t * data, bool getSPLdata, bool getMaxAmpData)
{
 800986c:	b5b0      	push	{r4, r5, r7, lr}
 800986e:	b088      	sub	sp, #32
 8009870:	af02      	add	r7, sp, #8
 8009872:	6078      	str	r0, [r7, #4]
 8009874:	0008      	movs	r0, r1
 8009876:	0011      	movs	r1, r2
 8009878:	1cfb      	adds	r3, r7, #3
 800987a:	1c02      	adds	r2, r0, #0
 800987c:	701a      	strb	r2, [r3, #0]
 800987e:	1cbb      	adds	r3, r7, #2
 8009880:	1c0a      	adds	r2, r1, #0
 8009882:	701a      	strb	r2, [r3, #0]
//	print("micEnabled:  %d, SPLcalcComplete: %d\r\n", micEnabled, SPLcalcComplete);
  if ((!micEnabled) || (!SPLcalcComplete))
 8009884:	4b5b      	ldr	r3, [pc, #364]	@ (80099f4 <getSoundData+0x188>)
 8009886:	781b      	ldrb	r3, [r3, #0]
 8009888:	b2db      	uxtb	r3, r3
 800988a:	2201      	movs	r2, #1
 800988c:	4053      	eors	r3, r2
 800988e:	b2db      	uxtb	r3, r3
 8009890:	2b00      	cmp	r3, #0
 8009892:	d107      	bne.n	80098a4 <getSoundData+0x38>
 8009894:	4b58      	ldr	r3, [pc, #352]	@ (80099f8 <getSoundData+0x18c>)
 8009896:	781b      	ldrb	r3, [r3, #0]
 8009898:	b2db      	uxtb	r3, r3
 800989a:	2201      	movs	r2, #1
 800989c:	4053      	eors	r3, r2
 800989e:	b2db      	uxtb	r3, r3
 80098a0:	2b00      	cmp	r3, #0
 80098a2:	d001      	beq.n	80098a8 <getSoundData+0x3c>
    {
        return false;
 80098a4:	2300      	movs	r3, #0
 80098a6:	e0a0      	b.n	80099ea <getSoundData+0x17e>
    }
//	Info("getSoundData: DMAinterruptEnabled: %d\r\n", DMAinterruptEnabled);
    if (DMAinterruptEnabled)
 80098a8:	4b54      	ldr	r3, [pc, #336]	@ (80099fc <getSoundData+0x190>)
 80098aa:	781b      	ldrb	r3, [r3, #0]
 80098ac:	b2db      	uxtb	r3, r3
 80098ae:	2b00      	cmp	r3, #0
 80098b0:	d005      	beq.n	80098be <getSoundData+0x52>
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 80098b2:	4b53      	ldr	r3, [pc, #332]	@ (8009a00 <getSoundData+0x194>)
 80098b4:	781b      	ldrb	r3, [r3, #0]
 80098b6:	b25b      	sxtb	r3, r3
 80098b8:	0018      	movs	r0, r3
 80098ba:	f7ff ffb5 	bl	8009828 <__NVIC_DisableIRQ>
  __ASM volatile ("dsb 0xF":::"memory");
 80098be:	f3bf 8f4f 	dsb	sy
}
 80098c2:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("isb 0xF":::"memory");
 80098c4:	f3bf 8f6f 	isb	sy
}
 80098c8:	46c0      	nop			@ (mov r8, r8)
    __DSB();
    __ISB();
    // At this point, we know that no DMA ISR is in progress and that it will
    // not trigger until re-enabled.

    if (getSPLdata)
 80098ca:	1cfb      	adds	r3, r7, #3
 80098cc:	781b      	ldrb	r3, [r3, #0]
 80098ce:	2b00      	cmp	r3, #0
 80098d0:	d04c      	beq.n	800996c <getSoundData+0x100>
    {
        if (spl_sum_count == 0)
 80098d2:	4b4c      	ldr	r3, [pc, #304]	@ (8009a04 <getSoundData+0x198>)
 80098d4:	681b      	ldr	r3, [r3, #0]
 80098d6:	2b00      	cmp	r3, #0
 80098d8:	d11b      	bne.n	8009912 <getSoundData+0xa6>
        {
            // No data: prevent divide by zero
            data->SPL_dBA_int = 0;
 80098da:	687b      	ldr	r3, [r7, #4]
 80098dc:	2200      	movs	r2, #0
 80098de:	701a      	strb	r2, [r3, #0]
            data->SPL_dBA_fr_1dp = 0;
 80098e0:	687b      	ldr	r3, [r7, #4]
 80098e2:	2200      	movs	r2, #0
 80098e4:	705a      	strb	r2, [r3, #1]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 80098e6:	2300      	movs	r3, #0
 80098e8:	617b      	str	r3, [r7, #20]
 80098ea:	e00e      	b.n	800990a <getSoundData+0x9e>
            {
                data->SPL_bands_dB_int[i] = 0;
 80098ec:	687a      	ldr	r2, [r7, #4]
 80098ee:	697b      	ldr	r3, [r7, #20]
 80098f0:	18d3      	adds	r3, r2, r3
 80098f2:	3302      	adds	r3, #2
 80098f4:	2200      	movs	r2, #0
 80098f6:	701a      	strb	r2, [r3, #0]
                data->SPL_bands_dB_fr_1dp[i] = 0;
 80098f8:	687a      	ldr	r2, [r7, #4]
 80098fa:	697b      	ldr	r3, [r7, #20]
 80098fc:	18d3      	adds	r3, r2, r3
 80098fe:	3308      	adds	r3, #8
 8009900:	2200      	movs	r2, #0
 8009902:	701a      	strb	r2, [r3, #0]
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8009904:	697b      	ldr	r3, [r7, #20]
 8009906:	3301      	adds	r3, #1
 8009908:	617b      	str	r3, [r7, #20]
 800990a:	697b      	ldr	r3, [r7, #20]
 800990c:	2b05      	cmp	r3, #5
 800990e:	d9ed      	bls.n	80098ec <getSoundData+0x80>
 8009910:	e02c      	b.n	800996c <getSoundData+0x100>
            }
        }
        else
        {
            sumToIntAverage(&(data->SPL_dBA_int), &(data->SPL_dBA_fr_1dp),
 8009912:	6878      	ldr	r0, [r7, #4]
 8009914:	687b      	ldr	r3, [r7, #4]
 8009916:	1c59      	adds	r1, r3, #1
 8009918:	4b3b      	ldr	r3, [pc, #236]	@ (8009a08 <getSoundData+0x19c>)
 800991a:	681a      	ldr	r2, [r3, #0]
 800991c:	4b3b      	ldr	r3, [pc, #236]	@ (8009a0c <getSoundData+0x1a0>)
 800991e:	681c      	ldr	r4, [r3, #0]
 8009920:	4b38      	ldr	r3, [pc, #224]	@ (8009a04 <getSoundData+0x198>)
 8009922:	681b      	ldr	r3, [r3, #0]
 8009924:	9300      	str	r3, [sp, #0]
 8009926:	0023      	movs	r3, r4
 8009928:	f000 fde8 	bl	800a4fc <sumToIntAverage>
                            spl_int_sum, spl_frac1dp_sum, spl_sum_count);

            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800992c:	2300      	movs	r3, #0
 800992e:	613b      	str	r3, [r7, #16]
 8009930:	e019      	b.n	8009966 <getSoundData+0xfa>
            {
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 8009932:	687a      	ldr	r2, [r7, #4]
 8009934:	693b      	ldr	r3, [r7, #16]
 8009936:	18d3      	adds	r3, r2, r3
 8009938:	1c98      	adds	r0, r3, #2
 800993a:	693b      	ldr	r3, [r7, #16]
 800993c:	3308      	adds	r3, #8
 800993e:	687a      	ldr	r2, [r7, #4]
 8009940:	18d1      	adds	r1, r2, r3
                                &(data->SPL_bands_dB_fr_1dp[i]), band_spl_int_sum[i],
 8009942:	4b33      	ldr	r3, [pc, #204]	@ (8009a10 <getSoundData+0x1a4>)
 8009944:	693a      	ldr	r2, [r7, #16]
 8009946:	0092      	lsls	r2, r2, #2
 8009948:	58d4      	ldr	r4, [r2, r3]
                                band_spl_frac1dp_sum[i], spl_sum_count);
 800994a:	4b32      	ldr	r3, [pc, #200]	@ (8009a14 <getSoundData+0x1a8>)
 800994c:	693a      	ldr	r2, [r7, #16]
 800994e:	0092      	lsls	r2, r2, #2
 8009950:	58d2      	ldr	r2, [r2, r3]
                sumToIntAverage(&(data->SPL_bands_dB_int[i]),
 8009952:	4b2c      	ldr	r3, [pc, #176]	@ (8009a04 <getSoundData+0x198>)
 8009954:	681b      	ldr	r3, [r3, #0]
 8009956:	9300      	str	r3, [sp, #0]
 8009958:	0013      	movs	r3, r2
 800995a:	0022      	movs	r2, r4
 800995c:	f000 fdce 	bl	800a4fc <sumToIntAverage>
            for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8009960:	693b      	ldr	r3, [r7, #16]
 8009962:	3301      	adds	r3, #1
 8009964:	613b      	str	r3, [r7, #16]
 8009966:	693b      	ldr	r3, [r7, #16]
 8009968:	2b05      	cmp	r3, #5
 800996a:	d9e2      	bls.n	8009932 <getSoundData+0xc6>
            }
        }
    }

    if (getMaxAmpData)
 800996c:	1cbb      	adds	r3, r7, #2
 800996e:	781b      	ldrb	r3, [r3, #0]
 8009970:	2b00      	cmp	r3, #0
 8009972:	d028      	beq.n	80099c6 <getSoundData+0x15a>
    {
        uint16_t intPart = 0;
 8009974:	240e      	movs	r4, #14
 8009976:	193b      	adds	r3, r7, r4
 8009978:	2200      	movs	r2, #0
 800997a:	801a      	strh	r2, [r3, #0]
        uint8_t fracPart = 0;
 800997c:	250d      	movs	r5, #13
 800997e:	197b      	adds	r3, r7, r5
 8009980:	2200      	movs	r2, #0
 8009982:	701a      	strb	r2, [r3, #0]
        amplitudeDN_to_mPa(maximumAmplitude, ik_mPa, &intPart, &fracPart);
 8009984:	4b24      	ldr	r3, [pc, #144]	@ (8009a18 <getSoundData+0x1ac>)
 8009986:	6818      	ldr	r0, [r3, #0]
 8009988:	4924      	ldr	r1, [pc, #144]	@ (8009a1c <getSoundData+0x1b0>)
 800998a:	197b      	adds	r3, r7, r5
 800998c:	193a      	adds	r2, r7, r4
 800998e:	f000 fe59 	bl	800a644 <amplitudeDN_to_mPa>
        data->peak_amp_mPa_int = intPart;
 8009992:	193b      	adds	r3, r7, r4
 8009994:	881a      	ldrh	r2, [r3, #0]
 8009996:	687b      	ldr	r3, [r7, #4]
 8009998:	21ff      	movs	r1, #255	@ 0xff
 800999a:	4011      	ands	r1, r2
 800999c:	000c      	movs	r4, r1
 800999e:	7b99      	ldrb	r1, [r3, #14]
 80099a0:	2000      	movs	r0, #0
 80099a2:	4001      	ands	r1, r0
 80099a4:	1c08      	adds	r0, r1, #0
 80099a6:	1c21      	adds	r1, r4, #0
 80099a8:	4301      	orrs	r1, r0
 80099aa:	7399      	strb	r1, [r3, #14]
 80099ac:	0a12      	lsrs	r2, r2, #8
 80099ae:	b290      	uxth	r0, r2
 80099b0:	7bda      	ldrb	r2, [r3, #15]
 80099b2:	2100      	movs	r1, #0
 80099b4:	400a      	ands	r2, r1
 80099b6:	1c11      	adds	r1, r2, #0
 80099b8:	1c02      	adds	r2, r0, #0
 80099ba:	430a      	orrs	r2, r1
 80099bc:	73da      	strb	r2, [r3, #15]
        data->peak_amp_mPa_fr_2dp = fracPart;
 80099be:	197b      	adds	r3, r7, r5
 80099c0:	781a      	ldrb	r2, [r3, #0]
 80099c2:	687b      	ldr	r3, [r7, #4]
 80099c4:	741a      	strb	r2, [r3, #16]
    }

    data->stable = micSettlingComplete();
 80099c6:	f000 f86f 	bl	8009aa8 <micSettlingComplete>
 80099ca:	0003      	movs	r3, r0
 80099cc:	001a      	movs	r2, r3
 80099ce:	687b      	ldr	r3, [r7, #4]
 80099d0:	745a      	strb	r2, [r3, #17]

    if (DMAinterruptEnabled)
 80099d2:	4b0a      	ldr	r3, [pc, #40]	@ (80099fc <getSoundData+0x190>)
 80099d4:	781b      	ldrb	r3, [r3, #0]
 80099d6:	b2db      	uxtb	r3, r3
 80099d8:	2b00      	cmp	r3, #0
 80099da:	d005      	beq.n	80099e8 <getSoundData+0x17c>
    {
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 80099dc:	4b08      	ldr	r3, [pc, #32]	@ (8009a00 <getSoundData+0x194>)
 80099de:	781b      	ldrb	r3, [r3, #0]
 80099e0:	b25b      	sxtb	r3, r3
 80099e2:	0018      	movs	r0, r3
 80099e4:	f7ff ff06 	bl	80097f4 <__NVIC_EnableIRQ>
    }
    // NOTE that any pending DMA interrupt will now fire, but will
    // take ~2 cycles to start
    return true;
 80099e8:	2301      	movs	r3, #1
}
 80099ea:	0018      	movs	r0, r3
 80099ec:	46bd      	mov	sp, r7
 80099ee:	b006      	add	sp, #24
 80099f0:	bdb0      	pop	{r4, r5, r7, pc}
 80099f2:	46c0      	nop			@ (mov r8, r8)
 80099f4:	20001281 	.word	0x20001281
 80099f8:	20001284 	.word	0x20001284
 80099fc:	20001283 	.word	0x20001283
 8009a00:	20001cd4 	.word	0x20001cd4
 8009a04:	20001d10 	.word	0x20001d10
 8009a08:	20001cd8 	.word	0x20001cd8
 8009a0c:	20001cdc 	.word	0x20001cdc
 8009a10:	20001ce0 	.word	0x20001ce0
 8009a14:	20001cf8 	.word	0x20001cf8
 8009a18:	2000128c 	.word	0x2000128c
 8009a1c:	3b5c7333 	.word	0x3b5c7333

08009a20 <soundInit>:
//               bool (*tmrInit)(TIM_HandleTypeDef **), IRQn_Type DMAChIRQn)
bool soundInit(DMA_HandleTypeDef* h_hdma_spi2_rx,
               I2S_HandleTypeDef* h_hi2s2,
               TIM_HandleTypeDef* h_htim6,
               IRQn_Type DMAChIRQn)
{
 8009a20:	b580      	push	{r7, lr}
 8009a22:	b084      	sub	sp, #16
 8009a24:	af00      	add	r7, sp, #0
 8009a26:	60f8      	str	r0, [r7, #12]
 8009a28:	60b9      	str	r1, [r7, #8]
 8009a2a:	607a      	str	r2, [r7, #4]
 8009a2c:	001a      	movs	r2, r3
 8009a2e:	1cfb      	adds	r3, r7, #3
 8009a30:	701a      	strb	r2, [r3, #0]
    hi2s2 = h_hi2s2;
 8009a32:	4b09      	ldr	r3, [pc, #36]	@ (8009a58 <soundInit+0x38>)
 8009a34:	68ba      	ldr	r2, [r7, #8]
 8009a36:	601a      	str	r2, [r3, #0]
    htim6 = h_htim6;
 8009a38:	4b08      	ldr	r3, [pc, #32]	@ (8009a5c <soundInit+0x3c>)
 8009a3a:	687a      	ldr	r2, [r7, #4]
 8009a3c:	601a      	str	r2, [r3, #0]
    hdma_spi2_rx = h_hdma_spi2_rx;
 8009a3e:	4b08      	ldr	r3, [pc, #32]	@ (8009a60 <soundInit+0x40>)
 8009a40:	68fa      	ldr	r2, [r7, #12]
 8009a42:	601a      	str	r2, [r3, #0]
    DMA_Channel_IRQn = DMA_Channel_IRQn;
 8009a44:	4b07      	ldr	r3, [pc, #28]	@ (8009a64 <soundInit+0x44>)
 8009a46:	2200      	movs	r2, #0
 8009a48:	569a      	ldrsb	r2, [r3, r2]
 8009a4a:	4b06      	ldr	r3, [pc, #24]	@ (8009a64 <soundInit+0x44>)
 8009a4c:	701a      	strb	r2, [r3, #0]

    return true;
 8009a4e:	2301      	movs	r3, #1
}
 8009a50:	0018      	movs	r0, r3
 8009a52:	46bd      	mov	sp, r7
 8009a54:	b004      	add	sp, #16
 8009a56:	bd80      	pop	{r7, pc}
 8009a58:	20001ccc 	.word	0x20001ccc
 8009a5c:	20001cc8 	.word	0x20001cc8
 8009a60:	20001cd0 	.word	0x20001cd0
 8009a64:	20001cd4 	.word	0x20001cd4

08009a68 <clearMaximumAmplitude>:

// Call this from external code to clear the maximum amplitude value.
void clearMaximumAmplitude(void)
{
 8009a68:	b580      	push	{r7, lr}
 8009a6a:	af00      	add	r7, sp, #0
    maximumAmplitude = 0;
 8009a6c:	4b02      	ldr	r3, [pc, #8]	@ (8009a78 <clearMaximumAmplitude+0x10>)
 8009a6e:	2200      	movs	r2, #0
 8009a70:	601a      	str	r2, [r3, #0]
}
 8009a72:	46c0      	nop			@ (mov r8, r8)
 8009a74:	46bd      	mov	sp, r7
 8009a76:	bd80      	pop	{r7, pc}
 8009a78:	2000128c 	.word	0x2000128c

08009a7c <startMicSettlingPeriod>:
// Prepare a one-shot timer to indicate the short time period during which the
// microphone output is inaccurate after power-on (warmup/settling time).
// This is output with the data for advice only: all functions still operate as
// normal during this period.
static bool startMicSettlingPeriod(void)
{
 8009a7c:	b580      	push	{r7, lr}
 8009a7e:	af00      	add	r7, sp, #0
//  Debug("TMR6 started\r\n");
//  if (htim6 == NULL) {
//    print("htim6 == NULL");
//  }
  __HAL_TIM_SetCounter(htim6, 0);
 8009a80:	4b08      	ldr	r3, [pc, #32]	@ (8009aa4 <startMicSettlingPeriod+0x28>)
 8009a82:	681b      	ldr	r3, [r3, #0]
 8009a84:	681b      	ldr	r3, [r3, #0]
 8009a86:	2200      	movs	r2, #0
 8009a88:	625a      	str	r2, [r3, #36]	@ 0x24
    if (HAL_TIM_Base_Start(htim6) != HAL_OK)
 8009a8a:	4b06      	ldr	r3, [pc, #24]	@ (8009aa4 <startMicSettlingPeriod+0x28>)
 8009a8c:	681b      	ldr	r3, [r3, #0]
 8009a8e:	0018      	movs	r0, r3
 8009a90:	f009 f97e 	bl	8012d90 <HAL_TIM_Base_Start>
 8009a94:	1e03      	subs	r3, r0, #0
 8009a96:	d001      	beq.n	8009a9c <startMicSettlingPeriod+0x20>
    {
        return false;
 8009a98:	2300      	movs	r3, #0
 8009a9a:	e000      	b.n	8009a9e <startMicSettlingPeriod+0x22>
    }
    return true;
 8009a9c:	2301      	movs	r3, #1
}
 8009a9e:	0018      	movs	r0, r3
 8009aa0:	46bd      	mov	sp, r7
 8009aa2:	bd80      	pop	{r7, pc}
 8009aa4:	20001cc8 	.word	0x20001cc8

08009aa8 <micSettlingComplete>:

// See whether the warmup/settling time has finished
bool micSettlingComplete(void)
{
 8009aa8:	b580      	push	{r7, lr}
 8009aaa:	b082      	sub	sp, #8
 8009aac:	af00      	add	r7, sp, #0
//   print("Checking micSettlingComplete\r\n");
    bool complete = __HAL_TIM_GET_FLAG(htim6, TIM_SR_UIF);
 8009aae:	4b0e      	ldr	r3, [pc, #56]	@ (8009ae8 <micSettlingComplete+0x40>)
 8009ab0:	681b      	ldr	r3, [r3, #0]
 8009ab2:	681b      	ldr	r3, [r3, #0]
 8009ab4:	691b      	ldr	r3, [r3, #16]
 8009ab6:	2201      	movs	r2, #1
 8009ab8:	401a      	ands	r2, r3
 8009aba:	1dfb      	adds	r3, r7, #7
 8009abc:	3a01      	subs	r2, #1
 8009abe:	4251      	negs	r1, r2
 8009ac0:	414a      	adcs	r2, r1
 8009ac2:	701a      	strb	r2, [r3, #0]
    if (complete)
 8009ac4:	1dfb      	adds	r3, r7, #7
 8009ac6:	781b      	ldrb	r3, [r3, #0]
 8009ac8:	2b00      	cmp	r3, #0
 8009aca:	d007      	beq.n	8009adc <micSettlingComplete+0x34>
    {
//      Debug("TMR6 expired\r\n");
      HAL_TIM_Base_Stop(htim6);
 8009acc:	4b06      	ldr	r3, [pc, #24]	@ (8009ae8 <micSettlingComplete+0x40>)
 8009ace:	681b      	ldr	r3, [r3, #0]
 8009ad0:	0018      	movs	r0, r3
 8009ad2:	f009 f9a7 	bl	8012e24 <HAL_TIM_Base_Stop>
      DataReady = true;
 8009ad6:	4b05      	ldr	r3, [pc, #20]	@ (8009aec <micSettlingComplete+0x44>)
 8009ad8:	2201      	movs	r2, #1
 8009ada:	701a      	strb	r2, [r3, #0]
//      Info("micSettlingComplete set DataReady to true");
    }
    return complete;
 8009adc:	1dfb      	adds	r3, r7, #7
 8009ade:	781b      	ldrb	r3, [r3, #0]
}
 8009ae0:	0018      	movs	r0, r3
 8009ae2:	46bd      	mov	sp, r7
 8009ae4:	b002      	add	sp, #8
 8009ae6:	bd80      	pop	{r7, pc}
 8009ae8:	20001cc8 	.word	0x20001cc8
 8009aec:	20001280 	.word	0x20001280

08009af0 <enableMicrophone>:

// Enable: starts the I2S clock, warmup timer, and DMA interrupts
// Disable: stops the DMA interrupts and stops I2S clock.
// Return false on failure.
bool enableMicrophone(bool bEnable)
{
 8009af0:	b580      	push	{r7, lr}
 8009af2:	b082      	sub	sp, #8
 8009af4:	af00      	add	r7, sp, #0
 8009af6:	0002      	movs	r2, r0
 8009af8:	1dfb      	adds	r3, r7, #7
 8009afa:	701a      	strb	r2, [r3, #0]
    if (bEnable == micEnabled)
 8009afc:	4b29      	ldr	r3, [pc, #164]	@ (8009ba4 <enableMicrophone+0xb4>)
 8009afe:	781b      	ldrb	r3, [r3, #0]
 8009b00:	b2db      	uxtb	r3, r3
 8009b02:	1dfa      	adds	r2, r7, #7
 8009b04:	7812      	ldrb	r2, [r2, #0]
 8009b06:	429a      	cmp	r2, r3
 8009b08:	d101      	bne.n	8009b0e <enableMicrophone+0x1e>
    {
        return true;
 8009b0a:	2301      	movs	r3, #1
 8009b0c:	e045      	b.n	8009b9a <enableMicrophone+0xaa>
    }
    if (bEnable)
 8009b0e:	1dfb      	adds	r3, r7, #7
 8009b10:	781b      	ldrb	r3, [r3, #0]
 8009b12:	2b00      	cmp	r3, #0
 8009b14:	d025      	beq.n	8009b62 <enableMicrophone+0x72>
    {
        startMicSettlingPeriod();
 8009b16:	f7ff ffb1 	bl	8009a7c <startMicSettlingPeriod>
        if (HAL_I2S_Receive_DMA(hi2s2, (uint16_t *) dmaBuffer, HALF_BUFLEN) != HAL_OK)
 8009b1a:	4b23      	ldr	r3, [pc, #140]	@ (8009ba8 <enableMicrophone+0xb8>)
 8009b1c:	681b      	ldr	r3, [r3, #0]
 8009b1e:	2280      	movs	r2, #128	@ 0x80
 8009b20:	0092      	lsls	r2, r2, #2
 8009b22:	4922      	ldr	r1, [pc, #136]	@ (8009bac <enableMicrophone+0xbc>)
 8009b24:	0018      	movs	r0, r3
 8009b26:	f005 fd13 	bl	800f550 <HAL_I2S_Receive_DMA>
 8009b2a:	1e03      	subs	r3, r0, #0
 8009b2c:	d001      	beq.n	8009b32 <enableMicrophone+0x42>
        {
            return false;
 8009b2e:	2300      	movs	r3, #0
 8009b30:	e033      	b.n	8009b9a <enableMicrophone+0xaa>
        }
        clearMaximumAmplitude();
 8009b32:	f7ff ff99 	bl	8009a68 <clearMaximumAmplitude>
        amplitudeSettlingPeriods = 0;
 8009b36:	4b1e      	ldr	r3, [pc, #120]	@ (8009bb0 <enableMicrophone+0xc0>)
 8009b38:	2200      	movs	r2, #0
 8009b3a:	601a      	str	r2, [r3, #0]
        NVIC_EnableIRQ(DMA_Channel_IRQn);
 8009b3c:	4b1d      	ldr	r3, [pc, #116]	@ (8009bb4 <enableMicrophone+0xc4>)
 8009b3e:	781b      	ldrb	r3, [r3, #0]
 8009b40:	b25b      	sxtb	r3, r3
 8009b42:	0018      	movs	r0, r3
 8009b44:	f7ff fe56 	bl	80097f4 <__NVIC_EnableIRQ>
        DMAinterruptEnabled = true;
 8009b48:	4b1b      	ldr	r3, [pc, #108]	@ (8009bb8 <enableMicrophone+0xc8>)
 8009b4a:	2201      	movs	r2, #1
 8009b4c:	701a      	strb	r2, [r3, #0]
        micEnabled = true;
 8009b4e:	4b15      	ldr	r3, [pc, #84]	@ (8009ba4 <enableMicrophone+0xb4>)
 8009b50:	2201      	movs	r2, #1
 8009b52:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 8009b54:	4b19      	ldr	r3, [pc, #100]	@ (8009bbc <enableMicrophone+0xcc>)
 8009b56:	2200      	movs	r2, #0
 8009b58:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 8009b5a:	4b19      	ldr	r3, [pc, #100]	@ (8009bc0 <enableMicrophone+0xd0>)
 8009b5c:	2200      	movs	r2, #0
 8009b5e:	701a      	strb	r2, [r3, #0]
 8009b60:	e01a      	b.n	8009b98 <enableMicrophone+0xa8>
    }
    else
    {
        NVIC_DisableIRQ(DMA_Channel_IRQn);
 8009b62:	4b14      	ldr	r3, [pc, #80]	@ (8009bb4 <enableMicrophone+0xc4>)
 8009b64:	781b      	ldrb	r3, [r3, #0]
 8009b66:	b25b      	sxtb	r3, r3
 8009b68:	0018      	movs	r0, r3
 8009b6a:	f7ff fe5d 	bl	8009828 <__NVIC_DisableIRQ>
        DMAinterruptEnabled = false;
 8009b6e:	4b12      	ldr	r3, [pc, #72]	@ (8009bb8 <enableMicrophone+0xc8>)
 8009b70:	2200      	movs	r2, #0
 8009b72:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 8009b74:	4b11      	ldr	r3, [pc, #68]	@ (8009bbc <enableMicrophone+0xcc>)
 8009b76:	2200      	movs	r2, #0
 8009b78:	701a      	strb	r2, [r3, #0]
        SPLcalcComplete = false;
 8009b7a:	4b11      	ldr	r3, [pc, #68]	@ (8009bc0 <enableMicrophone+0xd0>)
 8009b7c:	2200      	movs	r2, #0
 8009b7e:	701a      	strb	r2, [r3, #0]
        if (HAL_I2S_DMAStop(hi2s2) != HAL_OK)
 8009b80:	4b09      	ldr	r3, [pc, #36]	@ (8009ba8 <enableMicrophone+0xb8>)
 8009b82:	681b      	ldr	r3, [r3, #0]
 8009b84:	0018      	movs	r0, r3
 8009b86:	f005 fda5 	bl	800f6d4 <HAL_I2S_DMAStop>
 8009b8a:	1e03      	subs	r3, r0, #0
 8009b8c:	d001      	beq.n	8009b92 <enableMicrophone+0xa2>
        {
            return false;
 8009b8e:	2300      	movs	r3, #0
 8009b90:	e003      	b.n	8009b9a <enableMicrophone+0xaa>
        }
        micEnabled = false;
 8009b92:	4b04      	ldr	r3, [pc, #16]	@ (8009ba4 <enableMicrophone+0xb4>)
 8009b94:	2200      	movs	r2, #0
 8009b96:	701a      	strb	r2, [r3, #0]
    }
    return true;
 8009b98:	2301      	movs	r3, #1
}
 8009b9a:	0018      	movs	r0, r3
 8009b9c:	46bd      	mov	sp, r7
 8009b9e:	b002      	add	sp, #8
 8009ba0:	bd80      	pop	{r7, pc}
 8009ba2:	46c0      	nop			@ (mov r8, r8)
 8009ba4:	20001281 	.word	0x20001281
 8009ba8:	20001ccc 	.word	0x20001ccc
 8009bac:	200012c8 	.word	0x200012c8
 8009bb0:	20001288 	.word	0x20001288
 8009bb4:	20001cd4 	.word	0x20001cd4
 8009bb8:	20001283 	.word	0x20001283
 8009bbc:	20001282 	.word	0x20001282
 8009bc0:	20001284 	.word	0x20001284

08009bc4 <startSPLcalculation>:

// The microphone/I2S/DMA is already running: start the
// conversion of I2S data to SPL.
// Return false if microphone is not enabled (fail).
bool startSPLcalculation(void)
{
 8009bc4:	b580      	push	{r7, lr}
 8009bc6:	af00      	add	r7, sp, #0
    if (!micEnabled)
 8009bc8:	4b0c      	ldr	r3, [pc, #48]	@ (8009bfc <startSPLcalculation+0x38>)
 8009bca:	781b      	ldrb	r3, [r3, #0]
 8009bcc:	b2db      	uxtb	r3, r3
 8009bce:	2201      	movs	r2, #1
 8009bd0:	4053      	eors	r3, r2
 8009bd2:	b2db      	uxtb	r3, r3
 8009bd4:	2b00      	cmp	r3, #0
 8009bd6:	d001      	beq.n	8009bdc <startSPLcalculation+0x18>
    {
        return false;
 8009bd8:	2300      	movs	r3, #0
 8009bda:	e00c      	b.n	8009bf6 <startSPLcalculation+0x32>
    }
    if (SPLcalcEnabled)
 8009bdc:	4b08      	ldr	r3, [pc, #32]	@ (8009c00 <startSPLcalculation+0x3c>)
 8009bde:	781b      	ldrb	r3, [r3, #0]
 8009be0:	b2db      	uxtb	r3, r3
 8009be2:	2b00      	cmp	r3, #0
 8009be4:	d001      	beq.n	8009bea <startSPLcalculation+0x26>
    {
        return true;
 8009be6:	2301      	movs	r3, #1
 8009be8:	e005      	b.n	8009bf6 <startSPLcalculation+0x32>
    }
    resetSPLstate();
 8009bea:	f000 fb63 	bl	800a2b4 <resetSPLstate>
    SPLcalcEnabled = true;
 8009bee:	4b04      	ldr	r3, [pc, #16]	@ (8009c00 <startSPLcalculation+0x3c>)
 8009bf0:	2201      	movs	r2, #1
 8009bf2:	701a      	strb	r2, [r3, #0]
    return true;
 8009bf4:	2301      	movs	r3, #1
}
 8009bf6:	0018      	movs	r0, r3
 8009bf8:	46bd      	mov	sp, r7
 8009bfa:	bd80      	pop	{r7, pc}
 8009bfc:	20001281 	.word	0x20001281
 8009c00:	20001282 	.word	0x20001282

08009c04 <HAL_I2S_RxHalfCpltCallback>:

// Called from the DMA ISR when the first half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the first half of dmaBuffer
void HAL_I2S_RxHalfCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 8009c04:	b580      	push	{r7, lr}
 8009c06:	b082      	sub	sp, #8
 8009c08:	af00      	add	r7, sp, #0
 8009c0a:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 8009c0c:	4b05      	ldr	r3, [pc, #20]	@ (8009c24 <HAL_I2S_RxHalfCpltCallback+0x20>)
 8009c0e:	681b      	ldr	r3, [r3, #0]
 8009c10:	687a      	ldr	r2, [r7, #4]
 8009c12:	429a      	cmp	r2, r3
 8009c14:	d102      	bne.n	8009c1c <HAL_I2S_RxHalfCpltCallback+0x18>
    UNUSED(hi2s2);
    processHalfDMAbuffer(0);
 8009c16:	2000      	movs	r0, #0
 8009c18:	f000 f81a 	bl	8009c50 <processHalfDMAbuffer>
  }
}
 8009c1c:	46c0      	nop			@ (mov r8, r8)
 8009c1e:	46bd      	mov	sp, r7
 8009c20:	b002      	add	sp, #8
 8009c22:	bd80      	pop	{r7, pc}
 8009c24:	20001ccc 	.word	0x20001ccc

08009c28 <HAL_I2S_RxCpltCallback>:

// Called from the DMA ISR when the second half of the DMA buffer is full,
// i.e. "HALF_BUFLEN" uint16s are in the second half of dmaBuffer
void HAL_I2S_RxCpltCallback(I2S_HandleTypeDef *hi2s2loc)
{
 8009c28:	b580      	push	{r7, lr}
 8009c2a:	b082      	sub	sp, #8
 8009c2c:	af00      	add	r7, sp, #0
 8009c2e:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 8009c30:	4b06      	ldr	r3, [pc, #24]	@ (8009c4c <HAL_I2S_RxCpltCallback+0x24>)
 8009c32:	681b      	ldr	r3, [r3, #0]
 8009c34:	687a      	ldr	r2, [r7, #4]
 8009c36:	429a      	cmp	r2, r3
 8009c38:	d104      	bne.n	8009c44 <HAL_I2S_RxCpltCallback+0x1c>
    UNUSED(hi2s2);
    processHalfDMAbuffer(HALF_BUFLEN);
 8009c3a:	2380      	movs	r3, #128	@ 0x80
 8009c3c:	009b      	lsls	r3, r3, #2
 8009c3e:	0018      	movs	r0, r3
 8009c40:	f000 f806 	bl	8009c50 <processHalfDMAbuffer>
  }
}
 8009c44:	46c0      	nop			@ (mov r8, r8)
 8009c46:	46bd      	mov	sp, r7
 8009c48:	b002      	add	sp, #8
 8009c4a:	bd80      	pop	{r7, pc}
 8009c4c:	20001ccc 	.word	0x20001ccc

08009c50 <processHalfDMAbuffer>:

static void processHalfDMAbuffer(uint32_t halfBufferStart)
{
 8009c50:	b580      	push	{r7, lr}
 8009c52:	b082      	sub	sp, #8
 8009c54:	af00      	add	r7, sp, #0
 8009c56:	6078      	str	r0, [r7, #4]
    // Decode the raw I2S data and copy it out of the DMA buffer and into dataBuffer
    decodeI2SdataLch((uint16_t *) &(dmaBuffer[halfBufferStart]), HALF_BUFLEN,
 8009c58:	687b      	ldr	r3, [r7, #4]
 8009c5a:	005a      	lsls	r2, r3, #1
 8009c5c:	4b15      	ldr	r3, [pc, #84]	@ (8009cb4 <processHalfDMAbuffer+0x64>)
 8009c5e:	18d3      	adds	r3, r2, r3
 8009c60:	4a15      	ldr	r2, [pc, #84]	@ (8009cb8 <processHalfDMAbuffer+0x68>)
 8009c62:	2180      	movs	r1, #128	@ 0x80
 8009c64:	0089      	lsls	r1, r1, #2
 8009c66:	0018      	movs	r0, r3
 8009c68:	f000 fd35 	bl	800a6d6 <decodeI2SdataLch>
                     (int32_t *) dataBuffer);
    // Filter the amplitude, find the maximum, and update maximumAmplitude:
    getFilteredMaxAmplitudeQ31((int32_t *) dataBuffer, (uint32_t) EIGHTH_BUFLEN,
 8009c6c:	4b13      	ldr	r3, [pc, #76]	@ (8009cbc <processHalfDMAbuffer+0x6c>)
 8009c6e:	681b      	ldr	r3, [r3, #0]
 8009c70:	425a      	negs	r2, r3
 8009c72:	4153      	adcs	r3, r2
 8009c74:	b2da      	uxtb	r2, r3
 8009c76:	4b11      	ldr	r3, [pc, #68]	@ (8009cbc <processHalfDMAbuffer+0x6c>)
 8009c78:	681b      	ldr	r3, [r3, #0]
 8009c7a:	2109      	movs	r1, #9
 8009c7c:	4299      	cmp	r1, r3
 8009c7e:	419b      	sbcs	r3, r3
 8009c80:	425b      	negs	r3, r3
 8009c82:	b2db      	uxtb	r3, r3
 8009c84:	480c      	ldr	r0, [pc, #48]	@ (8009cb8 <processHalfDMAbuffer+0x68>)
 8009c86:	2180      	movs	r1, #128	@ 0x80
 8009c88:	f000 fb46 	bl	800a318 <getFilteredMaxAmplitudeQ31>
                               amplitudeSettlingPeriods == 0,
                               amplitudeSettlingPeriods >= N_AMP_SETTLE_HALF_PERIODS);
    if (amplitudeSettlingPeriods < N_AMP_SETTLE_HALF_PERIODS)
 8009c8c:	4b0b      	ldr	r3, [pc, #44]	@ (8009cbc <processHalfDMAbuffer+0x6c>)
 8009c8e:	681b      	ldr	r3, [r3, #0]
 8009c90:	2b09      	cmp	r3, #9
 8009c92:	d804      	bhi.n	8009c9e <processHalfDMAbuffer+0x4e>
    {
        // Need to allow the IIR filter to settle
        amplitudeSettlingPeriods++;
 8009c94:	4b09      	ldr	r3, [pc, #36]	@ (8009cbc <processHalfDMAbuffer+0x6c>)
 8009c96:	681b      	ldr	r3, [r3, #0]
 8009c98:	1c5a      	adds	r2, r3, #1
 8009c9a:	4b08      	ldr	r3, [pc, #32]	@ (8009cbc <processHalfDMAbuffer+0x6c>)
 8009c9c:	601a      	str	r2, [r3, #0]
    }
    if (SPLcalcEnabled)
 8009c9e:	4b08      	ldr	r3, [pc, #32]	@ (8009cc0 <processHalfDMAbuffer+0x70>)
 8009ca0:	781b      	ldrb	r3, [r3, #0]
 8009ca2:	b2db      	uxtb	r3, r3
 8009ca4:	2b00      	cmp	r3, #0
 8009ca6:	d001      	beq.n	8009cac <processHalfDMAbuffer+0x5c>
    {
        // Calculate the A-weighted SPL and octave bands SPL
        calculateSPLQ31();
 8009ca8:	f000 f826 	bl	8009cf8 <calculateSPLQ31>
    }
}
 8009cac:	46c0      	nop			@ (mov r8, r8)
 8009cae:	46bd      	mov	sp, r7
 8009cb0:	b002      	add	sp, #8
 8009cb2:	bd80      	pop	{r7, pc}
 8009cb4:	200012c8 	.word	0x200012c8
 8009cb8:	20001ac8 	.word	0x20001ac8
 8009cbc:	20001288 	.word	0x20001288
 8009cc0:	20001282 	.word	0x20001282

08009cc4 <HAL_I2S_ErrorCallback>:

void HAL_I2S_ErrorCallback(I2S_HandleTypeDef *hi2s2loc)
{
 8009cc4:	b580      	push	{r7, lr}
 8009cc6:	b082      	sub	sp, #8
 8009cc8:	af00      	add	r7, sp, #0
 8009cca:	6078      	str	r0, [r7, #4]
  if (hi2s2loc == hi2s2) {
 8009ccc:	4b07      	ldr	r3, [pc, #28]	@ (8009cec <HAL_I2S_ErrorCallback+0x28>)
 8009cce:	681b      	ldr	r3, [r3, #0]
 8009cd0:	687a      	ldr	r2, [r7, #4]
 8009cd2:	429a      	cmp	r2, r3
 8009cd4:	d106      	bne.n	8009ce4 <HAL_I2S_ErrorCallback+0x20>
    UNUSED(hi2s2);
    errorHandler(__func__, __LINE__, __FILE__);
 8009cd6:	4a06      	ldr	r2, [pc, #24]	@ (8009cf0 <HAL_I2S_ErrorCallback+0x2c>)
 8009cd8:	239f      	movs	r3, #159	@ 0x9f
 8009cda:	0059      	lsls	r1, r3, #1
 8009cdc:	4b05      	ldr	r3, [pc, #20]	@ (8009cf4 <HAL_I2S_ErrorCallback+0x30>)
 8009cde:	0018      	movs	r0, r3
 8009ce0:	f001 fdd0 	bl	800b884 <errorHandler>
  }
}
 8009ce4:	46c0      	nop			@ (mov r8, r8)
 8009ce6:	46bd      	mov	sp, r7
 8009ce8:	b002      	add	sp, #8
 8009cea:	bd80      	pop	{r7, pc}
 8009cec:	20001ccc 	.word	0x20001ccc
 8009cf0:	080203cc 	.word	0x080203cc
 8009cf4:	080209e0 	.word	0x080209e0

08009cf8 <calculateSPLQ31>:
// dataBuffer must contain (at least) FFT_N values and is reused for
// storage throughout this function. Since dataBuffer is shared by
// both halves of the DMA buffer, this function must complete before
// the next DMA interrupt.
static void calculateSPLQ31(void)
{
 8009cf8:	b5f0      	push	{r4, r5, r6, r7, lr}
 8009cfa:	b0b3      	sub	sp, #204	@ 0xcc
 8009cfc:	af04      	add	r7, sp, #16
    // Interleaved complex, so need 2x number of elements:
    static q31_t FFTdata[2*FFT_N] = {0};

    // Find max, min values of the input data
    int32_t max, min;
    findMinMax(&min, &max, (int32_t *) dataBuffer, FFT_N);
 8009cfe:	4ae2      	ldr	r2, [pc, #904]	@ (800a088 <calculateSPLQ31+0x390>)
 8009d00:	2338      	movs	r3, #56	@ 0x38
 8009d02:	2030      	movs	r0, #48	@ 0x30
 8009d04:	181b      	adds	r3, r3, r0
 8009d06:	19d9      	adds	r1, r3, r7
 8009d08:	2334      	movs	r3, #52	@ 0x34
 8009d0a:	181b      	adds	r3, r3, r0
 8009d0c:	19d8      	adds	r0, r3, r7
 8009d0e:	2380      	movs	r3, #128	@ 0x80
 8009d10:	f000 fc36 	bl	800a580 <findMinMax>

    // Calculate the centre of the signal range, and the largest bitshift needed
    // to fill the available range without saturating
    int32_t centre = (min/2) + (max/2);
 8009d14:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009d16:	2b00      	cmp	r3, #0
 8009d18:	da00      	bge.n	8009d1c <calculateSPLQ31+0x24>
 8009d1a:	3301      	adds	r3, #1
 8009d1c:	105b      	asrs	r3, r3, #1
 8009d1e:	001a      	movs	r2, r3
 8009d20:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009d22:	2b00      	cmp	r3, #0
 8009d24:	da00      	bge.n	8009d28 <calculateSPLQ31+0x30>
 8009d26:	3301      	adds	r3, #1
 8009d28:	105b      	asrs	r3, r3, #1
 8009d2a:	18d3      	adds	r3, r2, r3
 8009d2c:	2188      	movs	r1, #136	@ 0x88
 8009d2e:	187a      	adds	r2, r7, r1
 8009d30:	6013      	str	r3, [r2, #0]
    uint32_t amplitude = (uint32_t) (max - centre + BIT_ROUNDING_MARGIN);
 8009d32:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009d34:	187b      	adds	r3, r7, r1
 8009d36:	681b      	ldr	r3, [r3, #0]
 8009d38:	1ad3      	subs	r3, r2, r3
 8009d3a:	3304      	adds	r3, #4
 8009d3c:	2284      	movs	r2, #132	@ 0x84
 8009d3e:	18b9      	adds	r1, r7, r2
 8009d40:	600b      	str	r3, [r1, #0]
    uint32_t bitShift = getPo2factor(INT32_MAX, amplitude);
 8009d42:	18bb      	adds	r3, r7, r2
 8009d44:	681b      	ldr	r3, [r3, #0]
 8009d46:	4ad1      	ldr	r2, [pc, #836]	@ (800a08c <calculateSPLQ31+0x394>)
 8009d48:	0019      	movs	r1, r3
 8009d4a:	0010      	movs	r0, r2
 8009d4c:	f000 fc58 	bl	800a600 <getPo2factor>
 8009d50:	0003      	movs	r3, r0
 8009d52:	2280      	movs	r2, #128	@ 0x80
 8009d54:	18ba      	adds	r2, r7, r2
 8009d56:	6013      	str	r3, [r2, #0]

    // Apply offset and bitshift and put data into FFT input array
    uint32_t count = 0;
 8009d58:	2300      	movs	r3, #0
 8009d5a:	2284      	movs	r2, #132	@ 0x84
 8009d5c:	2130      	movs	r1, #48	@ 0x30
 8009d5e:	1852      	adds	r2, r2, r1
 8009d60:	19d2      	adds	r2, r2, r7
 8009d62:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 8009d64:	2300      	movs	r3, #0
 8009d66:	2280      	movs	r2, #128	@ 0x80
 8009d68:	1852      	adds	r2, r2, r1
 8009d6a:	19d2      	adds	r2, r2, r7
 8009d6c:	6013      	str	r3, [r2, #0]
 8009d6e:	e032      	b.n	8009dd6 <calculateSPLQ31+0xde>
    {
        FFTdata[count] = (q31_t) ((dataBuffer[i] - centre) << bitShift);
 8009d70:	4ac5      	ldr	r2, [pc, #788]	@ (800a088 <calculateSPLQ31+0x390>)
 8009d72:	2680      	movs	r6, #128	@ 0x80
 8009d74:	2330      	movs	r3, #48	@ 0x30
 8009d76:	18f1      	adds	r1, r6, r3
 8009d78:	19cb      	adds	r3, r1, r7
 8009d7a:	681b      	ldr	r3, [r3, #0]
 8009d7c:	009b      	lsls	r3, r3, #2
 8009d7e:	589a      	ldr	r2, [r3, r2]
 8009d80:	2188      	movs	r1, #136	@ 0x88
 8009d82:	1879      	adds	r1, r7, r1
 8009d84:	680b      	ldr	r3, [r1, #0]
 8009d86:	1ad2      	subs	r2, r2, r3
 8009d88:	2180      	movs	r1, #128	@ 0x80
 8009d8a:	1879      	adds	r1, r7, r1
 8009d8c:	680b      	ldr	r3, [r1, #0]
 8009d8e:	409a      	lsls	r2, r3
 8009d90:	0011      	movs	r1, r2
 8009d92:	4abf      	ldr	r2, [pc, #764]	@ (800a090 <calculateSPLQ31+0x398>)
 8009d94:	2084      	movs	r0, #132	@ 0x84
 8009d96:	2330      	movs	r3, #48	@ 0x30
 8009d98:	18c3      	adds	r3, r0, r3
 8009d9a:	19db      	adds	r3, r3, r7
 8009d9c:	681b      	ldr	r3, [r3, #0]
 8009d9e:	009b      	lsls	r3, r3, #2
 8009da0:	5099      	str	r1, [r3, r2]
        FFTdata[count + 1] = 0;
 8009da2:	2230      	movs	r2, #48	@ 0x30
 8009da4:	1883      	adds	r3, r0, r2
 8009da6:	19db      	adds	r3, r3, r7
 8009da8:	681b      	ldr	r3, [r3, #0]
 8009daa:	3301      	adds	r3, #1
 8009dac:	49b8      	ldr	r1, [pc, #736]	@ (800a090 <calculateSPLQ31+0x398>)
 8009dae:	009a      	lsls	r2, r3, #2
 8009db0:	2300      	movs	r3, #0
 8009db2:	5053      	str	r3, [r2, r1]
        count += 2;
 8009db4:	2230      	movs	r2, #48	@ 0x30
 8009db6:	1883      	adds	r3, r0, r2
 8009db8:	19db      	adds	r3, r3, r7
 8009dba:	681b      	ldr	r3, [r3, #0]
 8009dbc:	3302      	adds	r3, #2
 8009dbe:	0011      	movs	r1, r2
 8009dc0:	1882      	adds	r2, r0, r2
 8009dc2:	19d2      	adds	r2, r2, r7
 8009dc4:	6013      	str	r3, [r2, #0]
    for (uint32_t i = 0; i < FFT_N; i++)
 8009dc6:	000a      	movs	r2, r1
 8009dc8:	18b3      	adds	r3, r6, r2
 8009dca:	19db      	adds	r3, r3, r7
 8009dcc:	681b      	ldr	r3, [r3, #0]
 8009dce:	3301      	adds	r3, #1
 8009dd0:	18b2      	adds	r2, r6, r2
 8009dd2:	19d2      	adds	r2, r2, r7
 8009dd4:	6013      	str	r3, [r2, #0]
 8009dd6:	2380      	movs	r3, #128	@ 0x80
 8009dd8:	2630      	movs	r6, #48	@ 0x30
 8009dda:	199b      	adds	r3, r3, r6
 8009ddc:	19db      	adds	r3, r3, r7
 8009dde:	681b      	ldr	r3, [r3, #0]
 8009de0:	2b7f      	cmp	r3, #127	@ 0x7f
 8009de2:	d9c5      	bls.n	8009d70 <calculateSPLQ31+0x78>
    }

    // Do the FFT; the output is internally divided by FFT_N (number of points)
    arm_cfft_q31(fftInstance, FFTdata, 0, 1);
 8009de4:	4bab      	ldr	r3, [pc, #684]	@ (800a094 <calculateSPLQ31+0x39c>)
 8009de6:	6818      	ldr	r0, [r3, #0]
 8009de8:	49a9      	ldr	r1, [pc, #676]	@ (800a090 <calculateSPLQ31+0x398>)
 8009dea:	2301      	movs	r3, #1
 8009dec:	2200      	movs	r2, #0
 8009dee:	f010 f895 	bl	8019f1c <arm_cfft_q31>

    // Find FFT output max, min values (in 1st half of output),
    // ignoring the two dc bin values:
    findMinMax(&min, &max, &(FFTdata[2]), ((uint32_t) FFT_N) - 2);
 8009df2:	4aa9      	ldr	r2, [pc, #676]	@ (800a098 <calculateSPLQ31+0x3a0>)
 8009df4:	2338      	movs	r3, #56	@ 0x38
 8009df6:	199b      	adds	r3, r3, r6
 8009df8:	19d9      	adds	r1, r3, r7
 8009dfa:	2334      	movs	r3, #52	@ 0x34
 8009dfc:	199b      	adds	r3, r3, r6
 8009dfe:	19d8      	adds	r0, r3, r7
 8009e00:	237e      	movs	r3, #126	@ 0x7e
 8009e02:	f000 fbbd 	bl	800a580 <findMinMax>

    // find the largest absolute real/imag component (store in "max")
    if (min == INT32_MIN)
 8009e06:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009e08:	2380      	movs	r3, #128	@ 0x80
 8009e0a:	061b      	lsls	r3, r3, #24
 8009e0c:	429a      	cmp	r2, r3
 8009e0e:	d101      	bne.n	8009e14 <calculateSPLQ31+0x11c>
    {
        min = INT32_MAX;
 8009e10:	4b9e      	ldr	r3, [pc, #632]	@ (800a08c <calculateSPLQ31+0x394>)
 8009e12:	667b      	str	r3, [r7, #100]	@ 0x64
    }
    if (max == INT32_MIN)
 8009e14:	6eba      	ldr	r2, [r7, #104]	@ 0x68
 8009e16:	2380      	movs	r3, #128	@ 0x80
 8009e18:	061b      	lsls	r3, r3, #24
 8009e1a:	429a      	cmp	r2, r3
 8009e1c:	d101      	bne.n	8009e22 <calculateSPLQ31+0x12a>
    {
        max = INT32_MAX;
 8009e1e:	4b9b      	ldr	r3, [pc, #620]	@ (800a08c <calculateSPLQ31+0x394>)
 8009e20:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    min = abs(min);
 8009e22:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009e24:	17da      	asrs	r2, r3, #31
 8009e26:	189b      	adds	r3, r3, r2
 8009e28:	4053      	eors	r3, r2
 8009e2a:	667b      	str	r3, [r7, #100]	@ 0x64
    max = abs(max);
 8009e2c:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009e2e:	17da      	asrs	r2, r3, #31
 8009e30:	189b      	adds	r3, r3, r2
 8009e32:	4053      	eors	r3, r2
 8009e34:	66bb      	str	r3, [r7, #104]	@ 0x68
    if (min > max)
 8009e36:	6e7a      	ldr	r2, [r7, #100]	@ 0x64
 8009e38:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009e3a:	429a      	cmp	r2, r3
 8009e3c:	dd01      	ble.n	8009e42 <calculateSPLQ31+0x14a>
    {
        max = min;
 8009e3e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8009e40:	66bb      	str	r3, [r7, #104]	@ 0x68
    }
    // Calculate the largest bitshift needed to fill the available range
    // without saturating
    uint32_t amplitude2 = ((uint32_t) max) + BIT_ROUNDING_MARGIN;
 8009e42:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8009e44:	3304      	adds	r3, #4
 8009e46:	67fb      	str	r3, [r7, #124]	@ 0x7c
    uint32_t bitShift2 = getPo2factor((uint32_t) INT32_MAX, amplitude2);
 8009e48:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8009e4a:	4a90      	ldr	r2, [pc, #576]	@ (800a08c <calculateSPLQ31+0x394>)
 8009e4c:	0019      	movs	r1, r3
 8009e4e:	0010      	movs	r0, r2
 8009e50:	f000 fbd6 	bl	800a600 <getPo2factor>
 8009e54:	0003      	movs	r3, r0
 8009e56:	67bb      	str	r3, [r7, #120]	@ 0x78

    // Apply the bitshift (not to the dc bins, and to 1st half of data only),
    // then get the absolute square magnitude of each bin
    for (uint32_t i = 2; i<FFT_N; i++)
 8009e58:	2302      	movs	r3, #2
 8009e5a:	22ac      	movs	r2, #172	@ 0xac
 8009e5c:	18ba      	adds	r2, r7, r2
 8009e5e:	6013      	str	r3, [r2, #0]
 8009e60:	e012      	b.n	8009e88 <calculateSPLQ31+0x190>
    {
        FFTdata[i] = (q31_t) (FFTdata[i] << bitShift2);
 8009e62:	4a8b      	ldr	r2, [pc, #556]	@ (800a090 <calculateSPLQ31+0x398>)
 8009e64:	20ac      	movs	r0, #172	@ 0xac
 8009e66:	183b      	adds	r3, r7, r0
 8009e68:	681b      	ldr	r3, [r3, #0]
 8009e6a:	009b      	lsls	r3, r3, #2
 8009e6c:	589a      	ldr	r2, [r3, r2]
 8009e6e:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009e70:	409a      	lsls	r2, r3
 8009e72:	0011      	movs	r1, r2
 8009e74:	4a86      	ldr	r2, [pc, #536]	@ (800a090 <calculateSPLQ31+0x398>)
 8009e76:	183b      	adds	r3, r7, r0
 8009e78:	681b      	ldr	r3, [r3, #0]
 8009e7a:	009b      	lsls	r3, r3, #2
 8009e7c:	5099      	str	r1, [r3, r2]
    for (uint32_t i = 2; i<FFT_N; i++)
 8009e7e:	183b      	adds	r3, r7, r0
 8009e80:	681b      	ldr	r3, [r3, #0]
 8009e82:	3301      	adds	r3, #1
 8009e84:	183a      	adds	r2, r7, r0
 8009e86:	6013      	str	r3, [r2, #0]
 8009e88:	23ac      	movs	r3, #172	@ 0xac
 8009e8a:	18fb      	adds	r3, r7, r3
 8009e8c:	681b      	ldr	r3, [r3, #0]
 8009e8e:	2b7f      	cmp	r3, #127	@ 0x7f
 8009e90:	d9e7      	bls.n	8009e62 <calculateSPLQ31+0x16a>
    }
    // Re-use dataBuffer as working memory:
    q31_t * sqmag = (q31_t *) dataBuffer;
 8009e92:	4b7d      	ldr	r3, [pc, #500]	@ (800a088 <calculateSPLQ31+0x390>)
 8009e94:	677b      	str	r3, [r7, #116]	@ 0x74
    arm_cmplx_mag_squared_q31(FFTdata, sqmag, FFT_N/2);
 8009e96:	6f79      	ldr	r1, [r7, #116]	@ 0x74
 8009e98:	4b7d      	ldr	r3, [pc, #500]	@ (800a090 <calculateSPLQ31+0x398>)
 8009e9a:	2240      	movs	r2, #64	@ 0x40
 8009e9c:	0018      	movs	r0, r3
 8009e9e:	f010 fde7 	bl	801aa70 <arm_cmplx_mag_squared_q31>

    // Apply the A-weighting and sum, excluding the dc bin.
    // Also sum for the unweighted frequency-band SPL:
    uint64_t bandSum[SOUND_FREQ_BANDS] = {0};
 8009ea2:	2330      	movs	r3, #48	@ 0x30
 8009ea4:	18fb      	adds	r3, r7, r3
 8009ea6:	0018      	movs	r0, r3
 8009ea8:	2330      	movs	r3, #48	@ 0x30
 8009eaa:	001a      	movs	r2, r3
 8009eac:	2100      	movs	r1, #0
 8009eae:	f012 fb03 	bl	801c4b8 <memset>
    uint64_t sumSq = 0; // sum of squared weighted magnitudes (scaled)
 8009eb2:	2200      	movs	r2, #0
 8009eb4:	2300      	movs	r3, #0
 8009eb6:	21a0      	movs	r1, #160	@ 0xa0
 8009eb8:	1879      	adds	r1, r7, r1
 8009eba:	600a      	str	r2, [r1, #0]
 8009ebc:	604b      	str	r3, [r1, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 8009ebe:	2301      	movs	r3, #1
 8009ec0:	229c      	movs	r2, #156	@ 0x9c
 8009ec2:	18ba      	adds	r2, r7, r2
 8009ec4:	6013      	str	r3, [r2, #0]
 8009ec6:	e05b      	b.n	8009f80 <calculateSPLQ31+0x288>
    {
        sumSq += ((uint64_t) sqmag[i])*((uint64_t) sqWsc[i]);
 8009ec8:	269c      	movs	r6, #156	@ 0x9c
 8009eca:	19bb      	adds	r3, r7, r6
 8009ecc:	681b      	ldr	r3, [r3, #0]
 8009ece:	009a      	lsls	r2, r3, #2
 8009ed0:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009ed2:	189b      	adds	r3, r3, r2
 8009ed4:	681b      	ldr	r3, [r3, #0]
 8009ed6:	613b      	str	r3, [r7, #16]
 8009ed8:	17db      	asrs	r3, r3, #31
 8009eda:	617b      	str	r3, [r7, #20]
 8009edc:	4b6f      	ldr	r3, [pc, #444]	@ (800a09c <calculateSPLQ31+0x3a4>)
 8009ede:	681a      	ldr	r2, [r3, #0]
 8009ee0:	19bb      	adds	r3, r7, r6
 8009ee2:	681b      	ldr	r3, [r3, #0]
 8009ee4:	005b      	lsls	r3, r3, #1
 8009ee6:	18d3      	adds	r3, r2, r3
 8009ee8:	881b      	ldrh	r3, [r3, #0]
 8009eea:	60bb      	str	r3, [r7, #8]
 8009eec:	2300      	movs	r3, #0
 8009eee:	60fb      	str	r3, [r7, #12]
 8009ef0:	68ba      	ldr	r2, [r7, #8]
 8009ef2:	68fb      	ldr	r3, [r7, #12]
 8009ef4:	6938      	ldr	r0, [r7, #16]
 8009ef6:	6979      	ldr	r1, [r7, #20]
 8009ef8:	f7f6 fb62 	bl	80005c0 <__aeabi_lmul>
 8009efc:	0002      	movs	r2, r0
 8009efe:	000b      	movs	r3, r1
 8009f00:	0010      	movs	r0, r2
 8009f02:	0019      	movs	r1, r3
 8009f04:	23a0      	movs	r3, #160	@ 0xa0
 8009f06:	18fa      	adds	r2, r7, r3
 8009f08:	6853      	ldr	r3, [r2, #4]
 8009f0a:	6812      	ldr	r2, [r2, #0]
 8009f0c:	1812      	adds	r2, r2, r0
 8009f0e:	414b      	adcs	r3, r1
 8009f10:	21a0      	movs	r1, #160	@ 0xa0
 8009f12:	1879      	adds	r1, r7, r1
 8009f14:	600a      	str	r2, [r1, #0]
 8009f16:	604b      	str	r3, [r1, #4]
        if (bandIDs[i] != SOUND_FREQ_BANDS)
 8009f18:	4b61      	ldr	r3, [pc, #388]	@ (800a0a0 <calculateSPLQ31+0x3a8>)
 8009f1a:	681a      	ldr	r2, [r3, #0]
 8009f1c:	19bb      	adds	r3, r7, r6
 8009f1e:	681b      	ldr	r3, [r3, #0]
 8009f20:	18d3      	adds	r3, r2, r3
 8009f22:	781b      	ldrb	r3, [r3, #0]
 8009f24:	2b06      	cmp	r3, #6
 8009f26:	d025      	beq.n	8009f74 <calculateSPLQ31+0x27c>
        {
            // This bin belongs in one of the frequency-bands:
            bandSum[bandIDs[i]] += (uint64_t) sqmag[i];
 8009f28:	4b5d      	ldr	r3, [pc, #372]	@ (800a0a0 <calculateSPLQ31+0x3a8>)
 8009f2a:	681a      	ldr	r2, [r3, #0]
 8009f2c:	19bb      	adds	r3, r7, r6
 8009f2e:	681b      	ldr	r3, [r3, #0]
 8009f30:	18d3      	adds	r3, r2, r3
 8009f32:	781b      	ldrb	r3, [r3, #0]
 8009f34:	2230      	movs	r2, #48	@ 0x30
 8009f36:	18ba      	adds	r2, r7, r2
 8009f38:	00db      	lsls	r3, r3, #3
 8009f3a:	18d3      	adds	r3, r2, r3
 8009f3c:	6818      	ldr	r0, [r3, #0]
 8009f3e:	6859      	ldr	r1, [r3, #4]
 8009f40:	19bb      	adds	r3, r7, r6
 8009f42:	681b      	ldr	r3, [r3, #0]
 8009f44:	009a      	lsls	r2, r3, #2
 8009f46:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8009f48:	189b      	adds	r3, r3, r2
 8009f4a:	681b      	ldr	r3, [r3, #0]
 8009f4c:	603b      	str	r3, [r7, #0]
 8009f4e:	17db      	asrs	r3, r3, #31
 8009f50:	607b      	str	r3, [r7, #4]
 8009f52:	4b53      	ldr	r3, [pc, #332]	@ (800a0a0 <calculateSPLQ31+0x3a8>)
 8009f54:	681a      	ldr	r2, [r3, #0]
 8009f56:	19be      	adds	r6, r7, r6
 8009f58:	6833      	ldr	r3, [r6, #0]
 8009f5a:	18d3      	adds	r3, r2, r3
 8009f5c:	781b      	ldrb	r3, [r3, #0]
 8009f5e:	001e      	movs	r6, r3
 8009f60:	683a      	ldr	r2, [r7, #0]
 8009f62:	687b      	ldr	r3, [r7, #4]
 8009f64:	1880      	adds	r0, r0, r2
 8009f66:	4159      	adcs	r1, r3
 8009f68:	2330      	movs	r3, #48	@ 0x30
 8009f6a:	18fa      	adds	r2, r7, r3
 8009f6c:	00f3      	lsls	r3, r6, #3
 8009f6e:	18d3      	adds	r3, r2, r3
 8009f70:	6018      	str	r0, [r3, #0]
 8009f72:	6059      	str	r1, [r3, #4]
    for (uint32_t i = 1; i < (FFT_N/2); i++)
 8009f74:	229c      	movs	r2, #156	@ 0x9c
 8009f76:	18bb      	adds	r3, r7, r2
 8009f78:	681b      	ldr	r3, [r3, #0]
 8009f7a:	3301      	adds	r3, #1
 8009f7c:	18ba      	adds	r2, r7, r2
 8009f7e:	6013      	str	r3, [r2, #0]
 8009f80:	239c      	movs	r3, #156	@ 0x9c
 8009f82:	18fb      	adds	r3, r7, r3
 8009f84:	681b      	ldr	r3, [r3, #0]
 8009f86:	2b3f      	cmp	r3, #63	@ 0x3f
 8009f88:	d99e      	bls.n	8009ec8 <calculateSPLQ31+0x1d0>
        }
    }

    // Reverse the (explicit and implicit) scalings using a bitshift.
    // Shifts applied before squaring are doubled when reversed.
    int32_t bs_right = ((int32_t) (2*bitShift)) + ((int32_t) (2*bitShift2))
 8009f8a:	2380      	movs	r3, #128	@ 0x80
 8009f8c:	18fb      	adds	r3, r7, r3
 8009f8e:	681b      	ldr	r3, [r3, #0]
 8009f90:	005b      	lsls	r3, r3, #1
 8009f92:	001a      	movs	r2, r3
 8009f94:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8009f96:	005b      	lsls	r3, r3, #1
 8009f98:	18d3      	adds	r3, r2, r3
 8009f9a:	3b22      	subs	r3, #34	@ 0x22
 8009f9c:	673b      	str	r3, [r7, #112]	@ 0x70
                       - FFT_SCALE_BITSHIFT - Q31_BITSHIFT;
    uint32_t absShift = (uint32_t) abs(bs_right);
 8009f9e:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009fa0:	17da      	asrs	r2, r3, #31
 8009fa2:	189b      	adds	r3, r3, r2
 8009fa4:	4053      	eors	r3, r2
 8009fa6:	66fb      	str	r3, [r7, #108]	@ 0x6c
    if (bs_right < 0)
 8009fa8:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8009faa:	2b00      	cmp	r3, #0
 8009fac:	da62      	bge.n	800a074 <calculateSPLQ31+0x37c>
    {
        // Left shift
        sumSq = sumSq << absShift;
 8009fae:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009fb0:	3b20      	subs	r3, #32
 8009fb2:	2b00      	cmp	r3, #0
 8009fb4:	db05      	blt.n	8009fc2 <calculateSPLQ31+0x2ca>
 8009fb6:	22a0      	movs	r2, #160	@ 0xa0
 8009fb8:	18ba      	adds	r2, r7, r2
 8009fba:	6812      	ldr	r2, [r2, #0]
 8009fbc:	409a      	lsls	r2, r3
 8009fbe:	627a      	str	r2, [r7, #36]	@ 0x24
 8009fc0:	e010      	b.n	8009fe4 <calculateSPLQ31+0x2ec>
 8009fc2:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009fc4:	2220      	movs	r2, #32
 8009fc6:	1ad3      	subs	r3, r2, r3
 8009fc8:	22a0      	movs	r2, #160	@ 0xa0
 8009fca:	18ba      	adds	r2, r7, r2
 8009fcc:	6812      	ldr	r2, [r2, #0]
 8009fce:	40da      	lsrs	r2, r3
 8009fd0:	0013      	movs	r3, r2
 8009fd2:	22a4      	movs	r2, #164	@ 0xa4
 8009fd4:	18ba      	adds	r2, r7, r2
 8009fd6:	6811      	ldr	r1, [r2, #0]
 8009fd8:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 8009fda:	4091      	lsls	r1, r2
 8009fdc:	6279      	str	r1, [r7, #36]	@ 0x24
 8009fde:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8009fe0:	431a      	orrs	r2, r3
 8009fe2:	627a      	str	r2, [r7, #36]	@ 0x24
 8009fe4:	21a0      	movs	r1, #160	@ 0xa0
 8009fe6:	187b      	adds	r3, r7, r1
 8009fe8:	681a      	ldr	r2, [r3, #0]
 8009fea:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8009fec:	409a      	lsls	r2, r3
 8009fee:	623a      	str	r2, [r7, #32]
 8009ff0:	6a3b      	ldr	r3, [r7, #32]
 8009ff2:	6a7c      	ldr	r4, [r7, #36]	@ 0x24
 8009ff4:	187a      	adds	r2, r7, r1
 8009ff6:	6013      	str	r3, [r2, #0]
 8009ff8:	6054      	str	r4, [r2, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 8009ffa:	2300      	movs	r3, #0
 8009ffc:	2298      	movs	r2, #152	@ 0x98
 8009ffe:	18ba      	adds	r2, r7, r2
 800a000:	6013      	str	r3, [r2, #0]
 800a002:	e031      	b.n	800a068 <calculateSPLQ31+0x370>
        {
            bandSum[i] = bandSum[i] << absShift;
 800a004:	2330      	movs	r3, #48	@ 0x30
 800a006:	18fa      	adds	r2, r7, r3
 800a008:	2398      	movs	r3, #152	@ 0x98
 800a00a:	18fb      	adds	r3, r7, r3
 800a00c:	681b      	ldr	r3, [r3, #0]
 800a00e:	00db      	lsls	r3, r3, #3
 800a010:	18d3      	adds	r3, r2, r3
 800a012:	681a      	ldr	r2, [r3, #0]
 800a014:	685b      	ldr	r3, [r3, #4]
 800a016:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800a018:	3920      	subs	r1, #32
 800a01a:	2900      	cmp	r1, #0
 800a01c:	db03      	blt.n	800a026 <calculateSPLQ31+0x32e>
 800a01e:	0010      	movs	r0, r2
 800a020:	4088      	lsls	r0, r1
 800a022:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800a024:	e00c      	b.n	800a040 <calculateSPLQ31+0x348>
 800a026:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800a028:	2020      	movs	r0, #32
 800a02a:	1a41      	subs	r1, r0, r1
 800a02c:	0010      	movs	r0, r2
 800a02e:	40c8      	lsrs	r0, r1
 800a030:	0001      	movs	r1, r0
 800a032:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a034:	001c      	movs	r4, r3
 800a036:	4084      	lsls	r4, r0
 800a038:	62fc      	str	r4, [r7, #44]	@ 0x2c
 800a03a:	6af8      	ldr	r0, [r7, #44]	@ 0x2c
 800a03c:	4308      	orrs	r0, r1
 800a03e:	62f8      	str	r0, [r7, #44]	@ 0x2c
 800a040:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800a042:	0013      	movs	r3, r2
 800a044:	408b      	lsls	r3, r1
 800a046:	62bb      	str	r3, [r7, #40]	@ 0x28
 800a048:	2330      	movs	r3, #48	@ 0x30
 800a04a:	18fa      	adds	r2, r7, r3
 800a04c:	2098      	movs	r0, #152	@ 0x98
 800a04e:	183b      	adds	r3, r7, r0
 800a050:	681b      	ldr	r3, [r3, #0]
 800a052:	00db      	lsls	r3, r3, #3
 800a054:	18d3      	adds	r3, r2, r3
 800a056:	6ab9      	ldr	r1, [r7, #40]	@ 0x28
 800a058:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a05a:	6019      	str	r1, [r3, #0]
 800a05c:	605a      	str	r2, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800a05e:	183b      	adds	r3, r7, r0
 800a060:	681b      	ldr	r3, [r3, #0]
 800a062:	3301      	adds	r3, #1
 800a064:	183a      	adds	r2, r7, r0
 800a066:	6013      	str	r3, [r2, #0]
 800a068:	2398      	movs	r3, #152	@ 0x98
 800a06a:	18fb      	adds	r3, r7, r3
 800a06c:	681b      	ldr	r3, [r3, #0]
 800a06e:	2b05      	cmp	r3, #5
 800a070:	d9c8      	bls.n	800a004 <calculateSPLQ31+0x30c>
 800a072:	e06b      	b.n	800a14c <calculateSPLQ31+0x454>
        }
    }
    else
    {
        // Right shift
        sumSq = sumSq >> absShift;
 800a074:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a076:	3b20      	subs	r3, #32
 800a078:	2b00      	cmp	r3, #0
 800a07a:	db13      	blt.n	800a0a4 <calculateSPLQ31+0x3ac>
 800a07c:	22a4      	movs	r2, #164	@ 0xa4
 800a07e:	18ba      	adds	r2, r7, r2
 800a080:	6812      	ldr	r2, [r2, #0]
 800a082:	40da      	lsrs	r2, r3
 800a084:	61ba      	str	r2, [r7, #24]
 800a086:	e01e      	b.n	800a0c6 <calculateSPLQ31+0x3ce>
 800a088:	20001ac8 	.word	0x20001ac8
 800a08c:	7fffffff 	.word	0x7fffffff
 800a090:	20001d14 	.word	0x20001d14
 800a094:	200000b0 	.word	0x200000b0
 800a098:	20001d1c 	.word	0x20001d1c
 800a09c:	200000b4 	.word	0x200000b4
 800a0a0:	200000c0 	.word	0x200000c0
 800a0a4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a0a6:	2220      	movs	r2, #32
 800a0a8:	1ad3      	subs	r3, r2, r3
 800a0aa:	22a4      	movs	r2, #164	@ 0xa4
 800a0ac:	18ba      	adds	r2, r7, r2
 800a0ae:	6812      	ldr	r2, [r2, #0]
 800a0b0:	409a      	lsls	r2, r3
 800a0b2:	0013      	movs	r3, r2
 800a0b4:	22a0      	movs	r2, #160	@ 0xa0
 800a0b6:	18ba      	adds	r2, r7, r2
 800a0b8:	6811      	ldr	r1, [r2, #0]
 800a0ba:	6efa      	ldr	r2, [r7, #108]	@ 0x6c
 800a0bc:	40d1      	lsrs	r1, r2
 800a0be:	61b9      	str	r1, [r7, #24]
 800a0c0:	69ba      	ldr	r2, [r7, #24]
 800a0c2:	431a      	orrs	r2, r3
 800a0c4:	61ba      	str	r2, [r7, #24]
 800a0c6:	23a4      	movs	r3, #164	@ 0xa4
 800a0c8:	18fb      	adds	r3, r7, r3
 800a0ca:	681a      	ldr	r2, [r3, #0]
 800a0cc:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 800a0ce:	40da      	lsrs	r2, r3
 800a0d0:	61fa      	str	r2, [r7, #28]
 800a0d2:	69ba      	ldr	r2, [r7, #24]
 800a0d4:	69fb      	ldr	r3, [r7, #28]
 800a0d6:	21a0      	movs	r1, #160	@ 0xa0
 800a0d8:	1879      	adds	r1, r7, r1
 800a0da:	600a      	str	r2, [r1, #0]
 800a0dc:	604b      	str	r3, [r1, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800a0de:	2300      	movs	r3, #0
 800a0e0:	2294      	movs	r2, #148	@ 0x94
 800a0e2:	18ba      	adds	r2, r7, r2
 800a0e4:	6013      	str	r3, [r2, #0]
 800a0e6:	e02c      	b.n	800a142 <calculateSPLQ31+0x44a>
        {
            bandSum[i] = bandSum[i] >> absShift;
 800a0e8:	2330      	movs	r3, #48	@ 0x30
 800a0ea:	18fa      	adds	r2, r7, r3
 800a0ec:	2394      	movs	r3, #148	@ 0x94
 800a0ee:	18fb      	adds	r3, r7, r3
 800a0f0:	681b      	ldr	r3, [r3, #0]
 800a0f2:	00db      	lsls	r3, r3, #3
 800a0f4:	18d3      	adds	r3, r2, r3
 800a0f6:	681a      	ldr	r2, [r3, #0]
 800a0f8:	685b      	ldr	r3, [r3, #4]
 800a0fa:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800a0fc:	3920      	subs	r1, #32
 800a0fe:	2900      	cmp	r1, #0
 800a100:	db03      	blt.n	800a10a <calculateSPLQ31+0x412>
 800a102:	0018      	movs	r0, r3
 800a104:	40c8      	lsrs	r0, r1
 800a106:	0004      	movs	r4, r0
 800a108:	e00a      	b.n	800a120 <calculateSPLQ31+0x428>
 800a10a:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800a10c:	2020      	movs	r0, #32
 800a10e:	1a41      	subs	r1, r0, r1
 800a110:	0018      	movs	r0, r3
 800a112:	4088      	lsls	r0, r1
 800a114:	0001      	movs	r1, r0
 800a116:	6ef8      	ldr	r0, [r7, #108]	@ 0x6c
 800a118:	0016      	movs	r6, r2
 800a11a:	40c6      	lsrs	r6, r0
 800a11c:	0034      	movs	r4, r6
 800a11e:	430c      	orrs	r4, r1
 800a120:	6ef9      	ldr	r1, [r7, #108]	@ 0x6c
 800a122:	40cb      	lsrs	r3, r1
 800a124:	001d      	movs	r5, r3
 800a126:	2330      	movs	r3, #48	@ 0x30
 800a128:	18fa      	adds	r2, r7, r3
 800a12a:	2194      	movs	r1, #148	@ 0x94
 800a12c:	187b      	adds	r3, r7, r1
 800a12e:	681b      	ldr	r3, [r3, #0]
 800a130:	00db      	lsls	r3, r3, #3
 800a132:	18d3      	adds	r3, r2, r3
 800a134:	601c      	str	r4, [r3, #0]
 800a136:	605d      	str	r5, [r3, #4]
        for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800a138:	187b      	adds	r3, r7, r1
 800a13a:	681b      	ldr	r3, [r3, #0]
 800a13c:	3301      	adds	r3, #1
 800a13e:	187a      	adds	r2, r7, r1
 800a140:	6013      	str	r3, [r2, #0]
 800a142:	2394      	movs	r3, #148	@ 0x94
 800a144:	18fb      	adds	r3, r7, r3
 800a146:	681b      	ldr	r3, [r3, #0]
 800a148:	2b05      	cmp	r3, #5
 800a14a:	d9cd      	bls.n	800a0e8 <calculateSPLQ31+0x3f0>
        }
    }

    // Add on the dB terms accounting for the microphone parameters
    // and (only for the A-weighted SPL) the weighting scale factor
    scaleSPL(sumSq, dBscale_int, dBscale_frac, *tenlog10SF_int, *tenlog10SF_frac,
 800a14c:	230f      	movs	r3, #15
 800a14e:	425d      	negs	r5, r3
 800a150:	2305      	movs	r3, #5
 800a152:	425e      	negs	r6, r3
 800a154:	4b4a      	ldr	r3, [pc, #296]	@ (800a280 <calculateSPLQ31+0x588>)
 800a156:	681b      	ldr	r3, [r3, #0]
 800a158:	681a      	ldr	r2, [r3, #0]
 800a15a:	4b4a      	ldr	r3, [pc, #296]	@ (800a284 <calculateSPLQ31+0x58c>)
 800a15c:	681b      	ldr	r3, [r3, #0]
 800a15e:	681b      	ldr	r3, [r3, #0]
 800a160:	21a0      	movs	r1, #160	@ 0xa0
 800a162:	1879      	adds	r1, r7, r1
 800a164:	6808      	ldr	r0, [r1, #0]
 800a166:	6849      	ldr	r1, [r1, #4]
 800a168:	4c47      	ldr	r4, [pc, #284]	@ (800a288 <calculateSPLQ31+0x590>)
 800a16a:	9403      	str	r4, [sp, #12]
 800a16c:	4c47      	ldr	r4, [pc, #284]	@ (800a28c <calculateSPLQ31+0x594>)
 800a16e:	9402      	str	r4, [sp, #8]
 800a170:	9301      	str	r3, [sp, #4]
 800a172:	9200      	str	r2, [sp, #0]
 800a174:	0033      	movs	r3, r6
 800a176:	002a      	movs	r2, r5
 800a178:	f000 fa86 	bl	800a688 <scaleSPL>
             (int32_t *) &SPL_int, (int32_t *) &SPL_frac_1dp);
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800a17c:	2300      	movs	r3, #0
 800a17e:	2290      	movs	r2, #144	@ 0x90
 800a180:	18ba      	adds	r2, r7, r2
 800a182:	6013      	str	r3, [r2, #0]
 800a184:	e026      	b.n	800a1d4 <calculateSPLQ31+0x4dc>
    {
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 800a186:	2330      	movs	r3, #48	@ 0x30
 800a188:	18fa      	adds	r2, r7, r3
 800a18a:	2490      	movs	r4, #144	@ 0x90
 800a18c:	193b      	adds	r3, r7, r4
 800a18e:	681b      	ldr	r3, [r3, #0]
 800a190:	00db      	lsls	r3, r3, #3
 800a192:	18d3      	adds	r3, r2, r3
 800a194:	6818      	ldr	r0, [r3, #0]
 800a196:	6859      	ldr	r1, [r3, #4]
 800a198:	230f      	movs	r3, #15
 800a19a:	425d      	negs	r5, r3
 800a19c:	2305      	movs	r3, #5
 800a19e:	425e      	negs	r6, r3
                 (int32_t *) &(bandSPL_int[i]), (int32_t *) &(bandSPL_frac_1dp[i]));
 800a1a0:	193b      	adds	r3, r7, r4
 800a1a2:	681b      	ldr	r3, [r3, #0]
 800a1a4:	009a      	lsls	r2, r3, #2
 800a1a6:	4b3a      	ldr	r3, [pc, #232]	@ (800a290 <calculateSPLQ31+0x598>)
 800a1a8:	18d3      	adds	r3, r2, r3
 800a1aa:	193a      	adds	r2, r7, r4
 800a1ac:	6812      	ldr	r2, [r2, #0]
 800a1ae:	0094      	lsls	r4, r2, #2
 800a1b0:	4a38      	ldr	r2, [pc, #224]	@ (800a294 <calculateSPLQ31+0x59c>)
 800a1b2:	18a2      	adds	r2, r4, r2
        scaleSPL(bandSum[i], dBscale_int, dBscale_frac, 0, 0,
 800a1b4:	9203      	str	r2, [sp, #12]
 800a1b6:	9302      	str	r3, [sp, #8]
 800a1b8:	2300      	movs	r3, #0
 800a1ba:	9301      	str	r3, [sp, #4]
 800a1bc:	2300      	movs	r3, #0
 800a1be:	9300      	str	r3, [sp, #0]
 800a1c0:	0033      	movs	r3, r6
 800a1c2:	002a      	movs	r2, r5
 800a1c4:	f000 fa60 	bl	800a688 <scaleSPL>
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800a1c8:	2490      	movs	r4, #144	@ 0x90
 800a1ca:	193b      	adds	r3, r7, r4
 800a1cc:	681b      	ldr	r3, [r3, #0]
 800a1ce:	3301      	adds	r3, #1
 800a1d0:	193a      	adds	r2, r7, r4
 800a1d2:	6013      	str	r3, [r2, #0]
 800a1d4:	2390      	movs	r3, #144	@ 0x90
 800a1d6:	18fb      	adds	r3, r7, r3
 800a1d8:	681b      	ldr	r3, [r3, #0]
 800a1da:	2b05      	cmp	r3, #5
 800a1dc:	d9d3      	bls.n	800a186 <calculateSPLQ31+0x48e>
    }

    spl_int_sum += SPL_int;
 800a1de:	4b2b      	ldr	r3, [pc, #172]	@ (800a28c <calculateSPLQ31+0x594>)
 800a1e0:	681a      	ldr	r2, [r3, #0]
 800a1e2:	4b2d      	ldr	r3, [pc, #180]	@ (800a298 <calculateSPLQ31+0x5a0>)
 800a1e4:	681b      	ldr	r3, [r3, #0]
 800a1e6:	18d2      	adds	r2, r2, r3
 800a1e8:	4b2b      	ldr	r3, [pc, #172]	@ (800a298 <calculateSPLQ31+0x5a0>)
 800a1ea:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum += SPL_frac_1dp;
 800a1ec:	4b26      	ldr	r3, [pc, #152]	@ (800a288 <calculateSPLQ31+0x590>)
 800a1ee:	681a      	ldr	r2, [r3, #0]
 800a1f0:	4b2a      	ldr	r3, [pc, #168]	@ (800a29c <calculateSPLQ31+0x5a4>)
 800a1f2:	681b      	ldr	r3, [r3, #0]
 800a1f4:	18d2      	adds	r2, r2, r3
 800a1f6:	4b29      	ldr	r3, [pc, #164]	@ (800a29c <calculateSPLQ31+0x5a4>)
 800a1f8:	601a      	str	r2, [r3, #0]

    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800a1fa:	2300      	movs	r3, #0
 800a1fc:	228c      	movs	r2, #140	@ 0x8c
 800a1fe:	18ba      	adds	r2, r7, r2
 800a200:	6013      	str	r3, [r2, #0]
 800a202:	e025      	b.n	800a250 <calculateSPLQ31+0x558>
    {
        band_spl_int_sum[i] += bandSPL_int[i];
 800a204:	4b22      	ldr	r3, [pc, #136]	@ (800a290 <calculateSPLQ31+0x598>)
 800a206:	208c      	movs	r0, #140	@ 0x8c
 800a208:	183a      	adds	r2, r7, r0
 800a20a:	6812      	ldr	r2, [r2, #0]
 800a20c:	0092      	lsls	r2, r2, #2
 800a20e:	58d2      	ldr	r2, [r2, r3]
 800a210:	4b23      	ldr	r3, [pc, #140]	@ (800a2a0 <calculateSPLQ31+0x5a8>)
 800a212:	1839      	adds	r1, r7, r0
 800a214:	6809      	ldr	r1, [r1, #0]
 800a216:	0089      	lsls	r1, r1, #2
 800a218:	58cb      	ldr	r3, [r1, r3]
 800a21a:	18d1      	adds	r1, r2, r3
 800a21c:	4b20      	ldr	r3, [pc, #128]	@ (800a2a0 <calculateSPLQ31+0x5a8>)
 800a21e:	183a      	adds	r2, r7, r0
 800a220:	6812      	ldr	r2, [r2, #0]
 800a222:	0092      	lsls	r2, r2, #2
 800a224:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] += bandSPL_frac_1dp[i];
 800a226:	4b1b      	ldr	r3, [pc, #108]	@ (800a294 <calculateSPLQ31+0x59c>)
 800a228:	183a      	adds	r2, r7, r0
 800a22a:	6812      	ldr	r2, [r2, #0]
 800a22c:	0092      	lsls	r2, r2, #2
 800a22e:	58d2      	ldr	r2, [r2, r3]
 800a230:	4b1c      	ldr	r3, [pc, #112]	@ (800a2a4 <calculateSPLQ31+0x5ac>)
 800a232:	1839      	adds	r1, r7, r0
 800a234:	6809      	ldr	r1, [r1, #0]
 800a236:	0089      	lsls	r1, r1, #2
 800a238:	58cb      	ldr	r3, [r1, r3]
 800a23a:	18d1      	adds	r1, r2, r3
 800a23c:	4b19      	ldr	r3, [pc, #100]	@ (800a2a4 <calculateSPLQ31+0x5ac>)
 800a23e:	183a      	adds	r2, r7, r0
 800a240:	6812      	ldr	r2, [r2, #0]
 800a242:	0092      	lsls	r2, r2, #2
 800a244:	50d1      	str	r1, [r2, r3]
    for (uint32_t i = 0; i < SOUND_FREQ_BANDS; i++)
 800a246:	183b      	adds	r3, r7, r0
 800a248:	681b      	ldr	r3, [r3, #0]
 800a24a:	3301      	adds	r3, #1
 800a24c:	183a      	adds	r2, r7, r0
 800a24e:	6013      	str	r3, [r2, #0]
 800a250:	238c      	movs	r3, #140	@ 0x8c
 800a252:	18fb      	adds	r3, r7, r3
 800a254:	681b      	ldr	r3, [r3, #0]
 800a256:	2b05      	cmp	r3, #5
 800a258:	d9d4      	bls.n	800a204 <calculateSPLQ31+0x50c>
    }

    spl_sum_count++;
 800a25a:	4b13      	ldr	r3, [pc, #76]	@ (800a2a8 <calculateSPLQ31+0x5b0>)
 800a25c:	681b      	ldr	r3, [r3, #0]
 800a25e:	1c5a      	adds	r2, r3, #1
 800a260:	4b11      	ldr	r3, [pc, #68]	@ (800a2a8 <calculateSPLQ31+0x5b0>)
 800a262:	601a      	str	r2, [r3, #0]
    if (spl_sum_count >= FILTER_SPL_N)
 800a264:	4b10      	ldr	r3, [pc, #64]	@ (800a2a8 <calculateSPLQ31+0x5b0>)
 800a266:	681b      	ldr	r3, [r3, #0]
 800a268:	2b0f      	cmp	r3, #15
 800a26a:	d905      	bls.n	800a278 <calculateSPLQ31+0x580>
    {
        SPLcalcComplete = true;
 800a26c:	4b0f      	ldr	r3, [pc, #60]	@ (800a2ac <calculateSPLQ31+0x5b4>)
 800a26e:	2201      	movs	r2, #1
 800a270:	701a      	strb	r2, [r3, #0]
        SPLcalcEnabled = false;
 800a272:	4b0f      	ldr	r3, [pc, #60]	@ (800a2b0 <calculateSPLQ31+0x5b8>)
 800a274:	2200      	movs	r2, #0
 800a276:	701a      	strb	r2, [r3, #0]
    }
}
 800a278:	46c0      	nop			@ (mov r8, r8)
 800a27a:	46bd      	mov	sp, r7
 800a27c:	b02f      	add	sp, #188	@ 0xbc
 800a27e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a280:	200000b8 	.word	0x200000b8
 800a284:	200000bc 	.word	0x200000bc
 800a288:	20001294 	.word	0x20001294
 800a28c:	20001290 	.word	0x20001290
 800a290:	20001298 	.word	0x20001298
 800a294:	200012b0 	.word	0x200012b0
 800a298:	20001cd8 	.word	0x20001cd8
 800a29c:	20001cdc 	.word	0x20001cdc
 800a2a0:	20001ce0 	.word	0x20001ce0
 800a2a4:	20001cf8 	.word	0x20001cf8
 800a2a8:	20001d10 	.word	0x20001d10
 800a2ac:	20001284 	.word	0x20001284
 800a2b0:	20001282 	.word	0x20001282

0800a2b4 <resetSPLstate>:

static void resetSPLstate(void)
{
 800a2b4:	b580      	push	{r7, lr}
 800a2b6:	b082      	sub	sp, #8
 800a2b8:	af00      	add	r7, sp, #0
    spl_int_sum = 0;
 800a2ba:	4b11      	ldr	r3, [pc, #68]	@ (800a300 <resetSPLstate+0x4c>)
 800a2bc:	2200      	movs	r2, #0
 800a2be:	601a      	str	r2, [r3, #0]
    spl_frac1dp_sum = 0;
 800a2c0:	4b10      	ldr	r3, [pc, #64]	@ (800a304 <resetSPLstate+0x50>)
 800a2c2:	2200      	movs	r2, #0
 800a2c4:	601a      	str	r2, [r3, #0]
    spl_sum_count = 0;
 800a2c6:	4b10      	ldr	r3, [pc, #64]	@ (800a308 <resetSPLstate+0x54>)
 800a2c8:	2200      	movs	r2, #0
 800a2ca:	601a      	str	r2, [r3, #0]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800a2cc:	2300      	movs	r3, #0
 800a2ce:	607b      	str	r3, [r7, #4]
 800a2d0:	e00c      	b.n	800a2ec <resetSPLstate+0x38>
    {
        band_spl_int_sum[i] = 0;
 800a2d2:	4b0e      	ldr	r3, [pc, #56]	@ (800a30c <resetSPLstate+0x58>)
 800a2d4:	687a      	ldr	r2, [r7, #4]
 800a2d6:	0092      	lsls	r2, r2, #2
 800a2d8:	2100      	movs	r1, #0
 800a2da:	50d1      	str	r1, [r2, r3]
        band_spl_frac1dp_sum[i] = 0;
 800a2dc:	4b0c      	ldr	r3, [pc, #48]	@ (800a310 <resetSPLstate+0x5c>)
 800a2de:	687a      	ldr	r2, [r7, #4]
 800a2e0:	0092      	lsls	r2, r2, #2
 800a2e2:	2100      	movs	r1, #0
 800a2e4:	50d1      	str	r1, [r2, r3]
    for (uint32_t i=0; i<SOUND_FREQ_BANDS; i++)
 800a2e6:	687b      	ldr	r3, [r7, #4]
 800a2e8:	3301      	adds	r3, #1
 800a2ea:	607b      	str	r3, [r7, #4]
 800a2ec:	687b      	ldr	r3, [r7, #4]
 800a2ee:	2b05      	cmp	r3, #5
 800a2f0:	d9ef      	bls.n	800a2d2 <resetSPLstate+0x1e>
    }
    SPLcalcComplete = false;
 800a2f2:	4b08      	ldr	r3, [pc, #32]	@ (800a314 <resetSPLstate+0x60>)
 800a2f4:	2200      	movs	r2, #0
 800a2f6:	701a      	strb	r2, [r3, #0]
}
 800a2f8:	46c0      	nop			@ (mov r8, r8)
 800a2fa:	46bd      	mov	sp, r7
 800a2fc:	b002      	add	sp, #8
 800a2fe:	bd80      	pop	{r7, pc}
 800a300:	20001cd8 	.word	0x20001cd8
 800a304:	20001cdc 	.word	0x20001cdc
 800a308:	20001d10 	.word	0x20001d10
 800a30c:	20001ce0 	.word	0x20001ce0
 800a310:	20001cf8 	.word	0x20001cf8
 800a314:	20001284 	.word	0x20001284

0800a318 <getFilteredMaxAmplitudeQ31>:
// Uses a simple single-pole hi-pass IIR filter to remove the input dc offset.
// Uses Q31 operations.
static uint32_t getFilteredMaxAmplitudeQ31(const int32_t * data,
                                           const uint32_t length, bool reset,
                                           bool updateMaxAmpFollower)
{
 800a318:	b5b0      	push	{r4, r5, r7, lr}
 800a31a:	b090      	sub	sp, #64	@ 0x40
 800a31c:	af00      	add	r7, sp, #0
 800a31e:	60f8      	str	r0, [r7, #12]
 800a320:	60b9      	str	r1, [r7, #8]
 800a322:	0019      	movs	r1, r3
 800a324:	1dfb      	adds	r3, r7, #7
 800a326:	701a      	strb	r2, [r3, #0]
 800a328:	1dbb      	adds	r3, r7, #6
 800a32a:	1c0a      	adds	r2, r1, #0
 800a32c:	701a      	strb	r2, [r3, #0]
    static q31_t filtered = 0;
    static q31_t lastData = 0;

    if (reset)
 800a32e:	1dfb      	adds	r3, r7, #7
 800a330:	781b      	ldrb	r3, [r3, #0]
 800a332:	2b00      	cmp	r3, #0
 800a334:	d005      	beq.n	800a342 <getFilteredMaxAmplitudeQ31+0x2a>
    {
        // Reset the state of the digital filter,
        // e.g. if the mic has been disabled then re-enabled.
        filtered = 0;
 800a336:	4b3b      	ldr	r3, [pc, #236]	@ (800a424 <getFilteredMaxAmplitudeQ31+0x10c>)
 800a338:	2200      	movs	r2, #0
 800a33a:	601a      	str	r2, [r3, #0]
        lastData = 0;
 800a33c:	4b3a      	ldr	r3, [pc, #232]	@ (800a428 <getFilteredMaxAmplitudeQ31+0x110>)
 800a33e:	2200      	movs	r2, #0
 800a340:	601a      	str	r2, [r3, #0]
    }
    q31_t maxAmp = 0;
 800a342:	2300      	movs	r3, #0
 800a344:	63fb      	str	r3, [r7, #60]	@ 0x3c
    q31_t minAmp = 0;
 800a346:	2300      	movs	r3, #0
 800a348:	63bb      	str	r3, [r7, #56]	@ 0x38

    // Apply a bitshift to the incoming data, before filtering, to maximise the
    // dynamic range but while also ensuring the intermediate value cannot
    // overflow (three Q31 values are added together).
    const uint32_t scalingBitShift = 5;
 800a34a:	2305      	movs	r3, #5
 800a34c:	633b      	str	r3, [r7, #48]	@ 0x30
    for (uint32_t i = 0; i < length; i++)
 800a34e:	2300      	movs	r3, #0
 800a350:	637b      	str	r3, [r7, #52]	@ 0x34
 800a352:	e040      	b.n	800a3d6 <getFilteredMaxAmplitudeQ31+0xbe>
    {
        q31_t fx = (q31_t) (data[i] << scalingBitShift);
 800a354:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a356:	009b      	lsls	r3, r3, #2
 800a358:	68fa      	ldr	r2, [r7, #12]
 800a35a:	18d3      	adds	r3, r2, r3
 800a35c:	681a      	ldr	r2, [r3, #0]
 800a35e:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a360:	409a      	lsls	r2, r3
 800a362:	0013      	movs	r3, r2
 800a364:	61fb      	str	r3, [r7, #28]
        // D = A*B is: arm_mult_q31(&A, &B, &D, 1);
        // D = A+B is: arm_add_q31(&A, &B, &D, 1);

        // Now do the filter calculation:
        q31_t r1, r2, r3;
        lastData = -lastData;
 800a366:	4b30      	ldr	r3, [pc, #192]	@ (800a428 <getFilteredMaxAmplitudeQ31+0x110>)
 800a368:	681b      	ldr	r3, [r3, #0]
 800a36a:	425a      	negs	r2, r3
 800a36c:	4b2e      	ldr	r3, [pc, #184]	@ (800a428 <getFilteredMaxAmplitudeQ31+0x110>)
 800a36e:	601a      	str	r2, [r3, #0]
        arm_add_q31(&fx, &lastData, &r1, 1); // r1 = fx - lastData
 800a370:	2418      	movs	r4, #24
 800a372:	193a      	adds	r2, r7, r4
 800a374:	492c      	ldr	r1, [pc, #176]	@ (800a428 <getFilteredMaxAmplitudeQ31+0x110>)
 800a376:	231c      	movs	r3, #28
 800a378:	18f8      	adds	r0, r7, r3
 800a37a:	2301      	movs	r3, #1
 800a37c:	f010 fbd0 	bl	801ab20 <arm_add_q31>
        arm_mult_q31((q31_t *) &a0, &r1, &r2, 1);      // r2 = a0*r1
 800a380:	2514      	movs	r5, #20
 800a382:	197a      	adds	r2, r7, r5
 800a384:	1939      	adds	r1, r7, r4
 800a386:	4829      	ldr	r0, [pc, #164]	@ (800a42c <getFilteredMaxAmplitudeQ31+0x114>)
 800a388:	2301      	movs	r3, #1
 800a38a:	f010 fb97 	bl	801aabc <arm_mult_q31>
        arm_mult_q31((q31_t *) &b, &filtered, &r3, 1); // r3 = b*filtered
 800a38e:	2410      	movs	r4, #16
 800a390:	193a      	adds	r2, r7, r4
 800a392:	4924      	ldr	r1, [pc, #144]	@ (800a424 <getFilteredMaxAmplitudeQ31+0x10c>)
 800a394:	4826      	ldr	r0, [pc, #152]	@ (800a430 <getFilteredMaxAmplitudeQ31+0x118>)
 800a396:	2301      	movs	r3, #1
 800a398:	f010 fb90 	bl	801aabc <arm_mult_q31>
        arm_add_q31(&r2, &r3, &filtered, 1); // filtered = r2 + r3
 800a39c:	4a21      	ldr	r2, [pc, #132]	@ (800a424 <getFilteredMaxAmplitudeQ31+0x10c>)
 800a39e:	1939      	adds	r1, r7, r4
 800a3a0:	1978      	adds	r0, r7, r5
 800a3a2:	2301      	movs	r3, #1
 800a3a4:	f010 fbbc 	bl	801ab20 <arm_add_q31>

        lastData = fx;
 800a3a8:	69fa      	ldr	r2, [r7, #28]
 800a3aa:	4b1f      	ldr	r3, [pc, #124]	@ (800a428 <getFilteredMaxAmplitudeQ31+0x110>)
 800a3ac:	601a      	str	r2, [r3, #0]
        if (filtered > maxAmp)
 800a3ae:	4b1d      	ldr	r3, [pc, #116]	@ (800a424 <getFilteredMaxAmplitudeQ31+0x10c>)
 800a3b0:	681b      	ldr	r3, [r3, #0]
 800a3b2:	6bfa      	ldr	r2, [r7, #60]	@ 0x3c
 800a3b4:	429a      	cmp	r2, r3
 800a3b6:	da03      	bge.n	800a3c0 <getFilteredMaxAmplitudeQ31+0xa8>
        {
            maxAmp = filtered;
 800a3b8:	4b1a      	ldr	r3, [pc, #104]	@ (800a424 <getFilteredMaxAmplitudeQ31+0x10c>)
 800a3ba:	681b      	ldr	r3, [r3, #0]
 800a3bc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 800a3be:	e007      	b.n	800a3d0 <getFilteredMaxAmplitudeQ31+0xb8>
        }
        else if (filtered < minAmp)
 800a3c0:	4b18      	ldr	r3, [pc, #96]	@ (800a424 <getFilteredMaxAmplitudeQ31+0x10c>)
 800a3c2:	681b      	ldr	r3, [r3, #0]
 800a3c4:	6bba      	ldr	r2, [r7, #56]	@ 0x38
 800a3c6:	429a      	cmp	r2, r3
 800a3c8:	dd02      	ble.n	800a3d0 <getFilteredMaxAmplitudeQ31+0xb8>
        {
            minAmp = filtered;
 800a3ca:	4b16      	ldr	r3, [pc, #88]	@ (800a424 <getFilteredMaxAmplitudeQ31+0x10c>)
 800a3cc:	681b      	ldr	r3, [r3, #0]
 800a3ce:	63bb      	str	r3, [r7, #56]	@ 0x38
    for (uint32_t i = 0; i < length; i++)
 800a3d0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 800a3d2:	3301      	adds	r3, #1
 800a3d4:	637b      	str	r3, [r7, #52]	@ 0x34
 800a3d6:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 800a3d8:	68bb      	ldr	r3, [r7, #8]
 800a3da:	429a      	cmp	r2, r3
 800a3dc:	d3ba      	bcc.n	800a354 <getFilteredMaxAmplitudeQ31+0x3c>
        }
    }
    // Find the maximum absolute amplitude from the signed values:
    uint32_t absMin = abs(minAmp);
 800a3de:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 800a3e0:	17da      	asrs	r2, r3, #31
 800a3e2:	189b      	adds	r3, r3, r2
 800a3e4:	4053      	eors	r3, r2
 800a3e6:	62fb      	str	r3, [r7, #44]	@ 0x2c
    uint32_t absMax = (uint32_t) maxAmp;
 800a3e8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 800a3ea:	62bb      	str	r3, [r7, #40]	@ 0x28
    uint32_t absMaxAmp = (absMin > absMax) ? absMin : absMax;
 800a3ec:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 800a3ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800a3f0:	4293      	cmp	r3, r2
 800a3f2:	d200      	bcs.n	800a3f6 <getFilteredMaxAmplitudeQ31+0xde>
 800a3f4:	0013      	movs	r3, r2
 800a3f6:	627b      	str	r3, [r7, #36]	@ 0x24

    // Reverse the scaling bitshift
    uint32_t absMaxAmp32 = (uint32_t) (absMaxAmp >> scalingBitShift);
 800a3f8:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a3fa:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 800a3fc:	40da      	lsrs	r2, r3
 800a3fe:	0013      	movs	r3, r2
 800a400:	623b      	str	r3, [r7, #32]

    if (updateMaxAmpFollower && (absMaxAmp32 > maximumAmplitude))
 800a402:	1dbb      	adds	r3, r7, #6
 800a404:	781b      	ldrb	r3, [r3, #0]
 800a406:	2b00      	cmp	r3, #0
 800a408:	d007      	beq.n	800a41a <getFilteredMaxAmplitudeQ31+0x102>
 800a40a:	4b0a      	ldr	r3, [pc, #40]	@ (800a434 <getFilteredMaxAmplitudeQ31+0x11c>)
 800a40c:	681b      	ldr	r3, [r3, #0]
 800a40e:	6a3a      	ldr	r2, [r7, #32]
 800a410:	429a      	cmp	r2, r3
 800a412:	d902      	bls.n	800a41a <getFilteredMaxAmplitudeQ31+0x102>
    {
        maximumAmplitude = absMaxAmp32;
 800a414:	4b07      	ldr	r3, [pc, #28]	@ (800a434 <getFilteredMaxAmplitudeQ31+0x11c>)
 800a416:	6a3a      	ldr	r2, [r7, #32]
 800a418:	601a      	str	r2, [r3, #0]
    }
    return absMaxAmp32;
 800a41a:	6a3b      	ldr	r3, [r7, #32]
}
 800a41c:	0018      	movs	r0, r3
 800a41e:	46bd      	mov	sp, r7
 800a420:	b010      	add	sp, #64	@ 0x40
 800a422:	bdb0      	pop	{r4, r5, r7, pc}
 800a424:	20002114 	.word	0x20002114
 800a428:	20002118 	.word	0x20002118
 800a42c:	080209d8 	.word	0x080209d8
 800a430:	080209dc 	.word	0x080209dc
 800a434:	2000128c 	.word	0x2000128c

0800a438 <floatToIntAndFrac2dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%02i\n", intpart, fracpart2dp);
// To convert to float: intpart + (fracpart2dp/100.0)
void floatToIntAndFrac2dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart2dp)
{
 800a438:	b580      	push	{r7, lr}
 800a43a:	b086      	sub	sp, #24
 800a43c:	af00      	add	r7, sp, #0
 800a43e:	60f8      	str	r0, [r7, #12]
 800a440:	60b9      	str	r1, [r7, #8]
 800a442:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*100.0f);
 800a444:	4913      	ldr	r1, [pc, #76]	@ (800a494 <floatToIntAndFrac2dp+0x5c>)
 800a446:	68f8      	ldr	r0, [r7, #12]
 800a448:	f7f6 fdaa 	bl	8000fa0 <__aeabi_fmul>
 800a44c:	1c03      	adds	r3, r0, #0
 800a44e:	1c18      	adds	r0, r3, #0
 800a450:	f014 ff3c 	bl	801f2cc <roundf>
 800a454:	1c03      	adds	r3, r0, #0
 800a456:	1c18      	adds	r0, r3, #0
 800a458:	f7f6 f8e0 	bl	800061c <__aeabi_f2uiz>
 800a45c:	0003      	movs	r3, r0
 800a45e:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/100;
 800a460:	697b      	ldr	r3, [r7, #20]
 800a462:	2164      	movs	r1, #100	@ 0x64
 800a464:	0018      	movs	r0, r3
 800a466:	f7f5 fe9d 	bl	80001a4 <__udivsi3>
 800a46a:	0003      	movs	r3, r0
 800a46c:	001a      	movs	r2, r3
 800a46e:	68bb      	ldr	r3, [r7, #8]
 800a470:	601a      	str	r2, [r3, #0]
    fracpart2dp[0] = (uint8_t) (rounded - (intpart[0]*100));
 800a472:	697b      	ldr	r3, [r7, #20]
 800a474:	b2da      	uxtb	r2, r3
 800a476:	68bb      	ldr	r3, [r7, #8]
 800a478:	681b      	ldr	r3, [r3, #0]
 800a47a:	b2db      	uxtb	r3, r3
 800a47c:	2164      	movs	r1, #100	@ 0x64
 800a47e:	434b      	muls	r3, r1
 800a480:	b2db      	uxtb	r3, r3
 800a482:	1ad3      	subs	r3, r2, r3
 800a484:	b2da      	uxtb	r2, r3
 800a486:	687b      	ldr	r3, [r7, #4]
 800a488:	701a      	strb	r2, [r3, #0]
}
 800a48a:	46c0      	nop			@ (mov r8, r8)
 800a48c:	46bd      	mov	sp, r7
 800a48e:	b006      	add	sp, #24
 800a490:	bd80      	pop	{r7, pc}
 800a492:	46c0      	nop			@ (mov r8, r8)
 800a494:	42c80000 	.word	0x42c80000

0800a498 <floatToIntAndFrac1dp>:
// The float input must be positive and fit in a uint32.
// e.g. to print the result: printf("%i.%i\n", intpart, fracpart1dp);
// To convert to float: intpart + (fracpart1dp/10.0)
void floatToIntAndFrac1dp(float positiveValue, uint32_t *intpart,
                          uint8_t *fracpart1dp)
{
 800a498:	b580      	push	{r7, lr}
 800a49a:	b086      	sub	sp, #24
 800a49c:	af00      	add	r7, sp, #0
 800a49e:	60f8      	str	r0, [r7, #12]
 800a4a0:	60b9      	str	r1, [r7, #8]
 800a4a2:	607a      	str	r2, [r7, #4]
    uint32_t rounded = (uint32_t) roundf(positiveValue*10.0f);
 800a4a4:	4914      	ldr	r1, [pc, #80]	@ (800a4f8 <floatToIntAndFrac1dp+0x60>)
 800a4a6:	68f8      	ldr	r0, [r7, #12]
 800a4a8:	f7f6 fd7a 	bl	8000fa0 <__aeabi_fmul>
 800a4ac:	1c03      	adds	r3, r0, #0
 800a4ae:	1c18      	adds	r0, r3, #0
 800a4b0:	f014 ff0c 	bl	801f2cc <roundf>
 800a4b4:	1c03      	adds	r3, r0, #0
 800a4b6:	1c18      	adds	r0, r3, #0
 800a4b8:	f7f6 f8b0 	bl	800061c <__aeabi_f2uiz>
 800a4bc:	0003      	movs	r3, r0
 800a4be:	617b      	str	r3, [r7, #20]
    intpart[0] = rounded/10;
 800a4c0:	697b      	ldr	r3, [r7, #20]
 800a4c2:	210a      	movs	r1, #10
 800a4c4:	0018      	movs	r0, r3
 800a4c6:	f7f5 fe6d 	bl	80001a4 <__udivsi3>
 800a4ca:	0003      	movs	r3, r0
 800a4cc:	001a      	movs	r2, r3
 800a4ce:	68bb      	ldr	r3, [r7, #8]
 800a4d0:	601a      	str	r2, [r3, #0]
    fracpart1dp[0] = (uint8_t) (rounded - (intpart[0]*10));
 800a4d2:	697b      	ldr	r3, [r7, #20]
 800a4d4:	b2da      	uxtb	r2, r3
 800a4d6:	68bb      	ldr	r3, [r7, #8]
 800a4d8:	681b      	ldr	r3, [r3, #0]
 800a4da:	b2db      	uxtb	r3, r3
 800a4dc:	1c19      	adds	r1, r3, #0
 800a4de:	0089      	lsls	r1, r1, #2
 800a4e0:	18cb      	adds	r3, r1, r3
 800a4e2:	18db      	adds	r3, r3, r3
 800a4e4:	b2db      	uxtb	r3, r3
 800a4e6:	1ad3      	subs	r3, r2, r3
 800a4e8:	b2da      	uxtb	r2, r3
 800a4ea:	687b      	ldr	r3, [r7, #4]
 800a4ec:	701a      	strb	r2, [r3, #0]
}
 800a4ee:	46c0      	nop			@ (mov r8, r8)
 800a4f0:	46bd      	mov	sp, r7
 800a4f2:	b006      	add	sp, #24
 800a4f4:	bd80      	pop	{r7, pc}
 800a4f6:	46c0      	nop			@ (mov r8, r8)
 800a4f8:	41200000 	.word	0x41200000

0800a4fc <sumToIntAverage>:

// Convert an accumulated sum into an average value, in (integer, fractional) format.
void sumToIntAverage(uint8_t * intpart, uint8_t * fracpart1dp, const int32_t intSum,
                     const int32_t frac1dpSum, const uint32_t sumCount)
{
 800a4fc:	b590      	push	{r4, r7, lr}
 800a4fe:	b087      	sub	sp, #28
 800a500:	af00      	add	r7, sp, #0
 800a502:	60f8      	str	r0, [r7, #12]
 800a504:	60b9      	str	r1, [r7, #8]
 800a506:	607a      	str	r2, [r7, #4]
 800a508:	603b      	str	r3, [r7, #0]
    float splAverage = (((float) intSum) +
 800a50a:	6878      	ldr	r0, [r7, #4]
 800a50c:	f7f7 f860 	bl	80015d0 <__aeabi_i2f>
 800a510:	1c04      	adds	r4, r0, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 800a512:	6838      	ldr	r0, [r7, #0]
 800a514:	f7f7 f85c 	bl	80015d0 <__aeabi_i2f>
 800a518:	1c03      	adds	r3, r0, #0
 800a51a:	4918      	ldr	r1, [pc, #96]	@ (800a57c <sumToIntAverage+0x80>)
 800a51c:	1c18      	adds	r0, r3, #0
 800a51e:	f7f6 fb59 	bl	8000bd4 <__aeabi_fdiv>
 800a522:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 800a524:	1c19      	adds	r1, r3, #0
 800a526:	1c20      	adds	r0, r4, #0
 800a528:	f7f6 f9ca 	bl	80008c0 <__aeabi_fadd>
 800a52c:	1c03      	adds	r3, r0, #0
 800a52e:	1c1c      	adds	r4, r3, #0
                       (((float) frac1dpSum)/10.0f))/((float) sumCount);
 800a530:	6ab8      	ldr	r0, [r7, #40]	@ 0x28
 800a532:	f7f7 f899 	bl	8001668 <__aeabi_ui2f>
 800a536:	1c03      	adds	r3, r0, #0
    float splAverage = (((float) intSum) +
 800a538:	1c19      	adds	r1, r3, #0
 800a53a:	1c20      	adds	r0, r4, #0
 800a53c:	f7f6 fb4a 	bl	8000bd4 <__aeabi_fdiv>
 800a540:	1c03      	adds	r3, r0, #0
 800a542:	617b      	str	r3, [r7, #20]
    uint32_t intpart32 = 0;
 800a544:	2300      	movs	r3, #0
 800a546:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac1dp(splAverage, &intpart32, fracpart1dp);
 800a548:	68ba      	ldr	r2, [r7, #8]
 800a54a:	2310      	movs	r3, #16
 800a54c:	18f9      	adds	r1, r7, r3
 800a54e:	697b      	ldr	r3, [r7, #20]
 800a550:	1c18      	adds	r0, r3, #0
 800a552:	f7ff ffa1 	bl	800a498 <floatToIntAndFrac1dp>

    if (intpart32 > UINT8_MAX)
 800a556:	693b      	ldr	r3, [r7, #16]
 800a558:	2bff      	cmp	r3, #255	@ 0xff
 800a55a:	d906      	bls.n	800a56a <sumToIntAverage+0x6e>
    {
        intpart[0] = UINT8_MAX;
 800a55c:	68fb      	ldr	r3, [r7, #12]
 800a55e:	22ff      	movs	r2, #255	@ 0xff
 800a560:	701a      	strb	r2, [r3, #0]
        fracpart1dp[0] = 9;
 800a562:	68bb      	ldr	r3, [r7, #8]
 800a564:	2209      	movs	r2, #9
 800a566:	701a      	strb	r2, [r3, #0]
    }
    else
    {
        intpart[0] = (uint8_t) intpart32;
    }
}
 800a568:	e003      	b.n	800a572 <sumToIntAverage+0x76>
        intpart[0] = (uint8_t) intpart32;
 800a56a:	693b      	ldr	r3, [r7, #16]
 800a56c:	b2da      	uxtb	r2, r3
 800a56e:	68fb      	ldr	r3, [r7, #12]
 800a570:	701a      	strb	r2, [r3, #0]
}
 800a572:	46c0      	nop			@ (mov r8, r8)
 800a574:	46bd      	mov	sp, r7
 800a576:	b007      	add	sp, #28
 800a578:	bd90      	pop	{r4, r7, pc}
 800a57a:	46c0      	nop			@ (mov r8, r8)
 800a57c:	41200000 	.word	0x41200000

0800a580 <findMinMax>:


// Find the smallest and largest integers in an array.
void findMinMax(int32_t * min, int32_t * max, const int32_t * array,
                const uint32_t length)
{
 800a580:	b580      	push	{r7, lr}
 800a582:	b086      	sub	sp, #24
 800a584:	af00      	add	r7, sp, #0
 800a586:	60f8      	str	r0, [r7, #12]
 800a588:	60b9      	str	r1, [r7, #8]
 800a58a:	607a      	str	r2, [r7, #4]
 800a58c:	603b      	str	r3, [r7, #0]
    max[0] = INT32_MIN;
 800a58e:	68bb      	ldr	r3, [r7, #8]
 800a590:	2280      	movs	r2, #128	@ 0x80
 800a592:	0612      	lsls	r2, r2, #24
 800a594:	601a      	str	r2, [r3, #0]
    min[0] = INT32_MAX;
 800a596:	68fb      	ldr	r3, [r7, #12]
 800a598:	4a18      	ldr	r2, [pc, #96]	@ (800a5fc <findMinMax+0x7c>)
 800a59a:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 800a59c:	2300      	movs	r3, #0
 800a59e:	617b      	str	r3, [r7, #20]
 800a5a0:	e022      	b.n	800a5e8 <findMinMax+0x68>
    {
        if (array[i] < min[0])
 800a5a2:	697b      	ldr	r3, [r7, #20]
 800a5a4:	009b      	lsls	r3, r3, #2
 800a5a6:	687a      	ldr	r2, [r7, #4]
 800a5a8:	18d3      	adds	r3, r2, r3
 800a5aa:	681a      	ldr	r2, [r3, #0]
 800a5ac:	68fb      	ldr	r3, [r7, #12]
 800a5ae:	681b      	ldr	r3, [r3, #0]
 800a5b0:	429a      	cmp	r2, r3
 800a5b2:	da06      	bge.n	800a5c2 <findMinMax+0x42>
        {
            min[0] = array[i];
 800a5b4:	697b      	ldr	r3, [r7, #20]
 800a5b6:	009b      	lsls	r3, r3, #2
 800a5b8:	687a      	ldr	r2, [r7, #4]
 800a5ba:	18d3      	adds	r3, r2, r3
 800a5bc:	681a      	ldr	r2, [r3, #0]
 800a5be:	68fb      	ldr	r3, [r7, #12]
 800a5c0:	601a      	str	r2, [r3, #0]
        }
        if (array[i] > max[0])
 800a5c2:	697b      	ldr	r3, [r7, #20]
 800a5c4:	009b      	lsls	r3, r3, #2
 800a5c6:	687a      	ldr	r2, [r7, #4]
 800a5c8:	18d3      	adds	r3, r2, r3
 800a5ca:	681a      	ldr	r2, [r3, #0]
 800a5cc:	68bb      	ldr	r3, [r7, #8]
 800a5ce:	681b      	ldr	r3, [r3, #0]
 800a5d0:	429a      	cmp	r2, r3
 800a5d2:	dd06      	ble.n	800a5e2 <findMinMax+0x62>
        {
            max[0] = array[i];
 800a5d4:	697b      	ldr	r3, [r7, #20]
 800a5d6:	009b      	lsls	r3, r3, #2
 800a5d8:	687a      	ldr	r2, [r7, #4]
 800a5da:	18d3      	adds	r3, r2, r3
 800a5dc:	681a      	ldr	r2, [r3, #0]
 800a5de:	68bb      	ldr	r3, [r7, #8]
 800a5e0:	601a      	str	r2, [r3, #0]
    for (uint32_t i = 0; i < length; i++)
 800a5e2:	697b      	ldr	r3, [r7, #20]
 800a5e4:	3301      	adds	r3, #1
 800a5e6:	617b      	str	r3, [r7, #20]
 800a5e8:	697a      	ldr	r2, [r7, #20]
 800a5ea:	683b      	ldr	r3, [r7, #0]
 800a5ec:	429a      	cmp	r2, r3
 800a5ee:	d3d8      	bcc.n	800a5a2 <findMinMax+0x22>
        }
    }
}
 800a5f0:	46c0      	nop			@ (mov r8, r8)
 800a5f2:	46c0      	nop			@ (mov r8, r8)
 800a5f4:	46bd      	mov	sp, r7
 800a5f6:	b006      	add	sp, #24
 800a5f8:	bd80      	pop	{r7, pc}
 800a5fa:	46c0      	nop			@ (mov r8, r8)
 800a5fc:	7fffffff 	.word	0x7fffffff

0800a600 <getPo2factor>:

// Find the largest positive integer bitshift m, such that: smallVal*(2^m) <= bigVal.
// This is the largest upward bitshift that can be applied to smallVal such
// that it does not exceed bigVal.
uint32_t getPo2factor(uint32_t bigVal, uint32_t smallVal)
{
 800a600:	b580      	push	{r7, lr}
 800a602:	b084      	sub	sp, #16
 800a604:	af00      	add	r7, sp, #0
 800a606:	6078      	str	r0, [r7, #4]
 800a608:	6039      	str	r1, [r7, #0]
    uint32_t bitShift = 0;
 800a60a:	2300      	movs	r3, #0
 800a60c:	60fb      	str	r3, [r7, #12]
    if ((bigVal < smallVal) || (smallVal == 0))
 800a60e:	687a      	ldr	r2, [r7, #4]
 800a610:	683b      	ldr	r3, [r7, #0]
 800a612:	429a      	cmp	r2, r3
 800a614:	d302      	bcc.n	800a61c <getPo2factor+0x1c>
 800a616:	683b      	ldr	r3, [r7, #0]
 800a618:	2b00      	cmp	r3, #0
 800a61a:	d107      	bne.n	800a62c <getPo2factor+0x2c>
    {
        return 0;
 800a61c:	2300      	movs	r3, #0
 800a61e:	e00d      	b.n	800a63c <getPo2factor+0x3c>
    }
    while (bigVal >= smallVal)
    {
        bigVal = bigVal >> 1;
 800a620:	687b      	ldr	r3, [r7, #4]
 800a622:	085b      	lsrs	r3, r3, #1
 800a624:	607b      	str	r3, [r7, #4]
        bitShift++;
 800a626:	68fb      	ldr	r3, [r7, #12]
 800a628:	3301      	adds	r3, #1
 800a62a:	60fb      	str	r3, [r7, #12]
    while (bigVal >= smallVal)
 800a62c:	687a      	ldr	r2, [r7, #4]
 800a62e:	683b      	ldr	r3, [r7, #0]
 800a630:	429a      	cmp	r2, r3
 800a632:	d2f5      	bcs.n	800a620 <getPo2factor+0x20>
    }
    bitShift -= 1; // do not count the final shift
 800a634:	68fb      	ldr	r3, [r7, #12]
 800a636:	3b01      	subs	r3, #1
 800a638:	60fb      	str	r3, [r7, #12]
    return bitShift;
 800a63a:	68fb      	ldr	r3, [r7, #12]
}
 800a63c:	0018      	movs	r0, r3
 800a63e:	46bd      	mov	sp, r7
 800a640:	b004      	add	sp, #16
 800a642:	bd80      	pop	{r7, pc}

0800a644 <amplitudeDN_to_mPa>:
// The microphone scale factor is ik_mPa.
// Returns integer part and fractional part to 2 d.p.
// Given that ampDN is at most 2^24, the output will always fit in a uint16.
void amplitudeDN_to_mPa(const uint32_t ampDN, const float ik_mPa,
                        uint16_t * intAmp_mPa, uint8_t * frac2dpAmp_mPa)
{
 800a644:	b580      	push	{r7, lr}
 800a646:	b086      	sub	sp, #24
 800a648:	af00      	add	r7, sp, #0
 800a64a:	60f8      	str	r0, [r7, #12]
 800a64c:	60b9      	str	r1, [r7, #8]
 800a64e:	607a      	str	r2, [r7, #4]
 800a650:	603b      	str	r3, [r7, #0]
    float amp = ((float) ampDN)*ik_mPa;
 800a652:	68f8      	ldr	r0, [r7, #12]
 800a654:	f7f7 f808 	bl	8001668 <__aeabi_ui2f>
 800a658:	1c03      	adds	r3, r0, #0
 800a65a:	1c19      	adds	r1, r3, #0
 800a65c:	68b8      	ldr	r0, [r7, #8]
 800a65e:	f7f6 fc9f 	bl	8000fa0 <__aeabi_fmul>
 800a662:	1c03      	adds	r3, r0, #0
 800a664:	617b      	str	r3, [r7, #20]
    uint32_t intpart = 0;
 800a666:	2300      	movs	r3, #0
 800a668:	613b      	str	r3, [r7, #16]
    floatToIntAndFrac2dp(amp, &intpart, frac2dpAmp_mPa);
 800a66a:	683a      	ldr	r2, [r7, #0]
 800a66c:	2310      	movs	r3, #16
 800a66e:	18f9      	adds	r1, r7, r3
 800a670:	697b      	ldr	r3, [r7, #20]
 800a672:	1c18      	adds	r0, r3, #0
 800a674:	f7ff fee0 	bl	800a438 <floatToIntAndFrac2dp>
    intAmp_mPa[0] = (uint16_t) intpart;
 800a678:	693b      	ldr	r3, [r7, #16]
 800a67a:	b29a      	uxth	r2, r3
 800a67c:	687b      	ldr	r3, [r7, #4]
 800a67e:	801a      	strh	r2, [r3, #0]
}
 800a680:	46c0      	nop			@ (mov r8, r8)
 800a682:	46bd      	mov	sp, r7
 800a684:	b006      	add	sp, #24
 800a686:	bd80      	pop	{r7, pc}

0800a688 <scaleSPL>:
// Find the final SPL value in decibels by taking log, adding the terms accounting
// for the microphone parameters and (for weighted SPL) the weighting scale factor.
void scaleSPL(uint64_t sumSq, const int32_t dBscale_int, const int32_t dBscale_frac,
              const int32_t weightingInt, const int32_t weightingFrac,
              int32_t * SPLintegerPart, int32_t * SPLfractionalPart)
{
 800a688:	b580      	push	{r7, lr}
 800a68a:	b084      	sub	sp, #16
 800a68c:	af00      	add	r7, sp, #0
 800a68e:	60b8      	str	r0, [r7, #8]
 800a690:	60f9      	str	r1, [r7, #12]
 800a692:	607a      	str	r2, [r7, #4]
 800a694:	603b      	str	r3, [r7, #0]
    // Calculate: SPLvalue = (10.0*log10(sumSq)) + dBscale + weightTerm;
    efficient10log10(sumSq, SPLintegerPart, SPLfractionalPart);
 800a696:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a698:	6a3a      	ldr	r2, [r7, #32]
 800a69a:	68b8      	ldr	r0, [r7, #8]
 800a69c:	68f9      	ldr	r1, [r7, #12]
 800a69e:	f7fb ffc3 	bl	8006628 <efficient10log10>
    SPLintegerPart[0] = SPLintegerPart[0] + dBscale_int + weightingInt;
 800a6a2:	6a3b      	ldr	r3, [r7, #32]
 800a6a4:	681a      	ldr	r2, [r3, #0]
 800a6a6:	687b      	ldr	r3, [r7, #4]
 800a6a8:	18d2      	adds	r2, r2, r3
 800a6aa:	69bb      	ldr	r3, [r7, #24]
 800a6ac:	18d2      	adds	r2, r2, r3
 800a6ae:	6a3b      	ldr	r3, [r7, #32]
 800a6b0:	601a      	str	r2, [r3, #0]
    SPLfractionalPart[0] = SPLfractionalPart[0] + dBscale_frac + weightingFrac;
 800a6b2:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6b4:	681a      	ldr	r2, [r3, #0]
 800a6b6:	683b      	ldr	r3, [r7, #0]
 800a6b8:	18d2      	adds	r2, r2, r3
 800a6ba:	69fb      	ldr	r3, [r7, #28]
 800a6bc:	18d2      	adds	r2, r2, r3
 800a6be:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 800a6c0:	601a      	str	r2, [r3, #0]
    // Apply correction if fractional part is not in range 0->9:
    correctIntFracNumber(SPLintegerPart, SPLfractionalPart);
 800a6c2:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 800a6c4:	6a3b      	ldr	r3, [r7, #32]
 800a6c6:	0011      	movs	r1, r2
 800a6c8:	0018      	movs	r0, r3
 800a6ca:	f7fc f83d 	bl	8006748 <correctIntFracNumber>
}
 800a6ce:	46c0      	nop			@ (mov r8, r8)
 800a6d0:	46bd      	mov	sp, r7
 800a6d2:	b004      	add	sp, #16
 800a6d4:	bd80      	pop	{r7, pc}

0800a6d6 <decodeI2SdataLch>:
// Convert 24-bit I2S sound data into signed 32 bit numbers.
// The input I2S data are split across a uint16 array, and are left-channel only.
// inBuflen is simply the number of elements in inBuf
void decodeI2SdataLch(const uint16_t * inBuf, const uint32_t inBufLength,
                      int32_t * outBuf)
{
 800a6d6:	b580      	push	{r7, lr}
 800a6d8:	b086      	sub	sp, #24
 800a6da:	af00      	add	r7, sp, #0
 800a6dc:	60f8      	str	r0, [r7, #12]
 800a6de:	60b9      	str	r1, [r7, #8]
 800a6e0:	607a      	str	r2, [r7, #4]
    uint32_t outCount = 0;
 800a6e2:	2300      	movs	r3, #0
 800a6e4:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 800a6e6:	2300      	movs	r3, #0
 800a6e8:	613b      	str	r3, [r7, #16]
 800a6ea:	e019      	b.n	800a720 <decodeI2SdataLch+0x4a>
    {
        // join MS16bits and LS16bits, then shift the result down 8 bits because
        // it is a 24-bit value, rather than a 32-bit one.
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800a6ec:	693b      	ldr	r3, [r7, #16]
 800a6ee:	005b      	lsls	r3, r3, #1
 800a6f0:	68fa      	ldr	r2, [r7, #12]
 800a6f2:	18d3      	adds	r3, r2, r3
 800a6f4:	881b      	ldrh	r3, [r3, #0]
 800a6f6:	041b      	lsls	r3, r3, #16
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 800a6f8:	693a      	ldr	r2, [r7, #16]
 800a6fa:	3201      	adds	r2, #1
 800a6fc:	0052      	lsls	r2, r2, #1
 800a6fe:	68f9      	ldr	r1, [r7, #12]
 800a700:	188a      	adds	r2, r1, r2
 800a702:	8812      	ldrh	r2, [r2, #0]
 800a704:	4313      	orrs	r3, r2
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800a706:	0019      	movs	r1, r3
 800a708:	697b      	ldr	r3, [r7, #20]
 800a70a:	009b      	lsls	r3, r3, #2
 800a70c:	687a      	ldr	r2, [r7, #4]
 800a70e:	18d3      	adds	r3, r2, r3
                                      | ((uint32_t) inBuf[i+1]))) >> 8;
 800a710:	120a      	asrs	r2, r1, #8
        outBuf[outCount] = ((int32_t) ((((uint32_t) inBuf[i]) << 16)
 800a712:	601a      	str	r2, [r3, #0]
//          Info("input msw 0x%04X ", inBuf[i]);
//          Info("input lsw 0x%04X ", inBuf[i+1]);
//          Info("converted 0x%08X ", outBuf[outCount]);
//          Info("converted %d ", outBuf[outCount]);
//        }
        outCount++;
 800a714:	697b      	ldr	r3, [r7, #20]
 800a716:	3301      	adds	r3, #1
 800a718:	617b      	str	r3, [r7, #20]
    for (uint32_t i = 0; i < inBufLength; i += 4)
 800a71a:	693b      	ldr	r3, [r7, #16]
 800a71c:	3304      	adds	r3, #4
 800a71e:	613b      	str	r3, [r7, #16]
 800a720:	693a      	ldr	r2, [r7, #16]
 800a722:	68bb      	ldr	r3, [r7, #8]
 800a724:	429a      	cmp	r2, r3
 800a726:	d3e1      	bcc.n	800a6ec <decodeI2SdataLch+0x16>
    }
//    Info("decodeI2SdataLch converted %d buffer elements", outCount);
}
 800a728:	46c0      	nop			@ (mov r8, r8)
 800a72a:	46c0      	nop			@ (mov r8, r8)
 800a72c:	46bd      	mov	sp, r7
 800a72e:	b006      	add	sp, #24
 800a730:	bd80      	pop	{r7, pc}
	...

0800a734 <InitDone>:
static bool init = true;
static bool buttonHeld = false;
uint32_t ConfigStamp;
uint32_t PowerStamp = 0;

void InitDone(){
 800a734:	b580      	push	{r7, lr}
 800a736:	af00      	add	r7, sp, #0
  init = false;
 800a738:	4b02      	ldr	r3, [pc, #8]	@ (800a744 <InitDone+0x10>)
 800a73a:	2200      	movs	r2, #0
 800a73c:	701a      	strb	r2, [r3, #0]
}
 800a73e:	46c0      	nop			@ (mov r8, r8)
 800a740:	46bd      	mov	sp, r7
 800a742:	bd80      	pop	{r7, pc}
 800a744:	200000c4 	.word	0x200000c4

0800a748 <batteryChargeCheck>:

Battery_Status batteryChargeCheck(){
 800a748:	b580      	push	{r7, lr}
 800a74a:	b082      	sub	sp, #8
 800a74c:	af00      	add	r7, sp, #0
  Battery_Status status;
  float batteryCharge = ReadBatteryVoltage();
 800a74e:	f7fb fb25 	bl	8005d9c <ReadBatteryVoltage>
 800a752:	1c03      	adds	r3, r0, #0
 800a754:	603b      	str	r3, [r7, #0]
  if(batteryCharge < 3.5){
 800a756:	491f      	ldr	r1, [pc, #124]	@ (800a7d4 <batteryChargeCheck+0x8c>)
 800a758:	6838      	ldr	r0, [r7, #0]
 800a75a:	f7f5 fee9 	bl	8000530 <__aeabi_fcmplt>
 800a75e:	1e03      	subs	r3, r0, #0
 800a760:	d002      	beq.n	800a768 <batteryChargeCheck+0x20>
    status = BATTERY_CRITICAL;
 800a762:	1dfb      	adds	r3, r7, #7
 800a764:	2200      	movs	r2, #0
 800a766:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge < 3.7 && batteryCharge >= 3.5){
 800a768:	6838      	ldr	r0, [r7, #0]
 800a76a:	f7f8 fe7b 	bl	8003464 <__aeabi_f2d>
 800a76e:	4a1a      	ldr	r2, [pc, #104]	@ (800a7d8 <batteryChargeCheck+0x90>)
 800a770:	4b1a      	ldr	r3, [pc, #104]	@ (800a7dc <batteryChargeCheck+0x94>)
 800a772:	f7f5 fea3 	bl	80004bc <__aeabi_dcmplt>
 800a776:	1e03      	subs	r3, r0, #0
 800a778:	d008      	beq.n	800a78c <batteryChargeCheck+0x44>
 800a77a:	4916      	ldr	r1, [pc, #88]	@ (800a7d4 <batteryChargeCheck+0x8c>)
 800a77c:	6838      	ldr	r0, [r7, #0]
 800a77e:	f7f5 fef5 	bl	800056c <__aeabi_fcmpge>
 800a782:	1e03      	subs	r3, r0, #0
 800a784:	d002      	beq.n	800a78c <batteryChargeCheck+0x44>
    status = BATTERY_LOW;
 800a786:	1dfb      	adds	r3, r7, #7
 800a788:	2202      	movs	r2, #2
 800a78a:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge < 4.0 && batteryCharge >= 3.7){
 800a78c:	2181      	movs	r1, #129	@ 0x81
 800a78e:	05c9      	lsls	r1, r1, #23
 800a790:	6838      	ldr	r0, [r7, #0]
 800a792:	f7f5 fecd 	bl	8000530 <__aeabi_fcmplt>
 800a796:	1e03      	subs	r3, r0, #0
 800a798:	d00b      	beq.n	800a7b2 <batteryChargeCheck+0x6a>
 800a79a:	6838      	ldr	r0, [r7, #0]
 800a79c:	f7f8 fe62 	bl	8003464 <__aeabi_f2d>
 800a7a0:	4a0d      	ldr	r2, [pc, #52]	@ (800a7d8 <batteryChargeCheck+0x90>)
 800a7a2:	4b0e      	ldr	r3, [pc, #56]	@ (800a7dc <batteryChargeCheck+0x94>)
 800a7a4:	f7f5 fea8 	bl	80004f8 <__aeabi_dcmpge>
 800a7a8:	1e03      	subs	r3, r0, #0
 800a7aa:	d002      	beq.n	800a7b2 <batteryChargeCheck+0x6a>
    status = BATTERY_GOOD;
 800a7ac:	1dfb      	adds	r3, r7, #7
 800a7ae:	2203      	movs	r2, #3
 800a7b0:	701a      	strb	r2, [r3, #0]
  }
  if(batteryCharge >= 4.0){
 800a7b2:	2181      	movs	r1, #129	@ 0x81
 800a7b4:	05c9      	lsls	r1, r1, #23
 800a7b6:	6838      	ldr	r0, [r7, #0]
 800a7b8:	f7f5 fed8 	bl	800056c <__aeabi_fcmpge>
 800a7bc:	1e03      	subs	r3, r0, #0
 800a7be:	d002      	beq.n	800a7c6 <batteryChargeCheck+0x7e>
    status = BATTERY_FULL;
 800a7c0:	1dfb      	adds	r3, r7, #7
 800a7c2:	2204      	movs	r2, #4
 800a7c4:	701a      	strb	r2, [r3, #0]
  }
  return(status);
 800a7c6:	1dfb      	adds	r3, r7, #7
 800a7c8:	781b      	ldrb	r3, [r3, #0]
}
 800a7ca:	0018      	movs	r0, r3
 800a7cc:	46bd      	mov	sp, r7
 800a7ce:	b002      	add	sp, #8
 800a7d0:	bd80      	pop	{r7, pc}
 800a7d2:	46c0      	nop			@ (mov r8, r8)
 800a7d4:	40600000 	.word	0x40600000
 800a7d8:	9999999a 	.word	0x9999999a
 800a7dc:	400d9999 	.word	0x400d9999

0800a7e0 <SetStatusLED>:

void SetStatusLED(uint16_t red, uint16_t green, uint16_t blue){
 800a7e0:	b590      	push	{r4, r7, lr}
 800a7e2:	b083      	sub	sp, #12
 800a7e4:	af00      	add	r7, sp, #0
 800a7e6:	0004      	movs	r4, r0
 800a7e8:	0008      	movs	r0, r1
 800a7ea:	0011      	movs	r1, r2
 800a7ec:	1dbb      	adds	r3, r7, #6
 800a7ee:	1c22      	adds	r2, r4, #0
 800a7f0:	801a      	strh	r2, [r3, #0]
 800a7f2:	1d3b      	adds	r3, r7, #4
 800a7f4:	1c02      	adds	r2, r0, #0
 800a7f6:	801a      	strh	r2, [r3, #0]
 800a7f8:	1cbb      	adds	r3, r7, #2
 800a7fa:	1c0a      	adds	r2, r1, #0
 800a7fc:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 800a7fe:	4b0f      	ldr	r3, [pc, #60]	@ (800a83c <SetStatusLED+0x5c>)
 800a800:	781b      	ldrb	r3, [r3, #0]
 800a802:	2b00      	cmp	r3, #0
 800a804:	d107      	bne.n	800a816 <SetStatusLED+0x36>
 800a806:	4b0e      	ldr	r3, [pc, #56]	@ (800a840 <SetStatusLED+0x60>)
 800a808:	781b      	ldrb	r3, [r3, #0]
 800a80a:	2b00      	cmp	r3, #0
 800a80c:	d103      	bne.n	800a816 <SetStatusLED+0x36>
 800a80e:	4b0d      	ldr	r3, [pc, #52]	@ (800a844 <SetStatusLED+0x64>)
 800a810:	781b      	ldrb	r3, [r3, #0]
 800a812:	2b00      	cmp	r3, #0
 800a814:	d00e      	beq.n	800a834 <SetStatusLED+0x54>
    TIM2 -> CCR1 = red;
 800a816:	2380      	movs	r3, #128	@ 0x80
 800a818:	05db      	lsls	r3, r3, #23
 800a81a:	1dba      	adds	r2, r7, #6
 800a81c:	8812      	ldrh	r2, [r2, #0]
 800a81e:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM2 -> CCR3 = green;
 800a820:	2380      	movs	r3, #128	@ 0x80
 800a822:	05db      	lsls	r3, r3, #23
 800a824:	1d3a      	adds	r2, r7, #4
 800a826:	8812      	ldrh	r2, [r2, #0]
 800a828:	63da      	str	r2, [r3, #60]	@ 0x3c
    TIM2 -> CCR4 = blue;
 800a82a:	2380      	movs	r3, #128	@ 0x80
 800a82c:	05db      	lsls	r3, r3, #23
 800a82e:	1cba      	adds	r2, r7, #2
 800a830:	8812      	ldrh	r2, [r2, #0]
 800a832:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800a834:	46c0      	nop			@ (mov r8, r8)
 800a836:	46bd      	mov	sp, r7
 800a838:	b003      	add	sp, #12
 800a83a:	bd90      	pop	{r4, r7, pc}
 800a83c:	2000211d 	.word	0x2000211d
 800a840:	200000c4 	.word	0x200000c4
 800a844:	2000211e 	.word	0x2000211e

0800a848 <SetDBLED>:
// Sets dB LED to (RGB) color
void SetDBLED(bool red, bool green, bool blue){
 800a848:	b590      	push	{r4, r7, lr}
 800a84a:	b083      	sub	sp, #12
 800a84c:	af00      	add	r7, sp, #0
 800a84e:	0004      	movs	r4, r0
 800a850:	0008      	movs	r0, r1
 800a852:	0011      	movs	r1, r2
 800a854:	1dfb      	adds	r3, r7, #7
 800a856:	1c22      	adds	r2, r4, #0
 800a858:	701a      	strb	r2, [r3, #0]
 800a85a:	1dbb      	adds	r3, r7, #6
 800a85c:	1c02      	adds	r2, r0, #0
 800a85e:	701a      	strb	r2, [r3, #0]
 800a860:	1d7b      	adds	r3, r7, #5
 800a862:	1c0a      	adds	r2, r1, #0
 800a864:	701a      	strb	r2, [r3, #0]
  // RED LED
  if(usbPluggedIn || init || userToggle){
 800a866:	4b19      	ldr	r3, [pc, #100]	@ (800a8cc <SetDBLED+0x84>)
 800a868:	781b      	ldrb	r3, [r3, #0]
 800a86a:	2b00      	cmp	r3, #0
 800a86c:	d107      	bne.n	800a87e <SetDBLED+0x36>
 800a86e:	4b18      	ldr	r3, [pc, #96]	@ (800a8d0 <SetDBLED+0x88>)
 800a870:	781b      	ldrb	r3, [r3, #0]
 800a872:	2b00      	cmp	r3, #0
 800a874:	d103      	bne.n	800a87e <SetDBLED+0x36>
 800a876:	4b17      	ldr	r3, [pc, #92]	@ (800a8d4 <SetDBLED+0x8c>)
 800a878:	781b      	ldrb	r3, [r3, #0]
 800a87a:	2b00      	cmp	r3, #0
 800a87c:	d022      	beq.n	800a8c4 <SetDBLED+0x7c>
    HAL_GPIO_WritePin(MCU_LED_C_R_GPIO_Port, MCU_LED_C_R_Pin, !red);
 800a87e:	1dfb      	adds	r3, r7, #7
 800a880:	781b      	ldrb	r3, [r3, #0]
 800a882:	2201      	movs	r2, #1
 800a884:	4053      	eors	r3, r2
 800a886:	b2db      	uxtb	r3, r3
 800a888:	001a      	movs	r2, r3
 800a88a:	4b13      	ldr	r3, [pc, #76]	@ (800a8d8 <SetDBLED+0x90>)
 800a88c:	2101      	movs	r1, #1
 800a88e:	0018      	movs	r0, r3
 800a890:	f002 fd3f 	bl	800d312 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_G_GPIO_Port, MCU_LED_C_G_Pin, !green);
 800a894:	1dbb      	adds	r3, r7, #6
 800a896:	781b      	ldrb	r3, [r3, #0]
 800a898:	2201      	movs	r2, #1
 800a89a:	4053      	eors	r3, r2
 800a89c:	b2db      	uxtb	r3, r3
 800a89e:	001a      	movs	r2, r3
 800a8a0:	2380      	movs	r3, #128	@ 0x80
 800a8a2:	005b      	lsls	r3, r3, #1
 800a8a4:	480c      	ldr	r0, [pc, #48]	@ (800a8d8 <SetDBLED+0x90>)
 800a8a6:	0019      	movs	r1, r3
 800a8a8:	f002 fd33 	bl	800d312 <HAL_GPIO_WritePin>
    HAL_GPIO_WritePin(MCU_LED_C_B_GPIO_Port, MCU_LED_C_B_Pin, !blue);
 800a8ac:	1d7b      	adds	r3, r7, #5
 800a8ae:	781b      	ldrb	r3, [r3, #0]
 800a8b0:	2201      	movs	r2, #1
 800a8b2:	4053      	eors	r3, r2
 800a8b4:	b2db      	uxtb	r3, r3
 800a8b6:	001a      	movs	r2, r3
 800a8b8:	2380      	movs	r3, #128	@ 0x80
 800a8ba:	009b      	lsls	r3, r3, #2
 800a8bc:	4806      	ldr	r0, [pc, #24]	@ (800a8d8 <SetDBLED+0x90>)
 800a8be:	0019      	movs	r1, r3
 800a8c0:	f002 fd27 	bl	800d312 <HAL_GPIO_WritePin>
  }
}
 800a8c4:	46c0      	nop			@ (mov r8, r8)
 800a8c6:	46bd      	mov	sp, r7
 800a8c8:	b003      	add	sp, #12
 800a8ca:	bd90      	pop	{r4, r7, pc}
 800a8cc:	2000211d 	.word	0x2000211d
 800a8d0:	200000c4 	.word	0x200000c4
 800a8d4:	2000211e 	.word	0x2000211e
 800a8d8:	50000400 	.word	0x50000400

0800a8dc <SetVocLED>:
// Sets VOC LED to (RGB) color
void SetVocLED(uint16_t red, uint16_t green, uint16_t blue){
 800a8dc:	b590      	push	{r4, r7, lr}
 800a8de:	b083      	sub	sp, #12
 800a8e0:	af00      	add	r7, sp, #0
 800a8e2:	0004      	movs	r4, r0
 800a8e4:	0008      	movs	r0, r1
 800a8e6:	0011      	movs	r1, r2
 800a8e8:	1dbb      	adds	r3, r7, #6
 800a8ea:	1c22      	adds	r2, r4, #0
 800a8ec:	801a      	strh	r2, [r3, #0]
 800a8ee:	1d3b      	adds	r3, r7, #4
 800a8f0:	1c02      	adds	r2, r0, #0
 800a8f2:	801a      	strh	r2, [r3, #0]
 800a8f4:	1cbb      	adds	r3, r7, #2
 800a8f6:	1c0a      	adds	r2, r1, #0
 800a8f8:	801a      	strh	r2, [r3, #0]
  if(usbPluggedIn || init || userToggle){
 800a8fa:	4b0e      	ldr	r3, [pc, #56]	@ (800a934 <SetVocLED+0x58>)
 800a8fc:	781b      	ldrb	r3, [r3, #0]
 800a8fe:	2b00      	cmp	r3, #0
 800a900:	d107      	bne.n	800a912 <SetVocLED+0x36>
 800a902:	4b0d      	ldr	r3, [pc, #52]	@ (800a938 <SetVocLED+0x5c>)
 800a904:	781b      	ldrb	r3, [r3, #0]
 800a906:	2b00      	cmp	r3, #0
 800a908:	d103      	bne.n	800a912 <SetVocLED+0x36>
 800a90a:	4b0c      	ldr	r3, [pc, #48]	@ (800a93c <SetVocLED+0x60>)
 800a90c:	781b      	ldrb	r3, [r3, #0]
 800a90e:	2b00      	cmp	r3, #0
 800a910:	d00b      	beq.n	800a92a <SetVocLED+0x4e>
    TIM3 -> CCR1 = red;
 800a912:	4b0b      	ldr	r3, [pc, #44]	@ (800a940 <SetVocLED+0x64>)
 800a914:	1dba      	adds	r2, r7, #6
 800a916:	8812      	ldrh	r2, [r2, #0]
 800a918:	635a      	str	r2, [r3, #52]	@ 0x34
    TIM3 -> CCR2 = green;
 800a91a:	4b09      	ldr	r3, [pc, #36]	@ (800a940 <SetVocLED+0x64>)
 800a91c:	1d3a      	adds	r2, r7, #4
 800a91e:	8812      	ldrh	r2, [r2, #0]
 800a920:	639a      	str	r2, [r3, #56]	@ 0x38
    TIM3 -> CCR3 = blue;
 800a922:	4b07      	ldr	r3, [pc, #28]	@ (800a940 <SetVocLED+0x64>)
 800a924:	1cba      	adds	r2, r7, #2
 800a926:	8812      	ldrh	r2, [r2, #0]
 800a928:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800a92a:	46c0      	nop			@ (mov r8, r8)
 800a92c:	46bd      	mov	sp, r7
 800a92e:	b003      	add	sp, #12
 800a930:	bd90      	pop	{r4, r7, pc}
 800a932:	46c0      	nop			@ (mov r8, r8)
 800a934:	2000211d 	.word	0x2000211d
 800a938:	200000c4 	.word	0x200000c4
 800a93c:	2000211e 	.word	0x2000211e
 800a940:	40000400 	.word	0x40000400

0800a944 <SetMeasurementIndicator>:
void SetMeasurementIndicator(){
 800a944:	b580      	push	{r7, lr}
 800a946:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800a948:	4b07      	ldr	r3, [pc, #28]	@ (800a968 <SetMeasurementIndicator+0x24>)
 800a94a:	781b      	ldrb	r3, [r3, #0]
 800a94c:	2b00      	cmp	r3, #0
 800a94e:	d103      	bne.n	800a958 <SetMeasurementIndicator+0x14>
 800a950:	4b06      	ldr	r3, [pc, #24]	@ (800a96c <SetMeasurementIndicator+0x28>)
 800a952:	781b      	ldrb	r3, [r3, #0]
 800a954:	2b00      	cmp	r3, #0
 800a956:	d003      	beq.n	800a960 <SetMeasurementIndicator+0x1c>
    TIM2 -> CCR3 = LED_ON;
 800a958:	2380      	movs	r3, #128	@ 0x80
 800a95a:	05db      	lsls	r3, r3, #23
 800a95c:	4a04      	ldr	r2, [pc, #16]	@ (800a970 <SetMeasurementIndicator+0x2c>)
 800a95e:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800a960:	46c0      	nop			@ (mov r8, r8)
 800a962:	46bd      	mov	sp, r7
 800a964:	bd80      	pop	{r7, pc}
 800a966:	46c0      	nop			@ (mov r8, r8)
 800a968:	2000211d 	.word	0x2000211d
 800a96c:	2000211e 	.word	0x2000211e
 800a970:	00000bb8 	.word	0x00000bb8

0800a974 <ResetMeasurementIndicator>:
void ResetMeasurementIndicator(){
 800a974:	b580      	push	{r7, lr}
 800a976:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800a978:	4b07      	ldr	r3, [pc, #28]	@ (800a998 <ResetMeasurementIndicator+0x24>)
 800a97a:	781b      	ldrb	r3, [r3, #0]
 800a97c:	2b00      	cmp	r3, #0
 800a97e:	d103      	bne.n	800a988 <ResetMeasurementIndicator+0x14>
 800a980:	4b06      	ldr	r3, [pc, #24]	@ (800a99c <ResetMeasurementIndicator+0x28>)
 800a982:	781b      	ldrb	r3, [r3, #0]
 800a984:	2b00      	cmp	r3, #0
 800a986:	d004      	beq.n	800a992 <ResetMeasurementIndicator+0x1e>
    TIM2 -> CCR3 = LED_OFF;
 800a988:	2380      	movs	r3, #128	@ 0x80
 800a98a:	05db      	lsls	r3, r3, #23
 800a98c:	22fa      	movs	r2, #250	@ 0xfa
 800a98e:	0112      	lsls	r2, r2, #4
 800a990:	63da      	str	r2, [r3, #60]	@ 0x3c
  }
}
 800a992:	46c0      	nop			@ (mov r8, r8)
 800a994:	46bd      	mov	sp, r7
 800a996:	bd80      	pop	{r7, pc}
 800a998:	2000211d 	.word	0x2000211d
 800a99c:	2000211e 	.word	0x2000211e

0800a9a0 <SetMICIndicator>:
void SetMICIndicator(){
 800a9a0:	b580      	push	{r7, lr}
 800a9a2:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800a9a4:	4b07      	ldr	r3, [pc, #28]	@ (800a9c4 <SetMICIndicator+0x24>)
 800a9a6:	781b      	ldrb	r3, [r3, #0]
 800a9a8:	2b00      	cmp	r3, #0
 800a9aa:	d103      	bne.n	800a9b4 <SetMICIndicator+0x14>
 800a9ac:	4b06      	ldr	r3, [pc, #24]	@ (800a9c8 <SetMICIndicator+0x28>)
 800a9ae:	781b      	ldrb	r3, [r3, #0]
 800a9b0:	2b00      	cmp	r3, #0
 800a9b2:	d003      	beq.n	800a9bc <SetMICIndicator+0x1c>
    TIM2 -> CCR1 = LED_ON;
 800a9b4:	2380      	movs	r3, #128	@ 0x80
 800a9b6:	05db      	lsls	r3, r3, #23
 800a9b8:	4a04      	ldr	r2, [pc, #16]	@ (800a9cc <SetMICIndicator+0x2c>)
 800a9ba:	635a      	str	r2, [r3, #52]	@ 0x34
  }
}
 800a9bc:	46c0      	nop			@ (mov r8, r8)
 800a9be:	46bd      	mov	sp, r7
 800a9c0:	bd80      	pop	{r7, pc}
 800a9c2:	46c0      	nop			@ (mov r8, r8)
 800a9c4:	2000211d 	.word	0x2000211d
 800a9c8:	2000211e 	.word	0x2000211e
 800a9cc:	00000bb8 	.word	0x00000bb8

0800a9d0 <ResetMICIndicator>:
void ResetMICIndicator(){
 800a9d0:	b580      	push	{r7, lr}
 800a9d2:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800a9d4:	4b07      	ldr	r3, [pc, #28]	@ (800a9f4 <ResetMICIndicator+0x24>)
 800a9d6:	781b      	ldrb	r3, [r3, #0]
 800a9d8:	2b00      	cmp	r3, #0
 800a9da:	d103      	bne.n	800a9e4 <ResetMICIndicator+0x14>
 800a9dc:	4b06      	ldr	r3, [pc, #24]	@ (800a9f8 <ResetMICIndicator+0x28>)
 800a9de:	781b      	ldrb	r3, [r3, #0]
 800a9e0:	2b00      	cmp	r3, #0
 800a9e2:	d004      	beq.n	800a9ee <ResetMICIndicator+0x1e>
    TIM2 -> CCR1 = LED_OFF;
 800a9e4:	2380      	movs	r3, #128	@ 0x80
 800a9e6:	05db      	lsls	r3, r3, #23
 800a9e8:	22fa      	movs	r2, #250	@ 0xfa
 800a9ea:	0112      	lsls	r2, r2, #4
 800a9ec:	635a      	str	r2, [r3, #52]	@ 0x34
  }
}
 800a9ee:	46c0      	nop			@ (mov r8, r8)
 800a9f0:	46bd      	mov	sp, r7
 800a9f2:	bd80      	pop	{r7, pc}
 800a9f4:	2000211d 	.word	0x2000211d
 800a9f8:	2000211e 	.word	0x2000211e

0800a9fc <SetESPIndicator>:
void SetESPIndicator(){
 800a9fc:	b580      	push	{r7, lr}
 800a9fe:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800aa00:	4b07      	ldr	r3, [pc, #28]	@ (800aa20 <SetESPIndicator+0x24>)
 800aa02:	781b      	ldrb	r3, [r3, #0]
 800aa04:	2b00      	cmp	r3, #0
 800aa06:	d103      	bne.n	800aa10 <SetESPIndicator+0x14>
 800aa08:	4b06      	ldr	r3, [pc, #24]	@ (800aa24 <SetESPIndicator+0x28>)
 800aa0a:	781b      	ldrb	r3, [r3, #0]
 800aa0c:	2b00      	cmp	r3, #0
 800aa0e:	d003      	beq.n	800aa18 <SetESPIndicator+0x1c>
    TIM2 -> CCR4 = LED_ON;
 800aa10:	2380      	movs	r3, #128	@ 0x80
 800aa12:	05db      	lsls	r3, r3, #23
 800aa14:	4a04      	ldr	r2, [pc, #16]	@ (800aa28 <SetESPIndicator+0x2c>)
 800aa16:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800aa18:	46c0      	nop			@ (mov r8, r8)
 800aa1a:	46bd      	mov	sp, r7
 800aa1c:	bd80      	pop	{r7, pc}
 800aa1e:	46c0      	nop			@ (mov r8, r8)
 800aa20:	2000211d 	.word	0x2000211d
 800aa24:	2000211e 	.word	0x2000211e
 800aa28:	00000bb8 	.word	0x00000bb8

0800aa2c <ResetESPIndicator>:
void ResetESPIndicator(){
 800aa2c:	b580      	push	{r7, lr}
 800aa2e:	af00      	add	r7, sp, #0
  if(usbPluggedIn||userToggle){
 800aa30:	4b07      	ldr	r3, [pc, #28]	@ (800aa50 <ResetESPIndicator+0x24>)
 800aa32:	781b      	ldrb	r3, [r3, #0]
 800aa34:	2b00      	cmp	r3, #0
 800aa36:	d103      	bne.n	800aa40 <ResetESPIndicator+0x14>
 800aa38:	4b06      	ldr	r3, [pc, #24]	@ (800aa54 <ResetESPIndicator+0x28>)
 800aa3a:	781b      	ldrb	r3, [r3, #0]
 800aa3c:	2b00      	cmp	r3, #0
 800aa3e:	d004      	beq.n	800aa4a <ResetESPIndicator+0x1e>
    TIM2 -> CCR4 = LED_OFF;
 800aa40:	2380      	movs	r3, #128	@ 0x80
 800aa42:	05db      	lsls	r3, r3, #23
 800aa44:	22fa      	movs	r2, #250	@ 0xfa
 800aa46:	0112      	lsls	r2, r2, #4
 800aa48:	641a      	str	r2, [r3, #64]	@ 0x40
  }
}
 800aa4a:	46c0      	nop			@ (mov r8, r8)
 800aa4c:	46bd      	mov	sp, r7
 800aa4e:	bd80      	pop	{r7, pc}
 800aa50:	2000211d 	.word	0x2000211d
 800aa54:	2000211e 	.word	0x2000211e

0800aa58 <SetLEDsOff>:

// Sets all LEDs Off
void SetLEDsOff(void){
 800aa58:	b580      	push	{r7, lr}
 800aa5a:	af00      	add	r7, sp, #0
  SetStatusLED(LED_OFF,LED_OFF,LED_OFF);
 800aa5c:	23fa      	movs	r3, #250	@ 0xfa
 800aa5e:	011a      	lsls	r2, r3, #4
 800aa60:	23fa      	movs	r3, #250	@ 0xfa
 800aa62:	0119      	lsls	r1, r3, #4
 800aa64:	23fa      	movs	r3, #250	@ 0xfa
 800aa66:	011b      	lsls	r3, r3, #4
 800aa68:	0018      	movs	r0, r3
 800aa6a:	f7ff feb9 	bl	800a7e0 <SetStatusLED>
  SetDBLED(false,false,false);
 800aa6e:	2200      	movs	r2, #0
 800aa70:	2100      	movs	r1, #0
 800aa72:	2000      	movs	r0, #0
 800aa74:	f7ff fee8 	bl	800a848 <SetDBLED>
  SetVocLED(LED_OFF,LED_OFF,LED_OFF);
 800aa78:	23fa      	movs	r3, #250	@ 0xfa
 800aa7a:	011a      	lsls	r2, r3, #4
 800aa7c:	23fa      	movs	r3, #250	@ 0xfa
 800aa7e:	0119      	lsls	r1, r3, #4
 800aa80:	23fa      	movs	r3, #250	@ 0xfa
 800aa82:	011b      	lsls	r3, r3, #4
 800aa84:	0018      	movs	r0, r3
 800aa86:	f7ff ff29 	bl	800a8dc <SetVocLED>
return;
 800aa8a:	46c0      	nop			@ (mov r8, r8)
}
 800aa8c:	46bd      	mov	sp, r7
 800aa8e:	bd80      	pop	{r7, pc}

0800aa90 <powerCheck>:

Battery_Status powerCheck(){
 800aa90:	b590      	push	{r4, r7, lr}
 800aa92:	b083      	sub	sp, #12
 800aa94:	af00      	add	r7, sp, #0
  Battery_Status status;
  if(!Check_USB_PowerOn()){
 800aa96:	f7fb fa47 	bl	8005f28 <Check_USB_PowerOn>
 800aa9a:	0003      	movs	r3, r0
 800aa9c:	001a      	movs	r2, r3
 800aa9e:	2301      	movs	r3, #1
 800aaa0:	4053      	eors	r3, r2
 800aaa2:	b2db      	uxtb	r3, r3
 800aaa4:	2b00      	cmp	r3, #0
 800aaa6:	d005      	beq.n	800aab4 <powerCheck+0x24>
    status = batteryChargeCheck();
 800aaa8:	1dfc      	adds	r4, r7, #7
 800aaaa:	f7ff fe4d 	bl	800a748 <batteryChargeCheck>
 800aaae:	0003      	movs	r3, r0
 800aab0:	7023      	strb	r3, [r4, #0]
 800aab2:	e002      	b.n	800aaba <powerCheck+0x2a>
  }
  else{
    status = USB_PLUGGED_IN;
 800aab4:	1dfb      	adds	r3, r7, #7
 800aab6:	2201      	movs	r2, #1
 800aab8:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800aaba:	1dfb      	adds	r3, r7, #7
 800aabc:	781b      	ldrb	r3, [r3, #0]
}
 800aabe:	0018      	movs	r0, r3
 800aac0:	46bd      	mov	sp, r7
 800aac2:	b003      	add	sp, #12
 800aac4:	bd90      	pop	{r4, r7, pc}
	...

0800aac8 <powerDisplay>:

void powerDisplay(Battery_Status status){
 800aac8:	b580      	push	{r7, lr}
 800aaca:	b082      	sub	sp, #8
 800aacc:	af00      	add	r7, sp, #0
 800aace:	0002      	movs	r2, r0
 800aad0:	1dfb      	adds	r3, r7, #7
 800aad2:	701a      	strb	r2, [r3, #0]
  if(status == USB_PLUGGED_IN){
 800aad4:	1dfb      	adds	r3, r7, #7
 800aad6:	781b      	ldrb	r3, [r3, #0]
 800aad8:	2b01      	cmp	r3, #1
 800aada:	d105      	bne.n	800aae8 <powerDisplay+0x20>
    Debug("LEDS are okay");
 800aadc:	4a18      	ldr	r2, [pc, #96]	@ (800ab40 <powerDisplay+0x78>)
 800aade:	4b19      	ldr	r3, [pc, #100]	@ (800ab44 <powerDisplay+0x7c>)
 800aae0:	0019      	movs	r1, r3
 800aae2:	2003      	movs	r0, #3
 800aae4:	f000 fe1a 	bl	800b71c <CreateLine>

  }
  if(status == BATTERY_FULL){
 800aae8:	1dfb      	adds	r3, r7, #7
 800aaea:	781b      	ldrb	r3, [r3, #0]
 800aaec:	2b04      	cmp	r3, #4
 800aaee:	d105      	bne.n	800aafc <powerDisplay+0x34>
    Debug("Battery fully charged");
 800aaf0:	4a15      	ldr	r2, [pc, #84]	@ (800ab48 <powerDisplay+0x80>)
 800aaf2:	4b14      	ldr	r3, [pc, #80]	@ (800ab44 <powerDisplay+0x7c>)
 800aaf4:	0019      	movs	r1, r3
 800aaf6:	2003      	movs	r0, #3
 800aaf8:	f000 fe10 	bl	800b71c <CreateLine>
  }
  if(status == BATTERY_GOOD){
 800aafc:	1dfb      	adds	r3, r7, #7
 800aafe:	781b      	ldrb	r3, [r3, #0]
 800ab00:	2b03      	cmp	r3, #3
 800ab02:	d105      	bne.n	800ab10 <powerDisplay+0x48>
    Debug("Battery charge is doing well");
 800ab04:	4a11      	ldr	r2, [pc, #68]	@ (800ab4c <powerDisplay+0x84>)
 800ab06:	4b0f      	ldr	r3, [pc, #60]	@ (800ab44 <powerDisplay+0x7c>)
 800ab08:	0019      	movs	r1, r3
 800ab0a:	2003      	movs	r0, #3
 800ab0c:	f000 fe06 	bl	800b71c <CreateLine>
  }
  if(status == BATTERY_LOW){
 800ab10:	1dfb      	adds	r3, r7, #7
 800ab12:	781b      	ldrb	r3, [r3, #0]
 800ab14:	2b02      	cmp	r3, #2
 800ab16:	d105      	bne.n	800ab24 <powerDisplay+0x5c>
    Debug("Battery is getting low");
 800ab18:	4a0d      	ldr	r2, [pc, #52]	@ (800ab50 <powerDisplay+0x88>)
 800ab1a:	4b0a      	ldr	r3, [pc, #40]	@ (800ab44 <powerDisplay+0x7c>)
 800ab1c:	0019      	movs	r1, r3
 800ab1e:	2003      	movs	r0, #3
 800ab20:	f000 fdfc 	bl	800b71c <CreateLine>
  }
  if(status == BATTERY_CRITICAL){
 800ab24:	1dfb      	adds	r3, r7, #7
 800ab26:	781b      	ldrb	r3, [r3, #0]
 800ab28:	2b00      	cmp	r3, #0
 800ab2a:	d105      	bne.n	800ab38 <powerDisplay+0x70>
    Debug("Battery is critical, stop processes");
 800ab2c:	4a09      	ldr	r2, [pc, #36]	@ (800ab54 <powerDisplay+0x8c>)
 800ab2e:	4b05      	ldr	r3, [pc, #20]	@ (800ab44 <powerDisplay+0x7c>)
 800ab30:	0019      	movs	r1, r3
 800ab32:	2003      	movs	r0, #3
 800ab34:	f000 fdf2 	bl	800b71c <CreateLine>
  }
}
 800ab38:	46c0      	nop			@ (mov r8, r8)
 800ab3a:	46bd      	mov	sp, r7
 800ab3c:	b002      	add	sp, #8
 800ab3e:	bd80      	pop	{r7, pc}
 800ab40:	080203ec 	.word	0x080203ec
 800ab44:	080203fc 	.word	0x080203fc
 800ab48:	08020400 	.word	0x08020400
 800ab4c:	08020418 	.word	0x08020418
 800ab50:	08020438 	.word	0x08020438
 800ab54:	08020450 	.word	0x08020450

0800ab58 <configCheck>:

void configCheck(){
 800ab58:	b580      	push	{r7, lr}
 800ab5a:	af00      	add	r7, sp, #0
  if(BootButton_Pressed() && UserButton_Pressed()){
 800ab5c:	f7fb f9f3 	bl	8005f46 <BootButton_Pressed>
 800ab60:	1e03      	subs	r3, r0, #0
 800ab62:	d007      	beq.n	800ab74 <configCheck+0x1c>
 800ab64:	f7fb fa00 	bl	8005f68 <UserButton_Pressed>
 800ab68:	1e03      	subs	r3, r0, #0
 800ab6a:	d003      	beq.n	800ab74 <configCheck+0x1c>
    configSet = true;
 800ab6c:	4b3d      	ldr	r3, [pc, #244]	@ (800ac64 <configCheck+0x10c>)
 800ab6e:	2201      	movs	r2, #1
 800ab70:	701a      	strb	r2, [r3, #0]
 800ab72:	e00a      	b.n	800ab8a <configCheck+0x32>
  }
  else{
    configSet = false;
 800ab74:	4b3b      	ldr	r3, [pc, #236]	@ (800ac64 <configCheck+0x10c>)
 800ab76:	2200      	movs	r2, #0
 800ab78:	701a      	strb	r2, [r3, #0]
    ConfigStamp = HAL_GetTick() + 2000;
 800ab7a:	f001 f96b 	bl	800be54 <HAL_GetTick>
 800ab7e:	0003      	movs	r3, r0
 800ab80:	22fa      	movs	r2, #250	@ 0xfa
 800ab82:	00d2      	lsls	r2, r2, #3
 800ab84:	189a      	adds	r2, r3, r2
 800ab86:	4b38      	ldr	r3, [pc, #224]	@ (800ac68 <configCheck+0x110>)
 800ab88:	601a      	str	r2, [r3, #0]
  }
  if(configSet && TimestampIsReached(ConfigStamp)){
 800ab8a:	4b36      	ldr	r3, [pc, #216]	@ (800ac64 <configCheck+0x10c>)
 800ab8c:	781b      	ldrb	r3, [r3, #0]
 800ab8e:	2b00      	cmp	r3, #0
 800ab90:	d00d      	beq.n	800abae <configCheck+0x56>
 800ab92:	4b35      	ldr	r3, [pc, #212]	@ (800ac68 <configCheck+0x110>)
 800ab94:	681b      	ldr	r3, [r3, #0]
 800ab96:	0018      	movs	r0, r3
 800ab98:	f000 fd6a 	bl	800b670 <TimestampIsReached>
 800ab9c:	1e03      	subs	r3, r0, #0
 800ab9e:	d006      	beq.n	800abae <configCheck+0x56>
    SetConfigMode(); //Make config mode wifi
 800aba0:	f7f8 fec4 	bl	800392c <SetConfigMode>
    SetDBLED(true, true, true);
 800aba4:	2201      	movs	r2, #1
 800aba6:	2101      	movs	r1, #1
 800aba8:	2001      	movs	r0, #1
 800abaa:	f7ff fe4d 	bl	800a848 <SetDBLED>
  }
  if(!BootButton_Pressed() && UserButton_Pressed() && !buttonHeld){
 800abae:	f7fb f9ca 	bl	8005f46 <BootButton_Pressed>
 800abb2:	0003      	movs	r3, r0
 800abb4:	001a      	movs	r2, r3
 800abb6:	2301      	movs	r3, #1
 800abb8:	4053      	eors	r3, r2
 800abba:	b2db      	uxtb	r3, r3
 800abbc:	2b00      	cmp	r3, #0
 800abbe:	d01d      	beq.n	800abfc <configCheck+0xa4>
 800abc0:	f7fb f9d2 	bl	8005f68 <UserButton_Pressed>
 800abc4:	1e03      	subs	r3, r0, #0
 800abc6:	d019      	beq.n	800abfc <configCheck+0xa4>
 800abc8:	4b28      	ldr	r3, [pc, #160]	@ (800ac6c <configCheck+0x114>)
 800abca:	781b      	ldrb	r3, [r3, #0]
 800abcc:	2201      	movs	r2, #1
 800abce:	4053      	eors	r3, r2
 800abd0:	b2db      	uxtb	r3, r3
 800abd2:	2b00      	cmp	r3, #0
 800abd4:	d012      	beq.n	800abfc <configCheck+0xa4>
    SetLEDsOff();
 800abd6:	f7ff ff3f 	bl	800aa58 <SetLEDsOff>
    userToggle = !userToggle;
 800abda:	4b25      	ldr	r3, [pc, #148]	@ (800ac70 <configCheck+0x118>)
 800abdc:	781b      	ldrb	r3, [r3, #0]
 800abde:	1e5a      	subs	r2, r3, #1
 800abe0:	4193      	sbcs	r3, r2
 800abe2:	b2db      	uxtb	r3, r3
 800abe4:	2201      	movs	r2, #1
 800abe6:	4053      	eors	r3, r2
 800abe8:	b2db      	uxtb	r3, r3
 800abea:	1c1a      	adds	r2, r3, #0
 800abec:	2301      	movs	r3, #1
 800abee:	4013      	ands	r3, r2
 800abf0:	b2da      	uxtb	r2, r3
 800abf2:	4b1f      	ldr	r3, [pc, #124]	@ (800ac70 <configCheck+0x118>)
 800abf4:	701a      	strb	r2, [r3, #0]
    buttonHeld = true;
 800abf6:	4b1d      	ldr	r3, [pc, #116]	@ (800ac6c <configCheck+0x114>)
 800abf8:	2201      	movs	r2, #1
 800abfa:	701a      	strb	r2, [r3, #0]
  }
  if(!BootButton_Pressed() && !UserButton_Pressed()){
 800abfc:	f7fb f9a3 	bl	8005f46 <BootButton_Pressed>
 800ac00:	0003      	movs	r3, r0
 800ac02:	001a      	movs	r2, r3
 800ac04:	2301      	movs	r3, #1
 800ac06:	4053      	eors	r3, r2
 800ac08:	b2db      	uxtb	r3, r3
 800ac0a:	2b00      	cmp	r3, #0
 800ac0c:	d00b      	beq.n	800ac26 <configCheck+0xce>
 800ac0e:	f7fb f9ab 	bl	8005f68 <UserButton_Pressed>
 800ac12:	0003      	movs	r3, r0
 800ac14:	001a      	movs	r2, r3
 800ac16:	2301      	movs	r3, #1
 800ac18:	4053      	eors	r3, r2
 800ac1a:	b2db      	uxtb	r3, r3
 800ac1c:	2b00      	cmp	r3, #0
 800ac1e:	d002      	beq.n	800ac26 <configCheck+0xce>
    buttonHeld = false;
 800ac20:	4b12      	ldr	r3, [pc, #72]	@ (800ac6c <configCheck+0x114>)
 800ac22:	2200      	movs	r2, #0
 800ac24:	701a      	strb	r2, [r3, #0]
  }
  if(Check_USB_PowerOn()){
 800ac26:	f7fb f97f 	bl	8005f28 <Check_USB_PowerOn>
 800ac2a:	1e03      	subs	r3, r0, #0
 800ac2c:	d003      	beq.n	800ac36 <configCheck+0xde>
    usbPluggedIn = true;
 800ac2e:	4b11      	ldr	r3, [pc, #68]	@ (800ac74 <configCheck+0x11c>)
 800ac30:	2201      	movs	r2, #1
 800ac32:	701a      	strb	r2, [r3, #0]
    if(!userToggle && !init){
      SetLEDsOff();
    }
    usbPluggedIn = false;
  }
}
 800ac34:	e012      	b.n	800ac5c <configCheck+0x104>
    if(!userToggle && !init){
 800ac36:	4b0e      	ldr	r3, [pc, #56]	@ (800ac70 <configCheck+0x118>)
 800ac38:	781b      	ldrb	r3, [r3, #0]
 800ac3a:	2201      	movs	r2, #1
 800ac3c:	4053      	eors	r3, r2
 800ac3e:	b2db      	uxtb	r3, r3
 800ac40:	2b00      	cmp	r3, #0
 800ac42:	d008      	beq.n	800ac56 <configCheck+0xfe>
 800ac44:	4b0c      	ldr	r3, [pc, #48]	@ (800ac78 <configCheck+0x120>)
 800ac46:	781b      	ldrb	r3, [r3, #0]
 800ac48:	2201      	movs	r2, #1
 800ac4a:	4053      	eors	r3, r2
 800ac4c:	b2db      	uxtb	r3, r3
 800ac4e:	2b00      	cmp	r3, #0
 800ac50:	d001      	beq.n	800ac56 <configCheck+0xfe>
      SetLEDsOff();
 800ac52:	f7ff ff01 	bl	800aa58 <SetLEDsOff>
    usbPluggedIn = false;
 800ac56:	4b07      	ldr	r3, [pc, #28]	@ (800ac74 <configCheck+0x11c>)
 800ac58:	2200      	movs	r2, #0
 800ac5a:	701a      	strb	r2, [r3, #0]
}
 800ac5c:	46c0      	nop			@ (mov r8, r8)
 800ac5e:	46bd      	mov	sp, r7
 800ac60:	bd80      	pop	{r7, pc}
 800ac62:	46c0      	nop			@ (mov r8, r8)
 800ac64:	2000211c 	.word	0x2000211c
 800ac68:	20002120 	.word	0x20002120
 800ac6c:	2000211f 	.word	0x2000211f
 800ac70:	2000211e 	.word	0x2000211e
 800ac74:	2000211d 	.word	0x2000211d
 800ac78:	200000c4 	.word	0x200000c4

0800ac7c <Status_Upkeep>:
  RTC_SetWakeUpTimer(sleepTime);
  HAL_PWR_EnterSLEEPMode(PWR_MAINREGULATOR_ON,PWR_SLEEPENTRY_WFI);
  HAL_ResumeTick();
}

void Status_Upkeep(){
 800ac7c:	b580      	push	{r7, lr}
 800ac7e:	af00      	add	r7, sp, #0
  configCheck();
 800ac80:	f7ff ff6a 	bl	800ab58 <configCheck>
}
 800ac84:	46c0      	nop			@ (mov r8, r8)
 800ac86:	46bd      	mov	sp, r7
 800ac88:	bd80      	pop	{r7, pc}

0800ac8a <Battery_Upkeep>:

Battery_Status Battery_Upkeep(){
 800ac8a:	b590      	push	{r4, r7, lr}
 800ac8c:	b083      	sub	sp, #12
 800ac8e:	af00      	add	r7, sp, #0
  Battery_Status status;
  status = powerCheck();
 800ac90:	1dfc      	adds	r4, r7, #7
 800ac92:	f7ff fefd 	bl	800aa90 <powerCheck>
 800ac96:	0003      	movs	r3, r0
 800ac98:	7023      	strb	r3, [r4, #0]
  powerDisplay(status);  // output LEDs are okay
 800ac9a:	1dfb      	adds	r3, r7, #7
 800ac9c:	781b      	ldrb	r3, [r3, #0]
 800ac9e:	0018      	movs	r0, r3
 800aca0:	f7ff ff12 	bl	800aac8 <powerDisplay>
  return status;
 800aca4:	1dfb      	adds	r3, r7, #7
 800aca6:	781b      	ldrb	r3, [r3, #0]

}
 800aca8:	0018      	movs	r0, r3
 800acaa:	46bd      	mov	sp, r7
 800acac:	b003      	add	sp, #12
 800acae:	bd90      	pop	{r4, r7, pc}

0800acb0 <HAL_MspInit>:
/* USER CODE END 0 */
/**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 800acb0:	b580      	push	{r7, lr}
 800acb2:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800acb4:	4b07      	ldr	r3, [pc, #28]	@ (800acd4 <HAL_MspInit+0x24>)
 800acb6:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800acb8:	4b06      	ldr	r3, [pc, #24]	@ (800acd4 <HAL_MspInit+0x24>)
 800acba:	2101      	movs	r1, #1
 800acbc:	430a      	orrs	r2, r1
 800acbe:	635a      	str	r2, [r3, #52]	@ 0x34
  __HAL_RCC_PWR_CLK_ENABLE();
 800acc0:	4b04      	ldr	r3, [pc, #16]	@ (800acd4 <HAL_MspInit+0x24>)
 800acc2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800acc4:	4b03      	ldr	r3, [pc, #12]	@ (800acd4 <HAL_MspInit+0x24>)
 800acc6:	2180      	movs	r1, #128	@ 0x80
 800acc8:	0549      	lsls	r1, r1, #21
 800acca:	430a      	orrs	r2, r1
 800accc:	639a      	str	r2, [r3, #56]	@ 0x38
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800acce:	46c0      	nop			@ (mov r8, r8)
 800acd0:	46bd      	mov	sp, r7
 800acd2:	bd80      	pop	{r7, pc}
 800acd4:	40021000 	.word	0x40021000

0800acd8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable Interrupt.
  */
void NMI_Handler(void)
{
 800acd8:	b580      	push	{r7, lr}
 800acda:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
   while (1)
 800acdc:	46c0      	nop			@ (mov r8, r8)
 800acde:	e7fd      	b.n	800acdc <NMI_Handler+0x4>

0800ace0 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800ace0:	b580      	push	{r7, lr}
 800ace2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800ace4:	46c0      	nop			@ (mov r8, r8)
 800ace6:	e7fd      	b.n	800ace4 <HardFault_Handler+0x4>

0800ace8 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 800ace8:	b580      	push	{r7, lr}
 800acea:	af00      	add	r7, sp, #0

  /* USER CODE END SVC_IRQn 0 */
  /* USER CODE BEGIN SVC_IRQn 1 */

  /* USER CODE END SVC_IRQn 1 */
}
 800acec:	46c0      	nop			@ (mov r8, r8)
 800acee:	46bd      	mov	sp, r7
 800acf0:	bd80      	pop	{r7, pc}

0800acf2 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 800acf2:	b580      	push	{r7, lr}
 800acf4:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800acf6:	46c0      	nop			@ (mov r8, r8)
 800acf8:	46bd      	mov	sp, r7
 800acfa:	bd80      	pop	{r7, pc}

0800acfc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 800acfc:	b580      	push	{r7, lr}
 800acfe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 800ad00:	f001 f896 	bl	800be30 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800ad04:	46c0      	nop			@ (mov r8, r8)
 800ad06:	46bd      	mov	sp, r7
 800ad08:	bd80      	pop	{r7, pc}
	...

0800ad0c <DMA1_Channel2_3_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 2 and channel 3 interrupts.
  */
void DMA1_Channel2_3_IRQHandler(void)
{
 800ad0c:	b580      	push	{r7, lr}
 800ad0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 0 */

  /* USER CODE END DMA1_Channel2_3_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_i2c1_tx);
 800ad10:	4b05      	ldr	r3, [pc, #20]	@ (800ad28 <DMA1_Channel2_3_IRQHandler+0x1c>)
 800ad12:	0018      	movs	r0, r3
 800ad14:	f001 feab 	bl	800ca6e <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_i2c1_rx);
 800ad18:	4b04      	ldr	r3, [pc, #16]	@ (800ad2c <DMA1_Channel2_3_IRQHandler+0x20>)
 800ad1a:	0018      	movs	r0, r3
 800ad1c:	f001 fea7 	bl	800ca6e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel2_3_IRQn 1 */

  /* USER CODE END DMA1_Channel2_3_IRQn 1 */
}
 800ad20:	46c0      	nop			@ (mov r8, r8)
 800ad22:	46bd      	mov	sp, r7
 800ad24:	bd80      	pop	{r7, pc}
 800ad26:	46c0      	nop			@ (mov r8, r8)
 800ad28:	20000e0c 	.word	0x20000e0c
 800ad2c:	20000dc4 	.word	0x20000dc4

0800ad30 <DMA1_Channel4_5_6_7_IRQHandler>:

/**
  * @brief This function handles DMA1 channel 4, channel 5, channel 6 and channel 7 interrupts.
  */
void DMA1_Channel4_5_6_7_IRQHandler(void)
{
 800ad30:	b580      	push	{r7, lr}
 800ad32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 0 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_spi2_rx);
 800ad34:	4b07      	ldr	r3, [pc, #28]	@ (800ad54 <DMA1_Channel4_5_6_7_IRQHandler+0x24>)
 800ad36:	0018      	movs	r0, r3
 800ad38:	f001 fe99 	bl	800ca6e <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_rx);
 800ad3c:	4b06      	ldr	r3, [pc, #24]	@ (800ad58 <DMA1_Channel4_5_6_7_IRQHandler+0x28>)
 800ad3e:	0018      	movs	r0, r3
 800ad40:	f001 fe95 	bl	800ca6e <HAL_DMA_IRQHandler>
  HAL_DMA_IRQHandler(&hdma_usart4_tx);
 800ad44:	4b05      	ldr	r3, [pc, #20]	@ (800ad5c <DMA1_Channel4_5_6_7_IRQHandler+0x2c>)
 800ad46:	0018      	movs	r0, r3
 800ad48:	f001 fe91 	bl	800ca6e <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Channel4_5_6_7_IRQn 1 */

  /* USER CODE END DMA1_Channel4_5_6_7_IRQn 1 */
}
 800ad4c:	46c0      	nop			@ (mov r8, r8)
 800ad4e:	46bd      	mov	sp, r7
 800ad50:	bd80      	pop	{r7, pc}
 800ad52:	46c0      	nop			@ (mov r8, r8)
 800ad54:	20000e90 	.word	0x20000e90
 800ad58:	20002410 	.word	0x20002410
 800ad5c:	20002458 	.word	0x20002458

0800ad60 <USART4_5_IRQHandler>:

/**
  * @brief This function handles USART4 and USART5 interrupt.
  */
void USART4_5_IRQHandler(void)
{
 800ad60:	b580      	push	{r7, lr}
 800ad62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART4_5_IRQn 0 */

  /* USER CODE END USART4_5_IRQn 0 */
  HAL_UART_IRQHandler(&huart4);
 800ad64:	4b03      	ldr	r3, [pc, #12]	@ (800ad74 <USART4_5_IRQHandler+0x14>)
 800ad66:	0018      	movs	r0, r3
 800ad68:	f008 fe66 	bl	8013a38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART4_5_IRQn 1 */

  /* USER CODE END USART4_5_IRQn 1 */
}
 800ad6c:	46c0      	nop			@ (mov r8, r8)
 800ad6e:	46bd      	mov	sp, r7
 800ad70:	bd80      	pop	{r7, pc}
 800ad72:	46c0      	nop			@ (mov r8, r8)
 800ad74:	20002358 	.word	0x20002358

0800ad78 <I2C1_IRQHandler>:

/**
  * @brief This function handles I2C1 event global interrupt / I2C1 wake-up interrupt through EXTI line 23.
  */
void I2C1_IRQHandler(void)
{
 800ad78:	b580      	push	{r7, lr}
 800ad7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_IRQn 0 */

  /* USER CODE END I2C1_IRQn 0 */
  if (hi2c1.Instance->ISR & (I2C_FLAG_BERR | I2C_FLAG_ARLO | I2C_FLAG_OVR))
 800ad7c:	4b09      	ldr	r3, [pc, #36]	@ (800ada4 <I2C1_IRQHandler+0x2c>)
 800ad7e:	681b      	ldr	r3, [r3, #0]
 800ad80:	699a      	ldr	r2, [r3, #24]
 800ad82:	23e0      	movs	r3, #224	@ 0xe0
 800ad84:	00db      	lsls	r3, r3, #3
 800ad86:	4013      	ands	r3, r2
 800ad88:	d004      	beq.n	800ad94 <I2C1_IRQHandler+0x1c>
  {
    HAL_I2C_ER_IRQHandler(&hi2c1);
 800ad8a:	4b06      	ldr	r3, [pc, #24]	@ (800ada4 <I2C1_IRQHandler+0x2c>)
 800ad8c:	0018      	movs	r0, r3
 800ad8e:	f002 fd99 	bl	800d8c4 <HAL_I2C_ER_IRQHandler>
    HAL_I2C_EV_IRQHandler(&hi2c1);
  }
  /* USER CODE BEGIN I2C1_IRQn 1 */

  /* USER CODE END I2C1_IRQn 1 */
}
 800ad92:	e003      	b.n	800ad9c <I2C1_IRQHandler+0x24>
    HAL_I2C_EV_IRQHandler(&hi2c1);
 800ad94:	4b03      	ldr	r3, [pc, #12]	@ (800ada4 <I2C1_IRQHandler+0x2c>)
 800ad96:	0018      	movs	r0, r3
 800ad98:	f002 fd7a 	bl	800d890 <HAL_I2C_EV_IRQHandler>
}
 800ad9c:	46c0      	nop			@ (mov r8, r8)
 800ad9e:	46bd      	mov	sp, r7
 800ada0:	bd80      	pop	{r7, pc}
 800ada2:	46c0      	nop			@ (mov r8, r8)
 800ada4:	20000d1c 	.word	0x20000d1c

0800ada8 <USART1_IRQHandler>:

/**
  * @brief This function handles USART1 global interrupt / USART1 wake-up interrupt through EXTI line 25.
  */
void USART1_IRQHandler(void)
{
 800ada8:	b580      	push	{r7, lr}
 800adaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART1_IRQn 0 */

  /* USER CODE END USART1_IRQn 0 */
  HAL_UART_IRQHandler(&huart1);
 800adac:	4b03      	ldr	r3, [pc, #12]	@ (800adbc <USART1_IRQHandler+0x14>)
 800adae:	0018      	movs	r0, r3
 800adb0:	f008 fe42 	bl	8013a38 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART1_IRQn 1 */

  /* USER CODE END USART1_IRQn 1 */
}
 800adb4:	46c0      	nop			@ (mov r8, r8)
 800adb6:	46bd      	mov	sp, r7
 800adb8:	bd80      	pop	{r7, pc}
 800adba:	46c0      	nop			@ (mov r8, r8)
 800adbc:	200022a0 	.word	0x200022a0

0800adc0 <USB_IRQHandler>:

/**
  * @brief This function handles USB event interrupt / USB wake-up interrupt through EXTI line 18.
  */
void USB_IRQHandler(void)
{
 800adc0:	b580      	push	{r7, lr}
 800adc2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_IRQn 0 */

  /* USER CODE END USB_IRQn 0 */
  HAL_PCD_IRQHandler(&hpcd_USB_FS);
 800adc4:	4b03      	ldr	r3, [pc, #12]	@ (800add4 <USB_IRQHandler+0x14>)
 800adc6:	0018      	movs	r0, r3
 800adc8:	f004 ff08 	bl	800fbdc <HAL_PCD_IRQHandler>
  /* USER CODE BEGIN USB_IRQn 1 */

  /* USER CODE END USB_IRQn 1 */
}
 800adcc:	46c0      	nop			@ (mov r8, r8)
 800adce:	46bd      	mov	sp, r7
 800add0:	bd80      	pop	{r7, pc}
 800add2:	46c0      	nop			@ (mov r8, r8)
 800add4:	20003260 	.word	0x20003260

0800add8 <_getpid>:
void initialise_monitor_handles()
{
}

int _getpid(void)
{
 800add8:	b580      	push	{r7, lr}
 800adda:	af00      	add	r7, sp, #0
  return 1;
 800addc:	2301      	movs	r3, #1
}
 800adde:	0018      	movs	r0, r3
 800ade0:	46bd      	mov	sp, r7
 800ade2:	bd80      	pop	{r7, pc}

0800ade4 <_kill>:

int _kill(int pid, int sig)
{
 800ade4:	b580      	push	{r7, lr}
 800ade6:	b082      	sub	sp, #8
 800ade8:	af00      	add	r7, sp, #0
 800adea:	6078      	str	r0, [r7, #4]
 800adec:	6039      	str	r1, [r7, #0]
  (void)pid;
  (void)sig;
  errno = EINVAL;
 800adee:	f011 fc07 	bl	801c600 <__errno>
 800adf2:	0003      	movs	r3, r0
 800adf4:	2216      	movs	r2, #22
 800adf6:	601a      	str	r2, [r3, #0]
  return -1;
 800adf8:	2301      	movs	r3, #1
 800adfa:	425b      	negs	r3, r3
}
 800adfc:	0018      	movs	r0, r3
 800adfe:	46bd      	mov	sp, r7
 800ae00:	b002      	add	sp, #8
 800ae02:	bd80      	pop	{r7, pc}

0800ae04 <_exit>:

void _exit (int status)
{
 800ae04:	b580      	push	{r7, lr}
 800ae06:	b082      	sub	sp, #8
 800ae08:	af00      	add	r7, sp, #0
 800ae0a:	6078      	str	r0, [r7, #4]
  _kill(status, -1);
 800ae0c:	2301      	movs	r3, #1
 800ae0e:	425a      	negs	r2, r3
 800ae10:	687b      	ldr	r3, [r7, #4]
 800ae12:	0011      	movs	r1, r2
 800ae14:	0018      	movs	r0, r3
 800ae16:	f7ff ffe5 	bl	800ade4 <_kill>
  while (1) {}    /* Make sure we hang here */
 800ae1a:	46c0      	nop			@ (mov r8, r8)
 800ae1c:	e7fd      	b.n	800ae1a <_exit+0x16>

0800ae1e <_read>:
}

__attribute__((weak)) int _read(int file, char *ptr, int len)
{
 800ae1e:	b580      	push	{r7, lr}
 800ae20:	b086      	sub	sp, #24
 800ae22:	af00      	add	r7, sp, #0
 800ae24:	60f8      	str	r0, [r7, #12]
 800ae26:	60b9      	str	r1, [r7, #8]
 800ae28:	607a      	str	r2, [r7, #4]
  (void)file;
  int DataIdx;

  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ae2a:	2300      	movs	r3, #0
 800ae2c:	617b      	str	r3, [r7, #20]
 800ae2e:	e00a      	b.n	800ae46 <_read+0x28>
  {
    *ptr++ = __io_getchar();
 800ae30:	e000      	b.n	800ae34 <_read+0x16>
 800ae32:	bf00      	nop
 800ae34:	0001      	movs	r1, r0
 800ae36:	68bb      	ldr	r3, [r7, #8]
 800ae38:	1c5a      	adds	r2, r3, #1
 800ae3a:	60ba      	str	r2, [r7, #8]
 800ae3c:	b2ca      	uxtb	r2, r1
 800ae3e:	701a      	strb	r2, [r3, #0]
  for (DataIdx = 0; DataIdx < len; DataIdx++)
 800ae40:	697b      	ldr	r3, [r7, #20]
 800ae42:	3301      	adds	r3, #1
 800ae44:	617b      	str	r3, [r7, #20]
 800ae46:	697a      	ldr	r2, [r7, #20]
 800ae48:	687b      	ldr	r3, [r7, #4]
 800ae4a:	429a      	cmp	r2, r3
 800ae4c:	dbf0      	blt.n	800ae30 <_read+0x12>
  }

  return len;
 800ae4e:	687b      	ldr	r3, [r7, #4]
}
 800ae50:	0018      	movs	r0, r3
 800ae52:	46bd      	mov	sp, r7
 800ae54:	b006      	add	sp, #24
 800ae56:	bd80      	pop	{r7, pc}

0800ae58 <_close>:
  }
  return len;
}

int _close(int file)
{
 800ae58:	b580      	push	{r7, lr}
 800ae5a:	b082      	sub	sp, #8
 800ae5c:	af00      	add	r7, sp, #0
 800ae5e:	6078      	str	r0, [r7, #4]
  (void)file;
  return -1;
 800ae60:	2301      	movs	r3, #1
 800ae62:	425b      	negs	r3, r3
}
 800ae64:	0018      	movs	r0, r3
 800ae66:	46bd      	mov	sp, r7
 800ae68:	b002      	add	sp, #8
 800ae6a:	bd80      	pop	{r7, pc}

0800ae6c <_fstat>:


int _fstat(int file, struct stat *st)
{
 800ae6c:	b580      	push	{r7, lr}
 800ae6e:	b082      	sub	sp, #8
 800ae70:	af00      	add	r7, sp, #0
 800ae72:	6078      	str	r0, [r7, #4]
 800ae74:	6039      	str	r1, [r7, #0]
  (void)file;
  st->st_mode = S_IFCHR;
 800ae76:	683b      	ldr	r3, [r7, #0]
 800ae78:	2280      	movs	r2, #128	@ 0x80
 800ae7a:	0192      	lsls	r2, r2, #6
 800ae7c:	605a      	str	r2, [r3, #4]
  return 0;
 800ae7e:	2300      	movs	r3, #0
}
 800ae80:	0018      	movs	r0, r3
 800ae82:	46bd      	mov	sp, r7
 800ae84:	b002      	add	sp, #8
 800ae86:	bd80      	pop	{r7, pc}

0800ae88 <_isatty>:

int _isatty(int file)
{
 800ae88:	b580      	push	{r7, lr}
 800ae8a:	b082      	sub	sp, #8
 800ae8c:	af00      	add	r7, sp, #0
 800ae8e:	6078      	str	r0, [r7, #4]
  (void)file;
  return 1;
 800ae90:	2301      	movs	r3, #1
}
 800ae92:	0018      	movs	r0, r3
 800ae94:	46bd      	mov	sp, r7
 800ae96:	b002      	add	sp, #8
 800ae98:	bd80      	pop	{r7, pc}

0800ae9a <_lseek>:

int _lseek(int file, int ptr, int dir)
{
 800ae9a:	b580      	push	{r7, lr}
 800ae9c:	b084      	sub	sp, #16
 800ae9e:	af00      	add	r7, sp, #0
 800aea0:	60f8      	str	r0, [r7, #12]
 800aea2:	60b9      	str	r1, [r7, #8]
 800aea4:	607a      	str	r2, [r7, #4]
  (void)file;
  (void)ptr;
  (void)dir;
  return 0;
 800aea6:	2300      	movs	r3, #0
}
 800aea8:	0018      	movs	r0, r3
 800aeaa:	46bd      	mov	sp, r7
 800aeac:	b004      	add	sp, #16
 800aeae:	bd80      	pop	{r7, pc}

0800aeb0 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 800aeb0:	b580      	push	{r7, lr}
 800aeb2:	b086      	sub	sp, #24
 800aeb4:	af00      	add	r7, sp, #0
 800aeb6:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 800aeb8:	4a14      	ldr	r2, [pc, #80]	@ (800af0c <_sbrk+0x5c>)
 800aeba:	4b15      	ldr	r3, [pc, #84]	@ (800af10 <_sbrk+0x60>)
 800aebc:	1ad3      	subs	r3, r2, r3
 800aebe:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 800aec0:	697b      	ldr	r3, [r7, #20]
 800aec2:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 800aec4:	4b13      	ldr	r3, [pc, #76]	@ (800af14 <_sbrk+0x64>)
 800aec6:	681b      	ldr	r3, [r3, #0]
 800aec8:	2b00      	cmp	r3, #0
 800aeca:	d102      	bne.n	800aed2 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 800aecc:	4b11      	ldr	r3, [pc, #68]	@ (800af14 <_sbrk+0x64>)
 800aece:	4a12      	ldr	r2, [pc, #72]	@ (800af18 <_sbrk+0x68>)
 800aed0:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 800aed2:	4b10      	ldr	r3, [pc, #64]	@ (800af14 <_sbrk+0x64>)
 800aed4:	681a      	ldr	r2, [r3, #0]
 800aed6:	687b      	ldr	r3, [r7, #4]
 800aed8:	18d3      	adds	r3, r2, r3
 800aeda:	693a      	ldr	r2, [r7, #16]
 800aedc:	429a      	cmp	r2, r3
 800aede:	d207      	bcs.n	800aef0 <_sbrk+0x40>
  {
    errno = ENOMEM;
 800aee0:	f011 fb8e 	bl	801c600 <__errno>
 800aee4:	0003      	movs	r3, r0
 800aee6:	220c      	movs	r2, #12
 800aee8:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 800aeea:	2301      	movs	r3, #1
 800aeec:	425b      	negs	r3, r3
 800aeee:	e009      	b.n	800af04 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800aef0:	4b08      	ldr	r3, [pc, #32]	@ (800af14 <_sbrk+0x64>)
 800aef2:	681b      	ldr	r3, [r3, #0]
 800aef4:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 800aef6:	4b07      	ldr	r3, [pc, #28]	@ (800af14 <_sbrk+0x64>)
 800aef8:	681a      	ldr	r2, [r3, #0]
 800aefa:	687b      	ldr	r3, [r7, #4]
 800aefc:	18d2      	adds	r2, r2, r3
 800aefe:	4b05      	ldr	r3, [pc, #20]	@ (800af14 <_sbrk+0x64>)
 800af00:	601a      	str	r2, [r3, #0]

  return (void *)prev_heap_end;
 800af02:	68fb      	ldr	r3, [r7, #12]
}
 800af04:	0018      	movs	r0, r3
 800af06:	46bd      	mov	sp, r7
 800af08:	b006      	add	sp, #24
 800af0a:	bd80      	pop	{r7, pc}
 800af0c:	20005000 	.word	0x20005000
 800af10:	00000400 	.word	0x00000400
 800af14:	20002124 	.word	0x20002124
 800af18:	200038c0 	.word	0x200038c0

0800af1c <SystemInit>:
  * @brief  Setup the microcontroller system.
  * @param  None
  * @retval None
  */
void SystemInit (void)
{
 800af1c:	b580      	push	{r7, lr}
 800af1e:	af00      	add	r7, sp, #0
  /* Configure the Vector Table location add offset address ------------------*/
#if defined (USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800af20:	46c0      	nop			@ (mov r8, r8)
 800af22:	46bd      	mov	sp, r7
 800af24:	bd80      	pop	{r7, pc}
	...

0800af28 <MX_TIM2_Init>:
TIM_HandleTypeDef htim3;
TIM_HandleTypeDef htim6;

/* TIM2 init function */
void MX_TIM2_Init(void)
{
 800af28:	b580      	push	{r7, lr}
 800af2a:	b086      	sub	sp, #24
 800af2c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800af2e:	2310      	movs	r3, #16
 800af30:	18fb      	adds	r3, r7, r3
 800af32:	0018      	movs	r0, r3
 800af34:	2308      	movs	r3, #8
 800af36:	001a      	movs	r2, r3
 800af38:	2100      	movs	r1, #0
 800af3a:	f011 fabd 	bl	801c4b8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800af3e:	003b      	movs	r3, r7
 800af40:	0018      	movs	r0, r3
 800af42:	2310      	movs	r3, #16
 800af44:	001a      	movs	r2, r3
 800af46:	2100      	movs	r1, #0
 800af48:	f011 fab6 	bl	801c4b8 <memset>

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800af4c:	4b2e      	ldr	r3, [pc, #184]	@ (800b008 <MX_TIM2_Init+0xe0>)
 800af4e:	2280      	movs	r2, #128	@ 0x80
 800af50:	05d2      	lsls	r2, r2, #23
 800af52:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 0;
 800af54:	4b2c      	ldr	r3, [pc, #176]	@ (800b008 <MX_TIM2_Init+0xe0>)
 800af56:	2200      	movs	r2, #0
 800af58:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800af5a:	4b2b      	ldr	r3, [pc, #172]	@ (800b008 <MX_TIM2_Init+0xe0>)
 800af5c:	2200      	movs	r2, #0
 800af5e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 65535;
 800af60:	4b29      	ldr	r3, [pc, #164]	@ (800b008 <MX_TIM2_Init+0xe0>)
 800af62:	4a2a      	ldr	r2, [pc, #168]	@ (800b00c <MX_TIM2_Init+0xe4>)
 800af64:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800af66:	4b28      	ldr	r3, [pc, #160]	@ (800b008 <MX_TIM2_Init+0xe0>)
 800af68:	2200      	movs	r2, #0
 800af6a:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800af6c:	4b26      	ldr	r3, [pc, #152]	@ (800b008 <MX_TIM2_Init+0xe0>)
 800af6e:	2200      	movs	r2, #0
 800af70:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim2) != HAL_OK)
 800af72:	4b25      	ldr	r3, [pc, #148]	@ (800b008 <MX_TIM2_Init+0xe0>)
 800af74:	0018      	movs	r0, r3
 800af76:	f007 ff73 	bl	8012e60 <HAL_TIM_PWM_Init>
 800af7a:	1e03      	subs	r3, r0, #0
 800af7c:	d001      	beq.n	800af82 <MX_TIM2_Init+0x5a>
  {
    Error_Handler();
 800af7e:	f7fc fa51 	bl	8007424 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800af82:	2110      	movs	r1, #16
 800af84:	187b      	adds	r3, r7, r1
 800af86:	2200      	movs	r2, #0
 800af88:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800af8a:	187b      	adds	r3, r7, r1
 800af8c:	2200      	movs	r2, #0
 800af8e:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 800af90:	187a      	adds	r2, r7, r1
 800af92:	4b1d      	ldr	r3, [pc, #116]	@ (800b008 <MX_TIM2_Init+0xe0>)
 800af94:	0011      	movs	r1, r2
 800af96:	0018      	movs	r0, r3
 800af98:	f008 fa80 	bl	801349c <HAL_TIMEx_MasterConfigSynchronization>
 800af9c:	1e03      	subs	r3, r0, #0
 800af9e:	d001      	beq.n	800afa4 <MX_TIM2_Init+0x7c>
  {
    Error_Handler();
 800afa0:	f7fc fa40 	bl	8007424 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800afa4:	003b      	movs	r3, r7
 800afa6:	2260      	movs	r2, #96	@ 0x60
 800afa8:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800afaa:	003b      	movs	r3, r7
 800afac:	2200      	movs	r2, #0
 800afae:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800afb0:	003b      	movs	r3, r7
 800afb2:	2200      	movs	r2, #0
 800afb4:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800afb6:	003b      	movs	r3, r7
 800afb8:	2200      	movs	r2, #0
 800afba:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800afbc:	0039      	movs	r1, r7
 800afbe:	4b12      	ldr	r3, [pc, #72]	@ (800b008 <MX_TIM2_Init+0xe0>)
 800afc0:	2200      	movs	r2, #0
 800afc2:	0018      	movs	r0, r3
 800afc4:	f008 f81e 	bl	8013004 <HAL_TIM_PWM_ConfigChannel>
 800afc8:	1e03      	subs	r3, r0, #0
 800afca:	d001      	beq.n	800afd0 <MX_TIM2_Init+0xa8>
  {
    Error_Handler();
 800afcc:	f7fc fa2a 	bl	8007424 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800afd0:	0039      	movs	r1, r7
 800afd2:	4b0d      	ldr	r3, [pc, #52]	@ (800b008 <MX_TIM2_Init+0xe0>)
 800afd4:	2208      	movs	r2, #8
 800afd6:	0018      	movs	r0, r3
 800afd8:	f008 f814 	bl	8013004 <HAL_TIM_PWM_ConfigChannel>
 800afdc:	1e03      	subs	r3, r0, #0
 800afde:	d001      	beq.n	800afe4 <MX_TIM2_Init+0xbc>
  {
    Error_Handler();
 800afe0:	f7fc fa20 	bl	8007424 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim2, &sConfigOC, TIM_CHANNEL_4) != HAL_OK)
 800afe4:	0039      	movs	r1, r7
 800afe6:	4b08      	ldr	r3, [pc, #32]	@ (800b008 <MX_TIM2_Init+0xe0>)
 800afe8:	220c      	movs	r2, #12
 800afea:	0018      	movs	r0, r3
 800afec:	f008 f80a 	bl	8013004 <HAL_TIM_PWM_ConfigChannel>
 800aff0:	1e03      	subs	r3, r0, #0
 800aff2:	d001      	beq.n	800aff8 <MX_TIM2_Init+0xd0>
  {
    Error_Handler();
 800aff4:	f7fc fa16 	bl	8007424 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */
  HAL_TIM_MspPostInit(&htim2);
 800aff8:	4b03      	ldr	r3, [pc, #12]	@ (800b008 <MX_TIM2_Init+0xe0>)
 800affa:	0018      	movs	r0, r3
 800affc:	f000 f8fe 	bl	800b1fc <HAL_TIM_MspPostInit>

}
 800b000:	46c0      	nop			@ (mov r8, r8)
 800b002:	46bd      	mov	sp, r7
 800b004:	b006      	add	sp, #24
 800b006:	bd80      	pop	{r7, pc}
 800b008:	20002128 	.word	0x20002128
 800b00c:	0000ffff 	.word	0x0000ffff

0800b010 <MX_TIM3_Init>:
/* TIM3 init function */
void MX_TIM3_Init(void)
{
 800b010:	b580      	push	{r7, lr}
 800b012:	b086      	sub	sp, #24
 800b014:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b016:	2310      	movs	r3, #16
 800b018:	18fb      	adds	r3, r7, r3
 800b01a:	0018      	movs	r0, r3
 800b01c:	2308      	movs	r3, #8
 800b01e:	001a      	movs	r2, r3
 800b020:	2100      	movs	r1, #0
 800b022:	f011 fa49 	bl	801c4b8 <memset>
  TIM_OC_InitTypeDef sConfigOC = {0};
 800b026:	003b      	movs	r3, r7
 800b028:	0018      	movs	r0, r3
 800b02a:	2310      	movs	r3, #16
 800b02c:	001a      	movs	r2, r3
 800b02e:	2100      	movs	r1, #0
 800b030:	f011 fa42 	bl	801c4b8 <memset>

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 800b034:	4b32      	ldr	r3, [pc, #200]	@ (800b100 <MX_TIM3_Init+0xf0>)
 800b036:	4a33      	ldr	r2, [pc, #204]	@ (800b104 <MX_TIM3_Init+0xf4>)
 800b038:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 0;
 800b03a:	4b31      	ldr	r3, [pc, #196]	@ (800b100 <MX_TIM3_Init+0xf0>)
 800b03c:	2200      	movs	r2, #0
 800b03e:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b040:	4b2f      	ldr	r3, [pc, #188]	@ (800b100 <MX_TIM3_Init+0xf0>)
 800b042:	2200      	movs	r2, #0
 800b044:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 65535;
 800b046:	4b2e      	ldr	r3, [pc, #184]	@ (800b100 <MX_TIM3_Init+0xf0>)
 800b048:	4a2f      	ldr	r2, [pc, #188]	@ (800b108 <MX_TIM3_Init+0xf8>)
 800b04a:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800b04c:	4b2c      	ldr	r3, [pc, #176]	@ (800b100 <MX_TIM3_Init+0xf0>)
 800b04e:	2200      	movs	r2, #0
 800b050:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b052:	4b2b      	ldr	r3, [pc, #172]	@ (800b100 <MX_TIM3_Init+0xf0>)
 800b054:	2200      	movs	r2, #0
 800b056:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800b058:	4b29      	ldr	r3, [pc, #164]	@ (800b100 <MX_TIM3_Init+0xf0>)
 800b05a:	0018      	movs	r0, r3
 800b05c:	f007 ff00 	bl	8012e60 <HAL_TIM_PWM_Init>
 800b060:	1e03      	subs	r3, r0, #0
 800b062:	d001      	beq.n	800b068 <MX_TIM3_Init+0x58>
  {
    Error_Handler();
 800b064:	f7fc f9de 	bl	8007424 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b068:	2110      	movs	r1, #16
 800b06a:	187b      	adds	r3, r7, r1
 800b06c:	2200      	movs	r2, #0
 800b06e:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b070:	187b      	adds	r3, r7, r1
 800b072:	2200      	movs	r2, #0
 800b074:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800b076:	187a      	adds	r2, r7, r1
 800b078:	4b21      	ldr	r3, [pc, #132]	@ (800b100 <MX_TIM3_Init+0xf0>)
 800b07a:	0011      	movs	r1, r2
 800b07c:	0018      	movs	r0, r3
 800b07e:	f008 fa0d 	bl	801349c <HAL_TIMEx_MasterConfigSynchronization>
 800b082:	1e03      	subs	r3, r0, #0
 800b084:	d001      	beq.n	800b08a <MX_TIM3_Init+0x7a>
  {
    Error_Handler();
 800b086:	f7fc f9cd 	bl	8007424 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800b08a:	003b      	movs	r3, r7
 800b08c:	2260      	movs	r2, #96	@ 0x60
 800b08e:	601a      	str	r2, [r3, #0]
  sConfigOC.Pulse = 0;
 800b090:	003b      	movs	r3, r7
 800b092:	2200      	movs	r2, #0
 800b094:	605a      	str	r2, [r3, #4]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 800b096:	003b      	movs	r3, r7
 800b098:	2200      	movs	r2, #0
 800b09a:	609a      	str	r2, [r3, #8]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800b09c:	003b      	movs	r3, r7
 800b09e:	2200      	movs	r2, #0
 800b0a0:	60da      	str	r2, [r3, #12]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 800b0a2:	0039      	movs	r1, r7
 800b0a4:	4b16      	ldr	r3, [pc, #88]	@ (800b100 <MX_TIM3_Init+0xf0>)
 800b0a6:	2200      	movs	r2, #0
 800b0a8:	0018      	movs	r0, r3
 800b0aa:	f007 ffab 	bl	8013004 <HAL_TIM_PWM_ConfigChannel>
 800b0ae:	1e03      	subs	r3, r0, #0
 800b0b0:	d001      	beq.n	800b0b6 <MX_TIM3_Init+0xa6>
  {
    Error_Handler();
 800b0b2:	f7fc f9b7 	bl	8007424 <Error_Handler>
  }
  if (HAL_TIMEx_RemapConfig(&htim3, TIM3_TI1_GPIO) != HAL_OK)
 800b0b6:	4b12      	ldr	r3, [pc, #72]	@ (800b100 <MX_TIM3_Init+0xf0>)
 800b0b8:	2104      	movs	r1, #4
 800b0ba:	0018      	movs	r0, r3
 800b0bc:	f008 fa4c 	bl	8013558 <HAL_TIMEx_RemapConfig>
 800b0c0:	1e03      	subs	r3, r0, #0
 800b0c2:	d001      	beq.n	800b0c8 <MX_TIM3_Init+0xb8>
  {
    Error_Handler();
 800b0c4:	f7fc f9ae 	bl	8007424 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_2) != HAL_OK)
 800b0c8:	0039      	movs	r1, r7
 800b0ca:	4b0d      	ldr	r3, [pc, #52]	@ (800b100 <MX_TIM3_Init+0xf0>)
 800b0cc:	2204      	movs	r2, #4
 800b0ce:	0018      	movs	r0, r3
 800b0d0:	f007 ff98 	bl	8013004 <HAL_TIM_PWM_ConfigChannel>
 800b0d4:	1e03      	subs	r3, r0, #0
 800b0d6:	d001      	beq.n	800b0dc <MX_TIM3_Init+0xcc>
  {
    Error_Handler();
 800b0d8:	f7fc f9a4 	bl	8007424 <Error_Handler>
  }
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_3) != HAL_OK)
 800b0dc:	0039      	movs	r1, r7
 800b0de:	4b08      	ldr	r3, [pc, #32]	@ (800b100 <MX_TIM3_Init+0xf0>)
 800b0e0:	2208      	movs	r2, #8
 800b0e2:	0018      	movs	r0, r3
 800b0e4:	f007 ff8e 	bl	8013004 <HAL_TIM_PWM_ConfigChannel>
 800b0e8:	1e03      	subs	r3, r0, #0
 800b0ea:	d001      	beq.n	800b0f0 <MX_TIM3_Init+0xe0>
  {
    Error_Handler();
 800b0ec:	f7fc f99a 	bl	8007424 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800b0f0:	4b03      	ldr	r3, [pc, #12]	@ (800b100 <MX_TIM3_Init+0xf0>)
 800b0f2:	0018      	movs	r0, r3
 800b0f4:	f000 f882 	bl	800b1fc <HAL_TIM_MspPostInit>

}
 800b0f8:	46c0      	nop			@ (mov r8, r8)
 800b0fa:	46bd      	mov	sp, r7
 800b0fc:	b006      	add	sp, #24
 800b0fe:	bd80      	pop	{r7, pc}
 800b100:	20002168 	.word	0x20002168
 800b104:	40000400 	.word	0x40000400
 800b108:	0000ffff 	.word	0x0000ffff

0800b10c <MX_TIM6_Init>:
/* TIM6 init function */
void MX_TIM6_Init(void)
{
 800b10c:	b580      	push	{r7, lr}
 800b10e:	b082      	sub	sp, #8
 800b110:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM6_Init 0 */

  /* USER CODE END TIM6_Init 0 */

  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800b112:	003b      	movs	r3, r7
 800b114:	0018      	movs	r0, r3
 800b116:	2308      	movs	r3, #8
 800b118:	001a      	movs	r2, r3
 800b11a:	2100      	movs	r1, #0
 800b11c:	f011 f9cc 	bl	801c4b8 <memset>

  /* USER CODE BEGIN TIM6_Init 1 */

  /* USER CODE END TIM6_Init 1 */
  htim6.Instance = TIM6;
 800b120:	4b15      	ldr	r3, [pc, #84]	@ (800b178 <MX_TIM6_Init+0x6c>)
 800b122:	4a16      	ldr	r2, [pc, #88]	@ (800b17c <MX_TIM6_Init+0x70>)
 800b124:	601a      	str	r2, [r3, #0]
  htim6.Init.Prescaler = 10;
 800b126:	4b14      	ldr	r3, [pc, #80]	@ (800b178 <MX_TIM6_Init+0x6c>)
 800b128:	220a      	movs	r2, #10
 800b12a:	605a      	str	r2, [r3, #4]
  htim6.Init.CounterMode = TIM_COUNTERMODE_UP;
 800b12c:	4b12      	ldr	r3, [pc, #72]	@ (800b178 <MX_TIM6_Init+0x6c>)
 800b12e:	2200      	movs	r2, #0
 800b130:	609a      	str	r2, [r3, #8]
  htim6.Init.Period = 65535;
 800b132:	4b11      	ldr	r3, [pc, #68]	@ (800b178 <MX_TIM6_Init+0x6c>)
 800b134:	4a12      	ldr	r2, [pc, #72]	@ (800b180 <MX_TIM6_Init+0x74>)
 800b136:	60da      	str	r2, [r3, #12]
  htim6.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800b138:	4b0f      	ldr	r3, [pc, #60]	@ (800b178 <MX_TIM6_Init+0x6c>)
 800b13a:	2200      	movs	r2, #0
 800b13c:	615a      	str	r2, [r3, #20]
  if (HAL_TIM_Base_Init(&htim6) != HAL_OK)
 800b13e:	4b0e      	ldr	r3, [pc, #56]	@ (800b178 <MX_TIM6_Init+0x6c>)
 800b140:	0018      	movs	r0, r3
 800b142:	f007 fde5 	bl	8012d10 <HAL_TIM_Base_Init>
 800b146:	1e03      	subs	r3, r0, #0
 800b148:	d001      	beq.n	800b14e <MX_TIM6_Init+0x42>
  {
    Error_Handler();
 800b14a:	f7fc f96b 	bl	8007424 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800b14e:	003b      	movs	r3, r7
 800b150:	2200      	movs	r2, #0
 800b152:	601a      	str	r2, [r3, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800b154:	003b      	movs	r3, r7
 800b156:	2200      	movs	r2, #0
 800b158:	605a      	str	r2, [r3, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim6, &sMasterConfig) != HAL_OK)
 800b15a:	003a      	movs	r2, r7
 800b15c:	4b06      	ldr	r3, [pc, #24]	@ (800b178 <MX_TIM6_Init+0x6c>)
 800b15e:	0011      	movs	r1, r2
 800b160:	0018      	movs	r0, r3
 800b162:	f008 f99b 	bl	801349c <HAL_TIMEx_MasterConfigSynchronization>
 800b166:	1e03      	subs	r3, r0, #0
 800b168:	d001      	beq.n	800b16e <MX_TIM6_Init+0x62>
  {
    Error_Handler();
 800b16a:	f7fc f95b 	bl	8007424 <Error_Handler>
  }
  /* USER CODE BEGIN TIM6_Init 2 */

  /* USER CODE END TIM6_Init 2 */

}
 800b16e:	46c0      	nop			@ (mov r8, r8)
 800b170:	46bd      	mov	sp, r7
 800b172:	b002      	add	sp, #8
 800b174:	bd80      	pop	{r7, pc}
 800b176:	46c0      	nop			@ (mov r8, r8)
 800b178:	200021a8 	.word	0x200021a8
 800b17c:	40001000 	.word	0x40001000
 800b180:	0000ffff 	.word	0x0000ffff

0800b184 <HAL_TIM_PWM_MspInit>:

void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef* tim_pwmHandle)
{
 800b184:	b580      	push	{r7, lr}
 800b186:	b082      	sub	sp, #8
 800b188:	af00      	add	r7, sp, #0
 800b18a:	6078      	str	r0, [r7, #4]

  if(tim_pwmHandle->Instance==TIM2)
 800b18c:	687b      	ldr	r3, [r7, #4]
 800b18e:	681a      	ldr	r2, [r3, #0]
 800b190:	2380      	movs	r3, #128	@ 0x80
 800b192:	05db      	lsls	r3, r3, #23
 800b194:	429a      	cmp	r2, r3
 800b196:	d106      	bne.n	800b1a6 <HAL_TIM_PWM_MspInit+0x22>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* TIM2 clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800b198:	4b0a      	ldr	r3, [pc, #40]	@ (800b1c4 <HAL_TIM_PWM_MspInit+0x40>)
 800b19a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b19c:	4b09      	ldr	r3, [pc, #36]	@ (800b1c4 <HAL_TIM_PWM_MspInit+0x40>)
 800b19e:	2101      	movs	r1, #1
 800b1a0:	430a      	orrs	r2, r1
 800b1a2:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_TIM3_CLK_ENABLE();
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }
}
 800b1a4:	e00a      	b.n	800b1bc <HAL_TIM_PWM_MspInit+0x38>
  else if(tim_pwmHandle->Instance==TIM3)
 800b1a6:	687b      	ldr	r3, [r7, #4]
 800b1a8:	681b      	ldr	r3, [r3, #0]
 800b1aa:	4a07      	ldr	r2, [pc, #28]	@ (800b1c8 <HAL_TIM_PWM_MspInit+0x44>)
 800b1ac:	4293      	cmp	r3, r2
 800b1ae:	d105      	bne.n	800b1bc <HAL_TIM_PWM_MspInit+0x38>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800b1b0:	4b04      	ldr	r3, [pc, #16]	@ (800b1c4 <HAL_TIM_PWM_MspInit+0x40>)
 800b1b2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b1b4:	4b03      	ldr	r3, [pc, #12]	@ (800b1c4 <HAL_TIM_PWM_MspInit+0x40>)
 800b1b6:	2102      	movs	r1, #2
 800b1b8:	430a      	orrs	r2, r1
 800b1ba:	639a      	str	r2, [r3, #56]	@ 0x38
}
 800b1bc:	46c0      	nop			@ (mov r8, r8)
 800b1be:	46bd      	mov	sp, r7
 800b1c0:	b002      	add	sp, #8
 800b1c2:	bd80      	pop	{r7, pc}
 800b1c4:	40021000 	.word	0x40021000
 800b1c8:	40000400 	.word	0x40000400

0800b1cc <HAL_TIM_Base_MspInit>:

void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* tim_baseHandle)
{
 800b1cc:	b580      	push	{r7, lr}
 800b1ce:	b082      	sub	sp, #8
 800b1d0:	af00      	add	r7, sp, #0
 800b1d2:	6078      	str	r0, [r7, #4]

  if(tim_baseHandle->Instance==TIM6)
 800b1d4:	687b      	ldr	r3, [r7, #4]
 800b1d6:	681b      	ldr	r3, [r3, #0]
 800b1d8:	4a06      	ldr	r2, [pc, #24]	@ (800b1f4 <HAL_TIM_Base_MspInit+0x28>)
 800b1da:	4293      	cmp	r3, r2
 800b1dc:	d105      	bne.n	800b1ea <HAL_TIM_Base_MspInit+0x1e>
  {
  /* USER CODE BEGIN TIM6_MspInit 0 */

  /* USER CODE END TIM6_MspInit 0 */
    /* TIM6 clock enable */
    __HAL_RCC_TIM6_CLK_ENABLE();
 800b1de:	4b06      	ldr	r3, [pc, #24]	@ (800b1f8 <HAL_TIM_Base_MspInit+0x2c>)
 800b1e0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b1e2:	4b05      	ldr	r3, [pc, #20]	@ (800b1f8 <HAL_TIM_Base_MspInit+0x2c>)
 800b1e4:	2110      	movs	r1, #16
 800b1e6:	430a      	orrs	r2, r1
 800b1e8:	639a      	str	r2, [r3, #56]	@ 0x38
  /* USER CODE BEGIN TIM6_MspInit 1 */

  /* USER CODE END TIM6_MspInit 1 */
  }
}
 800b1ea:	46c0      	nop			@ (mov r8, r8)
 800b1ec:	46bd      	mov	sp, r7
 800b1ee:	b002      	add	sp, #8
 800b1f0:	bd80      	pop	{r7, pc}
 800b1f2:	46c0      	nop			@ (mov r8, r8)
 800b1f4:	40001000 	.word	0x40001000
 800b1f8:	40021000 	.word	0x40021000

0800b1fc <HAL_TIM_MspPostInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef* timHandle)
{
 800b1fc:	b590      	push	{r4, r7, lr}
 800b1fe:	b08b      	sub	sp, #44	@ 0x2c
 800b200:	af00      	add	r7, sp, #0
 800b202:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b204:	2414      	movs	r4, #20
 800b206:	193b      	adds	r3, r7, r4
 800b208:	0018      	movs	r0, r3
 800b20a:	2314      	movs	r3, #20
 800b20c:	001a      	movs	r2, r3
 800b20e:	2100      	movs	r1, #0
 800b210:	f011 f952 	bl	801c4b8 <memset>
  if(timHandle->Instance==TIM2)
 800b214:	687b      	ldr	r3, [r7, #4]
 800b216:	681a      	ldr	r2, [r3, #0]
 800b218:	2380      	movs	r3, #128	@ 0x80
 800b21a:	05db      	lsls	r3, r3, #23
 800b21c:	429a      	cmp	r2, r3
 800b21e:	d123      	bne.n	800b268 <HAL_TIM_MspPostInit+0x6c>
  {
  /* USER CODE BEGIN TIM2_MspPostInit 0 */

  /* USER CODE END TIM2_MspPostInit 0 */
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b220:	4b27      	ldr	r3, [pc, #156]	@ (800b2c0 <HAL_TIM_MspPostInit+0xc4>)
 800b222:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b224:	4b26      	ldr	r3, [pc, #152]	@ (800b2c0 <HAL_TIM_MspPostInit+0xc4>)
 800b226:	2101      	movs	r1, #1
 800b228:	430a      	orrs	r2, r1
 800b22a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800b22c:	4b24      	ldr	r3, [pc, #144]	@ (800b2c0 <HAL_TIM_MspPostInit+0xc4>)
 800b22e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b230:	2201      	movs	r2, #1
 800b232:	4013      	ands	r3, r2
 800b234:	613b      	str	r3, [r7, #16]
 800b236:	693b      	ldr	r3, [r7, #16]
    /**TIM2 GPIO Configuration
    PA0     ------> TIM2_CH1
    PA2     ------> TIM2_CH3
    PA3     ------> TIM2_CH4
    */
    GPIO_InitStruct.Pin = MCU_LED_B_R_Pin|MCU_LED_B_G_Pin|MCU_LED_B_B_Pin;
 800b238:	0021      	movs	r1, r4
 800b23a:	187b      	adds	r3, r7, r1
 800b23c:	220d      	movs	r2, #13
 800b23e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b240:	187b      	adds	r3, r7, r1
 800b242:	2202      	movs	r2, #2
 800b244:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b246:	187b      	adds	r3, r7, r1
 800b248:	2200      	movs	r2, #0
 800b24a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b24c:	187b      	adds	r3, r7, r1
 800b24e:	2200      	movs	r2, #0
 800b250:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM2;
 800b252:	187b      	adds	r3, r7, r1
 800b254:	2202      	movs	r2, #2
 800b256:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b258:	187a      	adds	r2, r7, r1
 800b25a:	23a0      	movs	r3, #160	@ 0xa0
 800b25c:	05db      	lsls	r3, r3, #23
 800b25e:	0011      	movs	r1, r2
 800b260:	0018      	movs	r0, r3
 800b262:	f001 febb 	bl	800cfdc <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800b266:	e027      	b.n	800b2b8 <HAL_TIM_MspPostInit+0xbc>
  else if(timHandle->Instance==TIM3)
 800b268:	687b      	ldr	r3, [r7, #4]
 800b26a:	681b      	ldr	r3, [r3, #0]
 800b26c:	4a15      	ldr	r2, [pc, #84]	@ (800b2c4 <HAL_TIM_MspPostInit+0xc8>)
 800b26e:	4293      	cmp	r3, r2
 800b270:	d122      	bne.n	800b2b8 <HAL_TIM_MspPostInit+0xbc>
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b272:	4b13      	ldr	r3, [pc, #76]	@ (800b2c0 <HAL_TIM_MspPostInit+0xc4>)
 800b274:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b276:	4b12      	ldr	r3, [pc, #72]	@ (800b2c0 <HAL_TIM_MspPostInit+0xc4>)
 800b278:	2104      	movs	r1, #4
 800b27a:	430a      	orrs	r2, r1
 800b27c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800b27e:	4b10      	ldr	r3, [pc, #64]	@ (800b2c0 <HAL_TIM_MspPostInit+0xc4>)
 800b280:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b282:	2204      	movs	r2, #4
 800b284:	4013      	ands	r3, r2
 800b286:	60fb      	str	r3, [r7, #12]
 800b288:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = MCU_LED_A_R_Pin|MCU_LED_A_G_Pin|MCU_LED_A_B_Pin;
 800b28a:	2114      	movs	r1, #20
 800b28c:	187b      	adds	r3, r7, r1
 800b28e:	22e0      	movs	r2, #224	@ 0xe0
 800b290:	0052      	lsls	r2, r2, #1
 800b292:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b294:	187b      	adds	r3, r7, r1
 800b296:	2202      	movs	r2, #2
 800b298:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b29a:	187b      	adds	r3, r7, r1
 800b29c:	2200      	movs	r2, #0
 800b29e:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800b2a0:	187b      	adds	r3, r7, r1
 800b2a2:	2200      	movs	r2, #0
 800b2a4:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800b2a6:	187b      	adds	r3, r7, r1
 800b2a8:	2202      	movs	r2, #2
 800b2aa:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b2ac:	187b      	adds	r3, r7, r1
 800b2ae:	4a06      	ldr	r2, [pc, #24]	@ (800b2c8 <HAL_TIM_MspPostInit+0xcc>)
 800b2b0:	0019      	movs	r1, r3
 800b2b2:	0010      	movs	r0, r2
 800b2b4:	f001 fe92 	bl	800cfdc <HAL_GPIO_Init>
}
 800b2b8:	46c0      	nop			@ (mov r8, r8)
 800b2ba:	46bd      	mov	sp, r7
 800b2bc:	b00b      	add	sp, #44	@ 0x2c
 800b2be:	bd90      	pop	{r4, r7, pc}
 800b2c0:	40021000 	.word	0x40021000
 800b2c4:	40000400 	.word	0x40000400
 800b2c8:	50000800 	.word	0x50000800

0800b2cc <MX_LPUART1_UART_Init>:
DMA_HandleTypeDef hdma_usart4_tx;

/* LPUART1 init function */

void MX_LPUART1_UART_Init(void)
{
 800b2cc:	b580      	push	{r7, lr}
 800b2ce:	af00      	add	r7, sp, #0
  /* USER CODE END LPUART1_Init 0 */

  /* USER CODE BEGIN LPUART1_Init 1 */

  /* USER CODE END LPUART1_Init 1 */
  hlpuart1.Instance = LPUART1;
 800b2d0:	4b17      	ldr	r3, [pc, #92]	@ (800b330 <MX_LPUART1_UART_Init+0x64>)
 800b2d2:	4a18      	ldr	r2, [pc, #96]	@ (800b334 <MX_LPUART1_UART_Init+0x68>)
 800b2d4:	601a      	str	r2, [r3, #0]
  hlpuart1.Init.BaudRate = 115200;
 800b2d6:	4b16      	ldr	r3, [pc, #88]	@ (800b330 <MX_LPUART1_UART_Init+0x64>)
 800b2d8:	22e1      	movs	r2, #225	@ 0xe1
 800b2da:	0252      	lsls	r2, r2, #9
 800b2dc:	605a      	str	r2, [r3, #4]
  hlpuart1.Init.WordLength = UART_WORDLENGTH_8B;
 800b2de:	4b14      	ldr	r3, [pc, #80]	@ (800b330 <MX_LPUART1_UART_Init+0x64>)
 800b2e0:	2200      	movs	r2, #0
 800b2e2:	609a      	str	r2, [r3, #8]
  hlpuart1.Init.StopBits = UART_STOPBITS_1;
 800b2e4:	4b12      	ldr	r3, [pc, #72]	@ (800b330 <MX_LPUART1_UART_Init+0x64>)
 800b2e6:	2200      	movs	r2, #0
 800b2e8:	60da      	str	r2, [r3, #12]
  hlpuart1.Init.Parity = UART_PARITY_NONE;
 800b2ea:	4b11      	ldr	r3, [pc, #68]	@ (800b330 <MX_LPUART1_UART_Init+0x64>)
 800b2ec:	2200      	movs	r2, #0
 800b2ee:	611a      	str	r2, [r3, #16]
  hlpuart1.Init.Mode = UART_MODE_TX_RX;
 800b2f0:	4b0f      	ldr	r3, [pc, #60]	@ (800b330 <MX_LPUART1_UART_Init+0x64>)
 800b2f2:	220c      	movs	r2, #12
 800b2f4:	615a      	str	r2, [r3, #20]
  hlpuart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b2f6:	4b0e      	ldr	r3, [pc, #56]	@ (800b330 <MX_LPUART1_UART_Init+0x64>)
 800b2f8:	2200      	movs	r2, #0
 800b2fa:	619a      	str	r2, [r3, #24]
  hlpuart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800b2fc:	4b0c      	ldr	r3, [pc, #48]	@ (800b330 <MX_LPUART1_UART_Init+0x64>)
 800b2fe:	2200      	movs	r2, #0
 800b300:	621a      	str	r2, [r3, #32]
  hlpuart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT|UART_ADVFEATURE_RXOVERRUNDISABLE_INIT;
 800b302:	4b0b      	ldr	r3, [pc, #44]	@ (800b330 <MX_LPUART1_UART_Init+0x64>)
 800b304:	2218      	movs	r2, #24
 800b306:	625a      	str	r2, [r3, #36]	@ 0x24
  hlpuart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800b308:	4b09      	ldr	r3, [pc, #36]	@ (800b330 <MX_LPUART1_UART_Init+0x64>)
 800b30a:	2280      	movs	r2, #128	@ 0x80
 800b30c:	0212      	lsls	r2, r2, #8
 800b30e:	635a      	str	r2, [r3, #52]	@ 0x34
  hlpuart1.AdvancedInit.OverrunDisable = UART_ADVFEATURE_OVERRUN_DISABLE;
 800b310:	4b07      	ldr	r3, [pc, #28]	@ (800b330 <MX_LPUART1_UART_Init+0x64>)
 800b312:	2280      	movs	r2, #128	@ 0x80
 800b314:	0152      	lsls	r2, r2, #5
 800b316:	639a      	str	r2, [r3, #56]	@ 0x38
  if (HAL_UART_Init(&hlpuart1) != HAL_OK)
 800b318:	4b05      	ldr	r3, [pc, #20]	@ (800b330 <MX_LPUART1_UART_Init+0x64>)
 800b31a:	0018      	movs	r0, r3
 800b31c:	f008 f93a 	bl	8013594 <HAL_UART_Init>
 800b320:	1e03      	subs	r3, r0, #0
 800b322:	d001      	beq.n	800b328 <MX_LPUART1_UART_Init+0x5c>
  {
    Error_Handler();
 800b324:	f7fc f87e 	bl	8007424 <Error_Handler>
  }
  /* USER CODE BEGIN LPUART1_Init 2 */

  /* USER CODE END LPUART1_Init 2 */

}
 800b328:	46c0      	nop			@ (mov r8, r8)
 800b32a:	46bd      	mov	sp, r7
 800b32c:	bd80      	pop	{r7, pc}
 800b32e:	46c0      	nop			@ (mov r8, r8)
 800b330:	200021e8 	.word	0x200021e8
 800b334:	40004800 	.word	0x40004800

0800b338 <MX_USART1_UART_Init>:
/* USART1 init function */

void MX_USART1_UART_Init(void)
{
 800b338:	b580      	push	{r7, lr}
 800b33a:	af00      	add	r7, sp, #0
  /* USER CODE END USART1_Init 0 */

  /* USER CODE BEGIN USART1_Init 1 */

  /* USER CODE END USART1_Init 1 */
  huart1.Instance = USART1;
 800b33c:	4b16      	ldr	r3, [pc, #88]	@ (800b398 <MX_USART1_UART_Init+0x60>)
 800b33e:	4a17      	ldr	r2, [pc, #92]	@ (800b39c <MX_USART1_UART_Init+0x64>)
 800b340:	601a      	str	r2, [r3, #0]
  huart1.Init.BaudRate = 115200;
 800b342:	4b15      	ldr	r3, [pc, #84]	@ (800b398 <MX_USART1_UART_Init+0x60>)
 800b344:	22e1      	movs	r2, #225	@ 0xe1
 800b346:	0252      	lsls	r2, r2, #9
 800b348:	605a      	str	r2, [r3, #4]
  huart1.Init.WordLength = UART_WORDLENGTH_8B;
 800b34a:	4b13      	ldr	r3, [pc, #76]	@ (800b398 <MX_USART1_UART_Init+0x60>)
 800b34c:	2200      	movs	r2, #0
 800b34e:	609a      	str	r2, [r3, #8]
  huart1.Init.StopBits = UART_STOPBITS_1;
 800b350:	4b11      	ldr	r3, [pc, #68]	@ (800b398 <MX_USART1_UART_Init+0x60>)
 800b352:	2200      	movs	r2, #0
 800b354:	60da      	str	r2, [r3, #12]
  huart1.Init.Parity = UART_PARITY_NONE;
 800b356:	4b10      	ldr	r3, [pc, #64]	@ (800b398 <MX_USART1_UART_Init+0x60>)
 800b358:	2200      	movs	r2, #0
 800b35a:	611a      	str	r2, [r3, #16]
  huart1.Init.Mode = UART_MODE_TX_RX;
 800b35c:	4b0e      	ldr	r3, [pc, #56]	@ (800b398 <MX_USART1_UART_Init+0x60>)
 800b35e:	220c      	movs	r2, #12
 800b360:	615a      	str	r2, [r3, #20]
  huart1.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b362:	4b0d      	ldr	r3, [pc, #52]	@ (800b398 <MX_USART1_UART_Init+0x60>)
 800b364:	2200      	movs	r2, #0
 800b366:	619a      	str	r2, [r3, #24]
  huart1.Init.OverSampling = UART_OVERSAMPLING_16;
 800b368:	4b0b      	ldr	r3, [pc, #44]	@ (800b398 <MX_USART1_UART_Init+0x60>)
 800b36a:	2200      	movs	r2, #0
 800b36c:	61da      	str	r2, [r3, #28]
  huart1.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800b36e:	4b0a      	ldr	r3, [pc, #40]	@ (800b398 <MX_USART1_UART_Init+0x60>)
 800b370:	2200      	movs	r2, #0
 800b372:	621a      	str	r2, [r3, #32]
  huart1.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_SWAP_INIT;
 800b374:	4b08      	ldr	r3, [pc, #32]	@ (800b398 <MX_USART1_UART_Init+0x60>)
 800b376:	2208      	movs	r2, #8
 800b378:	625a      	str	r2, [r3, #36]	@ 0x24
  huart1.AdvancedInit.Swap = UART_ADVFEATURE_SWAP_ENABLE;
 800b37a:	4b07      	ldr	r3, [pc, #28]	@ (800b398 <MX_USART1_UART_Init+0x60>)
 800b37c:	2280      	movs	r2, #128	@ 0x80
 800b37e:	0212      	lsls	r2, r2, #8
 800b380:	635a      	str	r2, [r3, #52]	@ 0x34
  if (HAL_UART_Init(&huart1) != HAL_OK)
 800b382:	4b05      	ldr	r3, [pc, #20]	@ (800b398 <MX_USART1_UART_Init+0x60>)
 800b384:	0018      	movs	r0, r3
 800b386:	f008 f905 	bl	8013594 <HAL_UART_Init>
 800b38a:	1e03      	subs	r3, r0, #0
 800b38c:	d001      	beq.n	800b392 <MX_USART1_UART_Init+0x5a>
  {
    Error_Handler();
 800b38e:	f7fc f849 	bl	8007424 <Error_Handler>
  }
  /* USER CODE BEGIN USART1_Init 2 */

  /* USER CODE END USART1_Init 2 */

}
 800b392:	46c0      	nop			@ (mov r8, r8)
 800b394:	46bd      	mov	sp, r7
 800b396:	bd80      	pop	{r7, pc}
 800b398:	200022a0 	.word	0x200022a0
 800b39c:	40013800 	.word	0x40013800

0800b3a0 <MX_USART4_UART_Init>:
/* USART4 init function */

void MX_USART4_UART_Init(void)
{
 800b3a0:	b580      	push	{r7, lr}
 800b3a2:	af00      	add	r7, sp, #0
  /* USER CODE END USART4_Init 0 */

  /* USER CODE BEGIN USART4_Init 1 */

  /* USER CODE END USART4_Init 1 */
  huart4.Instance = USART4;
 800b3a4:	4b14      	ldr	r3, [pc, #80]	@ (800b3f8 <MX_USART4_UART_Init+0x58>)
 800b3a6:	4a15      	ldr	r2, [pc, #84]	@ (800b3fc <MX_USART4_UART_Init+0x5c>)
 800b3a8:	601a      	str	r2, [r3, #0]
  huart4.Init.BaudRate = 115200;
 800b3aa:	4b13      	ldr	r3, [pc, #76]	@ (800b3f8 <MX_USART4_UART_Init+0x58>)
 800b3ac:	22e1      	movs	r2, #225	@ 0xe1
 800b3ae:	0252      	lsls	r2, r2, #9
 800b3b0:	605a      	str	r2, [r3, #4]
  huart4.Init.WordLength = UART_WORDLENGTH_8B;
 800b3b2:	4b11      	ldr	r3, [pc, #68]	@ (800b3f8 <MX_USART4_UART_Init+0x58>)
 800b3b4:	2200      	movs	r2, #0
 800b3b6:	609a      	str	r2, [r3, #8]
  huart4.Init.StopBits = UART_STOPBITS_1;
 800b3b8:	4b0f      	ldr	r3, [pc, #60]	@ (800b3f8 <MX_USART4_UART_Init+0x58>)
 800b3ba:	2200      	movs	r2, #0
 800b3bc:	60da      	str	r2, [r3, #12]
  huart4.Init.Parity = UART_PARITY_NONE;
 800b3be:	4b0e      	ldr	r3, [pc, #56]	@ (800b3f8 <MX_USART4_UART_Init+0x58>)
 800b3c0:	2200      	movs	r2, #0
 800b3c2:	611a      	str	r2, [r3, #16]
  huart4.Init.Mode = UART_MODE_TX_RX;
 800b3c4:	4b0c      	ldr	r3, [pc, #48]	@ (800b3f8 <MX_USART4_UART_Init+0x58>)
 800b3c6:	220c      	movs	r2, #12
 800b3c8:	615a      	str	r2, [r3, #20]
  huart4.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800b3ca:	4b0b      	ldr	r3, [pc, #44]	@ (800b3f8 <MX_USART4_UART_Init+0x58>)
 800b3cc:	2200      	movs	r2, #0
 800b3ce:	619a      	str	r2, [r3, #24]
  huart4.Init.OverSampling = UART_OVERSAMPLING_16;
 800b3d0:	4b09      	ldr	r3, [pc, #36]	@ (800b3f8 <MX_USART4_UART_Init+0x58>)
 800b3d2:	2200      	movs	r2, #0
 800b3d4:	61da      	str	r2, [r3, #28]
  huart4.Init.OneBitSampling = UART_ONE_BIT_SAMPLE_DISABLE;
 800b3d6:	4b08      	ldr	r3, [pc, #32]	@ (800b3f8 <MX_USART4_UART_Init+0x58>)
 800b3d8:	2200      	movs	r2, #0
 800b3da:	621a      	str	r2, [r3, #32]
  huart4.AdvancedInit.AdvFeatureInit = UART_ADVFEATURE_NO_INIT;
 800b3dc:	4b06      	ldr	r3, [pc, #24]	@ (800b3f8 <MX_USART4_UART_Init+0x58>)
 800b3de:	2200      	movs	r2, #0
 800b3e0:	625a      	str	r2, [r3, #36]	@ 0x24
  if (HAL_UART_Init(&huart4) != HAL_OK)
 800b3e2:	4b05      	ldr	r3, [pc, #20]	@ (800b3f8 <MX_USART4_UART_Init+0x58>)
 800b3e4:	0018      	movs	r0, r3
 800b3e6:	f008 f8d5 	bl	8013594 <HAL_UART_Init>
 800b3ea:	1e03      	subs	r3, r0, #0
 800b3ec:	d001      	beq.n	800b3f2 <MX_USART4_UART_Init+0x52>
  {
    Error_Handler();
 800b3ee:	f7fc f819 	bl	8007424 <Error_Handler>
  }
  /* USER CODE BEGIN USART4_Init 2 */

  /* USER CODE END USART4_Init 2 */

}
 800b3f2:	46c0      	nop			@ (mov r8, r8)
 800b3f4:	46bd      	mov	sp, r7
 800b3f6:	bd80      	pop	{r7, pc}
 800b3f8:	20002358 	.word	0x20002358
 800b3fc:	40004c00 	.word	0x40004c00

0800b400 <HAL_UART_MspInit>:

void HAL_UART_MspInit(UART_HandleTypeDef* uartHandle)
{
 800b400:	b590      	push	{r4, r7, lr}
 800b402:	b08d      	sub	sp, #52	@ 0x34
 800b404:	af00      	add	r7, sp, #0
 800b406:	6078      	str	r0, [r7, #4]

  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800b408:	241c      	movs	r4, #28
 800b40a:	193b      	adds	r3, r7, r4
 800b40c:	0018      	movs	r0, r3
 800b40e:	2314      	movs	r3, #20
 800b410:	001a      	movs	r2, r3
 800b412:	2100      	movs	r1, #0
 800b414:	f011 f850 	bl	801c4b8 <memset>
  if(uartHandle->Instance==LPUART1)
 800b418:	687b      	ldr	r3, [r7, #4]
 800b41a:	681b      	ldr	r3, [r3, #0]
 800b41c:	4a8b      	ldr	r2, [pc, #556]	@ (800b64c <HAL_UART_MspInit+0x24c>)
 800b41e:	4293      	cmp	r3, r2
 800b420:	d129      	bne.n	800b476 <HAL_UART_MspInit+0x76>
  {
  /* USER CODE BEGIN LPUART1_MspInit 0 */

  /* USER CODE END LPUART1_MspInit 0 */
    /* LPUART1 clock enable */
    __HAL_RCC_LPUART1_CLK_ENABLE();
 800b422:	4b8b      	ldr	r3, [pc, #556]	@ (800b650 <HAL_UART_MspInit+0x250>)
 800b424:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b426:	4b8a      	ldr	r3, [pc, #552]	@ (800b650 <HAL_UART_MspInit+0x250>)
 800b428:	2180      	movs	r1, #128	@ 0x80
 800b42a:	02c9      	lsls	r1, r1, #11
 800b42c:	430a      	orrs	r2, r1
 800b42e:	639a      	str	r2, [r3, #56]	@ 0x38

    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b430:	4b87      	ldr	r3, [pc, #540]	@ (800b650 <HAL_UART_MspInit+0x250>)
 800b432:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b434:	4b86      	ldr	r3, [pc, #536]	@ (800b650 <HAL_UART_MspInit+0x250>)
 800b436:	2104      	movs	r1, #4
 800b438:	430a      	orrs	r2, r1
 800b43a:	62da      	str	r2, [r3, #44]	@ 0x2c
 800b43c:	4b84      	ldr	r3, [pc, #528]	@ (800b650 <HAL_UART_MspInit+0x250>)
 800b43e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b440:	2204      	movs	r2, #4
 800b442:	4013      	ands	r3, r2
 800b444:	61bb      	str	r3, [r7, #24]
 800b446:	69bb      	ldr	r3, [r7, #24]
    /**LPUART1 GPIO Configuration
    PC0     ------> LPUART1_RX
    PC1     ------> LPUART1_TX
    */
    GPIO_InitStruct.Pin = GPIO_PIN_0|GPIO_PIN_1;
 800b448:	0021      	movs	r1, r4
 800b44a:	187b      	adds	r3, r7, r1
 800b44c:	2203      	movs	r2, #3
 800b44e:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b450:	187b      	adds	r3, r7, r1
 800b452:	2202      	movs	r2, #2
 800b454:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b456:	187b      	adds	r3, r7, r1
 800b458:	2200      	movs	r2, #0
 800b45a:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b45c:	187b      	adds	r3, r7, r1
 800b45e:	2203      	movs	r2, #3
 800b460:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_LPUART1;
 800b462:	187b      	adds	r3, r7, r1
 800b464:	2206      	movs	r2, #6
 800b466:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b468:	187b      	adds	r3, r7, r1
 800b46a:	4a7a      	ldr	r2, [pc, #488]	@ (800b654 <HAL_UART_MspInit+0x254>)
 800b46c:	0019      	movs	r1, r3
 800b46e:	0010      	movs	r0, r2
 800b470:	f001 fdb4 	bl	800cfdc <HAL_GPIO_Init>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
  /* USER CODE BEGIN USART4_MspInit 1 */

  /* USER CODE END USART4_MspInit 1 */
  }
}
 800b474:	e0e5      	b.n	800b642 <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART1)
 800b476:	687b      	ldr	r3, [r7, #4]
 800b478:	681b      	ldr	r3, [r3, #0]
 800b47a:	4a77      	ldr	r2, [pc, #476]	@ (800b658 <HAL_UART_MspInit+0x258>)
 800b47c:	4293      	cmp	r3, r2
 800b47e:	d133      	bne.n	800b4e8 <HAL_UART_MspInit+0xe8>
    __HAL_RCC_USART1_CLK_ENABLE();
 800b480:	4b73      	ldr	r3, [pc, #460]	@ (800b650 <HAL_UART_MspInit+0x250>)
 800b482:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800b484:	4b72      	ldr	r3, [pc, #456]	@ (800b650 <HAL_UART_MspInit+0x250>)
 800b486:	2180      	movs	r1, #128	@ 0x80
 800b488:	01c9      	lsls	r1, r1, #7
 800b48a:	430a      	orrs	r2, r1
 800b48c:	635a      	str	r2, [r3, #52]	@ 0x34
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b48e:	4b70      	ldr	r3, [pc, #448]	@ (800b650 <HAL_UART_MspInit+0x250>)
 800b490:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b492:	4b6f      	ldr	r3, [pc, #444]	@ (800b650 <HAL_UART_MspInit+0x250>)
 800b494:	2101      	movs	r1, #1
 800b496:	430a      	orrs	r2, r1
 800b498:	62da      	str	r2, [r3, #44]	@ 0x2c
 800b49a:	4b6d      	ldr	r3, [pc, #436]	@ (800b650 <HAL_UART_MspInit+0x250>)
 800b49c:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b49e:	2201      	movs	r2, #1
 800b4a0:	4013      	ands	r3, r2
 800b4a2:	617b      	str	r3, [r7, #20]
 800b4a4:	697b      	ldr	r3, [r7, #20]
    GPIO_InitStruct.Pin = GPIO_PIN_9|GPIO_PIN_10;
 800b4a6:	211c      	movs	r1, #28
 800b4a8:	187b      	adds	r3, r7, r1
 800b4aa:	22c0      	movs	r2, #192	@ 0xc0
 800b4ac:	00d2      	lsls	r2, r2, #3
 800b4ae:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b4b0:	187b      	adds	r3, r7, r1
 800b4b2:	2202      	movs	r2, #2
 800b4b4:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b4b6:	187b      	adds	r3, r7, r1
 800b4b8:	2200      	movs	r2, #0
 800b4ba:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b4bc:	187b      	adds	r3, r7, r1
 800b4be:	2203      	movs	r2, #3
 800b4c0:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF4_USART1;
 800b4c2:	187b      	adds	r3, r7, r1
 800b4c4:	2204      	movs	r2, #4
 800b4c6:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b4c8:	187a      	adds	r2, r7, r1
 800b4ca:	23a0      	movs	r3, #160	@ 0xa0
 800b4cc:	05db      	lsls	r3, r3, #23
 800b4ce:	0011      	movs	r1, r2
 800b4d0:	0018      	movs	r0, r3
 800b4d2:	f001 fd83 	bl	800cfdc <HAL_GPIO_Init>
    HAL_NVIC_SetPriority(USART1_IRQn, 0, 0);
 800b4d6:	2200      	movs	r2, #0
 800b4d8:	2100      	movs	r1, #0
 800b4da:	201b      	movs	r0, #27
 800b4dc:	f001 f930 	bl	800c740 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART1_IRQn);
 800b4e0:	201b      	movs	r0, #27
 800b4e2:	f001 f942 	bl	800c76a <HAL_NVIC_EnableIRQ>
}
 800b4e6:	e0ac      	b.n	800b642 <HAL_UART_MspInit+0x242>
  else if(uartHandle->Instance==USART4)
 800b4e8:	687b      	ldr	r3, [r7, #4]
 800b4ea:	681b      	ldr	r3, [r3, #0]
 800b4ec:	4a5b      	ldr	r2, [pc, #364]	@ (800b65c <HAL_UART_MspInit+0x25c>)
 800b4ee:	4293      	cmp	r3, r2
 800b4f0:	d000      	beq.n	800b4f4 <HAL_UART_MspInit+0xf4>
 800b4f2:	e0a6      	b.n	800b642 <HAL_UART_MspInit+0x242>
    __HAL_RCC_USART4_CLK_ENABLE();
 800b4f4:	4b56      	ldr	r3, [pc, #344]	@ (800b650 <HAL_UART_MspInit+0x250>)
 800b4f6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800b4f8:	4b55      	ldr	r3, [pc, #340]	@ (800b650 <HAL_UART_MspInit+0x250>)
 800b4fa:	2180      	movs	r1, #128	@ 0x80
 800b4fc:	0309      	lsls	r1, r1, #12
 800b4fe:	430a      	orrs	r2, r1
 800b500:	639a      	str	r2, [r3, #56]	@ 0x38
    __HAL_RCC_GPIOA_CLK_ENABLE();
 800b502:	4b53      	ldr	r3, [pc, #332]	@ (800b650 <HAL_UART_MspInit+0x250>)
 800b504:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b506:	4b52      	ldr	r3, [pc, #328]	@ (800b650 <HAL_UART_MspInit+0x250>)
 800b508:	2101      	movs	r1, #1
 800b50a:	430a      	orrs	r2, r1
 800b50c:	62da      	str	r2, [r3, #44]	@ 0x2c
 800b50e:	4b50      	ldr	r3, [pc, #320]	@ (800b650 <HAL_UART_MspInit+0x250>)
 800b510:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b512:	2201      	movs	r2, #1
 800b514:	4013      	ands	r3, r2
 800b516:	613b      	str	r3, [r7, #16]
 800b518:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800b51a:	4b4d      	ldr	r3, [pc, #308]	@ (800b650 <HAL_UART_MspInit+0x250>)
 800b51c:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 800b51e:	4b4c      	ldr	r3, [pc, #304]	@ (800b650 <HAL_UART_MspInit+0x250>)
 800b520:	2104      	movs	r1, #4
 800b522:	430a      	orrs	r2, r1
 800b524:	62da      	str	r2, [r3, #44]	@ 0x2c
 800b526:	4b4a      	ldr	r3, [pc, #296]	@ (800b650 <HAL_UART_MspInit+0x250>)
 800b528:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800b52a:	2204      	movs	r2, #4
 800b52c:	4013      	ands	r3, r2
 800b52e:	60fb      	str	r3, [r7, #12]
 800b530:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_1;
 800b532:	241c      	movs	r4, #28
 800b534:	193b      	adds	r3, r7, r4
 800b536:	2202      	movs	r2, #2
 800b538:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b53a:	193b      	adds	r3, r7, r4
 800b53c:	2202      	movs	r2, #2
 800b53e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b540:	193b      	adds	r3, r7, r4
 800b542:	2200      	movs	r2, #0
 800b544:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b546:	193b      	adds	r3, r7, r4
 800b548:	2203      	movs	r2, #3
 800b54a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 800b54c:	193b      	adds	r3, r7, r4
 800b54e:	2206      	movs	r2, #6
 800b550:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800b552:	193a      	adds	r2, r7, r4
 800b554:	23a0      	movs	r3, #160	@ 0xa0
 800b556:	05db      	lsls	r3, r3, #23
 800b558:	0011      	movs	r1, r2
 800b55a:	0018      	movs	r0, r3
 800b55c:	f001 fd3e 	bl	800cfdc <HAL_GPIO_Init>
    GPIO_InitStruct.Pin = GPIO_PIN_10;
 800b560:	0021      	movs	r1, r4
 800b562:	187b      	adds	r3, r7, r1
 800b564:	2280      	movs	r2, #128	@ 0x80
 800b566:	00d2      	lsls	r2, r2, #3
 800b568:	601a      	str	r2, [r3, #0]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800b56a:	187b      	adds	r3, r7, r1
 800b56c:	2202      	movs	r2, #2
 800b56e:	605a      	str	r2, [r3, #4]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800b570:	187b      	adds	r3, r7, r1
 800b572:	2200      	movs	r2, #0
 800b574:	609a      	str	r2, [r3, #8]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800b576:	187b      	adds	r3, r7, r1
 800b578:	2203      	movs	r2, #3
 800b57a:	60da      	str	r2, [r3, #12]
    GPIO_InitStruct.Alternate = GPIO_AF6_USART4;
 800b57c:	187b      	adds	r3, r7, r1
 800b57e:	2206      	movs	r2, #6
 800b580:	611a      	str	r2, [r3, #16]
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800b582:	187b      	adds	r3, r7, r1
 800b584:	4a33      	ldr	r2, [pc, #204]	@ (800b654 <HAL_UART_MspInit+0x254>)
 800b586:	0019      	movs	r1, r3
 800b588:	0010      	movs	r0, r2
 800b58a:	f001 fd27 	bl	800cfdc <HAL_GPIO_Init>
    hdma_usart4_rx.Instance = DMA1_Channel6;
 800b58e:	4b34      	ldr	r3, [pc, #208]	@ (800b660 <HAL_UART_MspInit+0x260>)
 800b590:	4a34      	ldr	r2, [pc, #208]	@ (800b664 <HAL_UART_MspInit+0x264>)
 800b592:	601a      	str	r2, [r3, #0]
    hdma_usart4_rx.Init.Request = DMA_REQUEST_12;
 800b594:	4b32      	ldr	r3, [pc, #200]	@ (800b660 <HAL_UART_MspInit+0x260>)
 800b596:	220c      	movs	r2, #12
 800b598:	605a      	str	r2, [r3, #4]
    hdma_usart4_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800b59a:	4b31      	ldr	r3, [pc, #196]	@ (800b660 <HAL_UART_MspInit+0x260>)
 800b59c:	2200      	movs	r2, #0
 800b59e:	609a      	str	r2, [r3, #8]
    hdma_usart4_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b5a0:	4b2f      	ldr	r3, [pc, #188]	@ (800b660 <HAL_UART_MspInit+0x260>)
 800b5a2:	2200      	movs	r2, #0
 800b5a4:	60da      	str	r2, [r3, #12]
    hdma_usart4_rx.Init.MemInc = DMA_MINC_ENABLE;
 800b5a6:	4b2e      	ldr	r3, [pc, #184]	@ (800b660 <HAL_UART_MspInit+0x260>)
 800b5a8:	2280      	movs	r2, #128	@ 0x80
 800b5aa:	611a      	str	r2, [r3, #16]
    hdma_usart4_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b5ac:	4b2c      	ldr	r3, [pc, #176]	@ (800b660 <HAL_UART_MspInit+0x260>)
 800b5ae:	2200      	movs	r2, #0
 800b5b0:	615a      	str	r2, [r3, #20]
    hdma_usart4_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b5b2:	4b2b      	ldr	r3, [pc, #172]	@ (800b660 <HAL_UART_MspInit+0x260>)
 800b5b4:	2200      	movs	r2, #0
 800b5b6:	619a      	str	r2, [r3, #24]
    hdma_usart4_rx.Init.Mode = DMA_CIRCULAR;
 800b5b8:	4b29      	ldr	r3, [pc, #164]	@ (800b660 <HAL_UART_MspInit+0x260>)
 800b5ba:	2220      	movs	r2, #32
 800b5bc:	61da      	str	r2, [r3, #28]
    hdma_usart4_rx.Init.Priority = DMA_PRIORITY_LOW;
 800b5be:	4b28      	ldr	r3, [pc, #160]	@ (800b660 <HAL_UART_MspInit+0x260>)
 800b5c0:	2200      	movs	r2, #0
 800b5c2:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_rx) != HAL_OK)
 800b5c4:	4b26      	ldr	r3, [pc, #152]	@ (800b660 <HAL_UART_MspInit+0x260>)
 800b5c6:	0018      	movs	r0, r3
 800b5c8:	f001 f8ec 	bl	800c7a4 <HAL_DMA_Init>
 800b5cc:	1e03      	subs	r3, r0, #0
 800b5ce:	d001      	beq.n	800b5d4 <HAL_UART_MspInit+0x1d4>
      Error_Handler();
 800b5d0:	f7fb ff28 	bl	8007424 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmarx,hdma_usart4_rx);
 800b5d4:	687b      	ldr	r3, [r7, #4]
 800b5d6:	4a22      	ldr	r2, [pc, #136]	@ (800b660 <HAL_UART_MspInit+0x260>)
 800b5d8:	675a      	str	r2, [r3, #116]	@ 0x74
 800b5da:	4b21      	ldr	r3, [pc, #132]	@ (800b660 <HAL_UART_MspInit+0x260>)
 800b5dc:	687a      	ldr	r2, [r7, #4]
 800b5de:	629a      	str	r2, [r3, #40]	@ 0x28
    hdma_usart4_tx.Instance = DMA1_Channel7;
 800b5e0:	4b21      	ldr	r3, [pc, #132]	@ (800b668 <HAL_UART_MspInit+0x268>)
 800b5e2:	4a22      	ldr	r2, [pc, #136]	@ (800b66c <HAL_UART_MspInit+0x26c>)
 800b5e4:	601a      	str	r2, [r3, #0]
    hdma_usart4_tx.Init.Request = DMA_REQUEST_12;
 800b5e6:	4b20      	ldr	r3, [pc, #128]	@ (800b668 <HAL_UART_MspInit+0x268>)
 800b5e8:	220c      	movs	r2, #12
 800b5ea:	605a      	str	r2, [r3, #4]
    hdma_usart4_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800b5ec:	4b1e      	ldr	r3, [pc, #120]	@ (800b668 <HAL_UART_MspInit+0x268>)
 800b5ee:	2210      	movs	r2, #16
 800b5f0:	609a      	str	r2, [r3, #8]
    hdma_usart4_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 800b5f2:	4b1d      	ldr	r3, [pc, #116]	@ (800b668 <HAL_UART_MspInit+0x268>)
 800b5f4:	2200      	movs	r2, #0
 800b5f6:	60da      	str	r2, [r3, #12]
    hdma_usart4_tx.Init.MemInc = DMA_MINC_ENABLE;
 800b5f8:	4b1b      	ldr	r3, [pc, #108]	@ (800b668 <HAL_UART_MspInit+0x268>)
 800b5fa:	2280      	movs	r2, #128	@ 0x80
 800b5fc:	611a      	str	r2, [r3, #16]
    hdma_usart4_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800b5fe:	4b1a      	ldr	r3, [pc, #104]	@ (800b668 <HAL_UART_MspInit+0x268>)
 800b600:	2200      	movs	r2, #0
 800b602:	615a      	str	r2, [r3, #20]
    hdma_usart4_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 800b604:	4b18      	ldr	r3, [pc, #96]	@ (800b668 <HAL_UART_MspInit+0x268>)
 800b606:	2200      	movs	r2, #0
 800b608:	619a      	str	r2, [r3, #24]
    hdma_usart4_tx.Init.Mode = DMA_NORMAL;
 800b60a:	4b17      	ldr	r3, [pc, #92]	@ (800b668 <HAL_UART_MspInit+0x268>)
 800b60c:	2200      	movs	r2, #0
 800b60e:	61da      	str	r2, [r3, #28]
    hdma_usart4_tx.Init.Priority = DMA_PRIORITY_LOW;
 800b610:	4b15      	ldr	r3, [pc, #84]	@ (800b668 <HAL_UART_MspInit+0x268>)
 800b612:	2200      	movs	r2, #0
 800b614:	621a      	str	r2, [r3, #32]
    if (HAL_DMA_Init(&hdma_usart4_tx) != HAL_OK)
 800b616:	4b14      	ldr	r3, [pc, #80]	@ (800b668 <HAL_UART_MspInit+0x268>)
 800b618:	0018      	movs	r0, r3
 800b61a:	f001 f8c3 	bl	800c7a4 <HAL_DMA_Init>
 800b61e:	1e03      	subs	r3, r0, #0
 800b620:	d001      	beq.n	800b626 <HAL_UART_MspInit+0x226>
      Error_Handler();
 800b622:	f7fb feff 	bl	8007424 <Error_Handler>
    __HAL_LINKDMA(uartHandle,hdmatx,hdma_usart4_tx);
 800b626:	687b      	ldr	r3, [r7, #4]
 800b628:	4a0f      	ldr	r2, [pc, #60]	@ (800b668 <HAL_UART_MspInit+0x268>)
 800b62a:	671a      	str	r2, [r3, #112]	@ 0x70
 800b62c:	4b0e      	ldr	r3, [pc, #56]	@ (800b668 <HAL_UART_MspInit+0x268>)
 800b62e:	687a      	ldr	r2, [r7, #4]
 800b630:	629a      	str	r2, [r3, #40]	@ 0x28
    HAL_NVIC_SetPriority(USART4_5_IRQn, 0, 0);
 800b632:	2200      	movs	r2, #0
 800b634:	2100      	movs	r1, #0
 800b636:	200e      	movs	r0, #14
 800b638:	f001 f882 	bl	800c740 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART4_5_IRQn);
 800b63c:	200e      	movs	r0, #14
 800b63e:	f001 f894 	bl	800c76a <HAL_NVIC_EnableIRQ>
}
 800b642:	46c0      	nop			@ (mov r8, r8)
 800b644:	46bd      	mov	sp, r7
 800b646:	b00d      	add	sp, #52	@ 0x34
 800b648:	bd90      	pop	{r4, r7, pc}
 800b64a:	46c0      	nop			@ (mov r8, r8)
 800b64c:	40004800 	.word	0x40004800
 800b650:	40021000 	.word	0x40021000
 800b654:	50000800 	.word	0x50000800
 800b658:	40013800 	.word	0x40013800
 800b65c:	40004c00 	.word	0x40004c00
 800b660:	20002410 	.word	0x20002410
 800b664:	4002006c 	.word	0x4002006c
 800b668:	20002458 	.word	0x20002458
 800b66c:	40020080 	.word	0x40020080

0800b670 <TimestampIsReached>:
VerboseLevel CurrentVerboseLevel = VERBOSE_ALL;
#define TEXTBUFFER_LEN 128

extern UART_HandleTypeDef huart1;

bool TimestampIsReached(uint32_t timestamp) {
 800b670:	b580      	push	{r7, lr}
 800b672:	b086      	sub	sp, #24
 800b674:	af00      	add	r7, sp, #0
 800b676:	6078      	str	r0, [r7, #4]
  uint32_t now = HAL_GetTick();
 800b678:	f000 fbec 	bl	800be54 <HAL_GetTick>
 800b67c:	0003      	movs	r3, r0
 800b67e:	617b      	str	r3, [r7, #20]
  const uint32_t HALF_TIME = 0x7FFFFFFF; // ~25 days max timestamp delay
 800b680:	4b1c      	ldr	r3, [pc, #112]	@ (800b6f4 <TimestampIsReached+0x84>)
 800b682:	613b      	str	r3, [r7, #16]

  // Ensures that the difference between now and timestamp is less than half of
  // the maximum value of the counter. This confirms that the timestamp is not
  // too far in the past.
  bool noOverflow = (now >= timestamp && now - timestamp < HALF_TIME);
 800b684:	697a      	ldr	r2, [r7, #20]
 800b686:	687b      	ldr	r3, [r7, #4]
 800b688:	429a      	cmp	r2, r3
 800b68a:	d307      	bcc.n	800b69c <TimestampIsReached+0x2c>
 800b68c:	697a      	ldr	r2, [r7, #20]
 800b68e:	687b      	ldr	r3, [r7, #4]
 800b690:	1ad3      	subs	r3, r2, r3
 800b692:	693a      	ldr	r2, [r7, #16]
 800b694:	429a      	cmp	r2, r3
 800b696:	d901      	bls.n	800b69c <TimestampIsReached+0x2c>
 800b698:	2201      	movs	r2, #1
 800b69a:	e000      	b.n	800b69e <TimestampIsReached+0x2e>
 800b69c:	2200      	movs	r2, #0
 800b69e:	230f      	movs	r3, #15
 800b6a0:	18fb      	adds	r3, r7, r3
 800b6a2:	701a      	strb	r2, [r3, #0]
 800b6a4:	781a      	ldrb	r2, [r3, #0]
 800b6a6:	2101      	movs	r1, #1
 800b6a8:	400a      	ands	r2, r1
 800b6aa:	701a      	strb	r2, [r3, #0]
  // Ensures that the timestamp is so far ahead that it would have wrapped
  // around past the maximum value of the counter indicating an overflow
  // scenario.
  bool overflowWithTimestampAhead =
      (now < timestamp && timestamp - now > HALF_TIME);
 800b6ac:	697a      	ldr	r2, [r7, #20]
 800b6ae:	687b      	ldr	r3, [r7, #4]
 800b6b0:	429a      	cmp	r2, r3
 800b6b2:	d207      	bcs.n	800b6c4 <TimestampIsReached+0x54>
 800b6b4:	687a      	ldr	r2, [r7, #4]
 800b6b6:	697b      	ldr	r3, [r7, #20]
 800b6b8:	1ad3      	subs	r3, r2, r3
 800b6ba:	693a      	ldr	r2, [r7, #16]
 800b6bc:	429a      	cmp	r2, r3
 800b6be:	d201      	bcs.n	800b6c4 <TimestampIsReached+0x54>
 800b6c0:	2201      	movs	r2, #1
 800b6c2:	e000      	b.n	800b6c6 <TimestampIsReached+0x56>
 800b6c4:	2200      	movs	r2, #0
  bool overflowWithTimestampAhead =
 800b6c6:	200e      	movs	r0, #14
 800b6c8:	183b      	adds	r3, r7, r0
 800b6ca:	701a      	strb	r2, [r3, #0]
 800b6cc:	781a      	ldrb	r2, [r3, #0]
 800b6ce:	2101      	movs	r1, #1
 800b6d0:	400a      	ands	r2, r1
 800b6d2:	701a      	strb	r2, [r3, #0]

  if (noOverflow || overflowWithTimestampAhead) {
 800b6d4:	230f      	movs	r3, #15
 800b6d6:	18fb      	adds	r3, r7, r3
 800b6d8:	781b      	ldrb	r3, [r3, #0]
 800b6da:	2b00      	cmp	r3, #0
 800b6dc:	d103      	bne.n	800b6e6 <TimestampIsReached+0x76>
 800b6de:	183b      	adds	r3, r7, r0
 800b6e0:	781b      	ldrb	r3, [r3, #0]
 800b6e2:	2b00      	cmp	r3, #0
 800b6e4:	d001      	beq.n	800b6ea <TimestampIsReached+0x7a>
    // Timestamp has been reached
    return true;
 800b6e6:	2301      	movs	r3, #1
 800b6e8:	e000      	b.n	800b6ec <TimestampIsReached+0x7c>
  }

  // Timestamp not yet reached
  return false;
 800b6ea:	2300      	movs	r3, #0
}
 800b6ec:	0018      	movs	r0, r3
 800b6ee:	46bd      	mov	sp, r7
 800b6f0:	b006      	add	sp, #24
 800b6f2:	bd80      	pop	{r7, pc}
 800b6f4:	7fffffff 	.word	0x7fffffff

0800b6f8 <AddTimestamp>:

static void AddTimestamp(char *stamp) {
 800b6f8:	b580      	push	{r7, lr}
 800b6fa:	b082      	sub	sp, #8
 800b6fc:	af00      	add	r7, sp, #0
 800b6fe:	6078      	str	r0, [r7, #4]
  sprintf(stamp, "[%08lu] ", (uint32_t)HAL_GetTick());
 800b700:	f000 fba8 	bl	800be54 <HAL_GetTick>
 800b704:	0002      	movs	r2, r0
 800b706:	4904      	ldr	r1, [pc, #16]	@ (800b718 <AddTimestamp+0x20>)
 800b708:	687b      	ldr	r3, [r7, #4]
 800b70a:	0018      	movs	r0, r3
 800b70c:	f010 fe30 	bl	801c370 <siprintf>
}
 800b710:	46c0      	nop			@ (mov r8, r8)
 800b712:	46bd      	mov	sp, r7
 800b714:	b002      	add	sp, #8
 800b716:	bd80      	pop	{r7, pc}
 800b718:	08020474 	.word	0x08020474

0800b71c <CreateLine>:

void CreateLine(VerboseLevel verboseLevel, char *tag, char *format, ...) {
 800b71c:	b40c      	push	{r2, r3}
 800b71e:	b5b0      	push	{r4, r5, r7, lr}
 800b720:	b0a4      	sub	sp, #144	@ 0x90
 800b722:	af00      	add	r7, sp, #0
 800b724:	0002      	movs	r2, r0
 800b726:	6039      	str	r1, [r7, #0]
 800b728:	1dfb      	adds	r3, r7, #7
 800b72a:	701a      	strb	r2, [r3, #0]

  if (verboseLevel > CurrentVerboseLevel) {
 800b72c:	4b23      	ldr	r3, [pc, #140]	@ (800b7bc <CreateLine+0xa0>)
 800b72e:	781b      	ldrb	r3, [r3, #0]
 800b730:	1dfa      	adds	r2, r7, #7
 800b732:	7812      	ldrb	r2, [r2, #0]
 800b734:	429a      	cmp	r2, r3
 800b736:	d839      	bhi.n	800b7ac <CreateLine+0x90>
    return;
  }
  char textBuffer[TEXTBUFFER_LEN];

  // Format the initial part of the message with the tag and timestamp
  sprintf(textBuffer, "%s ", tag);
 800b738:	683a      	ldr	r2, [r7, #0]
 800b73a:	4921      	ldr	r1, [pc, #132]	@ (800b7c0 <CreateLine+0xa4>)
 800b73c:	240c      	movs	r4, #12
 800b73e:	193b      	adds	r3, r7, r4
 800b740:	0018      	movs	r0, r3
 800b742:	f010 fe15 	bl	801c370 <siprintf>

  if (CurrentVerboseLevel > VERBOSE_MINIMAL) {
 800b746:	4b1d      	ldr	r3, [pc, #116]	@ (800b7bc <CreateLine+0xa0>)
 800b748:	781b      	ldrb	r3, [r3, #0]
 800b74a:	2b01      	cmp	r3, #1
 800b74c:	d909      	bls.n	800b762 <CreateLine+0x46>
    AddTimestamp(&textBuffer[strlen(textBuffer)]);
 800b74e:	193b      	adds	r3, r7, r4
 800b750:	0018      	movs	r0, r3
 800b752:	f7f4 fd0b 	bl	800016c <strlen>
 800b756:	0002      	movs	r2, r0
 800b758:	193b      	adds	r3, r7, r4
 800b75a:	189b      	adds	r3, r3, r2
 800b75c:	0018      	movs	r0, r3
 800b75e:	f7ff ffcb 	bl	800b6f8 <AddTimestamp>
  }
  int lineOffset = strlen(textBuffer);
 800b762:	240c      	movs	r4, #12
 800b764:	193b      	adds	r3, r7, r4
 800b766:	0018      	movs	r0, r3
 800b768:	f7f4 fd00 	bl	800016c <strlen>
 800b76c:	0003      	movs	r3, r0
 800b76e:	218c      	movs	r1, #140	@ 0x8c
 800b770:	187a      	adds	r2, r7, r1
 800b772:	6013      	str	r3, [r2, #0]

  // Format the rest of the message with the variable arguments
  va_list args;
  va_start(args, format);
 800b774:	239c      	movs	r3, #156	@ 0x9c
 800b776:	2508      	movs	r5, #8
 800b778:	195b      	adds	r3, r3, r5
 800b77a:	19db      	adds	r3, r3, r7
 800b77c:	60bb      	str	r3, [r7, #8]
  vsnprintf(&textBuffer[lineOffset], TEXTBUFFER_LEN - lineOffset, format, args);
 800b77e:	193a      	adds	r2, r7, r4
 800b780:	187b      	adds	r3, r7, r1
 800b782:	681b      	ldr	r3, [r3, #0]
 800b784:	18d0      	adds	r0, r2, r3
 800b786:	187b      	adds	r3, r7, r1
 800b788:	681b      	ldr	r3, [r3, #0]
 800b78a:	2280      	movs	r2, #128	@ 0x80
 800b78c:	1ad3      	subs	r3, r2, r3
 800b78e:	0019      	movs	r1, r3
 800b790:	68bb      	ldr	r3, [r7, #8]
 800b792:	2298      	movs	r2, #152	@ 0x98
 800b794:	1952      	adds	r2, r2, r5
 800b796:	19d2      	adds	r2, r2, r7
 800b798:	6812      	ldr	r2, [r2, #0]
 800b79a:	f010 fe81 	bl	801c4a0 <vsniprintf>
  va_end(args);

  // Print the final formatted message
  printf("%s\r\n", textBuffer);
 800b79e:	193a      	adds	r2, r7, r4
 800b7a0:	4b08      	ldr	r3, [pc, #32]	@ (800b7c4 <CreateLine+0xa8>)
 800b7a2:	0011      	movs	r1, r2
 800b7a4:	0018      	movs	r0, r3
 800b7a6:	f010 fdd3 	bl	801c350 <iprintf>
 800b7aa:	e000      	b.n	800b7ae <CreateLine+0x92>
    return;
 800b7ac:	46c0      	nop			@ (mov r8, r8)
}
 800b7ae:	46bd      	mov	sp, r7
 800b7b0:	b024      	add	sp, #144	@ 0x90
 800b7b2:	bcb0      	pop	{r4, r5, r7}
 800b7b4:	bc08      	pop	{r3}
 800b7b6:	b002      	add	sp, #8
 800b7b8:	4718      	bx	r3
 800b7ba:	46c0      	nop			@ (mov r8, r8)
 800b7bc:	200000cc 	.word	0x200000cc
 800b7c0:	08020480 	.word	0x08020480
 800b7c4:	08020484 	.word	0x08020484

0800b7c8 <_write>:

int _write(int fd, const void *buf, size_t count) {
 800b7c8:	b580      	push	{r7, lr}
 800b7ca:	b084      	sub	sp, #16
 800b7cc:	af00      	add	r7, sp, #0
 800b7ce:	60f8      	str	r0, [r7, #12]
 800b7d0:	60b9      	str	r1, [r7, #8]
 800b7d2:	607a      	str	r2, [r7, #4]
  HAL_UART_Transmit(&huart1, buf, count, 100);
 800b7d4:	687b      	ldr	r3, [r7, #4]
 800b7d6:	b29a      	uxth	r2, r3
 800b7d8:	68b9      	ldr	r1, [r7, #8]
 800b7da:	4804      	ldr	r0, [pc, #16]	@ (800b7ec <_write+0x24>)
 800b7dc:	2364      	movs	r3, #100	@ 0x64
 800b7de:	f007 ff3f 	bl	8013660 <HAL_UART_Transmit>
  return count;
 800b7e2:	687b      	ldr	r3, [r7, #4]
}
 800b7e4:	0018      	movs	r0, r3
 800b7e6:	46bd      	mov	sp, r7
 800b7e8:	b004      	add	sp, #16
 800b7ea:	bd80      	pop	{r7, pc}
 800b7ec:	200022a0 	.word	0x200022a0

0800b7f0 <SetVerboseLevel>:

void SetVerboseLevel(VerboseLevel level) { CurrentVerboseLevel = level; }
 800b7f0:	b580      	push	{r7, lr}
 800b7f2:	b082      	sub	sp, #8
 800b7f4:	af00      	add	r7, sp, #0
 800b7f6:	0002      	movs	r2, r0
 800b7f8:	1dfb      	adds	r3, r7, #7
 800b7fa:	701a      	strb	r2, [r3, #0]
 800b7fc:	4b03      	ldr	r3, [pc, #12]	@ (800b80c <SetVerboseLevel+0x1c>)
 800b7fe:	1dfa      	adds	r2, r7, #7
 800b800:	7812      	ldrb	r2, [r2, #0]
 800b802:	701a      	strb	r2, [r3, #0]
 800b804:	46c0      	nop			@ (mov r8, r8)
 800b806:	46bd      	mov	sp, r7
 800b808:	b002      	add	sp, #8
 800b80a:	bd80      	pop	{r7, pc}
 800b80c:	200000cc 	.word	0x200000cc

0800b810 <GetCurrentHalTicks>:

uint32_t GetCurrentHalTicks(void) {
 800b810:	b580      	push	{r7, lr}
 800b812:	af00      	add	r7, sp, #0
  return HAL_GetTick();
 800b814:	f000 fb1e 	bl	800be54 <HAL_GetTick>
 800b818:	0003      	movs	r3, r0
}
 800b81a:	0018      	movs	r0, r3
 800b81c:	46bd      	mov	sp, r7
 800b81e:	bd80      	pop	{r7, pc}

0800b820 <BinaryReleaseInfo>:

void BinaryReleaseInfo() {
 800b820:	b580      	push	{r7, lr}
 800b822:	b082      	sub	sp, #8
 800b824:	af02      	add	r7, sp, #8
  Info("=-=-=-=-=-=WOTS Gadget started.=-=-=-=-=-=");
 800b826:	4a0f      	ldr	r2, [pc, #60]	@ (800b864 <BinaryReleaseInfo+0x44>)
 800b828:	4b0f      	ldr	r3, [pc, #60]	@ (800b868 <BinaryReleaseInfo+0x48>)
 800b82a:	0019      	movs	r1, r3
 800b82c:	2002      	movs	r0, #2
 800b82e:	f7ff ff75 	bl	800b71c <CreateLine>
  Info("Build on: %s at %s", __DATE__, __TIME__);
 800b832:	480e      	ldr	r0, [pc, #56]	@ (800b86c <BinaryReleaseInfo+0x4c>)
 800b834:	4a0e      	ldr	r2, [pc, #56]	@ (800b870 <BinaryReleaseInfo+0x50>)
 800b836:	490c      	ldr	r1, [pc, #48]	@ (800b868 <BinaryReleaseInfo+0x48>)
 800b838:	4b0e      	ldr	r3, [pc, #56]	@ (800b874 <BinaryReleaseInfo+0x54>)
 800b83a:	9300      	str	r3, [sp, #0]
 800b83c:	0003      	movs	r3, r0
 800b83e:	2002      	movs	r0, #2
 800b840:	f7ff ff6c 	bl	800b71c <CreateLine>
  // Format: YY'w'WWv
  Info("Git: 24w48");
 800b844:	4a0c      	ldr	r2, [pc, #48]	@ (800b878 <BinaryReleaseInfo+0x58>)
 800b846:	4b08      	ldr	r3, [pc, #32]	@ (800b868 <BinaryReleaseInfo+0x48>)
 800b848:	0019      	movs	r1, r3
 800b84a:	2002      	movs	r0, #2
 800b84c:	f7ff ff66 	bl	800b71c <CreateLine>
  Info("Software version: %s", SRC_VERSION);
 800b850:	4b0a      	ldr	r3, [pc, #40]	@ (800b87c <BinaryReleaseInfo+0x5c>)
 800b852:	4a0b      	ldr	r2, [pc, #44]	@ (800b880 <BinaryReleaseInfo+0x60>)
 800b854:	4904      	ldr	r1, [pc, #16]	@ (800b868 <BinaryReleaseInfo+0x48>)
 800b856:	2002      	movs	r0, #2
 800b858:	f7ff ff60 	bl	800b71c <CreateLine>
}
 800b85c:	46c0      	nop			@ (mov r8, r8)
 800b85e:	46bd      	mov	sp, r7
 800b860:	bd80      	pop	{r7, pc}
 800b862:	46c0      	nop			@ (mov r8, r8)
 800b864:	0802048c 	.word	0x0802048c
 800b868:	080204b8 	.word	0x080204b8
 800b86c:	080204bc 	.word	0x080204bc
 800b870:	080204c8 	.word	0x080204c8
 800b874:	080204dc 	.word	0x080204dc
 800b878:	080204e8 	.word	0x080204e8
 800b87c:	080204f4 	.word	0x080204f4
 800b880:	080204fc 	.word	0x080204fc

0800b884 <errorHandler>:

// Call this as: errorHandler(__func__, __LINE__, __FILE__);
void errorHandler(const char * func, const uint32_t line, const char * file)
{
 800b884:	b580      	push	{r7, lr}
 800b886:	b084      	sub	sp, #16
 800b888:	af00      	add	r7, sp, #0
 800b88a:	60f8      	str	r0, [r7, #12]
 800b88c:	60b9      	str	r1, [r7, #8]
 800b88e:	607a      	str	r2, [r7, #4]
    printf("Error in %s at line %lu in file: %s\r\n", func, line, file);
 800b890:	687b      	ldr	r3, [r7, #4]
 800b892:	68ba      	ldr	r2, [r7, #8]
 800b894:	68f9      	ldr	r1, [r7, #12]
 800b896:	4803      	ldr	r0, [pc, #12]	@ (800b8a4 <errorHandler+0x20>)
 800b898:	f010 fd5a 	bl	801c350 <iprintf>
//    while (true)
//    {
//    }
}
 800b89c:	46c0      	nop			@ (mov r8, r8)
 800b89e:	46bd      	mov	sp, r7
 800b8a0:	b004      	add	sp, #16
 800b8a2:	bd80      	pop	{r7, pc}
 800b8a4:	08020514 	.word	0x08020514

0800b8a8 <ReadRegister>:
static bool MeasurementDone = false;

//static uint32_t SensorNextRunTime = HIDS_SENSOR_WAIT_TIME_HIGH;
//static uint32_t SensorWaitTime_ms = HIDS_SENSOR_WAIT_TIME_HIGH;

static bool ReadRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800b8a8:	b590      	push	{r4, r7, lr}
 800b8aa:	b083      	sub	sp, #12
 800b8ac:	af00      	add	r7, sp, #0
 800b8ae:	6039      	str	r1, [r7, #0]
 800b8b0:	0011      	movs	r1, r2
 800b8b2:	1dfb      	adds	r3, r7, #7
 800b8b4:	1c02      	adds	r2, r0, #0
 800b8b6:	701a      	strb	r2, [r3, #0]
 800b8b8:	1dbb      	adds	r3, r7, #6
 800b8ba:	1c0a      	adds	r2, r1, #0
 800b8bc:	701a      	strb	r2, [r3, #0]
	if (ReadFunction != NULL) {
 800b8be:	4b0a      	ldr	r3, [pc, #40]	@ (800b8e8 <ReadRegister+0x40>)
 800b8c0:	681b      	ldr	r3, [r3, #0]
 800b8c2:	2b00      	cmp	r3, #0
 800b8c4:	d00a      	beq.n	800b8dc <ReadRegister+0x34>
		return ReadFunction(address, buffer, nrBytes);
 800b8c6:	4b08      	ldr	r3, [pc, #32]	@ (800b8e8 <ReadRegister+0x40>)
 800b8c8:	681b      	ldr	r3, [r3, #0]
 800b8ca:	1dba      	adds	r2, r7, #6
 800b8cc:	7814      	ldrb	r4, [r2, #0]
 800b8ce:	6839      	ldr	r1, [r7, #0]
 800b8d0:	1dfa      	adds	r2, r7, #7
 800b8d2:	7810      	ldrb	r0, [r2, #0]
 800b8d4:	0022      	movs	r2, r4
 800b8d6:	4798      	blx	r3
 800b8d8:	0003      	movs	r3, r0
 800b8da:	e000      	b.n	800b8de <ReadRegister+0x36>
	}
	return false;
 800b8dc:	2300      	movs	r3, #0
}
 800b8de:	0018      	movs	r0, r3
 800b8e0:	46bd      	mov	sp, r7
 800b8e2:	b003      	add	sp, #12
 800b8e4:	bd90      	pop	{r4, r7, pc}
 800b8e6:	46c0      	nop			@ (mov r8, r8)
 800b8e8:	200024a0 	.word	0x200024a0

0800b8ec <WriteRegister>:

static bool WriteRegister(uint8_t address, uint8_t* buffer, uint8_t nrBytes) {
 800b8ec:	b590      	push	{r4, r7, lr}
 800b8ee:	b083      	sub	sp, #12
 800b8f0:	af00      	add	r7, sp, #0
 800b8f2:	6039      	str	r1, [r7, #0]
 800b8f4:	0011      	movs	r1, r2
 800b8f6:	1dfb      	adds	r3, r7, #7
 800b8f8:	1c02      	adds	r2, r0, #0
 800b8fa:	701a      	strb	r2, [r3, #0]
 800b8fc:	1dbb      	adds	r3, r7, #6
 800b8fe:	1c0a      	adds	r2, r1, #0
 800b900:	701a      	strb	r2, [r3, #0]
  if (WriteFunction != NULL) {
 800b902:	4b0a      	ldr	r3, [pc, #40]	@ (800b92c <WriteRegister+0x40>)
 800b904:	681b      	ldr	r3, [r3, #0]
 800b906:	2b00      	cmp	r3, #0
 800b908:	d00a      	beq.n	800b920 <WriteRegister+0x34>
    return WriteFunction(address, buffer, nrBytes);
 800b90a:	4b08      	ldr	r3, [pc, #32]	@ (800b92c <WriteRegister+0x40>)
 800b90c:	681b      	ldr	r3, [r3, #0]
 800b90e:	1dba      	adds	r2, r7, #6
 800b910:	7814      	ldrb	r4, [r2, #0]
 800b912:	6839      	ldr	r1, [r7, #0]
 800b914:	1dfa      	adds	r2, r7, #7
 800b916:	7810      	ldrb	r0, [r2, #0]
 800b918:	0022      	movs	r2, r4
 800b91a:	4798      	blx	r3
 800b91c:	0003      	movs	r3, r0
 800b91e:	e000      	b.n	800b922 <WriteRegister+0x36>
  }
  return false;
 800b920:	2300      	movs	r3, #0
}
 800b922:	0018      	movs	r0, r3
 800b924:	46bd      	mov	sp, r7
 800b926:	b003      	add	sp, #12
 800b928:	bd90      	pop	{r4, r7, pc}
 800b92a:	46c0      	nop			@ (mov r8, r8)
 800b92c:	200024a4 	.word	0x200024a4

0800b930 <CalculateCRC>:

static uint8_t CalculateCRC(uint8_t* data, uint8_t length) {
 800b930:	b580      	push	{r7, lr}
 800b932:	b084      	sub	sp, #16
 800b934:	af00      	add	r7, sp, #0
 800b936:	6078      	str	r0, [r7, #4]
 800b938:	000a      	movs	r2, r1
 800b93a:	1cfb      	adds	r3, r7, #3
 800b93c:	701a      	strb	r2, [r3, #0]
  uint8_t crc = HIDS_CRC_INIT_VALUE;
 800b93e:	230f      	movs	r3, #15
 800b940:	18fb      	adds	r3, r7, r3
 800b942:	22ff      	movs	r2, #255	@ 0xff
 800b944:	701a      	strb	r2, [r3, #0]

  for (uint8_t i = 0; i < length; i++) {
 800b946:	230e      	movs	r3, #14
 800b948:	18fb      	adds	r3, r7, r3
 800b94a:	2200      	movs	r2, #0
 800b94c:	701a      	strb	r2, [r3, #0]
 800b94e:	e037      	b.n	800b9c0 <CalculateCRC+0x90>
    // XOR byte into least significant byte of crc
    crc ^= data[i];
 800b950:	230e      	movs	r3, #14
 800b952:	18fb      	adds	r3, r7, r3
 800b954:	781b      	ldrb	r3, [r3, #0]
 800b956:	687a      	ldr	r2, [r7, #4]
 800b958:	18d3      	adds	r3, r2, r3
 800b95a:	7819      	ldrb	r1, [r3, #0]
 800b95c:	220f      	movs	r2, #15
 800b95e:	18bb      	adds	r3, r7, r2
 800b960:	18ba      	adds	r2, r7, r2
 800b962:	7812      	ldrb	r2, [r2, #0]
 800b964:	404a      	eors	r2, r1
 800b966:	701a      	strb	r2, [r3, #0]

    for (uint8_t j = 0; j < 8; j++) {
 800b968:	230d      	movs	r3, #13
 800b96a:	18fb      	adds	r3, r7, r3
 800b96c:	2200      	movs	r2, #0
 800b96e:	701a      	strb	r2, [r3, #0]
 800b970:	e01b      	b.n	800b9aa <CalculateCRC+0x7a>
      // If the leftmost (most significant) bit is set
      if (crc & HIDS_CRC_MSB_MASK) {
 800b972:	210f      	movs	r1, #15
 800b974:	187b      	adds	r3, r7, r1
 800b976:	781b      	ldrb	r3, [r3, #0]
 800b978:	b25b      	sxtb	r3, r3
 800b97a:	2b00      	cmp	r3, #0
 800b97c:	da09      	bge.n	800b992 <CalculateCRC+0x62>
        // Shift left and XOR with polynomial
        crc = (crc << 1) ^ HIDS_CRC_POLYNOMIAL;
 800b97e:	187b      	adds	r3, r7, r1
 800b980:	781b      	ldrb	r3, [r3, #0]
 800b982:	005b      	lsls	r3, r3, #1
 800b984:	b25b      	sxtb	r3, r3
 800b986:	2231      	movs	r2, #49	@ 0x31
 800b988:	4053      	eors	r3, r2
 800b98a:	b25a      	sxtb	r2, r3
 800b98c:	187b      	adds	r3, r7, r1
 800b98e:	701a      	strb	r2, [r3, #0]
 800b990:	e005      	b.n	800b99e <CalculateCRC+0x6e>
      } else {
          crc <<= 1;
 800b992:	230f      	movs	r3, #15
 800b994:	18fa      	adds	r2, r7, r3
 800b996:	18fb      	adds	r3, r7, r3
 800b998:	781b      	ldrb	r3, [r3, #0]
 800b99a:	18db      	adds	r3, r3, r3
 800b99c:	7013      	strb	r3, [r2, #0]
    for (uint8_t j = 0; j < 8; j++) {
 800b99e:	210d      	movs	r1, #13
 800b9a0:	187b      	adds	r3, r7, r1
 800b9a2:	781a      	ldrb	r2, [r3, #0]
 800b9a4:	187b      	adds	r3, r7, r1
 800b9a6:	3201      	adds	r2, #1
 800b9a8:	701a      	strb	r2, [r3, #0]
 800b9aa:	230d      	movs	r3, #13
 800b9ac:	18fb      	adds	r3, r7, r3
 800b9ae:	781b      	ldrb	r3, [r3, #0]
 800b9b0:	2b07      	cmp	r3, #7
 800b9b2:	d9de      	bls.n	800b972 <CalculateCRC+0x42>
  for (uint8_t i = 0; i < length; i++) {
 800b9b4:	210e      	movs	r1, #14
 800b9b6:	187b      	adds	r3, r7, r1
 800b9b8:	781a      	ldrb	r2, [r3, #0]
 800b9ba:	187b      	adds	r3, r7, r1
 800b9bc:	3201      	adds	r2, #1
 800b9be:	701a      	strb	r2, [r3, #0]
 800b9c0:	230e      	movs	r3, #14
 800b9c2:	18fa      	adds	r2, r7, r3
 800b9c4:	1cfb      	adds	r3, r7, #3
 800b9c6:	7812      	ldrb	r2, [r2, #0]
 800b9c8:	781b      	ldrb	r3, [r3, #0]
 800b9ca:	429a      	cmp	r2, r3
 800b9cc:	d3c0      	bcc.n	800b950 <CalculateCRC+0x20>
      }
    }
  }

//  Debug("CRC calculated value: 0x%X", crc);
  return crc;
 800b9ce:	230f      	movs	r3, #15
 800b9d0:	18fb      	adds	r3, r7, r3
 800b9d2:	781b      	ldrb	r3, [r3, #0]
}
 800b9d4:	0018      	movs	r0, r3
 800b9d6:	46bd      	mov	sp, r7
 800b9d8:	b004      	add	sp, #16
 800b9da:	bd80      	pop	{r7, pc}

0800b9dc <HIDS_Init>:
  uint8_t heaterReg = HeaterMode;
  WriteRegister(HIDS_I2C_ADDRESS, &heaterReg, 1);
  Info("Started the heater in mode: %d", heaterReg);
}

void HIDS_Init(I2CReadCb readFunction, I2CWriteCB writeFunction) {
 800b9dc:	b580      	push	{r7, lr}
 800b9de:	b082      	sub	sp, #8
 800b9e0:	af00      	add	r7, sp, #0
 800b9e2:	6078      	str	r0, [r7, #4]
 800b9e4:	6039      	str	r1, [r7, #0]
	ReadFunction = readFunction;
 800b9e6:	4b0a      	ldr	r3, [pc, #40]	@ (800ba10 <HIDS_Init+0x34>)
 800b9e8:	687a      	ldr	r2, [r7, #4]
 800b9ea:	601a      	str	r2, [r3, #0]
	WriteFunction = writeFunction;
 800b9ec:	4b09      	ldr	r3, [pc, #36]	@ (800ba14 <HIDS_Init+0x38>)
 800b9ee:	683a      	ldr	r2, [r7, #0]
 800b9f0:	601a      	str	r2, [r3, #0]
	HIDS_SetMeasurementMode(MeasureMode);
 800b9f2:	4b09      	ldr	r3, [pc, #36]	@ (800ba18 <HIDS_Init+0x3c>)
 800b9f4:	781b      	ldrb	r3, [r3, #0]
 800b9f6:	0018      	movs	r0, r3
 800b9f8:	f000 f8da 	bl	800bbb0 <HIDS_SetMeasurementMode>
	HIDS_SetHeaterMode(HeaterMode);
 800b9fc:	4b07      	ldr	r3, [pc, #28]	@ (800ba1c <HIDS_Init+0x40>)
 800b9fe:	781b      	ldrb	r3, [r3, #0]
 800ba00:	0018      	movs	r0, r3
 800ba02:	f000 f82b 	bl	800ba5c <HIDS_SetHeaterMode>
//	HIDS_EnableHeater();
	// TODO: Enable heater after measurement is done and humidity is above a certain percentage, use formula.
}
 800ba06:	46c0      	nop			@ (mov r8, r8)
 800ba08:	46bd      	mov	sp, r7
 800ba0a:	b002      	add	sp, #8
 800ba0c:	bd80      	pop	{r7, pc}
 800ba0e:	46c0      	nop			@ (mov r8, r8)
 800ba10:	200024a0 	.word	0x200024a0
 800ba14:	200024a4 	.word	0x200024a4
 800ba18:	200000ce 	.word	0x200000ce
 800ba1c:	200000cd 	.word	0x200000cd

0800ba20 <HIDS_StartMeasurement>:

void HIDS_StartMeasurement(void) {
 800ba20:	b580      	push	{r7, lr}
 800ba22:	af00      	add	r7, sp, #0
  HIDS_NextRunTime = GetCurrentHalTicks() + HIDS_Interval_ms;
 800ba24:	f7ff fef4 	bl	800b810 <GetCurrentHalTicks>
 800ba28:	0002      	movs	r2, r0
 800ba2a:	4b08      	ldr	r3, [pc, #32]	@ (800ba4c <HIDS_StartMeasurement+0x2c>)
 800ba2c:	681b      	ldr	r3, [r3, #0]
 800ba2e:	18d2      	adds	r2, r2, r3
 800ba30:	4b07      	ldr	r3, [pc, #28]	@ (800ba50 <HIDS_StartMeasurement+0x30>)
 800ba32:	601a      	str	r2, [r3, #0]
  WriteRegister(HIDS_I2C_ADDRESS, &MeasureMode, 1);
 800ba34:	4b07      	ldr	r3, [pc, #28]	@ (800ba54 <HIDS_StartMeasurement+0x34>)
 800ba36:	2201      	movs	r2, #1
 800ba38:	0019      	movs	r1, r3
 800ba3a:	2044      	movs	r0, #68	@ 0x44
 800ba3c:	f7ff ff56 	bl	800b8ec <WriteRegister>
  MeasurementDone = false;
 800ba40:	4b05      	ldr	r3, [pc, #20]	@ (800ba58 <HIDS_StartMeasurement+0x38>)
 800ba42:	2200      	movs	r2, #0
 800ba44:	701a      	strb	r2, [r3, #0]
}
 800ba46:	46c0      	nop			@ (mov r8, r8)
 800ba48:	46bd      	mov	sp, r7
 800ba4a:	bd80      	pop	{r7, pc}
 800ba4c:	200000d4 	.word	0x200000d4
 800ba50:	200000d0 	.word	0x200000d0
 800ba54:	200000ce 	.word	0x200000ce
 800ba58:	200024b6 	.word	0x200024b6

0800ba5c <HIDS_SetHeaterMode>:

void HIDS_SetMeasurementDuration(uint32_t duration) {
  HIDS_MeasurementDuration = duration;
}

void HIDS_SetHeaterMode(HIDSHeaterModes modeHeater) {
 800ba5c:	b580      	push	{r7, lr}
 800ba5e:	b082      	sub	sp, #8
 800ba60:	af00      	add	r7, sp, #0
 800ba62:	0002      	movs	r2, r0
 800ba64:	1dfb      	adds	r3, r7, #7
 800ba66:	701a      	strb	r2, [r3, #0]
  HeaterMode = modeHeater;
 800ba68:	4b03      	ldr	r3, [pc, #12]	@ (800ba78 <HIDS_SetHeaterMode+0x1c>)
 800ba6a:	1dfa      	adds	r2, r7, #7
 800ba6c:	7812      	ldrb	r2, [r2, #0]
 800ba6e:	701a      	strb	r2, [r3, #0]
}
 800ba70:	46c0      	nop			@ (mov r8, r8)
 800ba72:	46bd      	mov	sp, r7
 800ba74:	b002      	add	sp, #8
 800ba76:	bd80      	pop	{r7, pc}
 800ba78:	200000cd 	.word	0x200000cd

0800ba7c <CheckCRC>:

static bool CheckCRC(uint8_t* data) {
 800ba7c:	b590      	push	{r4, r7, lr}
 800ba7e:	b085      	sub	sp, #20
 800ba80:	af00      	add	r7, sp, #0
 800ba82:	6078      	str	r0, [r7, #4]
  // Data format: 2 bytes for data, followed by an 8-bit CRC

	// Check CRC for the first segment
	uint8_t crcData1[2] = {data[0], data[1]};
 800ba84:	687b      	ldr	r3, [r7, #4]
 800ba86:	781a      	ldrb	r2, [r3, #0]
 800ba88:	210c      	movs	r1, #12
 800ba8a:	187b      	adds	r3, r7, r1
 800ba8c:	701a      	strb	r2, [r3, #0]
 800ba8e:	687b      	ldr	r3, [r7, #4]
 800ba90:	785a      	ldrb	r2, [r3, #1]
 800ba92:	187b      	adds	r3, r7, r1
 800ba94:	705a      	strb	r2, [r3, #1]
	uint8_t crc1 = data[2];
 800ba96:	240f      	movs	r4, #15
 800ba98:	193b      	adds	r3, r7, r4
 800ba9a:	687a      	ldr	r2, [r7, #4]
 800ba9c:	7892      	ldrb	r2, [r2, #2]
 800ba9e:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData1, 2) != crc1) {
 800baa0:	187b      	adds	r3, r7, r1
 800baa2:	2102      	movs	r1, #2
 800baa4:	0018      	movs	r0, r3
 800baa6:	f7ff ff43 	bl	800b930 <CalculateCRC>
 800baaa:	0003      	movs	r3, r0
 800baac:	001a      	movs	r2, r3
 800baae:	193b      	adds	r3, r7, r4
 800bab0:	781b      	ldrb	r3, [r3, #0]
 800bab2:	4293      	cmp	r3, r2
 800bab4:	d007      	beq.n	800bac6 <CheckCRC+0x4a>
		Error("CRC check failed for the first segment.");
 800bab6:	4a1a      	ldr	r2, [pc, #104]	@ (800bb20 <CheckCRC+0xa4>)
 800bab8:	4b1a      	ldr	r3, [pc, #104]	@ (800bb24 <CheckCRC+0xa8>)
 800baba:	0019      	movs	r1, r3
 800babc:	2001      	movs	r0, #1
 800babe:	f7ff fe2d 	bl	800b71c <CreateLine>
//		errorHandler(__func__, __LINE__, __FILE__);
		return false;
 800bac2:	2300      	movs	r3, #0
 800bac4:	e027      	b.n	800bb16 <CheckCRC+0x9a>
	}

	// Check CRC for the second segment
	uint8_t crcData2[2] = {data[3], data[4]};
 800bac6:	687b      	ldr	r3, [r7, #4]
 800bac8:	78da      	ldrb	r2, [r3, #3]
 800baca:	2108      	movs	r1, #8
 800bacc:	187b      	adds	r3, r7, r1
 800bace:	701a      	strb	r2, [r3, #0]
 800bad0:	687b      	ldr	r3, [r7, #4]
 800bad2:	791a      	ldrb	r2, [r3, #4]
 800bad4:	187b      	adds	r3, r7, r1
 800bad6:	705a      	strb	r2, [r3, #1]
	uint8_t crc2 = data[5];
 800bad8:	240e      	movs	r4, #14
 800bada:	193b      	adds	r3, r7, r4
 800badc:	687a      	ldr	r2, [r7, #4]
 800bade:	7952      	ldrb	r2, [r2, #5]
 800bae0:	701a      	strb	r2, [r3, #0]
	if (CalculateCRC(crcData2, 2) != crc2) {
 800bae2:	187b      	adds	r3, r7, r1
 800bae4:	2102      	movs	r1, #2
 800bae6:	0018      	movs	r0, r3
 800bae8:	f7ff ff22 	bl	800b930 <CalculateCRC>
 800baec:	0003      	movs	r3, r0
 800baee:	001a      	movs	r2, r3
 800baf0:	193b      	adds	r3, r7, r4
 800baf2:	781b      	ldrb	r3, [r3, #0]
 800baf4:	4293      	cmp	r3, r2
 800baf6:	d00d      	beq.n	800bb14 <CheckCRC+0x98>
		Error("CRC check failed for the second segment.");
 800baf8:	4a0b      	ldr	r2, [pc, #44]	@ (800bb28 <CheckCRC+0xac>)
 800bafa:	4b0a      	ldr	r3, [pc, #40]	@ (800bb24 <CheckCRC+0xa8>)
 800bafc:	0019      	movs	r1, r3
 800bafe:	2001      	movs	r0, #1
 800bb00:	f7ff fe0c 	bl	800b71c <CreateLine>
		errorHandler(__func__, __LINE__, __FILE__);
 800bb04:	4a09      	ldr	r2, [pc, #36]	@ (800bb2c <CheckCRC+0xb0>)
 800bb06:	4b0a      	ldr	r3, [pc, #40]	@ (800bb30 <CheckCRC+0xb4>)
 800bb08:	2170      	movs	r1, #112	@ 0x70
 800bb0a:	0018      	movs	r0, r3
 800bb0c:	f7ff feba 	bl	800b884 <errorHandler>
		return false;
 800bb10:	2300      	movs	r3, #0
 800bb12:	e000      	b.n	800bb16 <CheckCRC+0x9a>
	}
	return true;
 800bb14:	2301      	movs	r3, #1
}
 800bb16:	0018      	movs	r0, r3
 800bb18:	46bd      	mov	sp, r7
 800bb1a:	b005      	add	sp, #20
 800bb1c:	bd90      	pop	{r4, r7, pc}
 800bb1e:	46c0      	nop			@ (mov r8, r8)
 800bb20:	08020560 	.word	0x08020560
 800bb24:	08020588 	.word	0x08020588
 800bb28:	0802058c 	.word	0x0802058c
 800bb2c:	080205b8 	.word	0x080205b8
 800bb30:	08020a1c 	.word	0x08020a1c

0800bb34 <HIDS_DeviceConnected>:

bool HIDS_DeviceConnected(void) {
 800bb34:	b580      	push	{r7, lr}
 800bb36:	b084      	sub	sp, #16
 800bb38:	af02      	add	r7, sp, #8
	uint8_t serialReg = HIDS_SERIAL_NUMBER_REG;
 800bb3a:	1dbb      	adds	r3, r7, #6
 800bb3c:	2289      	movs	r2, #137	@ 0x89
 800bb3e:	701a      	strb	r2, [r3, #0]
	WriteRegister(HIDS_I2C_ADDRESS, &serialReg, 1);
 800bb40:	1dbb      	adds	r3, r7, #6
 800bb42:	2201      	movs	r2, #1
 800bb44:	0019      	movs	r1, r3
 800bb46:	2044      	movs	r0, #68	@ 0x44
 800bb48:	f7ff fed0 	bl	800b8ec <WriteRegister>
	HAL_Delay(30);
 800bb4c:	201e      	movs	r0, #30
 800bb4e:	f000 f98b 	bl	800be68 <HAL_Delay>
	ReadRegister(HIDS_I2C_ADDRESS, SerialBuffer, HIDS_SERIAL_BUFFER_LENGTH);
 800bb52:	4b14      	ldr	r3, [pc, #80]	@ (800bba4 <HIDS_DeviceConnected+0x70>)
 800bb54:	2206      	movs	r2, #6
 800bb56:	0019      	movs	r1, r3
 800bb58:	2044      	movs	r0, #68	@ 0x44
 800bb5a:	f7ff fea5 	bl	800b8a8 <ReadRegister>

	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 800bb5e:	1dfb      	adds	r3, r7, #7
 800bb60:	2200      	movs	r2, #0
 800bb62:	701a      	strb	r2, [r3, #0]
 800bb64:	e011      	b.n	800bb8a <HIDS_DeviceConnected+0x56>
		Info("HIDS_Device serial ID[%d]: 0x%X", i, SerialBuffer[i]);
 800bb66:	1dfb      	adds	r3, r7, #7
 800bb68:	7818      	ldrb	r0, [r3, #0]
 800bb6a:	1dfb      	adds	r3, r7, #7
 800bb6c:	781b      	ldrb	r3, [r3, #0]
 800bb6e:	4a0d      	ldr	r2, [pc, #52]	@ (800bba4 <HIDS_DeviceConnected+0x70>)
 800bb70:	5cd3      	ldrb	r3, [r2, r3]
 800bb72:	4a0d      	ldr	r2, [pc, #52]	@ (800bba8 <HIDS_DeviceConnected+0x74>)
 800bb74:	490d      	ldr	r1, [pc, #52]	@ (800bbac <HIDS_DeviceConnected+0x78>)
 800bb76:	9300      	str	r3, [sp, #0]
 800bb78:	0003      	movs	r3, r0
 800bb7a:	2002      	movs	r0, #2
 800bb7c:	f7ff fdce 	bl	800b71c <CreateLine>
	for (uint8_t i = 0; i < HIDS_SERIAL_BUFFER_LENGTH; i++) {
 800bb80:	1dfb      	adds	r3, r7, #7
 800bb82:	781a      	ldrb	r2, [r3, #0]
 800bb84:	1dfb      	adds	r3, r7, #7
 800bb86:	3201      	adds	r2, #1
 800bb88:	701a      	strb	r2, [r3, #0]
 800bb8a:	1dfb      	adds	r3, r7, #7
 800bb8c:	781b      	ldrb	r3, [r3, #0]
 800bb8e:	2b05      	cmp	r3, #5
 800bb90:	d9e9      	bls.n	800bb66 <HIDS_DeviceConnected+0x32>
	}
	return CheckCRC(SerialBuffer);
 800bb92:	4b04      	ldr	r3, [pc, #16]	@ (800bba4 <HIDS_DeviceConnected+0x70>)
 800bb94:	0018      	movs	r0, r3
 800bb96:	f7ff ff71 	bl	800ba7c <CheckCRC>
 800bb9a:	0003      	movs	r3, r0
}
 800bb9c:	0018      	movs	r0, r3
 800bb9e:	46bd      	mov	sp, r7
 800bba0:	b002      	add	sp, #8
 800bba2:	bd80      	pop	{r7, pc}
 800bba4:	200024a8 	.word	0x200024a8
 800bba8:	080205d0 	.word	0x080205d0
 800bbac:	0802055c 	.word	0x0802055c

0800bbb0 <HIDS_SetMeasurementMode>:

void HIDS_SetMeasurementMode(HIDSMeasureModes modeMeasure) {
 800bbb0:	b580      	push	{r7, lr}
 800bbb2:	b082      	sub	sp, #8
 800bbb4:	af00      	add	r7, sp, #0
 800bbb6:	0002      	movs	r2, r0
 800bbb8:	1dfb      	adds	r3, r7, #7
 800bbba:	701a      	strb	r2, [r3, #0]
	MeasureMode = modeMeasure;
 800bbbc:	4b03      	ldr	r3, [pc, #12]	@ (800bbcc <HIDS_SetMeasurementMode+0x1c>)
 800bbbe:	1dfa      	adds	r2, r7, #7
 800bbc0:	7812      	ldrb	r2, [r2, #0]
 800bbc2:	701a      	strb	r2, [r3, #0]
}
 800bbc4:	46c0      	nop			@ (mov r8, r8)
 800bbc6:	46bd      	mov	sp, r7
 800bbc8:	b002      	add	sp, #8
 800bbca:	bd80      	pop	{r7, pc}
 800bbcc:	200000ce 	.word	0x200000ce

0800bbd0 <HIDS_MeasurementReady>:

bool HIDS_MeasurementReady(void) {
 800bbd0:	b580      	push	{r7, lr}
 800bbd2:	af00      	add	r7, sp, #0
  return TimestampIsReached(HIDS_NextRunTime);
 800bbd4:	4b04      	ldr	r3, [pc, #16]	@ (800bbe8 <HIDS_MeasurementReady+0x18>)
 800bbd6:	681b      	ldr	r3, [r3, #0]
 800bbd8:	0018      	movs	r0, r3
 800bbda:	f7ff fd49 	bl	800b670 <TimestampIsReached>
 800bbde:	0003      	movs	r3, r0
}
 800bbe0:	0018      	movs	r0, r3
 800bbe2:	46bd      	mov	sp, r7
 800bbe4:	bd80      	pop	{r7, pc}
 800bbe6:	46c0      	nop			@ (mov r8, r8)
 800bbe8:	200000d0 	.word	0x200000d0

0800bbec <HIDS_GetMeasurementValues>:
//    green = (1- ((humidity - 80)/20))*Full;
//    blue = Full;
//  }
}

bool HIDS_GetMeasurementValues(float* humidity, float* temperature) {
 800bbec:	b590      	push	{r4, r7, lr}
 800bbee:	b087      	sub	sp, #28
 800bbf0:	af00      	add	r7, sp, #0
 800bbf2:	6078      	str	r0, [r7, #4]
 800bbf4:	6039      	str	r1, [r7, #0]
  // TODO: Store last measurement humidity for sgp40 measurement.
  if(MeasurementDone) return true;
 800bbf6:	4b49      	ldr	r3, [pc, #292]	@ (800bd1c <HIDS_GetMeasurementValues+0x130>)
 800bbf8:	781b      	ldrb	r3, [r3, #0]
 800bbfa:	2b00      	cmp	r3, #0
 800bbfc:	d001      	beq.n	800bc02 <HIDS_GetMeasurementValues+0x16>
 800bbfe:	2301      	movs	r3, #1
 800bc00:	e087      	b.n	800bd12 <HIDS_GetMeasurementValues+0x126>
  if(!HIDS_MeasurementReady()) return false;
 800bc02:	f7ff ffe5 	bl	800bbd0 <HIDS_MeasurementReady>
 800bc06:	0003      	movs	r3, r0
 800bc08:	001a      	movs	r2, r3
 800bc0a:	2301      	movs	r3, #1
 800bc0c:	4053      	eors	r3, r2
 800bc0e:	b2db      	uxtb	r3, r3
 800bc10:	2b00      	cmp	r3, #0
 800bc12:	d001      	beq.n	800bc18 <HIDS_GetMeasurementValues+0x2c>
 800bc14:	2300      	movs	r3, #0
 800bc16:	e07c      	b.n	800bd12 <HIDS_GetMeasurementValues+0x126>
  float currentHumidity;
//  static float temperatures[HIDS_MAX_MEASUREMENTS];
//  static float humidities[HIDS_MAX_MEASUREMENTS];

  //Debug("HT measurements: %d out of %d completed.", measurements + 1, amountOfMeasurements);
  bool read = ReadRegister(HIDS_I2C_ADDRESS, MeasureBuffer, HIDS_MEASURE_BUFFER_LENGTH);
 800bc18:	2316      	movs	r3, #22
 800bc1a:	18fc      	adds	r4, r7, r3
 800bc1c:	4b40      	ldr	r3, [pc, #256]	@ (800bd20 <HIDS_GetMeasurementValues+0x134>)
 800bc1e:	2206      	movs	r2, #6
 800bc20:	0019      	movs	r1, r3
 800bc22:	2044      	movs	r0, #68	@ 0x44
 800bc24:	f7ff fe40 	bl	800b8a8 <ReadRegister>
 800bc28:	0003      	movs	r3, r0
 800bc2a:	7023      	strb	r3, [r4, #0]
	if(!CheckCRC(MeasureBuffer)) {
 800bc2c:	4b3c      	ldr	r3, [pc, #240]	@ (800bd20 <HIDS_GetMeasurementValues+0x134>)
 800bc2e:	0018      	movs	r0, r3
 800bc30:	f7ff ff24 	bl	800ba7c <CheckCRC>
 800bc34:	0003      	movs	r3, r0
 800bc36:	001a      	movs	r2, r3
 800bc38:	2301      	movs	r3, #1
 800bc3a:	4053      	eors	r3, r2
 800bc3c:	b2db      	uxtb	r3, r3
 800bc3e:	2b00      	cmp	r3, #0
 800bc40:	d011      	beq.n	800bc66 <HIDS_GetMeasurementValues+0x7a>
		//Error("HIDS measurements CRC check failed.");
		//Info("Measure buffer structure:");
		for(uint8_t i = 0; i < HIDS_MEASURE_BUFFER_LENGTH; i++) {
 800bc42:	2317      	movs	r3, #23
 800bc44:	18fb      	adds	r3, r7, r3
 800bc46:	2200      	movs	r2, #0
 800bc48:	701a      	strb	r2, [r3, #0]
 800bc4a:	e005      	b.n	800bc58 <HIDS_GetMeasurementValues+0x6c>
 800bc4c:	2117      	movs	r1, #23
 800bc4e:	187b      	adds	r3, r7, r1
 800bc50:	781a      	ldrb	r2, [r3, #0]
 800bc52:	187b      	adds	r3, r7, r1
 800bc54:	3201      	adds	r2, #1
 800bc56:	701a      	strb	r2, [r3, #0]
 800bc58:	2317      	movs	r3, #23
 800bc5a:	18fb      	adds	r3, r7, r3
 800bc5c:	781b      	ldrb	r3, [r3, #0]
 800bc5e:	2b05      	cmp	r3, #5
 800bc60:	d9f4      	bls.n	800bc4c <HIDS_GetMeasurementValues+0x60>
			//Debug("HIDS_Measurement buffer[%d]: %d", i, MeasureBuffer[i]);
		}
		return false;
 800bc62:	2300      	movs	r3, #0
 800bc64:	e055      	b.n	800bd12 <HIDS_GetMeasurementValues+0x126>

  // Humidity formula in percentage:
  //  RH = ((-6 + 125 * SRH) / (2^16 - 1))
  // Temperature formula in degrees Celsius:
  //  T = ((-45 + (175 * ST) / (2^16 - 1)))
	currentTemperature = (((175 * ((MeasureBuffer[0] << 8) | MeasureBuffer[1]))) / HIDS_POW_2_16_MINUS_1);
 800bc66:	4b2e      	ldr	r3, [pc, #184]	@ (800bd20 <HIDS_GetMeasurementValues+0x134>)
 800bc68:	781b      	ldrb	r3, [r3, #0]
 800bc6a:	021b      	lsls	r3, r3, #8
 800bc6c:	4a2c      	ldr	r2, [pc, #176]	@ (800bd20 <HIDS_GetMeasurementValues+0x134>)
 800bc6e:	7852      	ldrb	r2, [r2, #1]
 800bc70:	4313      	orrs	r3, r2
 800bc72:	22af      	movs	r2, #175	@ 0xaf
 800bc74:	4353      	muls	r3, r2
 800bc76:	0018      	movs	r0, r3
 800bc78:	f7f7 fba2 	bl	80033c0 <__aeabi_i2d>
 800bc7c:	2200      	movs	r2, #0
 800bc7e:	4b29      	ldr	r3, [pc, #164]	@ (800bd24 <HIDS_GetMeasurementValues+0x138>)
 800bc80:	f7f6 f898 	bl	8001db4 <__aeabi_ddiv>
 800bc84:	0002      	movs	r2, r0
 800bc86:	000b      	movs	r3, r1
 800bc88:	0010      	movs	r0, r2
 800bc8a:	0019      	movs	r1, r3
 800bc8c:	f7f7 fc32 	bl	80034f4 <__aeabi_d2f>
 800bc90:	1c03      	adds	r3, r0, #0
 800bc92:	613b      	str	r3, [r7, #16]
	currentTemperature += -45;
 800bc94:	4924      	ldr	r1, [pc, #144]	@ (800bd28 <HIDS_GetMeasurementValues+0x13c>)
 800bc96:	6938      	ldr	r0, [r7, #16]
 800bc98:	f7f5 fac0 	bl	800121c <__aeabi_fsub>
 800bc9c:	1c03      	adds	r3, r0, #0
 800bc9e:	613b      	str	r3, [r7, #16]
	currentHumidity = ((125 * ((MeasureBuffer[3] << 8) | MeasureBuffer[4]) / HIDS_POW_2_16_MINUS_1));
 800bca0:	4b1f      	ldr	r3, [pc, #124]	@ (800bd20 <HIDS_GetMeasurementValues+0x134>)
 800bca2:	78db      	ldrb	r3, [r3, #3]
 800bca4:	021b      	lsls	r3, r3, #8
 800bca6:	4a1e      	ldr	r2, [pc, #120]	@ (800bd20 <HIDS_GetMeasurementValues+0x134>)
 800bca8:	7912      	ldrb	r2, [r2, #4]
 800bcaa:	431a      	orrs	r2, r3
 800bcac:	0013      	movs	r3, r2
 800bcae:	015b      	lsls	r3, r3, #5
 800bcb0:	1a9b      	subs	r3, r3, r2
 800bcb2:	009b      	lsls	r3, r3, #2
 800bcb4:	189b      	adds	r3, r3, r2
 800bcb6:	0018      	movs	r0, r3
 800bcb8:	f7f7 fb82 	bl	80033c0 <__aeabi_i2d>
 800bcbc:	2200      	movs	r2, #0
 800bcbe:	4b19      	ldr	r3, [pc, #100]	@ (800bd24 <HIDS_GetMeasurementValues+0x138>)
 800bcc0:	f7f6 f878 	bl	8001db4 <__aeabi_ddiv>
 800bcc4:	0002      	movs	r2, r0
 800bcc6:	000b      	movs	r3, r1
 800bcc8:	0010      	movs	r0, r2
 800bcca:	0019      	movs	r1, r3
 800bccc:	f7f7 fc12 	bl	80034f4 <__aeabi_d2f>
 800bcd0:	1c03      	adds	r3, r0, #0
 800bcd2:	60fb      	str	r3, [r7, #12]
	currentHumidity += -6;
 800bcd4:	4915      	ldr	r1, [pc, #84]	@ (800bd2c <HIDS_GetMeasurementValues+0x140>)
 800bcd6:	68f8      	ldr	r0, [r7, #12]
 800bcd8:	f7f5 faa0 	bl	800121c <__aeabi_fsub>
 800bcdc:	1c03      	adds	r3, r0, #0
 800bcde:	60fb      	str	r3, [r7, #12]
//    for (uint8_t i = 0; i < measurements; i++) {
//        sumTemperature += temperatures[i];
//        sumHumidity += humidities[i];
//    }

   *temperature = currentTemperature;
 800bce0:	683b      	ldr	r3, [r7, #0]
 800bce2:	693a      	ldr	r2, [r7, #16]
 800bce4:	601a      	str	r2, [r3, #0]
   *humidity = currentHumidity;
 800bce6:	687b      	ldr	r3, [r7, #4]
 800bce8:	68fa      	ldr	r2, [r7, #12]
 800bcea:	601a      	str	r2, [r3, #0]

   SGP_GetHT(temperature, humidity);
 800bcec:	687a      	ldr	r2, [r7, #4]
 800bcee:	683b      	ldr	r3, [r7, #0]
 800bcf0:	0011      	movs	r1, r2
 800bcf2:	0018      	movs	r0, r3
 800bcf4:	f7fd fcfa 	bl	80096ec <SGP_GetHT>
   ESP_GetHT(currentTemperature, currentHumidity);
 800bcf8:	68fa      	ldr	r2, [r7, #12]
 800bcfa:	693b      	ldr	r3, [r7, #16]
 800bcfc:	1c11      	adds	r1, r2, #0
 800bcfe:	1c18      	adds	r0, r3, #0
 800bd00:	f7f7 fdd6 	bl	80038b0 <ESP_GetHT>

   measurements = 0;
 800bd04:	4b0a      	ldr	r3, [pc, #40]	@ (800bd30 <HIDS_GetMeasurementValues+0x144>)
 800bd06:	2200      	movs	r2, #0
 800bd08:	601a      	str	r2, [r3, #0]
   MeasurementDone = true;
 800bd0a:	4b04      	ldr	r3, [pc, #16]	@ (800bd1c <HIDS_GetMeasurementValues+0x130>)
 800bd0c:	2201      	movs	r2, #1
 800bd0e:	701a      	strb	r2, [r3, #0]
   //HIDS_StartMeasurement();
    //Debug("HIDS measurement is done.");
   return true;
 800bd10:	2301      	movs	r3, #1
	// Starting another measurement, still not done with all measurements.

	//return false;
}
 800bd12:	0018      	movs	r0, r3
 800bd14:	46bd      	mov	sp, r7
 800bd16:	b007      	add	sp, #28
 800bd18:	bd90      	pop	{r4, r7, pc}
 800bd1a:	46c0      	nop			@ (mov r8, r8)
 800bd1c:	200024b6 	.word	0x200024b6
 800bd20:	200024b0 	.word	0x200024b0
 800bd24:	40efffe0 	.word	0x40efffe0
 800bd28:	42340000 	.word	0x42340000
 800bd2c:	40c00000 	.word	0x40c00000
 800bd30:	200024b8 	.word	0x200024b8

0800bd34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
   ldr   r0, =_estack
 800bd34:	480d      	ldr	r0, [pc, #52]	@ (800bd6c <LoopForever+0x2>)
   mov   sp, r0          /* set stack pointer */
 800bd36:	4685      	mov	sp, r0
   
/* Call the clock system initialization function.*/
  bl  SystemInit
 800bd38:	f7ff f8f0 	bl	800af1c <SystemInit>

/* Copy the data segment initializers from flash to SRAM */
  ldr r0, =_sdata
 800bd3c:	480c      	ldr	r0, [pc, #48]	@ (800bd70 <LoopForever+0x6>)
  ldr r1, =_edata
 800bd3e:	490d      	ldr	r1, [pc, #52]	@ (800bd74 <LoopForever+0xa>)
  ldr r2, =_sidata
 800bd40:	4a0d      	ldr	r2, [pc, #52]	@ (800bd78 <LoopForever+0xe>)
  movs r3, #0
 800bd42:	2300      	movs	r3, #0
  b LoopCopyDataInit
 800bd44:	e002      	b.n	800bd4c <LoopCopyDataInit>

0800bd46 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800bd46:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800bd48:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800bd4a:	3304      	adds	r3, #4

0800bd4c <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 800bd4c:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800bd4e:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800bd50:	d3f9      	bcc.n	800bd46 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800bd52:	4a0a      	ldr	r2, [pc, #40]	@ (800bd7c <LoopForever+0x12>)
  ldr r4, =_ebss
 800bd54:	4c0a      	ldr	r4, [pc, #40]	@ (800bd80 <LoopForever+0x16>)
  movs r3, #0
 800bd56:	2300      	movs	r3, #0
  b LoopFillZerobss
 800bd58:	e001      	b.n	800bd5e <LoopFillZerobss>

0800bd5a <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800bd5a:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 800bd5c:	3204      	adds	r2, #4

0800bd5e <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800bd5e:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800bd60:	d3fb      	bcc.n	800bd5a <FillZerobss>

/* Call static constructors */
    bl __libc_init_array
 800bd62:	f010 fc53 	bl	801c60c <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800bd66:	f7fb f98f 	bl	8007088 <main>

0800bd6a <LoopForever>:

LoopForever:
    b LoopForever
 800bd6a:	e7fe      	b.n	800bd6a <LoopForever>
   ldr   r0, =_estack
 800bd6c:	20005000 	.word	0x20005000
  ldr r0, =_sdata
 800bd70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800bd74:	20000420 	.word	0x20000420
  ldr r2, =_sidata
 800bd78:	080213a0 	.word	0x080213a0
  ldr r2, =_sbss
 800bd7c:	20000420 	.word	0x20000420
  ldr r4, =_ebss
 800bd80:	200038c0 	.word	0x200038c0

0800bd84 <ADC1_COMP_IRQHandler>:
 * @retval : None
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800bd84:	e7fe      	b.n	800bd84 <ADC1_COMP_IRQHandler>
	...

0800bd88 <HAL_Init>:
  *        In the default implementation,Systick is used as source of time base.
  *        the tick variable is incremented each 1ms in its ISR.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 800bd88:	b580      	push	{r7, lr}
 800bd8a:	b082      	sub	sp, #8
 800bd8c:	af00      	add	r7, sp, #0
  HAL_StatusTypeDef  status = HAL_OK;
 800bd8e:	1dfb      	adds	r3, r7, #7
 800bd90:	2200      	movs	r2, #0
 800bd92:	701a      	strb	r2, [r3, #0]
#if (BUFFER_CACHE_DISABLE != 0)
  __HAL_FLASH_BUFFER_CACHE_DISABLE();
#endif /* BUFFER_CACHE_DISABLE */

#if (PREREAD_ENABLE != 0)
  __HAL_FLASH_PREREAD_BUFFER_ENABLE();
 800bd94:	4b0b      	ldr	r3, [pc, #44]	@ (800bdc4 <HAL_Init+0x3c>)
 800bd96:	681a      	ldr	r2, [r3, #0]
 800bd98:	4b0a      	ldr	r3, [pc, #40]	@ (800bdc4 <HAL_Init+0x3c>)
 800bd9a:	2140      	movs	r1, #64	@ 0x40
 800bd9c:	430a      	orrs	r2, r1
 800bd9e:	601a      	str	r2, [r3, #0]
#if (PREFETCH_ENABLE != 0)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
#endif /* PREFETCH_ENABLE */

  /* Use SysTick as time base source and configure 1ms tick (default clock after Reset is MSI) */
  if (HAL_InitTick(TICK_INT_PRIORITY) != HAL_OK)
 800bda0:	2003      	movs	r0, #3
 800bda2:	f000 f811 	bl	800bdc8 <HAL_InitTick>
 800bda6:	1e03      	subs	r3, r0, #0
 800bda8:	d003      	beq.n	800bdb2 <HAL_Init+0x2a>
  {
    status = HAL_ERROR;
 800bdaa:	1dfb      	adds	r3, r7, #7
 800bdac:	2201      	movs	r2, #1
 800bdae:	701a      	strb	r2, [r3, #0]
 800bdb0:	e001      	b.n	800bdb6 <HAL_Init+0x2e>
  }
  else
  {
    /* Init the low level hardware */
    HAL_MspInit();
 800bdb2:	f7fe ff7d 	bl	800acb0 <HAL_MspInit>
  }

  /* Return function status */
  return status;
 800bdb6:	1dfb      	adds	r3, r7, #7
 800bdb8:	781b      	ldrb	r3, [r3, #0]
}
 800bdba:	0018      	movs	r0, r3
 800bdbc:	46bd      	mov	sp, r7
 800bdbe:	b002      	add	sp, #8
 800bdc0:	bd80      	pop	{r7, pc}
 800bdc2:	46c0      	nop			@ (mov r8, r8)
 800bdc4:	40022000 	.word	0x40022000

0800bdc8 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 800bdc8:	b590      	push	{r4, r7, lr}
 800bdca:	b083      	sub	sp, #12
 800bdcc:	af00      	add	r7, sp, #0
 800bdce:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 800bdd0:	4b14      	ldr	r3, [pc, #80]	@ (800be24 <HAL_InitTick+0x5c>)
 800bdd2:	681c      	ldr	r4, [r3, #0]
 800bdd4:	4b14      	ldr	r3, [pc, #80]	@ (800be28 <HAL_InitTick+0x60>)
 800bdd6:	781b      	ldrb	r3, [r3, #0]
 800bdd8:	0019      	movs	r1, r3
 800bdda:	23fa      	movs	r3, #250	@ 0xfa
 800bddc:	0098      	lsls	r0, r3, #2
 800bdde:	f7f4 f9e1 	bl	80001a4 <__udivsi3>
 800bde2:	0003      	movs	r3, r0
 800bde4:	0019      	movs	r1, r3
 800bde6:	0020      	movs	r0, r4
 800bde8:	f7f4 f9dc 	bl	80001a4 <__udivsi3>
 800bdec:	0003      	movs	r3, r0
 800bdee:	0018      	movs	r0, r3
 800bdf0:	f000 fccb 	bl	800c78a <HAL_SYSTICK_Config>
 800bdf4:	1e03      	subs	r3, r0, #0
 800bdf6:	d001      	beq.n	800bdfc <HAL_InitTick+0x34>
  {
    return HAL_ERROR;
 800bdf8:	2301      	movs	r3, #1
 800bdfa:	e00f      	b.n	800be1c <HAL_InitTick+0x54>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 800bdfc:	687b      	ldr	r3, [r7, #4]
 800bdfe:	2b03      	cmp	r3, #3
 800be00:	d80b      	bhi.n	800be1a <HAL_InitTick+0x52>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 800be02:	6879      	ldr	r1, [r7, #4]
 800be04:	2301      	movs	r3, #1
 800be06:	425b      	negs	r3, r3
 800be08:	2200      	movs	r2, #0
 800be0a:	0018      	movs	r0, r3
 800be0c:	f000 fc98 	bl	800c740 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 800be10:	4b06      	ldr	r3, [pc, #24]	@ (800be2c <HAL_InitTick+0x64>)
 800be12:	687a      	ldr	r2, [r7, #4]
 800be14:	601a      	str	r2, [r3, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 800be16:	2300      	movs	r3, #0
 800be18:	e000      	b.n	800be1c <HAL_InitTick+0x54>
    return HAL_ERROR;
 800be1a:	2301      	movs	r3, #1
}
 800be1c:	0018      	movs	r0, r3
 800be1e:	46bd      	mov	sp, r7
 800be20:	b003      	add	sp, #12
 800be22:	bd90      	pop	{r4, r7, pc}
 800be24:	200000c8 	.word	0x200000c8
 800be28:	200000dc 	.word	0x200000dc
 800be2c:	200000d8 	.word	0x200000d8

0800be30 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800be30:	b580      	push	{r7, lr}
 800be32:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 800be34:	4b05      	ldr	r3, [pc, #20]	@ (800be4c <HAL_IncTick+0x1c>)
 800be36:	781b      	ldrb	r3, [r3, #0]
 800be38:	001a      	movs	r2, r3
 800be3a:	4b05      	ldr	r3, [pc, #20]	@ (800be50 <HAL_IncTick+0x20>)
 800be3c:	681b      	ldr	r3, [r3, #0]
 800be3e:	18d2      	adds	r2, r2, r3
 800be40:	4b03      	ldr	r3, [pc, #12]	@ (800be50 <HAL_IncTick+0x20>)
 800be42:	601a      	str	r2, [r3, #0]
}
 800be44:	46c0      	nop			@ (mov r8, r8)
 800be46:	46bd      	mov	sp, r7
 800be48:	bd80      	pop	{r7, pc}
 800be4a:	46c0      	nop			@ (mov r8, r8)
 800be4c:	200000dc 	.word	0x200000dc
 800be50:	200024bc 	.word	0x200024bc

0800be54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 800be54:	b580      	push	{r7, lr}
 800be56:	af00      	add	r7, sp, #0
  return uwTick;
 800be58:	4b02      	ldr	r3, [pc, #8]	@ (800be64 <HAL_GetTick+0x10>)
 800be5a:	681b      	ldr	r3, [r3, #0]
}
 800be5c:	0018      	movs	r0, r3
 800be5e:	46bd      	mov	sp, r7
 800be60:	bd80      	pop	{r7, pc}
 800be62:	46c0      	nop			@ (mov r8, r8)
 800be64:	200024bc 	.word	0x200024bc

0800be68 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 800be68:	b580      	push	{r7, lr}
 800be6a:	b084      	sub	sp, #16
 800be6c:	af00      	add	r7, sp, #0
 800be6e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 800be70:	f7ff fff0 	bl	800be54 <HAL_GetTick>
 800be74:	0003      	movs	r3, r0
 800be76:	60bb      	str	r3, [r7, #8]
  uint32_t wait = Delay;
 800be78:	687b      	ldr	r3, [r7, #4]
 800be7a:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 800be7c:	68fb      	ldr	r3, [r7, #12]
 800be7e:	3301      	adds	r3, #1
 800be80:	d005      	beq.n	800be8e <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 800be82:	4b0a      	ldr	r3, [pc, #40]	@ (800beac <HAL_Delay+0x44>)
 800be84:	781b      	ldrb	r3, [r3, #0]
 800be86:	001a      	movs	r2, r3
 800be88:	68fb      	ldr	r3, [r7, #12]
 800be8a:	189b      	adds	r3, r3, r2
 800be8c:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 800be8e:	46c0      	nop			@ (mov r8, r8)
 800be90:	f7ff ffe0 	bl	800be54 <HAL_GetTick>
 800be94:	0002      	movs	r2, r0
 800be96:	68bb      	ldr	r3, [r7, #8]
 800be98:	1ad3      	subs	r3, r2, r3
 800be9a:	68fa      	ldr	r2, [r7, #12]
 800be9c:	429a      	cmp	r2, r3
 800be9e:	d8f7      	bhi.n	800be90 <HAL_Delay+0x28>
  {
  }
}
 800bea0:	46c0      	nop			@ (mov r8, r8)
 800bea2:	46c0      	nop			@ (mov r8, r8)
 800bea4:	46bd      	mov	sp, r7
 800bea6:	b004      	add	sp, #16
 800bea8:	bd80      	pop	{r7, pc}
 800beaa:	46c0      	nop			@ (mov r8, r8)
 800beac:	200000dc 	.word	0x200000dc

0800beb0 <HAL_GetUIDw0>:
/**
  * @brief  Returns the first word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw0(void)
{
 800beb0:	b580      	push	{r7, lr}
 800beb2:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)UID_BASE)));
 800beb4:	4b02      	ldr	r3, [pc, #8]	@ (800bec0 <HAL_GetUIDw0+0x10>)
 800beb6:	681b      	ldr	r3, [r3, #0]
}
 800beb8:	0018      	movs	r0, r3
 800beba:	46bd      	mov	sp, r7
 800bebc:	bd80      	pop	{r7, pc}
 800bebe:	46c0      	nop			@ (mov r8, r8)
 800bec0:	1ff80050 	.word	0x1ff80050

0800bec4 <HAL_GetUIDw1>:
/**
  * @brief  Returns the second word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw1(void)
{
 800bec4:	b580      	push	{r7, lr}
 800bec6:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x04U))));
 800bec8:	4b02      	ldr	r3, [pc, #8]	@ (800bed4 <HAL_GetUIDw1+0x10>)
 800beca:	681b      	ldr	r3, [r3, #0]
}
 800becc:	0018      	movs	r0, r3
 800bece:	46bd      	mov	sp, r7
 800bed0:	bd80      	pop	{r7, pc}
 800bed2:	46c0      	nop			@ (mov r8, r8)
 800bed4:	1ff80054 	.word	0x1ff80054

0800bed8 <HAL_GetUIDw2>:
/**
  * @brief  Returns the third word of the unique device identifier (UID based on 96 bits)
  * @retval Device identifier
  */
uint32_t HAL_GetUIDw2(void)
{
 800bed8:	b580      	push	{r7, lr}
 800beda:	af00      	add	r7, sp, #0
  return(READ_REG(*((uint32_t *)(UID_BASE + 0x14U))));
 800bedc:	4b02      	ldr	r3, [pc, #8]	@ (800bee8 <HAL_GetUIDw2+0x10>)
 800bede:	681b      	ldr	r3, [r3, #0]
}
 800bee0:	0018      	movs	r0, r3
 800bee2:	46bd      	mov	sp, r7
 800bee4:	bd80      	pop	{r7, pc}
 800bee6:	46c0      	nop			@ (mov r8, r8)
 800bee8:	1ff80064 	.word	0x1ff80064

0800beec <HAL_ADC_Init>:
  *         function "HAL_ADCEx_EnableVREFINTTempSensor()" must be called similarilly.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Init(ADC_HandleTypeDef *hadc)
{
 800beec:	b580      	push	{r7, lr}
 800beee:	b082      	sub	sp, #8
 800bef0:	af00      	add	r7, sp, #0
 800bef2:	6078      	str	r0, [r7, #4]

  /* Check ADC handle */
  if (hadc == NULL)
 800bef4:	687b      	ldr	r3, [r7, #4]
 800bef6:	2b00      	cmp	r3, #0
 800bef8:	d101      	bne.n	800befe <HAL_ADC_Init+0x12>
  {
    return HAL_ERROR;
 800befa:	2301      	movs	r3, #1
 800befc:	e159      	b.n	800c1b2 <HAL_ADC_Init+0x2c6>
  /* Refer to header of this file for more details on clock enabling procedure*/

  /* Actions performed only if ADC is coming from state reset:                */
  /* - Initialization of ADC MSP                                              */
  /* - ADC voltage regulator enable                                           */
  if (hadc->State == HAL_ADC_STATE_RESET)
 800befe:	687b      	ldr	r3, [r7, #4]
 800bf00:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bf02:	2b00      	cmp	r3, #0
 800bf04:	d10a      	bne.n	800bf1c <HAL_ADC_Init+0x30>
  {
    /* Initialize ADC error code */
    ADC_CLEAR_ERRORCODE(hadc);
 800bf06:	687b      	ldr	r3, [r7, #4]
 800bf08:	2200      	movs	r2, #0
 800bf0a:	659a      	str	r2, [r3, #88]	@ 0x58

    /* Allocate lock resource and initialize it */
    hadc->Lock = HAL_UNLOCKED;
 800bf0c:	687b      	ldr	r3, [r7, #4]
 800bf0e:	2250      	movs	r2, #80	@ 0x50
 800bf10:	2100      	movs	r1, #0
 800bf12:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware */
    hadc->MspInitCallback(hadc);
#else
    /* Init the low level hardware */
    HAL_ADC_MspInit(hadc);
 800bf14:	687b      	ldr	r3, [r7, #4]
 800bf16:	0018      	movs	r0, r3
 800bf18:	f7fa faf8 	bl	800650c <HAL_ADC_MspInit>
  /* Configuration of ADC parameters if previous preliminary actions are      */
  /* correctly completed.                                                     */
  /* and if there is no conversion on going on regular group (ADC can be      */
  /* enabled anyway, in case of call of this function to update a parameter   */
  /* on the fly).                                                             */
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800bf1c:	687b      	ldr	r3, [r7, #4]
 800bf1e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bf20:	2210      	movs	r2, #16
 800bf22:	4013      	ands	r3, r2
 800bf24:	2b10      	cmp	r3, #16
 800bf26:	d005      	beq.n	800bf34 <HAL_ADC_Init+0x48>
      (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET))
 800bf28:	687b      	ldr	r3, [r7, #4]
 800bf2a:	681b      	ldr	r3, [r3, #0]
 800bf2c:	689b      	ldr	r3, [r3, #8]
 800bf2e:	2204      	movs	r2, #4
 800bf30:	4013      	ands	r3, r2
  if (HAL_IS_BIT_SET(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL) ||
 800bf32:	d00b      	beq.n	800bf4c <HAL_ADC_Init+0x60>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800bf34:	687b      	ldr	r3, [r7, #4]
 800bf36:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bf38:	2210      	movs	r2, #16
 800bf3a:	431a      	orrs	r2, r3
 800bf3c:	687b      	ldr	r3, [r7, #4]
 800bf3e:	655a      	str	r2, [r3, #84]	@ 0x54

    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800bf40:	687b      	ldr	r3, [r7, #4]
 800bf42:	2250      	movs	r2, #80	@ 0x50
 800bf44:	2100      	movs	r1, #0
 800bf46:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800bf48:	2301      	movs	r3, #1
 800bf4a:	e132      	b.n	800c1b2 <HAL_ADC_Init+0x2c6>
  }

  /* Set ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800bf4c:	687b      	ldr	r3, [r7, #4]
 800bf4e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800bf50:	4a9a      	ldr	r2, [pc, #616]	@ (800c1bc <HAL_ADC_Init+0x2d0>)
 800bf52:	4013      	ands	r3, r2
 800bf54:	2202      	movs	r2, #2
 800bf56:	431a      	orrs	r2, r3
 800bf58:	687b      	ldr	r3, [r7, #4]
 800bf5a:	655a      	str	r2, [r3, #84]	@ 0x54
  /* Parameters update conditioned to ADC state:                            */
  /* Parameters that can be updated only when ADC is disabled:              */
  /*  - ADC clock mode                                                      */
  /*  - ADC clock prescaler                                                 */
  /*  - ADC Resolution                                                      */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800bf5c:	687b      	ldr	r3, [r7, #4]
 800bf5e:	681b      	ldr	r3, [r3, #0]
 800bf60:	689b      	ldr	r3, [r3, #8]
 800bf62:	2203      	movs	r2, #3
 800bf64:	4013      	ands	r3, r2
 800bf66:	2b01      	cmp	r3, #1
 800bf68:	d108      	bne.n	800bf7c <HAL_ADC_Init+0x90>
 800bf6a:	687b      	ldr	r3, [r7, #4]
 800bf6c:	681b      	ldr	r3, [r3, #0]
 800bf6e:	681b      	ldr	r3, [r3, #0]
 800bf70:	2201      	movs	r2, #1
 800bf72:	4013      	ands	r3, r2
 800bf74:	2b01      	cmp	r3, #1
 800bf76:	d101      	bne.n	800bf7c <HAL_ADC_Init+0x90>
 800bf78:	2301      	movs	r3, #1
 800bf7a:	e000      	b.n	800bf7e <HAL_ADC_Init+0x92>
 800bf7c:	2300      	movs	r3, #0
 800bf7e:	2b00      	cmp	r3, #0
 800bf80:	d149      	bne.n	800c016 <HAL_ADC_Init+0x12a>
    /*   - internal measurement paths: Vbat, temperature sensor, Vref       */
    /*     (set into HAL_ADC_ConfigChannel() )                              */

    /* Configuration of ADC clock: clock source PCLK or asynchronous with
    selectable prescaler */
    __HAL_ADC_CLOCK_PRESCALER(hadc);
 800bf82:	687b      	ldr	r3, [r7, #4]
 800bf84:	685a      	ldr	r2, [r3, #4]
 800bf86:	23c0      	movs	r3, #192	@ 0xc0
 800bf88:	061b      	lsls	r3, r3, #24
 800bf8a:	429a      	cmp	r2, r3
 800bf8c:	d00b      	beq.n	800bfa6 <HAL_ADC_Init+0xba>
 800bf8e:	687b      	ldr	r3, [r7, #4]
 800bf90:	685a      	ldr	r2, [r3, #4]
 800bf92:	2380      	movs	r3, #128	@ 0x80
 800bf94:	05db      	lsls	r3, r3, #23
 800bf96:	429a      	cmp	r2, r3
 800bf98:	d005      	beq.n	800bfa6 <HAL_ADC_Init+0xba>
 800bf9a:	687b      	ldr	r3, [r7, #4]
 800bf9c:	685a      	ldr	r2, [r3, #4]
 800bf9e:	2380      	movs	r3, #128	@ 0x80
 800bfa0:	061b      	lsls	r3, r3, #24
 800bfa2:	429a      	cmp	r2, r3
 800bfa4:	d111      	bne.n	800bfca <HAL_ADC_Init+0xde>
 800bfa6:	687b      	ldr	r3, [r7, #4]
 800bfa8:	681b      	ldr	r3, [r3, #0]
 800bfaa:	691a      	ldr	r2, [r3, #16]
 800bfac:	687b      	ldr	r3, [r7, #4]
 800bfae:	681b      	ldr	r3, [r3, #0]
 800bfb0:	0092      	lsls	r2, r2, #2
 800bfb2:	0892      	lsrs	r2, r2, #2
 800bfb4:	611a      	str	r2, [r3, #16]
 800bfb6:	687b      	ldr	r3, [r7, #4]
 800bfb8:	681b      	ldr	r3, [r3, #0]
 800bfba:	6919      	ldr	r1, [r3, #16]
 800bfbc:	687b      	ldr	r3, [r7, #4]
 800bfbe:	685a      	ldr	r2, [r3, #4]
 800bfc0:	687b      	ldr	r3, [r7, #4]
 800bfc2:	681b      	ldr	r3, [r3, #0]
 800bfc4:	430a      	orrs	r2, r1
 800bfc6:	611a      	str	r2, [r3, #16]
 800bfc8:	e014      	b.n	800bff4 <HAL_ADC_Init+0x108>
 800bfca:	687b      	ldr	r3, [r7, #4]
 800bfcc:	681b      	ldr	r3, [r3, #0]
 800bfce:	691a      	ldr	r2, [r3, #16]
 800bfd0:	687b      	ldr	r3, [r7, #4]
 800bfd2:	681b      	ldr	r3, [r3, #0]
 800bfd4:	0092      	lsls	r2, r2, #2
 800bfd6:	0892      	lsrs	r2, r2, #2
 800bfd8:	611a      	str	r2, [r3, #16]
 800bfda:	4b79      	ldr	r3, [pc, #484]	@ (800c1c0 <HAL_ADC_Init+0x2d4>)
 800bfdc:	681a      	ldr	r2, [r3, #0]
 800bfde:	4b78      	ldr	r3, [pc, #480]	@ (800c1c0 <HAL_ADC_Init+0x2d4>)
 800bfe0:	4978      	ldr	r1, [pc, #480]	@ (800c1c4 <HAL_ADC_Init+0x2d8>)
 800bfe2:	400a      	ands	r2, r1
 800bfe4:	601a      	str	r2, [r3, #0]
 800bfe6:	4b76      	ldr	r3, [pc, #472]	@ (800c1c0 <HAL_ADC_Init+0x2d4>)
 800bfe8:	6819      	ldr	r1, [r3, #0]
 800bfea:	687b      	ldr	r3, [r7, #4]
 800bfec:	685a      	ldr	r2, [r3, #4]
 800bfee:	4b74      	ldr	r3, [pc, #464]	@ (800c1c0 <HAL_ADC_Init+0x2d4>)
 800bff0:	430a      	orrs	r2, r1
 800bff2:	601a      	str	r2, [r3, #0]

    /* Configuration of ADC:                                                */
    /*  - Resolution                                                        */
    hadc->Instance->CFGR1 &= ~(ADC_CFGR1_RES);
 800bff4:	687b      	ldr	r3, [r7, #4]
 800bff6:	681b      	ldr	r3, [r3, #0]
 800bff8:	68da      	ldr	r2, [r3, #12]
 800bffa:	687b      	ldr	r3, [r7, #4]
 800bffc:	681b      	ldr	r3, [r3, #0]
 800bffe:	2118      	movs	r1, #24
 800c000:	438a      	bics	r2, r1
 800c002:	60da      	str	r2, [r3, #12]
    hadc->Instance->CFGR1 |= hadc->Init.Resolution;
 800c004:	687b      	ldr	r3, [r7, #4]
 800c006:	681b      	ldr	r3, [r3, #0]
 800c008:	68d9      	ldr	r1, [r3, #12]
 800c00a:	687b      	ldr	r3, [r7, #4]
 800c00c:	689a      	ldr	r2, [r3, #8]
 800c00e:	687b      	ldr	r3, [r7, #4]
 800c010:	681b      	ldr	r3, [r3, #0]
 800c012:	430a      	orrs	r2, r1
 800c014:	60da      	str	r2, [r3, #12]
  }

  /* Set the Low Frequency mode */
  ADC->CCR &= (uint32_t)~ADC_CCR_LFMEN;
 800c016:	4b6a      	ldr	r3, [pc, #424]	@ (800c1c0 <HAL_ADC_Init+0x2d4>)
 800c018:	681a      	ldr	r2, [r3, #0]
 800c01a:	4b69      	ldr	r3, [pc, #420]	@ (800c1c0 <HAL_ADC_Init+0x2d4>)
 800c01c:	496a      	ldr	r1, [pc, #424]	@ (800c1c8 <HAL_ADC_Init+0x2dc>)
 800c01e:	400a      	ands	r2, r1
 800c020:	601a      	str	r2, [r3, #0]
  ADC->CCR |= __HAL_ADC_CCR_LOWFREQUENCY(hadc->Init.LowPowerFrequencyMode);
 800c022:	4b67      	ldr	r3, [pc, #412]	@ (800c1c0 <HAL_ADC_Init+0x2d4>)
 800c024:	6819      	ldr	r1, [r3, #0]
 800c026:	687b      	ldr	r3, [r7, #4]
 800c028:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800c02a:	065a      	lsls	r2, r3, #25
 800c02c:	4b64      	ldr	r3, [pc, #400]	@ (800c1c0 <HAL_ADC_Init+0x2d4>)
 800c02e:	430a      	orrs	r2, r1
 800c030:	601a      	str	r2, [r3, #0]

  /* Enable voltage regulator (if disabled at this step) */
  if (HAL_IS_BIT_CLR(hadc->Instance->CR, ADC_CR_ADVREGEN))
 800c032:	687b      	ldr	r3, [r7, #4]
 800c034:	681b      	ldr	r3, [r3, #0]
 800c036:	689a      	ldr	r2, [r3, #8]
 800c038:	2380      	movs	r3, #128	@ 0x80
 800c03a:	055b      	lsls	r3, r3, #21
 800c03c:	4013      	ands	r3, r2
 800c03e:	d108      	bne.n	800c052 <HAL_ADC_Init+0x166>
  {
    /* Set ADVREGEN bit */
    hadc->Instance->CR |= ADC_CR_ADVREGEN;
 800c040:	687b      	ldr	r3, [r7, #4]
 800c042:	681b      	ldr	r3, [r3, #0]
 800c044:	689a      	ldr	r2, [r3, #8]
 800c046:	687b      	ldr	r3, [r7, #4]
 800c048:	681b      	ldr	r3, [r3, #0]
 800c04a:	2180      	movs	r1, #128	@ 0x80
 800c04c:	0549      	lsls	r1, r1, #21
 800c04e:	430a      	orrs	r2, r1
 800c050:	609a      	str	r2, [r3, #8]
  /*  - Continuous conversion mode                                            */
  /*  - DMA continuous request                                                */
  /*  - Overrun                                                               */
  /*  - AutoDelay feature                                                     */
  /*  - Discontinuous mode                                                    */
  hadc->Instance->CFGR1 &= ~(ADC_CFGR1_ALIGN   |
 800c052:	687b      	ldr	r3, [r7, #4]
 800c054:	681b      	ldr	r3, [r3, #0]
 800c056:	68da      	ldr	r2, [r3, #12]
 800c058:	687b      	ldr	r3, [r7, #4]
 800c05a:	681b      	ldr	r3, [r3, #0]
 800c05c:	495b      	ldr	r1, [pc, #364]	@ (800c1cc <HAL_ADC_Init+0x2e0>)
 800c05e:	400a      	ands	r2, r1
 800c060:	60da      	str	r2, [r3, #12]
                             ADC_CFGR1_OVRMOD  |
                             ADC_CFGR1_AUTDLY  |
                             ADC_CFGR1_AUTOFF  |
                             ADC_CFGR1_DISCEN);

  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800c062:	687b      	ldr	r3, [r7, #4]
 800c064:	681b      	ldr	r3, [r3, #0]
 800c066:	68d9      	ldr	r1, [r3, #12]
 800c068:	687b      	ldr	r3, [r7, #4]
 800c06a:	68da      	ldr	r2, [r3, #12]
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800c06c:	687b      	ldr	r3, [r7, #4]
 800c06e:	691b      	ldr	r3, [r3, #16]
 800c070:	2b02      	cmp	r3, #2
 800c072:	d101      	bne.n	800c078 <HAL_ADC_Init+0x18c>
 800c074:	2304      	movs	r3, #4
 800c076:	e000      	b.n	800c07a <HAL_ADC_Init+0x18e>
 800c078:	2300      	movs	r3, #0
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800c07a:	431a      	orrs	r2, r3
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800c07c:	687b      	ldr	r3, [r7, #4]
 800c07e:	2020      	movs	r0, #32
 800c080:	5c1b      	ldrb	r3, [r3, r0]
 800c082:	035b      	lsls	r3, r3, #13
                            ADC_SCANDIR(hadc->Init.ScanConvMode)             |
 800c084:	431a      	orrs	r2, r3
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800c086:	687b      	ldr	r3, [r7, #4]
 800c088:	202c      	movs	r0, #44	@ 0x2c
 800c08a:	5c1b      	ldrb	r3, [r3, r0]
 800c08c:	005b      	lsls	r3, r3, #1
                            ADC_CONTINUOUS((uint32_t)hadc->Init.ContinuousConvMode)    |
 800c08e:	431a      	orrs	r2, r3
                            hadc->Init.Overrun                               |
 800c090:	687b      	ldr	r3, [r7, #4]
 800c092:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
                            ADC_DMACONTREQ((uint32_t)hadc->Init.DMAContinuousRequests) |
 800c094:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800c096:	687b      	ldr	r3, [r7, #4]
 800c098:	699b      	ldr	r3, [r3, #24]
 800c09a:	039b      	lsls	r3, r3, #14
                            hadc->Init.Overrun                               |
 800c09c:	431a      	orrs	r2, r3
                            __HAL_ADC_CFGR1_AUTOFF(hadc->Init.LowPowerAutoPowerOff));
 800c09e:	687b      	ldr	r3, [r7, #4]
 800c0a0:	69db      	ldr	r3, [r3, #28]
 800c0a2:	03db      	lsls	r3, r3, #15
                            __HAL_ADC_CFGR1_AutoDelay(hadc->Init.LowPowerAutoWait) |
 800c0a4:	431a      	orrs	r2, r3
  hadc->Instance->CFGR1 |= (hadc->Init.DataAlign                             |
 800c0a6:	687b      	ldr	r3, [r7, #4]
 800c0a8:	681b      	ldr	r3, [r3, #0]
 800c0aa:	430a      	orrs	r2, r1
 800c0ac:	60da      	str	r2, [r3, #12]
  /* Enable external trigger if trigger selection is different of software  */
  /* start.                                                                 */
  /* Note: This configuration keeps the hardware feature of parameter       */
  /*       ExternalTrigConvEdge "trigger edge none" equivalent to           */
  /*       software start.                                                  */
  if (hadc->Init.ExternalTrigConv != ADC_SOFTWARE_START)
 800c0ae:	687b      	ldr	r3, [r7, #4]
 800c0b0:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800c0b2:	23c2      	movs	r3, #194	@ 0xc2
 800c0b4:	33ff      	adds	r3, #255	@ 0xff
 800c0b6:	429a      	cmp	r2, r3
 800c0b8:	d00b      	beq.n	800c0d2 <HAL_ADC_Init+0x1e6>
  {
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800c0ba:	687b      	ldr	r3, [r7, #4]
 800c0bc:	681b      	ldr	r3, [r3, #0]
 800c0be:	68d9      	ldr	r1, [r3, #12]
 800c0c0:	687b      	ldr	r3, [r7, #4]
 800c0c2:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
                             hadc->Init.ExternalTrigConvEdge;
 800c0c4:	687b      	ldr	r3, [r7, #4]
 800c0c6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
    hadc->Instance->CFGR1 |= hadc->Init.ExternalTrigConv |
 800c0c8:	431a      	orrs	r2, r3
 800c0ca:	687b      	ldr	r3, [r7, #4]
 800c0cc:	681b      	ldr	r3, [r3, #0]
 800c0ce:	430a      	orrs	r2, r1
 800c0d0:	60da      	str	r2, [r3, #12]
  }

  /* Enable discontinuous mode only if continuous mode is disabled */
  if (hadc->Init.DiscontinuousConvMode == ENABLE)
 800c0d2:	687b      	ldr	r3, [r7, #4]
 800c0d4:	2221      	movs	r2, #33	@ 0x21
 800c0d6:	5c9b      	ldrb	r3, [r3, r2]
 800c0d8:	2b01      	cmp	r3, #1
 800c0da:	d11a      	bne.n	800c112 <HAL_ADC_Init+0x226>
  {
    if (hadc->Init.ContinuousConvMode == DISABLE)
 800c0dc:	687b      	ldr	r3, [r7, #4]
 800c0de:	2220      	movs	r2, #32
 800c0e0:	5c9b      	ldrb	r3, [r3, r2]
 800c0e2:	2b00      	cmp	r3, #0
 800c0e4:	d109      	bne.n	800c0fa <HAL_ADC_Init+0x20e>
    {
      /* Enable the selected ADC group regular discontinuous mode */
      hadc->Instance->CFGR1 |= (ADC_CFGR1_DISCEN);
 800c0e6:	687b      	ldr	r3, [r7, #4]
 800c0e8:	681b      	ldr	r3, [r3, #0]
 800c0ea:	68da      	ldr	r2, [r3, #12]
 800c0ec:	687b      	ldr	r3, [r7, #4]
 800c0ee:	681b      	ldr	r3, [r3, #0]
 800c0f0:	2180      	movs	r1, #128	@ 0x80
 800c0f2:	0249      	lsls	r1, r1, #9
 800c0f4:	430a      	orrs	r2, r1
 800c0f6:	60da      	str	r2, [r3, #12]
 800c0f8:	e00b      	b.n	800c112 <HAL_ADC_Init+0x226>
      /* ADC regular group discontinuous was intended to be enabled,        */
      /* but ADC regular group modes continuous and sequencer discontinuous */
      /* cannot be enabled simultaneously.                                  */

      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c0fa:	687b      	ldr	r3, [r7, #4]
 800c0fc:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c0fe:	2220      	movs	r2, #32
 800c100:	431a      	orrs	r2, r3
 800c102:	687b      	ldr	r3, [r7, #4]
 800c104:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c106:	687b      	ldr	r3, [r7, #4]
 800c108:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c10a:	2201      	movs	r2, #1
 800c10c:	431a      	orrs	r2, r3
 800c10e:	687b      	ldr	r3, [r7, #4]
 800c110:	659a      	str	r2, [r3, #88]	@ 0x58
    }
  }

  if (hadc->Init.OversamplingMode == ENABLE)
 800c112:	687b      	ldr	r3, [r7, #4]
 800c114:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800c116:	2b01      	cmp	r3, #1
 800c118:	d11f      	bne.n	800c15a <HAL_ADC_Init+0x26e>
    /* Configuration of Oversampler:                                          */
    /*  - Oversampling Ratio                                                  */
    /*  - Right bit shift                                                     */
    /*  - Triggered mode                                                      */

    hadc->Instance->CFGR2 &= ~(ADC_CFGR2_OVSR |
 800c11a:	687b      	ldr	r3, [r7, #4]
 800c11c:	681b      	ldr	r3, [r3, #0]
 800c11e:	691a      	ldr	r2, [r3, #16]
 800c120:	687b      	ldr	r3, [r7, #4]
 800c122:	681b      	ldr	r3, [r3, #0]
 800c124:	492a      	ldr	r1, [pc, #168]	@ (800c1d0 <HAL_ADC_Init+0x2e4>)
 800c126:	400a      	ands	r2, r1
 800c128:	611a      	str	r2, [r3, #16]
                               ADC_CFGR2_OVSS |
                               ADC_CFGR2_TOVS);

    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800c12a:	687b      	ldr	r3, [r7, #4]
 800c12c:	681b      	ldr	r3, [r3, #0]
 800c12e:	6919      	ldr	r1, [r3, #16]
 800c130:	687b      	ldr	r3, [r7, #4]
 800c132:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
                              hadc->Init.Oversample.RightBitShift             |
 800c134:	687b      	ldr	r3, [r7, #4]
 800c136:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800c138:	431a      	orrs	r2, r3
                              hadc->Init.Oversample.TriggeredMode);
 800c13a:	687b      	ldr	r3, [r7, #4]
 800c13c:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
                              hadc->Init.Oversample.RightBitShift             |
 800c13e:	431a      	orrs	r2, r3
    hadc->Instance->CFGR2 |= (hadc->Init.Oversample.Ratio         |
 800c140:	687b      	ldr	r3, [r7, #4]
 800c142:	681b      	ldr	r3, [r3, #0]
 800c144:	430a      	orrs	r2, r1
 800c146:	611a      	str	r2, [r3, #16]

    /* Enable OverSampling mode */
    hadc->Instance->CFGR2 |= ADC_CFGR2_OVSE;
 800c148:	687b      	ldr	r3, [r7, #4]
 800c14a:	681b      	ldr	r3, [r3, #0]
 800c14c:	691a      	ldr	r2, [r3, #16]
 800c14e:	687b      	ldr	r3, [r7, #4]
 800c150:	681b      	ldr	r3, [r3, #0]
 800c152:	2101      	movs	r1, #1
 800c154:	430a      	orrs	r2, r1
 800c156:	611a      	str	r2, [r3, #16]
 800c158:	e00e      	b.n	800c178 <HAL_ADC_Init+0x28c>
  }
  else
  {
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR2, ADC_CFGR2_OVSE))
 800c15a:	687b      	ldr	r3, [r7, #4]
 800c15c:	681b      	ldr	r3, [r3, #0]
 800c15e:	691b      	ldr	r3, [r3, #16]
 800c160:	2201      	movs	r2, #1
 800c162:	4013      	ands	r3, r2
 800c164:	2b01      	cmp	r3, #1
 800c166:	d107      	bne.n	800c178 <HAL_ADC_Init+0x28c>
    {
      /* Disable OverSampling mode if needed */
      hadc->Instance->CFGR2 &= ~ADC_CFGR2_OVSE;
 800c168:	687b      	ldr	r3, [r7, #4]
 800c16a:	681b      	ldr	r3, [r3, #0]
 800c16c:	691a      	ldr	r2, [r3, #16]
 800c16e:	687b      	ldr	r3, [r7, #4]
 800c170:	681b      	ldr	r3, [r3, #0]
 800c172:	2101      	movs	r1, #1
 800c174:	438a      	bics	r2, r1
 800c176:	611a      	str	r2, [r3, #16]
    }
  }

  /* Clear the old sampling time */
  hadc->Instance->SMPR &= (uint32_t)(~ADC_SMPR_SMPR);
 800c178:	687b      	ldr	r3, [r7, #4]
 800c17a:	681b      	ldr	r3, [r3, #0]
 800c17c:	695a      	ldr	r2, [r3, #20]
 800c17e:	687b      	ldr	r3, [r7, #4]
 800c180:	681b      	ldr	r3, [r3, #0]
 800c182:	2107      	movs	r1, #7
 800c184:	438a      	bics	r2, r1
 800c186:	615a      	str	r2, [r3, #20]

  /* Set the new sample time */
  hadc->Instance->SMPR |= hadc->Init.SamplingTime;
 800c188:	687b      	ldr	r3, [r7, #4]
 800c18a:	681b      	ldr	r3, [r3, #0]
 800c18c:	6959      	ldr	r1, [r3, #20]
 800c18e:	687b      	ldr	r3, [r7, #4]
 800c190:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800c192:	687b      	ldr	r3, [r7, #4]
 800c194:	681b      	ldr	r3, [r3, #0]
 800c196:	430a      	orrs	r2, r1
 800c198:	615a      	str	r2, [r3, #20]

  /* Clear ADC error code */
  ADC_CLEAR_ERRORCODE(hadc);
 800c19a:	687b      	ldr	r3, [r7, #4]
 800c19c:	2200      	movs	r2, #0
 800c19e:	659a      	str	r2, [r3, #88]	@ 0x58

  /* Set the ADC state */
  ADC_STATE_CLR_SET(hadc->State,
 800c1a0:	687b      	ldr	r3, [r7, #4]
 800c1a2:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c1a4:	2203      	movs	r2, #3
 800c1a6:	4393      	bics	r3, r2
 800c1a8:	2201      	movs	r2, #1
 800c1aa:	431a      	orrs	r2, r3
 800c1ac:	687b      	ldr	r3, [r7, #4]
 800c1ae:	655a      	str	r2, [r3, #84]	@ 0x54
                    HAL_ADC_STATE_BUSY_INTERNAL,
                    HAL_ADC_STATE_READY);


  /* Return function status */
  return HAL_OK;
 800c1b0:	2300      	movs	r3, #0
}
 800c1b2:	0018      	movs	r0, r3
 800c1b4:	46bd      	mov	sp, r7
 800c1b6:	b002      	add	sp, #8
 800c1b8:	bd80      	pop	{r7, pc}
 800c1ba:	46c0      	nop			@ (mov r8, r8)
 800c1bc:	fffffefd 	.word	0xfffffefd
 800c1c0:	40012708 	.word	0x40012708
 800c1c4:	ffc3ffff 	.word	0xffc3ffff
 800c1c8:	fdffffff 	.word	0xfdffffff
 800c1cc:	fffe0219 	.word	0xfffe0219
 800c1d0:	fffffc03 	.word	0xfffffc03

0800c1d4 <HAL_ADC_Start>:
  * @note   Interruptions enabled in this function: None.
  * @param  hadc ADC handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_Start(ADC_HandleTypeDef *hadc)
{
 800c1d4:	b590      	push	{r4, r7, lr}
 800c1d6:	b085      	sub	sp, #20
 800c1d8:	af00      	add	r7, sp, #0
 800c1da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef tmp_hal_status = HAL_OK;
 800c1dc:	230f      	movs	r3, #15
 800c1de:	18fb      	adds	r3, r7, r3
 800c1e0:	2200      	movs	r2, #0
 800c1e2:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* Perform ADC enable and conversion start if no conversion is on going */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800c1e4:	687b      	ldr	r3, [r7, #4]
 800c1e6:	681b      	ldr	r3, [r3, #0]
 800c1e8:	689b      	ldr	r3, [r3, #8]
 800c1ea:	2204      	movs	r2, #4
 800c1ec:	4013      	ands	r3, r2
 800c1ee:	d138      	bne.n	800c262 <HAL_ADC_Start+0x8e>
  {
    /* Process locked */
    __HAL_LOCK(hadc);
 800c1f0:	687b      	ldr	r3, [r7, #4]
 800c1f2:	2250      	movs	r2, #80	@ 0x50
 800c1f4:	5c9b      	ldrb	r3, [r3, r2]
 800c1f6:	2b01      	cmp	r3, #1
 800c1f8:	d101      	bne.n	800c1fe <HAL_ADC_Start+0x2a>
 800c1fa:	2302      	movs	r3, #2
 800c1fc:	e038      	b.n	800c270 <HAL_ADC_Start+0x9c>
 800c1fe:	687b      	ldr	r3, [r7, #4]
 800c200:	2250      	movs	r2, #80	@ 0x50
 800c202:	2101      	movs	r1, #1
 800c204:	5499      	strb	r1, [r3, r2]

    /* Enable the ADC peripheral */
    /* If low power mode AutoPowerOff is enabled, power-on/off phases are     */
    /* performed automatically by hardware.                                   */
    if (hadc->Init.LowPowerAutoPowerOff != ENABLE)
 800c206:	687b      	ldr	r3, [r7, #4]
 800c208:	69db      	ldr	r3, [r3, #28]
 800c20a:	2b01      	cmp	r3, #1
 800c20c:	d007      	beq.n	800c21e <HAL_ADC_Start+0x4a>
    {
      tmp_hal_status = ADC_Enable(hadc);
 800c20e:	230f      	movs	r3, #15
 800c210:	18fc      	adds	r4, r7, r3
 800c212:	687b      	ldr	r3, [r7, #4]
 800c214:	0018      	movs	r0, r3
 800c216:	f000 f95f 	bl	800c4d8 <ADC_Enable>
 800c21a:	0003      	movs	r3, r0
 800c21c:	7023      	strb	r3, [r4, #0]
    }

    /* Start conversion if ADC is effectively enabled */
    if (tmp_hal_status == HAL_OK)
 800c21e:	230f      	movs	r3, #15
 800c220:	18fb      	adds	r3, r7, r3
 800c222:	781b      	ldrb	r3, [r3, #0]
 800c224:	2b00      	cmp	r3, #0
 800c226:	d120      	bne.n	800c26a <HAL_ADC_Start+0x96>
    {
      /* Set ADC state                                                        */
      /* - Clear state bitfield related to regular group conversion results   */
      /* - Set state bitfield related to regular operation                    */
      ADC_STATE_CLR_SET(hadc->State,
 800c228:	687b      	ldr	r3, [r7, #4]
 800c22a:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c22c:	4a12      	ldr	r2, [pc, #72]	@ (800c278 <HAL_ADC_Start+0xa4>)
 800c22e:	4013      	ands	r3, r2
 800c230:	2280      	movs	r2, #128	@ 0x80
 800c232:	0052      	lsls	r2, r2, #1
 800c234:	431a      	orrs	r2, r3
 800c236:	687b      	ldr	r3, [r7, #4]
 800c238:	655a      	str	r2, [r3, #84]	@ 0x54
                        HAL_ADC_STATE_READY | HAL_ADC_STATE_REG_EOC | HAL_ADC_STATE_REG_OVR | HAL_ADC_STATE_REG_EOSMP,
                        HAL_ADC_STATE_REG_BUSY);

      /* Reset ADC all error code fields */
      ADC_CLEAR_ERRORCODE(hadc);
 800c23a:	687b      	ldr	r3, [r7, #4]
 800c23c:	2200      	movs	r2, #0
 800c23e:	659a      	str	r2, [r3, #88]	@ 0x58

      /* Process unlocked */
      /* Unlock before starting ADC conversions: in case of potential         */
      /* interruption, to let the process to ADC IRQ Handler.                 */
      __HAL_UNLOCK(hadc);
 800c240:	687b      	ldr	r3, [r7, #4]
 800c242:	2250      	movs	r2, #80	@ 0x50
 800c244:	2100      	movs	r1, #0
 800c246:	5499      	strb	r1, [r3, r2]

      /* Clear regular group conversion flag and overrun flag */
      /* (To ensure of no unknown state from potential previous ADC           */
      /* operations)                                                          */
      __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS | ADC_FLAG_OVR));
 800c248:	687b      	ldr	r3, [r7, #4]
 800c24a:	681b      	ldr	r3, [r3, #0]
 800c24c:	221c      	movs	r2, #28
 800c24e:	601a      	str	r2, [r3, #0]

      /* Enable conversion of regular group.                                  */
      /* If software start has been selected, conversion starts immediately.  */
      /* If external trigger has been selected, conversion will start at next */
      /* trigger event.                                                       */
      hadc->Instance->CR |= ADC_CR_ADSTART;
 800c250:	687b      	ldr	r3, [r7, #4]
 800c252:	681b      	ldr	r3, [r3, #0]
 800c254:	689a      	ldr	r2, [r3, #8]
 800c256:	687b      	ldr	r3, [r7, #4]
 800c258:	681b      	ldr	r3, [r3, #0]
 800c25a:	2104      	movs	r1, #4
 800c25c:	430a      	orrs	r2, r1
 800c25e:	609a      	str	r2, [r3, #8]
 800c260:	e003      	b.n	800c26a <HAL_ADC_Start+0x96>
    }
  }
  else
  {
    tmp_hal_status = HAL_BUSY;
 800c262:	230f      	movs	r3, #15
 800c264:	18fb      	adds	r3, r7, r3
 800c266:	2202      	movs	r2, #2
 800c268:	701a      	strb	r2, [r3, #0]
  }

  /* Return function status */
  return tmp_hal_status;
 800c26a:	230f      	movs	r3, #15
 800c26c:	18fb      	adds	r3, r7, r3
 800c26e:	781b      	ldrb	r3, [r3, #0]
}
 800c270:	0018      	movs	r0, r3
 800c272:	46bd      	mov	sp, r7
 800c274:	b005      	add	sp, #20
 800c276:	bd90      	pop	{r4, r7, pc}
 800c278:	fffff0fe 	.word	0xfffff0fe

0800c27c <HAL_ADC_PollForConversion>:
  * @param  hadc ADC handle
  * @param  Timeout Timeout value in millisecond.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_PollForConversion(ADC_HandleTypeDef *hadc, uint32_t Timeout)
{
 800c27c:	b580      	push	{r7, lr}
 800c27e:	b084      	sub	sp, #16
 800c280:	af00      	add	r7, sp, #0
 800c282:	6078      	str	r0, [r7, #4]
 800c284:	6039      	str	r1, [r7, #0]
  uint32_t tickstart = 0;
 800c286:	2300      	movs	r3, #0
 800c288:	60bb      	str	r3, [r7, #8]
  uint32_t tmp_Flag_EOC   = 0x00;
 800c28a:	2300      	movs	r3, #0
 800c28c:	60fb      	str	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));

  /* If end of conversion selected to end of sequence conversions */
  if (hadc->Init.EOCSelection == ADC_EOC_SEQ_CONV)
 800c28e:	687b      	ldr	r3, [r7, #4]
 800c290:	695b      	ldr	r3, [r3, #20]
 800c292:	2b08      	cmp	r3, #8
 800c294:	d102      	bne.n	800c29c <HAL_ADC_PollForConversion+0x20>
  {
    tmp_Flag_EOC = ADC_FLAG_EOS;
 800c296:	2308      	movs	r3, #8
 800c298:	60fb      	str	r3, [r7, #12]
 800c29a:	e014      	b.n	800c2c6 <HAL_ADC_PollForConversion+0x4a>
    /* each conversion:                                                       */
    /* Particular case is ADC configured in DMA mode and ADC sequencer with   */
    /* several ranks and polling for end of each conversion.                  */
    /* For code simplicity sake, this particular case is generalized to       */
    /* ADC configured in DMA mode and and polling for end of each conversion. */
    if (HAL_IS_BIT_SET(hadc->Instance->CFGR1, ADC_CFGR1_DMAEN))
 800c29c:	687b      	ldr	r3, [r7, #4]
 800c29e:	681b      	ldr	r3, [r3, #0]
 800c2a0:	68db      	ldr	r3, [r3, #12]
 800c2a2:	2201      	movs	r2, #1
 800c2a4:	4013      	ands	r3, r2
 800c2a6:	2b01      	cmp	r3, #1
 800c2a8:	d10b      	bne.n	800c2c2 <HAL_ADC_PollForConversion+0x46>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c2aa:	687b      	ldr	r3, [r7, #4]
 800c2ac:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c2ae:	2220      	movs	r2, #32
 800c2b0:	431a      	orrs	r2, r3
 800c2b2:	687b      	ldr	r3, [r7, #4]
 800c2b4:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Process unlocked */
      __HAL_UNLOCK(hadc);
 800c2b6:	687b      	ldr	r3, [r7, #4]
 800c2b8:	2250      	movs	r2, #80	@ 0x50
 800c2ba:	2100      	movs	r1, #0
 800c2bc:	5499      	strb	r1, [r3, r2]

      return HAL_ERROR;
 800c2be:	2301      	movs	r3, #1
 800c2c0:	e072      	b.n	800c3a8 <HAL_ADC_PollForConversion+0x12c>
    }
    else
    {
      tmp_Flag_EOC = (ADC_FLAG_EOC | ADC_FLAG_EOS);
 800c2c2:	230c      	movs	r3, #12
 800c2c4:	60fb      	str	r3, [r7, #12]
    }
  }

  /* Get tick count */
  tickstart = HAL_GetTick();
 800c2c6:	f7ff fdc5 	bl	800be54 <HAL_GetTick>
 800c2ca:	0003      	movs	r3, r0
 800c2cc:	60bb      	str	r3, [r7, #8]

  /* Wait until End of unitary conversion or sequence conversions flag is raised */
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800c2ce:	e01f      	b.n	800c310 <HAL_ADC_PollForConversion+0x94>
  {
    /* Check if timeout is disabled (set to infinite wait) */
    if (Timeout != HAL_MAX_DELAY)
 800c2d0:	683b      	ldr	r3, [r7, #0]
 800c2d2:	3301      	adds	r3, #1
 800c2d4:	d01c      	beq.n	800c310 <HAL_ADC_PollForConversion+0x94>
    {
      if ((Timeout == 0U) || ((HAL_GetTick() - tickstart) > Timeout))
 800c2d6:	683b      	ldr	r3, [r7, #0]
 800c2d8:	2b00      	cmp	r3, #0
 800c2da:	d007      	beq.n	800c2ec <HAL_ADC_PollForConversion+0x70>
 800c2dc:	f7ff fdba 	bl	800be54 <HAL_GetTick>
 800c2e0:	0002      	movs	r2, r0
 800c2e2:	68bb      	ldr	r3, [r7, #8]
 800c2e4:	1ad3      	subs	r3, r2, r3
 800c2e6:	683a      	ldr	r2, [r7, #0]
 800c2e8:	429a      	cmp	r2, r3
 800c2ea:	d211      	bcs.n	800c310 <HAL_ADC_PollForConversion+0x94>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800c2ec:	687b      	ldr	r3, [r7, #4]
 800c2ee:	681b      	ldr	r3, [r3, #0]
 800c2f0:	681b      	ldr	r3, [r3, #0]
 800c2f2:	68fa      	ldr	r2, [r7, #12]
 800c2f4:	4013      	ands	r3, r2
 800c2f6:	d10b      	bne.n	800c310 <HAL_ADC_PollForConversion+0x94>
        {
          /* Update ADC state machine to timeout */
          SET_BIT(hadc->State, HAL_ADC_STATE_TIMEOUT);
 800c2f8:	687b      	ldr	r3, [r7, #4]
 800c2fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c2fc:	2204      	movs	r2, #4
 800c2fe:	431a      	orrs	r2, r3
 800c300:	687b      	ldr	r3, [r7, #4]
 800c302:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Process unlocked */
          __HAL_UNLOCK(hadc);
 800c304:	687b      	ldr	r3, [r7, #4]
 800c306:	2250      	movs	r2, #80	@ 0x50
 800c308:	2100      	movs	r1, #0
 800c30a:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 800c30c:	2303      	movs	r3, #3
 800c30e:	e04b      	b.n	800c3a8 <HAL_ADC_PollForConversion+0x12c>
  while (HAL_IS_BIT_CLR(hadc->Instance->ISR, tmp_Flag_EOC))
 800c310:	687b      	ldr	r3, [r7, #4]
 800c312:	681b      	ldr	r3, [r3, #0]
 800c314:	681b      	ldr	r3, [r3, #0]
 800c316:	68fa      	ldr	r2, [r7, #12]
 800c318:	4013      	ands	r3, r2
 800c31a:	d0d9      	beq.n	800c2d0 <HAL_ADC_PollForConversion+0x54>
      }
    }
  }

  /* Update ADC state machine */
  SET_BIT(hadc->State, HAL_ADC_STATE_REG_EOC);
 800c31c:	687b      	ldr	r3, [r7, #4]
 800c31e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c320:	2280      	movs	r2, #128	@ 0x80
 800c322:	0092      	lsls	r2, r2, #2
 800c324:	431a      	orrs	r2, r3
 800c326:	687b      	ldr	r3, [r7, #4]
 800c328:	655a      	str	r2, [r3, #84]	@ 0x54

  /* Determine whether any further conversion upcoming on group regular       */
  /* by external trigger, continuous mode or scan sequence on going.          */
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800c32a:	687b      	ldr	r3, [r7, #4]
 800c32c:	681b      	ldr	r3, [r3, #0]
 800c32e:	68da      	ldr	r2, [r3, #12]
 800c330:	23c0      	movs	r3, #192	@ 0xc0
 800c332:	011b      	lsls	r3, r3, #4
 800c334:	4013      	ands	r3, r2
 800c336:	d12e      	bne.n	800c396 <HAL_ADC_PollForConversion+0x11a>
      (hadc->Init.ContinuousConvMode == DISABLE))
 800c338:	687b      	ldr	r3, [r7, #4]
 800c33a:	2220      	movs	r2, #32
 800c33c:	5c9b      	ldrb	r3, [r3, r2]
  if (ADC_IS_SOFTWARE_START_REGULAR(hadc)        &&
 800c33e:	2b00      	cmp	r3, #0
 800c340:	d129      	bne.n	800c396 <HAL_ADC_PollForConversion+0x11a>
  {
    /* If End of Sequence is reached, disable interrupts */
    if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_EOS))
 800c342:	687b      	ldr	r3, [r7, #4]
 800c344:	681b      	ldr	r3, [r3, #0]
 800c346:	681b      	ldr	r3, [r3, #0]
 800c348:	2208      	movs	r2, #8
 800c34a:	4013      	ands	r3, r2
 800c34c:	2b08      	cmp	r3, #8
 800c34e:	d122      	bne.n	800c396 <HAL_ADC_PollForConversion+0x11a>
    {
      /* Allowed to modify bits ADC_IT_EOC/ADC_IT_EOS only if bit             */
      /* ADSTART==0 (no conversion on going)                                  */
      if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) == RESET)
 800c350:	687b      	ldr	r3, [r7, #4]
 800c352:	681b      	ldr	r3, [r3, #0]
 800c354:	689b      	ldr	r3, [r3, #8]
 800c356:	2204      	movs	r2, #4
 800c358:	4013      	ands	r3, r2
 800c35a:	d110      	bne.n	800c37e <HAL_ADC_PollForConversion+0x102>
      {
        /* Disable ADC end of single conversion interrupt on group regular */
        /* Note: Overrun interrupt was enabled with EOC interrupt in          */
        /* HAL_Start_IT(), but is not disabled here because can be used       */
        /* by overrun IRQ process below.                                      */
        __HAL_ADC_DISABLE_IT(hadc, ADC_IT_EOC | ADC_IT_EOS);
 800c35c:	687b      	ldr	r3, [r7, #4]
 800c35e:	681b      	ldr	r3, [r3, #0]
 800c360:	685a      	ldr	r2, [r3, #4]
 800c362:	687b      	ldr	r3, [r7, #4]
 800c364:	681b      	ldr	r3, [r3, #0]
 800c366:	210c      	movs	r1, #12
 800c368:	438a      	bics	r2, r1
 800c36a:	605a      	str	r2, [r3, #4]

        /* Set ADC state */
        ADC_STATE_CLR_SET(hadc->State,
 800c36c:	687b      	ldr	r3, [r7, #4]
 800c36e:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c370:	4a0f      	ldr	r2, [pc, #60]	@ (800c3b0 <HAL_ADC_PollForConversion+0x134>)
 800c372:	4013      	ands	r3, r2
 800c374:	2201      	movs	r2, #1
 800c376:	431a      	orrs	r2, r3
 800c378:	687b      	ldr	r3, [r7, #4]
 800c37a:	655a      	str	r2, [r3, #84]	@ 0x54
 800c37c:	e00b      	b.n	800c396 <HAL_ADC_PollForConversion+0x11a>
                          HAL_ADC_STATE_READY);
      }
      else
      {
        /* Change ADC state to error state */
        SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c37e:	687b      	ldr	r3, [r7, #4]
 800c380:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c382:	2220      	movs	r2, #32
 800c384:	431a      	orrs	r2, r3
 800c386:	687b      	ldr	r3, [r7, #4]
 800c388:	655a      	str	r2, [r3, #84]	@ 0x54

        /* Set ADC error code to ADC peripheral internal error */
        SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c38a:	687b      	ldr	r3, [r7, #4]
 800c38c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c38e:	2201      	movs	r2, #1
 800c390:	431a      	orrs	r2, r3
 800c392:	687b      	ldr	r3, [r7, #4]
 800c394:	659a      	str	r2, [r3, #88]	@ 0x58
  }

  /* Clear end of conversion flag of regular group if low power feature       */
  /* "LowPowerAutoWait " is disabled, to not interfere with this feature      */
  /* until data register is read using function HAL_ADC_GetValue().           */
  if (hadc->Init.LowPowerAutoWait == DISABLE)
 800c396:	687b      	ldr	r3, [r7, #4]
 800c398:	699b      	ldr	r3, [r3, #24]
 800c39a:	2b00      	cmp	r3, #0
 800c39c:	d103      	bne.n	800c3a6 <HAL_ADC_PollForConversion+0x12a>
  {
    /* Clear regular group conversion flag */
    __HAL_ADC_CLEAR_FLAG(hadc, (ADC_FLAG_EOC | ADC_FLAG_EOS));
 800c39e:	687b      	ldr	r3, [r7, #4]
 800c3a0:	681b      	ldr	r3, [r3, #0]
 800c3a2:	220c      	movs	r2, #12
 800c3a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800c3a6:	2300      	movs	r3, #0
}
 800c3a8:	0018      	movs	r0, r3
 800c3aa:	46bd      	mov	sp, r7
 800c3ac:	b004      	add	sp, #16
 800c3ae:	bd80      	pop	{r7, pc}
 800c3b0:	fffffefe 	.word	0xfffffefe

0800c3b4 <HAL_ADC_GetValue>:
  *         or @ref __HAL_ADC_CLEAR_FLAG(&hadc, ADC_FLAG_EOS).
  * @param  hadc ADC handle
  * @retval ADC group regular conversion data
  */
uint32_t HAL_ADC_GetValue(ADC_HandleTypeDef *hadc)
{
 800c3b4:	b580      	push	{r7, lr}
 800c3b6:	b082      	sub	sp, #8
 800c3b8:	af00      	add	r7, sp, #0
 800c3ba:	6078      	str	r0, [r7, #4]

  /* Note: EOC flag is not cleared here by software because automatically     */
  /*       cleared by hardware when reading register DR.                      */

  /* Return ADC converted value */
  return hadc->Instance->DR;
 800c3bc:	687b      	ldr	r3, [r7, #4]
 800c3be:	681b      	ldr	r3, [r3, #0]
 800c3c0:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
}
 800c3c2:	0018      	movs	r0, r3
 800c3c4:	46bd      	mov	sp, r7
 800c3c6:	b002      	add	sp, #8
 800c3c8:	bd80      	pop	{r7, pc}
	...

0800c3cc <HAL_ADC_ConfigChannel>:
  * @param  hadc ADC handle
  * @param  sConfig Structure of ADC channel assigned to ADC group regular.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_ADC_ConfigChannel(ADC_HandleTypeDef *hadc, ADC_ChannelConfTypeDef *sConfig)
{
 800c3cc:	b580      	push	{r7, lr}
 800c3ce:	b082      	sub	sp, #8
 800c3d0:	af00      	add	r7, sp, #0
 800c3d2:	6078      	str	r0, [r7, #4]
 800c3d4:	6039      	str	r1, [r7, #0]
  assert_param(IS_ADC_ALL_INSTANCE(hadc->Instance));
  assert_param(IS_ADC_CHANNEL(sConfig->Channel));
  assert_param(IS_ADC_RANK(sConfig->Rank));

  /* Process locked */
  __HAL_LOCK(hadc);
 800c3d6:	687b      	ldr	r3, [r7, #4]
 800c3d8:	2250      	movs	r2, #80	@ 0x50
 800c3da:	5c9b      	ldrb	r3, [r3, r2]
 800c3dc:	2b01      	cmp	r3, #1
 800c3de:	d101      	bne.n	800c3e4 <HAL_ADC_ConfigChannel+0x18>
 800c3e0:	2302      	movs	r3, #2
 800c3e2:	e06c      	b.n	800c4be <HAL_ADC_ConfigChannel+0xf2>
 800c3e4:	687b      	ldr	r3, [r7, #4]
 800c3e6:	2250      	movs	r2, #80	@ 0x50
 800c3e8:	2101      	movs	r1, #1
 800c3ea:	5499      	strb	r1, [r3, r2]
  /* Parameters update conditioned to ADC state:                              */
  /* Parameters that can be updated when ADC is disabled or enabled without   */
  /* conversion on going on regular group:                                    */
  /*  - Channel number                                                        */
  /*  - Management of internal measurement channels: Vbat/VrefInt/TempSensor  */
  if (ADC_IS_CONVERSION_ONGOING_REGULAR(hadc) != RESET)
 800c3ec:	687b      	ldr	r3, [r7, #4]
 800c3ee:	681b      	ldr	r3, [r3, #0]
 800c3f0:	689b      	ldr	r3, [r3, #8]
 800c3f2:	2204      	movs	r2, #4
 800c3f4:	4013      	ands	r3, r2
 800c3f6:	d00b      	beq.n	800c410 <HAL_ADC_ConfigChannel+0x44>
  {
    /* Update ADC state machine to error */
    SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_CONFIG);
 800c3f8:	687b      	ldr	r3, [r7, #4]
 800c3fa:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c3fc:	2220      	movs	r2, #32
 800c3fe:	431a      	orrs	r2, r3
 800c400:	687b      	ldr	r3, [r7, #4]
 800c402:	655a      	str	r2, [r3, #84]	@ 0x54
    /* Process unlocked */
    __HAL_UNLOCK(hadc);
 800c404:	687b      	ldr	r3, [r7, #4]
 800c406:	2250      	movs	r2, #80	@ 0x50
 800c408:	2100      	movs	r1, #0
 800c40a:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800c40c:	2301      	movs	r3, #1
 800c40e:	e056      	b.n	800c4be <HAL_ADC_ConfigChannel+0xf2>
  }

  if (sConfig->Rank != ADC_RANK_NONE)
 800c410:	683b      	ldr	r3, [r7, #0]
 800c412:	685b      	ldr	r3, [r3, #4]
 800c414:	4a2c      	ldr	r2, [pc, #176]	@ (800c4c8 <HAL_ADC_ConfigChannel+0xfc>)
 800c416:	4293      	cmp	r3, r2
 800c418:	d028      	beq.n	800c46c <HAL_ADC_ConfigChannel+0xa0>
  {
    /* Enable selected channels */
    hadc->Instance->CHSELR |= (uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK);
 800c41a:	687b      	ldr	r3, [r7, #4]
 800c41c:	681b      	ldr	r3, [r3, #0]
 800c41e:	6a99      	ldr	r1, [r3, #40]	@ 0x28
 800c420:	683b      	ldr	r3, [r7, #0]
 800c422:	681b      	ldr	r3, [r3, #0]
 800c424:	035b      	lsls	r3, r3, #13
 800c426:	0b5a      	lsrs	r2, r3, #13
 800c428:	687b      	ldr	r3, [r7, #4]
 800c42a:	681b      	ldr	r3, [r3, #0]
 800c42c:	430a      	orrs	r2, r1
 800c42e:	629a      	str	r2, [r3, #40]	@ 0x28
    /* dedicated internal buffers and path.                                     */

#if defined(ADC_CCR_TSEN)
    /* If Temperature sensor channel is selected, then enable the internal      */
    /* buffers and path  */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800c430:	683b      	ldr	r3, [r7, #0]
 800c432:	681a      	ldr	r2, [r3, #0]
 800c434:	2380      	movs	r3, #128	@ 0x80
 800c436:	02db      	lsls	r3, r3, #11
 800c438:	4013      	ands	r3, r2
 800c43a:	d009      	beq.n	800c450 <HAL_ADC_ConfigChannel+0x84>
    {
      ADC->CCR |= ADC_CCR_TSEN;
 800c43c:	4b23      	ldr	r3, [pc, #140]	@ (800c4cc <HAL_ADC_ConfigChannel+0x100>)
 800c43e:	681a      	ldr	r2, [r3, #0]
 800c440:	4b22      	ldr	r3, [pc, #136]	@ (800c4cc <HAL_ADC_ConfigChannel+0x100>)
 800c442:	2180      	movs	r1, #128	@ 0x80
 800c444:	0409      	lsls	r1, r1, #16
 800c446:	430a      	orrs	r2, r1
 800c448:	601a      	str	r2, [r3, #0]

      /* Delay for temperature sensor stabilization time */
      ADC_DelayMicroSecond(ADC_TEMPSENSOR_DELAY_US);
 800c44a:	200a      	movs	r0, #10
 800c44c:	f000 f8ac 	bl	800c5a8 <ADC_DelayMicroSecond>
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800c450:	683b      	ldr	r3, [r7, #0]
 800c452:	681a      	ldr	r2, [r3, #0]
 800c454:	2380      	movs	r3, #128	@ 0x80
 800c456:	029b      	lsls	r3, r3, #10
 800c458:	4013      	ands	r3, r2
 800c45a:	d02b      	beq.n	800c4b4 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR |= ADC_CCR_VREFEN;
 800c45c:	4b1b      	ldr	r3, [pc, #108]	@ (800c4cc <HAL_ADC_ConfigChannel+0x100>)
 800c45e:	681a      	ldr	r2, [r3, #0]
 800c460:	4b1a      	ldr	r3, [pc, #104]	@ (800c4cc <HAL_ADC_ConfigChannel+0x100>)
 800c462:	2180      	movs	r1, #128	@ 0x80
 800c464:	03c9      	lsls	r1, r1, #15
 800c466:	430a      	orrs	r2, r1
 800c468:	601a      	str	r2, [r3, #0]
 800c46a:	e023      	b.n	800c4b4 <HAL_ADC_ConfigChannel+0xe8>
  }
  else
  {
    /* Regular sequence configuration */
    /* Reset the channel selection register from the selected channel */
    hadc->Instance->CHSELR &= ~((uint32_t)(sConfig->Channel & ADC_CHANNEL_MASK));
 800c46c:	687b      	ldr	r3, [r7, #4]
 800c46e:	681b      	ldr	r3, [r3, #0]
 800c470:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 800c472:	683b      	ldr	r3, [r7, #0]
 800c474:	681b      	ldr	r3, [r3, #0]
 800c476:	035b      	lsls	r3, r3, #13
 800c478:	0b5b      	lsrs	r3, r3, #13
 800c47a:	43d9      	mvns	r1, r3
 800c47c:	687b      	ldr	r3, [r7, #4]
 800c47e:	681b      	ldr	r3, [r3, #0]
 800c480:	400a      	ands	r2, r1
 800c482:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Management of internal measurement channels: VrefInt/TempSensor/Vbat */
    /* internal measurement paths disable: If internal channel selected,    */
    /* disable dedicated internal buffers and path.                         */
#if defined(ADC_CCR_TSEN)
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_TEMPSENSOR) == (ADC_CHANNEL_TEMPSENSOR & ADC_CHANNEL_MASK))
 800c484:	683b      	ldr	r3, [r7, #0]
 800c486:	681a      	ldr	r2, [r3, #0]
 800c488:	2380      	movs	r3, #128	@ 0x80
 800c48a:	02db      	lsls	r3, r3, #11
 800c48c:	4013      	ands	r3, r2
 800c48e:	d005      	beq.n	800c49c <HAL_ADC_ConfigChannel+0xd0>
    {
      ADC->CCR &= ~ADC_CCR_TSEN;
 800c490:	4b0e      	ldr	r3, [pc, #56]	@ (800c4cc <HAL_ADC_ConfigChannel+0x100>)
 800c492:	681a      	ldr	r2, [r3, #0]
 800c494:	4b0d      	ldr	r3, [pc, #52]	@ (800c4cc <HAL_ADC_ConfigChannel+0x100>)
 800c496:	490e      	ldr	r1, [pc, #56]	@ (800c4d0 <HAL_ADC_ConfigChannel+0x104>)
 800c498:	400a      	ands	r2, r1
 800c49a:	601a      	str	r2, [r3, #0]
    }
#endif

    /* If VRefInt channel is selected, then enable the internal buffers and path   */
    if (((sConfig->Channel & ADC_CHANNEL_MASK) & ADC_CHANNEL_VREFINT) == (ADC_CHANNEL_VREFINT & ADC_CHANNEL_MASK))
 800c49c:	683b      	ldr	r3, [r7, #0]
 800c49e:	681a      	ldr	r2, [r3, #0]
 800c4a0:	2380      	movs	r3, #128	@ 0x80
 800c4a2:	029b      	lsls	r3, r3, #10
 800c4a4:	4013      	ands	r3, r2
 800c4a6:	d005      	beq.n	800c4b4 <HAL_ADC_ConfigChannel+0xe8>
    {
      ADC->CCR &= ~ADC_CCR_VREFEN;
 800c4a8:	4b08      	ldr	r3, [pc, #32]	@ (800c4cc <HAL_ADC_ConfigChannel+0x100>)
 800c4aa:	681a      	ldr	r2, [r3, #0]
 800c4ac:	4b07      	ldr	r3, [pc, #28]	@ (800c4cc <HAL_ADC_ConfigChannel+0x100>)
 800c4ae:	4909      	ldr	r1, [pc, #36]	@ (800c4d4 <HAL_ADC_ConfigChannel+0x108>)
 800c4b0:	400a      	ands	r2, r1
 800c4b2:	601a      	str	r2, [r3, #0]
    }
#endif
  }

  /* Process unlocked */
  __HAL_UNLOCK(hadc);
 800c4b4:	687b      	ldr	r3, [r7, #4]
 800c4b6:	2250      	movs	r2, #80	@ 0x50
 800c4b8:	2100      	movs	r1, #0
 800c4ba:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 800c4bc:	2300      	movs	r3, #0
}
 800c4be:	0018      	movs	r0, r3
 800c4c0:	46bd      	mov	sp, r7
 800c4c2:	b002      	add	sp, #8
 800c4c4:	bd80      	pop	{r7, pc}
 800c4c6:	46c0      	nop			@ (mov r8, r8)
 800c4c8:	00001001 	.word	0x00001001
 800c4cc:	40012708 	.word	0x40012708
 800c4d0:	ff7fffff 	.word	0xff7fffff
 800c4d4:	ffbfffff 	.word	0xffbfffff

0800c4d8 <ADC_Enable>:
  *         "if (hadc->Init.LowPowerAutoPowerOff != ENABLE)".
  * @param  hadc ADC handle
  * @retval HAL status.
  */
static HAL_StatusTypeDef ADC_Enable(ADC_HandleTypeDef *hadc)
{
 800c4d8:	b580      	push	{r7, lr}
 800c4da:	b084      	sub	sp, #16
 800c4dc:	af00      	add	r7, sp, #0
 800c4de:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 800c4e0:	2300      	movs	r3, #0
 800c4e2:	60fb      	str	r3, [r7, #12]

  /* ADC enable and wait for ADC ready (in case of ADC is disabled or         */
  /* enabling phase not yet completed: flag ADC ready not yet set).           */
  /* Timeout implemented to not be stuck if ADC cannot be enabled (possible   */
  /* causes: ADC clock not running, ...).                                     */
  if (ADC_IS_ENABLE(hadc) == RESET)
 800c4e4:	687b      	ldr	r3, [r7, #4]
 800c4e6:	681b      	ldr	r3, [r3, #0]
 800c4e8:	689b      	ldr	r3, [r3, #8]
 800c4ea:	2203      	movs	r2, #3
 800c4ec:	4013      	ands	r3, r2
 800c4ee:	2b01      	cmp	r3, #1
 800c4f0:	d108      	bne.n	800c504 <ADC_Enable+0x2c>
 800c4f2:	687b      	ldr	r3, [r7, #4]
 800c4f4:	681b      	ldr	r3, [r3, #0]
 800c4f6:	681b      	ldr	r3, [r3, #0]
 800c4f8:	2201      	movs	r2, #1
 800c4fa:	4013      	ands	r3, r2
 800c4fc:	2b01      	cmp	r3, #1
 800c4fe:	d101      	bne.n	800c504 <ADC_Enable+0x2c>
 800c500:	2301      	movs	r3, #1
 800c502:	e000      	b.n	800c506 <ADC_Enable+0x2e>
 800c504:	2300      	movs	r3, #0
 800c506:	2b00      	cmp	r3, #0
 800c508:	d146      	bne.n	800c598 <ADC_Enable+0xc0>
  {
    /* Check if conditions to enable the ADC are fulfilled */
    if (ADC_ENABLING_CONDITIONS(hadc) == RESET)
 800c50a:	687b      	ldr	r3, [r7, #4]
 800c50c:	681b      	ldr	r3, [r3, #0]
 800c50e:	689b      	ldr	r3, [r3, #8]
 800c510:	4a24      	ldr	r2, [pc, #144]	@ (800c5a4 <ADC_Enable+0xcc>)
 800c512:	4013      	ands	r3, r2
 800c514:	d00d      	beq.n	800c532 <ADC_Enable+0x5a>
    {
      /* Update ADC state machine to error */
      SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c516:	687b      	ldr	r3, [r7, #4]
 800c518:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c51a:	2210      	movs	r2, #16
 800c51c:	431a      	orrs	r2, r3
 800c51e:	687b      	ldr	r3, [r7, #4]
 800c520:	655a      	str	r2, [r3, #84]	@ 0x54

      /* Set ADC error code to ADC peripheral internal error */
      SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c522:	687b      	ldr	r3, [r7, #4]
 800c524:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c526:	2201      	movs	r2, #1
 800c528:	431a      	orrs	r2, r3
 800c52a:	687b      	ldr	r3, [r7, #4]
 800c52c:	659a      	str	r2, [r3, #88]	@ 0x58

      return HAL_ERROR;
 800c52e:	2301      	movs	r3, #1
 800c530:	e033      	b.n	800c59a <ADC_Enable+0xc2>
    }

    /* Enable the ADC peripheral */
    __HAL_ADC_ENABLE(hadc);
 800c532:	687b      	ldr	r3, [r7, #4]
 800c534:	681b      	ldr	r3, [r3, #0]
 800c536:	689a      	ldr	r2, [r3, #8]
 800c538:	687b      	ldr	r3, [r7, #4]
 800c53a:	681b      	ldr	r3, [r3, #0]
 800c53c:	2101      	movs	r1, #1
 800c53e:	430a      	orrs	r2, r1
 800c540:	609a      	str	r2, [r3, #8]

    /* Delay for ADC stabilization time. */
    ADC_DelayMicroSecond(ADC_STAB_DELAY_US);
 800c542:	2001      	movs	r0, #1
 800c544:	f000 f830 	bl	800c5a8 <ADC_DelayMicroSecond>

    /* Get tick count */
    tickstart = HAL_GetTick();
 800c548:	f7ff fc84 	bl	800be54 <HAL_GetTick>
 800c54c:	0003      	movs	r3, r0
 800c54e:	60fb      	str	r3, [r7, #12]

    /* Wait for ADC effectively enabled */
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800c550:	e01b      	b.n	800c58a <ADC_Enable+0xb2>
    {
      if ((HAL_GetTick() - tickstart) > ADC_ENABLE_TIMEOUT)
 800c552:	f7ff fc7f 	bl	800be54 <HAL_GetTick>
 800c556:	0002      	movs	r2, r0
 800c558:	68fb      	ldr	r3, [r7, #12]
 800c55a:	1ad3      	subs	r3, r2, r3
 800c55c:	2b0a      	cmp	r3, #10
 800c55e:	d914      	bls.n	800c58a <ADC_Enable+0xb2>
      {
        /* New check to avoid false timeout detection in case of preemption */
        if (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800c560:	687b      	ldr	r3, [r7, #4]
 800c562:	681b      	ldr	r3, [r3, #0]
 800c564:	681b      	ldr	r3, [r3, #0]
 800c566:	2201      	movs	r2, #1
 800c568:	4013      	ands	r3, r2
 800c56a:	2b01      	cmp	r3, #1
 800c56c:	d00d      	beq.n	800c58a <ADC_Enable+0xb2>
        {
          /* Update ADC state machine to error */
          SET_BIT(hadc->State, HAL_ADC_STATE_ERROR_INTERNAL);
 800c56e:	687b      	ldr	r3, [r7, #4]
 800c570:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 800c572:	2210      	movs	r2, #16
 800c574:	431a      	orrs	r2, r3
 800c576:	687b      	ldr	r3, [r7, #4]
 800c578:	655a      	str	r2, [r3, #84]	@ 0x54

          /* Set ADC error code to ADC peripheral internal error */
          SET_BIT(hadc->ErrorCode, HAL_ADC_ERROR_INTERNAL);
 800c57a:	687b      	ldr	r3, [r7, #4]
 800c57c:	6d9b      	ldr	r3, [r3, #88]	@ 0x58
 800c57e:	2201      	movs	r2, #1
 800c580:	431a      	orrs	r2, r3
 800c582:	687b      	ldr	r3, [r7, #4]
 800c584:	659a      	str	r2, [r3, #88]	@ 0x58

          return HAL_ERROR;
 800c586:	2301      	movs	r3, #1
 800c588:	e007      	b.n	800c59a <ADC_Enable+0xc2>
    while (__HAL_ADC_GET_FLAG(hadc, ADC_FLAG_RDY) == RESET)
 800c58a:	687b      	ldr	r3, [r7, #4]
 800c58c:	681b      	ldr	r3, [r3, #0]
 800c58e:	681b      	ldr	r3, [r3, #0]
 800c590:	2201      	movs	r2, #1
 800c592:	4013      	ands	r3, r2
 800c594:	2b01      	cmp	r3, #1
 800c596:	d1dc      	bne.n	800c552 <ADC_Enable+0x7a>
      }
    }
  }

  /* Return HAL status */
  return HAL_OK;
 800c598:	2300      	movs	r3, #0
}
 800c59a:	0018      	movs	r0, r3
 800c59c:	46bd      	mov	sp, r7
 800c59e:	b004      	add	sp, #16
 800c5a0:	bd80      	pop	{r7, pc}
 800c5a2:	46c0      	nop			@ (mov r8, r8)
 800c5a4:	80000017 	.word	0x80000017

0800c5a8 <ADC_DelayMicroSecond>:
  * @brief  Delay micro seconds
  * @param  microSecond  delay
  * @retval None
  */
static void ADC_DelayMicroSecond(uint32_t microSecond)
{
 800c5a8:	b580      	push	{r7, lr}
 800c5aa:	b084      	sub	sp, #16
 800c5ac:	af00      	add	r7, sp, #0
 800c5ae:	6078      	str	r0, [r7, #4]
  /* Compute number of CPU cycles to wait for */
  __IO uint32_t waitLoopIndex = (microSecond * (SystemCoreClock / 1000000U));
 800c5b0:	4b0b      	ldr	r3, [pc, #44]	@ (800c5e0 <ADC_DelayMicroSecond+0x38>)
 800c5b2:	681b      	ldr	r3, [r3, #0]
 800c5b4:	490b      	ldr	r1, [pc, #44]	@ (800c5e4 <ADC_DelayMicroSecond+0x3c>)
 800c5b6:	0018      	movs	r0, r3
 800c5b8:	f7f3 fdf4 	bl	80001a4 <__udivsi3>
 800c5bc:	0003      	movs	r3, r0
 800c5be:	001a      	movs	r2, r3
 800c5c0:	687b      	ldr	r3, [r7, #4]
 800c5c2:	4353      	muls	r3, r2
 800c5c4:	60fb      	str	r3, [r7, #12]

  while (waitLoopIndex != 0U)
 800c5c6:	e002      	b.n	800c5ce <ADC_DelayMicroSecond+0x26>
  {
    waitLoopIndex--;
 800c5c8:	68fb      	ldr	r3, [r7, #12]
 800c5ca:	3b01      	subs	r3, #1
 800c5cc:	60fb      	str	r3, [r7, #12]
  while (waitLoopIndex != 0U)
 800c5ce:	68fb      	ldr	r3, [r7, #12]
 800c5d0:	2b00      	cmp	r3, #0
 800c5d2:	d1f9      	bne.n	800c5c8 <ADC_DelayMicroSecond+0x20>
  }
}
 800c5d4:	46c0      	nop			@ (mov r8, r8)
 800c5d6:	46c0      	nop			@ (mov r8, r8)
 800c5d8:	46bd      	mov	sp, r7
 800c5da:	b004      	add	sp, #16
 800c5dc:	bd80      	pop	{r7, pc}
 800c5de:	46c0      	nop			@ (mov r8, r8)
 800c5e0:	200000c8 	.word	0x200000c8
 800c5e4:	000f4240 	.word	0x000f4240

0800c5e8 <__NVIC_EnableIRQ>:
{
 800c5e8:	b580      	push	{r7, lr}
 800c5ea:	b082      	sub	sp, #8
 800c5ec:	af00      	add	r7, sp, #0
 800c5ee:	0002      	movs	r2, r0
 800c5f0:	1dfb      	adds	r3, r7, #7
 800c5f2:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800c5f4:	1dfb      	adds	r3, r7, #7
 800c5f6:	781b      	ldrb	r3, [r3, #0]
 800c5f8:	2b7f      	cmp	r3, #127	@ 0x7f
 800c5fa:	d809      	bhi.n	800c610 <__NVIC_EnableIRQ+0x28>
    NVIC->ISER[0U] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800c5fc:	1dfb      	adds	r3, r7, #7
 800c5fe:	781b      	ldrb	r3, [r3, #0]
 800c600:	001a      	movs	r2, r3
 800c602:	231f      	movs	r3, #31
 800c604:	401a      	ands	r2, r3
 800c606:	4b04      	ldr	r3, [pc, #16]	@ (800c618 <__NVIC_EnableIRQ+0x30>)
 800c608:	2101      	movs	r1, #1
 800c60a:	4091      	lsls	r1, r2
 800c60c:	000a      	movs	r2, r1
 800c60e:	601a      	str	r2, [r3, #0]
}
 800c610:	46c0      	nop			@ (mov r8, r8)
 800c612:	46bd      	mov	sp, r7
 800c614:	b002      	add	sp, #8
 800c616:	bd80      	pop	{r7, pc}
 800c618:	e000e100 	.word	0xe000e100

0800c61c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 800c61c:	b590      	push	{r4, r7, lr}
 800c61e:	b083      	sub	sp, #12
 800c620:	af00      	add	r7, sp, #0
 800c622:	0002      	movs	r2, r0
 800c624:	6039      	str	r1, [r7, #0]
 800c626:	1dfb      	adds	r3, r7, #7
 800c628:	701a      	strb	r2, [r3, #0]
  if ((int32_t)(IRQn) >= 0)
 800c62a:	1dfb      	adds	r3, r7, #7
 800c62c:	781b      	ldrb	r3, [r3, #0]
 800c62e:	2b7f      	cmp	r3, #127	@ 0x7f
 800c630:	d828      	bhi.n	800c684 <__NVIC_SetPriority+0x68>
  {
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800c632:	4a2f      	ldr	r2, [pc, #188]	@ (800c6f0 <__NVIC_SetPriority+0xd4>)
 800c634:	1dfb      	adds	r3, r7, #7
 800c636:	781b      	ldrb	r3, [r3, #0]
 800c638:	b25b      	sxtb	r3, r3
 800c63a:	089b      	lsrs	r3, r3, #2
 800c63c:	33c0      	adds	r3, #192	@ 0xc0
 800c63e:	009b      	lsls	r3, r3, #2
 800c640:	589b      	ldr	r3, [r3, r2]
 800c642:	1dfa      	adds	r2, r7, #7
 800c644:	7812      	ldrb	r2, [r2, #0]
 800c646:	0011      	movs	r1, r2
 800c648:	2203      	movs	r2, #3
 800c64a:	400a      	ands	r2, r1
 800c64c:	00d2      	lsls	r2, r2, #3
 800c64e:	21ff      	movs	r1, #255	@ 0xff
 800c650:	4091      	lsls	r1, r2
 800c652:	000a      	movs	r2, r1
 800c654:	43d2      	mvns	r2, r2
 800c656:	401a      	ands	r2, r3
 800c658:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800c65a:	683b      	ldr	r3, [r7, #0]
 800c65c:	019b      	lsls	r3, r3, #6
 800c65e:	22ff      	movs	r2, #255	@ 0xff
 800c660:	401a      	ands	r2, r3
 800c662:	1dfb      	adds	r3, r7, #7
 800c664:	781b      	ldrb	r3, [r3, #0]
 800c666:	0018      	movs	r0, r3
 800c668:	2303      	movs	r3, #3
 800c66a:	4003      	ands	r3, r0
 800c66c:	00db      	lsls	r3, r3, #3
 800c66e:	409a      	lsls	r2, r3
    NVIC->IP[_IP_IDX(IRQn)]  = ((uint32_t)(NVIC->IP[_IP_IDX(IRQn)]  & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800c670:	481f      	ldr	r0, [pc, #124]	@ (800c6f0 <__NVIC_SetPriority+0xd4>)
 800c672:	1dfb      	adds	r3, r7, #7
 800c674:	781b      	ldrb	r3, [r3, #0]
 800c676:	b25b      	sxtb	r3, r3
 800c678:	089b      	lsrs	r3, r3, #2
 800c67a:	430a      	orrs	r2, r1
 800c67c:	33c0      	adds	r3, #192	@ 0xc0
 800c67e:	009b      	lsls	r3, r3, #2
 800c680:	501a      	str	r2, [r3, r0]
  else
  {
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
  }
}
 800c682:	e031      	b.n	800c6e8 <__NVIC_SetPriority+0xcc>
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800c684:	4a1b      	ldr	r2, [pc, #108]	@ (800c6f4 <__NVIC_SetPriority+0xd8>)
 800c686:	1dfb      	adds	r3, r7, #7
 800c688:	781b      	ldrb	r3, [r3, #0]
 800c68a:	0019      	movs	r1, r3
 800c68c:	230f      	movs	r3, #15
 800c68e:	400b      	ands	r3, r1
 800c690:	3b08      	subs	r3, #8
 800c692:	089b      	lsrs	r3, r3, #2
 800c694:	3306      	adds	r3, #6
 800c696:	009b      	lsls	r3, r3, #2
 800c698:	18d3      	adds	r3, r2, r3
 800c69a:	3304      	adds	r3, #4
 800c69c:	681b      	ldr	r3, [r3, #0]
 800c69e:	1dfa      	adds	r2, r7, #7
 800c6a0:	7812      	ldrb	r2, [r2, #0]
 800c6a2:	0011      	movs	r1, r2
 800c6a4:	2203      	movs	r2, #3
 800c6a6:	400a      	ands	r2, r1
 800c6a8:	00d2      	lsls	r2, r2, #3
 800c6aa:	21ff      	movs	r1, #255	@ 0xff
 800c6ac:	4091      	lsls	r1, r2
 800c6ae:	000a      	movs	r2, r1
 800c6b0:	43d2      	mvns	r2, r2
 800c6b2:	401a      	ands	r2, r3
 800c6b4:	0011      	movs	r1, r2
       (((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL) << _BIT_SHIFT(IRQn)));
 800c6b6:	683b      	ldr	r3, [r7, #0]
 800c6b8:	019b      	lsls	r3, r3, #6
 800c6ba:	22ff      	movs	r2, #255	@ 0xff
 800c6bc:	401a      	ands	r2, r3
 800c6be:	1dfb      	adds	r3, r7, #7
 800c6c0:	781b      	ldrb	r3, [r3, #0]
 800c6c2:	0018      	movs	r0, r3
 800c6c4:	2303      	movs	r3, #3
 800c6c6:	4003      	ands	r3, r0
 800c6c8:	00db      	lsls	r3, r3, #3
 800c6ca:	409a      	lsls	r2, r3
    SCB->SHP[_SHP_IDX(IRQn)] = ((uint32_t)(SCB->SHP[_SHP_IDX(IRQn)] & ~(0xFFUL << _BIT_SHIFT(IRQn))) |
 800c6cc:	4809      	ldr	r0, [pc, #36]	@ (800c6f4 <__NVIC_SetPriority+0xd8>)
 800c6ce:	1dfb      	adds	r3, r7, #7
 800c6d0:	781b      	ldrb	r3, [r3, #0]
 800c6d2:	001c      	movs	r4, r3
 800c6d4:	230f      	movs	r3, #15
 800c6d6:	4023      	ands	r3, r4
 800c6d8:	3b08      	subs	r3, #8
 800c6da:	089b      	lsrs	r3, r3, #2
 800c6dc:	430a      	orrs	r2, r1
 800c6de:	3306      	adds	r3, #6
 800c6e0:	009b      	lsls	r3, r3, #2
 800c6e2:	18c3      	adds	r3, r0, r3
 800c6e4:	3304      	adds	r3, #4
 800c6e6:	601a      	str	r2, [r3, #0]
}
 800c6e8:	46c0      	nop			@ (mov r8, r8)
 800c6ea:	46bd      	mov	sp, r7
 800c6ec:	b003      	add	sp, #12
 800c6ee:	bd90      	pop	{r4, r7, pc}
 800c6f0:	e000e100 	.word	0xe000e100
 800c6f4:	e000ed00 	.word	0xe000ed00

0800c6f8 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 800c6f8:	b580      	push	{r7, lr}
 800c6fa:	b082      	sub	sp, #8
 800c6fc:	af00      	add	r7, sp, #0
 800c6fe:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 800c700:	687b      	ldr	r3, [r7, #4]
 800c702:	1e5a      	subs	r2, r3, #1
 800c704:	2380      	movs	r3, #128	@ 0x80
 800c706:	045b      	lsls	r3, r3, #17
 800c708:	429a      	cmp	r2, r3
 800c70a:	d301      	bcc.n	800c710 <SysTick_Config+0x18>
  {
    return (1UL);                                                   /* Reload value impossible */
 800c70c:	2301      	movs	r3, #1
 800c70e:	e010      	b.n	800c732 <SysTick_Config+0x3a>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 800c710:	4b0a      	ldr	r3, [pc, #40]	@ (800c73c <SysTick_Config+0x44>)
 800c712:	687a      	ldr	r2, [r7, #4]
 800c714:	3a01      	subs	r2, #1
 800c716:	605a      	str	r2, [r3, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800c718:	2301      	movs	r3, #1
 800c71a:	425b      	negs	r3, r3
 800c71c:	2103      	movs	r1, #3
 800c71e:	0018      	movs	r0, r3
 800c720:	f7ff ff7c 	bl	800c61c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 800c724:	4b05      	ldr	r3, [pc, #20]	@ (800c73c <SysTick_Config+0x44>)
 800c726:	2200      	movs	r2, #0
 800c728:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800c72a:	4b04      	ldr	r3, [pc, #16]	@ (800c73c <SysTick_Config+0x44>)
 800c72c:	2207      	movs	r2, #7
 800c72e:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 800c730:	2300      	movs	r3, #0
}
 800c732:	0018      	movs	r0, r3
 800c734:	46bd      	mov	sp, r7
 800c736:	b002      	add	sp, #8
 800c738:	bd80      	pop	{r7, pc}
 800c73a:	46c0      	nop			@ (mov r8, r8)
 800c73c:	e000e010 	.word	0xe000e010

0800c740 <HAL_NVIC_SetPriority>:
  *         with stm32l0xx devices, this parameter is a dummy value and it is ignored, because 
  *         no subpriority supported in Cortex M0+ based products.   
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800c740:	b580      	push	{r7, lr}
 800c742:	b084      	sub	sp, #16
 800c744:	af00      	add	r7, sp, #0
 800c746:	60b9      	str	r1, [r7, #8]
 800c748:	607a      	str	r2, [r7, #4]
 800c74a:	210f      	movs	r1, #15
 800c74c:	187b      	adds	r3, r7, r1
 800c74e:	1c02      	adds	r2, r0, #0
 800c750:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  NVIC_SetPriority(IRQn,PreemptPriority);
 800c752:	68ba      	ldr	r2, [r7, #8]
 800c754:	187b      	adds	r3, r7, r1
 800c756:	781b      	ldrb	r3, [r3, #0]
 800c758:	b25b      	sxtb	r3, r3
 800c75a:	0011      	movs	r1, r2
 800c75c:	0018      	movs	r0, r3
 800c75e:	f7ff ff5d 	bl	800c61c <__NVIC_SetPriority>
}
 800c762:	46c0      	nop			@ (mov r8, r8)
 800c764:	46bd      	mov	sp, r7
 800c766:	b004      	add	sp, #16
 800c768:	bd80      	pop	{r7, pc}

0800c76a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of  IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to stm32l0xx.h file)  
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800c76a:	b580      	push	{r7, lr}
 800c76c:	b082      	sub	sp, #8
 800c76e:	af00      	add	r7, sp, #0
 800c770:	0002      	movs	r2, r0
 800c772:	1dfb      	adds	r3, r7, #7
 800c774:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800c776:	1dfb      	adds	r3, r7, #7
 800c778:	781b      	ldrb	r3, [r3, #0]
 800c77a:	b25b      	sxtb	r3, r3
 800c77c:	0018      	movs	r0, r3
 800c77e:	f7ff ff33 	bl	800c5e8 <__NVIC_EnableIRQ>
}
 800c782:	46c0      	nop			@ (mov r8, r8)
 800c784:	46bd      	mov	sp, r7
 800c786:	b002      	add	sp, #8
 800c788:	bd80      	pop	{r7, pc}

0800c78a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 800c78a:	b580      	push	{r7, lr}
 800c78c:	b082      	sub	sp, #8
 800c78e:	af00      	add	r7, sp, #0
 800c790:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800c792:	687b      	ldr	r3, [r7, #4]
 800c794:	0018      	movs	r0, r3
 800c796:	f7ff ffaf 	bl	800c6f8 <SysTick_Config>
 800c79a:	0003      	movs	r3, r0
}
 800c79c:	0018      	movs	r0, r3
 800c79e:	46bd      	mov	sp, r7
 800c7a0:	b002      	add	sp, #8
 800c7a2:	bd80      	pop	{r7, pc}

0800c7a4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 800c7a4:	b580      	push	{r7, lr}
 800c7a6:	b084      	sub	sp, #16
 800c7a8:	af00      	add	r7, sp, #0
 800c7aa:	6078      	str	r0, [r7, #4]
  uint32_t tmp;

  /* Check the DMA handle allocation */
  if(hdma == NULL)
 800c7ac:	687b      	ldr	r3, [r7, #4]
 800c7ae:	2b00      	cmp	r3, #0
 800c7b0:	d101      	bne.n	800c7b6 <HAL_DMA_Init+0x12>
  {
    return HAL_ERROR;
 800c7b2:	2301      	movs	r3, #1
 800c7b4:	e061      	b.n	800c87a <HAL_DMA_Init+0xd6>
  assert_param(IS_DMA_MODE(hdma->Init.Mode));
  assert_param(IS_DMA_PRIORITY(hdma->Init.Priority));

  /* Compute the channel index */
  /* Only one DMA: DMA1 */
  hdma->ChannelIndex = (((uint32_t)hdma->Instance - (uint32_t)DMA1_Channel1) / ((uint32_t)DMA1_Channel2 - (uint32_t)DMA1_Channel1)) << 2;
 800c7b6:	687b      	ldr	r3, [r7, #4]
 800c7b8:	681b      	ldr	r3, [r3, #0]
 800c7ba:	4a32      	ldr	r2, [pc, #200]	@ (800c884 <HAL_DMA_Init+0xe0>)
 800c7bc:	4694      	mov	ip, r2
 800c7be:	4463      	add	r3, ip
 800c7c0:	2114      	movs	r1, #20
 800c7c2:	0018      	movs	r0, r3
 800c7c4:	f7f3 fcee 	bl	80001a4 <__udivsi3>
 800c7c8:	0003      	movs	r3, r0
 800c7ca:	009a      	lsls	r2, r3, #2
 800c7cc:	687b      	ldr	r3, [r7, #4]
 800c7ce:	645a      	str	r2, [r3, #68]	@ 0x44
  hdma->DmaBaseAddress = DMA1;
 800c7d0:	687b      	ldr	r3, [r7, #4]
 800c7d2:	4a2d      	ldr	r2, [pc, #180]	@ (800c888 <HAL_DMA_Init+0xe4>)
 800c7d4:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 800c7d6:	687b      	ldr	r3, [r7, #4]
 800c7d8:	2225      	movs	r2, #37	@ 0x25
 800c7da:	2102      	movs	r1, #2
 800c7dc:	5499      	strb	r1, [r3, r2]

  /* Get the CR register value */
  tmp = hdma->Instance->CCR;
 800c7de:	687b      	ldr	r3, [r7, #4]
 800c7e0:	681b      	ldr	r3, [r3, #0]
 800c7e2:	681b      	ldr	r3, [r3, #0]
 800c7e4:	60fb      	str	r3, [r7, #12]

  /* Clear PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR and MEM2MEM bits */
  tmp &= ((uint32_t)~(DMA_CCR_PL    | DMA_CCR_MSIZE  | DMA_CCR_PSIZE  |
 800c7e6:	68fb      	ldr	r3, [r7, #12]
 800c7e8:	4a28      	ldr	r2, [pc, #160]	@ (800c88c <HAL_DMA_Init+0xe8>)
 800c7ea:	4013      	ands	r3, r2
 800c7ec:	60fb      	str	r3, [r7, #12]
                      DMA_CCR_MINC  | DMA_CCR_PINC   | DMA_CCR_CIRC   |
                      DMA_CCR_DIR   | DMA_CCR_MEM2MEM));

  /* Prepare the DMA Channel configuration */
  tmp |=  hdma->Init.Direction        |
 800c7ee:	687b      	ldr	r3, [r7, #4]
 800c7f0:	689a      	ldr	r2, [r3, #8]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c7f2:	687b      	ldr	r3, [r7, #4]
 800c7f4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Direction        |
 800c7f6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c7f8:	687b      	ldr	r3, [r7, #4]
 800c7fa:	691b      	ldr	r3, [r3, #16]
 800c7fc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c7fe:	687b      	ldr	r3, [r7, #4]
 800c800:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800c802:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c804:	687b      	ldr	r3, [r7, #4]
 800c806:	699b      	ldr	r3, [r3, #24]
 800c808:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800c80a:	687b      	ldr	r3, [r7, #4]
 800c80c:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800c80e:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 800c810:	687b      	ldr	r3, [r7, #4]
 800c812:	6a1b      	ldr	r3, [r3, #32]
 800c814:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Direction        |
 800c816:	68fa      	ldr	r2, [r7, #12]
 800c818:	4313      	orrs	r3, r2
 800c81a:	60fb      	str	r3, [r7, #12]

  /* Write to DMA Channel CR register */
  hdma->Instance->CCR = tmp;
 800c81c:	687b      	ldr	r3, [r7, #4]
 800c81e:	681b      	ldr	r3, [r3, #0]
 800c820:	68fa      	ldr	r2, [r7, #12]
 800c822:	601a      	str	r2, [r3, #0]

  /* Set request selection */
  if(hdma->Init.Direction != DMA_MEMORY_TO_MEMORY)
 800c824:	687b      	ldr	r3, [r7, #4]
 800c826:	689a      	ldr	r2, [r3, #8]
 800c828:	2380      	movs	r3, #128	@ 0x80
 800c82a:	01db      	lsls	r3, r3, #7
 800c82c:	429a      	cmp	r2, r3
 800c82e:	d018      	beq.n	800c862 <HAL_DMA_Init+0xbe>
  {
    /* Write to DMA channel selection register */
    /* Reset request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR &= ~(DMA_CSELR_C1S << (hdma->ChannelIndex & 0x1cU));
 800c830:	4b17      	ldr	r3, [pc, #92]	@ (800c890 <HAL_DMA_Init+0xec>)
 800c832:	681a      	ldr	r2, [r3, #0]
 800c834:	687b      	ldr	r3, [r7, #4]
 800c836:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c838:	211c      	movs	r1, #28
 800c83a:	400b      	ands	r3, r1
 800c83c:	210f      	movs	r1, #15
 800c83e:	4099      	lsls	r1, r3
 800c840:	000b      	movs	r3, r1
 800c842:	43d9      	mvns	r1, r3
 800c844:	4b12      	ldr	r3, [pc, #72]	@ (800c890 <HAL_DMA_Init+0xec>)
 800c846:	400a      	ands	r2, r1
 800c848:	601a      	str	r2, [r3, #0]

    /* Configure request selection for DMA1 Channelx */
    DMA1_CSELR->CSELR |= (uint32_t) (hdma->Init.Request << (hdma->ChannelIndex & 0x1cU));
 800c84a:	4b11      	ldr	r3, [pc, #68]	@ (800c890 <HAL_DMA_Init+0xec>)
 800c84c:	6819      	ldr	r1, [r3, #0]
 800c84e:	687b      	ldr	r3, [r7, #4]
 800c850:	685a      	ldr	r2, [r3, #4]
 800c852:	687b      	ldr	r3, [r7, #4]
 800c854:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c856:	201c      	movs	r0, #28
 800c858:	4003      	ands	r3, r0
 800c85a:	409a      	lsls	r2, r3
 800c85c:	4b0c      	ldr	r3, [pc, #48]	@ (800c890 <HAL_DMA_Init+0xec>)
 800c85e:	430a      	orrs	r2, r1
 800c860:	601a      	str	r2, [r3, #0]
  }

  /* Initialise the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c862:	687b      	ldr	r3, [r7, #4]
 800c864:	2200      	movs	r2, #0
 800c866:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Initialize the DMA state*/
  hdma->State  = HAL_DMA_STATE_READY;
 800c868:	687b      	ldr	r3, [r7, #4]
 800c86a:	2225      	movs	r2, #37	@ 0x25
 800c86c:	2101      	movs	r1, #1
 800c86e:	5499      	strb	r1, [r3, r2]

  /* Allocate lock resource and initialize it */
  hdma->Lock = HAL_UNLOCKED;
 800c870:	687b      	ldr	r3, [r7, #4]
 800c872:	2224      	movs	r2, #36	@ 0x24
 800c874:	2100      	movs	r1, #0
 800c876:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800c878:	2300      	movs	r3, #0
}
 800c87a:	0018      	movs	r0, r3
 800c87c:	46bd      	mov	sp, r7
 800c87e:	b004      	add	sp, #16
 800c880:	bd80      	pop	{r7, pc}
 800c882:	46c0      	nop			@ (mov r8, r8)
 800c884:	bffdfff8 	.word	0xbffdfff8
 800c888:	40020000 	.word	0x40020000
 800c88c:	ffff800f 	.word	0xffff800f
 800c890:	400200a8 	.word	0x400200a8

0800c894 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800c894:	b580      	push	{r7, lr}
 800c896:	b086      	sub	sp, #24
 800c898:	af00      	add	r7, sp, #0
 800c89a:	60f8      	str	r0, [r7, #12]
 800c89c:	60b9      	str	r1, [r7, #8]
 800c89e:	607a      	str	r2, [r7, #4]
 800c8a0:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800c8a2:	2317      	movs	r3, #23
 800c8a4:	18fb      	adds	r3, r7, r3
 800c8a6:	2200      	movs	r2, #0
 800c8a8:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));

  /* Process locked */
  __HAL_LOCK(hdma);
 800c8aa:	68fb      	ldr	r3, [r7, #12]
 800c8ac:	2224      	movs	r2, #36	@ 0x24
 800c8ae:	5c9b      	ldrb	r3, [r3, r2]
 800c8b0:	2b01      	cmp	r3, #1
 800c8b2:	d101      	bne.n	800c8b8 <HAL_DMA_Start_IT+0x24>
 800c8b4:	2302      	movs	r3, #2
 800c8b6:	e04f      	b.n	800c958 <HAL_DMA_Start_IT+0xc4>
 800c8b8:	68fb      	ldr	r3, [r7, #12]
 800c8ba:	2224      	movs	r2, #36	@ 0x24
 800c8bc:	2101      	movs	r1, #1
 800c8be:	5499      	strb	r1, [r3, r2]

  if(HAL_DMA_STATE_READY == hdma->State)
 800c8c0:	68fb      	ldr	r3, [r7, #12]
 800c8c2:	2225      	movs	r2, #37	@ 0x25
 800c8c4:	5c9b      	ldrb	r3, [r3, r2]
 800c8c6:	b2db      	uxtb	r3, r3
 800c8c8:	2b01      	cmp	r3, #1
 800c8ca:	d13a      	bne.n	800c942 <HAL_DMA_Start_IT+0xae>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800c8cc:	68fb      	ldr	r3, [r7, #12]
 800c8ce:	2225      	movs	r2, #37	@ 0x25
 800c8d0:	2102      	movs	r1, #2
 800c8d2:	5499      	strb	r1, [r3, r2]
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800c8d4:	68fb      	ldr	r3, [r7, #12]
 800c8d6:	2200      	movs	r2, #0
 800c8d8:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Disable the peripheral */
    __HAL_DMA_DISABLE(hdma);
 800c8da:	68fb      	ldr	r3, [r7, #12]
 800c8dc:	681b      	ldr	r3, [r3, #0]
 800c8de:	681a      	ldr	r2, [r3, #0]
 800c8e0:	68fb      	ldr	r3, [r7, #12]
 800c8e2:	681b      	ldr	r3, [r3, #0]
 800c8e4:	2101      	movs	r1, #1
 800c8e6:	438a      	bics	r2, r1
 800c8e8:	601a      	str	r2, [r3, #0]

    /* Configure the source, destination address and the data length & clear flags*/
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 800c8ea:	683b      	ldr	r3, [r7, #0]
 800c8ec:	687a      	ldr	r2, [r7, #4]
 800c8ee:	68b9      	ldr	r1, [r7, #8]
 800c8f0:	68f8      	ldr	r0, [r7, #12]
 800c8f2:	f000 f976 	bl	800cbe2 <DMA_SetConfig>

    /* Enable the transfer complete interrupt */
    /* Enable the transfer Error interrupt */
    if(NULL != hdma->XferHalfCpltCallback )
 800c8f6:	68fb      	ldr	r3, [r7, #12]
 800c8f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800c8fa:	2b00      	cmp	r3, #0
 800c8fc:	d008      	beq.n	800c910 <HAL_DMA_Start_IT+0x7c>
    {
      /* Enable the Half transfer complete interrupt as well */
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c8fe:	68fb      	ldr	r3, [r7, #12]
 800c900:	681b      	ldr	r3, [r3, #0]
 800c902:	681a      	ldr	r2, [r3, #0]
 800c904:	68fb      	ldr	r3, [r7, #12]
 800c906:	681b      	ldr	r3, [r3, #0]
 800c908:	210e      	movs	r1, #14
 800c90a:	430a      	orrs	r2, r1
 800c90c:	601a      	str	r2, [r3, #0]
 800c90e:	e00f      	b.n	800c930 <HAL_DMA_Start_IT+0x9c>
    }
    else
    {
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800c910:	68fb      	ldr	r3, [r7, #12]
 800c912:	681b      	ldr	r3, [r3, #0]
 800c914:	681a      	ldr	r2, [r3, #0]
 800c916:	68fb      	ldr	r3, [r7, #12]
 800c918:	681b      	ldr	r3, [r3, #0]
 800c91a:	2104      	movs	r1, #4
 800c91c:	438a      	bics	r2, r1
 800c91e:	601a      	str	r2, [r3, #0]
      __HAL_DMA_ENABLE_IT(hdma, (DMA_IT_TC | DMA_IT_TE));
 800c920:	68fb      	ldr	r3, [r7, #12]
 800c922:	681b      	ldr	r3, [r3, #0]
 800c924:	681a      	ldr	r2, [r3, #0]
 800c926:	68fb      	ldr	r3, [r7, #12]
 800c928:	681b      	ldr	r3, [r3, #0]
 800c92a:	210a      	movs	r1, #10
 800c92c:	430a      	orrs	r2, r1
 800c92e:	601a      	str	r2, [r3, #0]
    }

    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 800c930:	68fb      	ldr	r3, [r7, #12]
 800c932:	681b      	ldr	r3, [r3, #0]
 800c934:	681a      	ldr	r2, [r3, #0]
 800c936:	68fb      	ldr	r3, [r7, #12]
 800c938:	681b      	ldr	r3, [r3, #0]
 800c93a:	2101      	movs	r1, #1
 800c93c:	430a      	orrs	r2, r1
 800c93e:	601a      	str	r2, [r3, #0]
 800c940:	e007      	b.n	800c952 <HAL_DMA_Start_IT+0xbe>
  }
  else
  {
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c942:	68fb      	ldr	r3, [r7, #12]
 800c944:	2224      	movs	r2, #36	@ 0x24
 800c946:	2100      	movs	r1, #0
 800c948:	5499      	strb	r1, [r3, r2]

    /* Remain BUSY */
    status = HAL_BUSY;
 800c94a:	2317      	movs	r3, #23
 800c94c:	18fb      	adds	r3, r7, r3
 800c94e:	2202      	movs	r2, #2
 800c950:	701a      	strb	r2, [r3, #0]
  }
  return status;
 800c952:	2317      	movs	r3, #23
 800c954:	18fb      	adds	r3, r7, r3
 800c956:	781b      	ldrb	r3, [r3, #0]
}
 800c958:	0018      	movs	r0, r3
 800c95a:	46bd      	mov	sp, r7
 800c95c:	b006      	add	sp, #24
 800c95e:	bd80      	pop	{r7, pc}

0800c960 <HAL_DMA_Abort>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
    * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 800c960:	b580      	push	{r7, lr}
 800c962:	b084      	sub	sp, #16
 800c964:	af00      	add	r7, sp, #0
 800c966:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c968:	230f      	movs	r3, #15
 800c96a:	18fb      	adds	r3, r7, r3
 800c96c:	2200      	movs	r2, #0
 800c96e:	701a      	strb	r2, [r3, #0]

  /* Check the DMA peripheral state */
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800c970:	687b      	ldr	r3, [r7, #4]
 800c972:	2225      	movs	r2, #37	@ 0x25
 800c974:	5c9b      	ldrb	r3, [r3, r2]
 800c976:	b2db      	uxtb	r3, r3
 800c978:	2b02      	cmp	r3, #2
 800c97a:	d008      	beq.n	800c98e <HAL_DMA_Abort+0x2e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c97c:	687b      	ldr	r3, [r7, #4]
 800c97e:	2204      	movs	r2, #4
 800c980:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c982:	687b      	ldr	r3, [r7, #4]
 800c984:	2224      	movs	r2, #36	@ 0x24
 800c986:	2100      	movs	r1, #0
 800c988:	5499      	strb	r1, [r3, r2]

    return HAL_ERROR;
 800c98a:	2301      	movs	r3, #1
 800c98c:	e024      	b.n	800c9d8 <HAL_DMA_Abort+0x78>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800c98e:	687b      	ldr	r3, [r7, #4]
 800c990:	681b      	ldr	r3, [r3, #0]
 800c992:	681a      	ldr	r2, [r3, #0]
 800c994:	687b      	ldr	r3, [r7, #4]
 800c996:	681b      	ldr	r3, [r3, #0]
 800c998:	210e      	movs	r1, #14
 800c99a:	438a      	bics	r2, r1
 800c99c:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800c99e:	687b      	ldr	r3, [r7, #4]
 800c9a0:	681b      	ldr	r3, [r3, #0]
 800c9a2:	681a      	ldr	r2, [r3, #0]
 800c9a4:	687b      	ldr	r3, [r7, #4]
 800c9a6:	681b      	ldr	r3, [r3, #0]
 800c9a8:	2101      	movs	r1, #1
 800c9aa:	438a      	bics	r2, r1
 800c9ac:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800c9ae:	687b      	ldr	r3, [r7, #4]
 800c9b0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800c9b2:	221c      	movs	r2, #28
 800c9b4:	401a      	ands	r2, r3
 800c9b6:	687b      	ldr	r3, [r7, #4]
 800c9b8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800c9ba:	2101      	movs	r1, #1
 800c9bc:	4091      	lsls	r1, r2
 800c9be:	000a      	movs	r2, r1
 800c9c0:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800c9c2:	687b      	ldr	r3, [r7, #4]
 800c9c4:	2225      	movs	r2, #37	@ 0x25
 800c9c6:	2101      	movs	r1, #1
 800c9c8:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800c9ca:	687b      	ldr	r3, [r7, #4]
 800c9cc:	2224      	movs	r2, #36	@ 0x24
 800c9ce:	2100      	movs	r1, #0
 800c9d0:	5499      	strb	r1, [r3, r2]

    return status;
 800c9d2:	230f      	movs	r3, #15
 800c9d4:	18fb      	adds	r3, r7, r3
 800c9d6:	781b      	ldrb	r3, [r3, #0]
  }
}
 800c9d8:	0018      	movs	r0, r3
 800c9da:	46bd      	mov	sp, r7
 800c9dc:	b004      	add	sp, #16
 800c9de:	bd80      	pop	{r7, pc}

0800c9e0 <HAL_DMA_Abort_IT>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Channel.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800c9e0:	b580      	push	{r7, lr}
 800c9e2:	b084      	sub	sp, #16
 800c9e4:	af00      	add	r7, sp, #0
 800c9e6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800c9e8:	210f      	movs	r1, #15
 800c9ea:	187b      	adds	r3, r7, r1
 800c9ec:	2200      	movs	r2, #0
 800c9ee:	701a      	strb	r2, [r3, #0]

  if(HAL_DMA_STATE_BUSY != hdma->State)
 800c9f0:	687b      	ldr	r3, [r7, #4]
 800c9f2:	2225      	movs	r2, #37	@ 0x25
 800c9f4:	5c9b      	ldrb	r3, [r3, r2]
 800c9f6:	b2db      	uxtb	r3, r3
 800c9f8:	2b02      	cmp	r3, #2
 800c9fa:	d006      	beq.n	800ca0a <HAL_DMA_Abort_IT+0x2a>
  {
    /* no transfer ongoing */
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800c9fc:	687b      	ldr	r3, [r7, #4]
 800c9fe:	2204      	movs	r2, #4
 800ca00:	63da      	str	r2, [r3, #60]	@ 0x3c

    status = HAL_ERROR;
 800ca02:	187b      	adds	r3, r7, r1
 800ca04:	2201      	movs	r2, #1
 800ca06:	701a      	strb	r2, [r3, #0]
 800ca08:	e02a      	b.n	800ca60 <HAL_DMA_Abort_IT+0x80>
  }
  else
  {
    /* Disable DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800ca0a:	687b      	ldr	r3, [r7, #4]
 800ca0c:	681b      	ldr	r3, [r3, #0]
 800ca0e:	681a      	ldr	r2, [r3, #0]
 800ca10:	687b      	ldr	r3, [r7, #4]
 800ca12:	681b      	ldr	r3, [r3, #0]
 800ca14:	210e      	movs	r1, #14
 800ca16:	438a      	bics	r2, r1
 800ca18:	601a      	str	r2, [r3, #0]

    /* Disable the channel */
    __HAL_DMA_DISABLE(hdma);
 800ca1a:	687b      	ldr	r3, [r7, #4]
 800ca1c:	681b      	ldr	r3, [r3, #0]
 800ca1e:	681a      	ldr	r2, [r3, #0]
 800ca20:	687b      	ldr	r3, [r7, #4]
 800ca22:	681b      	ldr	r3, [r3, #0]
 800ca24:	2101      	movs	r1, #1
 800ca26:	438a      	bics	r2, r1
 800ca28:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800ca2a:	687b      	ldr	r3, [r7, #4]
 800ca2c:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ca2e:	221c      	movs	r2, #28
 800ca30:	401a      	ands	r2, r3
 800ca32:	687b      	ldr	r3, [r7, #4]
 800ca34:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca36:	2101      	movs	r1, #1
 800ca38:	4091      	lsls	r1, r2
 800ca3a:	000a      	movs	r2, r1
 800ca3c:	605a      	str	r2, [r3, #4]

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800ca3e:	687b      	ldr	r3, [r7, #4]
 800ca40:	2225      	movs	r2, #37	@ 0x25
 800ca42:	2101      	movs	r1, #1
 800ca44:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800ca46:	687b      	ldr	r3, [r7, #4]
 800ca48:	2224      	movs	r2, #36	@ 0x24
 800ca4a:	2100      	movs	r1, #0
 800ca4c:	5499      	strb	r1, [r3, r2]

    /* Call User Abort callback */
    if(hdma->XferAbortCallback != NULL)
 800ca4e:	687b      	ldr	r3, [r7, #4]
 800ca50:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca52:	2b00      	cmp	r3, #0
 800ca54:	d004      	beq.n	800ca60 <HAL_DMA_Abort_IT+0x80>
    {
      hdma->XferAbortCallback(hdma);
 800ca56:	687b      	ldr	r3, [r7, #4]
 800ca58:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ca5a:	687a      	ldr	r2, [r7, #4]
 800ca5c:	0010      	movs	r0, r2
 800ca5e:	4798      	blx	r3
    }
  }
  return status;
 800ca60:	230f      	movs	r3, #15
 800ca62:	18fb      	adds	r3, r7, r3
 800ca64:	781b      	ldrb	r3, [r3, #0]
}
 800ca66:	0018      	movs	r0, r3
 800ca68:	46bd      	mov	sp, r7
 800ca6a:	b004      	add	sp, #16
 800ca6c:	bd80      	pop	{r7, pc}

0800ca6e <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800ca6e:	b580      	push	{r7, lr}
 800ca70:	b084      	sub	sp, #16
 800ca72:	af00      	add	r7, sp, #0
 800ca74:	6078      	str	r0, [r7, #4]
  uint32_t flag_it = hdma->DmaBaseAddress->ISR;
 800ca76:	687b      	ldr	r3, [r7, #4]
 800ca78:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800ca7a:	681b      	ldr	r3, [r3, #0]
 800ca7c:	60fb      	str	r3, [r7, #12]
  uint32_t source_it = hdma->Instance->CCR;
 800ca7e:	687b      	ldr	r3, [r7, #4]
 800ca80:	681b      	ldr	r3, [r3, #0]
 800ca82:	681b      	ldr	r3, [r3, #0]
 800ca84:	60bb      	str	r3, [r7, #8]

  /* Half Transfer Complete Interrupt management ******************************/
  if ((0U != (flag_it & (DMA_FLAG_HT1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_HT)))
 800ca86:	687b      	ldr	r3, [r7, #4]
 800ca88:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ca8a:	221c      	movs	r2, #28
 800ca8c:	4013      	ands	r3, r2
 800ca8e:	2204      	movs	r2, #4
 800ca90:	409a      	lsls	r2, r3
 800ca92:	0013      	movs	r3, r2
 800ca94:	68fa      	ldr	r2, [r7, #12]
 800ca96:	4013      	ands	r3, r2
 800ca98:	d026      	beq.n	800cae8 <HAL_DMA_IRQHandler+0x7a>
 800ca9a:	68bb      	ldr	r3, [r7, #8]
 800ca9c:	2204      	movs	r2, #4
 800ca9e:	4013      	ands	r3, r2
 800caa0:	d022      	beq.n	800cae8 <HAL_DMA_IRQHandler+0x7a>
  {
      /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
      if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800caa2:	687b      	ldr	r3, [r7, #4]
 800caa4:	681b      	ldr	r3, [r3, #0]
 800caa6:	681b      	ldr	r3, [r3, #0]
 800caa8:	2220      	movs	r2, #32
 800caaa:	4013      	ands	r3, r2
 800caac:	d107      	bne.n	800cabe <HAL_DMA_IRQHandler+0x50>
      {
        /* Disable the half transfer interrupt */
        __HAL_DMA_DISABLE_IT(hdma, DMA_IT_HT);
 800caae:	687b      	ldr	r3, [r7, #4]
 800cab0:	681b      	ldr	r3, [r3, #0]
 800cab2:	681a      	ldr	r2, [r3, #0]
 800cab4:	687b      	ldr	r3, [r7, #4]
 800cab6:	681b      	ldr	r3, [r3, #0]
 800cab8:	2104      	movs	r1, #4
 800caba:	438a      	bics	r2, r1
 800cabc:	601a      	str	r2, [r3, #0]
      }
      /* Clear the half transfer complete flag */
      hdma->DmaBaseAddress->IFCR = DMA_ISR_HTIF1 << (hdma->ChannelIndex & 0x1cU);
 800cabe:	687b      	ldr	r3, [r7, #4]
 800cac0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cac2:	221c      	movs	r2, #28
 800cac4:	401a      	ands	r2, r3
 800cac6:	687b      	ldr	r3, [r7, #4]
 800cac8:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800caca:	2104      	movs	r1, #4
 800cacc:	4091      	lsls	r1, r2
 800cace:	000a      	movs	r2, r1
 800cad0:	605a      	str	r2, [r3, #4]

      /* DMA peripheral state is not updated in Half Transfer */
      /* but in Transfer Complete case */

     if(hdma->XferHalfCpltCallback != NULL)
 800cad2:	687b      	ldr	r3, [r7, #4]
 800cad4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cad6:	2b00      	cmp	r3, #0
 800cad8:	d100      	bne.n	800cadc <HAL_DMA_IRQHandler+0x6e>
 800cada:	e071      	b.n	800cbc0 <HAL_DMA_IRQHandler+0x152>
      {
        /* Half transfer callback */
        hdma->XferHalfCpltCallback(hdma);
 800cadc:	687b      	ldr	r3, [r7, #4]
 800cade:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800cae0:	687a      	ldr	r2, [r7, #4]
 800cae2:	0010      	movs	r0, r2
 800cae4:	4798      	blx	r3
     if(hdma->XferHalfCpltCallback != NULL)
 800cae6:	e06b      	b.n	800cbc0 <HAL_DMA_IRQHandler+0x152>
      }
  }

  /* Transfer Complete Interrupt management ***********************************/
  else if ((0U != (flag_it & (DMA_FLAG_TC1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TC)))
 800cae8:	687b      	ldr	r3, [r7, #4]
 800caea:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800caec:	221c      	movs	r2, #28
 800caee:	4013      	ands	r3, r2
 800caf0:	2202      	movs	r2, #2
 800caf2:	409a      	lsls	r2, r3
 800caf4:	0013      	movs	r3, r2
 800caf6:	68fa      	ldr	r2, [r7, #12]
 800caf8:	4013      	ands	r3, r2
 800cafa:	d02d      	beq.n	800cb58 <HAL_DMA_IRQHandler+0xea>
 800cafc:	68bb      	ldr	r3, [r7, #8]
 800cafe:	2202      	movs	r2, #2
 800cb00:	4013      	ands	r3, r2
 800cb02:	d029      	beq.n	800cb58 <HAL_DMA_IRQHandler+0xea>
  {
    if((hdma->Instance->CCR & DMA_CCR_CIRC) == 0U)
 800cb04:	687b      	ldr	r3, [r7, #4]
 800cb06:	681b      	ldr	r3, [r3, #0]
 800cb08:	681b      	ldr	r3, [r3, #0]
 800cb0a:	2220      	movs	r2, #32
 800cb0c:	4013      	ands	r3, r2
 800cb0e:	d10b      	bne.n	800cb28 <HAL_DMA_IRQHandler+0xba>
    {
      /* Disable the transfer complete and error interrupt */
      __HAL_DMA_DISABLE_IT(hdma, DMA_IT_TE | DMA_IT_TC);
 800cb10:	687b      	ldr	r3, [r7, #4]
 800cb12:	681b      	ldr	r3, [r3, #0]
 800cb14:	681a      	ldr	r2, [r3, #0]
 800cb16:	687b      	ldr	r3, [r7, #4]
 800cb18:	681b      	ldr	r3, [r3, #0]
 800cb1a:	210a      	movs	r1, #10
 800cb1c:	438a      	bics	r2, r1
 800cb1e:	601a      	str	r2, [r3, #0]

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800cb20:	687b      	ldr	r3, [r7, #4]
 800cb22:	2225      	movs	r2, #37	@ 0x25
 800cb24:	2101      	movs	r1, #1
 800cb26:	5499      	strb	r1, [r3, r2]
    }
    /* Clear the transfer complete flag */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_TCIF1 << (hdma->ChannelIndex & 0x1cU));
 800cb28:	687b      	ldr	r3, [r7, #4]
 800cb2a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cb2c:	221c      	movs	r2, #28
 800cb2e:	401a      	ands	r2, r3
 800cb30:	687b      	ldr	r3, [r7, #4]
 800cb32:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb34:	2102      	movs	r1, #2
 800cb36:	4091      	lsls	r1, r2
 800cb38:	000a      	movs	r2, r1
 800cb3a:	605a      	str	r2, [r3, #4]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800cb3c:	687b      	ldr	r3, [r7, #4]
 800cb3e:	2224      	movs	r2, #36	@ 0x24
 800cb40:	2100      	movs	r1, #0
 800cb42:	5499      	strb	r1, [r3, r2]

    if(hdma->XferCpltCallback != NULL)
 800cb44:	687b      	ldr	r3, [r7, #4]
 800cb46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb48:	2b00      	cmp	r3, #0
 800cb4a:	d039      	beq.n	800cbc0 <HAL_DMA_IRQHandler+0x152>
    {
      /* Transfer complete callback */
      hdma->XferCpltCallback(hdma);
 800cb4c:	687b      	ldr	r3, [r7, #4]
 800cb4e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800cb50:	687a      	ldr	r2, [r7, #4]
 800cb52:	0010      	movs	r0, r2
 800cb54:	4798      	blx	r3
    if(hdma->XferCpltCallback != NULL)
 800cb56:	e033      	b.n	800cbc0 <HAL_DMA_IRQHandler+0x152>
    }
  }

  /* Transfer Error Interrupt management **************************************/
  else if ((0U != (flag_it & (DMA_FLAG_TE1 << (hdma->ChannelIndex & 0x1cU)))) && (0U != (source_it & DMA_IT_TE)))
 800cb58:	687b      	ldr	r3, [r7, #4]
 800cb5a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cb5c:	221c      	movs	r2, #28
 800cb5e:	4013      	ands	r3, r2
 800cb60:	2208      	movs	r2, #8
 800cb62:	409a      	lsls	r2, r3
 800cb64:	0013      	movs	r3, r2
 800cb66:	68fa      	ldr	r2, [r7, #12]
 800cb68:	4013      	ands	r3, r2
 800cb6a:	d02a      	beq.n	800cbc2 <HAL_DMA_IRQHandler+0x154>
 800cb6c:	68bb      	ldr	r3, [r7, #8]
 800cb6e:	2208      	movs	r2, #8
 800cb70:	4013      	ands	r3, r2
 800cb72:	d026      	beq.n	800cbc2 <HAL_DMA_IRQHandler+0x154>
  {
    /* When a DMA transfer error occurs */
    /* A hardware clear of its EN bits is performed */
    /* Disable ALL DMA IT */
    __HAL_DMA_DISABLE_IT(hdma, (DMA_IT_TC | DMA_IT_HT | DMA_IT_TE));
 800cb74:	687b      	ldr	r3, [r7, #4]
 800cb76:	681b      	ldr	r3, [r3, #0]
 800cb78:	681a      	ldr	r2, [r3, #0]
 800cb7a:	687b      	ldr	r3, [r7, #4]
 800cb7c:	681b      	ldr	r3, [r3, #0]
 800cb7e:	210e      	movs	r1, #14
 800cb80:	438a      	bics	r2, r1
 800cb82:	601a      	str	r2, [r3, #0]

    /* Clear all flags */
    hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800cb84:	687b      	ldr	r3, [r7, #4]
 800cb86:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cb88:	221c      	movs	r2, #28
 800cb8a:	401a      	ands	r2, r3
 800cb8c:	687b      	ldr	r3, [r7, #4]
 800cb8e:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cb90:	2101      	movs	r1, #1
 800cb92:	4091      	lsls	r1, r2
 800cb94:	000a      	movs	r2, r1
 800cb96:	605a      	str	r2, [r3, #4]

    /* Update error code */
    hdma->ErrorCode = HAL_DMA_ERROR_TE;
 800cb98:	687b      	ldr	r3, [r7, #4]
 800cb9a:	2201      	movs	r2, #1
 800cb9c:	63da      	str	r2, [r3, #60]	@ 0x3c

    /* Change the DMA state */
    hdma->State = HAL_DMA_STATE_READY;
 800cb9e:	687b      	ldr	r3, [r7, #4]
 800cba0:	2225      	movs	r2, #37	@ 0x25
 800cba2:	2101      	movs	r1, #1
 800cba4:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800cba6:	687b      	ldr	r3, [r7, #4]
 800cba8:	2224      	movs	r2, #36	@ 0x24
 800cbaa:	2100      	movs	r1, #0
 800cbac:	5499      	strb	r1, [r3, r2]

    if (hdma->XferErrorCallback != NULL)
 800cbae:	687b      	ldr	r3, [r7, #4]
 800cbb0:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cbb2:	2b00      	cmp	r3, #0
 800cbb4:	d005      	beq.n	800cbc2 <HAL_DMA_IRQHandler+0x154>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800cbb6:	687b      	ldr	r3, [r7, #4]
 800cbb8:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800cbba:	687a      	ldr	r2, [r7, #4]
 800cbbc:	0010      	movs	r0, r2
 800cbbe:	4798      	blx	r3
  }
  else
  {
    /* Nothing To Do */
  }
  return;
 800cbc0:	46c0      	nop			@ (mov r8, r8)
 800cbc2:	46c0      	nop			@ (mov r8, r8)
}
 800cbc4:	46bd      	mov	sp, r7
 800cbc6:	b004      	add	sp, #16
 800cbc8:	bd80      	pop	{r7, pc}

0800cbca <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Channel.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 800cbca:	b580      	push	{r7, lr}
 800cbcc:	b082      	sub	sp, #8
 800cbce:	af00      	add	r7, sp, #0
 800cbd0:	6078      	str	r0, [r7, #4]
  /* Return DMA handle state */
  return hdma->State;
 800cbd2:	687b      	ldr	r3, [r7, #4]
 800cbd4:	2225      	movs	r2, #37	@ 0x25
 800cbd6:	5c9b      	ldrb	r3, [r3, r2]
 800cbd8:	b2db      	uxtb	r3, r3
}
 800cbda:	0018      	movs	r0, r3
 800cbdc:	46bd      	mov	sp, r7
 800cbde:	b002      	add	sp, #8
 800cbe0:	bd80      	pop	{r7, pc}

0800cbe2 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The amount of data items to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800cbe2:	b580      	push	{r7, lr}
 800cbe4:	b084      	sub	sp, #16
 800cbe6:	af00      	add	r7, sp, #0
 800cbe8:	60f8      	str	r0, [r7, #12]
 800cbea:	60b9      	str	r1, [r7, #8]
 800cbec:	607a      	str	r2, [r7, #4]
 800cbee:	603b      	str	r3, [r7, #0]
  /* Clear all flags */
  hdma->DmaBaseAddress->IFCR = (DMA_ISR_GIF1 << (hdma->ChannelIndex & 0x1cU));
 800cbf0:	68fb      	ldr	r3, [r7, #12]
 800cbf2:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800cbf4:	221c      	movs	r2, #28
 800cbf6:	401a      	ands	r2, r3
 800cbf8:	68fb      	ldr	r3, [r7, #12]
 800cbfa:	6c1b      	ldr	r3, [r3, #64]	@ 0x40
 800cbfc:	2101      	movs	r1, #1
 800cbfe:	4091      	lsls	r1, r2
 800cc00:	000a      	movs	r2, r1
 800cc02:	605a      	str	r2, [r3, #4]

  /* Configure DMA Channel data length */
  hdma->Instance->CNDTR = DataLength;
 800cc04:	68fb      	ldr	r3, [r7, #12]
 800cc06:	681b      	ldr	r3, [r3, #0]
 800cc08:	683a      	ldr	r2, [r7, #0]
 800cc0a:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800cc0c:	68fb      	ldr	r3, [r7, #12]
 800cc0e:	689b      	ldr	r3, [r3, #8]
 800cc10:	2b10      	cmp	r3, #16
 800cc12:	d108      	bne.n	800cc26 <DMA_SetConfig+0x44>
  {
    /* Configure DMA Channel destination address */
    hdma->Instance->CPAR = DstAddress;
 800cc14:	68fb      	ldr	r3, [r7, #12]
 800cc16:	681b      	ldr	r3, [r3, #0]
 800cc18:	687a      	ldr	r2, [r7, #4]
 800cc1a:	609a      	str	r2, [r3, #8]

    /* Configure DMA Channel source address */
    hdma->Instance->CMAR = SrcAddress;
 800cc1c:	68fb      	ldr	r3, [r7, #12]
 800cc1e:	681b      	ldr	r3, [r3, #0]
 800cc20:	68ba      	ldr	r2, [r7, #8]
 800cc22:	60da      	str	r2, [r3, #12]
    hdma->Instance->CPAR = SrcAddress;

    /* Configure DMA Channel destination address */
    hdma->Instance->CMAR = DstAddress;
  }
}
 800cc24:	e007      	b.n	800cc36 <DMA_SetConfig+0x54>
    hdma->Instance->CPAR = SrcAddress;
 800cc26:	68fb      	ldr	r3, [r7, #12]
 800cc28:	681b      	ldr	r3, [r3, #0]
 800cc2a:	68ba      	ldr	r2, [r7, #8]
 800cc2c:	609a      	str	r2, [r3, #8]
    hdma->Instance->CMAR = DstAddress;
 800cc2e:	68fb      	ldr	r3, [r7, #12]
 800cc30:	681b      	ldr	r3, [r3, #0]
 800cc32:	687a      	ldr	r2, [r7, #4]
 800cc34:	60da      	str	r2, [r3, #12]
}
 800cc36:	46c0      	nop			@ (mov r8, r8)
 800cc38:	46bd      	mov	sp, r7
 800cc3a:	b004      	add	sp, #16
 800cc3c:	bd80      	pop	{r7, pc}
	...

0800cc40 <FLASH_WaitForLastOperation>:
  * @brief  Wait for a FLASH operation to complete.
  * @param  Timeout  maximum flash operation timeout
  * @retval HAL Status
  */
HAL_StatusTypeDef FLASH_WaitForLastOperation(uint32_t Timeout)
{
 800cc40:	b580      	push	{r7, lr}
 800cc42:	b084      	sub	sp, #16
 800cc44:	af00      	add	r7, sp, #0
 800cc46:	6078      	str	r0, [r7, #4]
  /* Wait for the FLASH operation to complete by polling on BUSY flag to be reset.
     Even if the FLASH operation fails, the BUSY flag will be reset and an error
     flag will be set */
     
  uint32_t tickstart = HAL_GetTick();
 800cc48:	f7ff f904 	bl	800be54 <HAL_GetTick>
 800cc4c:	0003      	movs	r3, r0
 800cc4e:	60fb      	str	r3, [r7, #12]
     
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800cc50:	e00f      	b.n	800cc72 <FLASH_WaitForLastOperation+0x32>
  { 
    if (Timeout != HAL_MAX_DELAY)
 800cc52:	687b      	ldr	r3, [r7, #4]
 800cc54:	3301      	adds	r3, #1
 800cc56:	d00c      	beq.n	800cc72 <FLASH_WaitForLastOperation+0x32>
    {
      if((Timeout == 0U) || ((HAL_GetTick()-tickstart) > Timeout))
 800cc58:	687b      	ldr	r3, [r7, #4]
 800cc5a:	2b00      	cmp	r3, #0
 800cc5c:	d007      	beq.n	800cc6e <FLASH_WaitForLastOperation+0x2e>
 800cc5e:	f7ff f8f9 	bl	800be54 <HAL_GetTick>
 800cc62:	0002      	movs	r2, r0
 800cc64:	68fb      	ldr	r3, [r7, #12]
 800cc66:	1ad3      	subs	r3, r2, r3
 800cc68:	687a      	ldr	r2, [r7, #4]
 800cc6a:	429a      	cmp	r2, r3
 800cc6c:	d201      	bcs.n	800cc72 <FLASH_WaitForLastOperation+0x32>
      {
        return HAL_TIMEOUT;
 800cc6e:	2303      	movs	r3, #3
 800cc70:	e052      	b.n	800cd18 <FLASH_WaitForLastOperation+0xd8>
  while(__HAL_FLASH_GET_FLAG(FLASH_FLAG_BSY)) 
 800cc72:	4b2b      	ldr	r3, [pc, #172]	@ (800cd20 <FLASH_WaitForLastOperation+0xe0>)
 800cc74:	699b      	ldr	r3, [r3, #24]
 800cc76:	2201      	movs	r2, #1
 800cc78:	4013      	ands	r3, r2
 800cc7a:	2b01      	cmp	r3, #1
 800cc7c:	d0e9      	beq.n	800cc52 <FLASH_WaitForLastOperation+0x12>
      }
    }
  }
  
  /* Check FLASH End of Operation flag  */
  if (__HAL_FLASH_GET_FLAG(FLASH_FLAG_EOP))
 800cc7e:	4b28      	ldr	r3, [pc, #160]	@ (800cd20 <FLASH_WaitForLastOperation+0xe0>)
 800cc80:	699b      	ldr	r3, [r3, #24]
 800cc82:	2202      	movs	r2, #2
 800cc84:	4013      	ands	r3, r2
 800cc86:	2b02      	cmp	r3, #2
 800cc88:	d102      	bne.n	800cc90 <FLASH_WaitForLastOperation+0x50>
  {
    /* Clear FLASH End of Operation pending bit */
    __HAL_FLASH_CLEAR_FLAG(FLASH_FLAG_EOP);
 800cc8a:	4b25      	ldr	r3, [pc, #148]	@ (800cd20 <FLASH_WaitForLastOperation+0xe0>)
 800cc8c:	2202      	movs	r2, #2
 800cc8e:	619a      	str	r2, [r3, #24]
  }
  
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800cc90:	4b23      	ldr	r3, [pc, #140]	@ (800cd20 <FLASH_WaitForLastOperation+0xe0>)
 800cc92:	699a      	ldr	r2, [r3, #24]
 800cc94:	2380      	movs	r3, #128	@ 0x80
 800cc96:	005b      	lsls	r3, r3, #1
 800cc98:	401a      	ands	r2, r3
 800cc9a:	2380      	movs	r3, #128	@ 0x80
 800cc9c:	005b      	lsls	r3, r3, #1
 800cc9e:	429a      	cmp	r2, r3
 800cca0:	d035      	beq.n	800cd0e <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800cca2:	4b1f      	ldr	r3, [pc, #124]	@ (800cd20 <FLASH_WaitForLastOperation+0xe0>)
 800cca4:	699a      	ldr	r2, [r3, #24]
 800cca6:	2380      	movs	r3, #128	@ 0x80
 800cca8:	009b      	lsls	r3, r3, #2
 800ccaa:	401a      	ands	r2, r3
  if( __HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR)     || 
 800ccac:	2380      	movs	r3, #128	@ 0x80
 800ccae:	009b      	lsls	r3, r3, #2
 800ccb0:	429a      	cmp	r2, r3
 800ccb2:	d02c      	beq.n	800cd0e <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800ccb4:	4b1a      	ldr	r3, [pc, #104]	@ (800cd20 <FLASH_WaitForLastOperation+0xe0>)
 800ccb6:	699a      	ldr	r2, [r3, #24]
 800ccb8:	2380      	movs	r3, #128	@ 0x80
 800ccba:	00db      	lsls	r3, r3, #3
 800ccbc:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR)     || 
 800ccbe:	2380      	movs	r3, #128	@ 0x80
 800ccc0:	00db      	lsls	r3, r3, #3
 800ccc2:	429a      	cmp	r2, r3
 800ccc4:	d023      	beq.n	800cd0e <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800ccc6:	4b16      	ldr	r3, [pc, #88]	@ (800cd20 <FLASH_WaitForLastOperation+0xe0>)
 800ccc8:	699a      	ldr	r2, [r3, #24]
 800ccca:	2380      	movs	r3, #128	@ 0x80
 800cccc:	011b      	lsls	r3, r3, #4
 800ccce:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR)     || 
 800ccd0:	2380      	movs	r3, #128	@ 0x80
 800ccd2:	011b      	lsls	r3, r3, #4
 800ccd4:	429a      	cmp	r2, r3
 800ccd6:	d01a      	beq.n	800cd0e <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800ccd8:	4b11      	ldr	r3, [pc, #68]	@ (800cd20 <FLASH_WaitForLastOperation+0xe0>)
 800ccda:	699a      	ldr	r2, [r3, #24]
 800ccdc:	2380      	movs	r3, #128	@ 0x80
 800ccde:	019b      	lsls	r3, r3, #6
 800cce0:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR)    || 
 800cce2:	2380      	movs	r3, #128	@ 0x80
 800cce4:	019b      	lsls	r3, r3, #6
 800cce6:	429a      	cmp	r2, r3
 800cce8:	d011      	beq.n	800cd0e <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 800ccea:	4b0d      	ldr	r3, [pc, #52]	@ (800cd20 <FLASH_WaitForLastOperation+0xe0>)
 800ccec:	699a      	ldr	r2, [r3, #24]
 800ccee:	2380      	movs	r3, #128	@ 0x80
 800ccf0:	029b      	lsls	r3, r3, #10
 800ccf2:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR)      || 
 800ccf4:	2380      	movs	r3, #128	@ 0x80
 800ccf6:	029b      	lsls	r3, r3, #10
 800ccf8:	429a      	cmp	r2, r3
 800ccfa:	d008      	beq.n	800cd0e <FLASH_WaitForLastOperation+0xce>
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR) )
 800ccfc:	4b08      	ldr	r3, [pc, #32]	@ (800cd20 <FLASH_WaitForLastOperation+0xe0>)
 800ccfe:	699a      	ldr	r2, [r3, #24]
 800cd00:	2380      	movs	r3, #128	@ 0x80
 800cd02:	025b      	lsls	r3, r3, #9
 800cd04:	401a      	ands	r2, r3
      __HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR)     || 
 800cd06:	2380      	movs	r3, #128	@ 0x80
 800cd08:	025b      	lsls	r3, r3, #9
 800cd0a:	429a      	cmp	r2, r3
 800cd0c:	d103      	bne.n	800cd16 <FLASH_WaitForLastOperation+0xd6>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    FLASH_SetErrorCode();
 800cd0e:	f000 f809 	bl	800cd24 <FLASH_SetErrorCode>
    return HAL_ERROR;
 800cd12:	2301      	movs	r3, #1
 800cd14:	e000      	b.n	800cd18 <FLASH_WaitForLastOperation+0xd8>
  }

  /* There is no error flag set */
  return HAL_OK;
 800cd16:	2300      	movs	r3, #0
}
 800cd18:	0018      	movs	r0, r3
 800cd1a:	46bd      	mov	sp, r7
 800cd1c:	b004      	add	sp, #16
 800cd1e:	bd80      	pop	{r7, pc}
 800cd20:	40022000 	.word	0x40022000

0800cd24 <FLASH_SetErrorCode>:
/**
  * @brief  Set the specific FLASH error flag.
  * @retval None
  */
static void FLASH_SetErrorCode(void)
{
 800cd24:	b580      	push	{r7, lr}
 800cd26:	b082      	sub	sp, #8
 800cd28:	af00      	add	r7, sp, #0
  uint32_t flags = 0;
 800cd2a:	2300      	movs	r3, #0
 800cd2c:	607b      	str	r3, [r7, #4]
  
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_WRPERR))
 800cd2e:	4b49      	ldr	r3, [pc, #292]	@ (800ce54 <FLASH_SetErrorCode+0x130>)
 800cd30:	699a      	ldr	r2, [r3, #24]
 800cd32:	2380      	movs	r3, #128	@ 0x80
 800cd34:	005b      	lsls	r3, r3, #1
 800cd36:	401a      	ands	r2, r3
 800cd38:	2380      	movs	r3, #128	@ 0x80
 800cd3a:	005b      	lsls	r3, r3, #1
 800cd3c:	429a      	cmp	r2, r3
 800cd3e:	d10a      	bne.n	800cd56 <FLASH_SetErrorCode+0x32>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_WRP;
 800cd40:	4b45      	ldr	r3, [pc, #276]	@ (800ce58 <FLASH_SetErrorCode+0x134>)
 800cd42:	695b      	ldr	r3, [r3, #20]
 800cd44:	2202      	movs	r2, #2
 800cd46:	431a      	orrs	r2, r3
 800cd48:	4b43      	ldr	r3, [pc, #268]	@ (800ce58 <FLASH_SetErrorCode+0x134>)
 800cd4a:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_WRPERR;
 800cd4c:	687b      	ldr	r3, [r7, #4]
 800cd4e:	2280      	movs	r2, #128	@ 0x80
 800cd50:	0052      	lsls	r2, r2, #1
 800cd52:	4313      	orrs	r3, r2
 800cd54:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_PGAERR))
 800cd56:	4b3f      	ldr	r3, [pc, #252]	@ (800ce54 <FLASH_SetErrorCode+0x130>)
 800cd58:	699a      	ldr	r2, [r3, #24]
 800cd5a:	2380      	movs	r3, #128	@ 0x80
 800cd5c:	009b      	lsls	r3, r3, #2
 800cd5e:	401a      	ands	r2, r3
 800cd60:	2380      	movs	r3, #128	@ 0x80
 800cd62:	009b      	lsls	r3, r3, #2
 800cd64:	429a      	cmp	r2, r3
 800cd66:	d10a      	bne.n	800cd7e <FLASH_SetErrorCode+0x5a>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_PGA;
 800cd68:	4b3b      	ldr	r3, [pc, #236]	@ (800ce58 <FLASH_SetErrorCode+0x134>)
 800cd6a:	695b      	ldr	r3, [r3, #20]
 800cd6c:	2201      	movs	r2, #1
 800cd6e:	431a      	orrs	r2, r3
 800cd70:	4b39      	ldr	r3, [pc, #228]	@ (800ce58 <FLASH_SetErrorCode+0x134>)
 800cd72:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_PGAERR;
 800cd74:	687b      	ldr	r3, [r7, #4]
 800cd76:	2280      	movs	r2, #128	@ 0x80
 800cd78:	0092      	lsls	r2, r2, #2
 800cd7a:	4313      	orrs	r3, r2
 800cd7c:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_SIZERR))
 800cd7e:	4b35      	ldr	r3, [pc, #212]	@ (800ce54 <FLASH_SetErrorCode+0x130>)
 800cd80:	699a      	ldr	r2, [r3, #24]
 800cd82:	2380      	movs	r3, #128	@ 0x80
 800cd84:	00db      	lsls	r3, r3, #3
 800cd86:	401a      	ands	r2, r3
 800cd88:	2380      	movs	r3, #128	@ 0x80
 800cd8a:	00db      	lsls	r3, r3, #3
 800cd8c:	429a      	cmp	r2, r3
 800cd8e:	d10a      	bne.n	800cda6 <FLASH_SetErrorCode+0x82>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_SIZE;
 800cd90:	4b31      	ldr	r3, [pc, #196]	@ (800ce58 <FLASH_SetErrorCode+0x134>)
 800cd92:	695b      	ldr	r3, [r3, #20]
 800cd94:	2208      	movs	r2, #8
 800cd96:	431a      	orrs	r2, r3
 800cd98:	4b2f      	ldr	r3, [pc, #188]	@ (800ce58 <FLASH_SetErrorCode+0x134>)
 800cd9a:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_SIZERR;
 800cd9c:	687b      	ldr	r3, [r7, #4]
 800cd9e:	2280      	movs	r2, #128	@ 0x80
 800cda0:	00d2      	lsls	r2, r2, #3
 800cda2:	4313      	orrs	r3, r2
 800cda4:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_OPTVERR))
 800cda6:	4b2b      	ldr	r3, [pc, #172]	@ (800ce54 <FLASH_SetErrorCode+0x130>)
 800cda8:	699a      	ldr	r2, [r3, #24]
 800cdaa:	2380      	movs	r3, #128	@ 0x80
 800cdac:	011b      	lsls	r3, r3, #4
 800cdae:	401a      	ands	r2, r3
 800cdb0:	2380      	movs	r3, #128	@ 0x80
 800cdb2:	011b      	lsls	r3, r3, #4
 800cdb4:	429a      	cmp	r2, r3
 800cdb6:	d10a      	bne.n	800cdce <FLASH_SetErrorCode+0xaa>
     *           cut of the STM32L031xx device or the first cut of the STM32L041xx
     *           device, this error should be ignored. The revId of the device
     *           can be retrieved via the HAL_GetREVID() function.
     *
     */
    pFlash.ErrorCode |= HAL_FLASH_ERROR_OPTV;
 800cdb8:	4b27      	ldr	r3, [pc, #156]	@ (800ce58 <FLASH_SetErrorCode+0x134>)
 800cdba:	695b      	ldr	r3, [r3, #20]
 800cdbc:	2204      	movs	r2, #4
 800cdbe:	431a      	orrs	r2, r3
 800cdc0:	4b25      	ldr	r3, [pc, #148]	@ (800ce58 <FLASH_SetErrorCode+0x134>)
 800cdc2:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_OPTVERR;
 800cdc4:	687b      	ldr	r3, [r7, #4]
 800cdc6:	2280      	movs	r2, #128	@ 0x80
 800cdc8:	0112      	lsls	r2, r2, #4
 800cdca:	4313      	orrs	r3, r2
 800cdcc:	607b      	str	r3, [r7, #4]
  }

  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_RDERR))
 800cdce:	4b21      	ldr	r3, [pc, #132]	@ (800ce54 <FLASH_SetErrorCode+0x130>)
 800cdd0:	699a      	ldr	r2, [r3, #24]
 800cdd2:	2380      	movs	r3, #128	@ 0x80
 800cdd4:	019b      	lsls	r3, r3, #6
 800cdd6:	401a      	ands	r2, r3
 800cdd8:	2380      	movs	r3, #128	@ 0x80
 800cdda:	019b      	lsls	r3, r3, #6
 800cddc:	429a      	cmp	r2, r3
 800cdde:	d10a      	bne.n	800cdf6 <FLASH_SetErrorCode+0xd2>
  {
    pFlash.ErrorCode |= HAL_FLASH_ERROR_RD;
 800cde0:	4b1d      	ldr	r3, [pc, #116]	@ (800ce58 <FLASH_SetErrorCode+0x134>)
 800cde2:	695b      	ldr	r3, [r3, #20]
 800cde4:	2210      	movs	r2, #16
 800cde6:	431a      	orrs	r2, r3
 800cde8:	4b1b      	ldr	r3, [pc, #108]	@ (800ce58 <FLASH_SetErrorCode+0x134>)
 800cdea:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_RDERR;
 800cdec:	687b      	ldr	r3, [r7, #4]
 800cdee:	2280      	movs	r2, #128	@ 0x80
 800cdf0:	0192      	lsls	r2, r2, #6
 800cdf2:	4313      	orrs	r3, r2
 800cdf4:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_FWWERR))
 800cdf6:	4b17      	ldr	r3, [pc, #92]	@ (800ce54 <FLASH_SetErrorCode+0x130>)
 800cdf8:	699a      	ldr	r2, [r3, #24]
 800cdfa:	2380      	movs	r3, #128	@ 0x80
 800cdfc:	029b      	lsls	r3, r3, #10
 800cdfe:	401a      	ands	r2, r3
 800ce00:	2380      	movs	r3, #128	@ 0x80
 800ce02:	029b      	lsls	r3, r3, #10
 800ce04:	429a      	cmp	r2, r3
 800ce06:	d109      	bne.n	800ce1c <FLASH_SetErrorCode+0xf8>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_FWWERR;
 800ce08:	4b13      	ldr	r3, [pc, #76]	@ (800ce58 <FLASH_SetErrorCode+0x134>)
 800ce0a:	695b      	ldr	r3, [r3, #20]
 800ce0c:	2220      	movs	r2, #32
 800ce0e:	431a      	orrs	r2, r3
 800ce10:	4b11      	ldr	r3, [pc, #68]	@ (800ce58 <FLASH_SetErrorCode+0x134>)
 800ce12:	615a      	str	r2, [r3, #20]
    flags |= HAL_FLASH_ERROR_FWWERR;
 800ce14:	687b      	ldr	r3, [r7, #4]
 800ce16:	2220      	movs	r2, #32
 800ce18:	4313      	orrs	r3, r2
 800ce1a:	607b      	str	r3, [r7, #4]
  }
  if(__HAL_FLASH_GET_FLAG(FLASH_FLAG_NOTZEROERR))
 800ce1c:	4b0d      	ldr	r3, [pc, #52]	@ (800ce54 <FLASH_SetErrorCode+0x130>)
 800ce1e:	699a      	ldr	r2, [r3, #24]
 800ce20:	2380      	movs	r3, #128	@ 0x80
 800ce22:	025b      	lsls	r3, r3, #9
 800ce24:	401a      	ands	r2, r3
 800ce26:	2380      	movs	r3, #128	@ 0x80
 800ce28:	025b      	lsls	r3, r3, #9
 800ce2a:	429a      	cmp	r2, r3
 800ce2c:	d10a      	bne.n	800ce44 <FLASH_SetErrorCode+0x120>
  { 
    pFlash.ErrorCode |= HAL_FLASH_ERROR_NOTZERO;
 800ce2e:	4b0a      	ldr	r3, [pc, #40]	@ (800ce58 <FLASH_SetErrorCode+0x134>)
 800ce30:	695b      	ldr	r3, [r3, #20]
 800ce32:	2240      	movs	r2, #64	@ 0x40
 800ce34:	431a      	orrs	r2, r3
 800ce36:	4b08      	ldr	r3, [pc, #32]	@ (800ce58 <FLASH_SetErrorCode+0x134>)
 800ce38:	615a      	str	r2, [r3, #20]
    flags |= FLASH_FLAG_NOTZEROERR;
 800ce3a:	687b      	ldr	r3, [r7, #4]
 800ce3c:	2280      	movs	r2, #128	@ 0x80
 800ce3e:	0252      	lsls	r2, r2, #9
 800ce40:	4313      	orrs	r3, r2
 800ce42:	607b      	str	r3, [r7, #4]
  }

  /* Clear FLASH error pending bits */
  __HAL_FLASH_CLEAR_FLAG(flags);
 800ce44:	4b03      	ldr	r3, [pc, #12]	@ (800ce54 <FLASH_SetErrorCode+0x130>)
 800ce46:	687a      	ldr	r2, [r7, #4]
 800ce48:	619a      	str	r2, [r3, #24]
}  
 800ce4a:	46c0      	nop			@ (mov r8, r8)
 800ce4c:	46bd      	mov	sp, r7
 800ce4e:	b002      	add	sp, #8
 800ce50:	bd80      	pop	{r7, pc}
 800ce52:	46c0      	nop			@ (mov r8, r8)
 800ce54:	40022000 	.word	0x40022000
 800ce58:	200024c0 	.word	0x200024c0

0800ce5c <HAL_FLASHEx_DATAEEPROM_Unlock>:
/**
  * @brief  Unlocks the data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Unlock(void)
{
 800ce5c:	b580      	push	{r7, lr}
 800ce5e:	b084      	sub	sp, #16
 800ce60:	af00      	add	r7, sp, #0
  uint32_t primask_bit;

  if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800ce62:	4b12      	ldr	r3, [pc, #72]	@ (800ceac <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800ce64:	685b      	ldr	r3, [r3, #4]
 800ce66:	2201      	movs	r2, #1
 800ce68:	4013      	ands	r3, r2
 800ce6a:	d019      	beq.n	800cea0 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 800ce6c:	f3ef 8310 	mrs	r3, PRIMASK
 800ce70:	607b      	str	r3, [r7, #4]
  return(result);
 800ce72:	687b      	ldr	r3, [r7, #4]
  {  
    /* Disable interrupts to avoid any interruption during unlock sequence */
    primask_bit = __get_PRIMASK();
 800ce74:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("cpsid i" : : : "memory");
 800ce76:	b672      	cpsid	i
}
 800ce78:	46c0      	nop			@ (mov r8, r8)
    __disable_irq();

    /* Unlocking the Data memory and FLASH_PECR register access*/
    FLASH->PEKEYR = FLASH_PEKEY1;
 800ce7a:	4b0c      	ldr	r3, [pc, #48]	@ (800ceac <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800ce7c:	4a0c      	ldr	r2, [pc, #48]	@ (800ceb0 <HAL_FLASHEx_DATAEEPROM_Unlock+0x54>)
 800ce7e:	60da      	str	r2, [r3, #12]
    FLASH->PEKEYR = FLASH_PEKEY2;
 800ce80:	4b0a      	ldr	r3, [pc, #40]	@ (800ceac <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800ce82:	4a0c      	ldr	r2, [pc, #48]	@ (800ceb4 <HAL_FLASHEx_DATAEEPROM_Unlock+0x58>)
 800ce84:	60da      	str	r2, [r3, #12]
 800ce86:	68fb      	ldr	r3, [r7, #12]
 800ce88:	60bb      	str	r3, [r7, #8]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 800ce8a:	68bb      	ldr	r3, [r7, #8]
 800ce8c:	f383 8810 	msr	PRIMASK, r3
}
 800ce90:	46c0      	nop			@ (mov r8, r8)

    /* Re-enable the interrupts: restore previous priority mask */
    __set_PRIMASK(primask_bit);

    if((FLASH->PECR & FLASH_PECR_PELOCK) != RESET)
 800ce92:	4b06      	ldr	r3, [pc, #24]	@ (800ceac <HAL_FLASHEx_DATAEEPROM_Unlock+0x50>)
 800ce94:	685b      	ldr	r3, [r3, #4]
 800ce96:	2201      	movs	r2, #1
 800ce98:	4013      	ands	r3, r2
 800ce9a:	d001      	beq.n	800cea0 <HAL_FLASHEx_DATAEEPROM_Unlock+0x44>
    {
      return HAL_ERROR;
 800ce9c:	2301      	movs	r3, #1
 800ce9e:	e000      	b.n	800cea2 <HAL_FLASHEx_DATAEEPROM_Unlock+0x46>
    }
  }

  return HAL_OK;  
 800cea0:	2300      	movs	r3, #0
}
 800cea2:	0018      	movs	r0, r3
 800cea4:	46bd      	mov	sp, r7
 800cea6:	b004      	add	sp, #16
 800cea8:	bd80      	pop	{r7, pc}
 800ceaa:	46c0      	nop			@ (mov r8, r8)
 800ceac:	40022000 	.word	0x40022000
 800ceb0:	89abcdef 	.word	0x89abcdef
 800ceb4:	02030405 	.word	0x02030405

0800ceb8 <HAL_FLASHEx_DATAEEPROM_Lock>:
/**
  * @brief  Locks the Data memory and FLASH_PECR register access.
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Lock(void)
{
 800ceb8:	b580      	push	{r7, lr}
 800ceba:	af00      	add	r7, sp, #0
  /* Set the PELOCK Bit to lock the data memory and FLASH_PECR register access */
  SET_BIT(FLASH->PECR, FLASH_PECR_PELOCK);
 800cebc:	4b04      	ldr	r3, [pc, #16]	@ (800ced0 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 800cebe:	685a      	ldr	r2, [r3, #4]
 800cec0:	4b03      	ldr	r3, [pc, #12]	@ (800ced0 <HAL_FLASHEx_DATAEEPROM_Lock+0x18>)
 800cec2:	2101      	movs	r1, #1
 800cec4:	430a      	orrs	r2, r1
 800cec6:	605a      	str	r2, [r3, #4]
  
  return HAL_OK;
 800cec8:	2300      	movs	r3, #0
}
 800ceca:	0018      	movs	r0, r3
 800cecc:	46bd      	mov	sp, r7
 800cece:	bd80      	pop	{r7, pc}
 800ced0:	40022000 	.word	0x40022000

0800ced4 <HAL_FLASHEx_DATAEEPROM_Erase>:
  *         and Flash program erase control register access(recommended to protect 
  *         the DATA_EEPROM against possible unwanted operation).
  * @retval HAL_StatusTypeDef HAL Status
  */
HAL_StatusTypeDef HAL_FLASHEx_DATAEEPROM_Erase(uint32_t Address)
{
 800ced4:	b5b0      	push	{r4, r5, r7, lr}
 800ced6:	b084      	sub	sp, #16
 800ced8:	af00      	add	r7, sp, #0
 800ceda:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800cedc:	250f      	movs	r5, #15
 800cede:	197b      	adds	r3, r7, r5
 800cee0:	2200      	movs	r2, #0
 800cee2:	701a      	strb	r2, [r3, #0]
  
  /* Check the parameters */
  assert_param(IS_FLASH_DATA_ADDRESS(Address));
  
  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800cee4:	197c      	adds	r4, r7, r5
 800cee6:	4b0f      	ldr	r3, [pc, #60]	@ (800cf24 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 800cee8:	0018      	movs	r0, r3
 800ceea:	f7ff fea9 	bl	800cc40 <FLASH_WaitForLastOperation>
 800ceee:	0003      	movs	r3, r0
 800cef0:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 800cef2:	0029      	movs	r1, r5
 800cef4:	187b      	adds	r3, r7, r1
 800cef6:	781b      	ldrb	r3, [r3, #0]
 800cef8:	2b00      	cmp	r3, #0
 800cefa:	d10c      	bne.n	800cf16 <HAL_FLASHEx_DATAEEPROM_Erase+0x42>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800cefc:	4b0a      	ldr	r3, [pc, #40]	@ (800cf28 <HAL_FLASHEx_DATAEEPROM_Erase+0x54>)
 800cefe:	2200      	movs	r2, #0
 800cf00:	615a      	str	r2, [r3, #20]

      /* Write 00000000h to valid address in the data memory */
      *(__IO uint32_t *) Address = 0x00000000U;
 800cf02:	687b      	ldr	r3, [r7, #4]
 800cf04:	2200      	movs	r2, #0
 800cf06:	601a      	str	r2, [r3, #0]

    status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800cf08:	187c      	adds	r4, r7, r1
 800cf0a:	4b06      	ldr	r3, [pc, #24]	@ (800cf24 <HAL_FLASHEx_DATAEEPROM_Erase+0x50>)
 800cf0c:	0018      	movs	r0, r3
 800cf0e:	f7ff fe97 	bl	800cc40 <FLASH_WaitForLastOperation>
 800cf12:	0003      	movs	r3, r0
 800cf14:	7023      	strb	r3, [r4, #0]
  }
   
  /* Return the erase status */
  return status;
 800cf16:	230f      	movs	r3, #15
 800cf18:	18fb      	adds	r3, r7, r3
 800cf1a:	781b      	ldrb	r3, [r3, #0]
}  
 800cf1c:	0018      	movs	r0, r3
 800cf1e:	46bd      	mov	sp, r7
 800cf20:	b004      	add	sp, #16
 800cf22:	bdb0      	pop	{r4, r5, r7, pc}
 800cf24:	0000c350 	.word	0x0000c350
 800cf28:	200024c0 	.word	0x200024c0

0800cf2c <HAL_FLASHEx_DATAEEPROM_Program>:
  * 
  * @retval HAL_StatusTypeDef HAL Status
  */

HAL_StatusTypeDef   HAL_FLASHEx_DATAEEPROM_Program(uint32_t TypeProgram, uint32_t Address, uint32_t Data)
{
 800cf2c:	b5b0      	push	{r4, r5, r7, lr}
 800cf2e:	b086      	sub	sp, #24
 800cf30:	af00      	add	r7, sp, #0
 800cf32:	60f8      	str	r0, [r7, #12]
 800cf34:	60b9      	str	r1, [r7, #8]
 800cf36:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 800cf38:	2317      	movs	r3, #23
 800cf3a:	18fb      	adds	r3, r7, r3
 800cf3c:	2201      	movs	r2, #1
 800cf3e:	701a      	strb	r2, [r3, #0]
  
  /* Process Locked */
  __HAL_LOCK(&pFlash);
 800cf40:	4b24      	ldr	r3, [pc, #144]	@ (800cfd4 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800cf42:	7c1b      	ldrb	r3, [r3, #16]
 800cf44:	2b01      	cmp	r3, #1
 800cf46:	d101      	bne.n	800cf4c <HAL_FLASHEx_DATAEEPROM_Program+0x20>
 800cf48:	2302      	movs	r3, #2
 800cf4a:	e03e      	b.n	800cfca <HAL_FLASHEx_DATAEEPROM_Program+0x9e>
 800cf4c:	4b21      	ldr	r3, [pc, #132]	@ (800cfd4 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800cf4e:	2201      	movs	r2, #1
 800cf50:	741a      	strb	r2, [r3, #16]
  /* Check the parameters */
  assert_param(IS_TYPEPROGRAMDATA(TypeProgram));
  assert_param(IS_FLASH_DATA_ADDRESS(Address));

  /* Wait for last operation to be completed */
  status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800cf52:	2517      	movs	r5, #23
 800cf54:	197c      	adds	r4, r7, r5
 800cf56:	4b20      	ldr	r3, [pc, #128]	@ (800cfd8 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 800cf58:	0018      	movs	r0, r3
 800cf5a:	f7ff fe71 	bl	800cc40 <FLASH_WaitForLastOperation>
 800cf5e:	0003      	movs	r3, r0
 800cf60:	7023      	strb	r3, [r4, #0]
  
  if(status == HAL_OK)
 800cf62:	197b      	adds	r3, r7, r5
 800cf64:	781b      	ldrb	r3, [r3, #0]
 800cf66:	2b00      	cmp	r3, #0
 800cf68:	d129      	bne.n	800cfbe <HAL_FLASHEx_DATAEEPROM_Program+0x92>
  {
    /* Clean the error context */
    pFlash.ErrorCode = HAL_FLASH_ERROR_NONE;
 800cf6a:	4b1a      	ldr	r3, [pc, #104]	@ (800cfd4 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800cf6c:	2200      	movs	r2, #0
 800cf6e:	615a      	str	r2, [r3, #20]

    if(TypeProgram == FLASH_TYPEPROGRAMDATA_WORD)
 800cf70:	68fb      	ldr	r3, [r7, #12]
 800cf72:	2b02      	cmp	r3, #2
 800cf74:	d103      	bne.n	800cf7e <HAL_FLASHEx_DATAEEPROM_Program+0x52>
    {
      /* Program word (32-bit) at a specified address.*/
      *(__IO uint32_t *)Address = Data;
 800cf76:	68bb      	ldr	r3, [r7, #8]
 800cf78:	687a      	ldr	r2, [r7, #4]
 800cf7a:	601a      	str	r2, [r3, #0]
 800cf7c:	e013      	b.n	800cfa6 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_HALFWORD)
 800cf7e:	68fb      	ldr	r3, [r7, #12]
 800cf80:	2b01      	cmp	r3, #1
 800cf82:	d104      	bne.n	800cf8e <HAL_FLASHEx_DATAEEPROM_Program+0x62>
    {
      /* Program halfword (16-bit) at a specified address.*/
      *(__IO uint16_t *)Address = (uint16_t) Data;
 800cf84:	68bb      	ldr	r3, [r7, #8]
 800cf86:	687a      	ldr	r2, [r7, #4]
 800cf88:	b292      	uxth	r2, r2
 800cf8a:	801a      	strh	r2, [r3, #0]
 800cf8c:	e00b      	b.n	800cfa6 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else if(TypeProgram == FLASH_TYPEPROGRAMDATA_BYTE)
 800cf8e:	68fb      	ldr	r3, [r7, #12]
 800cf90:	2b00      	cmp	r3, #0
 800cf92:	d104      	bne.n	800cf9e <HAL_FLASHEx_DATAEEPROM_Program+0x72>
    {
      /* Program byte (8-bit) at a specified address.*/
      *(__IO uint8_t *)Address = (uint8_t) Data;
 800cf94:	68bb      	ldr	r3, [r7, #8]
 800cf96:	687a      	ldr	r2, [r7, #4]
 800cf98:	b2d2      	uxtb	r2, r2
 800cf9a:	701a      	strb	r2, [r3, #0]
 800cf9c:	e003      	b.n	800cfa6 <HAL_FLASHEx_DATAEEPROM_Program+0x7a>
    }
    else
    {
      status = HAL_ERROR;
 800cf9e:	2317      	movs	r3, #23
 800cfa0:	18fb      	adds	r3, r7, r3
 800cfa2:	2201      	movs	r2, #1
 800cfa4:	701a      	strb	r2, [r3, #0]
    }

    if (status == HAL_OK)
 800cfa6:	2217      	movs	r2, #23
 800cfa8:	18bb      	adds	r3, r7, r2
 800cfaa:	781b      	ldrb	r3, [r3, #0]
 800cfac:	2b00      	cmp	r3, #0
 800cfae:	d106      	bne.n	800cfbe <HAL_FLASHEx_DATAEEPROM_Program+0x92>
    {
      /* Wait for last operation to be completed */
      status = FLASH_WaitForLastOperation(FLASH_TIMEOUT_VALUE);
 800cfb0:	18bc      	adds	r4, r7, r2
 800cfb2:	4b09      	ldr	r3, [pc, #36]	@ (800cfd8 <HAL_FLASHEx_DATAEEPROM_Program+0xac>)
 800cfb4:	0018      	movs	r0, r3
 800cfb6:	f7ff fe43 	bl	800cc40 <FLASH_WaitForLastOperation>
 800cfba:	0003      	movs	r3, r0
 800cfbc:	7023      	strb	r3, [r4, #0]
    }
  }

  /* Process Unlocked */
  __HAL_UNLOCK(&pFlash);
 800cfbe:	4b05      	ldr	r3, [pc, #20]	@ (800cfd4 <HAL_FLASHEx_DATAEEPROM_Program+0xa8>)
 800cfc0:	2200      	movs	r2, #0
 800cfc2:	741a      	strb	r2, [r3, #16]

  return status;
 800cfc4:	2317      	movs	r3, #23
 800cfc6:	18fb      	adds	r3, r7, r3
 800cfc8:	781b      	ldrb	r3, [r3, #0]
}
 800cfca:	0018      	movs	r0, r3
 800cfcc:	46bd      	mov	sp, r7
 800cfce:	b006      	add	sp, #24
 800cfd0:	bdb0      	pop	{r4, r5, r7, pc}
 800cfd2:	46c0      	nop			@ (mov r8, r8)
 800cfd4:	200024c0 	.word	0x200024c0
 800cfd8:	0000c350 	.word	0x0000c350

0800cfdc <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *                    the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800cfdc:	b580      	push	{r7, lr}
 800cfde:	b086      	sub	sp, #24
 800cfe0:	af00      	add	r7, sp, #0
 800cfe2:	6078      	str	r0, [r7, #4]
 800cfe4:	6039      	str	r1, [r7, #0]
  uint32_t position = 0x00U;
 800cfe6:	2300      	movs	r3, #0
 800cfe8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800cfea:	2300      	movs	r3, #0
 800cfec:	60fb      	str	r3, [r7, #12]
  uint32_t temp = 0x00U;
 800cfee:	2300      	movs	r3, #0
 800cff0:	613b      	str	r3, [r7, #16]
  /* Check the parameters */
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, (GPIO_Init->Pin)));

  /* Configure the port pins */
  while (((GPIO_Init->Pin) >> position) != 0)
 800cff2:	e155      	b.n	800d2a0 <HAL_GPIO_Init+0x2c4>
  {
    /* Get the IO position */
    iocurrent = (GPIO_Init->Pin) & (1U << position);
 800cff4:	683b      	ldr	r3, [r7, #0]
 800cff6:	681b      	ldr	r3, [r3, #0]
 800cff8:	2101      	movs	r1, #1
 800cffa:	697a      	ldr	r2, [r7, #20]
 800cffc:	4091      	lsls	r1, r2
 800cffe:	000a      	movs	r2, r1
 800d000:	4013      	ands	r3, r2
 800d002:	60fb      	str	r3, [r7, #12]

    if (iocurrent)
 800d004:	68fb      	ldr	r3, [r7, #12]
 800d006:	2b00      	cmp	r3, #0
 800d008:	d100      	bne.n	800d00c <HAL_GPIO_Init+0x30>
 800d00a:	e146      	b.n	800d29a <HAL_GPIO_Init+0x2be>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800d00c:	683b      	ldr	r3, [r7, #0]
 800d00e:	685b      	ldr	r3, [r3, #4]
 800d010:	2203      	movs	r2, #3
 800d012:	4013      	ands	r3, r2
 800d014:	2b01      	cmp	r3, #1
 800d016:	d005      	beq.n	800d024 <HAL_GPIO_Init+0x48>
          ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF))
 800d018:	683b      	ldr	r3, [r7, #0]
 800d01a:	685b      	ldr	r3, [r3, #4]
 800d01c:	2203      	movs	r2, #3
 800d01e:	4013      	ands	r3, r2
      if (((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) ||
 800d020:	2b02      	cmp	r3, #2
 800d022:	d130      	bne.n	800d086 <HAL_GPIO_Init+0xaa>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR;
 800d024:	687b      	ldr	r3, [r7, #4]
 800d026:	689b      	ldr	r3, [r3, #8]
 800d028:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OSPEEDER_OSPEED0 << (position * 2U));
 800d02a:	697b      	ldr	r3, [r7, #20]
 800d02c:	005b      	lsls	r3, r3, #1
 800d02e:	2203      	movs	r2, #3
 800d030:	409a      	lsls	r2, r3
 800d032:	0013      	movs	r3, r2
 800d034:	43da      	mvns	r2, r3
 800d036:	693b      	ldr	r3, [r7, #16]
 800d038:	4013      	ands	r3, r2
 800d03a:	613b      	str	r3, [r7, #16]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800d03c:	683b      	ldr	r3, [r7, #0]
 800d03e:	68da      	ldr	r2, [r3, #12]
 800d040:	697b      	ldr	r3, [r7, #20]
 800d042:	005b      	lsls	r3, r3, #1
 800d044:	409a      	lsls	r2, r3
 800d046:	0013      	movs	r3, r2
 800d048:	693a      	ldr	r2, [r7, #16]
 800d04a:	4313      	orrs	r3, r2
 800d04c:	613b      	str	r3, [r7, #16]
        GPIOx->OSPEEDR = temp;
 800d04e:	687b      	ldr	r3, [r7, #4]
 800d050:	693a      	ldr	r2, [r7, #16]
 800d052:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 800d054:	687b      	ldr	r3, [r7, #4]
 800d056:	685b      	ldr	r3, [r3, #4]
 800d058:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800d05a:	2201      	movs	r2, #1
 800d05c:	697b      	ldr	r3, [r7, #20]
 800d05e:	409a      	lsls	r2, r3
 800d060:	0013      	movs	r3, r2
 800d062:	43da      	mvns	r2, r3
 800d064:	693b      	ldr	r3, [r7, #16]
 800d066:	4013      	ands	r3, r2
 800d068:	613b      	str	r3, [r7, #16]
        temp |= (((GPIO_Init->Mode & OUTPUT_TYPE) >> OUTPUT_TYPE_Pos) << position);
 800d06a:	683b      	ldr	r3, [r7, #0]
 800d06c:	685b      	ldr	r3, [r3, #4]
 800d06e:	091b      	lsrs	r3, r3, #4
 800d070:	2201      	movs	r2, #1
 800d072:	401a      	ands	r2, r3
 800d074:	697b      	ldr	r3, [r7, #20]
 800d076:	409a      	lsls	r2, r3
 800d078:	0013      	movs	r3, r2
 800d07a:	693a      	ldr	r2, [r7, #16]
 800d07c:	4313      	orrs	r3, r2
 800d07e:	613b      	str	r3, [r7, #16]
        GPIOx->OTYPER = temp;
 800d080:	687b      	ldr	r3, [r7, #4]
 800d082:	693a      	ldr	r2, [r7, #16]
 800d084:	605a      	str	r2, [r3, #4]
      }

      if ((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 800d086:	683b      	ldr	r3, [r7, #0]
 800d088:	685b      	ldr	r3, [r3, #4]
 800d08a:	2203      	movs	r2, #3
 800d08c:	4013      	ands	r3, r2
 800d08e:	2b03      	cmp	r3, #3
 800d090:	d017      	beq.n	800d0c2 <HAL_GPIO_Init+0xe6>
      {
        /* Check the Pull parameter */
        assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800d092:	687b      	ldr	r3, [r7, #4]
 800d094:	68db      	ldr	r3, [r3, #12]
 800d096:	613b      	str	r3, [r7, #16]
        temp &= ~(GPIO_PUPDR_PUPD0 << (position * 2U));
 800d098:	697b      	ldr	r3, [r7, #20]
 800d09a:	005b      	lsls	r3, r3, #1
 800d09c:	2203      	movs	r2, #3
 800d09e:	409a      	lsls	r2, r3
 800d0a0:	0013      	movs	r3, r2
 800d0a2:	43da      	mvns	r2, r3
 800d0a4:	693b      	ldr	r3, [r7, #16]
 800d0a6:	4013      	ands	r3, r2
 800d0a8:	613b      	str	r3, [r7, #16]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800d0aa:	683b      	ldr	r3, [r7, #0]
 800d0ac:	689a      	ldr	r2, [r3, #8]
 800d0ae:	697b      	ldr	r3, [r7, #20]
 800d0b0:	005b      	lsls	r3, r3, #1
 800d0b2:	409a      	lsls	r2, r3
 800d0b4:	0013      	movs	r3, r2
 800d0b6:	693a      	ldr	r2, [r7, #16]
 800d0b8:	4313      	orrs	r3, r2
 800d0ba:	613b      	str	r3, [r7, #16]
        GPIOx->PUPDR = temp;
 800d0bc:	687b      	ldr	r3, [r7, #4]
 800d0be:	693a      	ldr	r2, [r7, #16]
 800d0c0:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if ((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800d0c2:	683b      	ldr	r3, [r7, #0]
 800d0c4:	685b      	ldr	r3, [r3, #4]
 800d0c6:	2203      	movs	r2, #3
 800d0c8:	4013      	ands	r3, r2
 800d0ca:	2b02      	cmp	r3, #2
 800d0cc:	d123      	bne.n	800d116 <HAL_GPIO_Init+0x13a>
        /* Check the Alternate function parameters */
        assert_param(IS_GPIO_AF_INSTANCE(GPIOx));
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));

        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 800d0ce:	697b      	ldr	r3, [r7, #20]
 800d0d0:	08da      	lsrs	r2, r3, #3
 800d0d2:	687b      	ldr	r3, [r7, #4]
 800d0d4:	3208      	adds	r2, #8
 800d0d6:	0092      	lsls	r2, r2, #2
 800d0d8:	58d3      	ldr	r3, [r2, r3]
 800d0da:	613b      	str	r3, [r7, #16]
        temp &= ~(0xFUL << ((uint32_t)(position & 0x07UL) * 4U));
 800d0dc:	697b      	ldr	r3, [r7, #20]
 800d0de:	2207      	movs	r2, #7
 800d0e0:	4013      	ands	r3, r2
 800d0e2:	009b      	lsls	r3, r3, #2
 800d0e4:	220f      	movs	r2, #15
 800d0e6:	409a      	lsls	r2, r3
 800d0e8:	0013      	movs	r3, r2
 800d0ea:	43da      	mvns	r2, r3
 800d0ec:	693b      	ldr	r3, [r7, #16]
 800d0ee:	4013      	ands	r3, r2
 800d0f0:	613b      	str	r3, [r7, #16]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & (uint32_t)0x07U) * 4U));
 800d0f2:	683b      	ldr	r3, [r7, #0]
 800d0f4:	691a      	ldr	r2, [r3, #16]
 800d0f6:	697b      	ldr	r3, [r7, #20]
 800d0f8:	2107      	movs	r1, #7
 800d0fa:	400b      	ands	r3, r1
 800d0fc:	009b      	lsls	r3, r3, #2
 800d0fe:	409a      	lsls	r2, r3
 800d100:	0013      	movs	r3, r2
 800d102:	693a      	ldr	r2, [r7, #16]
 800d104:	4313      	orrs	r3, r2
 800d106:	613b      	str	r3, [r7, #16]
        GPIOx->AFR[position >> 3U] = temp;
 800d108:	697b      	ldr	r3, [r7, #20]
 800d10a:	08da      	lsrs	r2, r3, #3
 800d10c:	687b      	ldr	r3, [r7, #4]
 800d10e:	3208      	adds	r2, #8
 800d110:	0092      	lsls	r2, r2, #2
 800d112:	6939      	ldr	r1, [r7, #16]
 800d114:	50d1      	str	r1, [r2, r3]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 800d116:	687b      	ldr	r3, [r7, #4]
 800d118:	681b      	ldr	r3, [r3, #0]
 800d11a:	613b      	str	r3, [r7, #16]
      temp &= ~(GPIO_MODER_MODE0 << (position * 2U));
 800d11c:	697b      	ldr	r3, [r7, #20]
 800d11e:	005b      	lsls	r3, r3, #1
 800d120:	2203      	movs	r2, #3
 800d122:	409a      	lsls	r2, r3
 800d124:	0013      	movs	r3, r2
 800d126:	43da      	mvns	r2, r3
 800d128:	693b      	ldr	r3, [r7, #16]
 800d12a:	4013      	ands	r3, r2
 800d12c:	613b      	str	r3, [r7, #16]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800d12e:	683b      	ldr	r3, [r7, #0]
 800d130:	685b      	ldr	r3, [r3, #4]
 800d132:	2203      	movs	r2, #3
 800d134:	401a      	ands	r2, r3
 800d136:	697b      	ldr	r3, [r7, #20]
 800d138:	005b      	lsls	r3, r3, #1
 800d13a:	409a      	lsls	r2, r3
 800d13c:	0013      	movs	r3, r2
 800d13e:	693a      	ldr	r2, [r7, #16]
 800d140:	4313      	orrs	r3, r2
 800d142:	613b      	str	r3, [r7, #16]
      GPIOx->MODER = temp;
 800d144:	687b      	ldr	r3, [r7, #4]
 800d146:	693a      	ldr	r2, [r7, #16]
 800d148:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if ((GPIO_Init->Mode & EXTI_MODE) != 0x00U)
 800d14a:	683b      	ldr	r3, [r7, #0]
 800d14c:	685a      	ldr	r2, [r3, #4]
 800d14e:	23c0      	movs	r3, #192	@ 0xc0
 800d150:	029b      	lsls	r3, r3, #10
 800d152:	4013      	ands	r3, r2
 800d154:	d100      	bne.n	800d158 <HAL_GPIO_Init+0x17c>
 800d156:	e0a0      	b.n	800d29a <HAL_GPIO_Init+0x2be>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800d158:	4b57      	ldr	r3, [pc, #348]	@ (800d2b8 <HAL_GPIO_Init+0x2dc>)
 800d15a:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800d15c:	4b56      	ldr	r3, [pc, #344]	@ (800d2b8 <HAL_GPIO_Init+0x2dc>)
 800d15e:	2101      	movs	r1, #1
 800d160:	430a      	orrs	r2, r1
 800d162:	635a      	str	r2, [r3, #52]	@ 0x34

        temp = SYSCFG->EXTICR[position >> 2U];
 800d164:	4a55      	ldr	r2, [pc, #340]	@ (800d2bc <HAL_GPIO_Init+0x2e0>)
 800d166:	697b      	ldr	r3, [r7, #20]
 800d168:	089b      	lsrs	r3, r3, #2
 800d16a:	3302      	adds	r3, #2
 800d16c:	009b      	lsls	r3, r3, #2
 800d16e:	589b      	ldr	r3, [r3, r2]
 800d170:	613b      	str	r3, [r7, #16]
        CLEAR_BIT(temp, (0x0FUL) << (4U * (position & 0x03U)));
 800d172:	697b      	ldr	r3, [r7, #20]
 800d174:	2203      	movs	r2, #3
 800d176:	4013      	ands	r3, r2
 800d178:	009b      	lsls	r3, r3, #2
 800d17a:	220f      	movs	r2, #15
 800d17c:	409a      	lsls	r2, r3
 800d17e:	0013      	movs	r3, r2
 800d180:	43da      	mvns	r2, r3
 800d182:	693b      	ldr	r3, [r7, #16]
 800d184:	4013      	ands	r3, r2
 800d186:	613b      	str	r3, [r7, #16]
        SET_BIT(temp, (GPIO_GET_INDEX(GPIOx)) << (4 * (position & 0x03U)));
 800d188:	687a      	ldr	r2, [r7, #4]
 800d18a:	23a0      	movs	r3, #160	@ 0xa0
 800d18c:	05db      	lsls	r3, r3, #23
 800d18e:	429a      	cmp	r2, r3
 800d190:	d01f      	beq.n	800d1d2 <HAL_GPIO_Init+0x1f6>
 800d192:	687b      	ldr	r3, [r7, #4]
 800d194:	4a4a      	ldr	r2, [pc, #296]	@ (800d2c0 <HAL_GPIO_Init+0x2e4>)
 800d196:	4293      	cmp	r3, r2
 800d198:	d019      	beq.n	800d1ce <HAL_GPIO_Init+0x1f2>
 800d19a:	687b      	ldr	r3, [r7, #4]
 800d19c:	4a49      	ldr	r2, [pc, #292]	@ (800d2c4 <HAL_GPIO_Init+0x2e8>)
 800d19e:	4293      	cmp	r3, r2
 800d1a0:	d013      	beq.n	800d1ca <HAL_GPIO_Init+0x1ee>
 800d1a2:	687b      	ldr	r3, [r7, #4]
 800d1a4:	4a48      	ldr	r2, [pc, #288]	@ (800d2c8 <HAL_GPIO_Init+0x2ec>)
 800d1a6:	4293      	cmp	r3, r2
 800d1a8:	d00d      	beq.n	800d1c6 <HAL_GPIO_Init+0x1ea>
 800d1aa:	687b      	ldr	r3, [r7, #4]
 800d1ac:	4a47      	ldr	r2, [pc, #284]	@ (800d2cc <HAL_GPIO_Init+0x2f0>)
 800d1ae:	4293      	cmp	r3, r2
 800d1b0:	d007      	beq.n	800d1c2 <HAL_GPIO_Init+0x1e6>
 800d1b2:	687b      	ldr	r3, [r7, #4]
 800d1b4:	4a46      	ldr	r2, [pc, #280]	@ (800d2d0 <HAL_GPIO_Init+0x2f4>)
 800d1b6:	4293      	cmp	r3, r2
 800d1b8:	d101      	bne.n	800d1be <HAL_GPIO_Init+0x1e2>
 800d1ba:	2305      	movs	r3, #5
 800d1bc:	e00a      	b.n	800d1d4 <HAL_GPIO_Init+0x1f8>
 800d1be:	2306      	movs	r3, #6
 800d1c0:	e008      	b.n	800d1d4 <HAL_GPIO_Init+0x1f8>
 800d1c2:	2304      	movs	r3, #4
 800d1c4:	e006      	b.n	800d1d4 <HAL_GPIO_Init+0x1f8>
 800d1c6:	2303      	movs	r3, #3
 800d1c8:	e004      	b.n	800d1d4 <HAL_GPIO_Init+0x1f8>
 800d1ca:	2302      	movs	r3, #2
 800d1cc:	e002      	b.n	800d1d4 <HAL_GPIO_Init+0x1f8>
 800d1ce:	2301      	movs	r3, #1
 800d1d0:	e000      	b.n	800d1d4 <HAL_GPIO_Init+0x1f8>
 800d1d2:	2300      	movs	r3, #0
 800d1d4:	697a      	ldr	r2, [r7, #20]
 800d1d6:	2103      	movs	r1, #3
 800d1d8:	400a      	ands	r2, r1
 800d1da:	0092      	lsls	r2, r2, #2
 800d1dc:	4093      	lsls	r3, r2
 800d1de:	693a      	ldr	r2, [r7, #16]
 800d1e0:	4313      	orrs	r3, r2
 800d1e2:	613b      	str	r3, [r7, #16]
        SYSCFG->EXTICR[position >> 2U] = temp;
 800d1e4:	4935      	ldr	r1, [pc, #212]	@ (800d2bc <HAL_GPIO_Init+0x2e0>)
 800d1e6:	697b      	ldr	r3, [r7, #20]
 800d1e8:	089b      	lsrs	r3, r3, #2
 800d1ea:	3302      	adds	r3, #2
 800d1ec:	009b      	lsls	r3, r3, #2
 800d1ee:	693a      	ldr	r2, [r7, #16]
 800d1f0:	505a      	str	r2, [r3, r1]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 800d1f2:	4b38      	ldr	r3, [pc, #224]	@ (800d2d4 <HAL_GPIO_Init+0x2f8>)
 800d1f4:	689b      	ldr	r3, [r3, #8]
 800d1f6:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800d1f8:	68fb      	ldr	r3, [r7, #12]
 800d1fa:	43da      	mvns	r2, r3
 800d1fc:	693b      	ldr	r3, [r7, #16]
 800d1fe:	4013      	ands	r3, r2
 800d200:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_RISING) != 0x00U)
 800d202:	683b      	ldr	r3, [r7, #0]
 800d204:	685a      	ldr	r2, [r3, #4]
 800d206:	2380      	movs	r3, #128	@ 0x80
 800d208:	035b      	lsls	r3, r3, #13
 800d20a:	4013      	ands	r3, r2
 800d20c:	d003      	beq.n	800d216 <HAL_GPIO_Init+0x23a>
        {
          temp |= iocurrent;
 800d20e:	693a      	ldr	r2, [r7, #16]
 800d210:	68fb      	ldr	r3, [r7, #12]
 800d212:	4313      	orrs	r3, r2
 800d214:	613b      	str	r3, [r7, #16]
        }
        EXTI->RTSR = temp;
 800d216:	4b2f      	ldr	r3, [pc, #188]	@ (800d2d4 <HAL_GPIO_Init+0x2f8>)
 800d218:	693a      	ldr	r2, [r7, #16]
 800d21a:	609a      	str	r2, [r3, #8]

        temp = EXTI->FTSR;
 800d21c:	4b2d      	ldr	r3, [pc, #180]	@ (800d2d4 <HAL_GPIO_Init+0x2f8>)
 800d21e:	68db      	ldr	r3, [r3, #12]
 800d220:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800d222:	68fb      	ldr	r3, [r7, #12]
 800d224:	43da      	mvns	r2, r3
 800d226:	693b      	ldr	r3, [r7, #16]
 800d228:	4013      	ands	r3, r2
 800d22a:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & TRIGGER_FALLING) != 0x00U)
 800d22c:	683b      	ldr	r3, [r7, #0]
 800d22e:	685a      	ldr	r2, [r3, #4]
 800d230:	2380      	movs	r3, #128	@ 0x80
 800d232:	039b      	lsls	r3, r3, #14
 800d234:	4013      	ands	r3, r2
 800d236:	d003      	beq.n	800d240 <HAL_GPIO_Init+0x264>
        {
          temp |= iocurrent;
 800d238:	693a      	ldr	r2, [r7, #16]
 800d23a:	68fb      	ldr	r3, [r7, #12]
 800d23c:	4313      	orrs	r3, r2
 800d23e:	613b      	str	r3, [r7, #16]
        }
        EXTI->FTSR = temp;
 800d240:	4b24      	ldr	r3, [pc, #144]	@ (800d2d4 <HAL_GPIO_Init+0x2f8>)
 800d242:	693a      	ldr	r2, [r7, #16]
 800d244:	60da      	str	r2, [r3, #12]

        temp = EXTI->EMR;
 800d246:	4b23      	ldr	r3, [pc, #140]	@ (800d2d4 <HAL_GPIO_Init+0x2f8>)
 800d248:	685b      	ldr	r3, [r3, #4]
 800d24a:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800d24c:	68fb      	ldr	r3, [r7, #12]
 800d24e:	43da      	mvns	r2, r3
 800d250:	693b      	ldr	r3, [r7, #16]
 800d252:	4013      	ands	r3, r2
 800d254:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_EVT) != 0x00U)
 800d256:	683b      	ldr	r3, [r7, #0]
 800d258:	685a      	ldr	r2, [r3, #4]
 800d25a:	2380      	movs	r3, #128	@ 0x80
 800d25c:	029b      	lsls	r3, r3, #10
 800d25e:	4013      	ands	r3, r2
 800d260:	d003      	beq.n	800d26a <HAL_GPIO_Init+0x28e>
        {
          temp |= iocurrent;
 800d262:	693a      	ldr	r2, [r7, #16]
 800d264:	68fb      	ldr	r3, [r7, #12]
 800d266:	4313      	orrs	r3, r2
 800d268:	613b      	str	r3, [r7, #16]
        }
        EXTI->EMR = temp;
 800d26a:	4b1a      	ldr	r3, [pc, #104]	@ (800d2d4 <HAL_GPIO_Init+0x2f8>)
 800d26c:	693a      	ldr	r2, [r7, #16]
 800d26e:	605a      	str	r2, [r3, #4]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800d270:	4b18      	ldr	r3, [pc, #96]	@ (800d2d4 <HAL_GPIO_Init+0x2f8>)
 800d272:	681b      	ldr	r3, [r3, #0]
 800d274:	613b      	str	r3, [r7, #16]
        temp &= ~((uint32_t)iocurrent);
 800d276:	68fb      	ldr	r3, [r7, #12]
 800d278:	43da      	mvns	r2, r3
 800d27a:	693b      	ldr	r3, [r7, #16]
 800d27c:	4013      	ands	r3, r2
 800d27e:	613b      	str	r3, [r7, #16]
        if ((GPIO_Init->Mode & EXTI_IT) != 0x00U)
 800d280:	683b      	ldr	r3, [r7, #0]
 800d282:	685a      	ldr	r2, [r3, #4]
 800d284:	2380      	movs	r3, #128	@ 0x80
 800d286:	025b      	lsls	r3, r3, #9
 800d288:	4013      	ands	r3, r2
 800d28a:	d003      	beq.n	800d294 <HAL_GPIO_Init+0x2b8>
        {
          temp |= iocurrent;
 800d28c:	693a      	ldr	r2, [r7, #16]
 800d28e:	68fb      	ldr	r3, [r7, #12]
 800d290:	4313      	orrs	r3, r2
 800d292:	613b      	str	r3, [r7, #16]
        }
        EXTI->IMR = temp;
 800d294:	4b0f      	ldr	r3, [pc, #60]	@ (800d2d4 <HAL_GPIO_Init+0x2f8>)
 800d296:	693a      	ldr	r2, [r7, #16]
 800d298:	601a      	str	r2, [r3, #0]
      }
    }
    position++;
 800d29a:	697b      	ldr	r3, [r7, #20]
 800d29c:	3301      	adds	r3, #1
 800d29e:	617b      	str	r3, [r7, #20]
  while (((GPIO_Init->Pin) >> position) != 0)
 800d2a0:	683b      	ldr	r3, [r7, #0]
 800d2a2:	681a      	ldr	r2, [r3, #0]
 800d2a4:	697b      	ldr	r3, [r7, #20]
 800d2a6:	40da      	lsrs	r2, r3
 800d2a8:	1e13      	subs	r3, r2, #0
 800d2aa:	d000      	beq.n	800d2ae <HAL_GPIO_Init+0x2d2>
 800d2ac:	e6a2      	b.n	800cff4 <HAL_GPIO_Init+0x18>
  }
}
 800d2ae:	46c0      	nop			@ (mov r8, r8)
 800d2b0:	46c0      	nop			@ (mov r8, r8)
 800d2b2:	46bd      	mov	sp, r7
 800d2b4:	b006      	add	sp, #24
 800d2b6:	bd80      	pop	{r7, pc}
 800d2b8:	40021000 	.word	0x40021000
 800d2bc:	40010000 	.word	0x40010000
 800d2c0:	50000400 	.word	0x50000400
 800d2c4:	50000800 	.word	0x50000800
 800d2c8:	50000c00 	.word	0x50000c00
 800d2cc:	50001000 	.word	0x50001000
 800d2d0:	50001c00 	.word	0x50001c00
 800d2d4:	40010400 	.word	0x40010400

0800d2d8 <HAL_GPIO_ReadPin>:
  *                   This parameter can be GPIO_PIN_x where x can be (0..15).
  *                   All port bits are not necessarily available on all GPIOs.
  * @retval The input port pin value.
  */
GPIO_PinState HAL_GPIO_ReadPin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin)
{
 800d2d8:	b580      	push	{r7, lr}
 800d2da:	b084      	sub	sp, #16
 800d2dc:	af00      	add	r7, sp, #0
 800d2de:	6078      	str	r0, [r7, #4]
 800d2e0:	000a      	movs	r2, r1
 800d2e2:	1cbb      	adds	r3, r7, #2
 800d2e4:	801a      	strh	r2, [r3, #0]
  GPIO_PinState bitstatus;

  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));

  if ((GPIOx->IDR & GPIO_Pin) != (uint32_t)GPIO_PIN_RESET)
 800d2e6:	687b      	ldr	r3, [r7, #4]
 800d2e8:	691b      	ldr	r3, [r3, #16]
 800d2ea:	1cba      	adds	r2, r7, #2
 800d2ec:	8812      	ldrh	r2, [r2, #0]
 800d2ee:	4013      	ands	r3, r2
 800d2f0:	d004      	beq.n	800d2fc <HAL_GPIO_ReadPin+0x24>
  {
    bitstatus = GPIO_PIN_SET;
 800d2f2:	230f      	movs	r3, #15
 800d2f4:	18fb      	adds	r3, r7, r3
 800d2f6:	2201      	movs	r2, #1
 800d2f8:	701a      	strb	r2, [r3, #0]
 800d2fa:	e003      	b.n	800d304 <HAL_GPIO_ReadPin+0x2c>
  }
  else
  {
    bitstatus = GPIO_PIN_RESET;
 800d2fc:	230f      	movs	r3, #15
 800d2fe:	18fb      	adds	r3, r7, r3
 800d300:	2200      	movs	r2, #0
 800d302:	701a      	strb	r2, [r3, #0]
  }
  return bitstatus;
 800d304:	230f      	movs	r3, #15
 800d306:	18fb      	adds	r3, r7, r3
 800d308:	781b      	ldrb	r3, [r3, #0]
}
 800d30a:	0018      	movs	r0, r3
 800d30c:	46bd      	mov	sp, r7
 800d30e:	b004      	add	sp, #16
 800d310:	bd80      	pop	{r7, pc}

0800d312 <HAL_GPIO_WritePin>:
  *                        GPIO_PIN_RESET: to clear the port pin
  *                        GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef *GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800d312:	b580      	push	{r7, lr}
 800d314:	b082      	sub	sp, #8
 800d316:	af00      	add	r7, sp, #0
 800d318:	6078      	str	r0, [r7, #4]
 800d31a:	0008      	movs	r0, r1
 800d31c:	0011      	movs	r1, r2
 800d31e:	1cbb      	adds	r3, r7, #2
 800d320:	1c02      	adds	r2, r0, #0
 800d322:	801a      	strh	r2, [r3, #0]
 800d324:	1c7b      	adds	r3, r7, #1
 800d326:	1c0a      	adds	r2, r1, #0
 800d328:	701a      	strb	r2, [r3, #0]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN_AVAILABLE(GPIOx, GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if (PinState != GPIO_PIN_RESET)
 800d32a:	1c7b      	adds	r3, r7, #1
 800d32c:	781b      	ldrb	r3, [r3, #0]
 800d32e:	2b00      	cmp	r3, #0
 800d330:	d004      	beq.n	800d33c <HAL_GPIO_WritePin+0x2a>
  {
    GPIOx->BSRR = GPIO_Pin;
 800d332:	1cbb      	adds	r3, r7, #2
 800d334:	881a      	ldrh	r2, [r3, #0]
 800d336:	687b      	ldr	r3, [r7, #4]
 800d338:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BRR = GPIO_Pin ;
  }
}
 800d33a:	e003      	b.n	800d344 <HAL_GPIO_WritePin+0x32>
    GPIOx->BRR = GPIO_Pin ;
 800d33c:	1cbb      	adds	r3, r7, #2
 800d33e:	881a      	ldrh	r2, [r3, #0]
 800d340:	687b      	ldr	r3, [r7, #4]
 800d342:	629a      	str	r2, [r3, #40]	@ 0x28
}
 800d344:	46c0      	nop			@ (mov r8, r8)
 800d346:	46bd      	mov	sp, r7
 800d348:	b002      	add	sp, #8
 800d34a:	bd80      	pop	{r7, pc}

0800d34c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800d34c:	b580      	push	{r7, lr}
 800d34e:	b082      	sub	sp, #8
 800d350:	af00      	add	r7, sp, #0
 800d352:	6078      	str	r0, [r7, #4]
  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 800d354:	687b      	ldr	r3, [r7, #4]
 800d356:	2b00      	cmp	r3, #0
 800d358:	d101      	bne.n	800d35e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800d35a:	2301      	movs	r3, #1
 800d35c:	e082      	b.n	800d464 <HAL_I2C_Init+0x118>
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_OWN_ADDRESS2_MASK(hi2c->Init.OwnAddress2Masks));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800d35e:	687b      	ldr	r3, [r7, #4]
 800d360:	2241      	movs	r2, #65	@ 0x41
 800d362:	5c9b      	ldrb	r3, [r3, r2]
 800d364:	b2db      	uxtb	r3, r3
 800d366:	2b00      	cmp	r3, #0
 800d368:	d107      	bne.n	800d37a <HAL_I2C_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800d36a:	687b      	ldr	r3, [r7, #4]
 800d36c:	2240      	movs	r2, #64	@ 0x40
 800d36e:	2100      	movs	r1, #0
 800d370:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2C_MspInit(hi2c);
 800d372:	687b      	ldr	r3, [r7, #4]
 800d374:	0018      	movs	r0, r3
 800d376:	f7f9 fccd 	bl	8006d14 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800d37a:	687b      	ldr	r3, [r7, #4]
 800d37c:	2241      	movs	r2, #65	@ 0x41
 800d37e:	2124      	movs	r1, #36	@ 0x24
 800d380:	5499      	strb	r1, [r3, r2]

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 800d382:	687b      	ldr	r3, [r7, #4]
 800d384:	681b      	ldr	r3, [r3, #0]
 800d386:	681a      	ldr	r2, [r3, #0]
 800d388:	687b      	ldr	r3, [r7, #4]
 800d38a:	681b      	ldr	r3, [r3, #0]
 800d38c:	2101      	movs	r1, #1
 800d38e:	438a      	bics	r2, r1
 800d390:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx TIMINGR Configuration ------------------*/
  /* Configure I2Cx: Frequency range */
  hi2c->Instance->TIMINGR = hi2c->Init.Timing & TIMING_CLEAR_MASK;
 800d392:	687b      	ldr	r3, [r7, #4]
 800d394:	685a      	ldr	r2, [r3, #4]
 800d396:	687b      	ldr	r3, [r7, #4]
 800d398:	681b      	ldr	r3, [r3, #0]
 800d39a:	4934      	ldr	r1, [pc, #208]	@ (800d46c <HAL_I2C_Init+0x120>)
 800d39c:	400a      	ands	r2, r1
 800d39e:	611a      	str	r2, [r3, #16]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Disable Own Address1 before set the Own Address1 configuration */
  hi2c->Instance->OAR1 &= ~I2C_OAR1_OA1EN;
 800d3a0:	687b      	ldr	r3, [r7, #4]
 800d3a2:	681b      	ldr	r3, [r3, #0]
 800d3a4:	689a      	ldr	r2, [r3, #8]
 800d3a6:	687b      	ldr	r3, [r7, #4]
 800d3a8:	681b      	ldr	r3, [r3, #0]
 800d3aa:	4931      	ldr	r1, [pc, #196]	@ (800d470 <HAL_I2C_Init+0x124>)
 800d3ac:	400a      	ands	r2, r1
 800d3ae:	609a      	str	r2, [r3, #8]

  /* Configure I2Cx: Own Address1 and ack own address1 mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800d3b0:	687b      	ldr	r3, [r7, #4]
 800d3b2:	68db      	ldr	r3, [r3, #12]
 800d3b4:	2b01      	cmp	r3, #1
 800d3b6:	d108      	bne.n	800d3ca <HAL_I2C_Init+0x7e>
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | hi2c->Init.OwnAddress1);
 800d3b8:	687b      	ldr	r3, [r7, #4]
 800d3ba:	689a      	ldr	r2, [r3, #8]
 800d3bc:	687b      	ldr	r3, [r7, #4]
 800d3be:	681b      	ldr	r3, [r3, #0]
 800d3c0:	2180      	movs	r1, #128	@ 0x80
 800d3c2:	0209      	lsls	r1, r1, #8
 800d3c4:	430a      	orrs	r2, r1
 800d3c6:	609a      	str	r2, [r3, #8]
 800d3c8:	e007      	b.n	800d3da <HAL_I2C_Init+0x8e>
  }
  else /* I2C_ADDRESSINGMODE_10BIT */
  {
    hi2c->Instance->OAR1 = (I2C_OAR1_OA1EN | I2C_OAR1_OA1MODE | hi2c->Init.OwnAddress1);
 800d3ca:	687b      	ldr	r3, [r7, #4]
 800d3cc:	689a      	ldr	r2, [r3, #8]
 800d3ce:	687b      	ldr	r3, [r7, #4]
 800d3d0:	681b      	ldr	r3, [r3, #0]
 800d3d2:	2184      	movs	r1, #132	@ 0x84
 800d3d4:	0209      	lsls	r1, r1, #8
 800d3d6:	430a      	orrs	r2, r1
 800d3d8:	609a      	str	r2, [r3, #8]
  }

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Addressing Master mode */
  if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800d3da:	687b      	ldr	r3, [r7, #4]
 800d3dc:	68db      	ldr	r3, [r3, #12]
 800d3de:	2b02      	cmp	r3, #2
 800d3e0:	d104      	bne.n	800d3ec <HAL_I2C_Init+0xa0>
  {
    hi2c->Instance->CR2 = (I2C_CR2_ADD10);
 800d3e2:	687b      	ldr	r3, [r7, #4]
 800d3e4:	681b      	ldr	r3, [r3, #0]
 800d3e6:	2280      	movs	r2, #128	@ 0x80
 800d3e8:	0112      	lsls	r2, r2, #4
 800d3ea:	605a      	str	r2, [r3, #4]
  }
  /* Enable the AUTOEND by default, and enable NACK (should be disable only during Slave process */
  hi2c->Instance->CR2 |= (I2C_CR2_AUTOEND | I2C_CR2_NACK);
 800d3ec:	687b      	ldr	r3, [r7, #4]
 800d3ee:	681b      	ldr	r3, [r3, #0]
 800d3f0:	685a      	ldr	r2, [r3, #4]
 800d3f2:	687b      	ldr	r3, [r7, #4]
 800d3f4:	681b      	ldr	r3, [r3, #0]
 800d3f6:	491f      	ldr	r1, [pc, #124]	@ (800d474 <HAL_I2C_Init+0x128>)
 800d3f8:	430a      	orrs	r2, r1
 800d3fa:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Disable Own Address2 before set the Own Address2 configuration */
  hi2c->Instance->OAR2 &= ~I2C_DUALADDRESS_ENABLE;
 800d3fc:	687b      	ldr	r3, [r7, #4]
 800d3fe:	681b      	ldr	r3, [r3, #0]
 800d400:	68da      	ldr	r2, [r3, #12]
 800d402:	687b      	ldr	r3, [r7, #4]
 800d404:	681b      	ldr	r3, [r3, #0]
 800d406:	491a      	ldr	r1, [pc, #104]	@ (800d470 <HAL_I2C_Init+0x124>)
 800d408:	400a      	ands	r2, r1
 800d40a:	60da      	str	r2, [r3, #12]

  /* Configure I2Cx: Dual mode and Own Address2 */
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800d40c:	687b      	ldr	r3, [r7, #4]
 800d40e:	691a      	ldr	r2, [r3, #16]
 800d410:	687b      	ldr	r3, [r7, #4]
 800d412:	695b      	ldr	r3, [r3, #20]
 800d414:	431a      	orrs	r2, r3
 800d416:	0011      	movs	r1, r2
                          (hi2c->Init.OwnAddress2Masks << 8));
 800d418:	687b      	ldr	r3, [r7, #4]
 800d41a:	699b      	ldr	r3, [r3, #24]
 800d41c:	021a      	lsls	r2, r3, #8
  hi2c->Instance->OAR2 = (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2 | \
 800d41e:	687b      	ldr	r3, [r7, #4]
 800d420:	681b      	ldr	r3, [r3, #0]
 800d422:	430a      	orrs	r2, r1
 800d424:	60da      	str	r2, [r3, #12]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  hi2c->Instance->CR1 = (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode);
 800d426:	687b      	ldr	r3, [r7, #4]
 800d428:	69d9      	ldr	r1, [r3, #28]
 800d42a:	687b      	ldr	r3, [r7, #4]
 800d42c:	6a1a      	ldr	r2, [r3, #32]
 800d42e:	687b      	ldr	r3, [r7, #4]
 800d430:	681b      	ldr	r3, [r3, #0]
 800d432:	430a      	orrs	r2, r1
 800d434:	601a      	str	r2, [r3, #0]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 800d436:	687b      	ldr	r3, [r7, #4]
 800d438:	681b      	ldr	r3, [r3, #0]
 800d43a:	681a      	ldr	r2, [r3, #0]
 800d43c:	687b      	ldr	r3, [r7, #4]
 800d43e:	681b      	ldr	r3, [r3, #0]
 800d440:	2101      	movs	r1, #1
 800d442:	430a      	orrs	r2, r1
 800d444:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800d446:	687b      	ldr	r3, [r7, #4]
 800d448:	2200      	movs	r2, #0
 800d44a:	645a      	str	r2, [r3, #68]	@ 0x44
  hi2c->State = HAL_I2C_STATE_READY;
 800d44c:	687b      	ldr	r3, [r7, #4]
 800d44e:	2241      	movs	r2, #65	@ 0x41
 800d450:	2120      	movs	r1, #32
 800d452:	5499      	strb	r1, [r3, r2]
  hi2c->PreviousState = I2C_STATE_NONE;
 800d454:	687b      	ldr	r3, [r7, #4]
 800d456:	2200      	movs	r2, #0
 800d458:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800d45a:	687b      	ldr	r3, [r7, #4]
 800d45c:	2242      	movs	r2, #66	@ 0x42
 800d45e:	2100      	movs	r1, #0
 800d460:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800d462:	2300      	movs	r3, #0
}
 800d464:	0018      	movs	r0, r3
 800d466:	46bd      	mov	sp, r7
 800d468:	b002      	add	sp, #8
 800d46a:	bd80      	pop	{r7, pc}
 800d46c:	f0ffffff 	.word	0xf0ffffff
 800d470:	ffff7fff 	.word	0xffff7fff
 800d474:	02008000 	.word	0x02008000

0800d478 <HAL_I2C_Master_Transmit_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                              uint16_t Size)
{
 800d478:	b5b0      	push	{r4, r5, r7, lr}
 800d47a:	b088      	sub	sp, #32
 800d47c:	af02      	add	r7, sp, #8
 800d47e:	60f8      	str	r0, [r7, #12]
 800d480:	0008      	movs	r0, r1
 800d482:	607a      	str	r2, [r7, #4]
 800d484:	0019      	movs	r1, r3
 800d486:	230a      	movs	r3, #10
 800d488:	18fb      	adds	r3, r7, r3
 800d48a:	1c02      	adds	r2, r0, #0
 800d48c:	801a      	strh	r2, [r3, #0]
 800d48e:	2308      	movs	r3, #8
 800d490:	18fb      	adds	r3, r7, r3
 800d492:	1c0a      	adds	r2, r1, #0
 800d494:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d496:	68fb      	ldr	r3, [r7, #12]
 800d498:	2241      	movs	r2, #65	@ 0x41
 800d49a:	5c9b      	ldrb	r3, [r3, r2]
 800d49c:	b2db      	uxtb	r3, r3
 800d49e:	2b20      	cmp	r3, #32
 800d4a0:	d000      	beq.n	800d4a4 <HAL_I2C_Master_Transmit_DMA+0x2c>
 800d4a2:	e0dd      	b.n	800d660 <HAL_I2C_Master_Transmit_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800d4a4:	68fb      	ldr	r3, [r7, #12]
 800d4a6:	681b      	ldr	r3, [r3, #0]
 800d4a8:	699a      	ldr	r2, [r3, #24]
 800d4aa:	2380      	movs	r3, #128	@ 0x80
 800d4ac:	021b      	lsls	r3, r3, #8
 800d4ae:	401a      	ands	r2, r3
 800d4b0:	2380      	movs	r3, #128	@ 0x80
 800d4b2:	021b      	lsls	r3, r3, #8
 800d4b4:	429a      	cmp	r2, r3
 800d4b6:	d101      	bne.n	800d4bc <HAL_I2C_Master_Transmit_DMA+0x44>
    {
      return HAL_BUSY;
 800d4b8:	2302      	movs	r3, #2
 800d4ba:	e0d2      	b.n	800d662 <HAL_I2C_Master_Transmit_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d4bc:	68fb      	ldr	r3, [r7, #12]
 800d4be:	2240      	movs	r2, #64	@ 0x40
 800d4c0:	5c9b      	ldrb	r3, [r3, r2]
 800d4c2:	2b01      	cmp	r3, #1
 800d4c4:	d101      	bne.n	800d4ca <HAL_I2C_Master_Transmit_DMA+0x52>
 800d4c6:	2302      	movs	r3, #2
 800d4c8:	e0cb      	b.n	800d662 <HAL_I2C_Master_Transmit_DMA+0x1ea>
 800d4ca:	68fb      	ldr	r3, [r7, #12]
 800d4cc:	2240      	movs	r2, #64	@ 0x40
 800d4ce:	2101      	movs	r1, #1
 800d4d0:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_TX;
 800d4d2:	68fb      	ldr	r3, [r7, #12]
 800d4d4:	2241      	movs	r2, #65	@ 0x41
 800d4d6:	2121      	movs	r1, #33	@ 0x21
 800d4d8:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800d4da:	68fb      	ldr	r3, [r7, #12]
 800d4dc:	2242      	movs	r2, #66	@ 0x42
 800d4de:	2110      	movs	r1, #16
 800d4e0:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800d4e2:	68fb      	ldr	r3, [r7, #12]
 800d4e4:	2200      	movs	r2, #0
 800d4e6:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d4e8:	68fb      	ldr	r3, [r7, #12]
 800d4ea:	687a      	ldr	r2, [r7, #4]
 800d4ec:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800d4ee:	68fb      	ldr	r3, [r7, #12]
 800d4f0:	2208      	movs	r2, #8
 800d4f2:	18ba      	adds	r2, r7, r2
 800d4f4:	8812      	ldrh	r2, [r2, #0]
 800d4f6:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d4f8:	68fb      	ldr	r3, [r7, #12]
 800d4fa:	4a5c      	ldr	r2, [pc, #368]	@ (800d66c <HAL_I2C_Master_Transmit_DMA+0x1f4>)
 800d4fc:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800d4fe:	68fb      	ldr	r3, [r7, #12]
 800d500:	4a5b      	ldr	r2, [pc, #364]	@ (800d670 <HAL_I2C_Master_Transmit_DMA+0x1f8>)
 800d502:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d504:	68fb      	ldr	r3, [r7, #12]
 800d506:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d508:	b29b      	uxth	r3, r3
 800d50a:	2bff      	cmp	r3, #255	@ 0xff
 800d50c:	d906      	bls.n	800d51c <HAL_I2C_Master_Transmit_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d50e:	68fb      	ldr	r3, [r7, #12]
 800d510:	22ff      	movs	r2, #255	@ 0xff
 800d512:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800d514:	2380      	movs	r3, #128	@ 0x80
 800d516:	045b      	lsls	r3, r3, #17
 800d518:	617b      	str	r3, [r7, #20]
 800d51a:	e007      	b.n	800d52c <HAL_I2C_Master_Transmit_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800d51c:	68fb      	ldr	r3, [r7, #12]
 800d51e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d520:	b29a      	uxth	r2, r3
 800d522:	68fb      	ldr	r3, [r7, #12]
 800d524:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800d526:	2380      	movs	r3, #128	@ 0x80
 800d528:	049b      	lsls	r3, r3, #18
 800d52a:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800d52c:	68fb      	ldr	r3, [r7, #12]
 800d52e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d530:	2b00      	cmp	r3, #0
 800d532:	d100      	bne.n	800d536 <HAL_I2C_Master_Transmit_DMA+0xbe>
 800d534:	e078      	b.n	800d628 <HAL_I2C_Master_Transmit_DMA+0x1b0>
    {
      if (hi2c->hdmatx != NULL)
 800d536:	68fb      	ldr	r3, [r7, #12]
 800d538:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d53a:	2b00      	cmp	r3, #0
 800d53c:	d023      	beq.n	800d586 <HAL_I2C_Master_Transmit_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmatx->XferCpltCallback = I2C_DMAMasterTransmitCplt;
 800d53e:	68fb      	ldr	r3, [r7, #12]
 800d540:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d542:	4a4c      	ldr	r2, [pc, #304]	@ (800d674 <HAL_I2C_Master_Transmit_DMA+0x1fc>)
 800d544:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmatx->XferErrorCallback = I2C_DMAError;
 800d546:	68fb      	ldr	r3, [r7, #12]
 800d548:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d54a:	4a4b      	ldr	r2, [pc, #300]	@ (800d678 <HAL_I2C_Master_Transmit_DMA+0x200>)
 800d54c:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmatx->XferHalfCpltCallback = NULL;
 800d54e:	68fb      	ldr	r3, [r7, #12]
 800d550:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d552:	2200      	movs	r2, #0
 800d554:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmatx->XferAbortCallback = NULL;
 800d556:	68fb      	ldr	r3, [r7, #12]
 800d558:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800d55a:	2200      	movs	r2, #0
 800d55c:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 800d55e:	68fb      	ldr	r3, [r7, #12]
 800d560:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800d562:	6879      	ldr	r1, [r7, #4]
 800d564:	68fb      	ldr	r3, [r7, #12]
 800d566:	681b      	ldr	r3, [r3, #0]
 800d568:	3328      	adds	r3, #40	@ 0x28
 800d56a:	001a      	movs	r2, r3
                                         hi2c->XferSize);
 800d56c:	68fb      	ldr	r3, [r7, #12]
 800d56e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)pData, (uint32_t)&hi2c->Instance->TXDR,
 800d570:	2513      	movs	r5, #19
 800d572:	197c      	adds	r4, r7, r5
 800d574:	f7ff f98e 	bl	800c894 <HAL_DMA_Start_IT>
 800d578:	0003      	movs	r3, r0
 800d57a:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800d57c:	197b      	adds	r3, r7, r5
 800d57e:	781b      	ldrb	r3, [r3, #0]
 800d580:	2b00      	cmp	r3, #0
 800d582:	d13d      	bne.n	800d600 <HAL_I2C_Master_Transmit_DMA+0x188>
 800d584:	e013      	b.n	800d5ae <HAL_I2C_Master_Transmit_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 800d586:	68fb      	ldr	r3, [r7, #12]
 800d588:	2241      	movs	r2, #65	@ 0x41
 800d58a:	2120      	movs	r1, #32
 800d58c:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800d58e:	68fb      	ldr	r3, [r7, #12]
 800d590:	2242      	movs	r2, #66	@ 0x42
 800d592:	2100      	movs	r1, #0
 800d594:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800d596:	68fb      	ldr	r3, [r7, #12]
 800d598:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d59a:	2280      	movs	r2, #128	@ 0x80
 800d59c:	431a      	orrs	r2, r3
 800d59e:	68fb      	ldr	r3, [r7, #12]
 800d5a0:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800d5a2:	68fb      	ldr	r3, [r7, #12]
 800d5a4:	2240      	movs	r2, #64	@ 0x40
 800d5a6:	2100      	movs	r1, #0
 800d5a8:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800d5aa:	2301      	movs	r3, #1
 800d5ac:	e059      	b.n	800d662 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_WRITE);
 800d5ae:	68fb      	ldr	r3, [r7, #12]
 800d5b0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d5b2:	b2da      	uxtb	r2, r3
 800d5b4:	697c      	ldr	r4, [r7, #20]
 800d5b6:	230a      	movs	r3, #10
 800d5b8:	18fb      	adds	r3, r7, r3
 800d5ba:	8819      	ldrh	r1, [r3, #0]
 800d5bc:	68f8      	ldr	r0, [r7, #12]
 800d5be:	4b2f      	ldr	r3, [pc, #188]	@ (800d67c <HAL_I2C_Master_Transmit_DMA+0x204>)
 800d5c0:	9300      	str	r3, [sp, #0]
 800d5c2:	0023      	movs	r3, r4
 800d5c4:	f001 fd0e 	bl	800efe4 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800d5c8:	68fb      	ldr	r3, [r7, #12]
 800d5ca:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d5cc:	b29a      	uxth	r2, r3
 800d5ce:	68fb      	ldr	r3, [r7, #12]
 800d5d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d5d2:	1ad3      	subs	r3, r2, r3
 800d5d4:	b29a      	uxth	r2, r3
 800d5d6:	68fb      	ldr	r3, [r7, #12]
 800d5d8:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d5da:	68fb      	ldr	r3, [r7, #12]
 800d5dc:	2240      	movs	r2, #64	@ 0x40
 800d5de:	2100      	movs	r1, #0
 800d5e0:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800d5e2:	68fb      	ldr	r3, [r7, #12]
 800d5e4:	2110      	movs	r1, #16
 800d5e6:	0018      	movs	r0, r3
 800d5e8:	f001 fd36 	bl	800f058 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800d5ec:	68fb      	ldr	r3, [r7, #12]
 800d5ee:	681b      	ldr	r3, [r3, #0]
 800d5f0:	681a      	ldr	r2, [r3, #0]
 800d5f2:	68fb      	ldr	r3, [r7, #12]
 800d5f4:	681b      	ldr	r3, [r3, #0]
 800d5f6:	2180      	movs	r1, #128	@ 0x80
 800d5f8:	01c9      	lsls	r1, r1, #7
 800d5fa:	430a      	orrs	r2, r1
 800d5fc:	601a      	str	r2, [r3, #0]
 800d5fe:	e02d      	b.n	800d65c <HAL_I2C_Master_Transmit_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800d600:	68fb      	ldr	r3, [r7, #12]
 800d602:	2241      	movs	r2, #65	@ 0x41
 800d604:	2120      	movs	r1, #32
 800d606:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800d608:	68fb      	ldr	r3, [r7, #12]
 800d60a:	2242      	movs	r2, #66	@ 0x42
 800d60c:	2100      	movs	r1, #0
 800d60e:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800d610:	68fb      	ldr	r3, [r7, #12]
 800d612:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d614:	2210      	movs	r2, #16
 800d616:	431a      	orrs	r2, r3
 800d618:	68fb      	ldr	r3, [r7, #12]
 800d61a:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d61c:	68fb      	ldr	r3, [r7, #12]
 800d61e:	2240      	movs	r2, #64	@ 0x40
 800d620:	2100      	movs	r1, #0
 800d622:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800d624:	2301      	movs	r3, #1
 800d626:	e01c      	b.n	800d662 <HAL_I2C_Master_Transmit_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800d628:	68fb      	ldr	r3, [r7, #12]
 800d62a:	4a15      	ldr	r2, [pc, #84]	@ (800d680 <HAL_I2C_Master_Transmit_DMA+0x208>)
 800d62c:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to write and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d62e:	68fb      	ldr	r3, [r7, #12]
 800d630:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d632:	b2da      	uxtb	r2, r3
 800d634:	2380      	movs	r3, #128	@ 0x80
 800d636:	049c      	lsls	r4, r3, #18
 800d638:	230a      	movs	r3, #10
 800d63a:	18fb      	adds	r3, r7, r3
 800d63c:	8819      	ldrh	r1, [r3, #0]
 800d63e:	68f8      	ldr	r0, [r7, #12]
 800d640:	4b0e      	ldr	r3, [pc, #56]	@ (800d67c <HAL_I2C_Master_Transmit_DMA+0x204>)
 800d642:	9300      	str	r3, [sp, #0]
 800d644:	0023      	movs	r3, r4
 800d646:	f001 fccd 	bl	800efe4 <I2C_TransferConfig>
                         I2C_GENERATE_START_WRITE);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d64a:	68fb      	ldr	r3, [r7, #12]
 800d64c:	2240      	movs	r2, #64	@ 0x40
 800d64e:	2100      	movs	r1, #0
 800d650:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800d652:	68fb      	ldr	r3, [r7, #12]
 800d654:	2101      	movs	r1, #1
 800d656:	0018      	movs	r0, r3
 800d658:	f001 fcfe 	bl	800f058 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800d65c:	2300      	movs	r3, #0
 800d65e:	e000      	b.n	800d662 <HAL_I2C_Master_Transmit_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800d660:	2302      	movs	r3, #2
  }
}
 800d662:	0018      	movs	r0, r3
 800d664:	46bd      	mov	sp, r7
 800d666:	b006      	add	sp, #24
 800d668:	bdb0      	pop	{r4, r5, r7, pc}
 800d66a:	46c0      	nop			@ (mov r8, r8)
 800d66c:	ffff0000 	.word	0xffff0000
 800d670:	0800de7d 	.word	0x0800de7d
 800d674:	0800ee35 	.word	0x0800ee35
 800d678:	0800ef75 	.word	0x0800ef75
 800d67c:	80002000 	.word	0x80002000
 800d680:	0800da29 	.word	0x0800da29

0800d684 <HAL_I2C_Master_Receive_DMA>:
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_DMA(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData,
                                             uint16_t Size)
{
 800d684:	b5b0      	push	{r4, r5, r7, lr}
 800d686:	b088      	sub	sp, #32
 800d688:	af02      	add	r7, sp, #8
 800d68a:	60f8      	str	r0, [r7, #12]
 800d68c:	0008      	movs	r0, r1
 800d68e:	607a      	str	r2, [r7, #4]
 800d690:	0019      	movs	r1, r3
 800d692:	230a      	movs	r3, #10
 800d694:	18fb      	adds	r3, r7, r3
 800d696:	1c02      	adds	r2, r0, #0
 800d698:	801a      	strh	r2, [r3, #0]
 800d69a:	2308      	movs	r3, #8
 800d69c:	18fb      	adds	r3, r7, r3
 800d69e:	1c0a      	adds	r2, r1, #0
 800d6a0:	801a      	strh	r2, [r3, #0]
  uint32_t xfermode;
  HAL_StatusTypeDef dmaxferstatus;

  if (hi2c->State == HAL_I2C_STATE_READY)
 800d6a2:	68fb      	ldr	r3, [r7, #12]
 800d6a4:	2241      	movs	r2, #65	@ 0x41
 800d6a6:	5c9b      	ldrb	r3, [r3, r2]
 800d6a8:	b2db      	uxtb	r3, r3
 800d6aa:	2b20      	cmp	r3, #32
 800d6ac:	d000      	beq.n	800d6b0 <HAL_I2C_Master_Receive_DMA+0x2c>
 800d6ae:	e0dd      	b.n	800d86c <HAL_I2C_Master_Receive_DMA+0x1e8>
  {
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) == SET)
 800d6b0:	68fb      	ldr	r3, [r7, #12]
 800d6b2:	681b      	ldr	r3, [r3, #0]
 800d6b4:	699a      	ldr	r2, [r3, #24]
 800d6b6:	2380      	movs	r3, #128	@ 0x80
 800d6b8:	021b      	lsls	r3, r3, #8
 800d6ba:	401a      	ands	r2, r3
 800d6bc:	2380      	movs	r3, #128	@ 0x80
 800d6be:	021b      	lsls	r3, r3, #8
 800d6c0:	429a      	cmp	r2, r3
 800d6c2:	d101      	bne.n	800d6c8 <HAL_I2C_Master_Receive_DMA+0x44>
    {
      return HAL_BUSY;
 800d6c4:	2302      	movs	r3, #2
 800d6c6:	e0d2      	b.n	800d86e <HAL_I2C_Master_Receive_DMA+0x1ea>
    }

    /* Process Locked */
    __HAL_LOCK(hi2c);
 800d6c8:	68fb      	ldr	r3, [r7, #12]
 800d6ca:	2240      	movs	r2, #64	@ 0x40
 800d6cc:	5c9b      	ldrb	r3, [r3, r2]
 800d6ce:	2b01      	cmp	r3, #1
 800d6d0:	d101      	bne.n	800d6d6 <HAL_I2C_Master_Receive_DMA+0x52>
 800d6d2:	2302      	movs	r3, #2
 800d6d4:	e0cb      	b.n	800d86e <HAL_I2C_Master_Receive_DMA+0x1ea>
 800d6d6:	68fb      	ldr	r3, [r7, #12]
 800d6d8:	2240      	movs	r2, #64	@ 0x40
 800d6da:	2101      	movs	r1, #1
 800d6dc:	5499      	strb	r1, [r3, r2]

    hi2c->State       = HAL_I2C_STATE_BUSY_RX;
 800d6de:	68fb      	ldr	r3, [r7, #12]
 800d6e0:	2241      	movs	r2, #65	@ 0x41
 800d6e2:	2122      	movs	r1, #34	@ 0x22
 800d6e4:	5499      	strb	r1, [r3, r2]
    hi2c->Mode        = HAL_I2C_MODE_MASTER;
 800d6e6:	68fb      	ldr	r3, [r7, #12]
 800d6e8:	2242      	movs	r2, #66	@ 0x42
 800d6ea:	2110      	movs	r1, #16
 800d6ec:	5499      	strb	r1, [r3, r2]
    hi2c->ErrorCode   = HAL_I2C_ERROR_NONE;
 800d6ee:	68fb      	ldr	r3, [r7, #12]
 800d6f0:	2200      	movs	r2, #0
 800d6f2:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 800d6f4:	68fb      	ldr	r3, [r7, #12]
 800d6f6:	687a      	ldr	r2, [r7, #4]
 800d6f8:	625a      	str	r2, [r3, #36]	@ 0x24
    hi2c->XferCount   = Size;
 800d6fa:	68fb      	ldr	r3, [r7, #12]
 800d6fc:	2208      	movs	r2, #8
 800d6fe:	18ba      	adds	r2, r7, r2
 800d700:	8812      	ldrh	r2, [r2, #0]
 800d702:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800d704:	68fb      	ldr	r3, [r7, #12]
 800d706:	4a5c      	ldr	r2, [pc, #368]	@ (800d878 <HAL_I2C_Master_Receive_DMA+0x1f4>)
 800d708:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->XferISR     = I2C_Master_ISR_DMA;
 800d70a:	68fb      	ldr	r3, [r7, #12]
 800d70c:	4a5b      	ldr	r2, [pc, #364]	@ (800d87c <HAL_I2C_Master_Receive_DMA+0x1f8>)
 800d70e:	635a      	str	r2, [r3, #52]	@ 0x34

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800d710:	68fb      	ldr	r3, [r7, #12]
 800d712:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d714:	b29b      	uxth	r3, r3
 800d716:	2bff      	cmp	r3, #255	@ 0xff
 800d718:	d906      	bls.n	800d728 <HAL_I2C_Master_Receive_DMA+0xa4>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800d71a:	68fb      	ldr	r3, [r7, #12]
 800d71c:	22ff      	movs	r2, #255	@ 0xff
 800d71e:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_RELOAD_MODE;
 800d720:	2380      	movs	r3, #128	@ 0x80
 800d722:	045b      	lsls	r3, r3, #17
 800d724:	617b      	str	r3, [r7, #20]
 800d726:	e007      	b.n	800d738 <HAL_I2C_Master_Receive_DMA+0xb4>
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800d728:	68fb      	ldr	r3, [r7, #12]
 800d72a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d72c:	b29a      	uxth	r2, r3
 800d72e:	68fb      	ldr	r3, [r7, #12]
 800d730:	851a      	strh	r2, [r3, #40]	@ 0x28
      xfermode = I2C_AUTOEND_MODE;
 800d732:	2380      	movs	r3, #128	@ 0x80
 800d734:	049b      	lsls	r3, r3, #18
 800d736:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferSize > 0U)
 800d738:	68fb      	ldr	r3, [r7, #12]
 800d73a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d73c:	2b00      	cmp	r3, #0
 800d73e:	d100      	bne.n	800d742 <HAL_I2C_Master_Receive_DMA+0xbe>
 800d740:	e078      	b.n	800d834 <HAL_I2C_Master_Receive_DMA+0x1b0>
    {
      if (hi2c->hdmarx != NULL)
 800d742:	68fb      	ldr	r3, [r7, #12]
 800d744:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d746:	2b00      	cmp	r3, #0
 800d748:	d023      	beq.n	800d792 <HAL_I2C_Master_Receive_DMA+0x10e>
      {
        /* Set the I2C DMA transfer complete callback */
        hi2c->hdmarx->XferCpltCallback = I2C_DMAMasterReceiveCplt;
 800d74a:	68fb      	ldr	r3, [r7, #12]
 800d74c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d74e:	4a4c      	ldr	r2, [pc, #304]	@ (800d880 <HAL_I2C_Master_Receive_DMA+0x1fc>)
 800d750:	62da      	str	r2, [r3, #44]	@ 0x2c

        /* Set the DMA error callback */
        hi2c->hdmarx->XferErrorCallback = I2C_DMAError;
 800d752:	68fb      	ldr	r3, [r7, #12]
 800d754:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d756:	4a4b      	ldr	r2, [pc, #300]	@ (800d884 <HAL_I2C_Master_Receive_DMA+0x200>)
 800d758:	635a      	str	r2, [r3, #52]	@ 0x34

        /* Set the unused DMA callbacks to NULL */
        hi2c->hdmarx->XferHalfCpltCallback = NULL;
 800d75a:	68fb      	ldr	r3, [r7, #12]
 800d75c:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d75e:	2200      	movs	r2, #0
 800d760:	631a      	str	r2, [r3, #48]	@ 0x30
        hi2c->hdmarx->XferAbortCallback = NULL;
 800d762:	68fb      	ldr	r3, [r7, #12]
 800d764:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800d766:	2200      	movs	r2, #0
 800d768:	639a      	str	r2, [r3, #56]	@ 0x38

        /* Enable the DMA channel */
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800d76a:	68fb      	ldr	r3, [r7, #12]
 800d76c:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800d76e:	68fb      	ldr	r3, [r7, #12]
 800d770:	681b      	ldr	r3, [r3, #0]
 800d772:	3324      	adds	r3, #36	@ 0x24
 800d774:	0019      	movs	r1, r3
 800d776:	687a      	ldr	r2, [r7, #4]
                                         hi2c->XferSize);
 800d778:	68fb      	ldr	r3, [r7, #12]
 800d77a:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
        dmaxferstatus = HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)pData,
 800d77c:	2513      	movs	r5, #19
 800d77e:	197c      	adds	r4, r7, r5
 800d780:	f7ff f888 	bl	800c894 <HAL_DMA_Start_IT>
 800d784:	0003      	movs	r3, r0
 800d786:	7023      	strb	r3, [r4, #0]
        __HAL_UNLOCK(hi2c);

        return HAL_ERROR;
      }

      if (dmaxferstatus == HAL_OK)
 800d788:	197b      	adds	r3, r7, r5
 800d78a:	781b      	ldrb	r3, [r3, #0]
 800d78c:	2b00      	cmp	r3, #0
 800d78e:	d13d      	bne.n	800d80c <HAL_I2C_Master_Receive_DMA+0x188>
 800d790:	e013      	b.n	800d7ba <HAL_I2C_Master_Receive_DMA+0x136>
        hi2c->State     = HAL_I2C_STATE_READY;
 800d792:	68fb      	ldr	r3, [r7, #12]
 800d794:	2241      	movs	r2, #65	@ 0x41
 800d796:	2120      	movs	r1, #32
 800d798:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800d79a:	68fb      	ldr	r3, [r7, #12]
 800d79c:	2242      	movs	r2, #66	@ 0x42
 800d79e:	2100      	movs	r1, #0
 800d7a0:	5499      	strb	r1, [r3, r2]
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA_PARAM;
 800d7a2:	68fb      	ldr	r3, [r7, #12]
 800d7a4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d7a6:	2280      	movs	r2, #128	@ 0x80
 800d7a8:	431a      	orrs	r2, r3
 800d7aa:	68fb      	ldr	r3, [r7, #12]
 800d7ac:	645a      	str	r2, [r3, #68]	@ 0x44
        __HAL_UNLOCK(hi2c);
 800d7ae:	68fb      	ldr	r3, [r7, #12]
 800d7b0:	2240      	movs	r2, #64	@ 0x40
 800d7b2:	2100      	movs	r1, #0
 800d7b4:	5499      	strb	r1, [r3, r2]
        return HAL_ERROR;
 800d7b6:	2301      	movs	r3, #1
 800d7b8:	e059      	b.n	800d86e <HAL_I2C_Master_Receive_DMA+0x1ea>
      {
        /* Send Slave Address */
        /* Set NBYTES to read and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
        I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, xfermode, I2C_GENERATE_START_READ);
 800d7ba:	68fb      	ldr	r3, [r7, #12]
 800d7bc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d7be:	b2da      	uxtb	r2, r3
 800d7c0:	697c      	ldr	r4, [r7, #20]
 800d7c2:	230a      	movs	r3, #10
 800d7c4:	18fb      	adds	r3, r7, r3
 800d7c6:	8819      	ldrh	r1, [r3, #0]
 800d7c8:	68f8      	ldr	r0, [r7, #12]
 800d7ca:	4b2f      	ldr	r3, [pc, #188]	@ (800d888 <HAL_I2C_Master_Receive_DMA+0x204>)
 800d7cc:	9300      	str	r3, [sp, #0]
 800d7ce:	0023      	movs	r3, r4
 800d7d0:	f001 fc08 	bl	800efe4 <I2C_TransferConfig>

        /* Update XferCount value */
        hi2c->XferCount -= hi2c->XferSize;
 800d7d4:	68fb      	ldr	r3, [r7, #12]
 800d7d6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800d7d8:	b29a      	uxth	r2, r3
 800d7da:	68fb      	ldr	r3, [r7, #12]
 800d7dc:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d7de:	1ad3      	subs	r3, r2, r3
 800d7e0:	b29a      	uxth	r2, r3
 800d7e2:	68fb      	ldr	r3, [r7, #12]
 800d7e4:	855a      	strh	r2, [r3, #42]	@ 0x2a

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d7e6:	68fb      	ldr	r3, [r7, #12]
 800d7e8:	2240      	movs	r2, #64	@ 0x40
 800d7ea:	2100      	movs	r1, #0
 800d7ec:	5499      	strb	r1, [r3, r2]

        /* Note : The I2C interrupts must be enabled after unlocking current process
                  to avoid the risk of I2C interrupt handle execution before current
                  process unlock */
        /* Enable ERR and NACK interrupts */
        I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800d7ee:	68fb      	ldr	r3, [r7, #12]
 800d7f0:	2110      	movs	r1, #16
 800d7f2:	0018      	movs	r0, r3
 800d7f4:	f001 fc30 	bl	800f058 <I2C_Enable_IRQ>

        /* Enable DMA Request */
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800d7f8:	68fb      	ldr	r3, [r7, #12]
 800d7fa:	681b      	ldr	r3, [r3, #0]
 800d7fc:	681a      	ldr	r2, [r3, #0]
 800d7fe:	68fb      	ldr	r3, [r7, #12]
 800d800:	681b      	ldr	r3, [r3, #0]
 800d802:	2180      	movs	r1, #128	@ 0x80
 800d804:	0209      	lsls	r1, r1, #8
 800d806:	430a      	orrs	r2, r1
 800d808:	601a      	str	r2, [r3, #0]
 800d80a:	e02d      	b.n	800d868 <HAL_I2C_Master_Receive_DMA+0x1e4>
      }
      else
      {
        /* Update I2C state */
        hi2c->State     = HAL_I2C_STATE_READY;
 800d80c:	68fb      	ldr	r3, [r7, #12]
 800d80e:	2241      	movs	r2, #65	@ 0x41
 800d810:	2120      	movs	r1, #32
 800d812:	5499      	strb	r1, [r3, r2]
        hi2c->Mode      = HAL_I2C_MODE_NONE;
 800d814:	68fb      	ldr	r3, [r7, #12]
 800d816:	2242      	movs	r2, #66	@ 0x42
 800d818:	2100      	movs	r1, #0
 800d81a:	5499      	strb	r1, [r3, r2]

        /* Update I2C error code */
        hi2c->ErrorCode |= HAL_I2C_ERROR_DMA;
 800d81c:	68fb      	ldr	r3, [r7, #12]
 800d81e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d820:	2210      	movs	r2, #16
 800d822:	431a      	orrs	r2, r3
 800d824:	68fb      	ldr	r3, [r7, #12]
 800d826:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 800d828:	68fb      	ldr	r3, [r7, #12]
 800d82a:	2240      	movs	r2, #64	@ 0x40
 800d82c:	2100      	movs	r1, #0
 800d82e:	5499      	strb	r1, [r3, r2]

        return HAL_ERROR;
 800d830:	2301      	movs	r3, #1
 800d832:	e01c      	b.n	800d86e <HAL_I2C_Master_Receive_DMA+0x1ea>
      }
    }
    else
    {
      /* Update Transfer ISR function pointer */
      hi2c->XferISR = I2C_Master_ISR_IT;
 800d834:	68fb      	ldr	r3, [r7, #12]
 800d836:	4a15      	ldr	r2, [pc, #84]	@ (800d88c <HAL_I2C_Master_Receive_DMA+0x208>)
 800d838:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Send Slave Address */
      /* Set NBYTES to read and generate START condition */
      I2C_TransferConfig(hi2c, DevAddress, (uint8_t)hi2c->XferSize, I2C_AUTOEND_MODE,
 800d83a:	68fb      	ldr	r3, [r7, #12]
 800d83c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800d83e:	b2da      	uxtb	r2, r3
 800d840:	2380      	movs	r3, #128	@ 0x80
 800d842:	049c      	lsls	r4, r3, #18
 800d844:	230a      	movs	r3, #10
 800d846:	18fb      	adds	r3, r7, r3
 800d848:	8819      	ldrh	r1, [r3, #0]
 800d84a:	68f8      	ldr	r0, [r7, #12]
 800d84c:	4b0e      	ldr	r3, [pc, #56]	@ (800d888 <HAL_I2C_Master_Receive_DMA+0x204>)
 800d84e:	9300      	str	r3, [sp, #0]
 800d850:	0023      	movs	r3, r4
 800d852:	f001 fbc7 	bl	800efe4 <I2C_TransferConfig>
                         I2C_GENERATE_START_READ);

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800d856:	68fb      	ldr	r3, [r7, #12]
 800d858:	2240      	movs	r2, #64	@ 0x40
 800d85a:	2100      	movs	r1, #0
 800d85c:	5499      	strb	r1, [r3, r2]
                process unlock */
      /* Enable ERR, TC, STOP, NACK, TXI interrupt */
      /* possible to enable all of these */
      /* I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI |
        I2C_IT_ADDRI | I2C_IT_RXI | I2C_IT_TXI */
      I2C_Enable_IRQ(hi2c, I2C_XFER_TX_IT);
 800d85e:	68fb      	ldr	r3, [r7, #12]
 800d860:	2101      	movs	r1, #1
 800d862:	0018      	movs	r0, r3
 800d864:	f001 fbf8 	bl	800f058 <I2C_Enable_IRQ>
    }

    return HAL_OK;
 800d868:	2300      	movs	r3, #0
 800d86a:	e000      	b.n	800d86e <HAL_I2C_Master_Receive_DMA+0x1ea>
  }
  else
  {
    return HAL_BUSY;
 800d86c:	2302      	movs	r3, #2
  }
}
 800d86e:	0018      	movs	r0, r3
 800d870:	46bd      	mov	sp, r7
 800d872:	b006      	add	sp, #24
 800d874:	bdb0      	pop	{r4, r5, r7, pc}
 800d876:	46c0      	nop			@ (mov r8, r8)
 800d878:	ffff0000 	.word	0xffff0000
 800d87c:	0800de7d 	.word	0x0800de7d
 800d880:	0800eed5 	.word	0x0800eed5
 800d884:	0800ef75 	.word	0x0800ef75
 800d888:	80002400 	.word	0x80002400
 800d88c:	0800da29 	.word	0x0800da29

0800d890 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c) /* Derogation MISRAC2012-Rule-8.13 */
{
 800d890:	b580      	push	{r7, lr}
 800d892:	b084      	sub	sp, #16
 800d894:	af00      	add	r7, sp, #0
 800d896:	6078      	str	r0, [r7, #4]
  /* Get current IT Flags and IT sources value */
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800d898:	687b      	ldr	r3, [r7, #4]
 800d89a:	681b      	ldr	r3, [r3, #0]
 800d89c:	699b      	ldr	r3, [r3, #24]
 800d89e:	60fb      	str	r3, [r7, #12]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800d8a0:	687b      	ldr	r3, [r7, #4]
 800d8a2:	681b      	ldr	r3, [r3, #0]
 800d8a4:	681b      	ldr	r3, [r3, #0]
 800d8a6:	60bb      	str	r3, [r7, #8]

  /* I2C events treatment -------------------------------------*/
  if (hi2c->XferISR != NULL)
 800d8a8:	687b      	ldr	r3, [r7, #4]
 800d8aa:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d8ac:	2b00      	cmp	r3, #0
 800d8ae:	d005      	beq.n	800d8bc <HAL_I2C_EV_IRQHandler+0x2c>
  {
    hi2c->XferISR(hi2c, itflags, itsources);
 800d8b0:	687b      	ldr	r3, [r7, #4]
 800d8b2:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 800d8b4:	68ba      	ldr	r2, [r7, #8]
 800d8b6:	68f9      	ldr	r1, [r7, #12]
 800d8b8:	6878      	ldr	r0, [r7, #4]
 800d8ba:	4798      	blx	r3
  }
}
 800d8bc:	46c0      	nop			@ (mov r8, r8)
 800d8be:	46bd      	mov	sp, r7
 800d8c0:	b004      	add	sp, #16
 800d8c2:	bd80      	pop	{r7, pc}

0800d8c4 <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800d8c4:	b580      	push	{r7, lr}
 800d8c6:	b086      	sub	sp, #24
 800d8c8:	af00      	add	r7, sp, #0
 800d8ca:	6078      	str	r0, [r7, #4]
  uint32_t itflags   = READ_REG(hi2c->Instance->ISR);
 800d8cc:	687b      	ldr	r3, [r7, #4]
 800d8ce:	681b      	ldr	r3, [r3, #0]
 800d8d0:	699b      	ldr	r3, [r3, #24]
 800d8d2:	617b      	str	r3, [r7, #20]
  uint32_t itsources = READ_REG(hi2c->Instance->CR1);
 800d8d4:	687b      	ldr	r3, [r7, #4]
 800d8d6:	681b      	ldr	r3, [r3, #0]
 800d8d8:	681b      	ldr	r3, [r3, #0]
 800d8da:	613b      	str	r3, [r7, #16]
  uint32_t tmperror;

  /* I2C Bus error interrupt occurred ------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800d8dc:	697a      	ldr	r2, [r7, #20]
 800d8de:	2380      	movs	r3, #128	@ 0x80
 800d8e0:	005b      	lsls	r3, r3, #1
 800d8e2:	4013      	ands	r3, r2
 800d8e4:	d00e      	beq.n	800d904 <HAL_I2C_ER_IRQHandler+0x40>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800d8e6:	693b      	ldr	r3, [r7, #16]
 800d8e8:	2280      	movs	r2, #128	@ 0x80
 800d8ea:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_BERR) != RESET) && \
 800d8ec:	d00a      	beq.n	800d904 <HAL_I2C_ER_IRQHandler+0x40>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_BERR;
 800d8ee:	687b      	ldr	r3, [r7, #4]
 800d8f0:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d8f2:	2201      	movs	r2, #1
 800d8f4:	431a      	orrs	r2, r3
 800d8f6:	687b      	ldr	r3, [r7, #4]
 800d8f8:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800d8fa:	687b      	ldr	r3, [r7, #4]
 800d8fc:	681b      	ldr	r3, [r3, #0]
 800d8fe:	2280      	movs	r2, #128	@ 0x80
 800d900:	0052      	lsls	r2, r2, #1
 800d902:	61da      	str	r2, [r3, #28]
  }

  /* I2C Over-Run/Under-Run interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800d904:	697a      	ldr	r2, [r7, #20]
 800d906:	2380      	movs	r3, #128	@ 0x80
 800d908:	00db      	lsls	r3, r3, #3
 800d90a:	4013      	ands	r3, r2
 800d90c:	d00e      	beq.n	800d92c <HAL_I2C_ER_IRQHandler+0x68>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800d90e:	693b      	ldr	r3, [r7, #16]
 800d910:	2280      	movs	r2, #128	@ 0x80
 800d912:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_OVR) != RESET) && \
 800d914:	d00a      	beq.n	800d92c <HAL_I2C_ER_IRQHandler+0x68>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_OVR;
 800d916:	687b      	ldr	r3, [r7, #4]
 800d918:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d91a:	2208      	movs	r2, #8
 800d91c:	431a      	orrs	r2, r3
 800d91e:	687b      	ldr	r3, [r7, #4]
 800d920:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800d922:	687b      	ldr	r3, [r7, #4]
 800d924:	681b      	ldr	r3, [r3, #0]
 800d926:	2280      	movs	r2, #128	@ 0x80
 800d928:	00d2      	lsls	r2, r2, #3
 800d92a:	61da      	str	r2, [r3, #28]
  }

  /* I2C Arbitration Loss error interrupt occurred -------------------------------------*/
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800d92c:	697a      	ldr	r2, [r7, #20]
 800d92e:	2380      	movs	r3, #128	@ 0x80
 800d930:	009b      	lsls	r3, r3, #2
 800d932:	4013      	ands	r3, r2
 800d934:	d00e      	beq.n	800d954 <HAL_I2C_ER_IRQHandler+0x90>
      (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERRI) != RESET))
 800d936:	693b      	ldr	r3, [r7, #16]
 800d938:	2280      	movs	r2, #128	@ 0x80
 800d93a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(itflags, I2C_FLAG_ARLO) != RESET) && \
 800d93c:	d00a      	beq.n	800d954 <HAL_I2C_ER_IRQHandler+0x90>
  {
    hi2c->ErrorCode |= HAL_I2C_ERROR_ARLO;
 800d93e:	687b      	ldr	r3, [r7, #4]
 800d940:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d942:	2202      	movs	r2, #2
 800d944:	431a      	orrs	r2, r3
 800d946:	687b      	ldr	r3, [r7, #4]
 800d948:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800d94a:	687b      	ldr	r3, [r7, #4]
 800d94c:	681b      	ldr	r3, [r3, #0]
 800d94e:	2280      	movs	r2, #128	@ 0x80
 800d950:	0092      	lsls	r2, r2, #2
 800d952:	61da      	str	r2, [r3, #28]
  }

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800d954:	687b      	ldr	r3, [r7, #4]
 800d956:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800d958:	60fb      	str	r3, [r7, #12]

  /* Call the Error Callback in case of Error detected */
  if ((tmperror & (HAL_I2C_ERROR_BERR | HAL_I2C_ERROR_OVR | HAL_I2C_ERROR_ARLO)) !=  HAL_I2C_ERROR_NONE)
 800d95a:	68fb      	ldr	r3, [r7, #12]
 800d95c:	220b      	movs	r2, #11
 800d95e:	4013      	ands	r3, r2
 800d960:	d005      	beq.n	800d96e <HAL_I2C_ER_IRQHandler+0xaa>
  {
    I2C_ITError(hi2c, tmperror);
 800d962:	68fa      	ldr	r2, [r7, #12]
 800d964:	687b      	ldr	r3, [r7, #4]
 800d966:	0011      	movs	r1, r2
 800d968:	0018      	movs	r0, r3
 800d96a:	f001 f915 	bl	800eb98 <I2C_ITError>
  }
}
 800d96e:	46c0      	nop			@ (mov r8, r8)
 800d970:	46bd      	mov	sp, r7
 800d972:	b006      	add	sp, #24
 800d974:	bd80      	pop	{r7, pc}

0800d976 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d976:	b580      	push	{r7, lr}
 800d978:	b082      	sub	sp, #8
 800d97a:	af00      	add	r7, sp, #0
 800d97c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800d97e:	46c0      	nop			@ (mov r8, r8)
 800d980:	46bd      	mov	sp, r7
 800d982:	b002      	add	sp, #8
 800d984:	bd80      	pop	{r7, pc}

0800d986 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d986:	b580      	push	{r7, lr}
 800d988:	b082      	sub	sp, #8
 800d98a:	af00      	add	r7, sp, #0
 800d98c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 800d98e:	46c0      	nop			@ (mov r8, r8)
 800d990:	46bd      	mov	sp, r7
 800d992:	b002      	add	sp, #8
 800d994:	bd80      	pop	{r7, pc}

0800d996 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d996:	b580      	push	{r7, lr}
 800d998:	b082      	sub	sp, #8
 800d99a:	af00      	add	r7, sp, #0
 800d99c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800d99e:	46c0      	nop			@ (mov r8, r8)
 800d9a0:	46bd      	mov	sp, r7
 800d9a2:	b002      	add	sp, #8
 800d9a4:	bd80      	pop	{r7, pc}

0800d9a6 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d9a6:	b580      	push	{r7, lr}
 800d9a8:	b082      	sub	sp, #8
 800d9aa:	af00      	add	r7, sp, #0
 800d9ac:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800d9ae:	46c0      	nop			@ (mov r8, r8)
 800d9b0:	46bd      	mov	sp, r7
 800d9b2:	b002      	add	sp, #8
 800d9b4:	bd80      	pop	{r7, pc}

0800d9b6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XFERDIRECTION
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 800d9b6:	b580      	push	{r7, lr}
 800d9b8:	b082      	sub	sp, #8
 800d9ba:	af00      	add	r7, sp, #0
 800d9bc:	6078      	str	r0, [r7, #4]
 800d9be:	0008      	movs	r0, r1
 800d9c0:	0011      	movs	r1, r2
 800d9c2:	1cfb      	adds	r3, r7, #3
 800d9c4:	1c02      	adds	r2, r0, #0
 800d9c6:	701a      	strb	r2, [r3, #0]
 800d9c8:	003b      	movs	r3, r7
 800d9ca:	1c0a      	adds	r2, r1, #0
 800d9cc:	801a      	strh	r2, [r3, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 800d9ce:	46c0      	nop			@ (mov r8, r8)
 800d9d0:	46bd      	mov	sp, r7
 800d9d2:	b002      	add	sp, #8
 800d9d4:	bd80      	pop	{r7, pc}

0800d9d6 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d9d6:	b580      	push	{r7, lr}
 800d9d8:	b082      	sub	sp, #8
 800d9da:	af00      	add	r7, sp, #0
 800d9dc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
   */
}
 800d9de:	46c0      	nop			@ (mov r8, r8)
 800d9e0:	46bd      	mov	sp, r7
 800d9e2:	b002      	add	sp, #8
 800d9e4:	bd80      	pop	{r7, pc}

0800d9e6 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d9e6:	b580      	push	{r7, lr}
 800d9e8:	b082      	sub	sp, #8
 800d9ea:	af00      	add	r7, sp, #0
 800d9ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 800d9ee:	46c0      	nop			@ (mov r8, r8)
 800d9f0:	46bd      	mov	sp, r7
 800d9f2:	b002      	add	sp, #8
 800d9f4:	bd80      	pop	{r7, pc}

0800d9f6 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800d9f6:	b580      	push	{r7, lr}
 800d9f8:	b082      	sub	sp, #8
 800d9fa:	af00      	add	r7, sp, #0
 800d9fc:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 800d9fe:	46c0      	nop			@ (mov r8, r8)
 800da00:	46bd      	mov	sp, r7
 800da02:	b002      	add	sp, #8
 800da04:	bd80      	pop	{r7, pc}

0800da06 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800da06:	b580      	push	{r7, lr}
 800da08:	b082      	sub	sp, #8
 800da0a:	af00      	add	r7, sp, #0
 800da0c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800da0e:	46c0      	nop			@ (mov r8, r8)
 800da10:	46bd      	mov	sp, r7
 800da12:	b002      	add	sp, #8
 800da14:	bd80      	pop	{r7, pc}

0800da16 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800da16:	b580      	push	{r7, lr}
 800da18:	b082      	sub	sp, #8
 800da1a:	af00      	add	r7, sp, #0
 800da1c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800da1e:	46c0      	nop			@ (mov r8, r8)
 800da20:	46bd      	mov	sp, r7
 800da22:	b002      	add	sp, #8
 800da24:	bd80      	pop	{r7, pc}
	...

0800da28 <I2C_Master_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800da28:	b590      	push	{r4, r7, lr}
 800da2a:	b089      	sub	sp, #36	@ 0x24
 800da2c:	af02      	add	r7, sp, #8
 800da2e:	60f8      	str	r0, [r7, #12]
 800da30:	60b9      	str	r1, [r7, #8]
 800da32:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t tmpITFlags = ITFlags;
 800da34:	68bb      	ldr	r3, [r7, #8]
 800da36:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800da38:	68fb      	ldr	r3, [r7, #12]
 800da3a:	2240      	movs	r2, #64	@ 0x40
 800da3c:	5c9b      	ldrb	r3, [r3, r2]
 800da3e:	2b01      	cmp	r3, #1
 800da40:	d101      	bne.n	800da46 <I2C_Master_ISR_IT+0x1e>
 800da42:	2302      	movs	r3, #2
 800da44:	e113      	b.n	800dc6e <I2C_Master_ISR_IT+0x246>
 800da46:	68fb      	ldr	r3, [r7, #12]
 800da48:	2240      	movs	r2, #64	@ 0x40
 800da4a:	2101      	movs	r1, #1
 800da4c:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800da4e:	697b      	ldr	r3, [r7, #20]
 800da50:	2210      	movs	r2, #16
 800da52:	4013      	ands	r3, r2
 800da54:	d012      	beq.n	800da7c <I2C_Master_ISR_IT+0x54>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800da56:	687b      	ldr	r3, [r7, #4]
 800da58:	2210      	movs	r2, #16
 800da5a:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800da5c:	d00e      	beq.n	800da7c <I2C_Master_ISR_IT+0x54>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800da5e:	68fb      	ldr	r3, [r7, #12]
 800da60:	681b      	ldr	r3, [r3, #0]
 800da62:	2210      	movs	r2, #16
 800da64:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    /* No need to generate STOP, it is automatically done */
    /* Error callback will be send during stop flag treatment */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800da66:	68fb      	ldr	r3, [r7, #12]
 800da68:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800da6a:	2204      	movs	r2, #4
 800da6c:	431a      	orrs	r2, r3
 800da6e:	68fb      	ldr	r3, [r7, #12]
 800da70:	645a      	str	r2, [r3, #68]	@ 0x44

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800da72:	68fb      	ldr	r3, [r7, #12]
 800da74:	0018      	movs	r0, r3
 800da76:	f001 f9ba 	bl	800edee <I2C_Flush_TXDR>
 800da7a:	e0e5      	b.n	800dc48 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800da7c:	697b      	ldr	r3, [r7, #20]
 800da7e:	2204      	movs	r2, #4
 800da80:	4013      	ands	r3, r2
 800da82:	d021      	beq.n	800dac8 <I2C_Master_ISR_IT+0xa0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800da84:	687b      	ldr	r3, [r7, #4]
 800da86:	2204      	movs	r2, #4
 800da88:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800da8a:	d01d      	beq.n	800dac8 <I2C_Master_ISR_IT+0xa0>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800da8c:	697b      	ldr	r3, [r7, #20]
 800da8e:	2204      	movs	r2, #4
 800da90:	4393      	bics	r3, r2
 800da92:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800da94:	68fb      	ldr	r3, [r7, #12]
 800da96:	681b      	ldr	r3, [r3, #0]
 800da98:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800da9a:	68fb      	ldr	r3, [r7, #12]
 800da9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800da9e:	b2d2      	uxtb	r2, r2
 800daa0:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800daa2:	68fb      	ldr	r3, [r7, #12]
 800daa4:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800daa6:	1c5a      	adds	r2, r3, #1
 800daa8:	68fb      	ldr	r3, [r7, #12]
 800daaa:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800daac:	68fb      	ldr	r3, [r7, #12]
 800daae:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dab0:	3b01      	subs	r3, #1
 800dab2:	b29a      	uxth	r2, r3
 800dab4:	68fb      	ldr	r3, [r7, #12]
 800dab6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800dab8:	68fb      	ldr	r3, [r7, #12]
 800daba:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dabc:	b29b      	uxth	r3, r3
 800dabe:	3b01      	subs	r3, #1
 800dac0:	b29a      	uxth	r2, r3
 800dac2:	68fb      	ldr	r3, [r7, #12]
 800dac4:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800dac6:	e0bf      	b.n	800dc48 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800dac8:	697b      	ldr	r3, [r7, #20]
 800daca:	2202      	movs	r2, #2
 800dacc:	4013      	ands	r3, r2
 800dace:	d01c      	beq.n	800db0a <I2C_Master_ISR_IT+0xe2>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800dad0:	687b      	ldr	r3, [r7, #4]
 800dad2:	2202      	movs	r2, #2
 800dad4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800dad6:	d018      	beq.n	800db0a <I2C_Master_ISR_IT+0xe2>
  {
    /* Write data to TXDR */
    hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800dad8:	68fb      	ldr	r3, [r7, #12]
 800dada:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dadc:	781a      	ldrb	r2, [r3, #0]
 800dade:	68fb      	ldr	r3, [r7, #12]
 800dae0:	681b      	ldr	r3, [r3, #0]
 800dae2:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800dae4:	68fb      	ldr	r3, [r7, #12]
 800dae6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dae8:	1c5a      	adds	r2, r3, #1
 800daea:	68fb      	ldr	r3, [r7, #12]
 800daec:	625a      	str	r2, [r3, #36]	@ 0x24

    hi2c->XferSize--;
 800daee:	68fb      	ldr	r3, [r7, #12]
 800daf0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800daf2:	3b01      	subs	r3, #1
 800daf4:	b29a      	uxth	r2, r3
 800daf6:	68fb      	ldr	r3, [r7, #12]
 800daf8:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2c->XferCount--;
 800dafa:	68fb      	ldr	r3, [r7, #12]
 800dafc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dafe:	b29b      	uxth	r3, r3
 800db00:	3b01      	subs	r3, #1
 800db02:	b29a      	uxth	r2, r3
 800db04:	68fb      	ldr	r3, [r7, #12]
 800db06:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800db08:	e09e      	b.n	800dc48 <I2C_Master_ISR_IT+0x220>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800db0a:	697b      	ldr	r3, [r7, #20]
 800db0c:	2280      	movs	r2, #128	@ 0x80
 800db0e:	4013      	ands	r3, r2
 800db10:	d100      	bne.n	800db14 <I2C_Master_ISR_IT+0xec>
 800db12:	e069      	b.n	800dbe8 <I2C_Master_ISR_IT+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800db14:	687b      	ldr	r3, [r7, #4]
 800db16:	2240      	movs	r2, #64	@ 0x40
 800db18:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TCR) != RESET) && \
 800db1a:	d065      	beq.n	800dbe8 <I2C_Master_ISR_IT+0x1c0>
  {
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800db1c:	68fb      	ldr	r3, [r7, #12]
 800db1e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800db20:	b29b      	uxth	r3, r3
 800db22:	2b00      	cmp	r3, #0
 800db24:	d04a      	beq.n	800dbbc <I2C_Master_ISR_IT+0x194>
 800db26:	68fb      	ldr	r3, [r7, #12]
 800db28:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800db2a:	2b00      	cmp	r3, #0
 800db2c:	d146      	bne.n	800dbbc <I2C_Master_ISR_IT+0x194>
    {
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800db2e:	68fb      	ldr	r3, [r7, #12]
 800db30:	681b      	ldr	r3, [r3, #0]
 800db32:	685b      	ldr	r3, [r3, #4]
 800db34:	b29a      	uxth	r2, r3
 800db36:	2112      	movs	r1, #18
 800db38:	187b      	adds	r3, r7, r1
 800db3a:	0592      	lsls	r2, r2, #22
 800db3c:	0d92      	lsrs	r2, r2, #22
 800db3e:	801a      	strh	r2, [r3, #0]

      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800db40:	68fb      	ldr	r3, [r7, #12]
 800db42:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800db44:	b29b      	uxth	r3, r3
 800db46:	2bff      	cmp	r3, #255	@ 0xff
 800db48:	d910      	bls.n	800db6c <I2C_Master_ISR_IT+0x144>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800db4a:	68fb      	ldr	r3, [r7, #12]
 800db4c:	22ff      	movs	r2, #255	@ 0xff
 800db4e:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
 800db50:	68fb      	ldr	r3, [r7, #12]
 800db52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800db54:	b2da      	uxtb	r2, r3
 800db56:	2380      	movs	r3, #128	@ 0x80
 800db58:	045c      	lsls	r4, r3, #17
 800db5a:	187b      	adds	r3, r7, r1
 800db5c:	8819      	ldrh	r1, [r3, #0]
 800db5e:	68f8      	ldr	r0, [r7, #12]
 800db60:	2300      	movs	r3, #0
 800db62:	9300      	str	r3, [sp, #0]
 800db64:	0023      	movs	r3, r4
 800db66:	f001 fa3d 	bl	800efe4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800db6a:	e03c      	b.n	800dbe6 <I2C_Master_ISR_IT+0x1be>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800db6c:	68fb      	ldr	r3, [r7, #12]
 800db6e:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800db70:	b29a      	uxth	r2, r3
 800db72:	68fb      	ldr	r3, [r7, #12]
 800db74:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800db76:	68fb      	ldr	r3, [r7, #12]
 800db78:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800db7a:	4a3f      	ldr	r2, [pc, #252]	@ (800dc78 <I2C_Master_ISR_IT+0x250>)
 800db7c:	4293      	cmp	r3, r2
 800db7e:	d00e      	beq.n	800db9e <I2C_Master_ISR_IT+0x176>
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800db80:	68fb      	ldr	r3, [r7, #12]
 800db82:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800db84:	b2da      	uxtb	r2, r3
                             hi2c->XferOptions, I2C_NO_STARTSTOP);
 800db86:	68fb      	ldr	r3, [r7, #12]
 800db88:	6adc      	ldr	r4, [r3, #44]	@ 0x2c
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800db8a:	2312      	movs	r3, #18
 800db8c:	18fb      	adds	r3, r7, r3
 800db8e:	8819      	ldrh	r1, [r3, #0]
 800db90:	68f8      	ldr	r0, [r7, #12]
 800db92:	2300      	movs	r3, #0
 800db94:	9300      	str	r3, [sp, #0]
 800db96:	0023      	movs	r3, r4
 800db98:	f001 fa24 	bl	800efe4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800db9c:	e023      	b.n	800dbe6 <I2C_Master_ISR_IT+0x1be>
        }
        else
        {
          I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize,
 800db9e:	68fb      	ldr	r3, [r7, #12]
 800dba0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dba2:	b2da      	uxtb	r2, r3
 800dba4:	2380      	movs	r3, #128	@ 0x80
 800dba6:	049c      	lsls	r4, r3, #18
 800dba8:	2312      	movs	r3, #18
 800dbaa:	18fb      	adds	r3, r7, r3
 800dbac:	8819      	ldrh	r1, [r3, #0]
 800dbae:	68f8      	ldr	r0, [r7, #12]
 800dbb0:	2300      	movs	r3, #0
 800dbb2:	9300      	str	r3, [sp, #0]
 800dbb4:	0023      	movs	r3, r4
 800dbb6:	f001 fa15 	bl	800efe4 <I2C_TransferConfig>
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800dbba:	e014      	b.n	800dbe6 <I2C_Master_ISR_IT+0x1be>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800dbbc:	68fb      	ldr	r3, [r7, #12]
 800dbbe:	681b      	ldr	r3, [r3, #0]
 800dbc0:	685a      	ldr	r2, [r3, #4]
 800dbc2:	2380      	movs	r3, #128	@ 0x80
 800dbc4:	049b      	lsls	r3, r3, #18
 800dbc6:	401a      	ands	r2, r3
 800dbc8:	2380      	movs	r3, #128	@ 0x80
 800dbca:	049b      	lsls	r3, r3, #18
 800dbcc:	429a      	cmp	r2, r3
 800dbce:	d004      	beq.n	800dbda <I2C_Master_ISR_IT+0x1b2>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800dbd0:	68fb      	ldr	r3, [r7, #12]
 800dbd2:	0018      	movs	r0, r3
 800dbd4:	f000 fcf4 	bl	800e5c0 <I2C_ITMasterSeqCplt>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800dbd8:	e036      	b.n	800dc48 <I2C_Master_ISR_IT+0x220>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800dbda:	68fb      	ldr	r3, [r7, #12]
 800dbdc:	2140      	movs	r1, #64	@ 0x40
 800dbde:	0018      	movs	r0, r3
 800dbe0:	f000 ffda 	bl	800eb98 <I2C_ITError>
    if ((hi2c->XferCount != 0U) && (hi2c->XferSize == 0U))
 800dbe4:	e030      	b.n	800dc48 <I2C_Master_ISR_IT+0x220>
 800dbe6:	e02f      	b.n	800dc48 <I2C_Master_ISR_IT+0x220>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800dbe8:	697b      	ldr	r3, [r7, #20]
 800dbea:	2240      	movs	r2, #64	@ 0x40
 800dbec:	4013      	ands	r3, r2
 800dbee:	d02b      	beq.n	800dc48 <I2C_Master_ISR_IT+0x220>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800dbf0:	687b      	ldr	r3, [r7, #4]
 800dbf2:	2240      	movs	r2, #64	@ 0x40
 800dbf4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TC) != RESET) && \
 800dbf6:	d027      	beq.n	800dc48 <I2C_Master_ISR_IT+0x220>
  {
    if (hi2c->XferCount == 0U)
 800dbf8:	68fb      	ldr	r3, [r7, #12]
 800dbfa:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dbfc:	b29b      	uxth	r3, r3
 800dbfe:	2b00      	cmp	r3, #0
 800dc00:	d11d      	bne.n	800dc3e <I2C_Master_ISR_IT+0x216>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800dc02:	68fb      	ldr	r3, [r7, #12]
 800dc04:	681b      	ldr	r3, [r3, #0]
 800dc06:	685a      	ldr	r2, [r3, #4]
 800dc08:	2380      	movs	r3, #128	@ 0x80
 800dc0a:	049b      	lsls	r3, r3, #18
 800dc0c:	401a      	ands	r2, r3
 800dc0e:	2380      	movs	r3, #128	@ 0x80
 800dc10:	049b      	lsls	r3, r3, #18
 800dc12:	429a      	cmp	r2, r3
 800dc14:	d018      	beq.n	800dc48 <I2C_Master_ISR_IT+0x220>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800dc16:	68fb      	ldr	r3, [r7, #12]
 800dc18:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc1a:	4a17      	ldr	r2, [pc, #92]	@ (800dc78 <I2C_Master_ISR_IT+0x250>)
 800dc1c:	4293      	cmp	r3, r2
 800dc1e:	d109      	bne.n	800dc34 <I2C_Master_ISR_IT+0x20c>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800dc20:	68fb      	ldr	r3, [r7, #12]
 800dc22:	681b      	ldr	r3, [r3, #0]
 800dc24:	685a      	ldr	r2, [r3, #4]
 800dc26:	68fb      	ldr	r3, [r7, #12]
 800dc28:	681b      	ldr	r3, [r3, #0]
 800dc2a:	2180      	movs	r1, #128	@ 0x80
 800dc2c:	01c9      	lsls	r1, r1, #7
 800dc2e:	430a      	orrs	r2, r1
 800dc30:	605a      	str	r2, [r3, #4]
 800dc32:	e009      	b.n	800dc48 <I2C_Master_ISR_IT+0x220>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800dc34:	68fb      	ldr	r3, [r7, #12]
 800dc36:	0018      	movs	r0, r3
 800dc38:	f000 fcc2 	bl	800e5c0 <I2C_ITMasterSeqCplt>
 800dc3c:	e004      	b.n	800dc48 <I2C_Master_ISR_IT+0x220>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800dc3e:	68fb      	ldr	r3, [r7, #12]
 800dc40:	2140      	movs	r1, #64	@ 0x40
 800dc42:	0018      	movs	r0, r3
 800dc44:	f000 ffa8 	bl	800eb98 <I2C_ITError>
  else
  {
    /* Nothing to do */
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800dc48:	697b      	ldr	r3, [r7, #20]
 800dc4a:	2220      	movs	r2, #32
 800dc4c:	4013      	ands	r3, r2
 800dc4e:	d009      	beq.n	800dc64 <I2C_Master_ISR_IT+0x23c>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800dc50:	687b      	ldr	r3, [r7, #4]
 800dc52:	2220      	movs	r2, #32
 800dc54:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800dc56:	d005      	beq.n	800dc64 <I2C_Master_ISR_IT+0x23c>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, tmpITFlags);
 800dc58:	697a      	ldr	r2, [r7, #20]
 800dc5a:	68fb      	ldr	r3, [r7, #12]
 800dc5c:	0011      	movs	r1, r2
 800dc5e:	0018      	movs	r0, r3
 800dc60:	f000 fd54 	bl	800e70c <I2C_ITMasterCplt>
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800dc64:	68fb      	ldr	r3, [r7, #12]
 800dc66:	2240      	movs	r2, #64	@ 0x40
 800dc68:	2100      	movs	r1, #0
 800dc6a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800dc6c:	2300      	movs	r3, #0
}
 800dc6e:	0018      	movs	r0, r3
 800dc70:	46bd      	mov	sp, r7
 800dc72:	b007      	add	sp, #28
 800dc74:	bd90      	pop	{r4, r7, pc}
 800dc76:	46c0      	nop			@ (mov r8, r8)
 800dc78:	ffff0000 	.word	0xffff0000

0800dc7c <I2C_Slave_ISR_IT>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_IT(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                          uint32_t ITSources)
{
 800dc7c:	b580      	push	{r7, lr}
 800dc7e:	b086      	sub	sp, #24
 800dc80:	af00      	add	r7, sp, #0
 800dc82:	60f8      	str	r0, [r7, #12]
 800dc84:	60b9      	str	r1, [r7, #8]
 800dc86:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800dc88:	68fb      	ldr	r3, [r7, #12]
 800dc8a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800dc8c:	617b      	str	r3, [r7, #20]
  uint32_t tmpITFlags = ITFlags;
 800dc8e:	68bb      	ldr	r3, [r7, #8]
 800dc90:	613b      	str	r3, [r7, #16]

  /* Process locked */
  __HAL_LOCK(hi2c);
 800dc92:	68fb      	ldr	r3, [r7, #12]
 800dc94:	2240      	movs	r2, #64	@ 0x40
 800dc96:	5c9b      	ldrb	r3, [r3, r2]
 800dc98:	2b01      	cmp	r3, #1
 800dc9a:	d101      	bne.n	800dca0 <I2C_Slave_ISR_IT+0x24>
 800dc9c:	2302      	movs	r3, #2
 800dc9e:	e0e6      	b.n	800de6e <I2C_Slave_ISR_IT+0x1f2>
 800dca0:	68fb      	ldr	r3, [r7, #12]
 800dca2:	2240      	movs	r2, #64	@ 0x40
 800dca4:	2101      	movs	r1, #1
 800dca6:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800dca8:	693b      	ldr	r3, [r7, #16]
 800dcaa:	2220      	movs	r2, #32
 800dcac:	4013      	ands	r3, r2
 800dcae:	d009      	beq.n	800dcc4 <I2C_Slave_ISR_IT+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800dcb0:	687b      	ldr	r3, [r7, #4]
 800dcb2:	2220      	movs	r2, #32
 800dcb4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_STOPF) != RESET) && \
 800dcb6:	d005      	beq.n	800dcc4 <I2C_Slave_ISR_IT+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, tmpITFlags);
 800dcb8:	693a      	ldr	r2, [r7, #16]
 800dcba:	68fb      	ldr	r3, [r7, #12]
 800dcbc:	0011      	movs	r1, r2
 800dcbe:	0018      	movs	r0, r3
 800dcc0:	f000 fdf2 	bl	800e8a8 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800dcc4:	693b      	ldr	r3, [r7, #16]
 800dcc6:	2210      	movs	r2, #16
 800dcc8:	4013      	ands	r3, r2
 800dcca:	d052      	beq.n	800dd72 <I2C_Slave_ISR_IT+0xf6>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800dccc:	687b      	ldr	r3, [r7, #4]
 800dcce:	2210      	movs	r2, #16
 800dcd0:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET) && \
 800dcd2:	d04e      	beq.n	800dd72 <I2C_Slave_ISR_IT+0xf6>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0*/
    /* So clear Flag NACKF only */
    if (hi2c->XferCount == 0U)
 800dcd4:	68fb      	ldr	r3, [r7, #12]
 800dcd6:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dcd8:	b29b      	uxth	r3, r3
 800dcda:	2b00      	cmp	r3, #0
 800dcdc:	d12d      	bne.n	800dd3a <I2C_Slave_ISR_IT+0xbe>
    {
      if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800dcde:	68fb      	ldr	r3, [r7, #12]
 800dce0:	2241      	movs	r2, #65	@ 0x41
 800dce2:	5c9b      	ldrb	r3, [r3, r2]
 800dce4:	b2db      	uxtb	r3, r3
 800dce6:	2b28      	cmp	r3, #40	@ 0x28
 800dce8:	d10b      	bne.n	800dd02 <I2C_Slave_ISR_IT+0x86>
 800dcea:	697a      	ldr	r2, [r7, #20]
 800dcec:	2380      	movs	r3, #128	@ 0x80
 800dcee:	049b      	lsls	r3, r3, #18
 800dcf0:	429a      	cmp	r2, r3
 800dcf2:	d106      	bne.n	800dd02 <I2C_Slave_ISR_IT+0x86>
        /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
           Warning[Pa134]: left and right operands are identical */
      {
        /* Call I2C Listen complete process */
        I2C_ITListenCplt(hi2c, tmpITFlags);
 800dcf4:	693a      	ldr	r2, [r7, #16]
 800dcf6:	68fb      	ldr	r3, [r7, #12]
 800dcf8:	0011      	movs	r1, r2
 800dcfa:	0018      	movs	r0, r3
 800dcfc:	f000 fef4 	bl	800eae8 <I2C_ITListenCplt>
 800dd00:	e036      	b.n	800dd70 <I2C_Slave_ISR_IT+0xf4>
      }
      else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800dd02:	68fb      	ldr	r3, [r7, #12]
 800dd04:	2241      	movs	r2, #65	@ 0x41
 800dd06:	5c9b      	ldrb	r3, [r3, r2]
 800dd08:	b2db      	uxtb	r3, r3
 800dd0a:	2b29      	cmp	r3, #41	@ 0x29
 800dd0c:	d110      	bne.n	800dd30 <I2C_Slave_ISR_IT+0xb4>
 800dd0e:	697b      	ldr	r3, [r7, #20]
 800dd10:	4a59      	ldr	r2, [pc, #356]	@ (800de78 <I2C_Slave_ISR_IT+0x1fc>)
 800dd12:	4293      	cmp	r3, r2
 800dd14:	d00c      	beq.n	800dd30 <I2C_Slave_ISR_IT+0xb4>
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800dd16:	68fb      	ldr	r3, [r7, #12]
 800dd18:	681b      	ldr	r3, [r3, #0]
 800dd1a:	2210      	movs	r2, #16
 800dd1c:	61da      	str	r2, [r3, #28]

        /* Flush TX register */
        I2C_Flush_TXDR(hi2c);
 800dd1e:	68fb      	ldr	r3, [r7, #12]
 800dd20:	0018      	movs	r0, r3
 800dd22:	f001 f864 	bl	800edee <I2C_Flush_TXDR>

        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800dd26:	68fb      	ldr	r3, [r7, #12]
 800dd28:	0018      	movs	r0, r3
 800dd2a:	f000 fc8b 	bl	800e644 <I2C_ITSlaveSeqCplt>
 800dd2e:	e01f      	b.n	800dd70 <I2C_Slave_ISR_IT+0xf4>
      }
      else
      {
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800dd30:	68fb      	ldr	r3, [r7, #12]
 800dd32:	681b      	ldr	r3, [r3, #0]
 800dd34:	2210      	movs	r2, #16
 800dd36:	61da      	str	r2, [r3, #28]
    if (hi2c->XferCount == 0U)
 800dd38:	e091      	b.n	800de5e <I2C_Slave_ISR_IT+0x1e2>
    }
    else
    {
      /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
      /* Clear NACK Flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800dd3a:	68fb      	ldr	r3, [r7, #12]
 800dd3c:	681b      	ldr	r3, [r3, #0]
 800dd3e:	2210      	movs	r2, #16
 800dd40:	61da      	str	r2, [r3, #28]

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800dd42:	68fb      	ldr	r3, [r7, #12]
 800dd44:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800dd46:	2204      	movs	r2, #4
 800dd48:	431a      	orrs	r2, r3
 800dd4a:	68fb      	ldr	r3, [r7, #12]
 800dd4c:	645a      	str	r2, [r3, #68]	@ 0x44

      if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800dd4e:	697b      	ldr	r3, [r7, #20]
 800dd50:	2b00      	cmp	r3, #0
 800dd52:	d005      	beq.n	800dd60 <I2C_Slave_ISR_IT+0xe4>
 800dd54:	697a      	ldr	r2, [r7, #20]
 800dd56:	2380      	movs	r3, #128	@ 0x80
 800dd58:	045b      	lsls	r3, r3, #17
 800dd5a:	429a      	cmp	r2, r3
 800dd5c:	d000      	beq.n	800dd60 <I2C_Slave_ISR_IT+0xe4>
 800dd5e:	e07e      	b.n	800de5e <I2C_Slave_ISR_IT+0x1e2>
      {
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, hi2c->ErrorCode);
 800dd60:	68fb      	ldr	r3, [r7, #12]
 800dd62:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800dd64:	68fb      	ldr	r3, [r7, #12]
 800dd66:	0011      	movs	r1, r2
 800dd68:	0018      	movs	r0, r3
 800dd6a:	f000 ff15 	bl	800eb98 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800dd6e:	e076      	b.n	800de5e <I2C_Slave_ISR_IT+0x1e2>
 800dd70:	e075      	b.n	800de5e <I2C_Slave_ISR_IT+0x1e2>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800dd72:	693b      	ldr	r3, [r7, #16]
 800dd74:	2204      	movs	r2, #4
 800dd76:	4013      	ands	r3, r2
 800dd78:	d02f      	beq.n	800ddda <I2C_Slave_ISR_IT+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_RXI) != RESET))
 800dd7a:	687b      	ldr	r3, [r7, #4]
 800dd7c:	2204      	movs	r2, #4
 800dd7e:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET) && \
 800dd80:	d02b      	beq.n	800ddda <I2C_Slave_ISR_IT+0x15e>
  {
    if (hi2c->XferCount > 0U)
 800dd82:	68fb      	ldr	r3, [r7, #12]
 800dd84:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dd86:	b29b      	uxth	r3, r3
 800dd88:	2b00      	cmp	r3, #0
 800dd8a:	d018      	beq.n	800ddbe <I2C_Slave_ISR_IT+0x142>
    {
      /* Read data from RXDR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800dd8c:	68fb      	ldr	r3, [r7, #12]
 800dd8e:	681b      	ldr	r3, [r3, #0]
 800dd90:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800dd92:	68fb      	ldr	r3, [r7, #12]
 800dd94:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd96:	b2d2      	uxtb	r2, r2
 800dd98:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800dd9a:	68fb      	ldr	r3, [r7, #12]
 800dd9c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800dd9e:	1c5a      	adds	r2, r3, #1
 800dda0:	68fb      	ldr	r3, [r7, #12]
 800dda2:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferSize--;
 800dda4:	68fb      	ldr	r3, [r7, #12]
 800dda6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800dda8:	3b01      	subs	r3, #1
 800ddaa:	b29a      	uxth	r2, r3
 800ddac:	68fb      	ldr	r3, [r7, #12]
 800ddae:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800ddb0:	68fb      	ldr	r3, [r7, #12]
 800ddb2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ddb4:	b29b      	uxth	r3, r3
 800ddb6:	3b01      	subs	r3, #1
 800ddb8:	b29a      	uxth	r2, r3
 800ddba:	68fb      	ldr	r3, [r7, #12]
 800ddbc:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }

    if ((hi2c->XferCount == 0U) && \
 800ddbe:	68fb      	ldr	r3, [r7, #12]
 800ddc0:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ddc2:	b29b      	uxth	r3, r3
 800ddc4:	2b00      	cmp	r3, #0
 800ddc6:	d14c      	bne.n	800de62 <I2C_Slave_ISR_IT+0x1e6>
 800ddc8:	697b      	ldr	r3, [r7, #20]
 800ddca:	4a2b      	ldr	r2, [pc, #172]	@ (800de78 <I2C_Slave_ISR_IT+0x1fc>)
 800ddcc:	4293      	cmp	r3, r2
 800ddce:	d048      	beq.n	800de62 <I2C_Slave_ISR_IT+0x1e6>
        (tmpoptions != I2C_NO_OPTION_FRAME))
    {
      /* Call I2C Slave Sequential complete process */
      I2C_ITSlaveSeqCplt(hi2c);
 800ddd0:	68fb      	ldr	r3, [r7, #12]
 800ddd2:	0018      	movs	r0, r3
 800ddd4:	f000 fc36 	bl	800e644 <I2C_ITSlaveSeqCplt>
    if ((hi2c->XferCount == 0U) && \
 800ddd8:	e043      	b.n	800de62 <I2C_Slave_ISR_IT+0x1e6>
    }
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800ddda:	693b      	ldr	r3, [r7, #16]
 800dddc:	2208      	movs	r2, #8
 800ddde:	4013      	ands	r3, r2
 800dde0:	d00a      	beq.n	800ddf8 <I2C_Slave_ISR_IT+0x17c>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800dde2:	687b      	ldr	r3, [r7, #4]
 800dde4:	2208      	movs	r2, #8
 800dde6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_ADDR) != RESET) && \
 800dde8:	d006      	beq.n	800ddf8 <I2C_Slave_ISR_IT+0x17c>
  {
    I2C_ITAddrCplt(hi2c, tmpITFlags);
 800ddea:	693a      	ldr	r2, [r7, #16]
 800ddec:	68fb      	ldr	r3, [r7, #12]
 800ddee:	0011      	movs	r1, r2
 800ddf0:	0018      	movs	r0, r3
 800ddf2:	f000 fb41 	bl	800e478 <I2C_ITAddrCplt>
 800ddf6:	e035      	b.n	800de64 <I2C_Slave_ISR_IT+0x1e8>
  }
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800ddf8:	693b      	ldr	r3, [r7, #16]
 800ddfa:	2202      	movs	r2, #2
 800ddfc:	4013      	ands	r3, r2
 800ddfe:	d031      	beq.n	800de64 <I2C_Slave_ISR_IT+0x1e8>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800de00:	687b      	ldr	r3, [r7, #4]
 800de02:	2202      	movs	r2, #2
 800de04:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_TXIS) != RESET) && \
 800de06:	d02d      	beq.n	800de64 <I2C_Slave_ISR_IT+0x1e8>
  {
    /* Write data to TXDR only if XferCount not reach "0" */
    /* A TXIS flag can be set, during STOP treatment      */
    /* Check if all Data have already been sent */
    /* If it is the case, this last write in TXDR is not sent, correspond to a dummy TXIS event */
    if (hi2c->XferCount > 0U)
 800de08:	68fb      	ldr	r3, [r7, #12]
 800de0a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800de0c:	b29b      	uxth	r3, r3
 800de0e:	2b00      	cmp	r3, #0
 800de10:	d018      	beq.n	800de44 <I2C_Slave_ISR_IT+0x1c8>
    {
      /* Write data to TXDR */
      hi2c->Instance->TXDR = *hi2c->pBuffPtr;
 800de12:	68fb      	ldr	r3, [r7, #12]
 800de14:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de16:	781a      	ldrb	r2, [r3, #0]
 800de18:	68fb      	ldr	r3, [r7, #12]
 800de1a:	681b      	ldr	r3, [r3, #0]
 800de1c:	629a      	str	r2, [r3, #40]	@ 0x28

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800de1e:	68fb      	ldr	r3, [r7, #12]
 800de20:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800de22:	1c5a      	adds	r2, r3, #1
 800de24:	68fb      	ldr	r3, [r7, #12]
 800de26:	625a      	str	r2, [r3, #36]	@ 0x24

      hi2c->XferCount--;
 800de28:	68fb      	ldr	r3, [r7, #12]
 800de2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800de2c:	b29b      	uxth	r3, r3
 800de2e:	3b01      	subs	r3, #1
 800de30:	b29a      	uxth	r2, r3
 800de32:	68fb      	ldr	r3, [r7, #12]
 800de34:	855a      	strh	r2, [r3, #42]	@ 0x2a
      hi2c->XferSize--;
 800de36:	68fb      	ldr	r3, [r7, #12]
 800de38:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800de3a:	3b01      	subs	r3, #1
 800de3c:	b29a      	uxth	r2, r3
 800de3e:	68fb      	ldr	r3, [r7, #12]
 800de40:	851a      	strh	r2, [r3, #40]	@ 0x28
 800de42:	e00f      	b.n	800de64 <I2C_Slave_ISR_IT+0x1e8>
    }
    else
    {
      if ((tmpoptions == I2C_NEXT_FRAME) || (tmpoptions == I2C_FIRST_FRAME))
 800de44:	697a      	ldr	r2, [r7, #20]
 800de46:	2380      	movs	r3, #128	@ 0x80
 800de48:	045b      	lsls	r3, r3, #17
 800de4a:	429a      	cmp	r2, r3
 800de4c:	d002      	beq.n	800de54 <I2C_Slave_ISR_IT+0x1d8>
 800de4e:	697b      	ldr	r3, [r7, #20]
 800de50:	2b00      	cmp	r3, #0
 800de52:	d107      	bne.n	800de64 <I2C_Slave_ISR_IT+0x1e8>
      {
        /* Last Byte is Transmitted */
        /* Call I2C Slave Sequential complete process */
        I2C_ITSlaveSeqCplt(hi2c);
 800de54:	68fb      	ldr	r3, [r7, #12]
 800de56:	0018      	movs	r0, r3
 800de58:	f000 fbf4 	bl	800e644 <I2C_ITSlaveSeqCplt>
 800de5c:	e002      	b.n	800de64 <I2C_Slave_ISR_IT+0x1e8>
    if (hi2c->XferCount == 0U)
 800de5e:	46c0      	nop			@ (mov r8, r8)
 800de60:	e000      	b.n	800de64 <I2C_Slave_ISR_IT+0x1e8>
    if ((hi2c->XferCount == 0U) && \
 800de62:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800de64:	68fb      	ldr	r3, [r7, #12]
 800de66:	2240      	movs	r2, #64	@ 0x40
 800de68:	2100      	movs	r1, #0
 800de6a:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800de6c:	2300      	movs	r3, #0
}
 800de6e:	0018      	movs	r0, r3
 800de70:	46bd      	mov	sp, r7
 800de72:	b006      	add	sp, #24
 800de74:	bd80      	pop	{r7, pc}
 800de76:	46c0      	nop			@ (mov r8, r8)
 800de78:	ffff0000 	.word	0xffff0000

0800de7c <I2C_Master_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Master_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                            uint32_t ITSources)
{
 800de7c:	b590      	push	{r4, r7, lr}
 800de7e:	b089      	sub	sp, #36	@ 0x24
 800de80:	af02      	add	r7, sp, #8
 800de82:	60f8      	str	r0, [r7, #12]
 800de84:	60b9      	str	r1, [r7, #8]
 800de86:	607a      	str	r2, [r7, #4]
  uint16_t devaddress;
  uint32_t xfermode;

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800de88:	68fb      	ldr	r3, [r7, #12]
 800de8a:	2240      	movs	r2, #64	@ 0x40
 800de8c:	5c9b      	ldrb	r3, [r3, r2]
 800de8e:	2b01      	cmp	r3, #1
 800de90:	d101      	bne.n	800de96 <I2C_Master_ISR_DMA+0x1a>
 800de92:	2302      	movs	r3, #2
 800de94:	e0e7      	b.n	800e066 <I2C_Master_ISR_DMA+0x1ea>
 800de96:	68fb      	ldr	r3, [r7, #12]
 800de98:	2240      	movs	r2, #64	@ 0x40
 800de9a:	2101      	movs	r1, #1
 800de9c:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800de9e:	68bb      	ldr	r3, [r7, #8]
 800dea0:	2210      	movs	r2, #16
 800dea2:	4013      	ands	r3, r2
 800dea4:	d017      	beq.n	800ded6 <I2C_Master_ISR_DMA+0x5a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800dea6:	687b      	ldr	r3, [r7, #4]
 800dea8:	2210      	movs	r2, #16
 800deaa:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800deac:	d013      	beq.n	800ded6 <I2C_Master_ISR_DMA+0x5a>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800deae:	68fb      	ldr	r3, [r7, #12]
 800deb0:	681b      	ldr	r3, [r3, #0]
 800deb2:	2210      	movs	r2, #16
 800deb4:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800deb6:	68fb      	ldr	r3, [r7, #12]
 800deb8:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800deba:	2204      	movs	r2, #4
 800debc:	431a      	orrs	r2, r3
 800debe:	68fb      	ldr	r3, [r7, #12]
 800dec0:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800dec2:	68fb      	ldr	r3, [r7, #12]
 800dec4:	2120      	movs	r1, #32
 800dec6:	0018      	movs	r0, r3
 800dec8:	f001 f8c6 	bl	800f058 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800decc:	68fb      	ldr	r3, [r7, #12]
 800dece:	0018      	movs	r0, r3
 800ded0:	f000 ff8d 	bl	800edee <I2C_Flush_TXDR>
 800ded4:	e0c2      	b.n	800e05c <I2C_Master_ISR_DMA+0x1e0>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800ded6:	68bb      	ldr	r3, [r7, #8]
 800ded8:	2280      	movs	r2, #128	@ 0x80
 800deda:	4013      	ands	r3, r2
 800dedc:	d100      	bne.n	800dee0 <I2C_Master_ISR_DMA+0x64>
 800dede:	e07c      	b.n	800dfda <I2C_Master_ISR_DMA+0x15e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800dee0:	687b      	ldr	r3, [r7, #4]
 800dee2:	2240      	movs	r2, #64	@ 0x40
 800dee4:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800dee6:	d100      	bne.n	800deea <I2C_Master_ISR_DMA+0x6e>
 800dee8:	e077      	b.n	800dfda <I2C_Master_ISR_DMA+0x15e>
  {
    /* Disable TC interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_TCI);
 800deea:	68fb      	ldr	r3, [r7, #12]
 800deec:	681b      	ldr	r3, [r3, #0]
 800deee:	681a      	ldr	r2, [r3, #0]
 800def0:	68fb      	ldr	r3, [r7, #12]
 800def2:	681b      	ldr	r3, [r3, #0]
 800def4:	2140      	movs	r1, #64	@ 0x40
 800def6:	438a      	bics	r2, r1
 800def8:	601a      	str	r2, [r3, #0]

    if (hi2c->XferCount != 0U)
 800defa:	68fb      	ldr	r3, [r7, #12]
 800defc:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800defe:	b29b      	uxth	r3, r3
 800df00:	2b00      	cmp	r3, #0
 800df02:	d055      	beq.n	800dfb0 <I2C_Master_ISR_DMA+0x134>
    {
      /* Recover Slave address */
      devaddress = (uint16_t)(hi2c->Instance->CR2 & I2C_CR2_SADD);
 800df04:	68fb      	ldr	r3, [r7, #12]
 800df06:	681b      	ldr	r3, [r3, #0]
 800df08:	685b      	ldr	r3, [r3, #4]
 800df0a:	b29a      	uxth	r2, r3
 800df0c:	2312      	movs	r3, #18
 800df0e:	18fb      	adds	r3, r7, r3
 800df10:	0592      	lsls	r2, r2, #22
 800df12:	0d92      	lsrs	r2, r2, #22
 800df14:	801a      	strh	r2, [r3, #0]

      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800df16:	68fb      	ldr	r3, [r7, #12]
 800df18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800df1a:	b29b      	uxth	r3, r3
 800df1c:	2bff      	cmp	r3, #255	@ 0xff
 800df1e:	d906      	bls.n	800df2e <I2C_Master_ISR_DMA+0xb2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800df20:	68fb      	ldr	r3, [r7, #12]
 800df22:	22ff      	movs	r2, #255	@ 0xff
 800df24:	851a      	strh	r2, [r3, #40]	@ 0x28
        xfermode = I2C_RELOAD_MODE;
 800df26:	2380      	movs	r3, #128	@ 0x80
 800df28:	045b      	lsls	r3, r3, #17
 800df2a:	617b      	str	r3, [r7, #20]
 800df2c:	e010      	b.n	800df50 <I2C_Master_ISR_DMA+0xd4>
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800df2e:	68fb      	ldr	r3, [r7, #12]
 800df30:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800df32:	b29a      	uxth	r2, r3
 800df34:	68fb      	ldr	r3, [r7, #12]
 800df36:	851a      	strh	r2, [r3, #40]	@ 0x28
        if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800df38:	68fb      	ldr	r3, [r7, #12]
 800df3a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df3c:	4a4c      	ldr	r2, [pc, #304]	@ (800e070 <I2C_Master_ISR_DMA+0x1f4>)
 800df3e:	4293      	cmp	r3, r2
 800df40:	d003      	beq.n	800df4a <I2C_Master_ISR_DMA+0xce>
        {
          xfermode = hi2c->XferOptions;
 800df42:	68fb      	ldr	r3, [r7, #12]
 800df44:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800df46:	617b      	str	r3, [r7, #20]
 800df48:	e002      	b.n	800df50 <I2C_Master_ISR_DMA+0xd4>
        }
        else
        {
          xfermode = I2C_AUTOEND_MODE;
 800df4a:	2380      	movs	r3, #128	@ 0x80
 800df4c:	049b      	lsls	r3, r3, #18
 800df4e:	617b      	str	r3, [r7, #20]
        }
      }

      /* Set the new XferSize in Nbytes register */
      I2C_TransferConfig(hi2c, devaddress, (uint8_t)hi2c->XferSize, xfermode, I2C_NO_STARTSTOP);
 800df50:	68fb      	ldr	r3, [r7, #12]
 800df52:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800df54:	b2da      	uxtb	r2, r3
 800df56:	697c      	ldr	r4, [r7, #20]
 800df58:	2312      	movs	r3, #18
 800df5a:	18fb      	adds	r3, r7, r3
 800df5c:	8819      	ldrh	r1, [r3, #0]
 800df5e:	68f8      	ldr	r0, [r7, #12]
 800df60:	2300      	movs	r3, #0
 800df62:	9300      	str	r3, [sp, #0]
 800df64:	0023      	movs	r3, r4
 800df66:	f001 f83d 	bl	800efe4 <I2C_TransferConfig>

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800df6a:	68fb      	ldr	r3, [r7, #12]
 800df6c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800df6e:	b29a      	uxth	r2, r3
 800df70:	68fb      	ldr	r3, [r7, #12]
 800df72:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800df74:	1ad3      	subs	r3, r2, r3
 800df76:	b29a      	uxth	r2, r3
 800df78:	68fb      	ldr	r3, [r7, #12]
 800df7a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800df7c:	68fb      	ldr	r3, [r7, #12]
 800df7e:	2241      	movs	r2, #65	@ 0x41
 800df80:	5c9b      	ldrb	r3, [r3, r2]
 800df82:	b2db      	uxtb	r3, r3
 800df84:	2b22      	cmp	r3, #34	@ 0x22
 800df86:	d109      	bne.n	800df9c <I2C_Master_ISR_DMA+0x120>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800df88:	68fb      	ldr	r3, [r7, #12]
 800df8a:	681b      	ldr	r3, [r3, #0]
 800df8c:	681a      	ldr	r2, [r3, #0]
 800df8e:	68fb      	ldr	r3, [r7, #12]
 800df90:	681b      	ldr	r3, [r3, #0]
 800df92:	2180      	movs	r1, #128	@ 0x80
 800df94:	0209      	lsls	r1, r1, #8
 800df96:	430a      	orrs	r2, r1
 800df98:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800df9a:	e05f      	b.n	800e05c <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800df9c:	68fb      	ldr	r3, [r7, #12]
 800df9e:	681b      	ldr	r3, [r3, #0]
 800dfa0:	681a      	ldr	r2, [r3, #0]
 800dfa2:	68fb      	ldr	r3, [r7, #12]
 800dfa4:	681b      	ldr	r3, [r3, #0]
 800dfa6:	2180      	movs	r1, #128	@ 0x80
 800dfa8:	01c9      	lsls	r1, r1, #7
 800dfaa:	430a      	orrs	r2, r1
 800dfac:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800dfae:	e055      	b.n	800e05c <I2C_Master_ISR_DMA+0x1e0>
      }
    }
    else
    {
      /* Call TxCpltCallback() if no stop mode is set */
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800dfb0:	68fb      	ldr	r3, [r7, #12]
 800dfb2:	681b      	ldr	r3, [r3, #0]
 800dfb4:	685a      	ldr	r2, [r3, #4]
 800dfb6:	2380      	movs	r3, #128	@ 0x80
 800dfb8:	049b      	lsls	r3, r3, #18
 800dfba:	401a      	ands	r2, r3
 800dfbc:	2380      	movs	r3, #128	@ 0x80
 800dfbe:	049b      	lsls	r3, r3, #18
 800dfc0:	429a      	cmp	r2, r3
 800dfc2:	d004      	beq.n	800dfce <I2C_Master_ISR_DMA+0x152>
      {
        /* Call I2C Master Sequential complete process */
        I2C_ITMasterSeqCplt(hi2c);
 800dfc4:	68fb      	ldr	r3, [r7, #12]
 800dfc6:	0018      	movs	r0, r3
 800dfc8:	f000 fafa 	bl	800e5c0 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount != 0U)
 800dfcc:	e046      	b.n	800e05c <I2C_Master_ISR_DMA+0x1e0>
      }
      else
      {
        /* Wrong size Status regarding TCR flag event */
        /* Call the corresponding callback to inform upper layer of End of Transfer */
        I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800dfce:	68fb      	ldr	r3, [r7, #12]
 800dfd0:	2140      	movs	r1, #64	@ 0x40
 800dfd2:	0018      	movs	r0, r3
 800dfd4:	f000 fde0 	bl	800eb98 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800dfd8:	e040      	b.n	800e05c <I2C_Master_ISR_DMA+0x1e0>
      }
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800dfda:	68bb      	ldr	r3, [r7, #8]
 800dfdc:	2240      	movs	r2, #64	@ 0x40
 800dfde:	4013      	ands	r3, r2
 800dfe0:	d02c      	beq.n	800e03c <I2C_Master_ISR_DMA+0x1c0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800dfe2:	687b      	ldr	r3, [r7, #4]
 800dfe4:	2240      	movs	r2, #64	@ 0x40
 800dfe6:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800dfe8:	d028      	beq.n	800e03c <I2C_Master_ISR_DMA+0x1c0>
  {
    if (hi2c->XferCount == 0U)
 800dfea:	68fb      	ldr	r3, [r7, #12]
 800dfec:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800dfee:	b29b      	uxth	r3, r3
 800dff0:	2b00      	cmp	r3, #0
 800dff2:	d11d      	bne.n	800e030 <I2C_Master_ISR_DMA+0x1b4>
    {
      if (I2C_GET_STOP_MODE(hi2c) != I2C_AUTOEND_MODE)
 800dff4:	68fb      	ldr	r3, [r7, #12]
 800dff6:	681b      	ldr	r3, [r3, #0]
 800dff8:	685a      	ldr	r2, [r3, #4]
 800dffa:	2380      	movs	r3, #128	@ 0x80
 800dffc:	049b      	lsls	r3, r3, #18
 800dffe:	401a      	ands	r2, r3
 800e000:	2380      	movs	r3, #128	@ 0x80
 800e002:	049b      	lsls	r3, r3, #18
 800e004:	429a      	cmp	r2, r3
 800e006:	d028      	beq.n	800e05a <I2C_Master_ISR_DMA+0x1de>
      {
        /* Generate a stop condition in case of no transfer option */
        if (hi2c->XferOptions == I2C_NO_OPTION_FRAME)
 800e008:	68fb      	ldr	r3, [r7, #12]
 800e00a:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e00c:	4a18      	ldr	r2, [pc, #96]	@ (800e070 <I2C_Master_ISR_DMA+0x1f4>)
 800e00e:	4293      	cmp	r3, r2
 800e010:	d109      	bne.n	800e026 <I2C_Master_ISR_DMA+0x1aa>
        {
          /* Generate Stop */
          hi2c->Instance->CR2 |= I2C_CR2_STOP;
 800e012:	68fb      	ldr	r3, [r7, #12]
 800e014:	681b      	ldr	r3, [r3, #0]
 800e016:	685a      	ldr	r2, [r3, #4]
 800e018:	68fb      	ldr	r3, [r7, #12]
 800e01a:	681b      	ldr	r3, [r3, #0]
 800e01c:	2180      	movs	r1, #128	@ 0x80
 800e01e:	01c9      	lsls	r1, r1, #7
 800e020:	430a      	orrs	r2, r1
 800e022:	605a      	str	r2, [r3, #4]
    if (hi2c->XferCount == 0U)
 800e024:	e019      	b.n	800e05a <I2C_Master_ISR_DMA+0x1de>
        }
        else
        {
          /* Call I2C Master Sequential complete process */
          I2C_ITMasterSeqCplt(hi2c);
 800e026:	68fb      	ldr	r3, [r7, #12]
 800e028:	0018      	movs	r0, r3
 800e02a:	f000 fac9 	bl	800e5c0 <I2C_ITMasterSeqCplt>
    if (hi2c->XferCount == 0U)
 800e02e:	e014      	b.n	800e05a <I2C_Master_ISR_DMA+0x1de>
    }
    else
    {
      /* Wrong size Status regarding TC flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800e030:	68fb      	ldr	r3, [r7, #12]
 800e032:	2140      	movs	r1, #64	@ 0x40
 800e034:	0018      	movs	r0, r3
 800e036:	f000 fdaf 	bl	800eb98 <I2C_ITError>
    if (hi2c->XferCount == 0U)
 800e03a:	e00e      	b.n	800e05a <I2C_Master_ISR_DMA+0x1de>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800e03c:	68bb      	ldr	r3, [r7, #8]
 800e03e:	2220      	movs	r2, #32
 800e040:	4013      	ands	r3, r2
 800e042:	d00b      	beq.n	800e05c <I2C_Master_ISR_DMA+0x1e0>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800e044:	687b      	ldr	r3, [r7, #4]
 800e046:	2220      	movs	r2, #32
 800e048:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800e04a:	d007      	beq.n	800e05c <I2C_Master_ISR_DMA+0x1e0>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800e04c:	68ba      	ldr	r2, [r7, #8]
 800e04e:	68fb      	ldr	r3, [r7, #12]
 800e050:	0011      	movs	r1, r2
 800e052:	0018      	movs	r0, r3
 800e054:	f000 fb5a 	bl	800e70c <I2C_ITMasterCplt>
 800e058:	e000      	b.n	800e05c <I2C_Master_ISR_DMA+0x1e0>
    if (hi2c->XferCount == 0U)
 800e05a:	46c0      	nop			@ (mov r8, r8)
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800e05c:	68fb      	ldr	r3, [r7, #12]
 800e05e:	2240      	movs	r2, #64	@ 0x40
 800e060:	2100      	movs	r1, #0
 800e062:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800e064:	2300      	movs	r3, #0
}
 800e066:	0018      	movs	r0, r3
 800e068:	46bd      	mov	sp, r7
 800e06a:	b007      	add	sp, #28
 800e06c:	bd90      	pop	{r4, r7, pc}
 800e06e:	46c0      	nop			@ (mov r8, r8)
 800e070:	ffff0000 	.word	0xffff0000

0800e074 <I2C_Mem_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Mem_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                         uint32_t ITSources)
{
 800e074:	b590      	push	{r4, r7, lr}
 800e076:	b089      	sub	sp, #36	@ 0x24
 800e078:	af02      	add	r7, sp, #8
 800e07a:	60f8      	str	r0, [r7, #12]
 800e07c:	60b9      	str	r1, [r7, #8]
 800e07e:	607a      	str	r2, [r7, #4]
  uint32_t direction = I2C_GENERATE_START_WRITE;
 800e080:	4b88      	ldr	r3, [pc, #544]	@ (800e2a4 <I2C_Mem_ISR_DMA+0x230>)
 800e082:	617b      	str	r3, [r7, #20]

  /* Process Locked */
  __HAL_LOCK(hi2c);
 800e084:	68fb      	ldr	r3, [r7, #12]
 800e086:	2240      	movs	r2, #64	@ 0x40
 800e088:	5c9b      	ldrb	r3, [r3, r2]
 800e08a:	2b01      	cmp	r3, #1
 800e08c:	d101      	bne.n	800e092 <I2C_Mem_ISR_DMA+0x1e>
 800e08e:	2302      	movs	r3, #2
 800e090:	e104      	b.n	800e29c <I2C_Mem_ISR_DMA+0x228>
 800e092:	68fb      	ldr	r3, [r7, #12]
 800e094:	2240      	movs	r2, #64	@ 0x40
 800e096:	2101      	movs	r1, #1
 800e098:	5499      	strb	r1, [r3, r2]

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800e09a:	68bb      	ldr	r3, [r7, #8]
 800e09c:	2210      	movs	r2, #16
 800e09e:	4013      	ands	r3, r2
 800e0a0:	d017      	beq.n	800e0d2 <I2C_Mem_ISR_DMA+0x5e>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800e0a2:	687b      	ldr	r3, [r7, #4]
 800e0a4:	2210      	movs	r2, #16
 800e0a6:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800e0a8:	d013      	beq.n	800e0d2 <I2C_Mem_ISR_DMA+0x5e>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e0aa:	68fb      	ldr	r3, [r7, #12]
 800e0ac:	681b      	ldr	r3, [r3, #0]
 800e0ae:	2210      	movs	r2, #16
 800e0b0:	61da      	str	r2, [r3, #28]

    /* Set corresponding Error Code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800e0b2:	68fb      	ldr	r3, [r7, #12]
 800e0b4:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e0b6:	2204      	movs	r2, #4
 800e0b8:	431a      	orrs	r2, r3
 800e0ba:	68fb      	ldr	r3, [r7, #12]
 800e0bc:	645a      	str	r2, [r3, #68]	@ 0x44

    /* No need to generate STOP, it is automatically done */
    /* But enable STOP interrupt, to treat it */
    /* Error callback will be send during stop flag treatment */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800e0be:	68fb      	ldr	r3, [r7, #12]
 800e0c0:	2120      	movs	r1, #32
 800e0c2:	0018      	movs	r0, r3
 800e0c4:	f000 ffc8 	bl	800f058 <I2C_Enable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800e0c8:	68fb      	ldr	r3, [r7, #12]
 800e0ca:	0018      	movs	r0, r3
 800e0cc:	f000 fe8f 	bl	800edee <I2C_Flush_TXDR>
 800e0d0:	e0df      	b.n	800e292 <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800e0d2:	68bb      	ldr	r3, [r7, #8]
 800e0d4:	2202      	movs	r2, #2
 800e0d6:	4013      	ands	r3, r2
 800e0d8:	d00d      	beq.n	800e0f6 <I2C_Mem_ISR_DMA+0x82>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TXI) != RESET))
 800e0da:	687b      	ldr	r3, [r7, #4]
 800e0dc:	2202      	movs	r2, #2
 800e0de:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TXIS) != RESET) && \
 800e0e0:	d009      	beq.n	800e0f6 <I2C_Mem_ISR_DMA+0x82>
  {
    /* Write LSB part of Memory Address */
    hi2c->Instance->TXDR = hi2c->Memaddress;
 800e0e2:	68fb      	ldr	r3, [r7, #12]
 800e0e4:	681b      	ldr	r3, [r3, #0]
 800e0e6:	68fa      	ldr	r2, [r7, #12]
 800e0e8:	6d12      	ldr	r2, [r2, #80]	@ 0x50
 800e0ea:	629a      	str	r2, [r3, #40]	@ 0x28

    /* Reset Memaddress content */
    hi2c->Memaddress = 0xFFFFFFFFU;
 800e0ec:	68fb      	ldr	r3, [r7, #12]
 800e0ee:	2201      	movs	r2, #1
 800e0f0:	4252      	negs	r2, r2
 800e0f2:	651a      	str	r2, [r3, #80]	@ 0x50
 800e0f4:	e0cd      	b.n	800e292 <I2C_Mem_ISR_DMA+0x21e>
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800e0f6:	68bb      	ldr	r3, [r7, #8]
 800e0f8:	2280      	movs	r2, #128	@ 0x80
 800e0fa:	4013      	ands	r3, r2
 800e0fc:	d05e      	beq.n	800e1bc <I2C_Mem_ISR_DMA+0x148>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800e0fe:	687b      	ldr	r3, [r7, #4]
 800e100:	2240      	movs	r2, #64	@ 0x40
 800e102:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TCR) != RESET) && \
 800e104:	d05a      	beq.n	800e1bc <I2C_Mem_ISR_DMA+0x148>
  {
    /* Enable only Error interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_ERROR_IT);
 800e106:	68fb      	ldr	r3, [r7, #12]
 800e108:	2110      	movs	r1, #16
 800e10a:	0018      	movs	r0, r3
 800e10c:	f000 ffa4 	bl	800f058 <I2C_Enable_IRQ>

    if (hi2c->XferCount != 0U)
 800e110:	68fb      	ldr	r3, [r7, #12]
 800e112:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e114:	b29b      	uxth	r3, r3
 800e116:	2b00      	cmp	r3, #0
 800e118:	d04a      	beq.n	800e1b0 <I2C_Mem_ISR_DMA+0x13c>
    {
      /* Prepare the new XferSize to transfer */
      if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e11a:	68fb      	ldr	r3, [r7, #12]
 800e11c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e11e:	b29b      	uxth	r3, r3
 800e120:	2bff      	cmp	r3, #255	@ 0xff
 800e122:	d910      	bls.n	800e146 <I2C_Mem_ISR_DMA+0xd2>
      {
        hi2c->XferSize = MAX_NBYTE_SIZE;
 800e124:	68fb      	ldr	r3, [r7, #12]
 800e126:	22ff      	movs	r2, #255	@ 0xff
 800e128:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800e12a:	68fb      	ldr	r3, [r7, #12]
 800e12c:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e12e:	b299      	uxth	r1, r3
 800e130:	68fb      	ldr	r3, [r7, #12]
 800e132:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e134:	b2da      	uxtb	r2, r3
 800e136:	2380      	movs	r3, #128	@ 0x80
 800e138:	045b      	lsls	r3, r3, #17
 800e13a:	68f8      	ldr	r0, [r7, #12]
 800e13c:	2400      	movs	r4, #0
 800e13e:	9400      	str	r4, [sp, #0]
 800e140:	f000 ff50 	bl	800efe4 <I2C_TransferConfig>
 800e144:	e011      	b.n	800e16a <I2C_Mem_ISR_DMA+0xf6>
                           I2C_RELOAD_MODE, I2C_NO_STARTSTOP);
      }
      else
      {
        hi2c->XferSize = hi2c->XferCount;
 800e146:	68fb      	ldr	r3, [r7, #12]
 800e148:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e14a:	b29a      	uxth	r2, r3
 800e14c:	68fb      	ldr	r3, [r7, #12]
 800e14e:	851a      	strh	r2, [r3, #40]	@ 0x28
        I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800e150:	68fb      	ldr	r3, [r7, #12]
 800e152:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e154:	b299      	uxth	r1, r3
 800e156:	68fb      	ldr	r3, [r7, #12]
 800e158:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e15a:	b2da      	uxtb	r2, r3
 800e15c:	2380      	movs	r3, #128	@ 0x80
 800e15e:	049b      	lsls	r3, r3, #18
 800e160:	68f8      	ldr	r0, [r7, #12]
 800e162:	2400      	movs	r4, #0
 800e164:	9400      	str	r4, [sp, #0]
 800e166:	f000 ff3d 	bl	800efe4 <I2C_TransferConfig>
                           I2C_AUTOEND_MODE, I2C_NO_STARTSTOP);
      }

      /* Update XferCount value */
      hi2c->XferCount -= hi2c->XferSize;
 800e16a:	68fb      	ldr	r3, [r7, #12]
 800e16c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e16e:	b29a      	uxth	r2, r3
 800e170:	68fb      	ldr	r3, [r7, #12]
 800e172:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e174:	1ad3      	subs	r3, r2, r3
 800e176:	b29a      	uxth	r2, r3
 800e178:	68fb      	ldr	r3, [r7, #12]
 800e17a:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Enable DMA Request */
      if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800e17c:	68fb      	ldr	r3, [r7, #12]
 800e17e:	2241      	movs	r2, #65	@ 0x41
 800e180:	5c9b      	ldrb	r3, [r3, r2]
 800e182:	b2db      	uxtb	r3, r3
 800e184:	2b22      	cmp	r3, #34	@ 0x22
 800e186:	d109      	bne.n	800e19c <I2C_Mem_ISR_DMA+0x128>
      {
        hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800e188:	68fb      	ldr	r3, [r7, #12]
 800e18a:	681b      	ldr	r3, [r3, #0]
 800e18c:	681a      	ldr	r2, [r3, #0]
 800e18e:	68fb      	ldr	r3, [r7, #12]
 800e190:	681b      	ldr	r3, [r3, #0]
 800e192:	2180      	movs	r1, #128	@ 0x80
 800e194:	0209      	lsls	r1, r1, #8
 800e196:	430a      	orrs	r2, r1
 800e198:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800e19a:	e07a      	b.n	800e292 <I2C_Mem_ISR_DMA+0x21e>
      }
      else
      {
        hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800e19c:	68fb      	ldr	r3, [r7, #12]
 800e19e:	681b      	ldr	r3, [r3, #0]
 800e1a0:	681a      	ldr	r2, [r3, #0]
 800e1a2:	68fb      	ldr	r3, [r7, #12]
 800e1a4:	681b      	ldr	r3, [r3, #0]
 800e1a6:	2180      	movs	r1, #128	@ 0x80
 800e1a8:	01c9      	lsls	r1, r1, #7
 800e1aa:	430a      	orrs	r2, r1
 800e1ac:	601a      	str	r2, [r3, #0]
    if (hi2c->XferCount != 0U)
 800e1ae:	e070      	b.n	800e292 <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      /* Wrong size Status regarding TCR flag event */
      /* Call the corresponding callback to inform upper layer of End of Transfer */
      I2C_ITError(hi2c, HAL_I2C_ERROR_SIZE);
 800e1b0:	68fb      	ldr	r3, [r7, #12]
 800e1b2:	2140      	movs	r1, #64	@ 0x40
 800e1b4:	0018      	movs	r0, r3
 800e1b6:	f000 fcef 	bl	800eb98 <I2C_ITError>
    if (hi2c->XferCount != 0U)
 800e1ba:	e06a      	b.n	800e292 <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800e1bc:	68bb      	ldr	r3, [r7, #8]
 800e1be:	2240      	movs	r2, #64	@ 0x40
 800e1c0:	4013      	ands	r3, r2
 800e1c2:	d058      	beq.n	800e276 <I2C_Mem_ISR_DMA+0x202>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_TCI) != RESET))
 800e1c4:	687b      	ldr	r3, [r7, #4]
 800e1c6:	2240      	movs	r2, #64	@ 0x40
 800e1c8:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_TC) != RESET) && \
 800e1ca:	d054      	beq.n	800e276 <I2C_Mem_ISR_DMA+0x202>
  {
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800e1cc:	68fb      	ldr	r3, [r7, #12]
 800e1ce:	2241      	movs	r2, #65	@ 0x41
 800e1d0:	5c9b      	ldrb	r3, [r3, r2]
 800e1d2:	b2db      	uxtb	r3, r3
 800e1d4:	2b22      	cmp	r3, #34	@ 0x22
 800e1d6:	d101      	bne.n	800e1dc <I2C_Mem_ISR_DMA+0x168>
    {
      direction = I2C_GENERATE_START_READ;
 800e1d8:	4b33      	ldr	r3, [pc, #204]	@ (800e2a8 <I2C_Mem_ISR_DMA+0x234>)
 800e1da:	617b      	str	r3, [r7, #20]
    }

    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800e1dc:	68fb      	ldr	r3, [r7, #12]
 800e1de:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e1e0:	b29b      	uxth	r3, r3
 800e1e2:	2bff      	cmp	r3, #255	@ 0xff
 800e1e4:	d911      	bls.n	800e20a <I2C_Mem_ISR_DMA+0x196>
    {
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800e1e6:	68fb      	ldr	r3, [r7, #12]
 800e1e8:	22ff      	movs	r2, #255	@ 0xff
 800e1ea:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and reload if hi2c->XferCount > MAX_NBYTE_SIZE and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800e1ec:	68fb      	ldr	r3, [r7, #12]
 800e1ee:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e1f0:	b299      	uxth	r1, r3
 800e1f2:	68fb      	ldr	r3, [r7, #12]
 800e1f4:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e1f6:	b2da      	uxtb	r2, r3
 800e1f8:	2380      	movs	r3, #128	@ 0x80
 800e1fa:	045c      	lsls	r4, r3, #17
 800e1fc:	68f8      	ldr	r0, [r7, #12]
 800e1fe:	697b      	ldr	r3, [r7, #20]
 800e200:	9300      	str	r3, [sp, #0]
 800e202:	0023      	movs	r3, r4
 800e204:	f000 feee 	bl	800efe4 <I2C_TransferConfig>
 800e208:	e012      	b.n	800e230 <I2C_Mem_ISR_DMA+0x1bc>
                         I2C_RELOAD_MODE, direction);
    }
    else
    {
      hi2c->XferSize = hi2c->XferCount;
 800e20a:	68fb      	ldr	r3, [r7, #12]
 800e20c:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e20e:	b29a      	uxth	r2, r3
 800e210:	68fb      	ldr	r3, [r7, #12]
 800e212:	851a      	strh	r2, [r3, #40]	@ 0x28

      /* Set NBYTES to write and generate RESTART */
      I2C_TransferConfig(hi2c, (uint16_t)hi2c->Devaddress, (uint8_t)hi2c->XferSize,
 800e214:	68fb      	ldr	r3, [r7, #12]
 800e216:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 800e218:	b299      	uxth	r1, r3
 800e21a:	68fb      	ldr	r3, [r7, #12]
 800e21c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e21e:	b2da      	uxtb	r2, r3
 800e220:	2380      	movs	r3, #128	@ 0x80
 800e222:	049c      	lsls	r4, r3, #18
 800e224:	68f8      	ldr	r0, [r7, #12]
 800e226:	697b      	ldr	r3, [r7, #20]
 800e228:	9300      	str	r3, [sp, #0]
 800e22a:	0023      	movs	r3, r4
 800e22c:	f000 feda 	bl	800efe4 <I2C_TransferConfig>
                         I2C_AUTOEND_MODE, direction);
    }

    /* Update XferCount value */
    hi2c->XferCount -= hi2c->XferSize;
 800e230:	68fb      	ldr	r3, [r7, #12]
 800e232:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e234:	b29a      	uxth	r2, r3
 800e236:	68fb      	ldr	r3, [r7, #12]
 800e238:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e23a:	1ad3      	subs	r3, r2, r3
 800e23c:	b29a      	uxth	r2, r3
 800e23e:	68fb      	ldr	r3, [r7, #12]
 800e240:	855a      	strh	r2, [r3, #42]	@ 0x2a

    /* Enable DMA Request */
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800e242:	68fb      	ldr	r3, [r7, #12]
 800e244:	2241      	movs	r2, #65	@ 0x41
 800e246:	5c9b      	ldrb	r3, [r3, r2]
 800e248:	b2db      	uxtb	r3, r3
 800e24a:	2b22      	cmp	r3, #34	@ 0x22
 800e24c:	d109      	bne.n	800e262 <I2C_Mem_ISR_DMA+0x1ee>
    {
      hi2c->Instance->CR1 |= I2C_CR1_RXDMAEN;
 800e24e:	68fb      	ldr	r3, [r7, #12]
 800e250:	681b      	ldr	r3, [r3, #0]
 800e252:	681a      	ldr	r2, [r3, #0]
 800e254:	68fb      	ldr	r3, [r7, #12]
 800e256:	681b      	ldr	r3, [r3, #0]
 800e258:	2180      	movs	r1, #128	@ 0x80
 800e25a:	0209      	lsls	r1, r1, #8
 800e25c:	430a      	orrs	r2, r1
 800e25e:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800e260:	e017      	b.n	800e292 <I2C_Mem_ISR_DMA+0x21e>
    }
    else
    {
      hi2c->Instance->CR1 |= I2C_CR1_TXDMAEN;
 800e262:	68fb      	ldr	r3, [r7, #12]
 800e264:	681b      	ldr	r3, [r3, #0]
 800e266:	681a      	ldr	r2, [r3, #0]
 800e268:	68fb      	ldr	r3, [r7, #12]
 800e26a:	681b      	ldr	r3, [r3, #0]
 800e26c:	2180      	movs	r1, #128	@ 0x80
 800e26e:	01c9      	lsls	r1, r1, #7
 800e270:	430a      	orrs	r2, r1
 800e272:	601a      	str	r2, [r3, #0]
    if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800e274:	e00d      	b.n	800e292 <I2C_Mem_ISR_DMA+0x21e>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800e276:	68bb      	ldr	r3, [r7, #8]
 800e278:	2220      	movs	r2, #32
 800e27a:	4013      	ands	r3, r2
 800e27c:	d009      	beq.n	800e292 <I2C_Mem_ISR_DMA+0x21e>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800e27e:	687b      	ldr	r3, [r7, #4]
 800e280:	2220      	movs	r2, #32
 800e282:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800e284:	d005      	beq.n	800e292 <I2C_Mem_ISR_DMA+0x21e>
  {
    /* Call I2C Master complete process */
    I2C_ITMasterCplt(hi2c, ITFlags);
 800e286:	68ba      	ldr	r2, [r7, #8]
 800e288:	68fb      	ldr	r3, [r7, #12]
 800e28a:	0011      	movs	r1, r2
 800e28c:	0018      	movs	r0, r3
 800e28e:	f000 fa3d 	bl	800e70c <I2C_ITMasterCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800e292:	68fb      	ldr	r3, [r7, #12]
 800e294:	2240      	movs	r2, #64	@ 0x40
 800e296:	2100      	movs	r1, #0
 800e298:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800e29a:	2300      	movs	r3, #0
}
 800e29c:	0018      	movs	r0, r3
 800e29e:	46bd      	mov	sp, r7
 800e2a0:	b007      	add	sp, #28
 800e2a2:	bd90      	pop	{r4, r7, pc}
 800e2a4:	80002000 	.word	0x80002000
 800e2a8:	80002400 	.word	0x80002400

0800e2ac <I2C_Slave_ISR_DMA>:
  * @param  ITSources Interrupt sources enabled.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_Slave_ISR_DMA(struct __I2C_HandleTypeDef *hi2c, uint32_t ITFlags,
                                           uint32_t ITSources)
{
 800e2ac:	b580      	push	{r7, lr}
 800e2ae:	b088      	sub	sp, #32
 800e2b0:	af00      	add	r7, sp, #0
 800e2b2:	60f8      	str	r0, [r7, #12]
 800e2b4:	60b9      	str	r1, [r7, #8]
 800e2b6:	607a      	str	r2, [r7, #4]
  uint32_t tmpoptions = hi2c->XferOptions;
 800e2b8:	68fb      	ldr	r3, [r7, #12]
 800e2ba:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800e2bc:	61bb      	str	r3, [r7, #24]
  uint32_t treatdmanack = 0U;
 800e2be:	2300      	movs	r3, #0
 800e2c0:	61fb      	str	r3, [r7, #28]
  HAL_I2C_StateTypeDef tmpstate;

  /* Process locked */
  __HAL_LOCK(hi2c);
 800e2c2:	68fb      	ldr	r3, [r7, #12]
 800e2c4:	2240      	movs	r2, #64	@ 0x40
 800e2c6:	5c9b      	ldrb	r3, [r3, r2]
 800e2c8:	2b01      	cmp	r3, #1
 800e2ca:	d101      	bne.n	800e2d0 <I2C_Slave_ISR_DMA+0x24>
 800e2cc:	2302      	movs	r3, #2
 800e2ce:	e0cd      	b.n	800e46c <I2C_Slave_ISR_DMA+0x1c0>
 800e2d0:	68fb      	ldr	r3, [r7, #12]
 800e2d2:	2240      	movs	r2, #64	@ 0x40
 800e2d4:	2101      	movs	r1, #1
 800e2d6:	5499      	strb	r1, [r3, r2]

  /* Check if STOPF is set */
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800e2d8:	68bb      	ldr	r3, [r7, #8]
 800e2da:	2220      	movs	r2, #32
 800e2dc:	4013      	ands	r3, r2
 800e2de:	d009      	beq.n	800e2f4 <I2C_Slave_ISR_DMA+0x48>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_STOPI) != RESET))
 800e2e0:	687b      	ldr	r3, [r7, #4]
 800e2e2:	2220      	movs	r2, #32
 800e2e4:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_STOPF) != RESET) && \
 800e2e6:	d005      	beq.n	800e2f4 <I2C_Slave_ISR_DMA+0x48>
  {
    /* Call I2C Slave complete process */
    I2C_ITSlaveCplt(hi2c, ITFlags);
 800e2e8:	68ba      	ldr	r2, [r7, #8]
 800e2ea:	68fb      	ldr	r3, [r7, #12]
 800e2ec:	0011      	movs	r1, r2
 800e2ee:	0018      	movs	r0, r3
 800e2f0:	f000 fada 	bl	800e8a8 <I2C_ITSlaveCplt>
  }

  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800e2f4:	68bb      	ldr	r3, [r7, #8]
 800e2f6:	2210      	movs	r2, #16
 800e2f8:	4013      	ands	r3, r2
 800e2fa:	d100      	bne.n	800e2fe <I2C_Slave_ISR_DMA+0x52>
 800e2fc:	e0a3      	b.n	800e446 <I2C_Slave_ISR_DMA+0x19a>
      (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_NACKI) != RESET))
 800e2fe:	687b      	ldr	r3, [r7, #4]
 800e300:	2210      	movs	r2, #16
 800e302:	4013      	ands	r3, r2
  if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_AF) != RESET) && \
 800e304:	d100      	bne.n	800e308 <I2C_Slave_ISR_DMA+0x5c>
 800e306:	e09e      	b.n	800e446 <I2C_Slave_ISR_DMA+0x19a>
  {
    /* Check that I2C transfer finished */
    /* if yes, normal use case, a NACK is sent by the MASTER when Transfer is finished */
    /* Mean XferCount == 0 */
    /* So clear Flag NACKF only */
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800e308:	687a      	ldr	r2, [r7, #4]
 800e30a:	2380      	movs	r3, #128	@ 0x80
 800e30c:	01db      	lsls	r3, r3, #7
 800e30e:	4013      	ands	r3, r2
 800e310:	d105      	bne.n	800e31e <I2C_Slave_ISR_DMA+0x72>
        (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET))
 800e312:	687a      	ldr	r2, [r7, #4]
 800e314:	2380      	movs	r3, #128	@ 0x80
 800e316:	021b      	lsls	r3, r3, #8
 800e318:	4013      	ands	r3, r2
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800e31a:	d100      	bne.n	800e31e <I2C_Slave_ISR_DMA+0x72>
 800e31c:	e08c      	b.n	800e438 <I2C_Slave_ISR_DMA+0x18c>
    {
      /* Split check of hdmarx, for MISRA compliance */
      if (hi2c->hdmarx != NULL)
 800e31e:	68fb      	ldr	r3, [r7, #12]
 800e320:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e322:	2b00      	cmp	r3, #0
 800e324:	d00c      	beq.n	800e340 <I2C_Slave_ISR_DMA+0x94>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_RXDMAEN) != RESET)
 800e326:	687a      	ldr	r2, [r7, #4]
 800e328:	2380      	movs	r3, #128	@ 0x80
 800e32a:	021b      	lsls	r3, r3, #8
 800e32c:	4013      	ands	r3, r2
 800e32e:	d007      	beq.n	800e340 <I2C_Slave_ISR_DMA+0x94>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx) == 0U)
 800e330:	68fb      	ldr	r3, [r7, #12]
 800e332:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e334:	681b      	ldr	r3, [r3, #0]
 800e336:	685b      	ldr	r3, [r3, #4]
 800e338:	2b00      	cmp	r3, #0
 800e33a:	d101      	bne.n	800e340 <I2C_Slave_ISR_DMA+0x94>
          {
            treatdmanack = 1U;
 800e33c:	2301      	movs	r3, #1
 800e33e:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      /* Split check of hdmatx, for MISRA compliance  */
      if (hi2c->hdmatx != NULL)
 800e340:	68fb      	ldr	r3, [r7, #12]
 800e342:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e344:	2b00      	cmp	r3, #0
 800e346:	d00c      	beq.n	800e362 <I2C_Slave_ISR_DMA+0xb6>
      {
        if (I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET)
 800e348:	687a      	ldr	r2, [r7, #4]
 800e34a:	2380      	movs	r3, #128	@ 0x80
 800e34c:	01db      	lsls	r3, r3, #7
 800e34e:	4013      	ands	r3, r2
 800e350:	d007      	beq.n	800e362 <I2C_Slave_ISR_DMA+0xb6>
        {
          if (I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx) == 0U)
 800e352:	68fb      	ldr	r3, [r7, #12]
 800e354:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e356:	681b      	ldr	r3, [r3, #0]
 800e358:	685b      	ldr	r3, [r3, #4]
 800e35a:	2b00      	cmp	r3, #0
 800e35c:	d101      	bne.n	800e362 <I2C_Slave_ISR_DMA+0xb6>
          {
            treatdmanack = 1U;
 800e35e:	2301      	movs	r3, #1
 800e360:	61fb      	str	r3, [r7, #28]
          }
        }
      }

      if (treatdmanack == 1U)
 800e362:	69fb      	ldr	r3, [r7, #28]
 800e364:	2b01      	cmp	r3, #1
 800e366:	d12d      	bne.n	800e3c4 <I2C_Slave_ISR_DMA+0x118>
      {
        if ((hi2c->State == HAL_I2C_STATE_LISTEN) && (tmpoptions == I2C_FIRST_AND_LAST_FRAME))
 800e368:	68fb      	ldr	r3, [r7, #12]
 800e36a:	2241      	movs	r2, #65	@ 0x41
 800e36c:	5c9b      	ldrb	r3, [r3, r2]
 800e36e:	b2db      	uxtb	r3, r3
 800e370:	2b28      	cmp	r3, #40	@ 0x28
 800e372:	d10b      	bne.n	800e38c <I2C_Slave_ISR_DMA+0xe0>
 800e374:	69ba      	ldr	r2, [r7, #24]
 800e376:	2380      	movs	r3, #128	@ 0x80
 800e378:	049b      	lsls	r3, r3, #18
 800e37a:	429a      	cmp	r2, r3
 800e37c:	d106      	bne.n	800e38c <I2C_Slave_ISR_DMA+0xe0>
          /* Same action must be done for (tmpoptions == I2C_LAST_FRAME) which removed for
             Warning[Pa134]: left and right operands are identical */
        {
          /* Call I2C Listen complete process */
          I2C_ITListenCplt(hi2c, ITFlags);
 800e37e:	68ba      	ldr	r2, [r7, #8]
 800e380:	68fb      	ldr	r3, [r7, #12]
 800e382:	0011      	movs	r1, r2
 800e384:	0018      	movs	r0, r3
 800e386:	f000 fbaf 	bl	800eae8 <I2C_ITListenCplt>
 800e38a:	e054      	b.n	800e436 <I2C_Slave_ISR_DMA+0x18a>
        }
        else if ((hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN) && (tmpoptions != I2C_NO_OPTION_FRAME))
 800e38c:	68fb      	ldr	r3, [r7, #12]
 800e38e:	2241      	movs	r2, #65	@ 0x41
 800e390:	5c9b      	ldrb	r3, [r3, r2]
 800e392:	b2db      	uxtb	r3, r3
 800e394:	2b29      	cmp	r3, #41	@ 0x29
 800e396:	d110      	bne.n	800e3ba <I2C_Slave_ISR_DMA+0x10e>
 800e398:	69bb      	ldr	r3, [r7, #24]
 800e39a:	4a36      	ldr	r2, [pc, #216]	@ (800e474 <I2C_Slave_ISR_DMA+0x1c8>)
 800e39c:	4293      	cmp	r3, r2
 800e39e:	d00c      	beq.n	800e3ba <I2C_Slave_ISR_DMA+0x10e>
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e3a0:	68fb      	ldr	r3, [r7, #12]
 800e3a2:	681b      	ldr	r3, [r3, #0]
 800e3a4:	2210      	movs	r2, #16
 800e3a6:	61da      	str	r2, [r3, #28]

          /* Flush TX register */
          I2C_Flush_TXDR(hi2c);
 800e3a8:	68fb      	ldr	r3, [r7, #12]
 800e3aa:	0018      	movs	r0, r3
 800e3ac:	f000 fd1f 	bl	800edee <I2C_Flush_TXDR>

          /* Last Byte is Transmitted */
          /* Call I2C Slave Sequential complete process */
          I2C_ITSlaveSeqCplt(hi2c);
 800e3b0:	68fb      	ldr	r3, [r7, #12]
 800e3b2:	0018      	movs	r0, r3
 800e3b4:	f000 f946 	bl	800e644 <I2C_ITSlaveSeqCplt>
 800e3b8:	e03d      	b.n	800e436 <I2C_Slave_ISR_DMA+0x18a>
        }
        else
        {
          /* Clear NACK Flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e3ba:	68fb      	ldr	r3, [r7, #12]
 800e3bc:	681b      	ldr	r3, [r3, #0]
 800e3be:	2210      	movs	r2, #16
 800e3c0:	61da      	str	r2, [r3, #28]
      if (treatdmanack == 1U)
 800e3c2:	e03e      	b.n	800e442 <I2C_Slave_ISR_DMA+0x196>
      }
      else
      {
        /* if no, error use case, a Non-Acknowledge of last Data is generated by the MASTER*/
        /* Clear NACK Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e3c4:	68fb      	ldr	r3, [r7, #12]
 800e3c6:	681b      	ldr	r3, [r3, #0]
 800e3c8:	2210      	movs	r2, #16
 800e3ca:	61da      	str	r2, [r3, #28]

        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800e3cc:	68fb      	ldr	r3, [r7, #12]
 800e3ce:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e3d0:	2204      	movs	r2, #4
 800e3d2:	431a      	orrs	r2, r3
 800e3d4:	68fb      	ldr	r3, [r7, #12]
 800e3d6:	645a      	str	r2, [r3, #68]	@ 0x44

        /* Store current hi2c->State, solve MISRA2012-Rule-13.5 */
        tmpstate = hi2c->State;
 800e3d8:	2317      	movs	r3, #23
 800e3da:	18fb      	adds	r3, r7, r3
 800e3dc:	68fa      	ldr	r2, [r7, #12]
 800e3de:	2141      	movs	r1, #65	@ 0x41
 800e3e0:	5c52      	ldrb	r2, [r2, r1]
 800e3e2:	701a      	strb	r2, [r3, #0]

        if ((tmpoptions == I2C_FIRST_FRAME) || (tmpoptions == I2C_NEXT_FRAME))
 800e3e4:	69bb      	ldr	r3, [r7, #24]
 800e3e6:	2b00      	cmp	r3, #0
 800e3e8:	d004      	beq.n	800e3f4 <I2C_Slave_ISR_DMA+0x148>
 800e3ea:	69ba      	ldr	r2, [r7, #24]
 800e3ec:	2380      	movs	r3, #128	@ 0x80
 800e3ee:	045b      	lsls	r3, r3, #17
 800e3f0:	429a      	cmp	r2, r3
 800e3f2:	d126      	bne.n	800e442 <I2C_Slave_ISR_DMA+0x196>
        {
          if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800e3f4:	2217      	movs	r2, #23
 800e3f6:	18bb      	adds	r3, r7, r2
 800e3f8:	781b      	ldrb	r3, [r3, #0]
 800e3fa:	2b21      	cmp	r3, #33	@ 0x21
 800e3fc:	d003      	beq.n	800e406 <I2C_Slave_ISR_DMA+0x15a>
 800e3fe:	18bb      	adds	r3, r7, r2
 800e400:	781b      	ldrb	r3, [r3, #0]
 800e402:	2b29      	cmp	r3, #41	@ 0x29
 800e404:	d103      	bne.n	800e40e <I2C_Slave_ISR_DMA+0x162>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800e406:	68fb      	ldr	r3, [r7, #12]
 800e408:	2221      	movs	r2, #33	@ 0x21
 800e40a:	631a      	str	r2, [r3, #48]	@ 0x30
 800e40c:	e00b      	b.n	800e426 <I2C_Slave_ISR_DMA+0x17a>
          }
          else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800e40e:	2217      	movs	r2, #23
 800e410:	18bb      	adds	r3, r7, r2
 800e412:	781b      	ldrb	r3, [r3, #0]
 800e414:	2b22      	cmp	r3, #34	@ 0x22
 800e416:	d003      	beq.n	800e420 <I2C_Slave_ISR_DMA+0x174>
 800e418:	18bb      	adds	r3, r7, r2
 800e41a:	781b      	ldrb	r3, [r3, #0]
 800e41c:	2b2a      	cmp	r3, #42	@ 0x2a
 800e41e:	d102      	bne.n	800e426 <I2C_Slave_ISR_DMA+0x17a>
          {
            hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800e420:	68fb      	ldr	r3, [r7, #12]
 800e422:	2222      	movs	r2, #34	@ 0x22
 800e424:	631a      	str	r2, [r3, #48]	@ 0x30
          {
            /* Do nothing */
          }

          /* Call the corresponding callback to inform upper layer of End of Transfer */
          I2C_ITError(hi2c, hi2c->ErrorCode);
 800e426:	68fb      	ldr	r3, [r7, #12]
 800e428:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e42a:	68fb      	ldr	r3, [r7, #12]
 800e42c:	0011      	movs	r1, r2
 800e42e:	0018      	movs	r0, r3
 800e430:	f000 fbb2 	bl	800eb98 <I2C_ITError>
      if (treatdmanack == 1U)
 800e434:	e005      	b.n	800e442 <I2C_Slave_ISR_DMA+0x196>
 800e436:	e004      	b.n	800e442 <I2C_Slave_ISR_DMA+0x196>
      }
    }
    else
    {
      /* Only Clear NACK Flag, no DMA treatment is pending */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e438:	68fb      	ldr	r3, [r7, #12]
 800e43a:	681b      	ldr	r3, [r3, #0]
 800e43c:	2210      	movs	r2, #16
 800e43e:	61da      	str	r2, [r3, #28]
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800e440:	e00f      	b.n	800e462 <I2C_Slave_ISR_DMA+0x1b6>
      if (treatdmanack == 1U)
 800e442:	46c0      	nop			@ (mov r8, r8)
    if ((I2C_CHECK_IT_SOURCE(ITSources, I2C_CR1_TXDMAEN) != RESET) ||
 800e444:	e00d      	b.n	800e462 <I2C_Slave_ISR_DMA+0x1b6>
    }
  }
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800e446:	68bb      	ldr	r3, [r7, #8]
 800e448:	2208      	movs	r2, #8
 800e44a:	4013      	ands	r3, r2
 800e44c:	d009      	beq.n	800e462 <I2C_Slave_ISR_DMA+0x1b6>
           (I2C_CHECK_IT_SOURCE(ITSources, I2C_IT_ADDRI) != RESET))
 800e44e:	687b      	ldr	r3, [r7, #4]
 800e450:	2208      	movs	r2, #8
 800e452:	4013      	ands	r3, r2
  else if ((I2C_CHECK_FLAG(ITFlags, I2C_FLAG_ADDR) != RESET) && \
 800e454:	d005      	beq.n	800e462 <I2C_Slave_ISR_DMA+0x1b6>
  {
    I2C_ITAddrCplt(hi2c, ITFlags);
 800e456:	68ba      	ldr	r2, [r7, #8]
 800e458:	68fb      	ldr	r3, [r7, #12]
 800e45a:	0011      	movs	r1, r2
 800e45c:	0018      	movs	r0, r3
 800e45e:	f000 f80b 	bl	800e478 <I2C_ITAddrCplt>
  {
    /* Nothing to do */
  }

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800e462:	68fb      	ldr	r3, [r7, #12]
 800e464:	2240      	movs	r2, #64	@ 0x40
 800e466:	2100      	movs	r1, #0
 800e468:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800e46a:	2300      	movs	r3, #0
}
 800e46c:	0018      	movs	r0, r3
 800e46e:	46bd      	mov	sp, r7
 800e470:	b008      	add	sp, #32
 800e472:	bd80      	pop	{r7, pc}
 800e474:	ffff0000 	.word	0xffff0000

0800e478 <I2C_ITAddrCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITAddrCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800e478:	b5b0      	push	{r4, r5, r7, lr}
 800e47a:	b084      	sub	sp, #16
 800e47c:	af00      	add	r7, sp, #0
 800e47e:	6078      	str	r0, [r7, #4]
 800e480:	6039      	str	r1, [r7, #0]

  /* Prevent unused argument(s) compilation warning */
  UNUSED(ITFlags);

  /* In case of Listen state, need to inform upper layer of address match code event */
  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800e482:	687b      	ldr	r3, [r7, #4]
 800e484:	2241      	movs	r2, #65	@ 0x41
 800e486:	5c9b      	ldrb	r3, [r3, r2]
 800e488:	b2db      	uxtb	r3, r3
 800e48a:	001a      	movs	r2, r3
 800e48c:	2328      	movs	r3, #40	@ 0x28
 800e48e:	4013      	ands	r3, r2
 800e490:	2b28      	cmp	r3, #40	@ 0x28
 800e492:	d000      	beq.n	800e496 <I2C_ITAddrCplt+0x1e>
 800e494:	e088      	b.n	800e5a8 <I2C_ITAddrCplt+0x130>
  {
    transferdirection = I2C_GET_DIR(hi2c);
 800e496:	687b      	ldr	r3, [r7, #4]
 800e498:	681b      	ldr	r3, [r3, #0]
 800e49a:	699b      	ldr	r3, [r3, #24]
 800e49c:	0c1b      	lsrs	r3, r3, #16
 800e49e:	b2da      	uxtb	r2, r3
 800e4a0:	250f      	movs	r5, #15
 800e4a2:	197b      	adds	r3, r7, r5
 800e4a4:	2101      	movs	r1, #1
 800e4a6:	400a      	ands	r2, r1
 800e4a8:	701a      	strb	r2, [r3, #0]
    slaveaddrcode     = I2C_GET_ADDR_MATCH(hi2c);
 800e4aa:	687b      	ldr	r3, [r7, #4]
 800e4ac:	681b      	ldr	r3, [r3, #0]
 800e4ae:	699b      	ldr	r3, [r3, #24]
 800e4b0:	0c1b      	lsrs	r3, r3, #16
 800e4b2:	b29a      	uxth	r2, r3
 800e4b4:	200c      	movs	r0, #12
 800e4b6:	183b      	adds	r3, r7, r0
 800e4b8:	21fe      	movs	r1, #254	@ 0xfe
 800e4ba:	400a      	ands	r2, r1
 800e4bc:	801a      	strh	r2, [r3, #0]
    ownadd1code       = I2C_GET_OWN_ADDRESS1(hi2c);
 800e4be:	687b      	ldr	r3, [r7, #4]
 800e4c0:	681b      	ldr	r3, [r3, #0]
 800e4c2:	689b      	ldr	r3, [r3, #8]
 800e4c4:	b29a      	uxth	r2, r3
 800e4c6:	240a      	movs	r4, #10
 800e4c8:	193b      	adds	r3, r7, r4
 800e4ca:	0592      	lsls	r2, r2, #22
 800e4cc:	0d92      	lsrs	r2, r2, #22
 800e4ce:	801a      	strh	r2, [r3, #0]
    ownadd2code       = I2C_GET_OWN_ADDRESS2(hi2c);
 800e4d0:	687b      	ldr	r3, [r7, #4]
 800e4d2:	681b      	ldr	r3, [r3, #0]
 800e4d4:	68db      	ldr	r3, [r3, #12]
 800e4d6:	b29a      	uxth	r2, r3
 800e4d8:	2308      	movs	r3, #8
 800e4da:	18fb      	adds	r3, r7, r3
 800e4dc:	21fe      	movs	r1, #254	@ 0xfe
 800e4de:	400a      	ands	r2, r1
 800e4e0:	801a      	strh	r2, [r3, #0]

    /* If 10bits addressing mode is selected */
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT)
 800e4e2:	687b      	ldr	r3, [r7, #4]
 800e4e4:	68db      	ldr	r3, [r3, #12]
 800e4e6:	2b02      	cmp	r3, #2
 800e4e8:	d148      	bne.n	800e57c <I2C_ITAddrCplt+0x104>
    {
      if ((slaveaddrcode & SLAVE_ADDR_MSK) == ((ownadd1code >> SLAVE_ADDR_SHIFT) & SLAVE_ADDR_MSK))
 800e4ea:	0021      	movs	r1, r4
 800e4ec:	187b      	adds	r3, r7, r1
 800e4ee:	881b      	ldrh	r3, [r3, #0]
 800e4f0:	09db      	lsrs	r3, r3, #7
 800e4f2:	b29a      	uxth	r2, r3
 800e4f4:	183b      	adds	r3, r7, r0
 800e4f6:	881b      	ldrh	r3, [r3, #0]
 800e4f8:	4053      	eors	r3, r2
 800e4fa:	b29b      	uxth	r3, r3
 800e4fc:	001a      	movs	r2, r3
 800e4fe:	2306      	movs	r3, #6
 800e500:	4013      	ands	r3, r2
 800e502:	d120      	bne.n	800e546 <I2C_ITAddrCplt+0xce>
      {
        slaveaddrcode = ownadd1code;
 800e504:	183b      	adds	r3, r7, r0
 800e506:	187a      	adds	r2, r7, r1
 800e508:	8812      	ldrh	r2, [r2, #0]
 800e50a:	801a      	strh	r2, [r3, #0]
        hi2c->AddrEventCount++;
 800e50c:	687b      	ldr	r3, [r7, #4]
 800e50e:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e510:	1c5a      	adds	r2, r3, #1
 800e512:	687b      	ldr	r3, [r7, #4]
 800e514:	649a      	str	r2, [r3, #72]	@ 0x48
        if (hi2c->AddrEventCount == 2U)
 800e516:	687b      	ldr	r3, [r7, #4]
 800e518:	6c9b      	ldr	r3, [r3, #72]	@ 0x48
 800e51a:	2b02      	cmp	r3, #2
 800e51c:	d14c      	bne.n	800e5b8 <I2C_ITAddrCplt+0x140>
        {
          /* Reset Address Event counter */
          hi2c->AddrEventCount = 0U;
 800e51e:	687b      	ldr	r3, [r7, #4]
 800e520:	2200      	movs	r2, #0
 800e522:	649a      	str	r2, [r3, #72]	@ 0x48

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800e524:	687b      	ldr	r3, [r7, #4]
 800e526:	681b      	ldr	r3, [r3, #0]
 800e528:	2208      	movs	r2, #8
 800e52a:	61da      	str	r2, [r3, #28]

          /* Process Unlocked */
          __HAL_UNLOCK(hi2c);
 800e52c:	687b      	ldr	r3, [r7, #4]
 800e52e:	2240      	movs	r2, #64	@ 0x40
 800e530:	2100      	movs	r1, #0
 800e532:	5499      	strb	r1, [r3, r2]

          /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
          hi2c->AddrCallback(hi2c, transferdirection, slaveaddrcode);
#else
          HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800e534:	183b      	adds	r3, r7, r0
 800e536:	881a      	ldrh	r2, [r3, #0]
 800e538:	197b      	adds	r3, r7, r5
 800e53a:	7819      	ldrb	r1, [r3, #0]
 800e53c:	687b      	ldr	r3, [r7, #4]
 800e53e:	0018      	movs	r0, r3
 800e540:	f7ff fa39 	bl	800d9b6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 800e544:	e038      	b.n	800e5b8 <I2C_ITAddrCplt+0x140>
        slaveaddrcode = ownadd2code;
 800e546:	240c      	movs	r4, #12
 800e548:	193b      	adds	r3, r7, r4
 800e54a:	2208      	movs	r2, #8
 800e54c:	18ba      	adds	r2, r7, r2
 800e54e:	8812      	ldrh	r2, [r2, #0]
 800e550:	801a      	strh	r2, [r3, #0]
        I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800e552:	2380      	movs	r3, #128	@ 0x80
 800e554:	021a      	lsls	r2, r3, #8
 800e556:	687b      	ldr	r3, [r7, #4]
 800e558:	0011      	movs	r1, r2
 800e55a:	0018      	movs	r0, r3
 800e55c:	f000 fe0a 	bl	800f174 <I2C_Disable_IRQ>
        __HAL_UNLOCK(hi2c);
 800e560:	687b      	ldr	r3, [r7, #4]
 800e562:	2240      	movs	r2, #64	@ 0x40
 800e564:	2100      	movs	r1, #0
 800e566:	5499      	strb	r1, [r3, r2]
        HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800e568:	193b      	adds	r3, r7, r4
 800e56a:	881a      	ldrh	r2, [r3, #0]
 800e56c:	230f      	movs	r3, #15
 800e56e:	18fb      	adds	r3, r7, r3
 800e570:	7819      	ldrb	r1, [r3, #0]
 800e572:	687b      	ldr	r3, [r7, #4]
 800e574:	0018      	movs	r0, r3
 800e576:	f7ff fa1e 	bl	800d9b6 <HAL_I2C_AddrCallback>
}
 800e57a:	e01d      	b.n	800e5b8 <I2C_ITAddrCplt+0x140>
      I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT);
 800e57c:	2380      	movs	r3, #128	@ 0x80
 800e57e:	021a      	lsls	r2, r3, #8
 800e580:	687b      	ldr	r3, [r7, #4]
 800e582:	0011      	movs	r1, r2
 800e584:	0018      	movs	r0, r3
 800e586:	f000 fdf5 	bl	800f174 <I2C_Disable_IRQ>
      __HAL_UNLOCK(hi2c);
 800e58a:	687b      	ldr	r3, [r7, #4]
 800e58c:	2240      	movs	r2, #64	@ 0x40
 800e58e:	2100      	movs	r1, #0
 800e590:	5499      	strb	r1, [r3, r2]
      HAL_I2C_AddrCallback(hi2c, transferdirection, slaveaddrcode);
 800e592:	230c      	movs	r3, #12
 800e594:	18fb      	adds	r3, r7, r3
 800e596:	881a      	ldrh	r2, [r3, #0]
 800e598:	230f      	movs	r3, #15
 800e59a:	18fb      	adds	r3, r7, r3
 800e59c:	7819      	ldrb	r1, [r3, #0]
 800e59e:	687b      	ldr	r3, [r7, #4]
 800e5a0:	0018      	movs	r0, r3
 800e5a2:	f7ff fa08 	bl	800d9b6 <HAL_I2C_AddrCallback>
}
 800e5a6:	e007      	b.n	800e5b8 <I2C_ITAddrCplt+0x140>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 800e5a8:	687b      	ldr	r3, [r7, #4]
 800e5aa:	681b      	ldr	r3, [r3, #0]
 800e5ac:	2208      	movs	r2, #8
 800e5ae:	61da      	str	r2, [r3, #28]
    __HAL_UNLOCK(hi2c);
 800e5b0:	687b      	ldr	r3, [r7, #4]
 800e5b2:	2240      	movs	r2, #64	@ 0x40
 800e5b4:	2100      	movs	r1, #0
 800e5b6:	5499      	strb	r1, [r3, r2]
}
 800e5b8:	46c0      	nop			@ (mov r8, r8)
 800e5ba:	46bd      	mov	sp, r7
 800e5bc:	b004      	add	sp, #16
 800e5be:	bdb0      	pop	{r4, r5, r7, pc}

0800e5c0 <I2C_ITMasterSeqCplt>:
  * @brief  I2C Master sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITMasterSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800e5c0:	b580      	push	{r7, lr}
 800e5c2:	b082      	sub	sp, #8
 800e5c4:	af00      	add	r7, sp, #0
 800e5c6:	6078      	str	r0, [r7, #4]
  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800e5c8:	687b      	ldr	r3, [r7, #4]
 800e5ca:	2242      	movs	r2, #66	@ 0x42
 800e5cc:	2100      	movs	r1, #0
 800e5ce:	5499      	strb	r1, [r3, r2]

  /* No Generate Stop, to permit restart mode */
  /* The stop will be done at the end of transfer, when I2C_AUTOEND_MODE enable */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800e5d0:	687b      	ldr	r3, [r7, #4]
 800e5d2:	2241      	movs	r2, #65	@ 0x41
 800e5d4:	5c9b      	ldrb	r3, [r3, r2]
 800e5d6:	b2db      	uxtb	r3, r3
 800e5d8:	2b21      	cmp	r3, #33	@ 0x21
 800e5da:	d117      	bne.n	800e60c <I2C_ITMasterSeqCplt+0x4c>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 800e5dc:	687b      	ldr	r3, [r7, #4]
 800e5de:	2241      	movs	r2, #65	@ 0x41
 800e5e0:	2120      	movs	r1, #32
 800e5e2:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800e5e4:	687b      	ldr	r3, [r7, #4]
 800e5e6:	2211      	movs	r2, #17
 800e5e8:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800e5ea:	687b      	ldr	r3, [r7, #4]
 800e5ec:	2200      	movs	r2, #0
 800e5ee:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800e5f0:	687b      	ldr	r3, [r7, #4]
 800e5f2:	2101      	movs	r1, #1
 800e5f4:	0018      	movs	r0, r3
 800e5f6:	f000 fdbd 	bl	800f174 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e5fa:	687b      	ldr	r3, [r7, #4]
 800e5fc:	2240      	movs	r2, #64	@ 0x40
 800e5fe:	2100      	movs	r1, #0
 800e600:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->MasterTxCpltCallback(hi2c);
#else
    HAL_I2C_MasterTxCpltCallback(hi2c);
 800e602:	687b      	ldr	r3, [r7, #4]
 800e604:	0018      	movs	r0, r3
 800e606:	f7ff f9b6 	bl	800d976 <HAL_I2C_MasterTxCpltCallback>
    hi2c->MasterRxCpltCallback(hi2c);
#else
    HAL_I2C_MasterRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800e60a:	e016      	b.n	800e63a <I2C_ITMasterSeqCplt+0x7a>
    hi2c->State         = HAL_I2C_STATE_READY;
 800e60c:	687b      	ldr	r3, [r7, #4]
 800e60e:	2241      	movs	r2, #65	@ 0x41
 800e610:	2120      	movs	r1, #32
 800e612:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800e614:	687b      	ldr	r3, [r7, #4]
 800e616:	2212      	movs	r2, #18
 800e618:	631a      	str	r2, [r3, #48]	@ 0x30
    hi2c->XferISR       = NULL;
 800e61a:	687b      	ldr	r3, [r7, #4]
 800e61c:	2200      	movs	r2, #0
 800e61e:	635a      	str	r2, [r3, #52]	@ 0x34
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800e620:	687b      	ldr	r3, [r7, #4]
 800e622:	2102      	movs	r1, #2
 800e624:	0018      	movs	r0, r3
 800e626:	f000 fda5 	bl	800f174 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800e62a:	687b      	ldr	r3, [r7, #4]
 800e62c:	2240      	movs	r2, #64	@ 0x40
 800e62e:	2100      	movs	r1, #0
 800e630:	5499      	strb	r1, [r3, r2]
    HAL_I2C_MasterRxCpltCallback(hi2c);
 800e632:	687b      	ldr	r3, [r7, #4]
 800e634:	0018      	movs	r0, r3
 800e636:	f7ff f9a6 	bl	800d986 <HAL_I2C_MasterRxCpltCallback>
}
 800e63a:	46c0      	nop			@ (mov r8, r8)
 800e63c:	46bd      	mov	sp, r7
 800e63e:	b002      	add	sp, #8
 800e640:	bd80      	pop	{r7, pc}
	...

0800e644 <I2C_ITSlaveSeqCplt>:
  * @brief  I2C Slave sequential complete process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITSlaveSeqCplt(I2C_HandleTypeDef *hi2c)
{
 800e644:	b580      	push	{r7, lr}
 800e646:	b084      	sub	sp, #16
 800e648:	af00      	add	r7, sp, #0
 800e64a:	6078      	str	r0, [r7, #4]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800e64c:	687b      	ldr	r3, [r7, #4]
 800e64e:	681b      	ldr	r3, [r3, #0]
 800e650:	681b      	ldr	r3, [r3, #0]
 800e652:	60fb      	str	r3, [r7, #12]

  /* Reset I2C handle mode */
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800e654:	687b      	ldr	r3, [r7, #4]
 800e656:	2242      	movs	r2, #66	@ 0x42
 800e658:	2100      	movs	r1, #0
 800e65a:	5499      	strb	r1, [r3, r2]

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800e65c:	68fa      	ldr	r2, [r7, #12]
 800e65e:	2380      	movs	r3, #128	@ 0x80
 800e660:	01db      	lsls	r3, r3, #7
 800e662:	4013      	ands	r3, r2
 800e664:	d008      	beq.n	800e678 <I2C_ITSlaveSeqCplt+0x34>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800e666:	687b      	ldr	r3, [r7, #4]
 800e668:	681b      	ldr	r3, [r3, #0]
 800e66a:	681a      	ldr	r2, [r3, #0]
 800e66c:	687b      	ldr	r3, [r7, #4]
 800e66e:	681b      	ldr	r3, [r3, #0]
 800e670:	4924      	ldr	r1, [pc, #144]	@ (800e704 <I2C_ITSlaveSeqCplt+0xc0>)
 800e672:	400a      	ands	r2, r1
 800e674:	601a      	str	r2, [r3, #0]
 800e676:	e00c      	b.n	800e692 <I2C_ITSlaveSeqCplt+0x4e>
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800e678:	68fa      	ldr	r2, [r7, #12]
 800e67a:	2380      	movs	r3, #128	@ 0x80
 800e67c:	021b      	lsls	r3, r3, #8
 800e67e:	4013      	ands	r3, r2
 800e680:	d007      	beq.n	800e692 <I2C_ITSlaveSeqCplt+0x4e>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800e682:	687b      	ldr	r3, [r7, #4]
 800e684:	681b      	ldr	r3, [r3, #0]
 800e686:	681a      	ldr	r2, [r3, #0]
 800e688:	687b      	ldr	r3, [r7, #4]
 800e68a:	681b      	ldr	r3, [r3, #0]
 800e68c:	491e      	ldr	r1, [pc, #120]	@ (800e708 <I2C_ITSlaveSeqCplt+0xc4>)
 800e68e:	400a      	ands	r2, r1
 800e690:	601a      	str	r2, [r3, #0]
  else
  {
    /* Do nothing */
  }

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX_LISTEN)
 800e692:	687b      	ldr	r3, [r7, #4]
 800e694:	2241      	movs	r2, #65	@ 0x41
 800e696:	5c9b      	ldrb	r3, [r3, r2]
 800e698:	b2db      	uxtb	r3, r3
 800e69a:	2b29      	cmp	r3, #41	@ 0x29
 800e69c:	d114      	bne.n	800e6c8 <I2C_ITSlaveSeqCplt+0x84>
  {
    /* Remove HAL_I2C_STATE_SLAVE_BUSY_TX, keep only HAL_I2C_STATE_LISTEN */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800e69e:	687b      	ldr	r3, [r7, #4]
 800e6a0:	2241      	movs	r2, #65	@ 0x41
 800e6a2:	2128      	movs	r1, #40	@ 0x28
 800e6a4:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800e6a6:	687b      	ldr	r3, [r7, #4]
 800e6a8:	2221      	movs	r2, #33	@ 0x21
 800e6aa:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Disable Interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800e6ac:	687b      	ldr	r3, [r7, #4]
 800e6ae:	2101      	movs	r1, #1
 800e6b0:	0018      	movs	r0, r3
 800e6b2:	f000 fd5f 	bl	800f174 <I2C_Disable_IRQ>

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800e6b6:	687b      	ldr	r3, [r7, #4]
 800e6b8:	2240      	movs	r2, #64	@ 0x40
 800e6ba:	2100      	movs	r1, #0
 800e6bc:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800e6be:	687b      	ldr	r3, [r7, #4]
 800e6c0:	0018      	movs	r0, r3
 800e6c2:	f7ff f968 	bl	800d996 <HAL_I2C_SlaveTxCpltCallback>
  }
  else
  {
    /* Nothing to do */
  }
}
 800e6c6:	e019      	b.n	800e6fc <I2C_ITSlaveSeqCplt+0xb8>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800e6c8:	687b      	ldr	r3, [r7, #4]
 800e6ca:	2241      	movs	r2, #65	@ 0x41
 800e6cc:	5c9b      	ldrb	r3, [r3, r2]
 800e6ce:	b2db      	uxtb	r3, r3
 800e6d0:	2b2a      	cmp	r3, #42	@ 0x2a
 800e6d2:	d113      	bne.n	800e6fc <I2C_ITSlaveSeqCplt+0xb8>
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800e6d4:	687b      	ldr	r3, [r7, #4]
 800e6d6:	2241      	movs	r2, #65	@ 0x41
 800e6d8:	2128      	movs	r1, #40	@ 0x28
 800e6da:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800e6dc:	687b      	ldr	r3, [r7, #4]
 800e6de:	2222      	movs	r2, #34	@ 0x22
 800e6e0:	631a      	str	r2, [r3, #48]	@ 0x30
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800e6e2:	687b      	ldr	r3, [r7, #4]
 800e6e4:	2102      	movs	r1, #2
 800e6e6:	0018      	movs	r0, r3
 800e6e8:	f000 fd44 	bl	800f174 <I2C_Disable_IRQ>
    __HAL_UNLOCK(hi2c);
 800e6ec:	687b      	ldr	r3, [r7, #4]
 800e6ee:	2240      	movs	r2, #64	@ 0x40
 800e6f0:	2100      	movs	r1, #0
 800e6f2:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800e6f4:	687b      	ldr	r3, [r7, #4]
 800e6f6:	0018      	movs	r0, r3
 800e6f8:	f7ff f955 	bl	800d9a6 <HAL_I2C_SlaveRxCpltCallback>
}
 800e6fc:	46c0      	nop			@ (mov r8, r8)
 800e6fe:	46bd      	mov	sp, r7
 800e700:	b004      	add	sp, #16
 800e702:	bd80      	pop	{r7, pc}
 800e704:	ffffbfff 	.word	0xffffbfff
 800e708:	ffff7fff 	.word	0xffff7fff

0800e70c <I2C_ITMasterCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITMasterCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800e70c:	b580      	push	{r7, lr}
 800e70e:	b086      	sub	sp, #24
 800e710:	af00      	add	r7, sp, #0
 800e712:	6078      	str	r0, [r7, #4]
 800e714:	6039      	str	r1, [r7, #0]
  uint32_t tmperror;
  uint32_t tmpITFlags = ITFlags;
 800e716:	683b      	ldr	r3, [r7, #0]
 800e718:	617b      	str	r3, [r7, #20]
  __IO uint32_t tmpreg;

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e71a:	687b      	ldr	r3, [r7, #4]
 800e71c:	681b      	ldr	r3, [r3, #0]
 800e71e:	2220      	movs	r2, #32
 800e720:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800e722:	687b      	ldr	r3, [r7, #4]
 800e724:	2241      	movs	r2, #65	@ 0x41
 800e726:	5c9b      	ldrb	r3, [r3, r2]
 800e728:	b2db      	uxtb	r3, r3
 800e72a:	2b21      	cmp	r3, #33	@ 0x21
 800e72c:	d108      	bne.n	800e740 <I2C_ITMasterCplt+0x34>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_TX_IT);
 800e72e:	687b      	ldr	r3, [r7, #4]
 800e730:	2101      	movs	r1, #1
 800e732:	0018      	movs	r0, r3
 800e734:	f000 fd1e 	bl	800f174 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800e738:	687b      	ldr	r3, [r7, #4]
 800e73a:	2211      	movs	r2, #17
 800e73c:	631a      	str	r2, [r3, #48]	@ 0x30
 800e73e:	e00d      	b.n	800e75c <I2C_ITMasterCplt+0x50>
  }
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800e740:	687b      	ldr	r3, [r7, #4]
 800e742:	2241      	movs	r2, #65	@ 0x41
 800e744:	5c9b      	ldrb	r3, [r3, r2]
 800e746:	b2db      	uxtb	r3, r3
 800e748:	2b22      	cmp	r3, #34	@ 0x22
 800e74a:	d107      	bne.n	800e75c <I2C_ITMasterCplt+0x50>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT);
 800e74c:	687b      	ldr	r3, [r7, #4]
 800e74e:	2102      	movs	r1, #2
 800e750:	0018      	movs	r0, r3
 800e752:	f000 fd0f 	bl	800f174 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800e756:	687b      	ldr	r3, [r7, #4]
 800e758:	2212      	movs	r2, #18
 800e75a:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800e75c:	687b      	ldr	r3, [r7, #4]
 800e75e:	681b      	ldr	r3, [r3, #0]
 800e760:	685a      	ldr	r2, [r3, #4]
 800e762:	687b      	ldr	r3, [r7, #4]
 800e764:	681b      	ldr	r3, [r3, #0]
 800e766:	494e      	ldr	r1, [pc, #312]	@ (800e8a0 <I2C_ITMasterCplt+0x194>)
 800e768:	400a      	ands	r2, r1
 800e76a:	605a      	str	r2, [r3, #4]

  /* Reset handle parameters */
  hi2c->XferISR       = NULL;
 800e76c:	687b      	ldr	r3, [r7, #4]
 800e76e:	2200      	movs	r2, #0
 800e770:	635a      	str	r2, [r3, #52]	@ 0x34
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800e772:	687b      	ldr	r3, [r7, #4]
 800e774:	4a4b      	ldr	r2, [pc, #300]	@ (800e8a4 <I2C_ITMasterCplt+0x198>)
 800e776:	62da      	str	r2, [r3, #44]	@ 0x2c

  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_AF) != RESET)
 800e778:	697b      	ldr	r3, [r7, #20]
 800e77a:	2210      	movs	r2, #16
 800e77c:	4013      	ands	r3, r2
 800e77e:	d009      	beq.n	800e794 <I2C_ITMasterCplt+0x88>
  {
    /* Clear NACK Flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800e780:	687b      	ldr	r3, [r7, #4]
 800e782:	681b      	ldr	r3, [r3, #0]
 800e784:	2210      	movs	r2, #16
 800e786:	61da      	str	r2, [r3, #28]

    /* Set acknowledge error code */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800e788:	687b      	ldr	r3, [r7, #4]
 800e78a:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e78c:	2204      	movs	r2, #4
 800e78e:	431a      	orrs	r2, r3
 800e790:	687b      	ldr	r3, [r7, #4]
 800e792:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  /* Fetch Last receive data if any */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) && (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET))
 800e794:	687b      	ldr	r3, [r7, #4]
 800e796:	2241      	movs	r2, #65	@ 0x41
 800e798:	5c9b      	ldrb	r3, [r3, r2]
 800e79a:	b2db      	uxtb	r3, r3
 800e79c:	2b60      	cmp	r3, #96	@ 0x60
 800e79e:	d109      	bne.n	800e7b4 <I2C_ITMasterCplt+0xa8>
 800e7a0:	697b      	ldr	r3, [r7, #20]
 800e7a2:	2204      	movs	r2, #4
 800e7a4:	4013      	ands	r3, r2
 800e7a6:	d005      	beq.n	800e7b4 <I2C_ITMasterCplt+0xa8>
  {
    /* Read data from RXDR */
    tmpreg = (uint8_t)hi2c->Instance->RXDR;
 800e7a8:	687b      	ldr	r3, [r7, #4]
 800e7aa:	681b      	ldr	r3, [r3, #0]
 800e7ac:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e7ae:	b2db      	uxtb	r3, r3
 800e7b0:	60fb      	str	r3, [r7, #12]
    UNUSED(tmpreg);
 800e7b2:	68fb      	ldr	r3, [r7, #12]
  }

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800e7b4:	687b      	ldr	r3, [r7, #4]
 800e7b6:	0018      	movs	r0, r3
 800e7b8:	f000 fb19 	bl	800edee <I2C_Flush_TXDR>

  /* Store current volatile hi2c->ErrorCode, misra rule */
  tmperror = hi2c->ErrorCode;
 800e7bc:	687b      	ldr	r3, [r7, #4]
 800e7be:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e7c0:	613b      	str	r3, [r7, #16]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  if ((hi2c->State == HAL_I2C_STATE_ABORT) || (tmperror != HAL_I2C_ERROR_NONE))
 800e7c2:	687b      	ldr	r3, [r7, #4]
 800e7c4:	2241      	movs	r2, #65	@ 0x41
 800e7c6:	5c9b      	ldrb	r3, [r3, r2]
 800e7c8:	b2db      	uxtb	r3, r3
 800e7ca:	2b60      	cmp	r3, #96	@ 0x60
 800e7cc:	d002      	beq.n	800e7d4 <I2C_ITMasterCplt+0xc8>
 800e7ce:	693b      	ldr	r3, [r7, #16]
 800e7d0:	2b00      	cmp	r3, #0
 800e7d2:	d007      	beq.n	800e7e4 <I2C_ITMasterCplt+0xd8>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800e7d4:	687b      	ldr	r3, [r7, #4]
 800e7d6:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800e7d8:	687b      	ldr	r3, [r7, #4]
 800e7da:	0011      	movs	r1, r2
 800e7dc:	0018      	movs	r0, r3
 800e7de:	f000 f9db 	bl	800eb98 <I2C_ITError>
  }
  else
  {
    /* Nothing to do */
  }
}
 800e7e2:	e058      	b.n	800e896 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800e7e4:	687b      	ldr	r3, [r7, #4]
 800e7e6:	2241      	movs	r2, #65	@ 0x41
 800e7e8:	5c9b      	ldrb	r3, [r3, r2]
 800e7ea:	b2db      	uxtb	r3, r3
 800e7ec:	2b21      	cmp	r3, #33	@ 0x21
 800e7ee:	d126      	bne.n	800e83e <I2C_ITMasterCplt+0x132>
    hi2c->State = HAL_I2C_STATE_READY;
 800e7f0:	687b      	ldr	r3, [r7, #4]
 800e7f2:	2241      	movs	r2, #65	@ 0x41
 800e7f4:	2120      	movs	r1, #32
 800e7f6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800e7f8:	687b      	ldr	r3, [r7, #4]
 800e7fa:	2200      	movs	r2, #0
 800e7fc:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800e7fe:	687b      	ldr	r3, [r7, #4]
 800e800:	2242      	movs	r2, #66	@ 0x42
 800e802:	5c9b      	ldrb	r3, [r3, r2]
 800e804:	b2db      	uxtb	r3, r3
 800e806:	2b40      	cmp	r3, #64	@ 0x40
 800e808:	d10c      	bne.n	800e824 <I2C_ITMasterCplt+0x118>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800e80a:	687b      	ldr	r3, [r7, #4]
 800e80c:	2242      	movs	r2, #66	@ 0x42
 800e80e:	2100      	movs	r1, #0
 800e810:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800e812:	687b      	ldr	r3, [r7, #4]
 800e814:	2240      	movs	r2, #64	@ 0x40
 800e816:	2100      	movs	r1, #0
 800e818:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemTxCpltCallback(hi2c);
 800e81a:	687b      	ldr	r3, [r7, #4]
 800e81c:	0018      	movs	r0, r3
 800e81e:	f7ff f8e2 	bl	800d9e6 <HAL_I2C_MemTxCpltCallback>
}
 800e822:	e038      	b.n	800e896 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800e824:	687b      	ldr	r3, [r7, #4]
 800e826:	2242      	movs	r2, #66	@ 0x42
 800e828:	2100      	movs	r1, #0
 800e82a:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800e82c:	687b      	ldr	r3, [r7, #4]
 800e82e:	2240      	movs	r2, #64	@ 0x40
 800e830:	2100      	movs	r1, #0
 800e832:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800e834:	687b      	ldr	r3, [r7, #4]
 800e836:	0018      	movs	r0, r3
 800e838:	f7ff f89d 	bl	800d976 <HAL_I2C_MasterTxCpltCallback>
}
 800e83c:	e02b      	b.n	800e896 <I2C_ITMasterCplt+0x18a>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800e83e:	687b      	ldr	r3, [r7, #4]
 800e840:	2241      	movs	r2, #65	@ 0x41
 800e842:	5c9b      	ldrb	r3, [r3, r2]
 800e844:	b2db      	uxtb	r3, r3
 800e846:	2b22      	cmp	r3, #34	@ 0x22
 800e848:	d125      	bne.n	800e896 <I2C_ITMasterCplt+0x18a>
    hi2c->State = HAL_I2C_STATE_READY;
 800e84a:	687b      	ldr	r3, [r7, #4]
 800e84c:	2241      	movs	r2, #65	@ 0x41
 800e84e:	2120      	movs	r1, #32
 800e850:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800e852:	687b      	ldr	r3, [r7, #4]
 800e854:	2200      	movs	r2, #0
 800e856:	631a      	str	r2, [r3, #48]	@ 0x30
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800e858:	687b      	ldr	r3, [r7, #4]
 800e85a:	2242      	movs	r2, #66	@ 0x42
 800e85c:	5c9b      	ldrb	r3, [r3, r2]
 800e85e:	b2db      	uxtb	r3, r3
 800e860:	2b40      	cmp	r3, #64	@ 0x40
 800e862:	d10c      	bne.n	800e87e <I2C_ITMasterCplt+0x172>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800e864:	687b      	ldr	r3, [r7, #4]
 800e866:	2242      	movs	r2, #66	@ 0x42
 800e868:	2100      	movs	r1, #0
 800e86a:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800e86c:	687b      	ldr	r3, [r7, #4]
 800e86e:	2240      	movs	r2, #64	@ 0x40
 800e870:	2100      	movs	r1, #0
 800e872:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MemRxCpltCallback(hi2c);
 800e874:	687b      	ldr	r3, [r7, #4]
 800e876:	0018      	movs	r0, r3
 800e878:	f7ff f8bd 	bl	800d9f6 <HAL_I2C_MemRxCpltCallback>
}
 800e87c:	e00b      	b.n	800e896 <I2C_ITMasterCplt+0x18a>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800e87e:	687b      	ldr	r3, [r7, #4]
 800e880:	2242      	movs	r2, #66	@ 0x42
 800e882:	2100      	movs	r1, #0
 800e884:	5499      	strb	r1, [r3, r2]
      __HAL_UNLOCK(hi2c);
 800e886:	687b      	ldr	r3, [r7, #4]
 800e888:	2240      	movs	r2, #64	@ 0x40
 800e88a:	2100      	movs	r1, #0
 800e88c:	5499      	strb	r1, [r3, r2]
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800e88e:	687b      	ldr	r3, [r7, #4]
 800e890:	0018      	movs	r0, r3
 800e892:	f7ff f878 	bl	800d986 <HAL_I2C_MasterRxCpltCallback>
}
 800e896:	46c0      	nop			@ (mov r8, r8)
 800e898:	46bd      	mov	sp, r7
 800e89a:	b006      	add	sp, #24
 800e89c:	bd80      	pop	{r7, pc}
 800e89e:	46c0      	nop			@ (mov r8, r8)
 800e8a0:	fe00e800 	.word	0xfe00e800
 800e8a4:	ffff0000 	.word	0xffff0000

0800e8a8 <I2C_ITSlaveCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITSlaveCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800e8a8:	b580      	push	{r7, lr}
 800e8aa:	b086      	sub	sp, #24
 800e8ac:	af00      	add	r7, sp, #0
 800e8ae:	6078      	str	r0, [r7, #4]
 800e8b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1value = READ_REG(hi2c->Instance->CR1);
 800e8b2:	687b      	ldr	r3, [r7, #4]
 800e8b4:	681b      	ldr	r3, [r3, #0]
 800e8b6:	681b      	ldr	r3, [r3, #0]
 800e8b8:	613b      	str	r3, [r7, #16]
  uint32_t tmpITFlags = ITFlags;
 800e8ba:	683b      	ldr	r3, [r7, #0]
 800e8bc:	617b      	str	r3, [r7, #20]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800e8be:	200f      	movs	r0, #15
 800e8c0:	183b      	adds	r3, r7, r0
 800e8c2:	687a      	ldr	r2, [r7, #4]
 800e8c4:	2141      	movs	r1, #65	@ 0x41
 800e8c6:	5c52      	ldrb	r2, [r2, r1]
 800e8c8:	701a      	strb	r2, [r3, #0]

  /* Clear STOP Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800e8ca:	687b      	ldr	r3, [r7, #4]
 800e8cc:	681b      	ldr	r3, [r3, #0]
 800e8ce:	2220      	movs	r2, #32
 800e8d0:	61da      	str	r2, [r3, #28]

  /* Disable Interrupts and Store Previous state */
  if ((tmpstate == HAL_I2C_STATE_BUSY_TX) || (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800e8d2:	183b      	adds	r3, r7, r0
 800e8d4:	781b      	ldrb	r3, [r3, #0]
 800e8d6:	2b21      	cmp	r3, #33	@ 0x21
 800e8d8:	d003      	beq.n	800e8e2 <I2C_ITSlaveCplt+0x3a>
 800e8da:	183b      	adds	r3, r7, r0
 800e8dc:	781b      	ldrb	r3, [r3, #0]
 800e8de:	2b29      	cmp	r3, #41	@ 0x29
 800e8e0:	d109      	bne.n	800e8f6 <I2C_ITSlaveCplt+0x4e>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_TX_IT);
 800e8e2:	4a7b      	ldr	r2, [pc, #492]	@ (800ead0 <I2C_ITSlaveCplt+0x228>)
 800e8e4:	687b      	ldr	r3, [r7, #4]
 800e8e6:	0011      	movs	r1, r2
 800e8e8:	0018      	movs	r0, r3
 800e8ea:	f000 fc43 	bl	800f174 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800e8ee:	687b      	ldr	r3, [r7, #4]
 800e8f0:	2221      	movs	r2, #33	@ 0x21
 800e8f2:	631a      	str	r2, [r3, #48]	@ 0x30
 800e8f4:	e011      	b.n	800e91a <I2C_ITSlaveCplt+0x72>
  }
  else if ((tmpstate == HAL_I2C_STATE_BUSY_RX) || (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800e8f6:	220f      	movs	r2, #15
 800e8f8:	18bb      	adds	r3, r7, r2
 800e8fa:	781b      	ldrb	r3, [r3, #0]
 800e8fc:	2b22      	cmp	r3, #34	@ 0x22
 800e8fe:	d003      	beq.n	800e908 <I2C_ITSlaveCplt+0x60>
 800e900:	18bb      	adds	r3, r7, r2
 800e902:	781b      	ldrb	r3, [r3, #0]
 800e904:	2b2a      	cmp	r3, #42	@ 0x2a
 800e906:	d108      	bne.n	800e91a <I2C_ITSlaveCplt+0x72>
  {
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT);
 800e908:	4a72      	ldr	r2, [pc, #456]	@ (800ead4 <I2C_ITSlaveCplt+0x22c>)
 800e90a:	687b      	ldr	r3, [r7, #4]
 800e90c:	0011      	movs	r1, r2
 800e90e:	0018      	movs	r0, r3
 800e910:	f000 fc30 	bl	800f174 <I2C_Disable_IRQ>
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 800e914:	687b      	ldr	r3, [r7, #4]
 800e916:	2222      	movs	r2, #34	@ 0x22
 800e918:	631a      	str	r2, [r3, #48]	@ 0x30
  {
    /* Do nothing */
  }

  /* Disable Address Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800e91a:	687b      	ldr	r3, [r7, #4]
 800e91c:	681b      	ldr	r3, [r3, #0]
 800e91e:	685a      	ldr	r2, [r3, #4]
 800e920:	687b      	ldr	r3, [r7, #4]
 800e922:	681b      	ldr	r3, [r3, #0]
 800e924:	2180      	movs	r1, #128	@ 0x80
 800e926:	0209      	lsls	r1, r1, #8
 800e928:	430a      	orrs	r2, r1
 800e92a:	605a      	str	r2, [r3, #4]

  /* Clear Configuration Register 2 */
  I2C_RESET_CR2(hi2c);
 800e92c:	687b      	ldr	r3, [r7, #4]
 800e92e:	681b      	ldr	r3, [r3, #0]
 800e930:	685a      	ldr	r2, [r3, #4]
 800e932:	687b      	ldr	r3, [r7, #4]
 800e934:	681b      	ldr	r3, [r3, #0]
 800e936:	4968      	ldr	r1, [pc, #416]	@ (800ead8 <I2C_ITSlaveCplt+0x230>)
 800e938:	400a      	ands	r2, r1
 800e93a:	605a      	str	r2, [r3, #4]

  /* Flush TX register */
  I2C_Flush_TXDR(hi2c);
 800e93c:	687b      	ldr	r3, [r7, #4]
 800e93e:	0018      	movs	r0, r3
 800e940:	f000 fa55 	bl	800edee <I2C_Flush_TXDR>

  /* If a DMA is ongoing, Update handle size context */
  if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_TXDMAEN) != RESET)
 800e944:	693a      	ldr	r2, [r7, #16]
 800e946:	2380      	movs	r3, #128	@ 0x80
 800e948:	01db      	lsls	r3, r3, #7
 800e94a:	4013      	ands	r3, r2
 800e94c:	d013      	beq.n	800e976 <I2C_ITSlaveCplt+0xce>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800e94e:	687b      	ldr	r3, [r7, #4]
 800e950:	681b      	ldr	r3, [r3, #0]
 800e952:	681a      	ldr	r2, [r3, #0]
 800e954:	687b      	ldr	r3, [r7, #4]
 800e956:	681b      	ldr	r3, [r3, #0]
 800e958:	4960      	ldr	r1, [pc, #384]	@ (800eadc <I2C_ITSlaveCplt+0x234>)
 800e95a:	400a      	ands	r2, r1
 800e95c:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmatx != NULL)
 800e95e:	687b      	ldr	r3, [r7, #4]
 800e960:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e962:	2b00      	cmp	r3, #0
 800e964:	d01f      	beq.n	800e9a6 <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmatx);
 800e966:	687b      	ldr	r3, [r7, #4]
 800e968:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800e96a:	681b      	ldr	r3, [r3, #0]
 800e96c:	685b      	ldr	r3, [r3, #4]
 800e96e:	b29a      	uxth	r2, r3
 800e970:	687b      	ldr	r3, [r7, #4]
 800e972:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800e974:	e017      	b.n	800e9a6 <I2C_ITSlaveCplt+0xfe>
    }
  }
  else if (I2C_CHECK_IT_SOURCE(tmpcr1value, I2C_CR1_RXDMAEN) != RESET)
 800e976:	693a      	ldr	r2, [r7, #16]
 800e978:	2380      	movs	r3, #128	@ 0x80
 800e97a:	021b      	lsls	r3, r3, #8
 800e97c:	4013      	ands	r3, r2
 800e97e:	d012      	beq.n	800e9a6 <I2C_ITSlaveCplt+0xfe>
  {
    /* Disable DMA Request */
    hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800e980:	687b      	ldr	r3, [r7, #4]
 800e982:	681b      	ldr	r3, [r3, #0]
 800e984:	681a      	ldr	r2, [r3, #0]
 800e986:	687b      	ldr	r3, [r7, #4]
 800e988:	681b      	ldr	r3, [r3, #0]
 800e98a:	4955      	ldr	r1, [pc, #340]	@ (800eae0 <I2C_ITSlaveCplt+0x238>)
 800e98c:	400a      	ands	r2, r1
 800e98e:	601a      	str	r2, [r3, #0]

    if (hi2c->hdmarx != NULL)
 800e990:	687b      	ldr	r3, [r7, #4]
 800e992:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e994:	2b00      	cmp	r3, #0
 800e996:	d006      	beq.n	800e9a6 <I2C_ITSlaveCplt+0xfe>
    {
      hi2c->XferCount = (uint16_t)I2C_GET_DMA_REMAIN_DATA(hi2c->hdmarx);
 800e998:	687b      	ldr	r3, [r7, #4]
 800e99a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800e99c:	681b      	ldr	r3, [r3, #0]
 800e99e:	685b      	ldr	r3, [r3, #4]
 800e9a0:	b29a      	uxth	r2, r3
 800e9a2:	687b      	ldr	r3, [r7, #4]
 800e9a4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  {
    /* Do nothing */
  }

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(tmpITFlags, I2C_FLAG_RXNE) != RESET)
 800e9a6:	697b      	ldr	r3, [r7, #20]
 800e9a8:	2204      	movs	r2, #4
 800e9aa:	4013      	ands	r3, r2
 800e9ac:	d020      	beq.n	800e9f0 <I2C_ITSlaveCplt+0x148>
  {
    /* Remove RXNE flag on temporary variable as read done */
    tmpITFlags &= ~I2C_FLAG_RXNE;
 800e9ae:	697b      	ldr	r3, [r7, #20]
 800e9b0:	2204      	movs	r2, #4
 800e9b2:	4393      	bics	r3, r2
 800e9b4:	617b      	str	r3, [r7, #20]

    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800e9b6:	687b      	ldr	r3, [r7, #4]
 800e9b8:	681b      	ldr	r3, [r3, #0]
 800e9ba:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800e9bc:	687b      	ldr	r3, [r7, #4]
 800e9be:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e9c0:	b2d2      	uxtb	r2, r2
 800e9c2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800e9c4:	687b      	ldr	r3, [r7, #4]
 800e9c6:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800e9c8:	1c5a      	adds	r2, r3, #1
 800e9ca:	687b      	ldr	r3, [r7, #4]
 800e9cc:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800e9ce:	687b      	ldr	r3, [r7, #4]
 800e9d0:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e9d2:	2b00      	cmp	r3, #0
 800e9d4:	d00c      	beq.n	800e9f0 <I2C_ITSlaveCplt+0x148>
    {
      hi2c->XferSize--;
 800e9d6:	687b      	ldr	r3, [r7, #4]
 800e9d8:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800e9da:	3b01      	subs	r3, #1
 800e9dc:	b29a      	uxth	r2, r3
 800e9de:	687b      	ldr	r3, [r7, #4]
 800e9e0:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800e9e2:	687b      	ldr	r3, [r7, #4]
 800e9e4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e9e6:	b29b      	uxth	r3, r3
 800e9e8:	3b01      	subs	r3, #1
 800e9ea:	b29a      	uxth	r2, r3
 800e9ec:	687b      	ldr	r3, [r7, #4]
 800e9ee:	855a      	strh	r2, [r3, #42]	@ 0x2a
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800e9f0:	687b      	ldr	r3, [r7, #4]
 800e9f2:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800e9f4:	b29b      	uxth	r3, r3
 800e9f6:	2b00      	cmp	r3, #0
 800e9f8:	d005      	beq.n	800ea06 <I2C_ITSlaveCplt+0x15e>
  {
    /* Set ErrorCode corresponding to a Non-Acknowledge */
    hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800e9fa:	687b      	ldr	r3, [r7, #4]
 800e9fc:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800e9fe:	2204      	movs	r2, #4
 800ea00:	431a      	orrs	r2, r3
 800ea02:	687b      	ldr	r3, [r7, #4]
 800ea04:	645a      	str	r2, [r3, #68]	@ 0x44
  }

  hi2c->Mode = HAL_I2C_MODE_NONE;
 800ea06:	687b      	ldr	r3, [r7, #4]
 800ea08:	2242      	movs	r2, #66	@ 0x42
 800ea0a:	2100      	movs	r1, #0
 800ea0c:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800ea0e:	687b      	ldr	r3, [r7, #4]
 800ea10:	2200      	movs	r2, #0
 800ea12:	635a      	str	r2, [r3, #52]	@ 0x34

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800ea14:	687b      	ldr	r3, [r7, #4]
 800ea16:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ea18:	2b00      	cmp	r3, #0
 800ea1a:	d013      	beq.n	800ea44 <I2C_ITSlaveCplt+0x19c>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c, hi2c->ErrorCode);
 800ea1c:	687b      	ldr	r3, [r7, #4]
 800ea1e:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ea20:	687b      	ldr	r3, [r7, #4]
 800ea22:	0011      	movs	r1, r2
 800ea24:	0018      	movs	r0, r3
 800ea26:	f000 f8b7 	bl	800eb98 <I2C_ITError>

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800ea2a:	687b      	ldr	r3, [r7, #4]
 800ea2c:	2241      	movs	r2, #65	@ 0x41
 800ea2e:	5c9b      	ldrb	r3, [r3, r2]
 800ea30:	b2db      	uxtb	r3, r3
 800ea32:	2b28      	cmp	r3, #40	@ 0x28
 800ea34:	d147      	bne.n	800eac6 <I2C_ITSlaveCplt+0x21e>
    {
      /* Call I2C Listen complete process */
      I2C_ITListenCplt(hi2c, tmpITFlags);
 800ea36:	697a      	ldr	r2, [r7, #20]
 800ea38:	687b      	ldr	r3, [r7, #4]
 800ea3a:	0011      	movs	r1, r2
 800ea3c:	0018      	movs	r0, r3
 800ea3e:	f000 f853 	bl	800eae8 <I2C_ITListenCplt>
    hi2c->SlaveTxCpltCallback(hi2c);
#else
    HAL_I2C_SlaveTxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800ea42:	e040      	b.n	800eac6 <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->XferOptions != I2C_NO_OPTION_FRAME)
 800ea44:	687b      	ldr	r3, [r7, #4]
 800ea46:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800ea48:	4a26      	ldr	r2, [pc, #152]	@ (800eae4 <I2C_ITSlaveCplt+0x23c>)
 800ea4a:	4293      	cmp	r3, r2
 800ea4c:	d016      	beq.n	800ea7c <I2C_ITSlaveCplt+0x1d4>
    I2C_ITSlaveSeqCplt(hi2c);
 800ea4e:	687b      	ldr	r3, [r7, #4]
 800ea50:	0018      	movs	r0, r3
 800ea52:	f7ff fdf7 	bl	800e644 <I2C_ITSlaveSeqCplt>
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800ea56:	687b      	ldr	r3, [r7, #4]
 800ea58:	4a22      	ldr	r2, [pc, #136]	@ (800eae4 <I2C_ITSlaveCplt+0x23c>)
 800ea5a:	62da      	str	r2, [r3, #44]	@ 0x2c
    hi2c->State = HAL_I2C_STATE_READY;
 800ea5c:	687b      	ldr	r3, [r7, #4]
 800ea5e:	2241      	movs	r2, #65	@ 0x41
 800ea60:	2120      	movs	r1, #32
 800ea62:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800ea64:	687b      	ldr	r3, [r7, #4]
 800ea66:	2200      	movs	r2, #0
 800ea68:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800ea6a:	687b      	ldr	r3, [r7, #4]
 800ea6c:	2240      	movs	r2, #64	@ 0x40
 800ea6e:	2100      	movs	r1, #0
 800ea70:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ListenCpltCallback(hi2c);
 800ea72:	687b      	ldr	r3, [r7, #4]
 800ea74:	0018      	movs	r0, r3
 800ea76:	f7fe ffae 	bl	800d9d6 <HAL_I2C_ListenCpltCallback>
}
 800ea7a:	e024      	b.n	800eac6 <I2C_ITSlaveCplt+0x21e>
  else if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800ea7c:	687b      	ldr	r3, [r7, #4]
 800ea7e:	2241      	movs	r2, #65	@ 0x41
 800ea80:	5c9b      	ldrb	r3, [r3, r2]
 800ea82:	b2db      	uxtb	r3, r3
 800ea84:	2b22      	cmp	r3, #34	@ 0x22
 800ea86:	d10f      	bne.n	800eaa8 <I2C_ITSlaveCplt+0x200>
    hi2c->State = HAL_I2C_STATE_READY;
 800ea88:	687b      	ldr	r3, [r7, #4]
 800ea8a:	2241      	movs	r2, #65	@ 0x41
 800ea8c:	2120      	movs	r1, #32
 800ea8e:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800ea90:	687b      	ldr	r3, [r7, #4]
 800ea92:	2200      	movs	r2, #0
 800ea94:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800ea96:	687b      	ldr	r3, [r7, #4]
 800ea98:	2240      	movs	r2, #64	@ 0x40
 800ea9a:	2100      	movs	r1, #0
 800ea9c:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveRxCpltCallback(hi2c);
 800ea9e:	687b      	ldr	r3, [r7, #4]
 800eaa0:	0018      	movs	r0, r3
 800eaa2:	f7fe ff80 	bl	800d9a6 <HAL_I2C_SlaveRxCpltCallback>
}
 800eaa6:	e00e      	b.n	800eac6 <I2C_ITSlaveCplt+0x21e>
    hi2c->State = HAL_I2C_STATE_READY;
 800eaa8:	687b      	ldr	r3, [r7, #4]
 800eaaa:	2241      	movs	r2, #65	@ 0x41
 800eaac:	2120      	movs	r1, #32
 800eaae:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800eab0:	687b      	ldr	r3, [r7, #4]
 800eab2:	2200      	movs	r2, #0
 800eab4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800eab6:	687b      	ldr	r3, [r7, #4]
 800eab8:	2240      	movs	r2, #64	@ 0x40
 800eaba:	2100      	movs	r1, #0
 800eabc:	5499      	strb	r1, [r3, r2]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800eabe:	687b      	ldr	r3, [r7, #4]
 800eac0:	0018      	movs	r0, r3
 800eac2:	f7fe ff68 	bl	800d996 <HAL_I2C_SlaveTxCpltCallback>
}
 800eac6:	46c0      	nop			@ (mov r8, r8)
 800eac8:	46bd      	mov	sp, r7
 800eaca:	b006      	add	sp, #24
 800eacc:	bd80      	pop	{r7, pc}
 800eace:	46c0      	nop			@ (mov r8, r8)
 800ead0:	00008001 	.word	0x00008001
 800ead4:	00008002 	.word	0x00008002
 800ead8:	fe00e800 	.word	0xfe00e800
 800eadc:	ffffbfff 	.word	0xffffbfff
 800eae0:	ffff7fff 	.word	0xffff7fff
 800eae4:	ffff0000 	.word	0xffff0000

0800eae8 <I2C_ITListenCplt>:
  * @param  hi2c I2C handle.
  * @param  ITFlags Interrupt flags to handle.
  * @retval None
  */
static void I2C_ITListenCplt(I2C_HandleTypeDef *hi2c, uint32_t ITFlags)
{
 800eae8:	b580      	push	{r7, lr}
 800eaea:	b082      	sub	sp, #8
 800eaec:	af00      	add	r7, sp, #0
 800eaee:	6078      	str	r0, [r7, #4]
 800eaf0:	6039      	str	r1, [r7, #0]
  /* Reset handle parameters */
  hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800eaf2:	687b      	ldr	r3, [r7, #4]
 800eaf4:	4a26      	ldr	r2, [pc, #152]	@ (800eb90 <I2C_ITListenCplt+0xa8>)
 800eaf6:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->PreviousState = I2C_STATE_NONE;
 800eaf8:	687b      	ldr	r3, [r7, #4]
 800eafa:	2200      	movs	r2, #0
 800eafc:	631a      	str	r2, [r3, #48]	@ 0x30
  hi2c->State = HAL_I2C_STATE_READY;
 800eafe:	687b      	ldr	r3, [r7, #4]
 800eb00:	2241      	movs	r2, #65	@ 0x41
 800eb02:	2120      	movs	r1, #32
 800eb04:	5499      	strb	r1, [r3, r2]
  hi2c->Mode = HAL_I2C_MODE_NONE;
 800eb06:	687b      	ldr	r3, [r7, #4]
 800eb08:	2242      	movs	r2, #66	@ 0x42
 800eb0a:	2100      	movs	r1, #0
 800eb0c:	5499      	strb	r1, [r3, r2]
  hi2c->XferISR = NULL;
 800eb0e:	687b      	ldr	r3, [r7, #4]
 800eb10:	2200      	movs	r2, #0
 800eb12:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Store Last receive data if any */
  if (I2C_CHECK_FLAG(ITFlags, I2C_FLAG_RXNE) != RESET)
 800eb14:	683b      	ldr	r3, [r7, #0]
 800eb16:	2204      	movs	r2, #4
 800eb18:	4013      	ands	r3, r2
 800eb1a:	d022      	beq.n	800eb62 <I2C_ITListenCplt+0x7a>
  {
    /* Read data from RXDR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->RXDR;
 800eb1c:	687b      	ldr	r3, [r7, #4]
 800eb1e:	681b      	ldr	r3, [r3, #0]
 800eb20:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 800eb22:	687b      	ldr	r3, [r7, #4]
 800eb24:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb26:	b2d2      	uxtb	r2, r2
 800eb28:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800eb2a:	687b      	ldr	r3, [r7, #4]
 800eb2c:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800eb2e:	1c5a      	adds	r2, r3, #1
 800eb30:	687b      	ldr	r3, [r7, #4]
 800eb32:	625a      	str	r2, [r3, #36]	@ 0x24

    if ((hi2c->XferSize > 0U))
 800eb34:	687b      	ldr	r3, [r7, #4]
 800eb36:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800eb38:	2b00      	cmp	r3, #0
 800eb3a:	d012      	beq.n	800eb62 <I2C_ITListenCplt+0x7a>
    {
      hi2c->XferSize--;
 800eb3c:	687b      	ldr	r3, [r7, #4]
 800eb3e:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800eb40:	3b01      	subs	r3, #1
 800eb42:	b29a      	uxth	r2, r3
 800eb44:	687b      	ldr	r3, [r7, #4]
 800eb46:	851a      	strh	r2, [r3, #40]	@ 0x28
      hi2c->XferCount--;
 800eb48:	687b      	ldr	r3, [r7, #4]
 800eb4a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800eb4c:	b29b      	uxth	r3, r3
 800eb4e:	3b01      	subs	r3, #1
 800eb50:	b29a      	uxth	r2, r3
 800eb52:	687b      	ldr	r3, [r7, #4]
 800eb54:	855a      	strh	r2, [r3, #42]	@ 0x2a

      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800eb56:	687b      	ldr	r3, [r7, #4]
 800eb58:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800eb5a:	2204      	movs	r2, #4
 800eb5c:	431a      	orrs	r2, r3
 800eb5e:	687b      	ldr	r3, [r7, #4]
 800eb60:	645a      	str	r2, [r3, #68]	@ 0x44
    }
  }

  /* Disable all Interrupts*/
  I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800eb62:	4a0c      	ldr	r2, [pc, #48]	@ (800eb94 <I2C_ITListenCplt+0xac>)
 800eb64:	687b      	ldr	r3, [r7, #4]
 800eb66:	0011      	movs	r1, r2
 800eb68:	0018      	movs	r0, r3
 800eb6a:	f000 fb03 	bl	800f174 <I2C_Disable_IRQ>

  /* Clear NACK Flag */
  __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800eb6e:	687b      	ldr	r3, [r7, #4]
 800eb70:	681b      	ldr	r3, [r3, #0]
 800eb72:	2210      	movs	r2, #16
 800eb74:	61da      	str	r2, [r3, #28]

  /* Process Unlocked */
  __HAL_UNLOCK(hi2c);
 800eb76:	687b      	ldr	r3, [r7, #4]
 800eb78:	2240      	movs	r2, #64	@ 0x40
 800eb7a:	2100      	movs	r1, #0
 800eb7c:	5499      	strb	r1, [r3, r2]

  /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
  hi2c->ListenCpltCallback(hi2c);
#else
  HAL_I2C_ListenCpltCallback(hi2c);
 800eb7e:	687b      	ldr	r3, [r7, #4]
 800eb80:	0018      	movs	r0, r3
 800eb82:	f7fe ff28 	bl	800d9d6 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
}
 800eb86:	46c0      	nop			@ (mov r8, r8)
 800eb88:	46bd      	mov	sp, r7
 800eb8a:	b002      	add	sp, #8
 800eb8c:	bd80      	pop	{r7, pc}
 800eb8e:	46c0      	nop			@ (mov r8, r8)
 800eb90:	ffff0000 	.word	0xffff0000
 800eb94:	00008003 	.word	0x00008003

0800eb98 <I2C_ITError>:
  * @param  hi2c I2C handle.
  * @param  ErrorCode Error code to handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c, uint32_t ErrorCode)
{
 800eb98:	b580      	push	{r7, lr}
 800eb9a:	b084      	sub	sp, #16
 800eb9c:	af00      	add	r7, sp, #0
 800eb9e:	6078      	str	r0, [r7, #4]
 800eba0:	6039      	str	r1, [r7, #0]
  HAL_I2C_StateTypeDef tmpstate = hi2c->State;
 800eba2:	200f      	movs	r0, #15
 800eba4:	183b      	adds	r3, r7, r0
 800eba6:	687a      	ldr	r2, [r7, #4]
 800eba8:	2141      	movs	r1, #65	@ 0x41
 800ebaa:	5c52      	ldrb	r2, [r2, r1]
 800ebac:	701a      	strb	r2, [r3, #0]

  uint32_t tmppreviousstate;

  /* Reset handle parameters */
  hi2c->Mode          = HAL_I2C_MODE_NONE;
 800ebae:	687b      	ldr	r3, [r7, #4]
 800ebb0:	2242      	movs	r2, #66	@ 0x42
 800ebb2:	2100      	movs	r1, #0
 800ebb4:	5499      	strb	r1, [r3, r2]
  hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800ebb6:	687b      	ldr	r3, [r7, #4]
 800ebb8:	4a72      	ldr	r2, [pc, #456]	@ (800ed84 <I2C_ITError+0x1ec>)
 800ebba:	62da      	str	r2, [r3, #44]	@ 0x2c
  hi2c->XferCount     = 0U;
 800ebbc:	687b      	ldr	r3, [r7, #4]
 800ebbe:	2200      	movs	r2, #0
 800ebc0:	855a      	strh	r2, [r3, #42]	@ 0x2a

  /* Set new error code */
  hi2c->ErrorCode |= ErrorCode;
 800ebc2:	687b      	ldr	r3, [r7, #4]
 800ebc4:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 800ebc6:	683b      	ldr	r3, [r7, #0]
 800ebc8:	431a      	orrs	r2, r3
 800ebca:	687b      	ldr	r3, [r7, #4]
 800ebcc:	645a      	str	r2, [r3, #68]	@ 0x44

  /* Disable Interrupts */
  if ((tmpstate == HAL_I2C_STATE_LISTEN)         ||
 800ebce:	183b      	adds	r3, r7, r0
 800ebd0:	781b      	ldrb	r3, [r3, #0]
 800ebd2:	2b28      	cmp	r3, #40	@ 0x28
 800ebd4:	d007      	beq.n	800ebe6 <I2C_ITError+0x4e>
 800ebd6:	183b      	adds	r3, r7, r0
 800ebd8:	781b      	ldrb	r3, [r3, #0]
 800ebda:	2b29      	cmp	r3, #41	@ 0x29
 800ebdc:	d003      	beq.n	800ebe6 <I2C_ITError+0x4e>
      (tmpstate == HAL_I2C_STATE_BUSY_TX_LISTEN) ||
 800ebde:	183b      	adds	r3, r7, r0
 800ebe0:	781b      	ldrb	r3, [r3, #0]
 800ebe2:	2b2a      	cmp	r3, #42	@ 0x2a
 800ebe4:	d10c      	bne.n	800ec00 <I2C_ITError+0x68>
      (tmpstate == HAL_I2C_STATE_BUSY_RX_LISTEN))
  {
    /* Disable all interrupts, except interrupts related to LISTEN state */
    I2C_Disable_IRQ(hi2c, I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800ebe6:	687b      	ldr	r3, [r7, #4]
 800ebe8:	2103      	movs	r1, #3
 800ebea:	0018      	movs	r0, r3
 800ebec:	f000 fac2 	bl	800f174 <I2C_Disable_IRQ>

    /* keep HAL_I2C_STATE_LISTEN if set */
    hi2c->State         = HAL_I2C_STATE_LISTEN;
 800ebf0:	687b      	ldr	r3, [r7, #4]
 800ebf2:	2241      	movs	r2, #65	@ 0x41
 800ebf4:	2128      	movs	r1, #40	@ 0x28
 800ebf6:	5499      	strb	r1, [r3, r2]
    hi2c->XferISR       = I2C_Slave_ISR_IT;
 800ebf8:	687b      	ldr	r3, [r7, #4]
 800ebfa:	4a63      	ldr	r2, [pc, #396]	@ (800ed88 <I2C_ITError+0x1f0>)
 800ebfc:	635a      	str	r2, [r3, #52]	@ 0x34
 800ebfe:	e032      	b.n	800ec66 <I2C_ITError+0xce>
  }
  else
  {
    /* Disable all interrupts */
    I2C_Disable_IRQ(hi2c, I2C_XFER_LISTEN_IT | I2C_XFER_RX_IT | I2C_XFER_TX_IT);
 800ec00:	4a62      	ldr	r2, [pc, #392]	@ (800ed8c <I2C_ITError+0x1f4>)
 800ec02:	687b      	ldr	r3, [r7, #4]
 800ec04:	0011      	movs	r1, r2
 800ec06:	0018      	movs	r0, r3
 800ec08:	f000 fab4 	bl	800f174 <I2C_Disable_IRQ>

    /* Flush TX register */
    I2C_Flush_TXDR(hi2c);
 800ec0c:	687b      	ldr	r3, [r7, #4]
 800ec0e:	0018      	movs	r0, r3
 800ec10:	f000 f8ed 	bl	800edee <I2C_Flush_TXDR>

    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if (hi2c->State != HAL_I2C_STATE_ABORT)
 800ec14:	687b      	ldr	r3, [r7, #4]
 800ec16:	2241      	movs	r2, #65	@ 0x41
 800ec18:	5c9b      	ldrb	r3, [r3, r2]
 800ec1a:	b2db      	uxtb	r3, r3
 800ec1c:	2b60      	cmp	r3, #96	@ 0x60
 800ec1e:	d01f      	beq.n	800ec60 <I2C_ITError+0xc8>
    {
      /* Set HAL_I2C_STATE_READY */
      hi2c->State         = HAL_I2C_STATE_READY;
 800ec20:	687b      	ldr	r3, [r7, #4]
 800ec22:	2241      	movs	r2, #65	@ 0x41
 800ec24:	2120      	movs	r1, #32
 800ec26:	5499      	strb	r1, [r3, r2]

      /* Check if a STOPF is detected */
      if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_STOPF) == SET)
 800ec28:	687b      	ldr	r3, [r7, #4]
 800ec2a:	681b      	ldr	r3, [r3, #0]
 800ec2c:	699b      	ldr	r3, [r3, #24]
 800ec2e:	2220      	movs	r2, #32
 800ec30:	4013      	ands	r3, r2
 800ec32:	2b20      	cmp	r3, #32
 800ec34:	d114      	bne.n	800ec60 <I2C_ITError+0xc8>
      {
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_AF) == SET)
 800ec36:	687b      	ldr	r3, [r7, #4]
 800ec38:	681b      	ldr	r3, [r3, #0]
 800ec3a:	699b      	ldr	r3, [r3, #24]
 800ec3c:	2210      	movs	r2, #16
 800ec3e:	4013      	ands	r3, r2
 800ec40:	2b10      	cmp	r3, #16
 800ec42:	d109      	bne.n	800ec58 <I2C_ITError+0xc0>
        {
          __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800ec44:	687b      	ldr	r3, [r7, #4]
 800ec46:	681b      	ldr	r3, [r3, #0]
 800ec48:	2210      	movs	r2, #16
 800ec4a:	61da      	str	r2, [r3, #28]
          hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800ec4c:	687b      	ldr	r3, [r7, #4]
 800ec4e:	6c5b      	ldr	r3, [r3, #68]	@ 0x44
 800ec50:	2204      	movs	r2, #4
 800ec52:	431a      	orrs	r2, r3
 800ec54:	687b      	ldr	r3, [r7, #4]
 800ec56:	645a      	str	r2, [r3, #68]	@ 0x44
        }

        /* Clear STOP Flag */
        __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_STOPF);
 800ec58:	687b      	ldr	r3, [r7, #4]
 800ec5a:	681b      	ldr	r3, [r3, #0]
 800ec5c:	2220      	movs	r2, #32
 800ec5e:	61da      	str	r2, [r3, #28]
      }

    }
    hi2c->XferISR       = NULL;
 800ec60:	687b      	ldr	r3, [r7, #4]
 800ec62:	2200      	movs	r2, #0
 800ec64:	635a      	str	r2, [r3, #52]	@ 0x34
  }

  /* Abort DMA TX transfer if any */
  tmppreviousstate = hi2c->PreviousState;
 800ec66:	687b      	ldr	r3, [r7, #4]
 800ec68:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800ec6a:	60bb      	str	r3, [r7, #8]

  if ((hi2c->hdmatx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_TX) || \
 800ec6c:	687b      	ldr	r3, [r7, #4]
 800ec6e:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ec70:	2b00      	cmp	r3, #0
 800ec72:	d03b      	beq.n	800ecec <I2C_ITError+0x154>
 800ec74:	68bb      	ldr	r3, [r7, #8]
 800ec76:	2b11      	cmp	r3, #17
 800ec78:	d002      	beq.n	800ec80 <I2C_ITError+0xe8>
 800ec7a:	68bb      	ldr	r3, [r7, #8]
 800ec7c:	2b21      	cmp	r3, #33	@ 0x21
 800ec7e:	d135      	bne.n	800ecec <I2C_ITError+0x154>
                                 (tmppreviousstate == I2C_STATE_SLAVE_BUSY_TX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_TXDMAEN) == I2C_CR1_TXDMAEN)
 800ec80:	687b      	ldr	r3, [r7, #4]
 800ec82:	681b      	ldr	r3, [r3, #0]
 800ec84:	681a      	ldr	r2, [r3, #0]
 800ec86:	2380      	movs	r3, #128	@ 0x80
 800ec88:	01db      	lsls	r3, r3, #7
 800ec8a:	401a      	ands	r2, r3
 800ec8c:	2380      	movs	r3, #128	@ 0x80
 800ec8e:	01db      	lsls	r3, r3, #7
 800ec90:	429a      	cmp	r2, r3
 800ec92:	d107      	bne.n	800eca4 <I2C_ITError+0x10c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800ec94:	687b      	ldr	r3, [r7, #4]
 800ec96:	681b      	ldr	r3, [r3, #0]
 800ec98:	681a      	ldr	r2, [r3, #0]
 800ec9a:	687b      	ldr	r3, [r7, #4]
 800ec9c:	681b      	ldr	r3, [r3, #0]
 800ec9e:	493c      	ldr	r1, [pc, #240]	@ (800ed90 <I2C_ITError+0x1f8>)
 800eca0:	400a      	ands	r2, r1
 800eca2:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800eca4:	687b      	ldr	r3, [r7, #4]
 800eca6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800eca8:	0018      	movs	r0, r3
 800ecaa:	f7fd ff8e 	bl	800cbca <HAL_DMA_GetState>
 800ecae:	0003      	movs	r3, r0
 800ecb0:	2b01      	cmp	r3, #1
 800ecb2:	d016      	beq.n	800ece2 <I2C_ITError+0x14a>
    {
      /* Set the I2C DMA Abort callback :
       will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800ecb4:	687b      	ldr	r3, [r7, #4]
 800ecb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ecb8:	4a36      	ldr	r2, [pc, #216]	@ (800ed94 <I2C_ITError+0x1fc>)
 800ecba:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ecbc:	687b      	ldr	r3, [r7, #4]
 800ecbe:	2240      	movs	r2, #64	@ 0x40
 800ecc0:	2100      	movs	r1, #0
 800ecc2:	5499      	strb	r1, [r3, r2]

      /* Abort DMA TX */
      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800ecc4:	687b      	ldr	r3, [r7, #4]
 800ecc6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ecc8:	0018      	movs	r0, r3
 800ecca:	f7fd fe89 	bl	800c9e0 <HAL_DMA_Abort_IT>
 800ecce:	1e03      	subs	r3, r0, #0
 800ecd0:	d051      	beq.n	800ed76 <I2C_ITError+0x1de>
      {
        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800ecd2:	687b      	ldr	r3, [r7, #4]
 800ecd4:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ecd6:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ecd8:	687b      	ldr	r3, [r7, #4]
 800ecda:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800ecdc:	0018      	movs	r0, r3
 800ecde:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800ece0:	e049      	b.n	800ed76 <I2C_ITError+0x1de>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800ece2:	687b      	ldr	r3, [r7, #4]
 800ece4:	0018      	movs	r0, r3
 800ece6:	f000 f859 	bl	800ed9c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800ecea:	e044      	b.n	800ed76 <I2C_ITError+0x1de>
    }
  }
  /* Abort DMA RX transfer if any */
  else if ((hi2c->hdmarx != NULL) && ((tmppreviousstate == I2C_STATE_MASTER_BUSY_RX) || \
 800ecec:	687b      	ldr	r3, [r7, #4]
 800ecee:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ecf0:	2b00      	cmp	r3, #0
 800ecf2:	d03b      	beq.n	800ed6c <I2C_ITError+0x1d4>
 800ecf4:	68bb      	ldr	r3, [r7, #8]
 800ecf6:	2b12      	cmp	r3, #18
 800ecf8:	d002      	beq.n	800ed00 <I2C_ITError+0x168>
 800ecfa:	68bb      	ldr	r3, [r7, #8]
 800ecfc:	2b22      	cmp	r3, #34	@ 0x22
 800ecfe:	d135      	bne.n	800ed6c <I2C_ITError+0x1d4>
                                      (tmppreviousstate == I2C_STATE_SLAVE_BUSY_RX)))
  {
    if ((hi2c->Instance->CR1 & I2C_CR1_RXDMAEN) == I2C_CR1_RXDMAEN)
 800ed00:	687b      	ldr	r3, [r7, #4]
 800ed02:	681b      	ldr	r3, [r3, #0]
 800ed04:	681a      	ldr	r2, [r3, #0]
 800ed06:	2380      	movs	r3, #128	@ 0x80
 800ed08:	021b      	lsls	r3, r3, #8
 800ed0a:	401a      	ands	r2, r3
 800ed0c:	2380      	movs	r3, #128	@ 0x80
 800ed0e:	021b      	lsls	r3, r3, #8
 800ed10:	429a      	cmp	r2, r3
 800ed12:	d107      	bne.n	800ed24 <I2C_ITError+0x18c>
    {
      hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800ed14:	687b      	ldr	r3, [r7, #4]
 800ed16:	681b      	ldr	r3, [r3, #0]
 800ed18:	681a      	ldr	r2, [r3, #0]
 800ed1a:	687b      	ldr	r3, [r7, #4]
 800ed1c:	681b      	ldr	r3, [r3, #0]
 800ed1e:	491e      	ldr	r1, [pc, #120]	@ (800ed98 <I2C_ITError+0x200>)
 800ed20:	400a      	ands	r2, r1
 800ed22:	601a      	str	r2, [r3, #0]
    }

    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800ed24:	687b      	ldr	r3, [r7, #4]
 800ed26:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ed28:	0018      	movs	r0, r3
 800ed2a:	f7fd ff4e 	bl	800cbca <HAL_DMA_GetState>
 800ed2e:	0003      	movs	r3, r0
 800ed30:	2b01      	cmp	r3, #1
 800ed32:	d016      	beq.n	800ed62 <I2C_ITError+0x1ca>
    {
      /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800ed34:	687b      	ldr	r3, [r7, #4]
 800ed36:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ed38:	4a16      	ldr	r2, [pc, #88]	@ (800ed94 <I2C_ITError+0x1fc>)
 800ed3a:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Process Unlocked */
      __HAL_UNLOCK(hi2c);
 800ed3c:	687b      	ldr	r3, [r7, #4]
 800ed3e:	2240      	movs	r2, #64	@ 0x40
 800ed40:	2100      	movs	r1, #0
 800ed42:	5499      	strb	r1, [r3, r2]

      /* Abort DMA RX */
      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 800ed44:	687b      	ldr	r3, [r7, #4]
 800ed46:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ed48:	0018      	movs	r0, r3
 800ed4a:	f7fd fe49 	bl	800c9e0 <HAL_DMA_Abort_IT>
 800ed4e:	1e03      	subs	r3, r0, #0
 800ed50:	d013      	beq.n	800ed7a <I2C_ITError+0x1e2>
      {
        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 800ed52:	687b      	ldr	r3, [r7, #4]
 800ed54:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ed56:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 800ed58:	687b      	ldr	r3, [r7, #4]
 800ed5a:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800ed5c:	0018      	movs	r0, r3
 800ed5e:	4790      	blx	r2
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800ed60:	e00b      	b.n	800ed7a <I2C_ITError+0x1e2>
      }
    }
    else
    {
      I2C_TreatErrorCallback(hi2c);
 800ed62:	687b      	ldr	r3, [r7, #4]
 800ed64:	0018      	movs	r0, r3
 800ed66:	f000 f819 	bl	800ed9c <I2C_TreatErrorCallback>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800ed6a:	e006      	b.n	800ed7a <I2C_ITError+0x1e2>
    }
  }
  else
  {
    I2C_TreatErrorCallback(hi2c);
 800ed6c:	687b      	ldr	r3, [r7, #4]
 800ed6e:	0018      	movs	r0, r3
 800ed70:	f000 f814 	bl	800ed9c <I2C_TreatErrorCallback>
  }
}
 800ed74:	e002      	b.n	800ed7c <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800ed76:	46c0      	nop			@ (mov r8, r8)
 800ed78:	e000      	b.n	800ed7c <I2C_ITError+0x1e4>
    if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800ed7a:	46c0      	nop			@ (mov r8, r8)
}
 800ed7c:	46c0      	nop			@ (mov r8, r8)
 800ed7e:	46bd      	mov	sp, r7
 800ed80:	b004      	add	sp, #16
 800ed82:	bd80      	pop	{r7, pc}
 800ed84:	ffff0000 	.word	0xffff0000
 800ed88:	0800dc7d 	.word	0x0800dc7d
 800ed8c:	00008003 	.word	0x00008003
 800ed90:	ffffbfff 	.word	0xffffbfff
 800ed94:	0800efa7 	.word	0x0800efa7
 800ed98:	ffff7fff 	.word	0xffff7fff

0800ed9c <I2C_TreatErrorCallback>:
  * @brief  I2C Error callback treatment.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_TreatErrorCallback(I2C_HandleTypeDef *hi2c)
{
 800ed9c:	b580      	push	{r7, lr}
 800ed9e:	b082      	sub	sp, #8
 800eda0:	af00      	add	r7, sp, #0
 800eda2:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 800eda4:	687b      	ldr	r3, [r7, #4]
 800eda6:	2241      	movs	r2, #65	@ 0x41
 800eda8:	5c9b      	ldrb	r3, [r3, r2]
 800edaa:	b2db      	uxtb	r3, r3
 800edac:	2b60      	cmp	r3, #96	@ 0x60
 800edae:	d10f      	bne.n	800edd0 <I2C_TreatErrorCallback+0x34>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800edb0:	687b      	ldr	r3, [r7, #4]
 800edb2:	2241      	movs	r2, #65	@ 0x41
 800edb4:	2120      	movs	r1, #32
 800edb6:	5499      	strb	r1, [r3, r2]
    hi2c->PreviousState = I2C_STATE_NONE;
 800edb8:	687b      	ldr	r3, [r7, #4]
 800edba:	2200      	movs	r2, #0
 800edbc:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800edbe:	687b      	ldr	r3, [r7, #4]
 800edc0:	2240      	movs	r2, #64	@ 0x40
 800edc2:	2100      	movs	r1, #0
 800edc4:	5499      	strb	r1, [r3, r2]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 800edc6:	687b      	ldr	r3, [r7, #4]
 800edc8:	0018      	movs	r0, r3
 800edca:	f7fe fe24 	bl	800da16 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800edce:	e00a      	b.n	800ede6 <I2C_TreatErrorCallback+0x4a>
    hi2c->PreviousState = I2C_STATE_NONE;
 800edd0:	687b      	ldr	r3, [r7, #4]
 800edd2:	2200      	movs	r2, #0
 800edd4:	631a      	str	r2, [r3, #48]	@ 0x30
    __HAL_UNLOCK(hi2c);
 800edd6:	687b      	ldr	r3, [r7, #4]
 800edd8:	2240      	movs	r2, #64	@ 0x40
 800edda:	2100      	movs	r1, #0
 800eddc:	5499      	strb	r1, [r3, r2]
    HAL_I2C_ErrorCallback(hi2c);
 800edde:	687b      	ldr	r3, [r7, #4]
 800ede0:	0018      	movs	r0, r3
 800ede2:	f7fe fe10 	bl	800da06 <HAL_I2C_ErrorCallback>
}
 800ede6:	46c0      	nop			@ (mov r8, r8)
 800ede8:	46bd      	mov	sp, r7
 800edea:	b002      	add	sp, #8
 800edec:	bd80      	pop	{r7, pc}

0800edee <I2C_Flush_TXDR>:
  * @brief  I2C Tx data register flush process.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_Flush_TXDR(I2C_HandleTypeDef *hi2c)
{
 800edee:	b580      	push	{r7, lr}
 800edf0:	b082      	sub	sp, #8
 800edf2:	af00      	add	r7, sp, #0
 800edf4:	6078      	str	r0, [r7, #4]
  /* If a pending TXIS flag is set */
  /* Write a dummy data in TXDR to clear it */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXIS) != RESET)
 800edf6:	687b      	ldr	r3, [r7, #4]
 800edf8:	681b      	ldr	r3, [r3, #0]
 800edfa:	699b      	ldr	r3, [r3, #24]
 800edfc:	2202      	movs	r2, #2
 800edfe:	4013      	ands	r3, r2
 800ee00:	2b02      	cmp	r3, #2
 800ee02:	d103      	bne.n	800ee0c <I2C_Flush_TXDR+0x1e>
  {
    hi2c->Instance->TXDR = 0x00U;
 800ee04:	687b      	ldr	r3, [r7, #4]
 800ee06:	681b      	ldr	r3, [r3, #0]
 800ee08:	2200      	movs	r2, #0
 800ee0a:	629a      	str	r2, [r3, #40]	@ 0x28
  }

  /* Flush TX register if not empty */
  if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_TXE) == RESET)
 800ee0c:	687b      	ldr	r3, [r7, #4]
 800ee0e:	681b      	ldr	r3, [r3, #0]
 800ee10:	699b      	ldr	r3, [r3, #24]
 800ee12:	2201      	movs	r2, #1
 800ee14:	4013      	ands	r3, r2
 800ee16:	2b01      	cmp	r3, #1
 800ee18:	d007      	beq.n	800ee2a <I2C_Flush_TXDR+0x3c>
  {
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_TXE);
 800ee1a:	687b      	ldr	r3, [r7, #4]
 800ee1c:	681b      	ldr	r3, [r3, #0]
 800ee1e:	699a      	ldr	r2, [r3, #24]
 800ee20:	687b      	ldr	r3, [r7, #4]
 800ee22:	681b      	ldr	r3, [r3, #0]
 800ee24:	2101      	movs	r1, #1
 800ee26:	430a      	orrs	r2, r1
 800ee28:	619a      	str	r2, [r3, #24]
  }
}
 800ee2a:	46c0      	nop			@ (mov r8, r8)
 800ee2c:	46bd      	mov	sp, r7
 800ee2e:	b002      	add	sp, #8
 800ee30:	bd80      	pop	{r7, pc}
	...

0800ee34 <I2C_DMAMasterTransmitCplt>:
  * @brief  DMA I2C master transmit process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterTransmitCplt(DMA_HandleTypeDef *hdma)
{
 800ee34:	b580      	push	{r7, lr}
 800ee36:	b084      	sub	sp, #16
 800ee38:	af00      	add	r7, sp, #0
 800ee3a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800ee3c:	687b      	ldr	r3, [r7, #4]
 800ee3e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ee40:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_TXDMAEN;
 800ee42:	68fb      	ldr	r3, [r7, #12]
 800ee44:	681b      	ldr	r3, [r3, #0]
 800ee46:	681a      	ldr	r2, [r3, #0]
 800ee48:	68fb      	ldr	r3, [r7, #12]
 800ee4a:	681b      	ldr	r3, [r3, #0]
 800ee4c:	4920      	ldr	r1, [pc, #128]	@ (800eed0 <I2C_DMAMasterTransmitCplt+0x9c>)
 800ee4e:	400a      	ands	r2, r1
 800ee50:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800ee52:	68fb      	ldr	r3, [r7, #12]
 800ee54:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ee56:	b29b      	uxth	r3, r3
 800ee58:	2b00      	cmp	r3, #0
 800ee5a:	d105      	bne.n	800ee68 <I2C_DMAMasterTransmitCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800ee5c:	68fb      	ldr	r3, [r7, #12]
 800ee5e:	2120      	movs	r1, #32
 800ee60:	0018      	movs	r0, r3
 800ee62:	f000 f8f9 	bl	800f058 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800ee66:	e02e      	b.n	800eec6 <I2C_DMAMasterTransmitCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 800ee68:	68fb      	ldr	r3, [r7, #12]
 800ee6a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee6c:	68fa      	ldr	r2, [r7, #12]
 800ee6e:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800ee70:	189a      	adds	r2, r3, r2
 800ee72:	68fb      	ldr	r3, [r7, #12]
 800ee74:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ee76:	68fb      	ldr	r3, [r7, #12]
 800ee78:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ee7a:	b29b      	uxth	r3, r3
 800ee7c:	2bff      	cmp	r3, #255	@ 0xff
 800ee7e:	d903      	bls.n	800ee88 <I2C_DMAMasterTransmitCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ee80:	68fb      	ldr	r3, [r7, #12]
 800ee82:	22ff      	movs	r2, #255	@ 0xff
 800ee84:	851a      	strh	r2, [r3, #40]	@ 0x28
 800ee86:	e004      	b.n	800ee92 <I2C_DMAMasterTransmitCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 800ee88:	68fb      	ldr	r3, [r7, #12]
 800ee8a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ee8c:	b29a      	uxth	r2, r3
 800ee8e:	68fb      	ldr	r3, [r7, #12]
 800ee90:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800ee92:	68fb      	ldr	r3, [r7, #12]
 800ee94:	6b98      	ldr	r0, [r3, #56]	@ 0x38
 800ee96:	68fb      	ldr	r3, [r7, #12]
 800ee98:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ee9a:	0019      	movs	r1, r3
 800ee9c:	68fb      	ldr	r3, [r7, #12]
 800ee9e:	681b      	ldr	r3, [r3, #0]
 800eea0:	3328      	adds	r3, #40	@ 0x28
 800eea2:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800eea4:	68fb      	ldr	r3, [r7, #12]
 800eea6:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmatx, (uint32_t)hi2c->pBuffPtr, (uint32_t)&hi2c->Instance->TXDR,
 800eea8:	f7fd fcf4 	bl	800c894 <HAL_DMA_Start_IT>
 800eeac:	1e03      	subs	r3, r0, #0
 800eeae:	d005      	beq.n	800eebc <I2C_DMAMasterTransmitCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800eeb0:	68fb      	ldr	r3, [r7, #12]
 800eeb2:	2110      	movs	r1, #16
 800eeb4:	0018      	movs	r0, r3
 800eeb6:	f7ff fe6f 	bl	800eb98 <I2C_ITError>
}
 800eeba:	e004      	b.n	800eec6 <I2C_DMAMasterTransmitCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800eebc:	68fb      	ldr	r3, [r7, #12]
 800eebe:	2140      	movs	r1, #64	@ 0x40
 800eec0:	0018      	movs	r0, r3
 800eec2:	f000 f8c9 	bl	800f058 <I2C_Enable_IRQ>
}
 800eec6:	46c0      	nop			@ (mov r8, r8)
 800eec8:	46bd      	mov	sp, r7
 800eeca:	b004      	add	sp, #16
 800eecc:	bd80      	pop	{r7, pc}
 800eece:	46c0      	nop			@ (mov r8, r8)
 800eed0:	ffffbfff 	.word	0xffffbfff

0800eed4 <I2C_DMAMasterReceiveCplt>:
  * @brief DMA I2C master receive process complete callback.
  * @param  hdma DMA handle
  * @retval None
  */
static void I2C_DMAMasterReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800eed4:	b580      	push	{r7, lr}
 800eed6:	b084      	sub	sp, #16
 800eed8:	af00      	add	r7, sp, #0
 800eeda:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800eedc:	687b      	ldr	r3, [r7, #4]
 800eede:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800eee0:	60fb      	str	r3, [r7, #12]

  /* Disable DMA Request */
  hi2c->Instance->CR1 &= ~I2C_CR1_RXDMAEN;
 800eee2:	68fb      	ldr	r3, [r7, #12]
 800eee4:	681b      	ldr	r3, [r3, #0]
 800eee6:	681a      	ldr	r2, [r3, #0]
 800eee8:	68fb      	ldr	r3, [r7, #12]
 800eeea:	681b      	ldr	r3, [r3, #0]
 800eeec:	4920      	ldr	r1, [pc, #128]	@ (800ef70 <I2C_DMAMasterReceiveCplt+0x9c>)
 800eeee:	400a      	ands	r2, r1
 800eef0:	601a      	str	r2, [r3, #0]

  /* If last transfer, enable STOP interrupt */
  if (hi2c->XferCount == 0U)
 800eef2:	68fb      	ldr	r3, [r7, #12]
 800eef4:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800eef6:	b29b      	uxth	r3, r3
 800eef8:	2b00      	cmp	r3, #0
 800eefa:	d105      	bne.n	800ef08 <I2C_DMAMasterReceiveCplt+0x34>
  {
    /* Enable STOP interrupt */
    I2C_Enable_IRQ(hi2c, I2C_XFER_CPLT_IT);
 800eefc:	68fb      	ldr	r3, [r7, #12]
 800eefe:	2120      	movs	r1, #32
 800ef00:	0018      	movs	r0, r3
 800ef02:	f000 f8a9 	bl	800f058 <I2C_Enable_IRQ>
    {
      /* Enable TC interrupts */
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
    }
  }
}
 800ef06:	e02e      	b.n	800ef66 <I2C_DMAMasterReceiveCplt+0x92>
    hi2c->pBuffPtr += hi2c->XferSize;
 800ef08:	68fb      	ldr	r3, [r7, #12]
 800ef0a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef0c:	68fa      	ldr	r2, [r7, #12]
 800ef0e:	8d12      	ldrh	r2, [r2, #40]	@ 0x28
 800ef10:	189a      	adds	r2, r3, r2
 800ef12:	68fb      	ldr	r3, [r7, #12]
 800ef14:	625a      	str	r2, [r3, #36]	@ 0x24
    if (hi2c->XferCount > MAX_NBYTE_SIZE)
 800ef16:	68fb      	ldr	r3, [r7, #12]
 800ef18:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ef1a:	b29b      	uxth	r3, r3
 800ef1c:	2bff      	cmp	r3, #255	@ 0xff
 800ef1e:	d903      	bls.n	800ef28 <I2C_DMAMasterReceiveCplt+0x54>
      hi2c->XferSize = MAX_NBYTE_SIZE;
 800ef20:	68fb      	ldr	r3, [r7, #12]
 800ef22:	22ff      	movs	r2, #255	@ 0xff
 800ef24:	851a      	strh	r2, [r3, #40]	@ 0x28
 800ef26:	e004      	b.n	800ef32 <I2C_DMAMasterReceiveCplt+0x5e>
      hi2c->XferSize = hi2c->XferCount;
 800ef28:	68fb      	ldr	r3, [r7, #12]
 800ef2a:	8d5b      	ldrh	r3, [r3, #42]	@ 0x2a
 800ef2c:	b29a      	uxth	r2, r3
 800ef2e:	68fb      	ldr	r3, [r7, #12]
 800ef30:	851a      	strh	r2, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800ef32:	68fb      	ldr	r3, [r7, #12]
 800ef34:	6bd8      	ldr	r0, [r3, #60]	@ 0x3c
 800ef36:	68fb      	ldr	r3, [r7, #12]
 800ef38:	681b      	ldr	r3, [r3, #0]
 800ef3a:	3324      	adds	r3, #36	@ 0x24
 800ef3c:	0019      	movs	r1, r3
 800ef3e:	68fb      	ldr	r3, [r7, #12]
 800ef40:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800ef42:	001a      	movs	r2, r3
                         hi2c->XferSize) != HAL_OK)
 800ef44:	68fb      	ldr	r3, [r7, #12]
 800ef46:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
    if (HAL_DMA_Start_IT(hi2c->hdmarx, (uint32_t)&hi2c->Instance->RXDR, (uint32_t)hi2c->pBuffPtr,
 800ef48:	f7fd fca4 	bl	800c894 <HAL_DMA_Start_IT>
 800ef4c:	1e03      	subs	r3, r0, #0
 800ef4e:	d005      	beq.n	800ef5c <I2C_DMAMasterReceiveCplt+0x88>
      I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800ef50:	68fb      	ldr	r3, [r7, #12]
 800ef52:	2110      	movs	r1, #16
 800ef54:	0018      	movs	r0, r3
 800ef56:	f7ff fe1f 	bl	800eb98 <I2C_ITError>
}
 800ef5a:	e004      	b.n	800ef66 <I2C_DMAMasterReceiveCplt+0x92>
      I2C_Enable_IRQ(hi2c, I2C_XFER_RELOAD_IT);
 800ef5c:	68fb      	ldr	r3, [r7, #12]
 800ef5e:	2140      	movs	r1, #64	@ 0x40
 800ef60:	0018      	movs	r0, r3
 800ef62:	f000 f879 	bl	800f058 <I2C_Enable_IRQ>
}
 800ef66:	46c0      	nop			@ (mov r8, r8)
 800ef68:	46bd      	mov	sp, r7
 800ef6a:	b004      	add	sp, #16
 800ef6c:	bd80      	pop	{r7, pc}
 800ef6e:	46c0      	nop			@ (mov r8, r8)
 800ef70:	ffff7fff 	.word	0xffff7fff

0800ef74 <I2C_DMAError>:
  * @brief  DMA I2C communication error callback.
  * @param hdma DMA handle
  * @retval None
  */
static void I2C_DMAError(DMA_HandleTypeDef *hdma)
{
 800ef74:	b580      	push	{r7, lr}
 800ef76:	b084      	sub	sp, #16
 800ef78:	af00      	add	r7, sp, #0
 800ef7a:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800ef7c:	687b      	ldr	r3, [r7, #4]
 800ef7e:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800ef80:	60fb      	str	r3, [r7, #12]

  /* Disable Acknowledge */
  hi2c->Instance->CR2 |= I2C_CR2_NACK;
 800ef82:	68fb      	ldr	r3, [r7, #12]
 800ef84:	681b      	ldr	r3, [r3, #0]
 800ef86:	685a      	ldr	r2, [r3, #4]
 800ef88:	68fb      	ldr	r3, [r7, #12]
 800ef8a:	681b      	ldr	r3, [r3, #0]
 800ef8c:	2180      	movs	r1, #128	@ 0x80
 800ef8e:	0209      	lsls	r1, r1, #8
 800ef90:	430a      	orrs	r2, r1
 800ef92:	605a      	str	r2, [r3, #4]

  /* Call the corresponding callback to inform upper layer of End of Transfer */
  I2C_ITError(hi2c, HAL_I2C_ERROR_DMA);
 800ef94:	68fb      	ldr	r3, [r7, #12]
 800ef96:	2110      	movs	r1, #16
 800ef98:	0018      	movs	r0, r3
 800ef9a:	f7ff fdfd 	bl	800eb98 <I2C_ITError>
}
 800ef9e:	46c0      	nop			@ (mov r8, r8)
 800efa0:	46bd      	mov	sp, r7
 800efa2:	b004      	add	sp, #16
 800efa4:	bd80      	pop	{r7, pc}

0800efa6 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 800efa6:	b580      	push	{r7, lr}
 800efa8:	b084      	sub	sp, #16
 800efaa:	af00      	add	r7, sp, #0
 800efac:	6078      	str	r0, [r7, #4]
  /* Derogation MISRAC2012-Rule-11.5 */
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)(((DMA_HandleTypeDef *)hdma)->Parent);
 800efae:	687b      	ldr	r3, [r7, #4]
 800efb0:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800efb2:	60fb      	str	r3, [r7, #12]

  /* Reset AbortCpltCallback */
  if (hi2c->hdmatx != NULL)
 800efb4:	68fb      	ldr	r3, [r7, #12]
 800efb6:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800efb8:	2b00      	cmp	r3, #0
 800efba:	d003      	beq.n	800efc4 <I2C_DMAAbort+0x1e>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800efbc:	68fb      	ldr	r3, [r7, #12]
 800efbe:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800efc0:	2200      	movs	r2, #0
 800efc2:	639a      	str	r2, [r3, #56]	@ 0x38
  }
  if (hi2c->hdmarx != NULL)
 800efc4:	68fb      	ldr	r3, [r7, #12]
 800efc6:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800efc8:	2b00      	cmp	r3, #0
 800efca:	d003      	beq.n	800efd4 <I2C_DMAAbort+0x2e>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800efcc:	68fb      	ldr	r3, [r7, #12]
 800efce:	6bdb      	ldr	r3, [r3, #60]	@ 0x3c
 800efd0:	2200      	movs	r2, #0
 800efd2:	639a      	str	r2, [r3, #56]	@ 0x38
  }

  I2C_TreatErrorCallback(hi2c);
 800efd4:	68fb      	ldr	r3, [r7, #12]
 800efd6:	0018      	movs	r0, r3
 800efd8:	f7ff fee0 	bl	800ed9c <I2C_TreatErrorCallback>
}
 800efdc:	46c0      	nop			@ (mov r8, r8)
 800efde:	46bd      	mov	sp, r7
 800efe0:	b004      	add	sp, #16
 800efe2:	bd80      	pop	{r7, pc}

0800efe4 <I2C_TransferConfig>:
  *     @arg @ref I2C_GENERATE_START_WRITE Generate Restart for write request.
  * @retval None
  */
static void I2C_TransferConfig(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t Size, uint32_t Mode,
                               uint32_t Request)
{
 800efe4:	b590      	push	{r4, r7, lr}
 800efe6:	b087      	sub	sp, #28
 800efe8:	af00      	add	r7, sp, #0
 800efea:	60f8      	str	r0, [r7, #12]
 800efec:	0008      	movs	r0, r1
 800efee:	0011      	movs	r1, r2
 800eff0:	607b      	str	r3, [r7, #4]
 800eff2:	240a      	movs	r4, #10
 800eff4:	193b      	adds	r3, r7, r4
 800eff6:	1c02      	adds	r2, r0, #0
 800eff8:	801a      	strh	r2, [r3, #0]
 800effa:	2009      	movs	r0, #9
 800effc:	183b      	adds	r3, r7, r0
 800effe:	1c0a      	adds	r2, r1, #0
 800f000:	701a      	strb	r2, [r3, #0]
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_TRANSFER_MODE(Mode));
  assert_param(IS_TRANSFER_REQUEST(Request));

  /* Declaration of tmp to prevent undefined behavior of volatile usage */
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800f002:	193b      	adds	r3, r7, r4
 800f004:	881b      	ldrh	r3, [r3, #0]
 800f006:	059b      	lsls	r3, r3, #22
 800f008:	0d9a      	lsrs	r2, r3, #22
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800f00a:	183b      	adds	r3, r7, r0
 800f00c:	781b      	ldrb	r3, [r3, #0]
 800f00e:	0419      	lsls	r1, r3, #16
 800f010:	23ff      	movs	r3, #255	@ 0xff
 800f012:	041b      	lsls	r3, r3, #16
 800f014:	400b      	ands	r3, r1
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800f016:	431a      	orrs	r2, r3
                             (((uint32_t)Size << I2C_CR2_NBYTES_Pos) & I2C_CR2_NBYTES) | \
 800f018:	687b      	ldr	r3, [r7, #4]
 800f01a:	431a      	orrs	r2, r3
  uint32_t tmp = ((uint32_t)(((uint32_t)DevAddress & I2C_CR2_SADD) | \
 800f01c:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 800f01e:	4313      	orrs	r3, r2
 800f020:	005b      	lsls	r3, r3, #1
 800f022:	085b      	lsrs	r3, r3, #1
 800f024:	617b      	str	r3, [r7, #20]
                             (uint32_t)Mode | (uint32_t)Request) & (~0x80000000U));

  /* update CR2 register */
  MODIFY_REG(hi2c->Instance->CR2, \
 800f026:	68fb      	ldr	r3, [r7, #12]
 800f028:	681b      	ldr	r3, [r3, #0]
 800f02a:	685b      	ldr	r3, [r3, #4]
 800f02c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 800f02e:	0d51      	lsrs	r1, r2, #21
 800f030:	2280      	movs	r2, #128	@ 0x80
 800f032:	00d2      	lsls	r2, r2, #3
 800f034:	400a      	ands	r2, r1
 800f036:	4907      	ldr	r1, [pc, #28]	@ (800f054 <I2C_TransferConfig+0x70>)
 800f038:	430a      	orrs	r2, r1
 800f03a:	43d2      	mvns	r2, r2
 800f03c:	401a      	ands	r2, r3
 800f03e:	0011      	movs	r1, r2
 800f040:	68fb      	ldr	r3, [r7, #12]
 800f042:	681b      	ldr	r3, [r3, #0]
 800f044:	697a      	ldr	r2, [r7, #20]
 800f046:	430a      	orrs	r2, r1
 800f048:	605a      	str	r2, [r3, #4]
             ((I2C_CR2_SADD | I2C_CR2_NBYTES | I2C_CR2_RELOAD | I2C_CR2_AUTOEND | \
               (I2C_CR2_RD_WRN & (uint32_t)(Request >> (31U - I2C_CR2_RD_WRN_Pos))) | \
               I2C_CR2_START | I2C_CR2_STOP)), tmp);
}
 800f04a:	46c0      	nop			@ (mov r8, r8)
 800f04c:	46bd      	mov	sp, r7
 800f04e:	b007      	add	sp, #28
 800f050:	bd90      	pop	{r4, r7, pc}
 800f052:	46c0      	nop			@ (mov r8, r8)
 800f054:	03ff63ff 	.word	0x03ff63ff

0800f058 <I2C_Enable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Enable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800f058:	b580      	push	{r7, lr}
 800f05a:	b084      	sub	sp, #16
 800f05c:	af00      	add	r7, sp, #0
 800f05e:	6078      	str	r0, [r7, #4]
 800f060:	000a      	movs	r2, r1
 800f062:	1cbb      	adds	r3, r7, #2
 800f064:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800f066:	2300      	movs	r3, #0
 800f068:	60fb      	str	r3, [r7, #12]

  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800f06a:	687b      	ldr	r3, [r7, #4]
 800f06c:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f06e:	4b3e      	ldr	r3, [pc, #248]	@ (800f168 <I2C_Enable_IRQ+0x110>)
 800f070:	429a      	cmp	r2, r3
 800f072:	d035      	beq.n	800f0e0 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800f074:	687b      	ldr	r3, [r7, #4]
 800f076:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
  if ((hi2c->XferISR != I2C_Master_ISR_DMA) && \
 800f078:	4b3c      	ldr	r3, [pc, #240]	@ (800f16c <I2C_Enable_IRQ+0x114>)
 800f07a:	429a      	cmp	r2, r3
 800f07c:	d030      	beq.n	800f0e0 <I2C_Enable_IRQ+0x88>
      (hi2c->XferISR != I2C_Mem_ISR_DMA))
 800f07e:	687b      	ldr	r3, [r7, #4]
 800f080:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
      (hi2c->XferISR != I2C_Slave_ISR_DMA) && \
 800f082:	4b3b      	ldr	r3, [pc, #236]	@ (800f170 <I2C_Enable_IRQ+0x118>)
 800f084:	429a      	cmp	r2, r3
 800f086:	d02b      	beq.n	800f0e0 <I2C_Enable_IRQ+0x88>
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800f088:	1cbb      	adds	r3, r7, #2
 800f08a:	2200      	movs	r2, #0
 800f08c:	5e9b      	ldrsh	r3, [r3, r2]
 800f08e:	2b00      	cmp	r3, #0
 800f090:	da03      	bge.n	800f09a <I2C_Enable_IRQ+0x42>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800f092:	68fb      	ldr	r3, [r7, #12]
 800f094:	22b8      	movs	r2, #184	@ 0xb8
 800f096:	4313      	orrs	r3, r2
 800f098:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800f09a:	1cbb      	adds	r3, r7, #2
 800f09c:	881b      	ldrh	r3, [r3, #0]
 800f09e:	2201      	movs	r2, #1
 800f0a0:	4013      	ands	r3, r2
 800f0a2:	d003      	beq.n	800f0ac <I2C_Enable_IRQ+0x54>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800f0a4:	68fb      	ldr	r3, [r7, #12]
 800f0a6:	22f2      	movs	r2, #242	@ 0xf2
 800f0a8:	4313      	orrs	r3, r2
 800f0aa:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800f0ac:	1cbb      	adds	r3, r7, #2
 800f0ae:	881b      	ldrh	r3, [r3, #0]
 800f0b0:	2202      	movs	r2, #2
 800f0b2:	4013      	ands	r3, r2
 800f0b4:	d003      	beq.n	800f0be <I2C_Enable_IRQ+0x66>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800f0b6:	68fb      	ldr	r3, [r7, #12]
 800f0b8:	22f4      	movs	r2, #244	@ 0xf4
 800f0ba:	4313      	orrs	r3, r2
 800f0bc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800f0be:	1cbb      	adds	r3, r7, #2
 800f0c0:	881b      	ldrh	r3, [r3, #0]
 800f0c2:	2b10      	cmp	r3, #16
 800f0c4:	d103      	bne.n	800f0ce <I2C_Enable_IRQ+0x76>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800f0c6:	68fb      	ldr	r3, [r7, #12]
 800f0c8:	2290      	movs	r2, #144	@ 0x90
 800f0ca:	4313      	orrs	r3, r2
 800f0cc:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800f0ce:	1cbb      	adds	r3, r7, #2
 800f0d0:	881b      	ldrh	r3, [r3, #0]
 800f0d2:	2b20      	cmp	r3, #32
 800f0d4:	d13c      	bne.n	800f150 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable STOP interrupts */
      tmpisr |= I2C_IT_STOPI;
 800f0d6:	68fb      	ldr	r3, [r7, #12]
 800f0d8:	2220      	movs	r2, #32
 800f0da:	4313      	orrs	r3, r2
 800f0dc:	60fb      	str	r3, [r7, #12]
    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800f0de:	e037      	b.n	800f150 <I2C_Enable_IRQ+0xf8>
    }
  }

  else
  {
    if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800f0e0:	1cbb      	adds	r3, r7, #2
 800f0e2:	2200      	movs	r2, #0
 800f0e4:	5e9b      	ldrsh	r3, [r3, r2]
 800f0e6:	2b00      	cmp	r3, #0
 800f0e8:	da03      	bge.n	800f0f2 <I2C_Enable_IRQ+0x9a>
    {
      /* Enable ERR, STOP, NACK and ADDR interrupts */
      tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800f0ea:	68fb      	ldr	r3, [r7, #12]
 800f0ec:	22b8      	movs	r2, #184	@ 0xb8
 800f0ee:	4313      	orrs	r3, r2
 800f0f0:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800f0f2:	1cbb      	adds	r3, r7, #2
 800f0f4:	881b      	ldrh	r3, [r3, #0]
 800f0f6:	2201      	movs	r2, #1
 800f0f8:	4013      	ands	r3, r2
 800f0fa:	d003      	beq.n	800f104 <I2C_Enable_IRQ+0xac>
    {
      /* Enable ERR, TC, STOP, NACK and RXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_TXI;
 800f0fc:	68fb      	ldr	r3, [r7, #12]
 800f0fe:	22f2      	movs	r2, #242	@ 0xf2
 800f100:	4313      	orrs	r3, r2
 800f102:	60fb      	str	r3, [r7, #12]
    }

    if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800f104:	1cbb      	adds	r3, r7, #2
 800f106:	881b      	ldrh	r3, [r3, #0]
 800f108:	2202      	movs	r2, #2
 800f10a:	4013      	ands	r3, r2
 800f10c:	d003      	beq.n	800f116 <I2C_Enable_IRQ+0xbe>
    {
      /* Enable ERR, TC, STOP, NACK and TXI interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_TCI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_RXI;
 800f10e:	68fb      	ldr	r3, [r7, #12]
 800f110:	22f4      	movs	r2, #244	@ 0xf4
 800f112:	4313      	orrs	r3, r2
 800f114:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_ERROR_IT)
 800f116:	1cbb      	adds	r3, r7, #2
 800f118:	881b      	ldrh	r3, [r3, #0]
 800f11a:	2b10      	cmp	r3, #16
 800f11c:	d103      	bne.n	800f126 <I2C_Enable_IRQ+0xce>
    {
      /* Enable ERR and NACK interrupts */
      tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800f11e:	68fb      	ldr	r3, [r7, #12]
 800f120:	2290      	movs	r2, #144	@ 0x90
 800f122:	4313      	orrs	r3, r2
 800f124:	60fb      	str	r3, [r7, #12]
    }

    if (InterruptRequest == I2C_XFER_CPLT_IT)
 800f126:	1cbb      	adds	r3, r7, #2
 800f128:	881b      	ldrh	r3, [r3, #0]
 800f12a:	2b20      	cmp	r3, #32
 800f12c:	d103      	bne.n	800f136 <I2C_Enable_IRQ+0xde>
    {
      /* Enable STOP interrupts */
      tmpisr |= (I2C_IT_STOPI | I2C_IT_TCI);
 800f12e:	68fb      	ldr	r3, [r7, #12]
 800f130:	2260      	movs	r2, #96	@ 0x60
 800f132:	4313      	orrs	r3, r2
 800f134:	60fb      	str	r3, [r7, #12]
    }

    if ((hi2c->XferISR != I2C_Mem_ISR_DMA) && (InterruptRequest == I2C_XFER_RELOAD_IT))
 800f136:	687b      	ldr	r3, [r7, #4]
 800f138:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 800f13a:	4b0d      	ldr	r3, [pc, #52]	@ (800f170 <I2C_Enable_IRQ+0x118>)
 800f13c:	429a      	cmp	r2, r3
 800f13e:	d007      	beq.n	800f150 <I2C_Enable_IRQ+0xf8>
 800f140:	1cbb      	adds	r3, r7, #2
 800f142:	881b      	ldrh	r3, [r3, #0]
 800f144:	2b40      	cmp	r3, #64	@ 0x40
 800f146:	d103      	bne.n	800f150 <I2C_Enable_IRQ+0xf8>
    {
      /* Enable TC interrupts */
      tmpisr |= I2C_IT_TCI;
 800f148:	68fb      	ldr	r3, [r7, #12]
 800f14a:	2240      	movs	r2, #64	@ 0x40
 800f14c:	4313      	orrs	r3, r2
 800f14e:	60fb      	str	r3, [r7, #12]
  }

  /* Enable interrupts only at the end */
  /* to avoid the risk of I2C interrupt handle execution before */
  /* all interrupts requested done */
  __HAL_I2C_ENABLE_IT(hi2c, tmpisr);
 800f150:	687b      	ldr	r3, [r7, #4]
 800f152:	681b      	ldr	r3, [r3, #0]
 800f154:	6819      	ldr	r1, [r3, #0]
 800f156:	687b      	ldr	r3, [r7, #4]
 800f158:	681b      	ldr	r3, [r3, #0]
 800f15a:	68fa      	ldr	r2, [r7, #12]
 800f15c:	430a      	orrs	r2, r1
 800f15e:	601a      	str	r2, [r3, #0]
}
 800f160:	46c0      	nop			@ (mov r8, r8)
 800f162:	46bd      	mov	sp, r7
 800f164:	b004      	add	sp, #16
 800f166:	bd80      	pop	{r7, pc}
 800f168:	0800de7d 	.word	0x0800de7d
 800f16c:	0800e2ad 	.word	0x0800e2ad
 800f170:	0800e075 	.word	0x0800e075

0800f174 <I2C_Disable_IRQ>:
  *                the configuration information for the specified I2C.
  * @param  InterruptRequest Value of @ref I2C_Interrupt_configuration_definition.
  * @retval None
  */
static void I2C_Disable_IRQ(I2C_HandleTypeDef *hi2c, uint16_t InterruptRequest)
{
 800f174:	b580      	push	{r7, lr}
 800f176:	b084      	sub	sp, #16
 800f178:	af00      	add	r7, sp, #0
 800f17a:	6078      	str	r0, [r7, #4]
 800f17c:	000a      	movs	r2, r1
 800f17e:	1cbb      	adds	r3, r7, #2
 800f180:	801a      	strh	r2, [r3, #0]
  uint32_t tmpisr = 0U;
 800f182:	2300      	movs	r3, #0
 800f184:	60fb      	str	r3, [r7, #12]

  if ((InterruptRequest & I2C_XFER_TX_IT) == I2C_XFER_TX_IT)
 800f186:	1cbb      	adds	r3, r7, #2
 800f188:	881b      	ldrh	r3, [r3, #0]
 800f18a:	2201      	movs	r2, #1
 800f18c:	4013      	ands	r3, r2
 800f18e:	d010      	beq.n	800f1b2 <I2C_Disable_IRQ+0x3e>
  {
    /* Disable TC and TXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_TXI;
 800f190:	68fb      	ldr	r3, [r7, #12]
 800f192:	2242      	movs	r2, #66	@ 0x42
 800f194:	4313      	orrs	r3, r2
 800f196:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800f198:	687b      	ldr	r3, [r7, #4]
 800f19a:	2241      	movs	r2, #65	@ 0x41
 800f19c:	5c9b      	ldrb	r3, [r3, r2]
 800f19e:	b2db      	uxtb	r3, r3
 800f1a0:	001a      	movs	r2, r3
 800f1a2:	2328      	movs	r3, #40	@ 0x28
 800f1a4:	4013      	ands	r3, r2
 800f1a6:	2b28      	cmp	r3, #40	@ 0x28
 800f1a8:	d003      	beq.n	800f1b2 <I2C_Disable_IRQ+0x3e>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800f1aa:	68fb      	ldr	r3, [r7, #12]
 800f1ac:	22b0      	movs	r2, #176	@ 0xb0
 800f1ae:	4313      	orrs	r3, r2
 800f1b0:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_RX_IT) == I2C_XFER_RX_IT)
 800f1b2:	1cbb      	adds	r3, r7, #2
 800f1b4:	881b      	ldrh	r3, [r3, #0]
 800f1b6:	2202      	movs	r2, #2
 800f1b8:	4013      	ands	r3, r2
 800f1ba:	d010      	beq.n	800f1de <I2C_Disable_IRQ+0x6a>
  {
    /* Disable TC and RXI interrupts */
    tmpisr |= I2C_IT_TCI | I2C_IT_RXI;
 800f1bc:	68fb      	ldr	r3, [r7, #12]
 800f1be:	2244      	movs	r2, #68	@ 0x44
 800f1c0:	4313      	orrs	r3, r2
 800f1c2:	60fb      	str	r3, [r7, #12]

    if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) != (uint32_t)HAL_I2C_STATE_LISTEN)
 800f1c4:	687b      	ldr	r3, [r7, #4]
 800f1c6:	2241      	movs	r2, #65	@ 0x41
 800f1c8:	5c9b      	ldrb	r3, [r3, r2]
 800f1ca:	b2db      	uxtb	r3, r3
 800f1cc:	001a      	movs	r2, r3
 800f1ce:	2328      	movs	r3, #40	@ 0x28
 800f1d0:	4013      	ands	r3, r2
 800f1d2:	2b28      	cmp	r3, #40	@ 0x28
 800f1d4:	d003      	beq.n	800f1de <I2C_Disable_IRQ+0x6a>
    {
      /* Disable NACK and STOP interrupts */
      tmpisr |= I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800f1d6:	68fb      	ldr	r3, [r7, #12]
 800f1d8:	22b0      	movs	r2, #176	@ 0xb0
 800f1da:	4313      	orrs	r3, r2
 800f1dc:	60fb      	str	r3, [r7, #12]
    }
  }

  if ((InterruptRequest & I2C_XFER_LISTEN_IT) == I2C_XFER_LISTEN_IT)
 800f1de:	1cbb      	adds	r3, r7, #2
 800f1e0:	2200      	movs	r2, #0
 800f1e2:	5e9b      	ldrsh	r3, [r3, r2]
 800f1e4:	2b00      	cmp	r3, #0
 800f1e6:	da03      	bge.n	800f1f0 <I2C_Disable_IRQ+0x7c>
  {
    /* Disable ADDR, NACK and STOP interrupts */
    tmpisr |= I2C_IT_ADDRI | I2C_IT_STOPI | I2C_IT_NACKI | I2C_IT_ERRI;
 800f1e8:	68fb      	ldr	r3, [r7, #12]
 800f1ea:	22b8      	movs	r2, #184	@ 0xb8
 800f1ec:	4313      	orrs	r3, r2
 800f1ee:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_ERROR_IT)
 800f1f0:	1cbb      	adds	r3, r7, #2
 800f1f2:	881b      	ldrh	r3, [r3, #0]
 800f1f4:	2b10      	cmp	r3, #16
 800f1f6:	d103      	bne.n	800f200 <I2C_Disable_IRQ+0x8c>
  {
    /* Enable ERR and NACK interrupts */
    tmpisr |= I2C_IT_ERRI | I2C_IT_NACKI;
 800f1f8:	68fb      	ldr	r3, [r7, #12]
 800f1fa:	2290      	movs	r2, #144	@ 0x90
 800f1fc:	4313      	orrs	r3, r2
 800f1fe:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_CPLT_IT)
 800f200:	1cbb      	adds	r3, r7, #2
 800f202:	881b      	ldrh	r3, [r3, #0]
 800f204:	2b20      	cmp	r3, #32
 800f206:	d103      	bne.n	800f210 <I2C_Disable_IRQ+0x9c>
  {
    /* Enable STOP interrupts */
    tmpisr |= I2C_IT_STOPI;
 800f208:	68fb      	ldr	r3, [r7, #12]
 800f20a:	2220      	movs	r2, #32
 800f20c:	4313      	orrs	r3, r2
 800f20e:	60fb      	str	r3, [r7, #12]
  }

  if (InterruptRequest == I2C_XFER_RELOAD_IT)
 800f210:	1cbb      	adds	r3, r7, #2
 800f212:	881b      	ldrh	r3, [r3, #0]
 800f214:	2b40      	cmp	r3, #64	@ 0x40
 800f216:	d103      	bne.n	800f220 <I2C_Disable_IRQ+0xac>
  {
    /* Enable TC interrupts */
    tmpisr |= I2C_IT_TCI;
 800f218:	68fb      	ldr	r3, [r7, #12]
 800f21a:	2240      	movs	r2, #64	@ 0x40
 800f21c:	4313      	orrs	r3, r2
 800f21e:	60fb      	str	r3, [r7, #12]
  }

  /* Disable interrupts only at the end */
  /* to avoid a breaking situation like at "t" time */
  /* all disable interrupts request are not done */
  __HAL_I2C_DISABLE_IT(hi2c, tmpisr);
 800f220:	687b      	ldr	r3, [r7, #4]
 800f222:	681b      	ldr	r3, [r3, #0]
 800f224:	681a      	ldr	r2, [r3, #0]
 800f226:	68fb      	ldr	r3, [r7, #12]
 800f228:	43d9      	mvns	r1, r3
 800f22a:	687b      	ldr	r3, [r7, #4]
 800f22c:	681b      	ldr	r3, [r3, #0]
 800f22e:	400a      	ands	r2, r1
 800f230:	601a      	str	r2, [r3, #0]
}
 800f232:	46c0      	nop			@ (mov r8, r8)
 800f234:	46bd      	mov	sp, r7
 800f236:	b004      	add	sp, #16
 800f238:	bd80      	pop	{r7, pc}
	...

0800f23c <HAL_I2CEx_ConfigAnalogFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  AnalogFilter New state of the Analog filter.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigAnalogFilter(I2C_HandleTypeDef *hi2c, uint32_t AnalogFilter)
{
 800f23c:	b580      	push	{r7, lr}
 800f23e:	b082      	sub	sp, #8
 800f240:	af00      	add	r7, sp, #0
 800f242:	6078      	str	r0, [r7, #4]
 800f244:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_ANALOG_FILTER(AnalogFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800f246:	687b      	ldr	r3, [r7, #4]
 800f248:	2241      	movs	r2, #65	@ 0x41
 800f24a:	5c9b      	ldrb	r3, [r3, r2]
 800f24c:	b2db      	uxtb	r3, r3
 800f24e:	2b20      	cmp	r3, #32
 800f250:	d138      	bne.n	800f2c4 <HAL_I2CEx_ConfigAnalogFilter+0x88>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800f252:	687b      	ldr	r3, [r7, #4]
 800f254:	2240      	movs	r2, #64	@ 0x40
 800f256:	5c9b      	ldrb	r3, [r3, r2]
 800f258:	2b01      	cmp	r3, #1
 800f25a:	d101      	bne.n	800f260 <HAL_I2CEx_ConfigAnalogFilter+0x24>
 800f25c:	2302      	movs	r3, #2
 800f25e:	e032      	b.n	800f2c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
 800f260:	687b      	ldr	r3, [r7, #4]
 800f262:	2240      	movs	r2, #64	@ 0x40
 800f264:	2101      	movs	r1, #1
 800f266:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800f268:	687b      	ldr	r3, [r7, #4]
 800f26a:	2241      	movs	r2, #65	@ 0x41
 800f26c:	2124      	movs	r1, #36	@ 0x24
 800f26e:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800f270:	687b      	ldr	r3, [r7, #4]
 800f272:	681b      	ldr	r3, [r3, #0]
 800f274:	681a      	ldr	r2, [r3, #0]
 800f276:	687b      	ldr	r3, [r7, #4]
 800f278:	681b      	ldr	r3, [r3, #0]
 800f27a:	2101      	movs	r1, #1
 800f27c:	438a      	bics	r2, r1
 800f27e:	601a      	str	r2, [r3, #0]

    /* Reset I2Cx ANOFF bit */
    hi2c->Instance->CR1 &= ~(I2C_CR1_ANFOFF);
 800f280:	687b      	ldr	r3, [r7, #4]
 800f282:	681b      	ldr	r3, [r3, #0]
 800f284:	681a      	ldr	r2, [r3, #0]
 800f286:	687b      	ldr	r3, [r7, #4]
 800f288:	681b      	ldr	r3, [r3, #0]
 800f28a:	4911      	ldr	r1, [pc, #68]	@ (800f2d0 <HAL_I2CEx_ConfigAnalogFilter+0x94>)
 800f28c:	400a      	ands	r2, r1
 800f28e:	601a      	str	r2, [r3, #0]

    /* Set analog filter bit*/
    hi2c->Instance->CR1 |= AnalogFilter;
 800f290:	687b      	ldr	r3, [r7, #4]
 800f292:	681b      	ldr	r3, [r3, #0]
 800f294:	6819      	ldr	r1, [r3, #0]
 800f296:	687b      	ldr	r3, [r7, #4]
 800f298:	681b      	ldr	r3, [r3, #0]
 800f29a:	683a      	ldr	r2, [r7, #0]
 800f29c:	430a      	orrs	r2, r1
 800f29e:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800f2a0:	687b      	ldr	r3, [r7, #4]
 800f2a2:	681b      	ldr	r3, [r3, #0]
 800f2a4:	681a      	ldr	r2, [r3, #0]
 800f2a6:	687b      	ldr	r3, [r7, #4]
 800f2a8:	681b      	ldr	r3, [r3, #0]
 800f2aa:	2101      	movs	r1, #1
 800f2ac:	430a      	orrs	r2, r1
 800f2ae:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800f2b0:	687b      	ldr	r3, [r7, #4]
 800f2b2:	2241      	movs	r2, #65	@ 0x41
 800f2b4:	2120      	movs	r1, #32
 800f2b6:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f2b8:	687b      	ldr	r3, [r7, #4]
 800f2ba:	2240      	movs	r2, #64	@ 0x40
 800f2bc:	2100      	movs	r1, #0
 800f2be:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800f2c0:	2300      	movs	r3, #0
 800f2c2:	e000      	b.n	800f2c6 <HAL_I2CEx_ConfigAnalogFilter+0x8a>
  }
  else
  {
    return HAL_BUSY;
 800f2c4:	2302      	movs	r3, #2
  }
}
 800f2c6:	0018      	movs	r0, r3
 800f2c8:	46bd      	mov	sp, r7
 800f2ca:	b002      	add	sp, #8
 800f2cc:	bd80      	pop	{r7, pc}
 800f2ce:	46c0      	nop			@ (mov r8, r8)
 800f2d0:	ffffefff 	.word	0xffffefff

0800f2d4 <HAL_I2CEx_ConfigDigitalFilter>:
  *                the configuration information for the specified I2Cx peripheral.
  * @param  DigitalFilter Coefficient of digital noise filter between Min_Data=0x00 and Max_Data=0x0F.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2CEx_ConfigDigitalFilter(I2C_HandleTypeDef *hi2c, uint32_t DigitalFilter)
{
 800f2d4:	b580      	push	{r7, lr}
 800f2d6:	b084      	sub	sp, #16
 800f2d8:	af00      	add	r7, sp, #0
 800f2da:	6078      	str	r0, [r7, #4]
 800f2dc:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_I2C_ALL_INSTANCE(hi2c->Instance));
  assert_param(IS_I2C_DIGITAL_FILTER(DigitalFilter));

  if (hi2c->State == HAL_I2C_STATE_READY)
 800f2de:	687b      	ldr	r3, [r7, #4]
 800f2e0:	2241      	movs	r2, #65	@ 0x41
 800f2e2:	5c9b      	ldrb	r3, [r3, r2]
 800f2e4:	b2db      	uxtb	r3, r3
 800f2e6:	2b20      	cmp	r3, #32
 800f2e8:	d139      	bne.n	800f35e <HAL_I2CEx_ConfigDigitalFilter+0x8a>
  {
    /* Process Locked */
    __HAL_LOCK(hi2c);
 800f2ea:	687b      	ldr	r3, [r7, #4]
 800f2ec:	2240      	movs	r2, #64	@ 0x40
 800f2ee:	5c9b      	ldrb	r3, [r3, r2]
 800f2f0:	2b01      	cmp	r3, #1
 800f2f2:	d101      	bne.n	800f2f8 <HAL_I2CEx_ConfigDigitalFilter+0x24>
 800f2f4:	2302      	movs	r3, #2
 800f2f6:	e033      	b.n	800f360 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
 800f2f8:	687b      	ldr	r3, [r7, #4]
 800f2fa:	2240      	movs	r2, #64	@ 0x40
 800f2fc:	2101      	movs	r1, #1
 800f2fe:	5499      	strb	r1, [r3, r2]

    hi2c->State = HAL_I2C_STATE_BUSY;
 800f300:	687b      	ldr	r3, [r7, #4]
 800f302:	2241      	movs	r2, #65	@ 0x41
 800f304:	2124      	movs	r1, #36	@ 0x24
 800f306:	5499      	strb	r1, [r3, r2]

    /* Disable the selected I2C peripheral */
    __HAL_I2C_DISABLE(hi2c);
 800f308:	687b      	ldr	r3, [r7, #4]
 800f30a:	681b      	ldr	r3, [r3, #0]
 800f30c:	681a      	ldr	r2, [r3, #0]
 800f30e:	687b      	ldr	r3, [r7, #4]
 800f310:	681b      	ldr	r3, [r3, #0]
 800f312:	2101      	movs	r1, #1
 800f314:	438a      	bics	r2, r1
 800f316:	601a      	str	r2, [r3, #0]

    /* Get the old register value */
    tmpreg = hi2c->Instance->CR1;
 800f318:	687b      	ldr	r3, [r7, #4]
 800f31a:	681b      	ldr	r3, [r3, #0]
 800f31c:	681b      	ldr	r3, [r3, #0]
 800f31e:	60fb      	str	r3, [r7, #12]

    /* Reset I2Cx DNF bits [11:8] */
    tmpreg &= ~(I2C_CR1_DNF);
 800f320:	68fb      	ldr	r3, [r7, #12]
 800f322:	4a11      	ldr	r2, [pc, #68]	@ (800f368 <HAL_I2CEx_ConfigDigitalFilter+0x94>)
 800f324:	4013      	ands	r3, r2
 800f326:	60fb      	str	r3, [r7, #12]

    /* Set I2Cx DNF coefficient */
    tmpreg |= DigitalFilter << 8U;
 800f328:	683b      	ldr	r3, [r7, #0]
 800f32a:	021b      	lsls	r3, r3, #8
 800f32c:	68fa      	ldr	r2, [r7, #12]
 800f32e:	4313      	orrs	r3, r2
 800f330:	60fb      	str	r3, [r7, #12]

    /* Store the new register value */
    hi2c->Instance->CR1 = tmpreg;
 800f332:	687b      	ldr	r3, [r7, #4]
 800f334:	681b      	ldr	r3, [r3, #0]
 800f336:	68fa      	ldr	r2, [r7, #12]
 800f338:	601a      	str	r2, [r3, #0]

    __HAL_I2C_ENABLE(hi2c);
 800f33a:	687b      	ldr	r3, [r7, #4]
 800f33c:	681b      	ldr	r3, [r3, #0]
 800f33e:	681a      	ldr	r2, [r3, #0]
 800f340:	687b      	ldr	r3, [r7, #4]
 800f342:	681b      	ldr	r3, [r3, #0]
 800f344:	2101      	movs	r1, #1
 800f346:	430a      	orrs	r2, r1
 800f348:	601a      	str	r2, [r3, #0]

    hi2c->State = HAL_I2C_STATE_READY;
 800f34a:	687b      	ldr	r3, [r7, #4]
 800f34c:	2241      	movs	r2, #65	@ 0x41
 800f34e:	2120      	movs	r1, #32
 800f350:	5499      	strb	r1, [r3, r2]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800f352:	687b      	ldr	r3, [r7, #4]
 800f354:	2240      	movs	r2, #64	@ 0x40
 800f356:	2100      	movs	r1, #0
 800f358:	5499      	strb	r1, [r3, r2]

    return HAL_OK;
 800f35a:	2300      	movs	r3, #0
 800f35c:	e000      	b.n	800f360 <HAL_I2CEx_ConfigDigitalFilter+0x8c>
  }
  else
  {
    return HAL_BUSY;
 800f35e:	2302      	movs	r3, #2
  }
}
 800f360:	0018      	movs	r0, r3
 800f362:	46bd      	mov	sp, r7
 800f364:	b004      	add	sp, #16
 800f366:	bd80      	pop	{r7, pc}
 800f368:	fffff0ff 	.word	0xfffff0ff

0800f36c <HAL_I2S_Init>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Init(I2S_HandleTypeDef *hi2s)
{
 800f36c:	b580      	push	{r7, lr}
 800f36e:	b088      	sub	sp, #32
 800f370:	af00      	add	r7, sp, #0
 800f372:	6078      	str	r0, [r7, #4]
  uint32_t packetlength;
  uint32_t tmp;
  uint32_t i2sclk;

  /* Check the I2S handle allocation */
  if (hi2s == NULL)
 800f374:	687b      	ldr	r3, [r7, #4]
 800f376:	2b00      	cmp	r3, #0
 800f378:	d101      	bne.n	800f37e <HAL_I2S_Init+0x12>
  {
    return HAL_ERROR;
 800f37a:	2301      	movs	r3, #1
 800f37c:	e0e1      	b.n	800f542 <HAL_I2S_Init+0x1d6>
  assert_param(IS_I2S_DATA_FORMAT(hi2s->Init.DataFormat));
  assert_param(IS_I2S_MCLK_OUTPUT(hi2s->Init.MCLKOutput));
  assert_param(IS_I2S_AUDIO_FREQ(hi2s->Init.AudioFreq));
  assert_param(IS_I2S_CPOL(hi2s->Init.CPOL));

  if (hi2s->State == HAL_I2S_STATE_RESET)
 800f37e:	687b      	ldr	r3, [r7, #4]
 800f380:	2235      	movs	r2, #53	@ 0x35
 800f382:	5c9b      	ldrb	r3, [r3, r2]
 800f384:	b2db      	uxtb	r3, r3
 800f386:	2b00      	cmp	r3, #0
 800f388:	d107      	bne.n	800f39a <HAL_I2S_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    hi2s->Lock = HAL_UNLOCKED;
 800f38a:	687b      	ldr	r3, [r7, #4]
 800f38c:	2234      	movs	r2, #52	@ 0x34
 800f38e:	2100      	movs	r1, #0
 800f390:	5499      	strb	r1, [r3, r2]

    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    hi2s->MspInitCallback(hi2s);
#else
    /* Init the low level hardware : GPIO, CLOCK, CORTEX...etc */
    HAL_I2S_MspInit(hi2s);
 800f392:	687b      	ldr	r3, [r7, #4]
 800f394:	0018      	movs	r0, r3
 800f396:	f7f7 fdbf 	bl	8006f18 <HAL_I2S_MspInit>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
  }

  hi2s->State = HAL_I2S_STATE_BUSY;
 800f39a:	687b      	ldr	r3, [r7, #4]
 800f39c:	2235      	movs	r2, #53	@ 0x35
 800f39e:	2102      	movs	r1, #2
 800f3a0:	5499      	strb	r1, [r3, r2]

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/
  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  CLEAR_BIT(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CKPOL | \
 800f3a2:	687b      	ldr	r3, [r7, #4]
 800f3a4:	681b      	ldr	r3, [r3, #0]
 800f3a6:	69da      	ldr	r2, [r3, #28]
 800f3a8:	687b      	ldr	r3, [r7, #4]
 800f3aa:	681b      	ldr	r3, [r3, #0]
 800f3ac:	4967      	ldr	r1, [pc, #412]	@ (800f54c <HAL_I2S_Init+0x1e0>)
 800f3ae:	400a      	ands	r2, r1
 800f3b0:	61da      	str	r2, [r3, #28]
                                      SPI_I2SCFGR_I2SSTD | SPI_I2SCFGR_PCMSYNC | SPI_I2SCFGR_I2SCFG | \
                                      SPI_I2SCFGR_I2SE | SPI_I2SCFGR_I2SMOD));
  hi2s->Instance->I2SPR = 0x0002U;
 800f3b2:	687b      	ldr	r3, [r7, #4]
 800f3b4:	681b      	ldr	r3, [r3, #0]
 800f3b6:	2202      	movs	r2, #2
 800f3b8:	621a      	str	r2, [r3, #32]

  /*----------------------- I2SPR: I2SDIV and ODD Calculation -----------------*/
  /* If the requested audio frequency is not the default, compute the prescaler */
  if (hi2s->Init.AudioFreq != I2S_AUDIOFREQ_DEFAULT)
 800f3ba:	687b      	ldr	r3, [r7, #4]
 800f3bc:	695b      	ldr	r3, [r3, #20]
 800f3be:	2b02      	cmp	r3, #2
 800f3c0:	d073      	beq.n	800f4aa <HAL_I2S_Init+0x13e>
  {
    /* Check the frame length (For the Prescaler computing) ********************/
    if (hi2s->Init.DataFormat == I2S_DATAFORMAT_16B)
 800f3c2:	687b      	ldr	r3, [r7, #4]
 800f3c4:	68db      	ldr	r3, [r3, #12]
 800f3c6:	2b00      	cmp	r3, #0
 800f3c8:	d102      	bne.n	800f3d0 <HAL_I2S_Init+0x64>
    {
      /* Packet length is 16 bits */
      packetlength = 16U;
 800f3ca:	2310      	movs	r3, #16
 800f3cc:	617b      	str	r3, [r7, #20]
 800f3ce:	e001      	b.n	800f3d4 <HAL_I2S_Init+0x68>
    }
    else
    {
      /* Packet length is 32 bits */
      packetlength = 32U;
 800f3d0:	2320      	movs	r3, #32
 800f3d2:	617b      	str	r3, [r7, #20]
    }

    /* I2S standard */
    if (hi2s->Init.Standard <= I2S_STANDARD_LSB)
 800f3d4:	687b      	ldr	r3, [r7, #4]
 800f3d6:	689b      	ldr	r3, [r3, #8]
 800f3d8:	2b20      	cmp	r3, #32
 800f3da:	d802      	bhi.n	800f3e2 <HAL_I2S_Init+0x76>
    {
      /* In I2S standard packet length is multiplied by 2 */
      packetlength = packetlength * 2U;
 800f3dc:	697b      	ldr	r3, [r7, #20]
 800f3de:	005b      	lsls	r3, r3, #1
 800f3e0:	617b      	str	r3, [r7, #20]
    }

    /* Get the source clock value: based on System Clock value */
    i2sclk = HAL_RCC_GetSysClockFreq();
 800f3e2:	f002 fe51 	bl	8012088 <HAL_RCC_GetSysClockFreq>
 800f3e6:	0003      	movs	r3, r0
 800f3e8:	60fb      	str	r3, [r7, #12]

    /* Compute the Real divider depending on the MCLK output state, with a floating point */
    if (hi2s->Init.MCLKOutput == I2S_MCLKOUTPUT_ENABLE)
 800f3ea:	687b      	ldr	r3, [r7, #4]
 800f3ec:	691a      	ldr	r2, [r3, #16]
 800f3ee:	2380      	movs	r3, #128	@ 0x80
 800f3f0:	009b      	lsls	r3, r3, #2
 800f3f2:	429a      	cmp	r2, r3
 800f3f4:	d131      	bne.n	800f45a <HAL_I2S_Init+0xee>
    {
      /* MCLK output is enabled */
      if (hi2s->Init.DataFormat != I2S_DATAFORMAT_16B)
 800f3f6:	687b      	ldr	r3, [r7, #4]
 800f3f8:	68db      	ldr	r3, [r3, #12]
 800f3fa:	2b00      	cmp	r3, #0
 800f3fc:	d016      	beq.n	800f42c <HAL_I2S_Init+0xc0>
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 4U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800f3fe:	697b      	ldr	r3, [r7, #20]
 800f400:	009b      	lsls	r3, r3, #2
 800f402:	0019      	movs	r1, r3
 800f404:	68f8      	ldr	r0, [r7, #12]
 800f406:	f7f0 fecd 	bl	80001a4 <__udivsi3>
 800f40a:	0003      	movs	r3, r0
 800f40c:	001a      	movs	r2, r3
 800f40e:	0013      	movs	r3, r2
 800f410:	009b      	lsls	r3, r3, #2
 800f412:	189b      	adds	r3, r3, r2
 800f414:	005b      	lsls	r3, r3, #1
 800f416:	001a      	movs	r2, r3
 800f418:	687b      	ldr	r3, [r7, #4]
 800f41a:	695b      	ldr	r3, [r3, #20]
 800f41c:	0019      	movs	r1, r3
 800f41e:	0010      	movs	r0, r2
 800f420:	f7f0 fec0 	bl	80001a4 <__udivsi3>
 800f424:	0003      	movs	r3, r0
 800f426:	3305      	adds	r3, #5
 800f428:	613b      	str	r3, [r7, #16]
 800f42a:	e02a      	b.n	800f482 <HAL_I2S_Init+0x116>
      }
      else
      {
        tmp = (uint32_t)(((((i2sclk / (packetlength * 8U)) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800f42c:	697b      	ldr	r3, [r7, #20]
 800f42e:	00db      	lsls	r3, r3, #3
 800f430:	0019      	movs	r1, r3
 800f432:	68f8      	ldr	r0, [r7, #12]
 800f434:	f7f0 feb6 	bl	80001a4 <__udivsi3>
 800f438:	0003      	movs	r3, r0
 800f43a:	001a      	movs	r2, r3
 800f43c:	0013      	movs	r3, r2
 800f43e:	009b      	lsls	r3, r3, #2
 800f440:	189b      	adds	r3, r3, r2
 800f442:	005b      	lsls	r3, r3, #1
 800f444:	001a      	movs	r2, r3
 800f446:	687b      	ldr	r3, [r7, #4]
 800f448:	695b      	ldr	r3, [r3, #20]
 800f44a:	0019      	movs	r1, r3
 800f44c:	0010      	movs	r0, r2
 800f44e:	f7f0 fea9 	bl	80001a4 <__udivsi3>
 800f452:	0003      	movs	r3, r0
 800f454:	3305      	adds	r3, #5
 800f456:	613b      	str	r3, [r7, #16]
 800f458:	e013      	b.n	800f482 <HAL_I2S_Init+0x116>
      }
    }
    else
    {
      /* MCLK output is disabled */
      tmp = (uint32_t)(((((i2sclk / packetlength) * 10U) / hi2s->Init.AudioFreq)) + 5U);
 800f45a:	6979      	ldr	r1, [r7, #20]
 800f45c:	68f8      	ldr	r0, [r7, #12]
 800f45e:	f7f0 fea1 	bl	80001a4 <__udivsi3>
 800f462:	0003      	movs	r3, r0
 800f464:	001a      	movs	r2, r3
 800f466:	0013      	movs	r3, r2
 800f468:	009b      	lsls	r3, r3, #2
 800f46a:	189b      	adds	r3, r3, r2
 800f46c:	005b      	lsls	r3, r3, #1
 800f46e:	001a      	movs	r2, r3
 800f470:	687b      	ldr	r3, [r7, #4]
 800f472:	695b      	ldr	r3, [r3, #20]
 800f474:	0019      	movs	r1, r3
 800f476:	0010      	movs	r0, r2
 800f478:	f7f0 fe94 	bl	80001a4 <__udivsi3>
 800f47c:	0003      	movs	r3, r0
 800f47e:	3305      	adds	r3, #5
 800f480:	613b      	str	r3, [r7, #16]
    }

    /* Remove the flatting point */
    tmp = tmp / 10U;
 800f482:	693b      	ldr	r3, [r7, #16]
 800f484:	210a      	movs	r1, #10
 800f486:	0018      	movs	r0, r3
 800f488:	f7f0 fe8c 	bl	80001a4 <__udivsi3>
 800f48c:	0003      	movs	r3, r0
 800f48e:	613b      	str	r3, [r7, #16]

    /* Check the parity of the divider */
    i2sodd = (uint32_t)(tmp & (uint32_t)1U);
 800f490:	693b      	ldr	r3, [r7, #16]
 800f492:	2201      	movs	r2, #1
 800f494:	4013      	ands	r3, r2
 800f496:	61bb      	str	r3, [r7, #24]

    /* Compute the i2sdiv prescaler */
    i2sdiv = (uint32_t)((tmp - i2sodd) / 2U);
 800f498:	693a      	ldr	r2, [r7, #16]
 800f49a:	69bb      	ldr	r3, [r7, #24]
 800f49c:	1ad3      	subs	r3, r2, r3
 800f49e:	085b      	lsrs	r3, r3, #1
 800f4a0:	61fb      	str	r3, [r7, #28]

    /* Get the Mask for the Odd bit (SPI_I2SPR[8]) register */
    i2sodd = (uint32_t)(i2sodd << 8U);
 800f4a2:	69bb      	ldr	r3, [r7, #24]
 800f4a4:	021b      	lsls	r3, r3, #8
 800f4a6:	61bb      	str	r3, [r7, #24]
 800f4a8:	e003      	b.n	800f4b2 <HAL_I2S_Init+0x146>
  }
  else
  {
    /* Set the default values */
    i2sdiv = 2U;
 800f4aa:	2302      	movs	r3, #2
 800f4ac:	61fb      	str	r3, [r7, #28]
    i2sodd = 0U;
 800f4ae:	2300      	movs	r3, #0
 800f4b0:	61bb      	str	r3, [r7, #24]
  }

  /* Test if the divider is 1 or 0 or greater than 0xFF */
  if ((i2sdiv < 2U) || (i2sdiv > 0xFFU))
 800f4b2:	69fb      	ldr	r3, [r7, #28]
 800f4b4:	2b01      	cmp	r3, #1
 800f4b6:	d902      	bls.n	800f4be <HAL_I2S_Init+0x152>
 800f4b8:	69fb      	ldr	r3, [r7, #28]
 800f4ba:	2bff      	cmp	r3, #255	@ 0xff
 800f4bc:	d907      	bls.n	800f4ce <HAL_I2S_Init+0x162>
  {
    /* Set the error code and execute error callback*/
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_PRESCALER);
 800f4be:	687b      	ldr	r3, [r7, #4]
 800f4c0:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f4c2:	2210      	movs	r2, #16
 800f4c4:	431a      	orrs	r2, r3
 800f4c6:	687b      	ldr	r3, [r7, #4]
 800f4c8:	639a      	str	r2, [r3, #56]	@ 0x38
    return  HAL_ERROR;
 800f4ca:	2301      	movs	r3, #1
 800f4cc:	e039      	b.n	800f542 <HAL_I2S_Init+0x1d6>
  }

  /*----------------------- SPIx I2SCFGR & I2SPR Configuration ----------------*/

  /* Write to SPIx I2SPR register the computed value */
  hi2s->Instance->I2SPR = (uint32_t)((uint32_t)i2sdiv | (uint32_t)(i2sodd | (uint32_t)hi2s->Init.MCLKOutput));
 800f4ce:	687b      	ldr	r3, [r7, #4]
 800f4d0:	691a      	ldr	r2, [r3, #16]
 800f4d2:	69bb      	ldr	r3, [r7, #24]
 800f4d4:	431a      	orrs	r2, r3
 800f4d6:	0011      	movs	r1, r2
 800f4d8:	687b      	ldr	r3, [r7, #4]
 800f4da:	681b      	ldr	r3, [r3, #0]
 800f4dc:	69fa      	ldr	r2, [r7, #28]
 800f4de:	430a      	orrs	r2, r1
 800f4e0:	621a      	str	r2, [r3, #32]

  /* Clear I2SMOD, I2SE, I2SCFG, PCMSYNC, I2SSTD, CKPOL, DATLEN and CHLEN bits */
  /* And configure the I2S with the I2S_InitStruct values                      */
  MODIFY_REG(hi2s->Instance->I2SCFGR, (SPI_I2SCFGR_CHLEN | SPI_I2SCFGR_DATLEN | \
 800f4e2:	687b      	ldr	r3, [r7, #4]
 800f4e4:	681b      	ldr	r3, [r3, #0]
 800f4e6:	69db      	ldr	r3, [r3, #28]
 800f4e8:	4a18      	ldr	r2, [pc, #96]	@ (800f54c <HAL_I2S_Init+0x1e0>)
 800f4ea:	401a      	ands	r2, r3
 800f4ec:	687b      	ldr	r3, [r7, #4]
 800f4ee:	6859      	ldr	r1, [r3, #4]
 800f4f0:	687b      	ldr	r3, [r7, #4]
 800f4f2:	689b      	ldr	r3, [r3, #8]
 800f4f4:	4319      	orrs	r1, r3
 800f4f6:	687b      	ldr	r3, [r7, #4]
 800f4f8:	68db      	ldr	r3, [r3, #12]
 800f4fa:	4319      	orrs	r1, r3
 800f4fc:	687b      	ldr	r3, [r7, #4]
 800f4fe:	699b      	ldr	r3, [r3, #24]
 800f500:	430b      	orrs	r3, r1
 800f502:	431a      	orrs	r2, r3
 800f504:	687b      	ldr	r3, [r7, #4]
 800f506:	681b      	ldr	r3, [r3, #0]
 800f508:	2180      	movs	r1, #128	@ 0x80
 800f50a:	0109      	lsls	r1, r1, #4
 800f50c:	430a      	orrs	r2, r1
 800f50e:	61da      	str	r2, [r3, #28]
             (SPI_I2SCFGR_I2SMOD | hi2s->Init.Mode | \
              hi2s->Init.Standard | hi2s->Init.DataFormat | \
              hi2s->Init.CPOL));

#if defined(SPI_I2SCFGR_ASTRTEN)
  if ((hi2s->Init.Standard == I2S_STANDARD_PCM_SHORT) || ((hi2s->Init.Standard == I2S_STANDARD_PCM_LONG)))
 800f510:	687b      	ldr	r3, [r7, #4]
 800f512:	689b      	ldr	r3, [r3, #8]
 800f514:	2b30      	cmp	r3, #48	@ 0x30
 800f516:	d003      	beq.n	800f520 <HAL_I2S_Init+0x1b4>
 800f518:	687b      	ldr	r3, [r7, #4]
 800f51a:	689b      	ldr	r3, [r3, #8]
 800f51c:	2bb0      	cmp	r3, #176	@ 0xb0
 800f51e:	d108      	bne.n	800f532 <HAL_I2S_Init+0x1c6>
  {
    /* Write to SPIx I2SCFGR */
    SET_BIT(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_ASTRTEN);
 800f520:	687b      	ldr	r3, [r7, #4]
 800f522:	681b      	ldr	r3, [r3, #0]
 800f524:	69da      	ldr	r2, [r3, #28]
 800f526:	687b      	ldr	r3, [r7, #4]
 800f528:	681b      	ldr	r3, [r3, #0]
 800f52a:	2180      	movs	r1, #128	@ 0x80
 800f52c:	0149      	lsls	r1, r1, #5
 800f52e:	430a      	orrs	r2, r1
 800f530:	61da      	str	r2, [r3, #28]
  }
#endif /* SPI_I2SCFGR_ASTRTEN */

  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800f532:	687b      	ldr	r3, [r7, #4]
 800f534:	2200      	movs	r2, #0
 800f536:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->State     = HAL_I2S_STATE_READY;
 800f538:	687b      	ldr	r3, [r7, #4]
 800f53a:	2235      	movs	r2, #53	@ 0x35
 800f53c:	2101      	movs	r1, #1
 800f53e:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 800f540:	2300      	movs	r3, #0
}
 800f542:	0018      	movs	r0, r3
 800f544:	46bd      	mov	sp, r7
 800f546:	b008      	add	sp, #32
 800f548:	bd80      	pop	{r7, pc}
 800f54a:	46c0      	nop			@ (mov r8, r8)
 800f54c:	fffff040 	.word	0xfffff040

0800f550 <HAL_I2S_Receive_DMA>:
  * @note   The I2S is kept enabled at the end of transaction to avoid the clock de-synchronization
  *         between Master and Slave(example: audio streaming).
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_Receive_DMA(I2S_HandleTypeDef *hi2s, uint16_t *pData, uint16_t Size)
{
 800f550:	b580      	push	{r7, lr}
 800f552:	b086      	sub	sp, #24
 800f554:	af00      	add	r7, sp, #0
 800f556:	60f8      	str	r0, [r7, #12]
 800f558:	60b9      	str	r1, [r7, #8]
 800f55a:	1dbb      	adds	r3, r7, #6
 800f55c:	801a      	strh	r2, [r3, #0]
  uint32_t tmpreg_cfgr;

  if ((pData == NULL) || (Size == 0U))
 800f55e:	68bb      	ldr	r3, [r7, #8]
 800f560:	2b00      	cmp	r3, #0
 800f562:	d003      	beq.n	800f56c <HAL_I2S_Receive_DMA+0x1c>
 800f564:	1dbb      	adds	r3, r7, #6
 800f566:	881b      	ldrh	r3, [r3, #0]
 800f568:	2b00      	cmp	r3, #0
 800f56a:	d101      	bne.n	800f570 <HAL_I2S_Receive_DMA+0x20>
  {
    return  HAL_ERROR;
 800f56c:	2301      	movs	r3, #1
 800f56e:	e0a6      	b.n	800f6be <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Process Locked */
  __HAL_LOCK(hi2s);
 800f570:	68fb      	ldr	r3, [r7, #12]
 800f572:	2234      	movs	r2, #52	@ 0x34
 800f574:	5c9b      	ldrb	r3, [r3, r2]
 800f576:	b2db      	uxtb	r3, r3
 800f578:	2b01      	cmp	r3, #1
 800f57a:	d101      	bne.n	800f580 <HAL_I2S_Receive_DMA+0x30>
 800f57c:	2302      	movs	r3, #2
 800f57e:	e09e      	b.n	800f6be <HAL_I2S_Receive_DMA+0x16e>
 800f580:	68fb      	ldr	r3, [r7, #12]
 800f582:	2234      	movs	r2, #52	@ 0x34
 800f584:	2101      	movs	r1, #1
 800f586:	5499      	strb	r1, [r3, r2]

  if (hi2s->State != HAL_I2S_STATE_READY)
 800f588:	68fb      	ldr	r3, [r7, #12]
 800f58a:	2235      	movs	r2, #53	@ 0x35
 800f58c:	5c9b      	ldrb	r3, [r3, r2]
 800f58e:	b2db      	uxtb	r3, r3
 800f590:	2b01      	cmp	r3, #1
 800f592:	d005      	beq.n	800f5a0 <HAL_I2S_Receive_DMA+0x50>
  {
    __HAL_UNLOCK(hi2s);
 800f594:	68fb      	ldr	r3, [r7, #12]
 800f596:	2234      	movs	r2, #52	@ 0x34
 800f598:	2100      	movs	r1, #0
 800f59a:	5499      	strb	r1, [r3, r2]
    return HAL_BUSY;
 800f59c:	2302      	movs	r3, #2
 800f59e:	e08e      	b.n	800f6be <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Set state and reset error code */
  hi2s->State = HAL_I2S_STATE_BUSY_RX;
 800f5a0:	68fb      	ldr	r3, [r7, #12]
 800f5a2:	2235      	movs	r2, #53	@ 0x35
 800f5a4:	2104      	movs	r1, #4
 800f5a6:	5499      	strb	r1, [r3, r2]
  hi2s->ErrorCode = HAL_I2S_ERROR_NONE;
 800f5a8:	68fb      	ldr	r3, [r7, #12]
 800f5aa:	2200      	movs	r2, #0
 800f5ac:	639a      	str	r2, [r3, #56]	@ 0x38
  hi2s->pRxBuffPtr = pData;
 800f5ae:	68fb      	ldr	r3, [r7, #12]
 800f5b0:	68ba      	ldr	r2, [r7, #8]
 800f5b2:	625a      	str	r2, [r3, #36]	@ 0x24

  tmpreg_cfgr = hi2s->Instance->I2SCFGR & (SPI_I2SCFGR_DATLEN | SPI_I2SCFGR_CHLEN);
 800f5b4:	68fb      	ldr	r3, [r7, #12]
 800f5b6:	681b      	ldr	r3, [r3, #0]
 800f5b8:	69db      	ldr	r3, [r3, #28]
 800f5ba:	2207      	movs	r2, #7
 800f5bc:	4013      	ands	r3, r2
 800f5be:	617b      	str	r3, [r7, #20]

  if ((tmpreg_cfgr == I2S_DATAFORMAT_24B) || (tmpreg_cfgr == I2S_DATAFORMAT_32B))
 800f5c0:	697b      	ldr	r3, [r7, #20]
 800f5c2:	2b03      	cmp	r3, #3
 800f5c4:	d002      	beq.n	800f5cc <HAL_I2S_Receive_DMA+0x7c>
 800f5c6:	697b      	ldr	r3, [r7, #20]
 800f5c8:	2b05      	cmp	r3, #5
 800f5ca:	d10c      	bne.n	800f5e6 <HAL_I2S_Receive_DMA+0x96>
  {
    hi2s->RxXferSize = (Size << 1U);
 800f5cc:	1dbb      	adds	r3, r7, #6
 800f5ce:	881b      	ldrh	r3, [r3, #0]
 800f5d0:	18db      	adds	r3, r3, r3
 800f5d2:	b29a      	uxth	r2, r3
 800f5d4:	68fb      	ldr	r3, [r7, #12]
 800f5d6:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = (Size << 1U);
 800f5d8:	1dbb      	adds	r3, r7, #6
 800f5da:	881b      	ldrh	r3, [r3, #0]
 800f5dc:	18db      	adds	r3, r3, r3
 800f5de:	b29a      	uxth	r2, r3
 800f5e0:	68fb      	ldr	r3, [r7, #12]
 800f5e2:	855a      	strh	r2, [r3, #42]	@ 0x2a
 800f5e4:	e007      	b.n	800f5f6 <HAL_I2S_Receive_DMA+0xa6>
  }
  else
  {
    hi2s->RxXferSize = Size;
 800f5e6:	68fb      	ldr	r3, [r7, #12]
 800f5e8:	1dba      	adds	r2, r7, #6
 800f5ea:	8812      	ldrh	r2, [r2, #0]
 800f5ec:	851a      	strh	r2, [r3, #40]	@ 0x28
    hi2s->RxXferCount = Size;
 800f5ee:	68fb      	ldr	r3, [r7, #12]
 800f5f0:	1dba      	adds	r2, r7, #6
 800f5f2:	8812      	ldrh	r2, [r2, #0]
 800f5f4:	855a      	strh	r2, [r3, #42]	@ 0x2a
  }

  /* Set the I2S Rx DMA Half transfer complete callback */
  hi2s->hdmarx->XferHalfCpltCallback = I2S_DMARxHalfCplt;
 800f5f6:	68fb      	ldr	r3, [r7, #12]
 800f5f8:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f5fa:	4a33      	ldr	r2, [pc, #204]	@ (800f6c8 <HAL_I2S_Receive_DMA+0x178>)
 800f5fc:	631a      	str	r2, [r3, #48]	@ 0x30

  /* Set the I2S Rx DMA transfer complete callback */
  hi2s->hdmarx->XferCpltCallback = I2S_DMARxCplt;
 800f5fe:	68fb      	ldr	r3, [r7, #12]
 800f600:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f602:	4a32      	ldr	r2, [pc, #200]	@ (800f6cc <HAL_I2S_Receive_DMA+0x17c>)
 800f604:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the DMA error callback */
  hi2s->hdmarx->XferErrorCallback = I2S_DMAError;
 800f606:	68fb      	ldr	r3, [r7, #12]
 800f608:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f60a:	4a31      	ldr	r2, [pc, #196]	@ (800f6d0 <HAL_I2S_Receive_DMA+0x180>)
 800f60c:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Check if Master Receiver mode is selected */
  if ((hi2s->Instance->I2SCFGR & SPI_I2SCFGR_I2SCFG) == I2S_MODE_MASTER_RX)
 800f60e:	68fb      	ldr	r3, [r7, #12]
 800f610:	681b      	ldr	r3, [r3, #0]
 800f612:	69da      	ldr	r2, [r3, #28]
 800f614:	23c0      	movs	r3, #192	@ 0xc0
 800f616:	009b      	lsls	r3, r3, #2
 800f618:	401a      	ands	r2, r3
 800f61a:	23c0      	movs	r3, #192	@ 0xc0
 800f61c:	009b      	lsls	r3, r3, #2
 800f61e:	429a      	cmp	r2, r3
 800f620:	d10a      	bne.n	800f638 <HAL_I2S_Receive_DMA+0xe8>
  {
    /* Clear the Overrun Flag by a read operation to the SPI_DR register followed by a read
    access to the SPI_SR register. */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800f622:	2300      	movs	r3, #0
 800f624:	613b      	str	r3, [r7, #16]
 800f626:	68fb      	ldr	r3, [r7, #12]
 800f628:	681b      	ldr	r3, [r3, #0]
 800f62a:	68db      	ldr	r3, [r3, #12]
 800f62c:	613b      	str	r3, [r7, #16]
 800f62e:	68fb      	ldr	r3, [r7, #12]
 800f630:	681b      	ldr	r3, [r3, #0]
 800f632:	689b      	ldr	r3, [r3, #8]
 800f634:	613b      	str	r3, [r7, #16]
 800f636:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the Rx DMA Stream/Channel */
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800f638:	68fb      	ldr	r3, [r7, #12]
 800f63a:	6b18      	ldr	r0, [r3, #48]	@ 0x30
 800f63c:	68fb      	ldr	r3, [r7, #12]
 800f63e:	681b      	ldr	r3, [r3, #0]
 800f640:	330c      	adds	r3, #12
 800f642:	0019      	movs	r1, r3
 800f644:	68fb      	ldr	r3, [r7, #12]
 800f646:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 800f648:	001a      	movs	r2, r3
                                 hi2s->RxXferSize))
 800f64a:	68fb      	ldr	r3, [r7, #12]
 800f64c:	8d1b      	ldrh	r3, [r3, #40]	@ 0x28
 800f64e:	b29b      	uxth	r3, r3
  if (HAL_OK != HAL_DMA_Start_IT(hi2s->hdmarx, (uint32_t)&hi2s->Instance->DR, (uint32_t)hi2s->pRxBuffPtr,
 800f650:	f7fd f920 	bl	800c894 <HAL_DMA_Start_IT>
 800f654:	1e03      	subs	r3, r0, #0
 800f656:	d00f      	beq.n	800f678 <HAL_I2S_Receive_DMA+0x128>
  {
    /* Update SPI error code */
    SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800f658:	68fb      	ldr	r3, [r7, #12]
 800f65a:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f65c:	2208      	movs	r2, #8
 800f65e:	431a      	orrs	r2, r3
 800f660:	68fb      	ldr	r3, [r7, #12]
 800f662:	639a      	str	r2, [r3, #56]	@ 0x38
    hi2s->State = HAL_I2S_STATE_READY;
 800f664:	68fb      	ldr	r3, [r7, #12]
 800f666:	2235      	movs	r2, #53	@ 0x35
 800f668:	2101      	movs	r1, #1
 800f66a:	5499      	strb	r1, [r3, r2]

    __HAL_UNLOCK(hi2s);
 800f66c:	68fb      	ldr	r3, [r7, #12]
 800f66e:	2234      	movs	r2, #52	@ 0x34
 800f670:	2100      	movs	r1, #0
 800f672:	5499      	strb	r1, [r3, r2]
    return HAL_ERROR;
 800f674:	2301      	movs	r3, #1
 800f676:	e022      	b.n	800f6be <HAL_I2S_Receive_DMA+0x16e>
  }

  /* Check if the I2S is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->I2SCFGR, SPI_I2SCFGR_I2SE))
 800f678:	68fb      	ldr	r3, [r7, #12]
 800f67a:	681b      	ldr	r3, [r3, #0]
 800f67c:	69da      	ldr	r2, [r3, #28]
 800f67e:	2380      	movs	r3, #128	@ 0x80
 800f680:	00db      	lsls	r3, r3, #3
 800f682:	4013      	ands	r3, r2
 800f684:	d108      	bne.n	800f698 <HAL_I2S_Receive_DMA+0x148>
  {
    /* Enable I2S peripheral */
    __HAL_I2S_ENABLE(hi2s);
 800f686:	68fb      	ldr	r3, [r7, #12]
 800f688:	681b      	ldr	r3, [r3, #0]
 800f68a:	69da      	ldr	r2, [r3, #28]
 800f68c:	68fb      	ldr	r3, [r7, #12]
 800f68e:	681b      	ldr	r3, [r3, #0]
 800f690:	2180      	movs	r1, #128	@ 0x80
 800f692:	00c9      	lsls	r1, r1, #3
 800f694:	430a      	orrs	r2, r1
 800f696:	61da      	str	r2, [r3, #28]
  }

  /* Check if the I2S Rx request is already enabled */
  if (HAL_IS_BIT_CLR(hi2s->Instance->CR2, SPI_CR2_RXDMAEN))
 800f698:	68fb      	ldr	r3, [r7, #12]
 800f69a:	681b      	ldr	r3, [r3, #0]
 800f69c:	685b      	ldr	r3, [r3, #4]
 800f69e:	2201      	movs	r2, #1
 800f6a0:	4013      	ands	r3, r2
 800f6a2:	d107      	bne.n	800f6b4 <HAL_I2S_Receive_DMA+0x164>
  {
    /* Enable Rx DMA Request */
    SET_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800f6a4:	68fb      	ldr	r3, [r7, #12]
 800f6a6:	681b      	ldr	r3, [r3, #0]
 800f6a8:	685a      	ldr	r2, [r3, #4]
 800f6aa:	68fb      	ldr	r3, [r7, #12]
 800f6ac:	681b      	ldr	r3, [r3, #0]
 800f6ae:	2101      	movs	r1, #1
 800f6b0:	430a      	orrs	r2, r1
 800f6b2:	605a      	str	r2, [r3, #4]
  }

  __HAL_UNLOCK(hi2s);
 800f6b4:	68fb      	ldr	r3, [r7, #12]
 800f6b6:	2234      	movs	r2, #52	@ 0x34
 800f6b8:	2100      	movs	r1, #0
 800f6ba:	5499      	strb	r1, [r3, r2]
  return HAL_OK;
 800f6bc:	2300      	movs	r3, #0
}
 800f6be:	0018      	movs	r0, r3
 800f6c0:	46bd      	mov	sp, r7
 800f6c2:	b006      	add	sp, #24
 800f6c4:	bd80      	pop	{r7, pc}
 800f6c6:	46c0      	nop			@ (mov r8, r8)
 800f6c8:	0800f8b1 	.word	0x0800f8b1
 800f6cc:	0800f86d 	.word	0x0800f86d
 800f6d0:	0800f8cf 	.word	0x0800f8cf

0800f6d4 <HAL_I2S_DMAStop>:
  * @param  hi2s pointer to a I2S_HandleTypeDef structure that contains
  *         the configuration information for I2S module
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2S_DMAStop(I2S_HandleTypeDef *hi2s)
{
 800f6d4:	b580      	push	{r7, lr}
 800f6d6:	b086      	sub	sp, #24
 800f6d8:	af00      	add	r7, sp, #0
 800f6da:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef errorcode = HAL_OK;
 800f6dc:	2317      	movs	r3, #23
 800f6de:	18fb      	adds	r3, r7, r3
 800f6e0:	2200      	movs	r2, #0
 800f6e2:	701a      	strb	r2, [r3, #0]
     to call the HAL SPI API under callbacks HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     when calling HAL_DMA_Abort() API the DMA TX or RX Transfer complete interrupt is generated
     and the correspond call back is executed HAL_I2S_TxCpltCallback() or HAL_I2S_RxCpltCallback()
     */

  if ((hi2s->Init.Mode == I2S_MODE_MASTER_TX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_TX))
 800f6e4:	687b      	ldr	r3, [r7, #4]
 800f6e6:	685a      	ldr	r2, [r3, #4]
 800f6e8:	2380      	movs	r3, #128	@ 0x80
 800f6ea:	009b      	lsls	r3, r3, #2
 800f6ec:	429a      	cmp	r2, r3
 800f6ee:	d003      	beq.n	800f6f8 <HAL_I2S_DMAStop+0x24>
 800f6f0:	687b      	ldr	r3, [r7, #4]
 800f6f2:	685b      	ldr	r3, [r3, #4]
 800f6f4:	2b00      	cmp	r3, #0
 800f6f6:	d158      	bne.n	800f7aa <HAL_I2S_DMAStop+0xd6>
  {
    /* Abort the I2S DMA tx Stream/Channel */
    if (hi2s->hdmatx != NULL)
 800f6f8:	687b      	ldr	r3, [r7, #4]
 800f6fa:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f6fc:	2b00      	cmp	r3, #0
 800f6fe:	d010      	beq.n	800f722 <HAL_I2S_DMAStop+0x4e>
    {
      /* Disable the I2S DMA tx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmatx))
 800f700:	687b      	ldr	r3, [r7, #4]
 800f702:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 800f704:	0018      	movs	r0, r3
 800f706:	f7fd f92b 	bl	800c960 <HAL_DMA_Abort>
 800f70a:	1e03      	subs	r3, r0, #0
 800f70c:	d009      	beq.n	800f722 <HAL_I2S_DMAStop+0x4e>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800f70e:	687b      	ldr	r3, [r7, #4]
 800f710:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f712:	2208      	movs	r2, #8
 800f714:	431a      	orrs	r2, r3
 800f716:	687b      	ldr	r3, [r7, #4]
 800f718:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 800f71a:	2317      	movs	r3, #23
 800f71c:	18fb      	adds	r3, r7, r3
 800f71e:	2201      	movs	r2, #1
 800f720:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Wait until TXE flag is set */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_TXE, SET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800f722:	6878      	ldr	r0, [r7, #4]
 800f724:	2364      	movs	r3, #100	@ 0x64
 800f726:	2201      	movs	r2, #1
 800f728:	2102      	movs	r1, #2
 800f72a:	f000 f8f7 	bl	800f91c <I2S_WaitFlagStateUntilTimeout>
 800f72e:	1e03      	subs	r3, r0, #0
 800f730:	d00d      	beq.n	800f74e <HAL_I2S_DMAStop+0x7a>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800f732:	687b      	ldr	r3, [r7, #4]
 800f734:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f736:	2201      	movs	r2, #1
 800f738:	431a      	orrs	r2, r3
 800f73a:	687b      	ldr	r3, [r7, #4]
 800f73c:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 800f73e:	687b      	ldr	r3, [r7, #4]
 800f740:	2235      	movs	r2, #53	@ 0x35
 800f742:	2101      	movs	r1, #1
 800f744:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 800f746:	2317      	movs	r3, #23
 800f748:	18fb      	adds	r3, r7, r3
 800f74a:	2201      	movs	r2, #1
 800f74c:	701a      	strb	r2, [r3, #0]
    }

    /* Wait until BSY flag is Reset */
    if (I2S_WaitFlagStateUntilTimeout(hi2s, I2S_FLAG_BSY, RESET, I2S_TIMEOUT_FLAG) != HAL_OK)
 800f74e:	6878      	ldr	r0, [r7, #4]
 800f750:	2364      	movs	r3, #100	@ 0x64
 800f752:	2200      	movs	r2, #0
 800f754:	2180      	movs	r1, #128	@ 0x80
 800f756:	f000 f8e1 	bl	800f91c <I2S_WaitFlagStateUntilTimeout>
 800f75a:	1e03      	subs	r3, r0, #0
 800f75c:	d00d      	beq.n	800f77a <HAL_I2S_DMAStop+0xa6>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_TIMEOUT);
 800f75e:	687b      	ldr	r3, [r7, #4]
 800f760:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f762:	2201      	movs	r2, #1
 800f764:	431a      	orrs	r2, r3
 800f766:	687b      	ldr	r3, [r7, #4]
 800f768:	639a      	str	r2, [r3, #56]	@ 0x38
      hi2s->State = HAL_I2S_STATE_READY;
 800f76a:	687b      	ldr	r3, [r7, #4]
 800f76c:	2235      	movs	r2, #53	@ 0x35
 800f76e:	2101      	movs	r1, #1
 800f770:	5499      	strb	r1, [r3, r2]
      errorcode   = HAL_ERROR;
 800f772:	2317      	movs	r3, #23
 800f774:	18fb      	adds	r3, r7, r3
 800f776:	2201      	movs	r2, #1
 800f778:	701a      	strb	r2, [r3, #0]
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800f77a:	687b      	ldr	r3, [r7, #4]
 800f77c:	681b      	ldr	r3, [r3, #0]
 800f77e:	69da      	ldr	r2, [r3, #28]
 800f780:	687b      	ldr	r3, [r7, #4]
 800f782:	681b      	ldr	r3, [r3, #0]
 800f784:	4938      	ldr	r1, [pc, #224]	@ (800f868 <HAL_I2S_DMAStop+0x194>)
 800f786:	400a      	ands	r2, r1
 800f788:	61da      	str	r2, [r3, #28]

    /* Clear UDR flag */
    __HAL_I2S_CLEAR_UDRFLAG(hi2s);
 800f78a:	2300      	movs	r3, #0
 800f78c:	613b      	str	r3, [r7, #16]
 800f78e:	687b      	ldr	r3, [r7, #4]
 800f790:	681b      	ldr	r3, [r3, #0]
 800f792:	689b      	ldr	r3, [r3, #8]
 800f794:	613b      	str	r3, [r7, #16]
 800f796:	693b      	ldr	r3, [r7, #16]

    /* Disable the I2S Tx DMA requests */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_TXDMAEN);
 800f798:	687b      	ldr	r3, [r7, #4]
 800f79a:	681b      	ldr	r3, [r3, #0]
 800f79c:	685a      	ldr	r2, [r3, #4]
 800f79e:	687b      	ldr	r3, [r7, #4]
 800f7a0:	681b      	ldr	r3, [r3, #0]
 800f7a2:	2102      	movs	r1, #2
 800f7a4:	438a      	bics	r2, r1
 800f7a6:	605a      	str	r2, [r3, #4]
 800f7a8:	e053      	b.n	800f852 <HAL_I2S_DMAStop+0x17e>

  }

  else if ((hi2s->Init.Mode == I2S_MODE_MASTER_RX) || (hi2s->Init.Mode == I2S_MODE_SLAVE_RX))
 800f7aa:	687b      	ldr	r3, [r7, #4]
 800f7ac:	685a      	ldr	r2, [r3, #4]
 800f7ae:	23c0      	movs	r3, #192	@ 0xc0
 800f7b0:	009b      	lsls	r3, r3, #2
 800f7b2:	429a      	cmp	r2, r3
 800f7b4:	d005      	beq.n	800f7c2 <HAL_I2S_DMAStop+0xee>
 800f7b6:	687b      	ldr	r3, [r7, #4]
 800f7b8:	685a      	ldr	r2, [r3, #4]
 800f7ba:	2380      	movs	r3, #128	@ 0x80
 800f7bc:	005b      	lsls	r3, r3, #1
 800f7be:	429a      	cmp	r2, r3
 800f7c0:	d147      	bne.n	800f852 <HAL_I2S_DMAStop+0x17e>
  {
    /* Abort the I2S DMA rx Stream/Channel */
    if (hi2s->hdmarx != NULL)
 800f7c2:	687b      	ldr	r3, [r7, #4]
 800f7c4:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f7c6:	2b00      	cmp	r3, #0
 800f7c8:	d010      	beq.n	800f7ec <HAL_I2S_DMAStop+0x118>
    {
      /* Disable the I2S DMA rx Stream/Channel */
      if (HAL_OK != HAL_DMA_Abort(hi2s->hdmarx))
 800f7ca:	687b      	ldr	r3, [r7, #4]
 800f7cc:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 800f7ce:	0018      	movs	r0, r3
 800f7d0:	f7fd f8c6 	bl	800c960 <HAL_DMA_Abort>
 800f7d4:	1e03      	subs	r3, r0, #0
 800f7d6:	d009      	beq.n	800f7ec <HAL_I2S_DMAStop+0x118>
      {
        SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800f7d8:	687b      	ldr	r3, [r7, #4]
 800f7da:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f7dc:	2208      	movs	r2, #8
 800f7de:	431a      	orrs	r2, r3
 800f7e0:	687b      	ldr	r3, [r7, #4]
 800f7e2:	639a      	str	r2, [r3, #56]	@ 0x38
        errorcode = HAL_ERROR;
 800f7e4:	2317      	movs	r3, #23
 800f7e6:	18fb      	adds	r3, r7, r3
 800f7e8:	2201      	movs	r2, #1
 800f7ea:	701a      	strb	r2, [r3, #0]
      }
    }

    /* Disable I2S peripheral */
    __HAL_I2S_DISABLE(hi2s);
 800f7ec:	687b      	ldr	r3, [r7, #4]
 800f7ee:	681b      	ldr	r3, [r3, #0]
 800f7f0:	69da      	ldr	r2, [r3, #28]
 800f7f2:	687b      	ldr	r3, [r7, #4]
 800f7f4:	681b      	ldr	r3, [r3, #0]
 800f7f6:	491c      	ldr	r1, [pc, #112]	@ (800f868 <HAL_I2S_DMAStop+0x194>)
 800f7f8:	400a      	ands	r2, r1
 800f7fa:	61da      	str	r2, [r3, #28]

    /* Clear OVR flag */
    __HAL_I2S_CLEAR_OVRFLAG(hi2s);
 800f7fc:	2300      	movs	r3, #0
 800f7fe:	60fb      	str	r3, [r7, #12]
 800f800:	687b      	ldr	r3, [r7, #4]
 800f802:	681b      	ldr	r3, [r3, #0]
 800f804:	68db      	ldr	r3, [r3, #12]
 800f806:	60fb      	str	r3, [r7, #12]
 800f808:	687b      	ldr	r3, [r7, #4]
 800f80a:	681b      	ldr	r3, [r3, #0]
 800f80c:	689b      	ldr	r3, [r3, #8]
 800f80e:	60fb      	str	r3, [r7, #12]
 800f810:	68fb      	ldr	r3, [r7, #12]

    /* Disable the I2S Rx DMA request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800f812:	687b      	ldr	r3, [r7, #4]
 800f814:	681b      	ldr	r3, [r3, #0]
 800f816:	685a      	ldr	r2, [r3, #4]
 800f818:	687b      	ldr	r3, [r7, #4]
 800f81a:	681b      	ldr	r3, [r3, #0]
 800f81c:	2101      	movs	r1, #1
 800f81e:	438a      	bics	r2, r1
 800f820:	605a      	str	r2, [r3, #4]

    if (hi2s->Init.Mode == I2S_MODE_SLAVE_RX)
 800f822:	687b      	ldr	r3, [r7, #4]
 800f824:	685a      	ldr	r2, [r3, #4]
 800f826:	2380      	movs	r3, #128	@ 0x80
 800f828:	005b      	lsls	r3, r3, #1
 800f82a:	429a      	cmp	r2, r3
 800f82c:	d10e      	bne.n	800f84c <HAL_I2S_DMAStop+0x178>
    {
      /* Set the error code */
      SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_BUSY_LINE_RX);
 800f82e:	687b      	ldr	r3, [r7, #4]
 800f830:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f832:	2240      	movs	r2, #64	@ 0x40
 800f834:	431a      	orrs	r2, r3
 800f836:	687b      	ldr	r3, [r7, #4]
 800f838:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Set the I2S State ready */
      hi2s->State = HAL_I2S_STATE_READY;
 800f83a:	687b      	ldr	r3, [r7, #4]
 800f83c:	2235      	movs	r2, #53	@ 0x35
 800f83e:	2101      	movs	r1, #1
 800f840:	5499      	strb	r1, [r3, r2]
      errorcode = HAL_ERROR;
 800f842:	2317      	movs	r3, #23
 800f844:	18fb      	adds	r3, r7, r3
 800f846:	2201      	movs	r2, #1
 800f848:	701a      	strb	r2, [r3, #0]
 800f84a:	e002      	b.n	800f852 <HAL_I2S_DMAStop+0x17e>
    }
    else
    {
      /* Read DR to Flush RX Data */
      READ_REG((hi2s->Instance)->DR);
 800f84c:	687b      	ldr	r3, [r7, #4]
 800f84e:	681b      	ldr	r3, [r3, #0]
 800f850:	68db      	ldr	r3, [r3, #12]
    }
  }

  hi2s->State = HAL_I2S_STATE_READY;
 800f852:	687b      	ldr	r3, [r7, #4]
 800f854:	2235      	movs	r2, #53	@ 0x35
 800f856:	2101      	movs	r1, #1
 800f858:	5499      	strb	r1, [r3, r2]

  return errorcode;
 800f85a:	2317      	movs	r3, #23
 800f85c:	18fb      	adds	r3, r7, r3
 800f85e:	781b      	ldrb	r3, [r3, #0]
}
 800f860:	0018      	movs	r0, r3
 800f862:	46bd      	mov	sp, r7
 800f864:	b006      	add	sp, #24
 800f866:	bd80      	pop	{r7, pc}
 800f868:	fffffbff 	.word	0xfffffbff

0800f86c <I2S_DMARxCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxCplt(DMA_HandleTypeDef *hdma)
{
 800f86c:	b580      	push	{r7, lr}
 800f86e:	b084      	sub	sp, #16
 800f870:	af00      	add	r7, sp, #0
 800f872:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800f874:	687b      	ldr	r3, [r7, #4]
 800f876:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f878:	60fb      	str	r3, [r7, #12]

  /* if DMA is configured in DMA_NORMAL Mode */
  if (hdma->Init.Mode == DMA_NORMAL)
 800f87a:	687b      	ldr	r3, [r7, #4]
 800f87c:	69db      	ldr	r3, [r3, #28]
 800f87e:	2b00      	cmp	r3, #0
 800f880:	d10e      	bne.n	800f8a0 <I2S_DMARxCplt+0x34>
  {
    /* Disable Rx DMA Request */
    CLEAR_BIT(hi2s->Instance->CR2, SPI_CR2_RXDMAEN);
 800f882:	68fb      	ldr	r3, [r7, #12]
 800f884:	681b      	ldr	r3, [r3, #0]
 800f886:	685a      	ldr	r2, [r3, #4]
 800f888:	68fb      	ldr	r3, [r7, #12]
 800f88a:	681b      	ldr	r3, [r3, #0]
 800f88c:	2101      	movs	r1, #1
 800f88e:	438a      	bics	r2, r1
 800f890:	605a      	str	r2, [r3, #4]
    hi2s->RxXferCount = 0U;
 800f892:	68fb      	ldr	r3, [r7, #12]
 800f894:	2200      	movs	r2, #0
 800f896:	855a      	strh	r2, [r3, #42]	@ 0x2a
    hi2s->State = HAL_I2S_STATE_READY;
 800f898:	68fb      	ldr	r3, [r7, #12]
 800f89a:	2235      	movs	r2, #53	@ 0x35
 800f89c:	2101      	movs	r1, #1
 800f89e:	5499      	strb	r1, [r3, r2]
  }
  /* Call user Rx complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxCpltCallback(hi2s);
#else
  HAL_I2S_RxCpltCallback(hi2s);
 800f8a0:	68fb      	ldr	r3, [r7, #12]
 800f8a2:	0018      	movs	r0, r3
 800f8a4:	f7fa f9c0 	bl	8009c28 <HAL_I2S_RxCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800f8a8:	46c0      	nop			@ (mov r8, r8)
 800f8aa:	46bd      	mov	sp, r7
 800f8ac:	b004      	add	sp, #16
 800f8ae:	bd80      	pop	{r7, pc}

0800f8b0 <I2S_DMARxHalfCplt>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 800f8b0:	b580      	push	{r7, lr}
 800f8b2:	b084      	sub	sp, #16
 800f8b4:	af00      	add	r7, sp, #0
 800f8b6:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800f8b8:	687b      	ldr	r3, [r7, #4]
 800f8ba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f8bc:	60fb      	str	r3, [r7, #12]

  /* Call user Rx half complete callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->RxHalfCpltCallback(hi2s);
#else
  HAL_I2S_RxHalfCpltCallback(hi2s);
 800f8be:	68fb      	ldr	r3, [r7, #12]
 800f8c0:	0018      	movs	r0, r3
 800f8c2:	f7fa f99f 	bl	8009c04 <HAL_I2S_RxHalfCpltCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800f8c6:	46c0      	nop			@ (mov r8, r8)
 800f8c8:	46bd      	mov	sp, r7
 800f8ca:	b004      	add	sp, #16
 800f8cc:	bd80      	pop	{r7, pc}

0800f8ce <I2S_DMAError>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *                the configuration information for the specified DMA module.
  * @retval None
  */
static void I2S_DMAError(DMA_HandleTypeDef *hdma)
{
 800f8ce:	b580      	push	{r7, lr}
 800f8d0:	b084      	sub	sp, #16
 800f8d2:	af00      	add	r7, sp, #0
 800f8d4:	6078      	str	r0, [r7, #4]
  I2S_HandleTypeDef *hi2s = (I2S_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 800f8d6:	687b      	ldr	r3, [r7, #4]
 800f8d8:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 800f8da:	60fb      	str	r3, [r7, #12]

  /* Disable Rx and Tx DMA Request */
  CLEAR_BIT(hi2s->Instance->CR2, (SPI_CR2_RXDMAEN | SPI_CR2_TXDMAEN));
 800f8dc:	68fb      	ldr	r3, [r7, #12]
 800f8de:	681b      	ldr	r3, [r3, #0]
 800f8e0:	685a      	ldr	r2, [r3, #4]
 800f8e2:	68fb      	ldr	r3, [r7, #12]
 800f8e4:	681b      	ldr	r3, [r3, #0]
 800f8e6:	2103      	movs	r1, #3
 800f8e8:	438a      	bics	r2, r1
 800f8ea:	605a      	str	r2, [r3, #4]
  hi2s->TxXferCount = 0U;
 800f8ec:	68fb      	ldr	r3, [r7, #12]
 800f8ee:	2200      	movs	r2, #0
 800f8f0:	845a      	strh	r2, [r3, #34]	@ 0x22
  hi2s->RxXferCount = 0U;
 800f8f2:	68fb      	ldr	r3, [r7, #12]
 800f8f4:	2200      	movs	r2, #0
 800f8f6:	855a      	strh	r2, [r3, #42]	@ 0x2a

  hi2s->State = HAL_I2S_STATE_READY;
 800f8f8:	68fb      	ldr	r3, [r7, #12]
 800f8fa:	2235      	movs	r2, #53	@ 0x35
 800f8fc:	2101      	movs	r1, #1
 800f8fe:	5499      	strb	r1, [r3, r2]

  /* Set the error code and execute error callback*/
  SET_BIT(hi2s->ErrorCode, HAL_I2S_ERROR_DMA);
 800f900:	68fb      	ldr	r3, [r7, #12]
 800f902:	6b9b      	ldr	r3, [r3, #56]	@ 0x38
 800f904:	2208      	movs	r2, #8
 800f906:	431a      	orrs	r2, r3
 800f908:	68fb      	ldr	r3, [r7, #12]
 800f90a:	639a      	str	r2, [r3, #56]	@ 0x38
  /* Call user error callback */
#if (USE_HAL_I2S_REGISTER_CALLBACKS == 1U)
  hi2s->ErrorCallback(hi2s);
#else
  HAL_I2S_ErrorCallback(hi2s);
 800f90c:	68fb      	ldr	r3, [r7, #12]
 800f90e:	0018      	movs	r0, r3
 800f910:	f7fa f9d8 	bl	8009cc4 <HAL_I2S_ErrorCallback>
#endif /* USE_HAL_I2S_REGISTER_CALLBACKS */
}
 800f914:	46c0      	nop			@ (mov r8, r8)
 800f916:	46bd      	mov	sp, r7
 800f918:	b004      	add	sp, #16
 800f91a:	bd80      	pop	{r7, pc}

0800f91c <I2S_WaitFlagStateUntilTimeout>:
  * @param  Timeout Duration of the timeout
  * @retval HAL status
  */
static HAL_StatusTypeDef I2S_WaitFlagStateUntilTimeout(I2S_HandleTypeDef *hi2s, uint32_t Flag, FlagStatus State,
                                                       uint32_t Timeout)
{
 800f91c:	b580      	push	{r7, lr}
 800f91e:	b086      	sub	sp, #24
 800f920:	af00      	add	r7, sp, #0
 800f922:	60f8      	str	r0, [r7, #12]
 800f924:	60b9      	str	r1, [r7, #8]
 800f926:	603b      	str	r3, [r7, #0]
 800f928:	1dfb      	adds	r3, r7, #7
 800f92a:	701a      	strb	r2, [r3, #0]
  uint32_t tickstart;

  /* Get tick */
  tickstart = HAL_GetTick();
 800f92c:	f7fc fa92 	bl	800be54 <HAL_GetTick>
 800f930:	0003      	movs	r3, r0
 800f932:	617b      	str	r3, [r7, #20]

  /* Wait until flag is set to status*/
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800f934:	e017      	b.n	800f966 <I2S_WaitFlagStateUntilTimeout+0x4a>
  {
    if (Timeout != HAL_MAX_DELAY)
 800f936:	683b      	ldr	r3, [r7, #0]
 800f938:	3301      	adds	r3, #1
 800f93a:	d014      	beq.n	800f966 <I2S_WaitFlagStateUntilTimeout+0x4a>
    {
      if (((HAL_GetTick() - tickstart) >= Timeout) || (Timeout == 0U))
 800f93c:	f7fc fa8a 	bl	800be54 <HAL_GetTick>
 800f940:	0002      	movs	r2, r0
 800f942:	697b      	ldr	r3, [r7, #20]
 800f944:	1ad3      	subs	r3, r2, r3
 800f946:	683a      	ldr	r2, [r7, #0]
 800f948:	429a      	cmp	r2, r3
 800f94a:	d902      	bls.n	800f952 <I2S_WaitFlagStateUntilTimeout+0x36>
 800f94c:	683b      	ldr	r3, [r7, #0]
 800f94e:	2b00      	cmp	r3, #0
 800f950:	d109      	bne.n	800f966 <I2S_WaitFlagStateUntilTimeout+0x4a>
      {
        /* Set the I2S State ready */
        hi2s->State = HAL_I2S_STATE_READY;
 800f952:	68fb      	ldr	r3, [r7, #12]
 800f954:	2235      	movs	r2, #53	@ 0x35
 800f956:	2101      	movs	r1, #1
 800f958:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hi2s);
 800f95a:	68fb      	ldr	r3, [r7, #12]
 800f95c:	2234      	movs	r2, #52	@ 0x34
 800f95e:	2100      	movs	r1, #0
 800f960:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 800f962:	2303      	movs	r3, #3
 800f964:	e00f      	b.n	800f986 <I2S_WaitFlagStateUntilTimeout+0x6a>
  while (((__HAL_I2S_GET_FLAG(hi2s, Flag)) ? SET : RESET) != State)
 800f966:	68fb      	ldr	r3, [r7, #12]
 800f968:	681b      	ldr	r3, [r3, #0]
 800f96a:	689b      	ldr	r3, [r3, #8]
 800f96c:	68ba      	ldr	r2, [r7, #8]
 800f96e:	4013      	ands	r3, r2
 800f970:	68ba      	ldr	r2, [r7, #8]
 800f972:	1ad3      	subs	r3, r2, r3
 800f974:	425a      	negs	r2, r3
 800f976:	4153      	adcs	r3, r2
 800f978:	b2db      	uxtb	r3, r3
 800f97a:	001a      	movs	r2, r3
 800f97c:	1dfb      	adds	r3, r7, #7
 800f97e:	781b      	ldrb	r3, [r3, #0]
 800f980:	429a      	cmp	r2, r3
 800f982:	d1d8      	bne.n	800f936 <I2S_WaitFlagStateUntilTimeout+0x1a>
      }
    }
  }
  return HAL_OK;
 800f984:	2300      	movs	r3, #0
}
 800f986:	0018      	movs	r0, r3
 800f988:	46bd      	mov	sp, r7
 800f98a:	b006      	add	sp, #24
 800f98c:	bd80      	pop	{r7, pc}
	...

0800f990 <HAL_PCD_Init>:
  *         parameters in the PCD_InitTypeDef and initialize the associated handle.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Init(PCD_HandleTypeDef *hpcd)
{
 800f990:	b5f0      	push	{r4, r5, r6, r7, lr}
 800f992:	b08b      	sub	sp, #44	@ 0x2c
 800f994:	af06      	add	r7, sp, #24
 800f996:	6078      	str	r0, [r7, #4]
  uint8_t i;

  /* Check the PCD handle allocation */
  if (hpcd == NULL)
 800f998:	687b      	ldr	r3, [r7, #4]
 800f99a:	2b00      	cmp	r3, #0
 800f99c:	d101      	bne.n	800f9a2 <HAL_PCD_Init+0x12>
  {
    return HAL_ERROR;
 800f99e:	2301      	movs	r3, #1
 800f9a0:	e0f0      	b.n	800fb84 <HAL_PCD_Init+0x1f4>
  }

  /* Check the parameters */
  assert_param(IS_PCD_ALL_INSTANCE(hpcd->Instance));

  if (hpcd->State == HAL_PCD_STATE_RESET)
 800f9a2:	687b      	ldr	r3, [r7, #4]
 800f9a4:	4a79      	ldr	r2, [pc, #484]	@ (800fb8c <HAL_PCD_Init+0x1fc>)
 800f9a6:	5c9b      	ldrb	r3, [r3, r2]
 800f9a8:	b2db      	uxtb	r3, r3
 800f9aa:	2b00      	cmp	r3, #0
 800f9ac:	d108      	bne.n	800f9c0 <HAL_PCD_Init+0x30>
  {
    /* Allocate lock resource and initialize it */
    hpcd->Lock = HAL_UNLOCKED;
 800f9ae:	687a      	ldr	r2, [r7, #4]
 800f9b0:	23aa      	movs	r3, #170	@ 0xaa
 800f9b2:	009b      	lsls	r3, r3, #2
 800f9b4:	2100      	movs	r1, #0
 800f9b6:	54d1      	strb	r1, [r2, r3]

    /* Init the low level hardware */
    hpcd->MspInitCallback(hpcd);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC... */
    HAL_PCD_MspInit(hpcd);
 800f9b8:	687b      	ldr	r3, [r7, #4]
 800f9ba:	0018      	movs	r0, r3
 800f9bc:	f009 fdd4 	bl	8019568 <HAL_PCD_MspInit>
#endif /* (USE_HAL_PCD_REGISTER_CALLBACKS) */
  }

  hpcd->State = HAL_PCD_STATE_BUSY;
 800f9c0:	687b      	ldr	r3, [r7, #4]
 800f9c2:	4a72      	ldr	r2, [pc, #456]	@ (800fb8c <HAL_PCD_Init+0x1fc>)
 800f9c4:	2103      	movs	r1, #3
 800f9c6:	5499      	strb	r1, [r3, r2]

  /* Disable the Interrupts */
  __HAL_PCD_DISABLE(hpcd);
 800f9c8:	687b      	ldr	r3, [r7, #4]
 800f9ca:	681b      	ldr	r3, [r3, #0]
 800f9cc:	0018      	movs	r0, r3
 800f9ce:	f005 fd87 	bl	80154e0 <USB_DisableGlobalInt>

  /* Init endpoints structures */
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800f9d2:	230f      	movs	r3, #15
 800f9d4:	18fb      	adds	r3, r7, r3
 800f9d6:	2200      	movs	r2, #0
 800f9d8:	701a      	strb	r2, [r3, #0]
 800f9da:	e049      	b.n	800fa70 <HAL_PCD_Init+0xe0>
  {
    /* Init ep structure */
    hpcd->IN_ep[i].is_in = 1U;
 800f9dc:	200f      	movs	r0, #15
 800f9de:	183b      	adds	r3, r7, r0
 800f9e0:	781b      	ldrb	r3, [r3, #0]
 800f9e2:	6879      	ldr	r1, [r7, #4]
 800f9e4:	1c5a      	adds	r2, r3, #1
 800f9e6:	0013      	movs	r3, r2
 800f9e8:	009b      	lsls	r3, r3, #2
 800f9ea:	189b      	adds	r3, r3, r2
 800f9ec:	00db      	lsls	r3, r3, #3
 800f9ee:	18cb      	adds	r3, r1, r3
 800f9f0:	3301      	adds	r3, #1
 800f9f2:	2201      	movs	r2, #1
 800f9f4:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].num = i;
 800f9f6:	183b      	adds	r3, r7, r0
 800f9f8:	781b      	ldrb	r3, [r3, #0]
 800f9fa:	6879      	ldr	r1, [r7, #4]
 800f9fc:	1c5a      	adds	r2, r3, #1
 800f9fe:	0013      	movs	r3, r2
 800fa00:	009b      	lsls	r3, r3, #2
 800fa02:	189b      	adds	r3, r3, r2
 800fa04:	00db      	lsls	r3, r3, #3
 800fa06:	183a      	adds	r2, r7, r0
 800fa08:	7812      	ldrb	r2, [r2, #0]
 800fa0a:	545a      	strb	r2, [r3, r1]
    /* Control until ep is activated */
    hpcd->IN_ep[i].type = EP_TYPE_CTRL;
 800fa0c:	183b      	adds	r3, r7, r0
 800fa0e:	781b      	ldrb	r3, [r3, #0]
 800fa10:	6879      	ldr	r1, [r7, #4]
 800fa12:	1c5a      	adds	r2, r3, #1
 800fa14:	0013      	movs	r3, r2
 800fa16:	009b      	lsls	r3, r3, #2
 800fa18:	189b      	adds	r3, r3, r2
 800fa1a:	00db      	lsls	r3, r3, #3
 800fa1c:	18cb      	adds	r3, r1, r3
 800fa1e:	3303      	adds	r3, #3
 800fa20:	2200      	movs	r2, #0
 800fa22:	701a      	strb	r2, [r3, #0]
    hpcd->IN_ep[i].maxpacket = 0U;
 800fa24:	183b      	adds	r3, r7, r0
 800fa26:	781a      	ldrb	r2, [r3, #0]
 800fa28:	6879      	ldr	r1, [r7, #4]
 800fa2a:	0013      	movs	r3, r2
 800fa2c:	009b      	lsls	r3, r3, #2
 800fa2e:	189b      	adds	r3, r3, r2
 800fa30:	00db      	lsls	r3, r3, #3
 800fa32:	18cb      	adds	r3, r1, r3
 800fa34:	3338      	adds	r3, #56	@ 0x38
 800fa36:	2200      	movs	r2, #0
 800fa38:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_buff = 0U;
 800fa3a:	183b      	adds	r3, r7, r0
 800fa3c:	781a      	ldrb	r2, [r3, #0]
 800fa3e:	6879      	ldr	r1, [r7, #4]
 800fa40:	0013      	movs	r3, r2
 800fa42:	009b      	lsls	r3, r3, #2
 800fa44:	189b      	adds	r3, r3, r2
 800fa46:	00db      	lsls	r3, r3, #3
 800fa48:	18cb      	adds	r3, r1, r3
 800fa4a:	333c      	adds	r3, #60	@ 0x3c
 800fa4c:	2200      	movs	r2, #0
 800fa4e:	601a      	str	r2, [r3, #0]
    hpcd->IN_ep[i].xfer_len = 0U;
 800fa50:	183b      	adds	r3, r7, r0
 800fa52:	781a      	ldrb	r2, [r3, #0]
 800fa54:	6879      	ldr	r1, [r7, #4]
 800fa56:	0013      	movs	r3, r2
 800fa58:	009b      	lsls	r3, r3, #2
 800fa5a:	189b      	adds	r3, r3, r2
 800fa5c:	00db      	lsls	r3, r3, #3
 800fa5e:	18cb      	adds	r3, r1, r3
 800fa60:	3340      	adds	r3, #64	@ 0x40
 800fa62:	2200      	movs	r2, #0
 800fa64:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800fa66:	183b      	adds	r3, r7, r0
 800fa68:	781a      	ldrb	r2, [r3, #0]
 800fa6a:	183b      	adds	r3, r7, r0
 800fa6c:	3201      	adds	r2, #1
 800fa6e:	701a      	strb	r2, [r3, #0]
 800fa70:	210f      	movs	r1, #15
 800fa72:	187b      	adds	r3, r7, r1
 800fa74:	781a      	ldrb	r2, [r3, #0]
 800fa76:	687b      	ldr	r3, [r7, #4]
 800fa78:	685b      	ldr	r3, [r3, #4]
 800fa7a:	429a      	cmp	r2, r3
 800fa7c:	d3ae      	bcc.n	800f9dc <HAL_PCD_Init+0x4c>
  }

  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800fa7e:	187b      	adds	r3, r7, r1
 800fa80:	2200      	movs	r2, #0
 800fa82:	701a      	strb	r2, [r3, #0]
 800fa84:	e056      	b.n	800fb34 <HAL_PCD_Init+0x1a4>
  {
    hpcd->OUT_ep[i].is_in = 0U;
 800fa86:	240f      	movs	r4, #15
 800fa88:	193b      	adds	r3, r7, r4
 800fa8a:	781a      	ldrb	r2, [r3, #0]
 800fa8c:	6878      	ldr	r0, [r7, #4]
 800fa8e:	236a      	movs	r3, #106	@ 0x6a
 800fa90:	33ff      	adds	r3, #255	@ 0xff
 800fa92:	0019      	movs	r1, r3
 800fa94:	0013      	movs	r3, r2
 800fa96:	009b      	lsls	r3, r3, #2
 800fa98:	189b      	adds	r3, r3, r2
 800fa9a:	00db      	lsls	r3, r3, #3
 800fa9c:	18c3      	adds	r3, r0, r3
 800fa9e:	185b      	adds	r3, r3, r1
 800faa0:	2200      	movs	r2, #0
 800faa2:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].num = i;
 800faa4:	193b      	adds	r3, r7, r4
 800faa6:	781a      	ldrb	r2, [r3, #0]
 800faa8:	6878      	ldr	r0, [r7, #4]
 800faaa:	23b4      	movs	r3, #180	@ 0xb4
 800faac:	0059      	lsls	r1, r3, #1
 800faae:	0013      	movs	r3, r2
 800fab0:	009b      	lsls	r3, r3, #2
 800fab2:	189b      	adds	r3, r3, r2
 800fab4:	00db      	lsls	r3, r3, #3
 800fab6:	18c3      	adds	r3, r0, r3
 800fab8:	185b      	adds	r3, r3, r1
 800faba:	193a      	adds	r2, r7, r4
 800fabc:	7812      	ldrb	r2, [r2, #0]
 800fabe:	701a      	strb	r2, [r3, #0]
    /* Control until ep is activated */
    hpcd->OUT_ep[i].type = EP_TYPE_CTRL;
 800fac0:	193b      	adds	r3, r7, r4
 800fac2:	781a      	ldrb	r2, [r3, #0]
 800fac4:	6878      	ldr	r0, [r7, #4]
 800fac6:	236c      	movs	r3, #108	@ 0x6c
 800fac8:	33ff      	adds	r3, #255	@ 0xff
 800faca:	0019      	movs	r1, r3
 800facc:	0013      	movs	r3, r2
 800face:	009b      	lsls	r3, r3, #2
 800fad0:	189b      	adds	r3, r3, r2
 800fad2:	00db      	lsls	r3, r3, #3
 800fad4:	18c3      	adds	r3, r0, r3
 800fad6:	185b      	adds	r3, r3, r1
 800fad8:	2200      	movs	r2, #0
 800fada:	701a      	strb	r2, [r3, #0]
    hpcd->OUT_ep[i].maxpacket = 0U;
 800fadc:	193b      	adds	r3, r7, r4
 800fade:	781a      	ldrb	r2, [r3, #0]
 800fae0:	6878      	ldr	r0, [r7, #4]
 800fae2:	23bc      	movs	r3, #188	@ 0xbc
 800fae4:	0059      	lsls	r1, r3, #1
 800fae6:	0013      	movs	r3, r2
 800fae8:	009b      	lsls	r3, r3, #2
 800faea:	189b      	adds	r3, r3, r2
 800faec:	00db      	lsls	r3, r3, #3
 800faee:	18c3      	adds	r3, r0, r3
 800faf0:	185b      	adds	r3, r3, r1
 800faf2:	2200      	movs	r2, #0
 800faf4:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_buff = 0U;
 800faf6:	193b      	adds	r3, r7, r4
 800faf8:	781a      	ldrb	r2, [r3, #0]
 800fafa:	6878      	ldr	r0, [r7, #4]
 800fafc:	23be      	movs	r3, #190	@ 0xbe
 800fafe:	0059      	lsls	r1, r3, #1
 800fb00:	0013      	movs	r3, r2
 800fb02:	009b      	lsls	r3, r3, #2
 800fb04:	189b      	adds	r3, r3, r2
 800fb06:	00db      	lsls	r3, r3, #3
 800fb08:	18c3      	adds	r3, r0, r3
 800fb0a:	185b      	adds	r3, r3, r1
 800fb0c:	2200      	movs	r2, #0
 800fb0e:	601a      	str	r2, [r3, #0]
    hpcd->OUT_ep[i].xfer_len = 0U;
 800fb10:	193b      	adds	r3, r7, r4
 800fb12:	781a      	ldrb	r2, [r3, #0]
 800fb14:	6878      	ldr	r0, [r7, #4]
 800fb16:	23c0      	movs	r3, #192	@ 0xc0
 800fb18:	0059      	lsls	r1, r3, #1
 800fb1a:	0013      	movs	r3, r2
 800fb1c:	009b      	lsls	r3, r3, #2
 800fb1e:	189b      	adds	r3, r3, r2
 800fb20:	00db      	lsls	r3, r3, #3
 800fb22:	18c3      	adds	r3, r0, r3
 800fb24:	185b      	adds	r3, r3, r1
 800fb26:	2200      	movs	r2, #0
 800fb28:	601a      	str	r2, [r3, #0]
  for (i = 0U; i < hpcd->Init.dev_endpoints; i++)
 800fb2a:	193b      	adds	r3, r7, r4
 800fb2c:	781a      	ldrb	r2, [r3, #0]
 800fb2e:	193b      	adds	r3, r7, r4
 800fb30:	3201      	adds	r2, #1
 800fb32:	701a      	strb	r2, [r3, #0]
 800fb34:	230f      	movs	r3, #15
 800fb36:	18fb      	adds	r3, r7, r3
 800fb38:	781a      	ldrb	r2, [r3, #0]
 800fb3a:	687b      	ldr	r3, [r7, #4]
 800fb3c:	685b      	ldr	r3, [r3, #4]
 800fb3e:	429a      	cmp	r2, r3
 800fb40:	d3a1      	bcc.n	800fa86 <HAL_PCD_Init+0xf6>
  }

  /* Init Device */
  (void)USB_DevInit(hpcd->Instance, hpcd->Init);
 800fb42:	687b      	ldr	r3, [r7, #4]
 800fb44:	6818      	ldr	r0, [r3, #0]
 800fb46:	687b      	ldr	r3, [r7, #4]
 800fb48:	466a      	mov	r2, sp
 800fb4a:	0011      	movs	r1, r2
 800fb4c:	001a      	movs	r2, r3
 800fb4e:	3210      	adds	r2, #16
 800fb50:	ca70      	ldmia	r2!, {r4, r5, r6}
 800fb52:	c170      	stmia	r1!, {r4, r5, r6}
 800fb54:	ca30      	ldmia	r2!, {r4, r5}
 800fb56:	c130      	stmia	r1!, {r4, r5}
 800fb58:	6859      	ldr	r1, [r3, #4]
 800fb5a:	689a      	ldr	r2, [r3, #8]
 800fb5c:	68db      	ldr	r3, [r3, #12]
 800fb5e:	f005 fcd9 	bl	8015514 <USB_DevInit>

  hpcd->USB_Address = 0U;
 800fb62:	687b      	ldr	r3, [r7, #4]
 800fb64:	2224      	movs	r2, #36	@ 0x24
 800fb66:	2100      	movs	r1, #0
 800fb68:	5499      	strb	r1, [r3, r2]
  hpcd->State = HAL_PCD_STATE_READY;
 800fb6a:	687b      	ldr	r3, [r7, #4]
 800fb6c:	4a07      	ldr	r2, [pc, #28]	@ (800fb8c <HAL_PCD_Init+0x1fc>)
 800fb6e:	2101      	movs	r1, #1
 800fb70:	5499      	strb	r1, [r3, r2]

  /* Activate LPM */
  if (hpcd->Init.lpm_enable == 1U)
 800fb72:	687b      	ldr	r3, [r7, #4]
 800fb74:	69db      	ldr	r3, [r3, #28]
 800fb76:	2b01      	cmp	r3, #1
 800fb78:	d103      	bne.n	800fb82 <HAL_PCD_Init+0x1f2>
  {
    (void)HAL_PCDEx_ActivateLPM(hpcd);
 800fb7a:	687b      	ldr	r3, [r7, #4]
 800fb7c:	0018      	movs	r0, r3
 800fb7e:	f001 fd23 	bl	80115c8 <HAL_PCDEx_ActivateLPM>
  }

  return HAL_OK;
 800fb82:	2300      	movs	r3, #0
}
 800fb84:	0018      	movs	r0, r3
 800fb86:	46bd      	mov	sp, r7
 800fb88:	b005      	add	sp, #20
 800fb8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800fb8c:	000002a9 	.word	0x000002a9

0800fb90 <HAL_PCD_Start>:
  * @brief  Start the USB device
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_Start(PCD_HandleTypeDef *hpcd)
{
 800fb90:	b580      	push	{r7, lr}
 800fb92:	b082      	sub	sp, #8
 800fb94:	af00      	add	r7, sp, #0
 800fb96:	6078      	str	r0, [r7, #4]
  __HAL_LOCK(hpcd);
 800fb98:	687a      	ldr	r2, [r7, #4]
 800fb9a:	23aa      	movs	r3, #170	@ 0xaa
 800fb9c:	009b      	lsls	r3, r3, #2
 800fb9e:	5cd3      	ldrb	r3, [r2, r3]
 800fba0:	2b01      	cmp	r3, #1
 800fba2:	d101      	bne.n	800fba8 <HAL_PCD_Start+0x18>
 800fba4:	2302      	movs	r3, #2
 800fba6:	e014      	b.n	800fbd2 <HAL_PCD_Start+0x42>
 800fba8:	687a      	ldr	r2, [r7, #4]
 800fbaa:	23aa      	movs	r3, #170	@ 0xaa
 800fbac:	009b      	lsls	r3, r3, #2
 800fbae:	2101      	movs	r1, #1
 800fbb0:	54d1      	strb	r1, [r2, r3]
  __HAL_PCD_ENABLE(hpcd);
 800fbb2:	687b      	ldr	r3, [r7, #4]
 800fbb4:	681b      	ldr	r3, [r3, #0]
 800fbb6:	0018      	movs	r0, r3
 800fbb8:	f005 fc7c 	bl	80154b4 <USB_EnableGlobalInt>
  (void)USB_DevConnect(hpcd->Instance);
 800fbbc:	687b      	ldr	r3, [r7, #4]
 800fbbe:	681b      	ldr	r3, [r3, #0]
 800fbc0:	0018      	movs	r0, r3
 800fbc2:	f007 fc7f 	bl	80174c4 <USB_DevConnect>
  __HAL_UNLOCK(hpcd);
 800fbc6:	687a      	ldr	r2, [r7, #4]
 800fbc8:	23aa      	movs	r3, #170	@ 0xaa
 800fbca:	009b      	lsls	r3, r3, #2
 800fbcc:	2100      	movs	r1, #0
 800fbce:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800fbd0:	2300      	movs	r3, #0
}
 800fbd2:	0018      	movs	r0, r3
 800fbd4:	46bd      	mov	sp, r7
 800fbd6:	b002      	add	sp, #8
 800fbd8:	bd80      	pop	{r7, pc}
	...

0800fbdc <HAL_PCD_IRQHandler>:
  * @brief  This function handles PCD interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
void HAL_PCD_IRQHandler(PCD_HandleTypeDef *hpcd)
{
 800fbdc:	b580      	push	{r7, lr}
 800fbde:	b084      	sub	sp, #16
 800fbe0:	af00      	add	r7, sp, #0
 800fbe2:	6078      	str	r0, [r7, #4]
  uint32_t wIstr = USB_ReadInterrupts(hpcd->Instance);
 800fbe4:	687b      	ldr	r3, [r7, #4]
 800fbe6:	681b      	ldr	r3, [r3, #0]
 800fbe8:	0018      	movs	r0, r3
 800fbea:	f007 fc81 	bl	80174f0 <USB_ReadInterrupts>
 800fbee:	0003      	movs	r3, r0
 800fbf0:	60fb      	str	r3, [r7, #12]

  if ((wIstr & USB_ISTR_CTR) == USB_ISTR_CTR)
 800fbf2:	68fa      	ldr	r2, [r7, #12]
 800fbf4:	2380      	movs	r3, #128	@ 0x80
 800fbf6:	021b      	lsls	r3, r3, #8
 800fbf8:	4013      	ands	r3, r2
 800fbfa:	d004      	beq.n	800fc06 <HAL_PCD_IRQHandler+0x2a>
  {
    /* servicing of the endpoint correct transfer interrupt */
    /* clear of the CTR flag into the sub */
    (void)PCD_EP_ISR_Handler(hpcd);
 800fbfc:	687b      	ldr	r3, [r7, #4]
 800fbfe:	0018      	movs	r0, r3
 800fc00:	f000 fb62 	bl	80102c8 <PCD_EP_ISR_Handler>

    return;
 800fc04:	e11d      	b.n	800fe42 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_RESET) == USB_ISTR_RESET)
 800fc06:	68fa      	ldr	r2, [r7, #12]
 800fc08:	2380      	movs	r3, #128	@ 0x80
 800fc0a:	00db      	lsls	r3, r3, #3
 800fc0c:	4013      	ands	r3, r2
 800fc0e:	d015      	beq.n	800fc3c <HAL_PCD_IRQHandler+0x60>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_RESET);
 800fc10:	687b      	ldr	r3, [r7, #4]
 800fc12:	681b      	ldr	r3, [r3, #0]
 800fc14:	2244      	movs	r2, #68	@ 0x44
 800fc16:	5a9b      	ldrh	r3, [r3, r2]
 800fc18:	b29a      	uxth	r2, r3
 800fc1a:	687b      	ldr	r3, [r7, #4]
 800fc1c:	681b      	ldr	r3, [r3, #0]
 800fc1e:	498a      	ldr	r1, [pc, #552]	@ (800fe48 <HAL_PCD_IRQHandler+0x26c>)
 800fc20:	400a      	ands	r2, r1
 800fc22:	b291      	uxth	r1, r2
 800fc24:	2244      	movs	r2, #68	@ 0x44
 800fc26:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResetCallback(hpcd);
#else
    HAL_PCD_ResetCallback(hpcd);
 800fc28:	687b      	ldr	r3, [r7, #4]
 800fc2a:	0018      	movs	r0, r3
 800fc2c:	f009 fd1f 	bl	801966e <HAL_PCD_ResetCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    (void)HAL_PCD_SetAddress(hpcd, 0U);
 800fc30:	687b      	ldr	r3, [r7, #4]
 800fc32:	2100      	movs	r1, #0
 800fc34:	0018      	movs	r0, r3
 800fc36:	f000 f915 	bl	800fe64 <HAL_PCD_SetAddress>

    return;
 800fc3a:	e102      	b.n	800fe42 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_PMAOVR) == USB_ISTR_PMAOVR)
 800fc3c:	68fa      	ldr	r2, [r7, #12]
 800fc3e:	2380      	movs	r3, #128	@ 0x80
 800fc40:	01db      	lsls	r3, r3, #7
 800fc42:	4013      	ands	r3, r2
 800fc44:	d00c      	beq.n	800fc60 <HAL_PCD_IRQHandler+0x84>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_PMAOVR);
 800fc46:	687b      	ldr	r3, [r7, #4]
 800fc48:	681b      	ldr	r3, [r3, #0]
 800fc4a:	2244      	movs	r2, #68	@ 0x44
 800fc4c:	5a9b      	ldrh	r3, [r3, r2]
 800fc4e:	b29a      	uxth	r2, r3
 800fc50:	687b      	ldr	r3, [r7, #4]
 800fc52:	681b      	ldr	r3, [r3, #0]
 800fc54:	497d      	ldr	r1, [pc, #500]	@ (800fe4c <HAL_PCD_IRQHandler+0x270>)
 800fc56:	400a      	ands	r2, r1
 800fc58:	b291      	uxth	r1, r2
 800fc5a:	2244      	movs	r2, #68	@ 0x44
 800fc5c:	5299      	strh	r1, [r3, r2]

    return;
 800fc5e:	e0f0      	b.n	800fe42 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ERR) == USB_ISTR_ERR)
 800fc60:	68fa      	ldr	r2, [r7, #12]
 800fc62:	2380      	movs	r3, #128	@ 0x80
 800fc64:	019b      	lsls	r3, r3, #6
 800fc66:	4013      	ands	r3, r2
 800fc68:	d00c      	beq.n	800fc84 <HAL_PCD_IRQHandler+0xa8>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ERR);
 800fc6a:	687b      	ldr	r3, [r7, #4]
 800fc6c:	681b      	ldr	r3, [r3, #0]
 800fc6e:	2244      	movs	r2, #68	@ 0x44
 800fc70:	5a9b      	ldrh	r3, [r3, r2]
 800fc72:	b29a      	uxth	r2, r3
 800fc74:	687b      	ldr	r3, [r7, #4]
 800fc76:	681b      	ldr	r3, [r3, #0]
 800fc78:	4975      	ldr	r1, [pc, #468]	@ (800fe50 <HAL_PCD_IRQHandler+0x274>)
 800fc7a:	400a      	ands	r2, r1
 800fc7c:	b291      	uxth	r1, r2
 800fc7e:	2244      	movs	r2, #68	@ 0x44
 800fc80:	5299      	strh	r1, [r3, r2]

    return;
 800fc82:	e0de      	b.n	800fe42 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_WKUP) == USB_ISTR_WKUP)
 800fc84:	68fa      	ldr	r2, [r7, #12]
 800fc86:	2380      	movs	r3, #128	@ 0x80
 800fc88:	015b      	lsls	r3, r3, #5
 800fc8a:	4013      	ands	r3, r2
 800fc8c:	d038      	beq.n	800fd00 <HAL_PCD_IRQHandler+0x124>
  {
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_LPMODE);
 800fc8e:	687b      	ldr	r3, [r7, #4]
 800fc90:	681b      	ldr	r3, [r3, #0]
 800fc92:	2240      	movs	r2, #64	@ 0x40
 800fc94:	5a9b      	ldrh	r3, [r3, r2]
 800fc96:	b29a      	uxth	r2, r3
 800fc98:	687b      	ldr	r3, [r7, #4]
 800fc9a:	681b      	ldr	r3, [r3, #0]
 800fc9c:	2104      	movs	r1, #4
 800fc9e:	438a      	bics	r2, r1
 800fca0:	b291      	uxth	r1, r2
 800fca2:	2240      	movs	r2, #64	@ 0x40
 800fca4:	5299      	strh	r1, [r3, r2]
    hpcd->Instance->CNTR &= (uint16_t) ~(USB_CNTR_FSUSP);
 800fca6:	687b      	ldr	r3, [r7, #4]
 800fca8:	681b      	ldr	r3, [r3, #0]
 800fcaa:	2240      	movs	r2, #64	@ 0x40
 800fcac:	5a9b      	ldrh	r3, [r3, r2]
 800fcae:	b29a      	uxth	r2, r3
 800fcb0:	687b      	ldr	r3, [r7, #4]
 800fcb2:	681b      	ldr	r3, [r3, #0]
 800fcb4:	2108      	movs	r1, #8
 800fcb6:	438a      	bics	r2, r1
 800fcb8:	b291      	uxth	r1, r2
 800fcba:	2240      	movs	r2, #64	@ 0x40
 800fcbc:	5299      	strh	r1, [r3, r2]

    if (hpcd->LPM_State == LPM_L1)
 800fcbe:	687a      	ldr	r2, [r7, #4]
 800fcc0:	23b8      	movs	r3, #184	@ 0xb8
 800fcc2:	009b      	lsls	r3, r3, #2
 800fcc4:	5cd3      	ldrb	r3, [r2, r3]
 800fcc6:	2b01      	cmp	r3, #1
 800fcc8:	d109      	bne.n	800fcde <HAL_PCD_IRQHandler+0x102>
    {
      hpcd->LPM_State = LPM_L0;
 800fcca:	687a      	ldr	r2, [r7, #4]
 800fccc:	23b8      	movs	r3, #184	@ 0xb8
 800fcce:	009b      	lsls	r3, r3, #2
 800fcd0:	2100      	movs	r1, #0
 800fcd2:	54d1      	strb	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L0_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L0_ACTIVE);
 800fcd4:	687b      	ldr	r3, [r7, #4]
 800fcd6:	2100      	movs	r1, #0
 800fcd8:	0018      	movs	r0, r3
 800fcda:	f001 fc9f 	bl	801161c <HAL_PCDEx_LPM_Callback>
    }

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->ResumeCallback(hpcd);
#else
    HAL_PCD_ResumeCallback(hpcd);
 800fcde:	687b      	ldr	r3, [r7, #4]
 800fce0:	0018      	movs	r0, r3
 800fce2:	f009 fd05 	bl	80196f0 <HAL_PCD_ResumeCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_WKUP);
 800fce6:	687b      	ldr	r3, [r7, #4]
 800fce8:	681b      	ldr	r3, [r3, #0]
 800fcea:	2244      	movs	r2, #68	@ 0x44
 800fcec:	5a9b      	ldrh	r3, [r3, r2]
 800fcee:	b29a      	uxth	r2, r3
 800fcf0:	687b      	ldr	r3, [r7, #4]
 800fcf2:	681b      	ldr	r3, [r3, #0]
 800fcf4:	4957      	ldr	r1, [pc, #348]	@ (800fe54 <HAL_PCD_IRQHandler+0x278>)
 800fcf6:	400a      	ands	r2, r1
 800fcf8:	b291      	uxth	r1, r2
 800fcfa:	2244      	movs	r2, #68	@ 0x44
 800fcfc:	5299      	strh	r1, [r3, r2]

    return;
 800fcfe:	e0a0      	b.n	800fe42 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SUSP) == USB_ISTR_SUSP)
 800fd00:	68fa      	ldr	r2, [r7, #12]
 800fd02:	2380      	movs	r3, #128	@ 0x80
 800fd04:	011b      	lsls	r3, r3, #4
 800fd06:	4013      	ands	r3, r2
 800fd08:	d028      	beq.n	800fd5c <HAL_PCD_IRQHandler+0x180>
  {
    /* Force low-power mode in the macrocell */
    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800fd0a:	687b      	ldr	r3, [r7, #4]
 800fd0c:	681b      	ldr	r3, [r3, #0]
 800fd0e:	2240      	movs	r2, #64	@ 0x40
 800fd10:	5a9b      	ldrh	r3, [r3, r2]
 800fd12:	b29a      	uxth	r2, r3
 800fd14:	687b      	ldr	r3, [r7, #4]
 800fd16:	681b      	ldr	r3, [r3, #0]
 800fd18:	2108      	movs	r1, #8
 800fd1a:	430a      	orrs	r2, r1
 800fd1c:	b291      	uxth	r1, r2
 800fd1e:	2240      	movs	r2, #64	@ 0x40
 800fd20:	5299      	strh	r1, [r3, r2]

    /* clear of the ISTR bit must be done after setting of CNTR_FSUSP */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SUSP);
 800fd22:	687b      	ldr	r3, [r7, #4]
 800fd24:	681b      	ldr	r3, [r3, #0]
 800fd26:	2244      	movs	r2, #68	@ 0x44
 800fd28:	5a9b      	ldrh	r3, [r3, r2]
 800fd2a:	b29a      	uxth	r2, r3
 800fd2c:	687b      	ldr	r3, [r7, #4]
 800fd2e:	681b      	ldr	r3, [r3, #0]
 800fd30:	4949      	ldr	r1, [pc, #292]	@ (800fe58 <HAL_PCD_IRQHandler+0x27c>)
 800fd32:	400a      	ands	r2, r1
 800fd34:	b291      	uxth	r1, r2
 800fd36:	2244      	movs	r2, #68	@ 0x44
 800fd38:	5299      	strh	r1, [r3, r2]

    hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800fd3a:	687b      	ldr	r3, [r7, #4]
 800fd3c:	681b      	ldr	r3, [r3, #0]
 800fd3e:	2240      	movs	r2, #64	@ 0x40
 800fd40:	5a9b      	ldrh	r3, [r3, r2]
 800fd42:	b29a      	uxth	r2, r3
 800fd44:	687b      	ldr	r3, [r7, #4]
 800fd46:	681b      	ldr	r3, [r3, #0]
 800fd48:	2104      	movs	r1, #4
 800fd4a:	430a      	orrs	r2, r1
 800fd4c:	b291      	uxth	r1, r2
 800fd4e:	2240      	movs	r2, #64	@ 0x40
 800fd50:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SuspendCallback(hpcd);
#else
    HAL_PCD_SuspendCallback(hpcd);
 800fd52:	687b      	ldr	r3, [r7, #4]
 800fd54:	0018      	movs	r0, r3
 800fd56:	f009 fcaf 	bl	80196b8 <HAL_PCD_SuspendCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800fd5a:	e072      	b.n	800fe42 <HAL_PCD_IRQHandler+0x266>
  }

  /* Handle LPM Interrupt */
  if ((wIstr & USB_ISTR_L1REQ) == USB_ISTR_L1REQ)
 800fd5c:	68fb      	ldr	r3, [r7, #12]
 800fd5e:	2280      	movs	r2, #128	@ 0x80
 800fd60:	4013      	ands	r3, r2
 800fd62:	d046      	beq.n	800fdf2 <HAL_PCD_IRQHandler+0x216>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_L1REQ);
 800fd64:	687b      	ldr	r3, [r7, #4]
 800fd66:	681b      	ldr	r3, [r3, #0]
 800fd68:	2244      	movs	r2, #68	@ 0x44
 800fd6a:	5a9b      	ldrh	r3, [r3, r2]
 800fd6c:	b29a      	uxth	r2, r3
 800fd6e:	687b      	ldr	r3, [r7, #4]
 800fd70:	681b      	ldr	r3, [r3, #0]
 800fd72:	2180      	movs	r1, #128	@ 0x80
 800fd74:	438a      	bics	r2, r1
 800fd76:	b291      	uxth	r1, r2
 800fd78:	2244      	movs	r2, #68	@ 0x44
 800fd7a:	5299      	strh	r1, [r3, r2]
    if (hpcd->LPM_State == LPM_L0)
 800fd7c:	687a      	ldr	r2, [r7, #4]
 800fd7e:	23b8      	movs	r3, #184	@ 0xb8
 800fd80:	009b      	lsls	r3, r3, #2
 800fd82:	5cd3      	ldrb	r3, [r2, r3]
 800fd84:	2b00      	cmp	r3, #0
 800fd86:	d12f      	bne.n	800fde8 <HAL_PCD_IRQHandler+0x20c>
    {
      /* Force suspend and low-power mode before going to L1 state*/
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_LPMODE;
 800fd88:	687b      	ldr	r3, [r7, #4]
 800fd8a:	681b      	ldr	r3, [r3, #0]
 800fd8c:	2240      	movs	r2, #64	@ 0x40
 800fd8e:	5a9b      	ldrh	r3, [r3, r2]
 800fd90:	b29a      	uxth	r2, r3
 800fd92:	687b      	ldr	r3, [r7, #4]
 800fd94:	681b      	ldr	r3, [r3, #0]
 800fd96:	2104      	movs	r1, #4
 800fd98:	430a      	orrs	r2, r1
 800fd9a:	b291      	uxth	r1, r2
 800fd9c:	2240      	movs	r2, #64	@ 0x40
 800fd9e:	5299      	strh	r1, [r3, r2]
      hpcd->Instance->CNTR |= (uint16_t)USB_CNTR_FSUSP;
 800fda0:	687b      	ldr	r3, [r7, #4]
 800fda2:	681b      	ldr	r3, [r3, #0]
 800fda4:	2240      	movs	r2, #64	@ 0x40
 800fda6:	5a9b      	ldrh	r3, [r3, r2]
 800fda8:	b29a      	uxth	r2, r3
 800fdaa:	687b      	ldr	r3, [r7, #4]
 800fdac:	681b      	ldr	r3, [r3, #0]
 800fdae:	2108      	movs	r1, #8
 800fdb0:	430a      	orrs	r2, r1
 800fdb2:	b291      	uxth	r1, r2
 800fdb4:	2240      	movs	r2, #64	@ 0x40
 800fdb6:	5299      	strh	r1, [r3, r2]

      hpcd->LPM_State = LPM_L1;
 800fdb8:	687a      	ldr	r2, [r7, #4]
 800fdba:	23b8      	movs	r3, #184	@ 0xb8
 800fdbc:	009b      	lsls	r3, r3, #2
 800fdbe:	2101      	movs	r1, #1
 800fdc0:	54d1      	strb	r1, [r2, r3]
      hpcd->BESL = ((uint32_t)hpcd->Instance->LPMCSR & USB_LPMCSR_BESL) >> 2;
 800fdc2:	687b      	ldr	r3, [r7, #4]
 800fdc4:	681b      	ldr	r3, [r3, #0]
 800fdc6:	2254      	movs	r2, #84	@ 0x54
 800fdc8:	5a9b      	ldrh	r3, [r3, r2]
 800fdca:	b29b      	uxth	r3, r3
 800fdcc:	089b      	lsrs	r3, r3, #2
 800fdce:	223c      	movs	r2, #60	@ 0x3c
 800fdd0:	4013      	ands	r3, r2
 800fdd2:	0019      	movs	r1, r3
 800fdd4:	687a      	ldr	r2, [r7, #4]
 800fdd6:	23b9      	movs	r3, #185	@ 0xb9
 800fdd8:	009b      	lsls	r3, r3, #2
 800fdda:	50d1      	str	r1, [r2, r3]
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->LPMCallback(hpcd, PCD_LPM_L1_ACTIVE);
#else
      HAL_PCDEx_LPM_Callback(hpcd, PCD_LPM_L1_ACTIVE);
 800fddc:	687b      	ldr	r3, [r7, #4]
 800fdde:	2101      	movs	r1, #1
 800fde0:	0018      	movs	r0, r3
 800fde2:	f001 fc1b 	bl	801161c <HAL_PCDEx_LPM_Callback>
#else
      HAL_PCD_SuspendCallback(hpcd);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
    }

    return;
 800fde6:	e02c      	b.n	800fe42 <HAL_PCD_IRQHandler+0x266>
      HAL_PCD_SuspendCallback(hpcd);
 800fde8:	687b      	ldr	r3, [r7, #4]
 800fdea:	0018      	movs	r0, r3
 800fdec:	f009 fc64 	bl	80196b8 <HAL_PCD_SuspendCallback>
    return;
 800fdf0:	e027      	b.n	800fe42 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_SOF) == USB_ISTR_SOF)
 800fdf2:	68fa      	ldr	r2, [r7, #12]
 800fdf4:	2380      	movs	r3, #128	@ 0x80
 800fdf6:	009b      	lsls	r3, r3, #2
 800fdf8:	4013      	ands	r3, r2
 800fdfa:	d010      	beq.n	800fe1e <HAL_PCD_IRQHandler+0x242>
  {
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_SOF);
 800fdfc:	687b      	ldr	r3, [r7, #4]
 800fdfe:	681b      	ldr	r3, [r3, #0]
 800fe00:	2244      	movs	r2, #68	@ 0x44
 800fe02:	5a9b      	ldrh	r3, [r3, r2]
 800fe04:	b29a      	uxth	r2, r3
 800fe06:	687b      	ldr	r3, [r7, #4]
 800fe08:	681b      	ldr	r3, [r3, #0]
 800fe0a:	4914      	ldr	r1, [pc, #80]	@ (800fe5c <HAL_PCD_IRQHandler+0x280>)
 800fe0c:	400a      	ands	r2, r1
 800fe0e:	b291      	uxth	r1, r2
 800fe10:	2244      	movs	r2, #68	@ 0x44
 800fe12:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
    hpcd->SOFCallback(hpcd);
#else
    HAL_PCD_SOFCallback(hpcd);
 800fe14:	687b      	ldr	r3, [r7, #4]
 800fe16:	0018      	movs	r0, r3
 800fe18:	f009 fc1a 	bl	8019650 <HAL_PCD_SOFCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

    return;
 800fe1c:	e011      	b.n	800fe42 <HAL_PCD_IRQHandler+0x266>
  }

  if ((wIstr & USB_ISTR_ESOF) == USB_ISTR_ESOF)
 800fe1e:	68fa      	ldr	r2, [r7, #12]
 800fe20:	2380      	movs	r3, #128	@ 0x80
 800fe22:	005b      	lsls	r3, r3, #1
 800fe24:	4013      	ands	r3, r2
 800fe26:	d00c      	beq.n	800fe42 <HAL_PCD_IRQHandler+0x266>
  {
    /* clear ESOF flag in ISTR */
    __HAL_PCD_CLEAR_FLAG(hpcd, USB_ISTR_ESOF);
 800fe28:	687b      	ldr	r3, [r7, #4]
 800fe2a:	681b      	ldr	r3, [r3, #0]
 800fe2c:	2244      	movs	r2, #68	@ 0x44
 800fe2e:	5a9b      	ldrh	r3, [r3, r2]
 800fe30:	b29a      	uxth	r2, r3
 800fe32:	687b      	ldr	r3, [r7, #4]
 800fe34:	681b      	ldr	r3, [r3, #0]
 800fe36:	490a      	ldr	r1, [pc, #40]	@ (800fe60 <HAL_PCD_IRQHandler+0x284>)
 800fe38:	400a      	ands	r2, r1
 800fe3a:	b291      	uxth	r1, r2
 800fe3c:	2244      	movs	r2, #68	@ 0x44
 800fe3e:	5299      	strh	r1, [r3, r2]

    return;
 800fe40:	46c0      	nop			@ (mov r8, r8)
  }
}
 800fe42:	46bd      	mov	sp, r7
 800fe44:	b004      	add	sp, #16
 800fe46:	bd80      	pop	{r7, pc}
 800fe48:	fffffbff 	.word	0xfffffbff
 800fe4c:	ffffbfff 	.word	0xffffbfff
 800fe50:	ffffdfff 	.word	0xffffdfff
 800fe54:	ffffefff 	.word	0xffffefff
 800fe58:	fffff7ff 	.word	0xfffff7ff
 800fe5c:	fffffdff 	.word	0xfffffdff
 800fe60:	fffffeff 	.word	0xfffffeff

0800fe64 <HAL_PCD_SetAddress>:
  * @param  hpcd PCD handle
  * @param  address new device address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_SetAddress(PCD_HandleTypeDef *hpcd, uint8_t address)
{
 800fe64:	b580      	push	{r7, lr}
 800fe66:	b082      	sub	sp, #8
 800fe68:	af00      	add	r7, sp, #0
 800fe6a:	6078      	str	r0, [r7, #4]
 800fe6c:	000a      	movs	r2, r1
 800fe6e:	1cfb      	adds	r3, r7, #3
 800fe70:	701a      	strb	r2, [r3, #0]
  __HAL_LOCK(hpcd);
 800fe72:	687a      	ldr	r2, [r7, #4]
 800fe74:	23aa      	movs	r3, #170	@ 0xaa
 800fe76:	009b      	lsls	r3, r3, #2
 800fe78:	5cd3      	ldrb	r3, [r2, r3]
 800fe7a:	2b01      	cmp	r3, #1
 800fe7c:	d101      	bne.n	800fe82 <HAL_PCD_SetAddress+0x1e>
 800fe7e:	2302      	movs	r3, #2
 800fe80:	e017      	b.n	800feb2 <HAL_PCD_SetAddress+0x4e>
 800fe82:	687a      	ldr	r2, [r7, #4]
 800fe84:	23aa      	movs	r3, #170	@ 0xaa
 800fe86:	009b      	lsls	r3, r3, #2
 800fe88:	2101      	movs	r1, #1
 800fe8a:	54d1      	strb	r1, [r2, r3]
  hpcd->USB_Address = address;
 800fe8c:	687b      	ldr	r3, [r7, #4]
 800fe8e:	1cfa      	adds	r2, r7, #3
 800fe90:	2124      	movs	r1, #36	@ 0x24
 800fe92:	7812      	ldrb	r2, [r2, #0]
 800fe94:	545a      	strb	r2, [r3, r1]
  (void)USB_SetDevAddress(hpcd->Instance, address);
 800fe96:	687b      	ldr	r3, [r7, #4]
 800fe98:	681a      	ldr	r2, [r3, #0]
 800fe9a:	1cfb      	adds	r3, r7, #3
 800fe9c:	781b      	ldrb	r3, [r3, #0]
 800fe9e:	0019      	movs	r1, r3
 800fea0:	0010      	movs	r0, r2
 800fea2:	f007 fafb 	bl	801749c <USB_SetDevAddress>
  __HAL_UNLOCK(hpcd);
 800fea6:	687a      	ldr	r2, [r7, #4]
 800fea8:	23aa      	movs	r3, #170	@ 0xaa
 800feaa:	009b      	lsls	r3, r3, #2
 800feac:	2100      	movs	r1, #0
 800feae:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 800feb0:	2300      	movs	r3, #0
}
 800feb2:	0018      	movs	r0, r3
 800feb4:	46bd      	mov	sp, r7
 800feb6:	b002      	add	sp, #8
 800feb8:	bd80      	pop	{r7, pc}

0800feba <HAL_PCD_EP_Open>:
  * @param  ep_type endpoint type
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Open(PCD_HandleTypeDef *hpcd, uint8_t ep_addr,
                                  uint16_t ep_mps, uint8_t ep_type)
{
 800feba:	b590      	push	{r4, r7, lr}
 800febc:	b085      	sub	sp, #20
 800febe:	af00      	add	r7, sp, #0
 800fec0:	6078      	str	r0, [r7, #4]
 800fec2:	000c      	movs	r4, r1
 800fec4:	0010      	movs	r0, r2
 800fec6:	0019      	movs	r1, r3
 800fec8:	1cfb      	adds	r3, r7, #3
 800feca:	1c22      	adds	r2, r4, #0
 800fecc:	701a      	strb	r2, [r3, #0]
 800fece:	003b      	movs	r3, r7
 800fed0:	1c02      	adds	r2, r0, #0
 800fed2:	801a      	strh	r2, [r3, #0]
 800fed4:	1cbb      	adds	r3, r7, #2
 800fed6:	1c0a      	adds	r2, r1, #0
 800fed8:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef  ret = HAL_OK;
 800feda:	230b      	movs	r3, #11
 800fedc:	18fb      	adds	r3, r7, r3
 800fede:	2200      	movs	r2, #0
 800fee0:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800fee2:	1cfb      	adds	r3, r7, #3
 800fee4:	781b      	ldrb	r3, [r3, #0]
 800fee6:	b25b      	sxtb	r3, r3
 800fee8:	2b00      	cmp	r3, #0
 800feea:	da0f      	bge.n	800ff0c <HAL_PCD_EP_Open+0x52>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800feec:	1cfb      	adds	r3, r7, #3
 800feee:	781b      	ldrb	r3, [r3, #0]
 800fef0:	2207      	movs	r2, #7
 800fef2:	4013      	ands	r3, r2
 800fef4:	1c5a      	adds	r2, r3, #1
 800fef6:	0013      	movs	r3, r2
 800fef8:	009b      	lsls	r3, r3, #2
 800fefa:	189b      	adds	r3, r3, r2
 800fefc:	00db      	lsls	r3, r3, #3
 800fefe:	687a      	ldr	r2, [r7, #4]
 800ff00:	18d3      	adds	r3, r2, r3
 800ff02:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ff04:	68fb      	ldr	r3, [r7, #12]
 800ff06:	2201      	movs	r2, #1
 800ff08:	705a      	strb	r2, [r3, #1]
 800ff0a:	e00f      	b.n	800ff2c <HAL_PCD_EP_Open+0x72>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ff0c:	1cfb      	adds	r3, r7, #3
 800ff0e:	781b      	ldrb	r3, [r3, #0]
 800ff10:	2207      	movs	r2, #7
 800ff12:	401a      	ands	r2, r3
 800ff14:	0013      	movs	r3, r2
 800ff16:	009b      	lsls	r3, r3, #2
 800ff18:	189b      	adds	r3, r3, r2
 800ff1a:	00db      	lsls	r3, r3, #3
 800ff1c:	3369      	adds	r3, #105	@ 0x69
 800ff1e:	33ff      	adds	r3, #255	@ 0xff
 800ff20:	687a      	ldr	r2, [r7, #4]
 800ff22:	18d3      	adds	r3, r2, r3
 800ff24:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ff26:	68fb      	ldr	r3, [r7, #12]
 800ff28:	2200      	movs	r2, #0
 800ff2a:	705a      	strb	r2, [r3, #1]
  }

  ep->num = ep_addr & EP_ADDR_MSK;
 800ff2c:	1cfb      	adds	r3, r7, #3
 800ff2e:	781b      	ldrb	r3, [r3, #0]
 800ff30:	2207      	movs	r2, #7
 800ff32:	4013      	ands	r3, r2
 800ff34:	b2da      	uxtb	r2, r3
 800ff36:	68fb      	ldr	r3, [r7, #12]
 800ff38:	701a      	strb	r2, [r3, #0]
  ep->maxpacket = ep_mps;
 800ff3a:	003b      	movs	r3, r7
 800ff3c:	881a      	ldrh	r2, [r3, #0]
 800ff3e:	68fb      	ldr	r3, [r7, #12]
 800ff40:	611a      	str	r2, [r3, #16]
  ep->type = ep_type;
 800ff42:	68fb      	ldr	r3, [r7, #12]
 800ff44:	1cba      	adds	r2, r7, #2
 800ff46:	7812      	ldrb	r2, [r2, #0]
 800ff48:	70da      	strb	r2, [r3, #3]

  /* Set initial data PID. */
  if (ep_type == EP_TYPE_BULK)
 800ff4a:	1cbb      	adds	r3, r7, #2
 800ff4c:	781b      	ldrb	r3, [r3, #0]
 800ff4e:	2b02      	cmp	r3, #2
 800ff50:	d102      	bne.n	800ff58 <HAL_PCD_EP_Open+0x9e>
  {
    ep->data_pid_start = 0U;
 800ff52:	68fb      	ldr	r3, [r7, #12]
 800ff54:	2200      	movs	r2, #0
 800ff56:	711a      	strb	r2, [r3, #4]
  }

  __HAL_LOCK(hpcd);
 800ff58:	687a      	ldr	r2, [r7, #4]
 800ff5a:	23aa      	movs	r3, #170	@ 0xaa
 800ff5c:	009b      	lsls	r3, r3, #2
 800ff5e:	5cd3      	ldrb	r3, [r2, r3]
 800ff60:	2b01      	cmp	r3, #1
 800ff62:	d101      	bne.n	800ff68 <HAL_PCD_EP_Open+0xae>
 800ff64:	2302      	movs	r3, #2
 800ff66:	e013      	b.n	800ff90 <HAL_PCD_EP_Open+0xd6>
 800ff68:	687a      	ldr	r2, [r7, #4]
 800ff6a:	23aa      	movs	r3, #170	@ 0xaa
 800ff6c:	009b      	lsls	r3, r3, #2
 800ff6e:	2101      	movs	r1, #1
 800ff70:	54d1      	strb	r1, [r2, r3]
  (void)USB_ActivateEndpoint(hpcd->Instance, ep);
 800ff72:	687b      	ldr	r3, [r7, #4]
 800ff74:	681b      	ldr	r3, [r3, #0]
 800ff76:	68fa      	ldr	r2, [r7, #12]
 800ff78:	0011      	movs	r1, r2
 800ff7a:	0018      	movs	r0, r3
 800ff7c:	f005 faf2 	bl	8015564 <USB_ActivateEndpoint>
  __HAL_UNLOCK(hpcd);
 800ff80:	687a      	ldr	r2, [r7, #4]
 800ff82:	23aa      	movs	r3, #170	@ 0xaa
 800ff84:	009b      	lsls	r3, r3, #2
 800ff86:	2100      	movs	r1, #0
 800ff88:	54d1      	strb	r1, [r2, r3]

  return ret;
 800ff8a:	230b      	movs	r3, #11
 800ff8c:	18fb      	adds	r3, r7, r3
 800ff8e:	781b      	ldrb	r3, [r3, #0]
}
 800ff90:	0018      	movs	r0, r3
 800ff92:	46bd      	mov	sp, r7
 800ff94:	b005      	add	sp, #20
 800ff96:	bd90      	pop	{r4, r7, pc}

0800ff98 <HAL_PCD_EP_Close>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Close(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 800ff98:	b580      	push	{r7, lr}
 800ff9a:	b084      	sub	sp, #16
 800ff9c:	af00      	add	r7, sp, #0
 800ff9e:	6078      	str	r0, [r7, #4]
 800ffa0:	000a      	movs	r2, r1
 800ffa2:	1cfb      	adds	r3, r7, #3
 800ffa4:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if ((ep_addr & 0x80U) == 0x80U)
 800ffa6:	1cfb      	adds	r3, r7, #3
 800ffa8:	781b      	ldrb	r3, [r3, #0]
 800ffaa:	b25b      	sxtb	r3, r3
 800ffac:	2b00      	cmp	r3, #0
 800ffae:	da0f      	bge.n	800ffd0 <HAL_PCD_EP_Close+0x38>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 800ffb0:	1cfb      	adds	r3, r7, #3
 800ffb2:	781b      	ldrb	r3, [r3, #0]
 800ffb4:	2207      	movs	r2, #7
 800ffb6:	4013      	ands	r3, r2
 800ffb8:	1c5a      	adds	r2, r3, #1
 800ffba:	0013      	movs	r3, r2
 800ffbc:	009b      	lsls	r3, r3, #2
 800ffbe:	189b      	adds	r3, r3, r2
 800ffc0:	00db      	lsls	r3, r3, #3
 800ffc2:	687a      	ldr	r2, [r7, #4]
 800ffc4:	18d3      	adds	r3, r2, r3
 800ffc6:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 800ffc8:	68fb      	ldr	r3, [r7, #12]
 800ffca:	2201      	movs	r2, #1
 800ffcc:	705a      	strb	r2, [r3, #1]
 800ffce:	e00f      	b.n	800fff0 <HAL_PCD_EP_Close+0x58>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 800ffd0:	1cfb      	adds	r3, r7, #3
 800ffd2:	781b      	ldrb	r3, [r3, #0]
 800ffd4:	2207      	movs	r2, #7
 800ffd6:	401a      	ands	r2, r3
 800ffd8:	0013      	movs	r3, r2
 800ffda:	009b      	lsls	r3, r3, #2
 800ffdc:	189b      	adds	r3, r3, r2
 800ffde:	00db      	lsls	r3, r3, #3
 800ffe0:	3369      	adds	r3, #105	@ 0x69
 800ffe2:	33ff      	adds	r3, #255	@ 0xff
 800ffe4:	687a      	ldr	r2, [r7, #4]
 800ffe6:	18d3      	adds	r3, r2, r3
 800ffe8:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 800ffea:	68fb      	ldr	r3, [r7, #12]
 800ffec:	2200      	movs	r2, #0
 800ffee:	705a      	strb	r2, [r3, #1]
  }
  ep->num = ep_addr & EP_ADDR_MSK;
 800fff0:	1cfb      	adds	r3, r7, #3
 800fff2:	781b      	ldrb	r3, [r3, #0]
 800fff4:	2207      	movs	r2, #7
 800fff6:	4013      	ands	r3, r2
 800fff8:	b2da      	uxtb	r2, r3
 800fffa:	68fb      	ldr	r3, [r7, #12]
 800fffc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 800fffe:	687a      	ldr	r2, [r7, #4]
 8010000:	23aa      	movs	r3, #170	@ 0xaa
 8010002:	009b      	lsls	r3, r3, #2
 8010004:	5cd3      	ldrb	r3, [r2, r3]
 8010006:	2b01      	cmp	r3, #1
 8010008:	d101      	bne.n	801000e <HAL_PCD_EP_Close+0x76>
 801000a:	2302      	movs	r3, #2
 801000c:	e011      	b.n	8010032 <HAL_PCD_EP_Close+0x9a>
 801000e:	687a      	ldr	r2, [r7, #4]
 8010010:	23aa      	movs	r3, #170	@ 0xaa
 8010012:	009b      	lsls	r3, r3, #2
 8010014:	2101      	movs	r1, #1
 8010016:	54d1      	strb	r1, [r2, r3]
  (void)USB_DeactivateEndpoint(hpcd->Instance, ep);
 8010018:	687b      	ldr	r3, [r7, #4]
 801001a:	681b      	ldr	r3, [r3, #0]
 801001c:	68fa      	ldr	r2, [r7, #12]
 801001e:	0011      	movs	r1, r2
 8010020:	0018      	movs	r0, r3
 8010022:	f005 fe41 	bl	8015ca8 <USB_DeactivateEndpoint>
  __HAL_UNLOCK(hpcd);
 8010026:	687a      	ldr	r2, [r7, #4]
 8010028:	23aa      	movs	r3, #170	@ 0xaa
 801002a:	009b      	lsls	r3, r3, #2
 801002c:	2100      	movs	r1, #0
 801002e:	54d1      	strb	r1, [r2, r3]
  return HAL_OK;
 8010030:	2300      	movs	r3, #0
}
 8010032:	0018      	movs	r0, r3
 8010034:	46bd      	mov	sp, r7
 8010036:	b004      	add	sp, #16
 8010038:	bd80      	pop	{r7, pc}

0801003a <HAL_PCD_EP_Receive>:
  * @param  pBuf pointer to the reception buffer
  * @param  len amount of data to be received
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Receive(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 801003a:	b580      	push	{r7, lr}
 801003c:	b086      	sub	sp, #24
 801003e:	af00      	add	r7, sp, #0
 8010040:	60f8      	str	r0, [r7, #12]
 8010042:	607a      	str	r2, [r7, #4]
 8010044:	603b      	str	r3, [r7, #0]
 8010046:	200b      	movs	r0, #11
 8010048:	183b      	adds	r3, r7, r0
 801004a:	1c0a      	adds	r2, r1, #0
 801004c:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 801004e:	0001      	movs	r1, r0
 8010050:	187b      	adds	r3, r7, r1
 8010052:	781b      	ldrb	r3, [r3, #0]
 8010054:	2207      	movs	r2, #7
 8010056:	401a      	ands	r2, r3
 8010058:	0013      	movs	r3, r2
 801005a:	009b      	lsls	r3, r3, #2
 801005c:	189b      	adds	r3, r3, r2
 801005e:	00db      	lsls	r3, r3, #3
 8010060:	3369      	adds	r3, #105	@ 0x69
 8010062:	33ff      	adds	r3, #255	@ 0xff
 8010064:	68fa      	ldr	r2, [r7, #12]
 8010066:	18d3      	adds	r3, r2, r3
 8010068:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 801006a:	697b      	ldr	r3, [r7, #20]
 801006c:	687a      	ldr	r2, [r7, #4]
 801006e:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 8010070:	697b      	ldr	r3, [r7, #20]
 8010072:	683a      	ldr	r2, [r7, #0]
 8010074:	619a      	str	r2, [r3, #24]
  ep->xfer_count = 0U;
 8010076:	697b      	ldr	r3, [r7, #20]
 8010078:	2200      	movs	r2, #0
 801007a:	61da      	str	r2, [r3, #28]
  ep->is_in = 0U;
 801007c:	697b      	ldr	r3, [r7, #20]
 801007e:	2200      	movs	r2, #0
 8010080:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 8010082:	187b      	adds	r3, r7, r1
 8010084:	781b      	ldrb	r3, [r3, #0]
 8010086:	2207      	movs	r2, #7
 8010088:	4013      	ands	r3, r2
 801008a:	b2da      	uxtb	r2, r3
 801008c:	697b      	ldr	r3, [r7, #20]
 801008e:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 8010090:	68fb      	ldr	r3, [r7, #12]
 8010092:	681b      	ldr	r3, [r3, #0]
 8010094:	697a      	ldr	r2, [r7, #20]
 8010096:	0011      	movs	r1, r2
 8010098:	0018      	movs	r0, r3
 801009a:	f005 ffc5 	bl	8016028 <USB_EPStartXfer>

  return HAL_OK;
 801009e:	2300      	movs	r3, #0
}
 80100a0:	0018      	movs	r0, r3
 80100a2:	46bd      	mov	sp, r7
 80100a4:	b006      	add	sp, #24
 80100a6:	bd80      	pop	{r7, pc}

080100a8 <HAL_PCD_EP_GetRxCount>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval Data Size
  */
uint32_t HAL_PCD_EP_GetRxCount(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 80100a8:	b580      	push	{r7, lr}
 80100aa:	b082      	sub	sp, #8
 80100ac:	af00      	add	r7, sp, #0
 80100ae:	6078      	str	r0, [r7, #4]
 80100b0:	000a      	movs	r2, r1
 80100b2:	1cfb      	adds	r3, r7, #3
 80100b4:	701a      	strb	r2, [r3, #0]
  return hpcd->OUT_ep[ep_addr & EP_ADDR_MSK].xfer_count;
 80100b6:	1cfb      	adds	r3, r7, #3
 80100b8:	781b      	ldrb	r3, [r3, #0]
 80100ba:	2207      	movs	r2, #7
 80100bc:	401a      	ands	r2, r3
 80100be:	6878      	ldr	r0, [r7, #4]
 80100c0:	23c2      	movs	r3, #194	@ 0xc2
 80100c2:	0059      	lsls	r1, r3, #1
 80100c4:	0013      	movs	r3, r2
 80100c6:	009b      	lsls	r3, r3, #2
 80100c8:	189b      	adds	r3, r3, r2
 80100ca:	00db      	lsls	r3, r3, #3
 80100cc:	18c3      	adds	r3, r0, r3
 80100ce:	185b      	adds	r3, r3, r1
 80100d0:	681b      	ldr	r3, [r3, #0]
}
 80100d2:	0018      	movs	r0, r3
 80100d4:	46bd      	mov	sp, r7
 80100d6:	b002      	add	sp, #8
 80100d8:	bd80      	pop	{r7, pc}

080100da <HAL_PCD_EP_Transmit>:
  * @param  pBuf pointer to the transmission buffer
  * @param  len amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_Transmit(PCD_HandleTypeDef *hpcd, uint8_t ep_addr, uint8_t *pBuf, uint32_t len)
{
 80100da:	b580      	push	{r7, lr}
 80100dc:	b086      	sub	sp, #24
 80100de:	af00      	add	r7, sp, #0
 80100e0:	60f8      	str	r0, [r7, #12]
 80100e2:	607a      	str	r2, [r7, #4]
 80100e4:	603b      	str	r3, [r7, #0]
 80100e6:	200b      	movs	r0, #11
 80100e8:	183b      	adds	r3, r7, r0
 80100ea:	1c0a      	adds	r2, r1, #0
 80100ec:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 80100ee:	183b      	adds	r3, r7, r0
 80100f0:	781b      	ldrb	r3, [r3, #0]
 80100f2:	2207      	movs	r2, #7
 80100f4:	4013      	ands	r3, r2
 80100f6:	1c5a      	adds	r2, r3, #1
 80100f8:	0013      	movs	r3, r2
 80100fa:	009b      	lsls	r3, r3, #2
 80100fc:	189b      	adds	r3, r3, r2
 80100fe:	00db      	lsls	r3, r3, #3
 8010100:	68fa      	ldr	r2, [r7, #12]
 8010102:	18d3      	adds	r3, r2, r3
 8010104:	617b      	str	r3, [r7, #20]

  /*setup and start the Xfer */
  ep->xfer_buff = pBuf;
 8010106:	697b      	ldr	r3, [r7, #20]
 8010108:	687a      	ldr	r2, [r7, #4]
 801010a:	615a      	str	r2, [r3, #20]
  ep->xfer_len = len;
 801010c:	697b      	ldr	r3, [r7, #20]
 801010e:	683a      	ldr	r2, [r7, #0]
 8010110:	619a      	str	r2, [r3, #24]
  ep->xfer_fill_db = 1U;
 8010112:	697b      	ldr	r3, [r7, #20]
 8010114:	2224      	movs	r2, #36	@ 0x24
 8010116:	2101      	movs	r1, #1
 8010118:	5499      	strb	r1, [r3, r2]
  ep->xfer_len_db = len;
 801011a:	697b      	ldr	r3, [r7, #20]
 801011c:	683a      	ldr	r2, [r7, #0]
 801011e:	621a      	str	r2, [r3, #32]
  ep->xfer_count = 0U;
 8010120:	697b      	ldr	r3, [r7, #20]
 8010122:	2200      	movs	r2, #0
 8010124:	61da      	str	r2, [r3, #28]
  ep->is_in = 1U;
 8010126:	697b      	ldr	r3, [r7, #20]
 8010128:	2201      	movs	r2, #1
 801012a:	705a      	strb	r2, [r3, #1]
  ep->num = ep_addr & EP_ADDR_MSK;
 801012c:	183b      	adds	r3, r7, r0
 801012e:	781b      	ldrb	r3, [r3, #0]
 8010130:	2207      	movs	r2, #7
 8010132:	4013      	ands	r3, r2
 8010134:	b2da      	uxtb	r2, r3
 8010136:	697b      	ldr	r3, [r7, #20]
 8010138:	701a      	strb	r2, [r3, #0]

  (void)USB_EPStartXfer(hpcd->Instance, ep);
 801013a:	68fb      	ldr	r3, [r7, #12]
 801013c:	681b      	ldr	r3, [r3, #0]
 801013e:	697a      	ldr	r2, [r7, #20]
 8010140:	0011      	movs	r1, r2
 8010142:	0018      	movs	r0, r3
 8010144:	f005 ff70 	bl	8016028 <USB_EPStartXfer>

  return HAL_OK;
 8010148:	2300      	movs	r3, #0
}
 801014a:	0018      	movs	r0, r3
 801014c:	46bd      	mov	sp, r7
 801014e:	b006      	add	sp, #24
 8010150:	bd80      	pop	{r7, pc}

08010152 <HAL_PCD_EP_SetStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_SetStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 8010152:	b580      	push	{r7, lr}
 8010154:	b084      	sub	sp, #16
 8010156:	af00      	add	r7, sp, #0
 8010158:	6078      	str	r0, [r7, #4]
 801015a:	000a      	movs	r2, r1
 801015c:	1cfb      	adds	r3, r7, #3
 801015e:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & EP_ADDR_MSK) > hpcd->Init.dev_endpoints)
 8010160:	1cfb      	adds	r3, r7, #3
 8010162:	781b      	ldrb	r3, [r3, #0]
 8010164:	2207      	movs	r2, #7
 8010166:	401a      	ands	r2, r3
 8010168:	687b      	ldr	r3, [r7, #4]
 801016a:	685b      	ldr	r3, [r3, #4]
 801016c:	429a      	cmp	r2, r3
 801016e:	d901      	bls.n	8010174 <HAL_PCD_EP_SetStall+0x22>
  {
    return HAL_ERROR;
 8010170:	2301      	movs	r3, #1
 8010172:	e046      	b.n	8010202 <HAL_PCD_EP_SetStall+0xb0>
  }

  if ((0x80U & ep_addr) == 0x80U)
 8010174:	1cfb      	adds	r3, r7, #3
 8010176:	781b      	ldrb	r3, [r3, #0]
 8010178:	b25b      	sxtb	r3, r3
 801017a:	2b00      	cmp	r3, #0
 801017c:	da0f      	bge.n	801019e <HAL_PCD_EP_SetStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801017e:	1cfb      	adds	r3, r7, #3
 8010180:	781b      	ldrb	r3, [r3, #0]
 8010182:	2207      	movs	r2, #7
 8010184:	4013      	ands	r3, r2
 8010186:	1c5a      	adds	r2, r3, #1
 8010188:	0013      	movs	r3, r2
 801018a:	009b      	lsls	r3, r3, #2
 801018c:	189b      	adds	r3, r3, r2
 801018e:	00db      	lsls	r3, r3, #3
 8010190:	687a      	ldr	r2, [r7, #4]
 8010192:	18d3      	adds	r3, r2, r3
 8010194:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 8010196:	68fb      	ldr	r3, [r7, #12]
 8010198:	2201      	movs	r2, #1
 801019a:	705a      	strb	r2, [r3, #1]
 801019c:	e00d      	b.n	80101ba <HAL_PCD_EP_SetStall+0x68>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 801019e:	1cfb      	adds	r3, r7, #3
 80101a0:	781a      	ldrb	r2, [r3, #0]
 80101a2:	0013      	movs	r3, r2
 80101a4:	009b      	lsls	r3, r3, #2
 80101a6:	189b      	adds	r3, r3, r2
 80101a8:	00db      	lsls	r3, r3, #3
 80101aa:	3369      	adds	r3, #105	@ 0x69
 80101ac:	33ff      	adds	r3, #255	@ 0xff
 80101ae:	687a      	ldr	r2, [r7, #4]
 80101b0:	18d3      	adds	r3, r2, r3
 80101b2:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 80101b4:	68fb      	ldr	r3, [r7, #12]
 80101b6:	2200      	movs	r2, #0
 80101b8:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 1U;
 80101ba:	68fb      	ldr	r3, [r7, #12]
 80101bc:	2201      	movs	r2, #1
 80101be:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 80101c0:	1cfb      	adds	r3, r7, #3
 80101c2:	781b      	ldrb	r3, [r3, #0]
 80101c4:	2207      	movs	r2, #7
 80101c6:	4013      	ands	r3, r2
 80101c8:	b2da      	uxtb	r2, r3
 80101ca:	68fb      	ldr	r3, [r7, #12]
 80101cc:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 80101ce:	687a      	ldr	r2, [r7, #4]
 80101d0:	23aa      	movs	r3, #170	@ 0xaa
 80101d2:	009b      	lsls	r3, r3, #2
 80101d4:	5cd3      	ldrb	r3, [r2, r3]
 80101d6:	2b01      	cmp	r3, #1
 80101d8:	d101      	bne.n	80101de <HAL_PCD_EP_SetStall+0x8c>
 80101da:	2302      	movs	r3, #2
 80101dc:	e011      	b.n	8010202 <HAL_PCD_EP_SetStall+0xb0>
 80101de:	687a      	ldr	r2, [r7, #4]
 80101e0:	23aa      	movs	r3, #170	@ 0xaa
 80101e2:	009b      	lsls	r3, r3, #2
 80101e4:	2101      	movs	r1, #1
 80101e6:	54d1      	strb	r1, [r2, r3]

  (void)USB_EPSetStall(hpcd->Instance, ep);
 80101e8:	687b      	ldr	r3, [r7, #4]
 80101ea:	681b      	ldr	r3, [r3, #0]
 80101ec:	68fa      	ldr	r2, [r7, #12]
 80101ee:	0011      	movs	r1, r2
 80101f0:	0018      	movs	r0, r3
 80101f2:	f007 f851 	bl	8017298 <USB_EPSetStall>

  __HAL_UNLOCK(hpcd);
 80101f6:	687a      	ldr	r2, [r7, #4]
 80101f8:	23aa      	movs	r3, #170	@ 0xaa
 80101fa:	009b      	lsls	r3, r3, #2
 80101fc:	2100      	movs	r1, #0
 80101fe:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 8010200:	2300      	movs	r3, #0
}
 8010202:	0018      	movs	r0, r3
 8010204:	46bd      	mov	sp, r7
 8010206:	b004      	add	sp, #16
 8010208:	bd80      	pop	{r7, pc}

0801020a <HAL_PCD_EP_ClrStall>:
  * @param  hpcd PCD handle
  * @param  ep_addr endpoint address
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCD_EP_ClrStall(PCD_HandleTypeDef *hpcd, uint8_t ep_addr)
{
 801020a:	b580      	push	{r7, lr}
 801020c:	b084      	sub	sp, #16
 801020e:	af00      	add	r7, sp, #0
 8010210:	6078      	str	r0, [r7, #4]
 8010212:	000a      	movs	r2, r1
 8010214:	1cfb      	adds	r3, r7, #3
 8010216:	701a      	strb	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  if (((uint32_t)ep_addr & 0x0FU) > hpcd->Init.dev_endpoints)
 8010218:	1cfb      	adds	r3, r7, #3
 801021a:	781b      	ldrb	r3, [r3, #0]
 801021c:	220f      	movs	r2, #15
 801021e:	401a      	ands	r2, r3
 8010220:	687b      	ldr	r3, [r7, #4]
 8010222:	685b      	ldr	r3, [r3, #4]
 8010224:	429a      	cmp	r2, r3
 8010226:	d901      	bls.n	801022c <HAL_PCD_EP_ClrStall+0x22>
  {
    return HAL_ERROR;
 8010228:	2301      	movs	r3, #1
 801022a:	e048      	b.n	80102be <HAL_PCD_EP_ClrStall+0xb4>
  }

  if ((0x80U & ep_addr) == 0x80U)
 801022c:	1cfb      	adds	r3, r7, #3
 801022e:	781b      	ldrb	r3, [r3, #0]
 8010230:	b25b      	sxtb	r3, r3
 8010232:	2b00      	cmp	r3, #0
 8010234:	da0f      	bge.n	8010256 <HAL_PCD_EP_ClrStall+0x4c>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 8010236:	1cfb      	adds	r3, r7, #3
 8010238:	781b      	ldrb	r3, [r3, #0]
 801023a:	2207      	movs	r2, #7
 801023c:	4013      	ands	r3, r2
 801023e:	1c5a      	adds	r2, r3, #1
 8010240:	0013      	movs	r3, r2
 8010242:	009b      	lsls	r3, r3, #2
 8010244:	189b      	adds	r3, r3, r2
 8010246:	00db      	lsls	r3, r3, #3
 8010248:	687a      	ldr	r2, [r7, #4]
 801024a:	18d3      	adds	r3, r2, r3
 801024c:	60fb      	str	r3, [r7, #12]
    ep->is_in = 1U;
 801024e:	68fb      	ldr	r3, [r7, #12]
 8010250:	2201      	movs	r2, #1
 8010252:	705a      	strb	r2, [r3, #1]
 8010254:	e00f      	b.n	8010276 <HAL_PCD_EP_ClrStall+0x6c>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr & EP_ADDR_MSK];
 8010256:	1cfb      	adds	r3, r7, #3
 8010258:	781b      	ldrb	r3, [r3, #0]
 801025a:	2207      	movs	r2, #7
 801025c:	401a      	ands	r2, r3
 801025e:	0013      	movs	r3, r2
 8010260:	009b      	lsls	r3, r3, #2
 8010262:	189b      	adds	r3, r3, r2
 8010264:	00db      	lsls	r3, r3, #3
 8010266:	3369      	adds	r3, #105	@ 0x69
 8010268:	33ff      	adds	r3, #255	@ 0xff
 801026a:	687a      	ldr	r2, [r7, #4]
 801026c:	18d3      	adds	r3, r2, r3
 801026e:	60fb      	str	r3, [r7, #12]
    ep->is_in = 0U;
 8010270:	68fb      	ldr	r3, [r7, #12]
 8010272:	2200      	movs	r2, #0
 8010274:	705a      	strb	r2, [r3, #1]
  }

  ep->is_stall = 0U;
 8010276:	68fb      	ldr	r3, [r7, #12]
 8010278:	2200      	movs	r2, #0
 801027a:	709a      	strb	r2, [r3, #2]
  ep->num = ep_addr & EP_ADDR_MSK;
 801027c:	1cfb      	adds	r3, r7, #3
 801027e:	781b      	ldrb	r3, [r3, #0]
 8010280:	2207      	movs	r2, #7
 8010282:	4013      	ands	r3, r2
 8010284:	b2da      	uxtb	r2, r3
 8010286:	68fb      	ldr	r3, [r7, #12]
 8010288:	701a      	strb	r2, [r3, #0]

  __HAL_LOCK(hpcd);
 801028a:	687a      	ldr	r2, [r7, #4]
 801028c:	23aa      	movs	r3, #170	@ 0xaa
 801028e:	009b      	lsls	r3, r3, #2
 8010290:	5cd3      	ldrb	r3, [r2, r3]
 8010292:	2b01      	cmp	r3, #1
 8010294:	d101      	bne.n	801029a <HAL_PCD_EP_ClrStall+0x90>
 8010296:	2302      	movs	r3, #2
 8010298:	e011      	b.n	80102be <HAL_PCD_EP_ClrStall+0xb4>
 801029a:	687a      	ldr	r2, [r7, #4]
 801029c:	23aa      	movs	r3, #170	@ 0xaa
 801029e:	009b      	lsls	r3, r3, #2
 80102a0:	2101      	movs	r1, #1
 80102a2:	54d1      	strb	r1, [r2, r3]
  (void)USB_EPClearStall(hpcd->Instance, ep);
 80102a4:	687b      	ldr	r3, [r7, #4]
 80102a6:	681b      	ldr	r3, [r3, #0]
 80102a8:	68fa      	ldr	r2, [r7, #12]
 80102aa:	0011      	movs	r1, r2
 80102ac:	0018      	movs	r0, r3
 80102ae:	f007 f843 	bl	8017338 <USB_EPClearStall>
  __HAL_UNLOCK(hpcd);
 80102b2:	687a      	ldr	r2, [r7, #4]
 80102b4:	23aa      	movs	r3, #170	@ 0xaa
 80102b6:	009b      	lsls	r3, r3, #2
 80102b8:	2100      	movs	r1, #0
 80102ba:	54d1      	strb	r1, [r2, r3]

  return HAL_OK;
 80102bc:	2300      	movs	r3, #0
}
 80102be:	0018      	movs	r0, r3
 80102c0:	46bd      	mov	sp, r7
 80102c2:	b004      	add	sp, #16
 80102c4:	bd80      	pop	{r7, pc}
	...

080102c8 <PCD_EP_ISR_Handler>:
  * @brief  This function handles PCD Endpoint interrupt request.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
static HAL_StatusTypeDef PCD_EP_ISR_Handler(PCD_HandleTypeDef *hpcd)
{
 80102c8:	b5b0      	push	{r4, r5, r7, lr}
 80102ca:	b096      	sub	sp, #88	@ 0x58
 80102cc:	af00      	add	r7, sp, #0
 80102ce:	6078      	str	r0, [r7, #4]
#if (USE_USB_DOUBLE_BUFFER != 1U)
  count = 0U;
#endif /* USE_USB_DOUBLE_BUFFER */

  /* stay in loop while pending interrupts */
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 80102d0:	f000 fbec 	bl	8010aac <PCD_EP_ISR_Handler+0x7e4>
  {
    wIstr = hpcd->Instance->ISTR;
 80102d4:	687b      	ldr	r3, [r7, #4]
 80102d6:	681a      	ldr	r2, [r3, #0]
 80102d8:	204e      	movs	r0, #78	@ 0x4e
 80102da:	183b      	adds	r3, r7, r0
 80102dc:	2144      	movs	r1, #68	@ 0x44
 80102de:	5a52      	ldrh	r2, [r2, r1]
 80102e0:	801a      	strh	r2, [r3, #0]

    /* extract highest priority endpoint number */
    epindex = (uint8_t)(wIstr & USB_ISTR_EP_ID);
 80102e2:	183b      	adds	r3, r7, r0
 80102e4:	881b      	ldrh	r3, [r3, #0]
 80102e6:	b2da      	uxtb	r2, r3
 80102e8:	244d      	movs	r4, #77	@ 0x4d
 80102ea:	193b      	adds	r3, r7, r4
 80102ec:	210f      	movs	r1, #15
 80102ee:	400a      	ands	r2, r1
 80102f0:	701a      	strb	r2, [r3, #0]

    if (epindex == 0U)
 80102f2:	193b      	adds	r3, r7, r4
 80102f4:	781b      	ldrb	r3, [r3, #0]
 80102f6:	2b00      	cmp	r3, #0
 80102f8:	d000      	beq.n	80102fc <PCD_EP_ISR_Handler+0x34>
 80102fa:	e18f      	b.n	801061c <PCD_EP_ISR_Handler+0x354>
    {
      /* Decode and service control endpoint interrupt */

      /* DIR bit = origin of the interrupt */
      if ((wIstr & USB_ISTR_DIR) == 0U)
 80102fc:	183b      	adds	r3, r7, r0
 80102fe:	881b      	ldrh	r3, [r3, #0]
 8010300:	2210      	movs	r2, #16
 8010302:	4013      	ands	r3, r2
 8010304:	d155      	bne.n	80103b2 <PCD_EP_ISR_Handler+0xea>
      {
        /* DIR = 0 */

        /* DIR = 0 => IN  int */
        /* DIR = 0 implies that (EP_CTR_TX = 1) always */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8010306:	687b      	ldr	r3, [r7, #4]
 8010308:	681b      	ldr	r3, [r3, #0]
 801030a:	881b      	ldrh	r3, [r3, #0]
 801030c:	b29a      	uxth	r2, r3
 801030e:	200e      	movs	r0, #14
 8010310:	183b      	adds	r3, r7, r0
 8010312:	49bb      	ldr	r1, [pc, #748]	@ (8010600 <PCD_EP_ISR_Handler+0x338>)
 8010314:	400a      	ands	r2, r1
 8010316:	801a      	strh	r2, [r3, #0]
 8010318:	687b      	ldr	r3, [r7, #4]
 801031a:	681b      	ldr	r3, [r3, #0]
 801031c:	183a      	adds	r2, r7, r0
 801031e:	8812      	ldrh	r2, [r2, #0]
 8010320:	49b8      	ldr	r1, [pc, #736]	@ (8010604 <PCD_EP_ISR_Handler+0x33c>)
 8010322:	430a      	orrs	r2, r1
 8010324:	b292      	uxth	r2, r2
 8010326:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->IN_ep[0];
 8010328:	687b      	ldr	r3, [r7, #4]
 801032a:	3328      	adds	r3, #40	@ 0x28
 801032c:	657b      	str	r3, [r7, #84]	@ 0x54

        ep->xfer_count = PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 801032e:	687b      	ldr	r3, [r7, #4]
 8010330:	681b      	ldr	r3, [r3, #0]
 8010332:	2250      	movs	r2, #80	@ 0x50
 8010334:	5a9b      	ldrh	r3, [r3, r2]
 8010336:	b29b      	uxth	r3, r3
 8010338:	001a      	movs	r2, r3
 801033a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801033c:	781b      	ldrb	r3, [r3, #0]
 801033e:	00db      	lsls	r3, r3, #3
 8010340:	18d2      	adds	r2, r2, r3
 8010342:	687b      	ldr	r3, [r7, #4]
 8010344:	681b      	ldr	r3, [r3, #0]
 8010346:	18d3      	adds	r3, r2, r3
 8010348:	4aaf      	ldr	r2, [pc, #700]	@ (8010608 <PCD_EP_ISR_Handler+0x340>)
 801034a:	4694      	mov	ip, r2
 801034c:	4463      	add	r3, ip
 801034e:	881b      	ldrh	r3, [r3, #0]
 8010350:	059b      	lsls	r3, r3, #22
 8010352:	0d9a      	lsrs	r2, r3, #22
 8010354:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010356:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += ep->xfer_count;
 8010358:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801035a:	695a      	ldr	r2, [r3, #20]
 801035c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801035e:	69db      	ldr	r3, [r3, #28]
 8010360:	18d2      	adds	r2, r2, r3
 8010362:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010364:	615a      	str	r2, [r3, #20]

        /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
        hpcd->DataInStageCallback(hpcd, 0U);
#else
        HAL_PCD_DataInStageCallback(hpcd, 0U);
 8010366:	687b      	ldr	r3, [r7, #4]
 8010368:	2100      	movs	r1, #0
 801036a:	0018      	movs	r0, r3
 801036c:	f009 f952 	bl	8019614 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

        if ((hpcd->USB_Address > 0U) && (ep->xfer_len == 0U))
 8010370:	687b      	ldr	r3, [r7, #4]
 8010372:	2224      	movs	r2, #36	@ 0x24
 8010374:	5c9b      	ldrb	r3, [r3, r2]
 8010376:	b2db      	uxtb	r3, r3
 8010378:	2b00      	cmp	r3, #0
 801037a:	d101      	bne.n	8010380 <PCD_EP_ISR_Handler+0xb8>
 801037c:	f000 fb96 	bl	8010aac <PCD_EP_ISR_Handler+0x7e4>
 8010380:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010382:	699b      	ldr	r3, [r3, #24]
 8010384:	2b00      	cmp	r3, #0
 8010386:	d001      	beq.n	801038c <PCD_EP_ISR_Handler+0xc4>
 8010388:	f000 fb90 	bl	8010aac <PCD_EP_ISR_Handler+0x7e4>
        {
          hpcd->Instance->DADDR = ((uint16_t)hpcd->USB_Address | USB_DADDR_EF);
 801038c:	687b      	ldr	r3, [r7, #4]
 801038e:	2224      	movs	r2, #36	@ 0x24
 8010390:	5c9b      	ldrb	r3, [r3, r2]
 8010392:	b2db      	uxtb	r3, r3
 8010394:	2280      	movs	r2, #128	@ 0x80
 8010396:	4252      	negs	r2, r2
 8010398:	4313      	orrs	r3, r2
 801039a:	b2da      	uxtb	r2, r3
 801039c:	687b      	ldr	r3, [r7, #4]
 801039e:	681b      	ldr	r3, [r3, #0]
 80103a0:	0011      	movs	r1, r2
 80103a2:	224c      	movs	r2, #76	@ 0x4c
 80103a4:	5299      	strh	r1, [r3, r2]
          hpcd->USB_Address = 0U;
 80103a6:	687b      	ldr	r3, [r7, #4]
 80103a8:	2224      	movs	r2, #36	@ 0x24
 80103aa:	2100      	movs	r1, #0
 80103ac:	5499      	strb	r1, [r3, r2]
 80103ae:	f000 fb7d 	bl	8010aac <PCD_EP_ISR_Handler+0x7e4>
      {
        /* DIR = 1 */

        /* DIR = 1 & CTR_RX => SETUP or OUT int */
        /* DIR = 1 & (CTR_TX | CTR_RX) => 2 int pending */
        ep = &hpcd->OUT_ep[0];
 80103b2:	687b      	ldr	r3, [r7, #4]
 80103b4:	3369      	adds	r3, #105	@ 0x69
 80103b6:	33ff      	adds	r3, #255	@ 0xff
 80103b8:	657b      	str	r3, [r7, #84]	@ 0x54
        wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80103ba:	687b      	ldr	r3, [r7, #4]
 80103bc:	681a      	ldr	r2, [r3, #0]
 80103be:	214a      	movs	r1, #74	@ 0x4a
 80103c0:	187b      	adds	r3, r7, r1
 80103c2:	8812      	ldrh	r2, [r2, #0]
 80103c4:	801a      	strh	r2, [r3, #0]

        if ((wEPVal & USB_EP_SETUP) != 0U)
 80103c6:	187b      	adds	r3, r7, r1
 80103c8:	881a      	ldrh	r2, [r3, #0]
 80103ca:	2380      	movs	r3, #128	@ 0x80
 80103cc:	011b      	lsls	r3, r3, #4
 80103ce:	4013      	ands	r3, r2
 80103d0:	d037      	beq.n	8010442 <PCD_EP_ISR_Handler+0x17a>
        {
          /* Get SETUP Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 80103d2:	687b      	ldr	r3, [r7, #4]
 80103d4:	681b      	ldr	r3, [r3, #0]
 80103d6:	2250      	movs	r2, #80	@ 0x50
 80103d8:	5a9b      	ldrh	r3, [r3, r2]
 80103da:	b29b      	uxth	r3, r3
 80103dc:	001a      	movs	r2, r3
 80103de:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80103e0:	781b      	ldrb	r3, [r3, #0]
 80103e2:	00db      	lsls	r3, r3, #3
 80103e4:	18d2      	adds	r2, r2, r3
 80103e6:	687b      	ldr	r3, [r7, #4]
 80103e8:	681b      	ldr	r3, [r3, #0]
 80103ea:	18d3      	adds	r3, r2, r3
 80103ec:	4a87      	ldr	r2, [pc, #540]	@ (801060c <PCD_EP_ISR_Handler+0x344>)
 80103ee:	4694      	mov	ip, r2
 80103f0:	4463      	add	r3, ip
 80103f2:	881b      	ldrh	r3, [r3, #0]
 80103f4:	059b      	lsls	r3, r3, #22
 80103f6:	0d9a      	lsrs	r2, r3, #22
 80103f8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80103fa:	61da      	str	r2, [r3, #28]

          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 80103fc:	687b      	ldr	r3, [r7, #4]
 80103fe:	6818      	ldr	r0, [r3, #0]
 8010400:	687b      	ldr	r3, [r7, #4]
 8010402:	22ac      	movs	r2, #172	@ 0xac
 8010404:	0092      	lsls	r2, r2, #2
 8010406:	1899      	adds	r1, r3, r2
 8010408:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801040a:	88da      	ldrh	r2, [r3, #6]
                      ep->pmaadress, (uint16_t)ep->xfer_count);
 801040c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801040e:	69db      	ldr	r3, [r3, #28]
          USB_ReadPMA(hpcd->Instance, (uint8_t *)hpcd->Setup,
 8010410:	b29b      	uxth	r3, r3
 8010412:	f007 f8c4 	bl	801759e <USB_ReadPMA>

          /* SETUP bit kept frozen while CTR_RX = 1 */
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8010416:	687b      	ldr	r3, [r7, #4]
 8010418:	681b      	ldr	r3, [r3, #0]
 801041a:	881b      	ldrh	r3, [r3, #0]
 801041c:	b29a      	uxth	r2, r3
 801041e:	2010      	movs	r0, #16
 8010420:	183b      	adds	r3, r7, r0
 8010422:	497b      	ldr	r1, [pc, #492]	@ (8010610 <PCD_EP_ISR_Handler+0x348>)
 8010424:	400a      	ands	r2, r1
 8010426:	801a      	strh	r2, [r3, #0]
 8010428:	687b      	ldr	r3, [r7, #4]
 801042a:	681b      	ldr	r3, [r3, #0]
 801042c:	183a      	adds	r2, r7, r0
 801042e:	8812      	ldrh	r2, [r2, #0]
 8010430:	2180      	movs	r1, #128	@ 0x80
 8010432:	430a      	orrs	r2, r1
 8010434:	b292      	uxth	r2, r2
 8010436:	801a      	strh	r2, [r3, #0]

          /* Process SETUP Packet*/
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->SetupStageCallback(hpcd);
#else
          HAL_PCD_SetupStageCallback(hpcd);
 8010438:	687b      	ldr	r3, [r7, #4]
 801043a:	0018      	movs	r0, r3
 801043c:	f009 f8b4 	bl	80195a8 <HAL_PCD_SetupStageCallback>
 8010440:	e334      	b.n	8010aac <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8010442:	234a      	movs	r3, #74	@ 0x4a
 8010444:	18fb      	adds	r3, r7, r3
 8010446:	2200      	movs	r2, #0
 8010448:	5e9b      	ldrsh	r3, [r3, r2]
 801044a:	2b00      	cmp	r3, #0
 801044c:	db00      	blt.n	8010450 <PCD_EP_ISR_Handler+0x188>
 801044e:	e32d      	b.n	8010aac <PCD_EP_ISR_Handler+0x7e4>
        {
          PCD_CLEAR_RX_EP_CTR(hpcd->Instance, PCD_ENDP0);
 8010450:	687b      	ldr	r3, [r7, #4]
 8010452:	681b      	ldr	r3, [r3, #0]
 8010454:	881b      	ldrh	r3, [r3, #0]
 8010456:	b29a      	uxth	r2, r3
 8010458:	201e      	movs	r0, #30
 801045a:	183b      	adds	r3, r7, r0
 801045c:	496c      	ldr	r1, [pc, #432]	@ (8010610 <PCD_EP_ISR_Handler+0x348>)
 801045e:	400a      	ands	r2, r1
 8010460:	801a      	strh	r2, [r3, #0]
 8010462:	687b      	ldr	r3, [r7, #4]
 8010464:	681b      	ldr	r3, [r3, #0]
 8010466:	183a      	adds	r2, r7, r0
 8010468:	8812      	ldrh	r2, [r2, #0]
 801046a:	2180      	movs	r1, #128	@ 0x80
 801046c:	430a      	orrs	r2, r1
 801046e:	b292      	uxth	r2, r2
 8010470:	801a      	strh	r2, [r3, #0]

          /* Get Control Data OUT Packet */
          ep->xfer_count = PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8010472:	687b      	ldr	r3, [r7, #4]
 8010474:	681b      	ldr	r3, [r3, #0]
 8010476:	2250      	movs	r2, #80	@ 0x50
 8010478:	5a9b      	ldrh	r3, [r3, r2]
 801047a:	b29b      	uxth	r3, r3
 801047c:	001a      	movs	r2, r3
 801047e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010480:	781b      	ldrb	r3, [r3, #0]
 8010482:	00db      	lsls	r3, r3, #3
 8010484:	18d2      	adds	r2, r2, r3
 8010486:	687b      	ldr	r3, [r7, #4]
 8010488:	681b      	ldr	r3, [r3, #0]
 801048a:	18d3      	adds	r3, r2, r3
 801048c:	4a5f      	ldr	r2, [pc, #380]	@ (801060c <PCD_EP_ISR_Handler+0x344>)
 801048e:	4694      	mov	ip, r2
 8010490:	4463      	add	r3, ip
 8010492:	881b      	ldrh	r3, [r3, #0]
 8010494:	059b      	lsls	r3, r3, #22
 8010496:	0d9a      	lsrs	r2, r3, #22
 8010498:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801049a:	61da      	str	r2, [r3, #28]

          if ((ep->xfer_count != 0U) && (ep->xfer_buff != 0U))
 801049c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801049e:	69db      	ldr	r3, [r3, #28]
 80104a0:	2b00      	cmp	r3, #0
 80104a2:	d01a      	beq.n	80104da <PCD_EP_ISR_Handler+0x212>
 80104a4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80104a6:	695b      	ldr	r3, [r3, #20]
 80104a8:	2b00      	cmp	r3, #0
 80104aa:	d016      	beq.n	80104da <PCD_EP_ISR_Handler+0x212>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80104ac:	687b      	ldr	r3, [r7, #4]
 80104ae:	6818      	ldr	r0, [r3, #0]
 80104b0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80104b2:	6959      	ldr	r1, [r3, #20]
 80104b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80104b6:	88da      	ldrh	r2, [r3, #6]
                        ep->pmaadress, (uint16_t)ep->xfer_count);
 80104b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80104ba:	69db      	ldr	r3, [r3, #28]
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff,
 80104bc:	b29b      	uxth	r3, r3
 80104be:	f007 f86e 	bl	801759e <USB_ReadPMA>

            ep->xfer_buff += ep->xfer_count;
 80104c2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80104c4:	695a      	ldr	r2, [r3, #20]
 80104c6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80104c8:	69db      	ldr	r3, [r3, #28]
 80104ca:	18d2      	adds	r2, r2, r3
 80104cc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80104ce:	615a      	str	r2, [r3, #20]

            /* Process Control Data OUT Packet */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
            hpcd->DataOutStageCallback(hpcd, 0U);
#else
            HAL_PCD_DataOutStageCallback(hpcd, 0U);
 80104d0:	687b      	ldr	r3, [r7, #4]
 80104d2:	2100      	movs	r1, #0
 80104d4:	0018      	movs	r0, r3
 80104d6:	f009 f87c 	bl	80195d2 <HAL_PCD_DataOutStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
          }

          wEPVal = (uint16_t)PCD_GET_ENDPOINT(hpcd->Instance, PCD_ENDP0);
 80104da:	687b      	ldr	r3, [r7, #4]
 80104dc:	681a      	ldr	r2, [r3, #0]
 80104de:	214a      	movs	r1, #74	@ 0x4a
 80104e0:	187b      	adds	r3, r7, r1
 80104e2:	8812      	ldrh	r2, [r2, #0]
 80104e4:	801a      	strh	r2, [r3, #0]

          if (((wEPVal & USB_EP_SETUP) == 0U) && ((wEPVal & USB_EP_RX_STRX) != USB_EP_RX_VALID))
 80104e6:	187b      	adds	r3, r7, r1
 80104e8:	881a      	ldrh	r2, [r3, #0]
 80104ea:	2380      	movs	r3, #128	@ 0x80
 80104ec:	011b      	lsls	r3, r3, #4
 80104ee:	4013      	ands	r3, r2
 80104f0:	d000      	beq.n	80104f4 <PCD_EP_ISR_Handler+0x22c>
 80104f2:	e2db      	b.n	8010aac <PCD_EP_ISR_Handler+0x7e4>
 80104f4:	187b      	adds	r3, r7, r1
 80104f6:	881a      	ldrh	r2, [r3, #0]
 80104f8:	23c0      	movs	r3, #192	@ 0xc0
 80104fa:	019b      	lsls	r3, r3, #6
 80104fc:	401a      	ands	r2, r3
 80104fe:	23c0      	movs	r3, #192	@ 0xc0
 8010500:	019b      	lsls	r3, r3, #6
 8010502:	429a      	cmp	r2, r3
 8010504:	d100      	bne.n	8010508 <PCD_EP_ISR_Handler+0x240>
 8010506:	e2d1      	b.n	8010aac <PCD_EP_ISR_Handler+0x7e4>
          {
            PCD_SET_EP_RX_CNT(hpcd->Instance, PCD_ENDP0, ep->maxpacket);
 8010508:	687b      	ldr	r3, [r7, #4]
 801050a:	681b      	ldr	r3, [r3, #0]
 801050c:	61bb      	str	r3, [r7, #24]
 801050e:	687b      	ldr	r3, [r7, #4]
 8010510:	681b      	ldr	r3, [r3, #0]
 8010512:	2250      	movs	r2, #80	@ 0x50
 8010514:	5a9b      	ldrh	r3, [r3, r2]
 8010516:	b29b      	uxth	r3, r3
 8010518:	001a      	movs	r2, r3
 801051a:	69bb      	ldr	r3, [r7, #24]
 801051c:	189b      	adds	r3, r3, r2
 801051e:	61bb      	str	r3, [r7, #24]
 8010520:	69bb      	ldr	r3, [r7, #24]
 8010522:	4a3a      	ldr	r2, [pc, #232]	@ (801060c <PCD_EP_ISR_Handler+0x344>)
 8010524:	4694      	mov	ip, r2
 8010526:	4463      	add	r3, ip
 8010528:	617b      	str	r3, [r7, #20]
 801052a:	697b      	ldr	r3, [r7, #20]
 801052c:	881b      	ldrh	r3, [r3, #0]
 801052e:	b29b      	uxth	r3, r3
 8010530:	059b      	lsls	r3, r3, #22
 8010532:	0d9b      	lsrs	r3, r3, #22
 8010534:	b29a      	uxth	r2, r3
 8010536:	697b      	ldr	r3, [r7, #20]
 8010538:	801a      	strh	r2, [r3, #0]
 801053a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801053c:	691b      	ldr	r3, [r3, #16]
 801053e:	2b3e      	cmp	r3, #62	@ 0x3e
 8010540:	d91a      	bls.n	8010578 <PCD_EP_ISR_Handler+0x2b0>
 8010542:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010544:	691b      	ldr	r3, [r3, #16]
 8010546:	095b      	lsrs	r3, r3, #5
 8010548:	647b      	str	r3, [r7, #68]	@ 0x44
 801054a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801054c:	691b      	ldr	r3, [r3, #16]
 801054e:	221f      	movs	r2, #31
 8010550:	4013      	ands	r3, r2
 8010552:	d102      	bne.n	801055a <PCD_EP_ISR_Handler+0x292>
 8010554:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010556:	3b01      	subs	r3, #1
 8010558:	647b      	str	r3, [r7, #68]	@ 0x44
 801055a:	697b      	ldr	r3, [r7, #20]
 801055c:	881b      	ldrh	r3, [r3, #0]
 801055e:	b29a      	uxth	r2, r3
 8010560:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8010562:	b29b      	uxth	r3, r3
 8010564:	029b      	lsls	r3, r3, #10
 8010566:	b29b      	uxth	r3, r3
 8010568:	4313      	orrs	r3, r2
 801056a:	b29b      	uxth	r3, r3
 801056c:	4a25      	ldr	r2, [pc, #148]	@ (8010604 <PCD_EP_ISR_Handler+0x33c>)
 801056e:	4313      	orrs	r3, r2
 8010570:	b29a      	uxth	r2, r3
 8010572:	697b      	ldr	r3, [r7, #20]
 8010574:	801a      	strh	r2, [r3, #0]
 8010576:	e023      	b.n	80105c0 <PCD_EP_ISR_Handler+0x2f8>
 8010578:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801057a:	691b      	ldr	r3, [r3, #16]
 801057c:	2b00      	cmp	r3, #0
 801057e:	d108      	bne.n	8010592 <PCD_EP_ISR_Handler+0x2ca>
 8010580:	697b      	ldr	r3, [r7, #20]
 8010582:	881b      	ldrh	r3, [r3, #0]
 8010584:	b29b      	uxth	r3, r3
 8010586:	4a1f      	ldr	r2, [pc, #124]	@ (8010604 <PCD_EP_ISR_Handler+0x33c>)
 8010588:	4313      	orrs	r3, r2
 801058a:	b29a      	uxth	r2, r3
 801058c:	697b      	ldr	r3, [r7, #20]
 801058e:	801a      	strh	r2, [r3, #0]
 8010590:	e016      	b.n	80105c0 <PCD_EP_ISR_Handler+0x2f8>
 8010592:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010594:	691b      	ldr	r3, [r3, #16]
 8010596:	085b      	lsrs	r3, r3, #1
 8010598:	647b      	str	r3, [r7, #68]	@ 0x44
 801059a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801059c:	691b      	ldr	r3, [r3, #16]
 801059e:	2201      	movs	r2, #1
 80105a0:	4013      	ands	r3, r2
 80105a2:	d002      	beq.n	80105aa <PCD_EP_ISR_Handler+0x2e2>
 80105a4:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80105a6:	3301      	adds	r3, #1
 80105a8:	647b      	str	r3, [r7, #68]	@ 0x44
 80105aa:	697b      	ldr	r3, [r7, #20]
 80105ac:	881b      	ldrh	r3, [r3, #0]
 80105ae:	b29a      	uxth	r2, r3
 80105b0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80105b2:	b29b      	uxth	r3, r3
 80105b4:	029b      	lsls	r3, r3, #10
 80105b6:	b29b      	uxth	r3, r3
 80105b8:	4313      	orrs	r3, r2
 80105ba:	b29a      	uxth	r2, r3
 80105bc:	697b      	ldr	r3, [r7, #20]
 80105be:	801a      	strh	r2, [r3, #0]
            PCD_SET_EP_RX_STATUS(hpcd->Instance, PCD_ENDP0, USB_EP_RX_VALID);
 80105c0:	687b      	ldr	r3, [r7, #4]
 80105c2:	681b      	ldr	r3, [r3, #0]
 80105c4:	881b      	ldrh	r3, [r3, #0]
 80105c6:	b29a      	uxth	r2, r3
 80105c8:	2012      	movs	r0, #18
 80105ca:	183b      	adds	r3, r7, r0
 80105cc:	4911      	ldr	r1, [pc, #68]	@ (8010614 <PCD_EP_ISR_Handler+0x34c>)
 80105ce:	400a      	ands	r2, r1
 80105d0:	801a      	strh	r2, [r3, #0]
 80105d2:	183b      	adds	r3, r7, r0
 80105d4:	183a      	adds	r2, r7, r0
 80105d6:	8812      	ldrh	r2, [r2, #0]
 80105d8:	2180      	movs	r1, #128	@ 0x80
 80105da:	0149      	lsls	r1, r1, #5
 80105dc:	404a      	eors	r2, r1
 80105de:	801a      	strh	r2, [r3, #0]
 80105e0:	183b      	adds	r3, r7, r0
 80105e2:	183a      	adds	r2, r7, r0
 80105e4:	8812      	ldrh	r2, [r2, #0]
 80105e6:	2180      	movs	r1, #128	@ 0x80
 80105e8:	0189      	lsls	r1, r1, #6
 80105ea:	404a      	eors	r2, r1
 80105ec:	801a      	strh	r2, [r3, #0]
 80105ee:	687b      	ldr	r3, [r7, #4]
 80105f0:	681b      	ldr	r3, [r3, #0]
 80105f2:	183a      	adds	r2, r7, r0
 80105f4:	8812      	ldrh	r2, [r2, #0]
 80105f6:	4908      	ldr	r1, [pc, #32]	@ (8010618 <PCD_EP_ISR_Handler+0x350>)
 80105f8:	430a      	orrs	r2, r1
 80105fa:	b292      	uxth	r2, r2
 80105fc:	801a      	strh	r2, [r3, #0]
 80105fe:	e255      	b.n	8010aac <PCD_EP_ISR_Handler+0x7e4>
 8010600:	ffff8f0f 	.word	0xffff8f0f
 8010604:	ffff8000 	.word	0xffff8000
 8010608:	00000402 	.word	0x00000402
 801060c:	00000406 	.word	0x00000406
 8010610:	00000f8f 	.word	0x00000f8f
 8010614:	ffffbf8f 	.word	0xffffbf8f
 8010618:	ffff8080 	.word	0xffff8080
    }
    else
    {
      /* Decode and service non control endpoints interrupt */
      /* process related endpoint register */
      wEPVal = PCD_GET_ENDPOINT(hpcd->Instance, epindex);
 801061c:	687b      	ldr	r3, [r7, #4]
 801061e:	681b      	ldr	r3, [r3, #0]
 8010620:	001a      	movs	r2, r3
 8010622:	204d      	movs	r0, #77	@ 0x4d
 8010624:	183b      	adds	r3, r7, r0
 8010626:	781b      	ldrb	r3, [r3, #0]
 8010628:	009b      	lsls	r3, r3, #2
 801062a:	18d2      	adds	r2, r2, r3
 801062c:	214a      	movs	r1, #74	@ 0x4a
 801062e:	187b      	adds	r3, r7, r1
 8010630:	8812      	ldrh	r2, [r2, #0]
 8010632:	801a      	strh	r2, [r3, #0]

      if ((wEPVal & USB_EP_CTR_RX) != 0U)
 8010634:	187b      	adds	r3, r7, r1
 8010636:	2200      	movs	r2, #0
 8010638:	5e9b      	ldrsh	r3, [r3, r2]
 801063a:	2b00      	cmp	r3, #0
 801063c:	db00      	blt.n	8010640 <PCD_EP_ISR_Handler+0x378>
 801063e:	e0fa      	b.n	8010836 <PCD_EP_ISR_Handler+0x56e>
      {
        /* clear int flag */
        PCD_CLEAR_RX_EP_CTR(hpcd->Instance, epindex);
 8010640:	687b      	ldr	r3, [r7, #4]
 8010642:	681b      	ldr	r3, [r3, #0]
 8010644:	001a      	movs	r2, r3
 8010646:	183b      	adds	r3, r7, r0
 8010648:	781b      	ldrb	r3, [r3, #0]
 801064a:	009b      	lsls	r3, r3, #2
 801064c:	18d3      	adds	r3, r2, r3
 801064e:	881b      	ldrh	r3, [r3, #0]
 8010650:	b29a      	uxth	r2, r3
 8010652:	2448      	movs	r4, #72	@ 0x48
 8010654:	193b      	adds	r3, r7, r4
 8010656:	49d1      	ldr	r1, [pc, #836]	@ (801099c <PCD_EP_ISR_Handler+0x6d4>)
 8010658:	400a      	ands	r2, r1
 801065a:	801a      	strh	r2, [r3, #0]
 801065c:	687b      	ldr	r3, [r7, #4]
 801065e:	681b      	ldr	r3, [r3, #0]
 8010660:	001a      	movs	r2, r3
 8010662:	183b      	adds	r3, r7, r0
 8010664:	781b      	ldrb	r3, [r3, #0]
 8010666:	009b      	lsls	r3, r3, #2
 8010668:	18d3      	adds	r3, r2, r3
 801066a:	193a      	adds	r2, r7, r4
 801066c:	8812      	ldrh	r2, [r2, #0]
 801066e:	2180      	movs	r1, #128	@ 0x80
 8010670:	430a      	orrs	r2, r1
 8010672:	b292      	uxth	r2, r2
 8010674:	801a      	strh	r2, [r3, #0]
        ep = &hpcd->OUT_ep[epindex];
 8010676:	183b      	adds	r3, r7, r0
 8010678:	781a      	ldrb	r2, [r3, #0]
 801067a:	0013      	movs	r3, r2
 801067c:	009b      	lsls	r3, r3, #2
 801067e:	189b      	adds	r3, r3, r2
 8010680:	00db      	lsls	r3, r3, #3
 8010682:	3369      	adds	r3, #105	@ 0x69
 8010684:	33ff      	adds	r3, #255	@ 0xff
 8010686:	687a      	ldr	r2, [r7, #4]
 8010688:	18d3      	adds	r3, r2, r3
 801068a:	657b      	str	r3, [r7, #84]	@ 0x54

        /* OUT Single Buffering */
        if (ep->doublebuffer == 0U)
 801068c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801068e:	7b1b      	ldrb	r3, [r3, #12]
 8010690:	2b00      	cmp	r3, #0
 8010692:	d125      	bne.n	80106e0 <PCD_EP_ISR_Handler+0x418>
        {
          count = (uint16_t)PCD_GET_EP_RX_CNT(hpcd->Instance, ep->num);
 8010694:	687b      	ldr	r3, [r7, #4]
 8010696:	681b      	ldr	r3, [r3, #0]
 8010698:	2250      	movs	r2, #80	@ 0x50
 801069a:	5a9b      	ldrh	r3, [r3, r2]
 801069c:	b29b      	uxth	r3, r3
 801069e:	001a      	movs	r2, r3
 80106a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80106a2:	781b      	ldrb	r3, [r3, #0]
 80106a4:	00db      	lsls	r3, r3, #3
 80106a6:	18d2      	adds	r2, r2, r3
 80106a8:	687b      	ldr	r3, [r7, #4]
 80106aa:	681b      	ldr	r3, [r3, #0]
 80106ac:	18d3      	adds	r3, r2, r3
 80106ae:	4abc      	ldr	r2, [pc, #752]	@ (80109a0 <PCD_EP_ISR_Handler+0x6d8>)
 80106b0:	4694      	mov	ip, r2
 80106b2:	4463      	add	r3, ip
 80106b4:	881a      	ldrh	r2, [r3, #0]
 80106b6:	2450      	movs	r4, #80	@ 0x50
 80106b8:	193b      	adds	r3, r7, r4
 80106ba:	0592      	lsls	r2, r2, #22
 80106bc:	0d92      	lsrs	r2, r2, #22
 80106be:	801a      	strh	r2, [r3, #0]

          if (count != 0U)
 80106c0:	193b      	adds	r3, r7, r4
 80106c2:	881b      	ldrh	r3, [r3, #0]
 80106c4:	2b00      	cmp	r3, #0
 80106c6:	d100      	bne.n	80106ca <PCD_EP_ISR_Handler+0x402>
 80106c8:	e08d      	b.n	80107e6 <PCD_EP_ISR_Handler+0x51e>
          {
            USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaadress, count);
 80106ca:	687b      	ldr	r3, [r7, #4]
 80106cc:	6818      	ldr	r0, [r3, #0]
 80106ce:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80106d0:	6959      	ldr	r1, [r3, #20]
 80106d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80106d4:	88da      	ldrh	r2, [r3, #6]
 80106d6:	193b      	adds	r3, r7, r4
 80106d8:	881b      	ldrh	r3, [r3, #0]
 80106da:	f006 ff60 	bl	801759e <USB_ReadPMA>
 80106de:	e082      	b.n	80107e6 <PCD_EP_ISR_Handler+0x51e>
        }
#if (USE_USB_DOUBLE_BUFFER == 1U)
        else
        {
          /* manage double buffer bulk out */
          if (ep->type == EP_TYPE_BULK)
 80106e0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80106e2:	78db      	ldrb	r3, [r3, #3]
 80106e4:	2b02      	cmp	r3, #2
 80106e6:	d10c      	bne.n	8010702 <PCD_EP_ISR_Handler+0x43a>
          {
            count = HAL_PCD_EP_DB_Receive(hpcd, ep, wEPVal);
 80106e8:	2350      	movs	r3, #80	@ 0x50
 80106ea:	18fc      	adds	r4, r7, r3
 80106ec:	234a      	movs	r3, #74	@ 0x4a
 80106ee:	18fb      	adds	r3, r7, r3
 80106f0:	881a      	ldrh	r2, [r3, #0]
 80106f2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 80106f4:	687b      	ldr	r3, [r7, #4]
 80106f6:	0018      	movs	r0, r3
 80106f8:	f000 f9ec 	bl	8010ad4 <HAL_PCD_EP_DB_Receive>
 80106fc:	0003      	movs	r3, r0
 80106fe:	8023      	strh	r3, [r4, #0]
 8010700:	e071      	b.n	80107e6 <PCD_EP_ISR_Handler+0x51e>
          }
          else /* manage double buffer iso out */
          {
            /* free EP OUT Buffer */
            PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8010702:	687b      	ldr	r3, [r7, #4]
 8010704:	681b      	ldr	r3, [r3, #0]
 8010706:	001a      	movs	r2, r3
 8010708:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801070a:	781b      	ldrb	r3, [r3, #0]
 801070c:	009b      	lsls	r3, r3, #2
 801070e:	18d3      	adds	r3, r2, r3
 8010710:	881b      	ldrh	r3, [r3, #0]
 8010712:	b29a      	uxth	r2, r3
 8010714:	2052      	movs	r0, #82	@ 0x52
 8010716:	183b      	adds	r3, r7, r0
 8010718:	49a2      	ldr	r1, [pc, #648]	@ (80109a4 <PCD_EP_ISR_Handler+0x6dc>)
 801071a:	400a      	ands	r2, r1
 801071c:	801a      	strh	r2, [r3, #0]
 801071e:	687b      	ldr	r3, [r7, #4]
 8010720:	681b      	ldr	r3, [r3, #0]
 8010722:	001a      	movs	r2, r3
 8010724:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010726:	781b      	ldrb	r3, [r3, #0]
 8010728:	009b      	lsls	r3, r3, #2
 801072a:	18d3      	adds	r3, r2, r3
 801072c:	183a      	adds	r2, r7, r0
 801072e:	8812      	ldrh	r2, [r2, #0]
 8010730:	499d      	ldr	r1, [pc, #628]	@ (80109a8 <PCD_EP_ISR_Handler+0x6e0>)
 8010732:	430a      	orrs	r2, r1
 8010734:	b292      	uxth	r2, r2
 8010736:	801a      	strh	r2, [r3, #0]

            if ((PCD_GET_ENDPOINT(hpcd->Instance, ep->num) & USB_EP_DTOG_RX) != 0U)
 8010738:	687b      	ldr	r3, [r7, #4]
 801073a:	681b      	ldr	r3, [r3, #0]
 801073c:	001a      	movs	r2, r3
 801073e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010740:	781b      	ldrb	r3, [r3, #0]
 8010742:	009b      	lsls	r3, r3, #2
 8010744:	18d3      	adds	r3, r2, r3
 8010746:	881b      	ldrh	r3, [r3, #0]
 8010748:	b29b      	uxth	r3, r3
 801074a:	001a      	movs	r2, r3
 801074c:	2380      	movs	r3, #128	@ 0x80
 801074e:	01db      	lsls	r3, r3, #7
 8010750:	4013      	ands	r3, r2
 8010752:	d024      	beq.n	801079e <PCD_EP_ISR_Handler+0x4d6>
            {
              /* read from endpoint BUF0Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8010754:	687b      	ldr	r3, [r7, #4]
 8010756:	681b      	ldr	r3, [r3, #0]
 8010758:	2250      	movs	r2, #80	@ 0x50
 801075a:	5a9b      	ldrh	r3, [r3, r2]
 801075c:	b29b      	uxth	r3, r3
 801075e:	001a      	movs	r2, r3
 8010760:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010762:	781b      	ldrb	r3, [r3, #0]
 8010764:	00db      	lsls	r3, r3, #3
 8010766:	18d2      	adds	r2, r2, r3
 8010768:	687b      	ldr	r3, [r7, #4]
 801076a:	681b      	ldr	r3, [r3, #0]
 801076c:	18d3      	adds	r3, r2, r3
 801076e:	4a8f      	ldr	r2, [pc, #572]	@ (80109ac <PCD_EP_ISR_Handler+0x6e4>)
 8010770:	4694      	mov	ip, r2
 8010772:	4463      	add	r3, ip
 8010774:	881a      	ldrh	r2, [r3, #0]
 8010776:	2450      	movs	r4, #80	@ 0x50
 8010778:	193b      	adds	r3, r7, r4
 801077a:	0592      	lsls	r2, r2, #22
 801077c:	0d92      	lsrs	r2, r2, #22
 801077e:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 8010780:	193b      	adds	r3, r7, r4
 8010782:	881b      	ldrh	r3, [r3, #0]
 8010784:	2b00      	cmp	r3, #0
 8010786:	d02e      	beq.n	80107e6 <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8010788:	687b      	ldr	r3, [r7, #4]
 801078a:	6818      	ldr	r0, [r3, #0]
 801078c:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801078e:	6959      	ldr	r1, [r3, #20]
 8010790:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010792:	891a      	ldrh	r2, [r3, #8]
 8010794:	193b      	adds	r3, r7, r4
 8010796:	881b      	ldrh	r3, [r3, #0]
 8010798:	f006 ff01 	bl	801759e <USB_ReadPMA>
 801079c:	e023      	b.n	80107e6 <PCD_EP_ISR_Handler+0x51e>
              }
            }
            else
            {
              /* read from endpoint BUF1Addr buffer */
              count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 801079e:	687b      	ldr	r3, [r7, #4]
 80107a0:	681b      	ldr	r3, [r3, #0]
 80107a2:	2250      	movs	r2, #80	@ 0x50
 80107a4:	5a9b      	ldrh	r3, [r3, r2]
 80107a6:	b29b      	uxth	r3, r3
 80107a8:	001a      	movs	r2, r3
 80107aa:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80107ac:	781b      	ldrb	r3, [r3, #0]
 80107ae:	00db      	lsls	r3, r3, #3
 80107b0:	18d2      	adds	r2, r2, r3
 80107b2:	687b      	ldr	r3, [r7, #4]
 80107b4:	681b      	ldr	r3, [r3, #0]
 80107b6:	18d3      	adds	r3, r2, r3
 80107b8:	4a79      	ldr	r2, [pc, #484]	@ (80109a0 <PCD_EP_ISR_Handler+0x6d8>)
 80107ba:	4694      	mov	ip, r2
 80107bc:	4463      	add	r3, ip
 80107be:	881a      	ldrh	r2, [r3, #0]
 80107c0:	2450      	movs	r4, #80	@ 0x50
 80107c2:	193b      	adds	r3, r7, r4
 80107c4:	0592      	lsls	r2, r2, #22
 80107c6:	0d92      	lsrs	r2, r2, #22
 80107c8:	801a      	strh	r2, [r3, #0]

              if (count != 0U)
 80107ca:	193b      	adds	r3, r7, r4
 80107cc:	881b      	ldrh	r3, [r3, #0]
 80107ce:	2b00      	cmp	r3, #0
 80107d0:	d009      	beq.n	80107e6 <PCD_EP_ISR_Handler+0x51e>
              {
                USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 80107d2:	687b      	ldr	r3, [r7, #4]
 80107d4:	6818      	ldr	r0, [r3, #0]
 80107d6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80107d8:	6959      	ldr	r1, [r3, #20]
 80107da:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80107dc:	895a      	ldrh	r2, [r3, #10]
 80107de:	193b      	adds	r3, r7, r4
 80107e0:	881b      	ldrh	r3, [r3, #0]
 80107e2:	f006 fedc 	bl	801759e <USB_ReadPMA>
          }
        }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

        /* multi-packet on the NON control OUT endpoint */
        ep->xfer_count += count;
 80107e6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80107e8:	69da      	ldr	r2, [r3, #28]
 80107ea:	2150      	movs	r1, #80	@ 0x50
 80107ec:	187b      	adds	r3, r7, r1
 80107ee:	881b      	ldrh	r3, [r3, #0]
 80107f0:	18d2      	adds	r2, r2, r3
 80107f2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80107f4:	61da      	str	r2, [r3, #28]
        ep->xfer_buff += count;
 80107f6:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80107f8:	695a      	ldr	r2, [r3, #20]
 80107fa:	187b      	adds	r3, r7, r1
 80107fc:	881b      	ldrh	r3, [r3, #0]
 80107fe:	18d2      	adds	r2, r2, r3
 8010800:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010802:	615a      	str	r2, [r3, #20]

        if ((ep->xfer_len == 0U) || (count < ep->maxpacket))
 8010804:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010806:	699b      	ldr	r3, [r3, #24]
 8010808:	2b00      	cmp	r3, #0
 801080a:	d005      	beq.n	8010818 <PCD_EP_ISR_Handler+0x550>
 801080c:	187b      	adds	r3, r7, r1
 801080e:	881a      	ldrh	r2, [r3, #0]
 8010810:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010812:	691b      	ldr	r3, [r3, #16]
 8010814:	429a      	cmp	r2, r3
 8010816:	d207      	bcs.n	8010828 <PCD_EP_ISR_Handler+0x560>
        {
          /* RX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataOutStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataOutStageCallback(hpcd, ep->num);
 8010818:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801081a:	781a      	ldrb	r2, [r3, #0]
 801081c:	687b      	ldr	r3, [r7, #4]
 801081e:	0011      	movs	r1, r2
 8010820:	0018      	movs	r0, r3
 8010822:	f008 fed6 	bl	80195d2 <HAL_PCD_DataOutStageCallback>
 8010826:	e006      	b.n	8010836 <PCD_EP_ISR_Handler+0x56e>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          (void)USB_EPStartXfer(hpcd->Instance, ep);
 8010828:	687b      	ldr	r3, [r7, #4]
 801082a:	681b      	ldr	r3, [r3, #0]
 801082c:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 801082e:	0011      	movs	r1, r2
 8010830:	0018      	movs	r0, r3
 8010832:	f005 fbf9 	bl	8016028 <USB_EPStartXfer>
        }
      }

      if ((wEPVal & USB_EP_CTR_TX) != 0U)
 8010836:	244a      	movs	r4, #74	@ 0x4a
 8010838:	193b      	adds	r3, r7, r4
 801083a:	881b      	ldrh	r3, [r3, #0]
 801083c:	2280      	movs	r2, #128	@ 0x80
 801083e:	4013      	ands	r3, r2
 8010840:	d100      	bne.n	8010844 <PCD_EP_ISR_Handler+0x57c>
 8010842:	e133      	b.n	8010aac <PCD_EP_ISR_Handler+0x7e4>
      {
        ep = &hpcd->IN_ep[epindex];
 8010844:	204d      	movs	r0, #77	@ 0x4d
 8010846:	183b      	adds	r3, r7, r0
 8010848:	781b      	ldrb	r3, [r3, #0]
 801084a:	1c5a      	adds	r2, r3, #1
 801084c:	0013      	movs	r3, r2
 801084e:	009b      	lsls	r3, r3, #2
 8010850:	189b      	adds	r3, r3, r2
 8010852:	00db      	lsls	r3, r3, #3
 8010854:	687a      	ldr	r2, [r7, #4]
 8010856:	18d3      	adds	r3, r2, r3
 8010858:	657b      	str	r3, [r7, #84]	@ 0x54

        /* clear int flag */
        PCD_CLEAR_TX_EP_CTR(hpcd->Instance, epindex);
 801085a:	687b      	ldr	r3, [r7, #4]
 801085c:	681b      	ldr	r3, [r3, #0]
 801085e:	001a      	movs	r2, r3
 8010860:	183b      	adds	r3, r7, r0
 8010862:	781b      	ldrb	r3, [r3, #0]
 8010864:	009b      	lsls	r3, r3, #2
 8010866:	18d3      	adds	r3, r2, r3
 8010868:	881b      	ldrh	r3, [r3, #0]
 801086a:	b29a      	uxth	r2, r3
 801086c:	2542      	movs	r5, #66	@ 0x42
 801086e:	197b      	adds	r3, r7, r5
 8010870:	494f      	ldr	r1, [pc, #316]	@ (80109b0 <PCD_EP_ISR_Handler+0x6e8>)
 8010872:	400a      	ands	r2, r1
 8010874:	801a      	strh	r2, [r3, #0]
 8010876:	687b      	ldr	r3, [r7, #4]
 8010878:	681b      	ldr	r3, [r3, #0]
 801087a:	001a      	movs	r2, r3
 801087c:	183b      	adds	r3, r7, r0
 801087e:	781b      	ldrb	r3, [r3, #0]
 8010880:	009b      	lsls	r3, r3, #2
 8010882:	18d3      	adds	r3, r2, r3
 8010884:	197a      	adds	r2, r7, r5
 8010886:	8812      	ldrh	r2, [r2, #0]
 8010888:	494a      	ldr	r1, [pc, #296]	@ (80109b4 <PCD_EP_ISR_Handler+0x6ec>)
 801088a:	430a      	orrs	r2, r1
 801088c:	b292      	uxth	r2, r2
 801088e:	801a      	strh	r2, [r3, #0]

        if (ep->type == EP_TYPE_ISOC)
 8010890:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010892:	78db      	ldrb	r3, [r3, #3]
 8010894:	2b01      	cmp	r3, #1
 8010896:	d000      	beq.n	801089a <PCD_EP_ISR_Handler+0x5d2>
 8010898:	e0af      	b.n	80109fa <PCD_EP_ISR_Handler+0x732>
        {
          ep->xfer_len = 0U;
 801089a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801089c:	2200      	movs	r2, #0
 801089e:	619a      	str	r2, [r3, #24]

#if (USE_USB_DOUBLE_BUFFER == 1U)
          if (ep->doublebuffer != 0U)
 80108a0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80108a2:	7b1b      	ldrb	r3, [r3, #12]
 80108a4:	2b00      	cmp	r3, #0
 80108a6:	d100      	bne.n	80108aa <PCD_EP_ISR_Handler+0x5e2>
 80108a8:	e09f      	b.n	80109ea <PCD_EP_ISR_Handler+0x722>
          {
            if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 80108aa:	193b      	adds	r3, r7, r4
 80108ac:	881b      	ldrh	r3, [r3, #0]
 80108ae:	2240      	movs	r2, #64	@ 0x40
 80108b0:	4013      	ands	r3, r2
 80108b2:	d046      	beq.n	8010942 <PCD_EP_ISR_Handler+0x67a>
            {
              PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80108b4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80108b6:	785b      	ldrb	r3, [r3, #1]
 80108b8:	2b00      	cmp	r3, #0
 80108ba:	d125      	bne.n	8010908 <PCD_EP_ISR_Handler+0x640>
 80108bc:	687b      	ldr	r3, [r7, #4]
 80108be:	681b      	ldr	r3, [r3, #0]
 80108c0:	627b      	str	r3, [r7, #36]	@ 0x24
 80108c2:	687b      	ldr	r3, [r7, #4]
 80108c4:	681b      	ldr	r3, [r3, #0]
 80108c6:	2250      	movs	r2, #80	@ 0x50
 80108c8:	5a9b      	ldrh	r3, [r3, r2]
 80108ca:	b29b      	uxth	r3, r3
 80108cc:	001a      	movs	r2, r3
 80108ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80108d0:	189b      	adds	r3, r3, r2
 80108d2:	627b      	str	r3, [r7, #36]	@ 0x24
 80108d4:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80108d6:	781b      	ldrb	r3, [r3, #0]
 80108d8:	00da      	lsls	r2, r3, #3
 80108da:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80108dc:	18d3      	adds	r3, r2, r3
 80108de:	4a33      	ldr	r2, [pc, #204]	@ (80109ac <PCD_EP_ISR_Handler+0x6e4>)
 80108e0:	4694      	mov	ip, r2
 80108e2:	4463      	add	r3, ip
 80108e4:	623b      	str	r3, [r7, #32]
 80108e6:	6a3b      	ldr	r3, [r7, #32]
 80108e8:	881b      	ldrh	r3, [r3, #0]
 80108ea:	b29b      	uxth	r3, r3
 80108ec:	059b      	lsls	r3, r3, #22
 80108ee:	0d9b      	lsrs	r3, r3, #22
 80108f0:	b29a      	uxth	r2, r3
 80108f2:	6a3b      	ldr	r3, [r7, #32]
 80108f4:	801a      	strh	r2, [r3, #0]
 80108f6:	6a3b      	ldr	r3, [r7, #32]
 80108f8:	881b      	ldrh	r3, [r3, #0]
 80108fa:	b29b      	uxth	r3, r3
 80108fc:	4a2d      	ldr	r2, [pc, #180]	@ (80109b4 <PCD_EP_ISR_Handler+0x6ec>)
 80108fe:	4313      	orrs	r3, r2
 8010900:	b29a      	uxth	r2, r3
 8010902:	6a3b      	ldr	r3, [r7, #32]
 8010904:	801a      	strh	r2, [r3, #0]
 8010906:	e070      	b.n	80109ea <PCD_EP_ISR_Handler+0x722>
 8010908:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801090a:	785b      	ldrb	r3, [r3, #1]
 801090c:	2b01      	cmp	r3, #1
 801090e:	d16c      	bne.n	80109ea <PCD_EP_ISR_Handler+0x722>
 8010910:	687b      	ldr	r3, [r7, #4]
 8010912:	681b      	ldr	r3, [r3, #0]
 8010914:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010916:	687b      	ldr	r3, [r7, #4]
 8010918:	681b      	ldr	r3, [r3, #0]
 801091a:	2250      	movs	r2, #80	@ 0x50
 801091c:	5a9b      	ldrh	r3, [r3, r2]
 801091e:	b29b      	uxth	r3, r3
 8010920:	001a      	movs	r2, r3
 8010922:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010924:	189b      	adds	r3, r3, r2
 8010926:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010928:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801092a:	781b      	ldrb	r3, [r3, #0]
 801092c:	00da      	lsls	r2, r3, #3
 801092e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010930:	18d3      	adds	r3, r2, r3
 8010932:	4a1e      	ldr	r2, [pc, #120]	@ (80109ac <PCD_EP_ISR_Handler+0x6e4>)
 8010934:	4694      	mov	ip, r2
 8010936:	4463      	add	r3, ip
 8010938:	62bb      	str	r3, [r7, #40]	@ 0x28
 801093a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801093c:	2200      	movs	r2, #0
 801093e:	801a      	strh	r2, [r3, #0]
 8010940:	e053      	b.n	80109ea <PCD_EP_ISR_Handler+0x722>
            }
            else
            {
              PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8010942:	687b      	ldr	r3, [r7, #4]
 8010944:	681b      	ldr	r3, [r3, #0]
 8010946:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010948:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801094a:	785b      	ldrb	r3, [r3, #1]
 801094c:	2b00      	cmp	r3, #0
 801094e:	d133      	bne.n	80109b8 <PCD_EP_ISR_Handler+0x6f0>
 8010950:	687b      	ldr	r3, [r7, #4]
 8010952:	681b      	ldr	r3, [r3, #0]
 8010954:	637b      	str	r3, [r7, #52]	@ 0x34
 8010956:	687b      	ldr	r3, [r7, #4]
 8010958:	681b      	ldr	r3, [r3, #0]
 801095a:	2250      	movs	r2, #80	@ 0x50
 801095c:	5a9b      	ldrh	r3, [r3, r2]
 801095e:	b29b      	uxth	r3, r3
 8010960:	001a      	movs	r2, r3
 8010962:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010964:	189b      	adds	r3, r3, r2
 8010966:	637b      	str	r3, [r7, #52]	@ 0x34
 8010968:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801096a:	781b      	ldrb	r3, [r3, #0]
 801096c:	00da      	lsls	r2, r3, #3
 801096e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010970:	18d3      	adds	r3, r2, r3
 8010972:	4a0b      	ldr	r2, [pc, #44]	@ (80109a0 <PCD_EP_ISR_Handler+0x6d8>)
 8010974:	4694      	mov	ip, r2
 8010976:	4463      	add	r3, ip
 8010978:	633b      	str	r3, [r7, #48]	@ 0x30
 801097a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801097c:	881b      	ldrh	r3, [r3, #0]
 801097e:	b29b      	uxth	r3, r3
 8010980:	059b      	lsls	r3, r3, #22
 8010982:	0d9b      	lsrs	r3, r3, #22
 8010984:	b29a      	uxth	r2, r3
 8010986:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010988:	801a      	strh	r2, [r3, #0]
 801098a:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801098c:	881b      	ldrh	r3, [r3, #0]
 801098e:	b29b      	uxth	r3, r3
 8010990:	4a08      	ldr	r2, [pc, #32]	@ (80109b4 <PCD_EP_ISR_Handler+0x6ec>)
 8010992:	4313      	orrs	r3, r2
 8010994:	b29a      	uxth	r2, r3
 8010996:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010998:	801a      	strh	r2, [r3, #0]
 801099a:	e026      	b.n	80109ea <PCD_EP_ISR_Handler+0x722>
 801099c:	00000f8f 	.word	0x00000f8f
 80109a0:	00000406 	.word	0x00000406
 80109a4:	ffff8f8f 	.word	0xffff8f8f
 80109a8:	ffff80c0 	.word	0xffff80c0
 80109ac:	00000402 	.word	0x00000402
 80109b0:	ffff8f0f 	.word	0xffff8f0f
 80109b4:	ffff8000 	.word	0xffff8000
 80109b8:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80109ba:	785b      	ldrb	r3, [r3, #1]
 80109bc:	2b01      	cmp	r3, #1
 80109be:	d114      	bne.n	80109ea <PCD_EP_ISR_Handler+0x722>
 80109c0:	687b      	ldr	r3, [r7, #4]
 80109c2:	681b      	ldr	r3, [r3, #0]
 80109c4:	2250      	movs	r2, #80	@ 0x50
 80109c6:	5a9b      	ldrh	r3, [r3, r2]
 80109c8:	b29b      	uxth	r3, r3
 80109ca:	001a      	movs	r2, r3
 80109cc:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80109ce:	189b      	adds	r3, r3, r2
 80109d0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80109d2:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80109d4:	781b      	ldrb	r3, [r3, #0]
 80109d6:	00da      	lsls	r2, r3, #3
 80109d8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80109da:	18d3      	adds	r3, r2, r3
 80109dc:	4a3b      	ldr	r2, [pc, #236]	@ (8010acc <PCD_EP_ISR_Handler+0x804>)
 80109de:	4694      	mov	ip, r2
 80109e0:	4463      	add	r3, ip
 80109e2:	63bb      	str	r3, [r7, #56]	@ 0x38
 80109e4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80109e6:	2200      	movs	r2, #0
 80109e8:	801a      	strh	r2, [r3, #0]

          /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
          hpcd->DataInStageCallback(hpcd, ep->num);
#else
          HAL_PCD_DataInStageCallback(hpcd, ep->num);
 80109ea:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80109ec:	781a      	ldrb	r2, [r3, #0]
 80109ee:	687b      	ldr	r3, [r7, #4]
 80109f0:	0011      	movs	r1, r2
 80109f2:	0018      	movs	r0, r3
 80109f4:	f008 fe0e 	bl	8019614 <HAL_PCD_DataInStageCallback>
 80109f8:	e058      	b.n	8010aac <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
        }
        else
        {
          /* Manage Single Buffer Transaction */
          if ((wEPVal & USB_EP_KIND) == 0U)
 80109fa:	234a      	movs	r3, #74	@ 0x4a
 80109fc:	18fb      	adds	r3, r7, r3
 80109fe:	881a      	ldrh	r2, [r3, #0]
 8010a00:	2380      	movs	r3, #128	@ 0x80
 8010a02:	005b      	lsls	r3, r3, #1
 8010a04:	4013      	ands	r3, r2
 8010a06:	d149      	bne.n	8010a9c <PCD_EP_ISR_Handler+0x7d4>
          {
            /* multi-packet on the NON control IN endpoint */
            TxPctSize = (uint16_t)PCD_GET_EP_TX_CNT(hpcd->Instance, ep->num);
 8010a08:	687b      	ldr	r3, [r7, #4]
 8010a0a:	681b      	ldr	r3, [r3, #0]
 8010a0c:	2250      	movs	r2, #80	@ 0x50
 8010a0e:	5a9b      	ldrh	r3, [r3, r2]
 8010a10:	b29b      	uxth	r3, r3
 8010a12:	001a      	movs	r2, r3
 8010a14:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010a16:	781b      	ldrb	r3, [r3, #0]
 8010a18:	00db      	lsls	r3, r3, #3
 8010a1a:	18d2      	adds	r2, r2, r3
 8010a1c:	687b      	ldr	r3, [r7, #4]
 8010a1e:	681b      	ldr	r3, [r3, #0]
 8010a20:	18d3      	adds	r3, r2, r3
 8010a22:	4a2b      	ldr	r2, [pc, #172]	@ (8010ad0 <PCD_EP_ISR_Handler+0x808>)
 8010a24:	4694      	mov	ip, r2
 8010a26:	4463      	add	r3, ip
 8010a28:	881a      	ldrh	r2, [r3, #0]
 8010a2a:	2140      	movs	r1, #64	@ 0x40
 8010a2c:	187b      	adds	r3, r7, r1
 8010a2e:	0592      	lsls	r2, r2, #22
 8010a30:	0d92      	lsrs	r2, r2, #22
 8010a32:	801a      	strh	r2, [r3, #0]

            if (ep->xfer_len > TxPctSize)
 8010a34:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010a36:	699a      	ldr	r2, [r3, #24]
 8010a38:	187b      	adds	r3, r7, r1
 8010a3a:	881b      	ldrh	r3, [r3, #0]
 8010a3c:	429a      	cmp	r2, r3
 8010a3e:	d907      	bls.n	8010a50 <PCD_EP_ISR_Handler+0x788>
            {
              ep->xfer_len -= TxPctSize;
 8010a40:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010a42:	699a      	ldr	r2, [r3, #24]
 8010a44:	187b      	adds	r3, r7, r1
 8010a46:	881b      	ldrh	r3, [r3, #0]
 8010a48:	1ad2      	subs	r2, r2, r3
 8010a4a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010a4c:	619a      	str	r2, [r3, #24]
 8010a4e:	e002      	b.n	8010a56 <PCD_EP_ISR_Handler+0x78e>
            }
            else
            {
              ep->xfer_len = 0U;
 8010a50:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010a52:	2200      	movs	r2, #0
 8010a54:	619a      	str	r2, [r3, #24]
            }

            /* Zero Length Packet? */
            if (ep->xfer_len == 0U)
 8010a56:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010a58:	699b      	ldr	r3, [r3, #24]
 8010a5a:	2b00      	cmp	r3, #0
 8010a5c:	d107      	bne.n	8010a6e <PCD_EP_ISR_Handler+0x7a6>
            {
              /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
              hpcd->DataInStageCallback(hpcd, ep->num);
#else
              HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8010a5e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010a60:	781a      	ldrb	r2, [r3, #0]
 8010a62:	687b      	ldr	r3, [r7, #4]
 8010a64:	0011      	movs	r1, r2
 8010a66:	0018      	movs	r0, r3
 8010a68:	f008 fdd4 	bl	8019614 <HAL_PCD_DataInStageCallback>
 8010a6c:	e01e      	b.n	8010aac <PCD_EP_ISR_Handler+0x7e4>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
            }
            else
            {
              /* Transfer is not yet Done */
              ep->xfer_buff += TxPctSize;
 8010a6e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010a70:	695a      	ldr	r2, [r3, #20]
 8010a72:	2140      	movs	r1, #64	@ 0x40
 8010a74:	187b      	adds	r3, r7, r1
 8010a76:	881b      	ldrh	r3, [r3, #0]
 8010a78:	18d2      	adds	r2, r2, r3
 8010a7a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010a7c:	615a      	str	r2, [r3, #20]
              ep->xfer_count += TxPctSize;
 8010a7e:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010a80:	69da      	ldr	r2, [r3, #28]
 8010a82:	187b      	adds	r3, r7, r1
 8010a84:	881b      	ldrh	r3, [r3, #0]
 8010a86:	18d2      	adds	r2, r2, r3
 8010a88:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8010a8a:	61da      	str	r2, [r3, #28]
              (void)USB_EPStartXfer(hpcd->Instance, ep);
 8010a8c:	687b      	ldr	r3, [r7, #4]
 8010a8e:	681b      	ldr	r3, [r3, #0]
 8010a90:	6d7a      	ldr	r2, [r7, #84]	@ 0x54
 8010a92:	0011      	movs	r1, r2
 8010a94:	0018      	movs	r0, r3
 8010a96:	f005 fac7 	bl	8016028 <USB_EPStartXfer>
 8010a9a:	e007      	b.n	8010aac <PCD_EP_ISR_Handler+0x7e4>
          }
#if (USE_USB_DOUBLE_BUFFER == 1U)
          /* Double Buffer bulk IN (bulk transfer Len > Ep_Mps) */
          else
          {
            (void)HAL_PCD_EP_DB_Transmit(hpcd, ep, wEPVal);
 8010a9c:	234a      	movs	r3, #74	@ 0x4a
 8010a9e:	18fb      	adds	r3, r7, r3
 8010aa0:	881a      	ldrh	r2, [r3, #0]
 8010aa2:	6d79      	ldr	r1, [r7, #84]	@ 0x54
 8010aa4:	687b      	ldr	r3, [r7, #4]
 8010aa6:	0018      	movs	r0, r3
 8010aa8:	f000 f930 	bl	8010d0c <HAL_PCD_EP_DB_Transmit>
  while ((hpcd->Instance->ISTR & USB_ISTR_CTR) != 0U)
 8010aac:	687b      	ldr	r3, [r7, #4]
 8010aae:	681b      	ldr	r3, [r3, #0]
 8010ab0:	2244      	movs	r2, #68	@ 0x44
 8010ab2:	5a9b      	ldrh	r3, [r3, r2]
 8010ab4:	b29b      	uxth	r3, r3
 8010ab6:	b21b      	sxth	r3, r3
 8010ab8:	2b00      	cmp	r3, #0
 8010aba:	da01      	bge.n	8010ac0 <PCD_EP_ISR_Handler+0x7f8>
 8010abc:	f7ff fc0a 	bl	80102d4 <PCD_EP_ISR_Handler+0xc>
        }
      }
    }
  }

  return HAL_OK;
 8010ac0:	2300      	movs	r3, #0
}
 8010ac2:	0018      	movs	r0, r3
 8010ac4:	46bd      	mov	sp, r7
 8010ac6:	b016      	add	sp, #88	@ 0x58
 8010ac8:	bdb0      	pop	{r4, r5, r7, pc}
 8010aca:	46c0      	nop			@ (mov r8, r8)
 8010acc:	00000406 	.word	0x00000406
 8010ad0:	00000402 	.word	0x00000402

08010ad4 <HAL_PCD_EP_DB_Receive>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static uint16_t HAL_PCD_EP_DB_Receive(PCD_HandleTypeDef *hpcd,
                                      PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8010ad4:	b590      	push	{r4, r7, lr}
 8010ad6:	b089      	sub	sp, #36	@ 0x24
 8010ad8:	af00      	add	r7, sp, #0
 8010ada:	60f8      	str	r0, [r7, #12]
 8010adc:	60b9      	str	r1, [r7, #8]
 8010ade:	1dbb      	adds	r3, r7, #6
 8010ae0:	801a      	strh	r2, [r3, #0]
  uint16_t count;

  /* Manage Buffer0 OUT */
  if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8010ae2:	1dbb      	adds	r3, r7, #6
 8010ae4:	881a      	ldrh	r2, [r3, #0]
 8010ae6:	2380      	movs	r3, #128	@ 0x80
 8010ae8:	01db      	lsls	r3, r3, #7
 8010aea:	4013      	ands	r3, r2
 8010aec:	d100      	bne.n	8010af0 <HAL_PCD_EP_DB_Receive+0x1c>
 8010aee:	e07d      	b.n	8010bec <HAL_PCD_EP_DB_Receive+0x118>
  {
    /* Get count of received Data on buffer0 */
    count = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8010af0:	68fb      	ldr	r3, [r7, #12]
 8010af2:	681b      	ldr	r3, [r3, #0]
 8010af4:	2250      	movs	r2, #80	@ 0x50
 8010af6:	5a9b      	ldrh	r3, [r3, r2]
 8010af8:	b29b      	uxth	r3, r3
 8010afa:	001a      	movs	r2, r3
 8010afc:	68bb      	ldr	r3, [r7, #8]
 8010afe:	781b      	ldrb	r3, [r3, #0]
 8010b00:	00db      	lsls	r3, r3, #3
 8010b02:	18d2      	adds	r2, r2, r3
 8010b04:	68fb      	ldr	r3, [r7, #12]
 8010b06:	681b      	ldr	r3, [r3, #0]
 8010b08:	18d3      	adds	r3, r2, r3
 8010b0a:	4a7a      	ldr	r2, [pc, #488]	@ (8010cf4 <HAL_PCD_EP_DB_Receive+0x220>)
 8010b0c:	4694      	mov	ip, r2
 8010b0e:	4463      	add	r3, ip
 8010b10:	881a      	ldrh	r2, [r3, #0]
 8010b12:	211a      	movs	r1, #26
 8010b14:	187b      	adds	r3, r7, r1
 8010b16:	0592      	lsls	r2, r2, #22
 8010b18:	0d92      	lsrs	r2, r2, #22
 8010b1a:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8010b1c:	68bb      	ldr	r3, [r7, #8]
 8010b1e:	699a      	ldr	r2, [r3, #24]
 8010b20:	187b      	adds	r3, r7, r1
 8010b22:	881b      	ldrh	r3, [r3, #0]
 8010b24:	429a      	cmp	r2, r3
 8010b26:	d307      	bcc.n	8010b38 <HAL_PCD_EP_DB_Receive+0x64>
    {
      ep->xfer_len -= count;
 8010b28:	68bb      	ldr	r3, [r7, #8]
 8010b2a:	699a      	ldr	r2, [r3, #24]
 8010b2c:	187b      	adds	r3, r7, r1
 8010b2e:	881b      	ldrh	r3, [r3, #0]
 8010b30:	1ad2      	subs	r2, r2, r3
 8010b32:	68bb      	ldr	r3, [r7, #8]
 8010b34:	619a      	str	r2, [r3, #24]
 8010b36:	e002      	b.n	8010b3e <HAL_PCD_EP_DB_Receive+0x6a>
    }
    else
    {
      ep->xfer_len = 0U;
 8010b38:	68bb      	ldr	r3, [r7, #8]
 8010b3a:	2200      	movs	r2, #0
 8010b3c:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8010b3e:	68bb      	ldr	r3, [r7, #8]
 8010b40:	699b      	ldr	r3, [r3, #24]
 8010b42:	2b00      	cmp	r3, #0
 8010b44:	d121      	bne.n	8010b8a <HAL_PCD_EP_DB_Receive+0xb6>
    {
      /* set NAK to OUT endpoint since double buffer is enabled */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8010b46:	68fb      	ldr	r3, [r7, #12]
 8010b48:	681b      	ldr	r3, [r3, #0]
 8010b4a:	001a      	movs	r2, r3
 8010b4c:	68bb      	ldr	r3, [r7, #8]
 8010b4e:	781b      	ldrb	r3, [r3, #0]
 8010b50:	009b      	lsls	r3, r3, #2
 8010b52:	18d3      	adds	r3, r2, r3
 8010b54:	881b      	ldrh	r3, [r3, #0]
 8010b56:	b29a      	uxth	r2, r3
 8010b58:	2018      	movs	r0, #24
 8010b5a:	183b      	adds	r3, r7, r0
 8010b5c:	4966      	ldr	r1, [pc, #408]	@ (8010cf8 <HAL_PCD_EP_DB_Receive+0x224>)
 8010b5e:	400a      	ands	r2, r1
 8010b60:	801a      	strh	r2, [r3, #0]
 8010b62:	183b      	adds	r3, r7, r0
 8010b64:	183a      	adds	r2, r7, r0
 8010b66:	8812      	ldrh	r2, [r2, #0]
 8010b68:	2180      	movs	r1, #128	@ 0x80
 8010b6a:	0189      	lsls	r1, r1, #6
 8010b6c:	404a      	eors	r2, r1
 8010b6e:	801a      	strh	r2, [r3, #0]
 8010b70:	68fb      	ldr	r3, [r7, #12]
 8010b72:	681b      	ldr	r3, [r3, #0]
 8010b74:	001a      	movs	r2, r3
 8010b76:	68bb      	ldr	r3, [r7, #8]
 8010b78:	781b      	ldrb	r3, [r3, #0]
 8010b7a:	009b      	lsls	r3, r3, #2
 8010b7c:	18d3      	adds	r3, r2, r3
 8010b7e:	183a      	adds	r2, r7, r0
 8010b80:	8812      	ldrh	r2, [r2, #0]
 8010b82:	495e      	ldr	r1, [pc, #376]	@ (8010cfc <HAL_PCD_EP_DB_Receive+0x228>)
 8010b84:	430a      	orrs	r2, r1
 8010b86:	b292      	uxth	r2, r2
 8010b88:	801a      	strh	r2, [r3, #0]
    }

    /* Check if Buffer1 is in blocked state which requires to toggle */
    if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8010b8a:	1dbb      	adds	r3, r7, #6
 8010b8c:	881b      	ldrh	r3, [r3, #0]
 8010b8e:	2240      	movs	r2, #64	@ 0x40
 8010b90:	4013      	ands	r3, r2
 8010b92:	d01a      	beq.n	8010bca <HAL_PCD_EP_DB_Receive+0xf6>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8010b94:	68fb      	ldr	r3, [r7, #12]
 8010b96:	681b      	ldr	r3, [r3, #0]
 8010b98:	001a      	movs	r2, r3
 8010b9a:	68bb      	ldr	r3, [r7, #8]
 8010b9c:	781b      	ldrb	r3, [r3, #0]
 8010b9e:	009b      	lsls	r3, r3, #2
 8010ba0:	18d3      	adds	r3, r2, r3
 8010ba2:	881b      	ldrh	r3, [r3, #0]
 8010ba4:	b29a      	uxth	r2, r3
 8010ba6:	2016      	movs	r0, #22
 8010ba8:	183b      	adds	r3, r7, r0
 8010baa:	4955      	ldr	r1, [pc, #340]	@ (8010d00 <HAL_PCD_EP_DB_Receive+0x22c>)
 8010bac:	400a      	ands	r2, r1
 8010bae:	801a      	strh	r2, [r3, #0]
 8010bb0:	68fb      	ldr	r3, [r7, #12]
 8010bb2:	681b      	ldr	r3, [r3, #0]
 8010bb4:	001a      	movs	r2, r3
 8010bb6:	68bb      	ldr	r3, [r7, #8]
 8010bb8:	781b      	ldrb	r3, [r3, #0]
 8010bba:	009b      	lsls	r3, r3, #2
 8010bbc:	18d3      	adds	r3, r2, r3
 8010bbe:	183a      	adds	r2, r7, r0
 8010bc0:	8812      	ldrh	r2, [r2, #0]
 8010bc2:	4950      	ldr	r1, [pc, #320]	@ (8010d04 <HAL_PCD_EP_DB_Receive+0x230>)
 8010bc4:	430a      	orrs	r2, r1
 8010bc6:	b292      	uxth	r2, r2
 8010bc8:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8010bca:	241a      	movs	r4, #26
 8010bcc:	193b      	adds	r3, r7, r4
 8010bce:	881b      	ldrh	r3, [r3, #0]
 8010bd0:	2b00      	cmp	r3, #0
 8010bd2:	d100      	bne.n	8010bd6 <HAL_PCD_EP_DB_Receive+0x102>
 8010bd4:	e086      	b.n	8010ce4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr0, count);
 8010bd6:	68fb      	ldr	r3, [r7, #12]
 8010bd8:	6818      	ldr	r0, [r3, #0]
 8010bda:	68bb      	ldr	r3, [r7, #8]
 8010bdc:	6959      	ldr	r1, [r3, #20]
 8010bde:	68bb      	ldr	r3, [r7, #8]
 8010be0:	891a      	ldrh	r2, [r3, #8]
 8010be2:	193b      	adds	r3, r7, r4
 8010be4:	881b      	ldrh	r3, [r3, #0]
 8010be6:	f006 fcda 	bl	801759e <USB_ReadPMA>
 8010bea:	e07b      	b.n	8010ce4 <HAL_PCD_EP_DB_Receive+0x210>
  }
  /* Manage Buffer 1 DTOG_RX=0 */
  else
  {
    /* Get count of received data */
    count = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 8010bec:	68fb      	ldr	r3, [r7, #12]
 8010bee:	681b      	ldr	r3, [r3, #0]
 8010bf0:	2250      	movs	r2, #80	@ 0x50
 8010bf2:	5a9b      	ldrh	r3, [r3, r2]
 8010bf4:	b29b      	uxth	r3, r3
 8010bf6:	001a      	movs	r2, r3
 8010bf8:	68bb      	ldr	r3, [r7, #8]
 8010bfa:	781b      	ldrb	r3, [r3, #0]
 8010bfc:	00db      	lsls	r3, r3, #3
 8010bfe:	18d2      	adds	r2, r2, r3
 8010c00:	68fb      	ldr	r3, [r7, #12]
 8010c02:	681b      	ldr	r3, [r3, #0]
 8010c04:	18d3      	adds	r3, r2, r3
 8010c06:	4a40      	ldr	r2, [pc, #256]	@ (8010d08 <HAL_PCD_EP_DB_Receive+0x234>)
 8010c08:	4694      	mov	ip, r2
 8010c0a:	4463      	add	r3, ip
 8010c0c:	881a      	ldrh	r2, [r3, #0]
 8010c0e:	211a      	movs	r1, #26
 8010c10:	187b      	adds	r3, r7, r1
 8010c12:	0592      	lsls	r2, r2, #22
 8010c14:	0d92      	lsrs	r2, r2, #22
 8010c16:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= count)
 8010c18:	68bb      	ldr	r3, [r7, #8]
 8010c1a:	699a      	ldr	r2, [r3, #24]
 8010c1c:	187b      	adds	r3, r7, r1
 8010c1e:	881b      	ldrh	r3, [r3, #0]
 8010c20:	429a      	cmp	r2, r3
 8010c22:	d307      	bcc.n	8010c34 <HAL_PCD_EP_DB_Receive+0x160>
    {
      ep->xfer_len -= count;
 8010c24:	68bb      	ldr	r3, [r7, #8]
 8010c26:	699a      	ldr	r2, [r3, #24]
 8010c28:	187b      	adds	r3, r7, r1
 8010c2a:	881b      	ldrh	r3, [r3, #0]
 8010c2c:	1ad2      	subs	r2, r2, r3
 8010c2e:	68bb      	ldr	r3, [r7, #8]
 8010c30:	619a      	str	r2, [r3, #24]
 8010c32:	e002      	b.n	8010c3a <HAL_PCD_EP_DB_Receive+0x166>
    }
    else
    {
      ep->xfer_len = 0U;
 8010c34:	68bb      	ldr	r3, [r7, #8]
 8010c36:	2200      	movs	r2, #0
 8010c38:	619a      	str	r2, [r3, #24]
    }

    if (ep->xfer_len == 0U)
 8010c3a:	68bb      	ldr	r3, [r7, #8]
 8010c3c:	699b      	ldr	r3, [r3, #24]
 8010c3e:	2b00      	cmp	r3, #0
 8010c40:	d121      	bne.n	8010c86 <HAL_PCD_EP_DB_Receive+0x1b2>
    {
      /* set NAK on the current endpoint */
      PCD_SET_EP_RX_STATUS(hpcd->Instance, ep->num, USB_EP_RX_NAK);
 8010c42:	68fb      	ldr	r3, [r7, #12]
 8010c44:	681b      	ldr	r3, [r3, #0]
 8010c46:	001a      	movs	r2, r3
 8010c48:	68bb      	ldr	r3, [r7, #8]
 8010c4a:	781b      	ldrb	r3, [r3, #0]
 8010c4c:	009b      	lsls	r3, r3, #2
 8010c4e:	18d3      	adds	r3, r2, r3
 8010c50:	881b      	ldrh	r3, [r3, #0]
 8010c52:	b29a      	uxth	r2, r3
 8010c54:	201e      	movs	r0, #30
 8010c56:	183b      	adds	r3, r7, r0
 8010c58:	4927      	ldr	r1, [pc, #156]	@ (8010cf8 <HAL_PCD_EP_DB_Receive+0x224>)
 8010c5a:	400a      	ands	r2, r1
 8010c5c:	801a      	strh	r2, [r3, #0]
 8010c5e:	183b      	adds	r3, r7, r0
 8010c60:	183a      	adds	r2, r7, r0
 8010c62:	8812      	ldrh	r2, [r2, #0]
 8010c64:	2180      	movs	r1, #128	@ 0x80
 8010c66:	0189      	lsls	r1, r1, #6
 8010c68:	404a      	eors	r2, r1
 8010c6a:	801a      	strh	r2, [r3, #0]
 8010c6c:	68fb      	ldr	r3, [r7, #12]
 8010c6e:	681b      	ldr	r3, [r3, #0]
 8010c70:	001a      	movs	r2, r3
 8010c72:	68bb      	ldr	r3, [r7, #8]
 8010c74:	781b      	ldrb	r3, [r3, #0]
 8010c76:	009b      	lsls	r3, r3, #2
 8010c78:	18d3      	adds	r3, r2, r3
 8010c7a:	183a      	adds	r2, r7, r0
 8010c7c:	8812      	ldrh	r2, [r2, #0]
 8010c7e:	491f      	ldr	r1, [pc, #124]	@ (8010cfc <HAL_PCD_EP_DB_Receive+0x228>)
 8010c80:	430a      	orrs	r2, r1
 8010c82:	b292      	uxth	r2, r2
 8010c84:	801a      	strh	r2, [r3, #0]
    }

    /*Need to FreeUser Buffer*/
    if ((wEPVal & USB_EP_DTOG_TX) == 0U)
 8010c86:	1dbb      	adds	r3, r7, #6
 8010c88:	881b      	ldrh	r3, [r3, #0]
 8010c8a:	2240      	movs	r2, #64	@ 0x40
 8010c8c:	4013      	ands	r3, r2
 8010c8e:	d11a      	bne.n	8010cc6 <HAL_PCD_EP_DB_Receive+0x1f2>
    {
      PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 0U);
 8010c90:	68fb      	ldr	r3, [r7, #12]
 8010c92:	681b      	ldr	r3, [r3, #0]
 8010c94:	001a      	movs	r2, r3
 8010c96:	68bb      	ldr	r3, [r7, #8]
 8010c98:	781b      	ldrb	r3, [r3, #0]
 8010c9a:	009b      	lsls	r3, r3, #2
 8010c9c:	18d3      	adds	r3, r2, r3
 8010c9e:	881b      	ldrh	r3, [r3, #0]
 8010ca0:	b29a      	uxth	r2, r3
 8010ca2:	201c      	movs	r0, #28
 8010ca4:	183b      	adds	r3, r7, r0
 8010ca6:	4916      	ldr	r1, [pc, #88]	@ (8010d00 <HAL_PCD_EP_DB_Receive+0x22c>)
 8010ca8:	400a      	ands	r2, r1
 8010caa:	801a      	strh	r2, [r3, #0]
 8010cac:	68fb      	ldr	r3, [r7, #12]
 8010cae:	681b      	ldr	r3, [r3, #0]
 8010cb0:	001a      	movs	r2, r3
 8010cb2:	68bb      	ldr	r3, [r7, #8]
 8010cb4:	781b      	ldrb	r3, [r3, #0]
 8010cb6:	009b      	lsls	r3, r3, #2
 8010cb8:	18d3      	adds	r3, r2, r3
 8010cba:	183a      	adds	r2, r7, r0
 8010cbc:	8812      	ldrh	r2, [r2, #0]
 8010cbe:	4911      	ldr	r1, [pc, #68]	@ (8010d04 <HAL_PCD_EP_DB_Receive+0x230>)
 8010cc0:	430a      	orrs	r2, r1
 8010cc2:	b292      	uxth	r2, r2
 8010cc4:	801a      	strh	r2, [r3, #0]
    }

    if (count != 0U)
 8010cc6:	241a      	movs	r4, #26
 8010cc8:	193b      	adds	r3, r7, r4
 8010cca:	881b      	ldrh	r3, [r3, #0]
 8010ccc:	2b00      	cmp	r3, #0
 8010cce:	d009      	beq.n	8010ce4 <HAL_PCD_EP_DB_Receive+0x210>
    {
      USB_ReadPMA(hpcd->Instance, ep->xfer_buff, ep->pmaaddr1, count);
 8010cd0:	68fb      	ldr	r3, [r7, #12]
 8010cd2:	6818      	ldr	r0, [r3, #0]
 8010cd4:	68bb      	ldr	r3, [r7, #8]
 8010cd6:	6959      	ldr	r1, [r3, #20]
 8010cd8:	68bb      	ldr	r3, [r7, #8]
 8010cda:	895a      	ldrh	r2, [r3, #10]
 8010cdc:	193b      	adds	r3, r7, r4
 8010cde:	881b      	ldrh	r3, [r3, #0]
 8010ce0:	f006 fc5d 	bl	801759e <USB_ReadPMA>
    }
  }

  return count;
 8010ce4:	231a      	movs	r3, #26
 8010ce6:	18fb      	adds	r3, r7, r3
 8010ce8:	881b      	ldrh	r3, [r3, #0]
}
 8010cea:	0018      	movs	r0, r3
 8010cec:	46bd      	mov	sp, r7
 8010cee:	b009      	add	sp, #36	@ 0x24
 8010cf0:	bd90      	pop	{r4, r7, pc}
 8010cf2:	46c0      	nop			@ (mov r8, r8)
 8010cf4:	00000402 	.word	0x00000402
 8010cf8:	ffffbf8f 	.word	0xffffbf8f
 8010cfc:	ffff8080 	.word	0xffff8080
 8010d00:	ffff8f8f 	.word	0xffff8f8f
 8010d04:	ffff80c0 	.word	0xffff80c0
 8010d08:	00000406 	.word	0x00000406

08010d0c <HAL_PCD_EP_DB_Transmit>:
  * @param  wEPVal Last snapshot of EPRx register value taken in ISR
  * @retval HAL status
  */
static HAL_StatusTypeDef HAL_PCD_EP_DB_Transmit(PCD_HandleTypeDef *hpcd,
                                                PCD_EPTypeDef *ep, uint16_t wEPVal)
{
 8010d0c:	b580      	push	{r7, lr}
 8010d0e:	b0a4      	sub	sp, #144	@ 0x90
 8010d10:	af00      	add	r7, sp, #0
 8010d12:	60f8      	str	r0, [r7, #12]
 8010d14:	60b9      	str	r1, [r7, #8]
 8010d16:	1dbb      	adds	r3, r7, #6
 8010d18:	801a      	strh	r2, [r3, #0]
  uint32_t len;
  uint16_t TxPctSize;

  /* Data Buffer0 ACK received */
  if ((wEPVal & USB_EP_DTOG_TX) != 0U)
 8010d1a:	1dbb      	adds	r3, r7, #6
 8010d1c:	881b      	ldrh	r3, [r3, #0]
 8010d1e:	2240      	movs	r2, #64	@ 0x40
 8010d20:	4013      	ands	r3, r2
 8010d22:	d100      	bne.n	8010d26 <HAL_PCD_EP_DB_Transmit+0x1a>
 8010d24:	e1e4      	b.n	80110f0 <HAL_PCD_EP_DB_Transmit+0x3e4>
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF0_CNT(hpcd->Instance, ep->num);
 8010d26:	68fb      	ldr	r3, [r7, #12]
 8010d28:	681b      	ldr	r3, [r3, #0]
 8010d2a:	2250      	movs	r2, #80	@ 0x50
 8010d2c:	5a9b      	ldrh	r3, [r3, r2]
 8010d2e:	b29b      	uxth	r3, r3
 8010d30:	001a      	movs	r2, r3
 8010d32:	68bb      	ldr	r3, [r7, #8]
 8010d34:	781b      	ldrb	r3, [r3, #0]
 8010d36:	00db      	lsls	r3, r3, #3
 8010d38:	18d2      	adds	r2, r2, r3
 8010d3a:	68fb      	ldr	r3, [r7, #12]
 8010d3c:	681b      	ldr	r3, [r3, #0]
 8010d3e:	18d3      	adds	r3, r2, r3
 8010d40:	4ad0      	ldr	r2, [pc, #832]	@ (8011084 <HAL_PCD_EP_DB_Transmit+0x378>)
 8010d42:	4694      	mov	ip, r2
 8010d44:	4463      	add	r3, ip
 8010d46:	881a      	ldrh	r2, [r3, #0]
 8010d48:	2186      	movs	r1, #134	@ 0x86
 8010d4a:	187b      	adds	r3, r7, r1
 8010d4c:	0592      	lsls	r2, r2, #22
 8010d4e:	0d92      	lsrs	r2, r2, #22
 8010d50:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len > TxPctSize)
 8010d52:	68bb      	ldr	r3, [r7, #8]
 8010d54:	699a      	ldr	r2, [r3, #24]
 8010d56:	187b      	adds	r3, r7, r1
 8010d58:	881b      	ldrh	r3, [r3, #0]
 8010d5a:	429a      	cmp	r2, r3
 8010d5c:	d907      	bls.n	8010d6e <HAL_PCD_EP_DB_Transmit+0x62>
    {
      ep->xfer_len -= TxPctSize;
 8010d5e:	68bb      	ldr	r3, [r7, #8]
 8010d60:	699a      	ldr	r2, [r3, #24]
 8010d62:	187b      	adds	r3, r7, r1
 8010d64:	881b      	ldrh	r3, [r3, #0]
 8010d66:	1ad2      	subs	r2, r2, r3
 8010d68:	68bb      	ldr	r3, [r7, #8]
 8010d6a:	619a      	str	r2, [r3, #24]
 8010d6c:	e002      	b.n	8010d74 <HAL_PCD_EP_DB_Transmit+0x68>
    }
    else
    {
      ep->xfer_len = 0U;
 8010d6e:	68bb      	ldr	r3, [r7, #8]
 8010d70:	2200      	movs	r2, #0
 8010d72:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 8010d74:	68bb      	ldr	r3, [r7, #8]
 8010d76:	699b      	ldr	r3, [r3, #24]
 8010d78:	2b00      	cmp	r3, #0
 8010d7a:	d000      	beq.n	8010d7e <HAL_PCD_EP_DB_Transmit+0x72>
 8010d7c:	e0b5      	b.n	8010eea <HAL_PCD_EP_DB_Transmit+0x1de>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8010d7e:	68bb      	ldr	r3, [r7, #8]
 8010d80:	785b      	ldrb	r3, [r3, #1]
 8010d82:	2b00      	cmp	r3, #0
 8010d84:	d125      	bne.n	8010dd2 <HAL_PCD_EP_DB_Transmit+0xc6>
 8010d86:	68fb      	ldr	r3, [r7, #12]
 8010d88:	681b      	ldr	r3, [r3, #0]
 8010d8a:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010d8c:	68fb      	ldr	r3, [r7, #12]
 8010d8e:	681b      	ldr	r3, [r3, #0]
 8010d90:	2250      	movs	r2, #80	@ 0x50
 8010d92:	5a9b      	ldrh	r3, [r3, r2]
 8010d94:	b29b      	uxth	r3, r3
 8010d96:	001a      	movs	r2, r3
 8010d98:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010d9a:	189b      	adds	r3, r3, r2
 8010d9c:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8010d9e:	68bb      	ldr	r3, [r7, #8]
 8010da0:	781b      	ldrb	r3, [r3, #0]
 8010da2:	00da      	lsls	r2, r3, #3
 8010da4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8010da6:	18d3      	adds	r3, r2, r3
 8010da8:	4ab6      	ldr	r2, [pc, #728]	@ (8011084 <HAL_PCD_EP_DB_Transmit+0x378>)
 8010daa:	4694      	mov	ip, r2
 8010dac:	4463      	add	r3, ip
 8010dae:	62bb      	str	r3, [r7, #40]	@ 0x28
 8010db0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010db2:	881b      	ldrh	r3, [r3, #0]
 8010db4:	b29b      	uxth	r3, r3
 8010db6:	059b      	lsls	r3, r3, #22
 8010db8:	0d9b      	lsrs	r3, r3, #22
 8010dba:	b29a      	uxth	r2, r3
 8010dbc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010dbe:	801a      	strh	r2, [r3, #0]
 8010dc0:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010dc2:	881b      	ldrh	r3, [r3, #0]
 8010dc4:	b29b      	uxth	r3, r3
 8010dc6:	4ab0      	ldr	r2, [pc, #704]	@ (8011088 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8010dc8:	4313      	orrs	r3, r2
 8010dca:	b29a      	uxth	r2, r3
 8010dcc:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8010dce:	801a      	strh	r2, [r3, #0]
 8010dd0:	e01b      	b.n	8010e0a <HAL_PCD_EP_DB_Transmit+0xfe>
 8010dd2:	68bb      	ldr	r3, [r7, #8]
 8010dd4:	785b      	ldrb	r3, [r3, #1]
 8010dd6:	2b01      	cmp	r3, #1
 8010dd8:	d117      	bne.n	8010e0a <HAL_PCD_EP_DB_Transmit+0xfe>
 8010dda:	68fb      	ldr	r3, [r7, #12]
 8010ddc:	681b      	ldr	r3, [r3, #0]
 8010dde:	637b      	str	r3, [r7, #52]	@ 0x34
 8010de0:	68fb      	ldr	r3, [r7, #12]
 8010de2:	681b      	ldr	r3, [r3, #0]
 8010de4:	2250      	movs	r2, #80	@ 0x50
 8010de6:	5a9b      	ldrh	r3, [r3, r2]
 8010de8:	b29b      	uxth	r3, r3
 8010dea:	001a      	movs	r2, r3
 8010dec:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010dee:	189b      	adds	r3, r3, r2
 8010df0:	637b      	str	r3, [r7, #52]	@ 0x34
 8010df2:	68bb      	ldr	r3, [r7, #8]
 8010df4:	781b      	ldrb	r3, [r3, #0]
 8010df6:	00da      	lsls	r2, r3, #3
 8010df8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8010dfa:	18d3      	adds	r3, r2, r3
 8010dfc:	4aa1      	ldr	r2, [pc, #644]	@ (8011084 <HAL_PCD_EP_DB_Transmit+0x378>)
 8010dfe:	4694      	mov	ip, r2
 8010e00:	4463      	add	r3, ip
 8010e02:	633b      	str	r3, [r7, #48]	@ 0x30
 8010e04:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8010e06:	2200      	movs	r2, #0
 8010e08:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8010e0a:	68fb      	ldr	r3, [r7, #12]
 8010e0c:	681b      	ldr	r3, [r3, #0]
 8010e0e:	627b      	str	r3, [r7, #36]	@ 0x24
 8010e10:	68bb      	ldr	r3, [r7, #8]
 8010e12:	785b      	ldrb	r3, [r3, #1]
 8010e14:	2b00      	cmp	r3, #0
 8010e16:	d125      	bne.n	8010e64 <HAL_PCD_EP_DB_Transmit+0x158>
 8010e18:	68fb      	ldr	r3, [r7, #12]
 8010e1a:	681b      	ldr	r3, [r3, #0]
 8010e1c:	61fb      	str	r3, [r7, #28]
 8010e1e:	68fb      	ldr	r3, [r7, #12]
 8010e20:	681b      	ldr	r3, [r3, #0]
 8010e22:	2250      	movs	r2, #80	@ 0x50
 8010e24:	5a9b      	ldrh	r3, [r3, r2]
 8010e26:	b29b      	uxth	r3, r3
 8010e28:	001a      	movs	r2, r3
 8010e2a:	69fb      	ldr	r3, [r7, #28]
 8010e2c:	189b      	adds	r3, r3, r2
 8010e2e:	61fb      	str	r3, [r7, #28]
 8010e30:	68bb      	ldr	r3, [r7, #8]
 8010e32:	781b      	ldrb	r3, [r3, #0]
 8010e34:	00da      	lsls	r2, r3, #3
 8010e36:	69fb      	ldr	r3, [r7, #28]
 8010e38:	18d3      	adds	r3, r2, r3
 8010e3a:	4a94      	ldr	r2, [pc, #592]	@ (801108c <HAL_PCD_EP_DB_Transmit+0x380>)
 8010e3c:	4694      	mov	ip, r2
 8010e3e:	4463      	add	r3, ip
 8010e40:	61bb      	str	r3, [r7, #24]
 8010e42:	69bb      	ldr	r3, [r7, #24]
 8010e44:	881b      	ldrh	r3, [r3, #0]
 8010e46:	b29b      	uxth	r3, r3
 8010e48:	059b      	lsls	r3, r3, #22
 8010e4a:	0d9b      	lsrs	r3, r3, #22
 8010e4c:	b29a      	uxth	r2, r3
 8010e4e:	69bb      	ldr	r3, [r7, #24]
 8010e50:	801a      	strh	r2, [r3, #0]
 8010e52:	69bb      	ldr	r3, [r7, #24]
 8010e54:	881b      	ldrh	r3, [r3, #0]
 8010e56:	b29b      	uxth	r3, r3
 8010e58:	4a8b      	ldr	r2, [pc, #556]	@ (8011088 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8010e5a:	4313      	orrs	r3, r2
 8010e5c:	b29a      	uxth	r2, r3
 8010e5e:	69bb      	ldr	r3, [r7, #24]
 8010e60:	801a      	strh	r2, [r3, #0]
 8010e62:	e018      	b.n	8010e96 <HAL_PCD_EP_DB_Transmit+0x18a>
 8010e64:	68bb      	ldr	r3, [r7, #8]
 8010e66:	785b      	ldrb	r3, [r3, #1]
 8010e68:	2b01      	cmp	r3, #1
 8010e6a:	d114      	bne.n	8010e96 <HAL_PCD_EP_DB_Transmit+0x18a>
 8010e6c:	68fb      	ldr	r3, [r7, #12]
 8010e6e:	681b      	ldr	r3, [r3, #0]
 8010e70:	2250      	movs	r2, #80	@ 0x50
 8010e72:	5a9b      	ldrh	r3, [r3, r2]
 8010e74:	b29b      	uxth	r3, r3
 8010e76:	001a      	movs	r2, r3
 8010e78:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e7a:	189b      	adds	r3, r3, r2
 8010e7c:	627b      	str	r3, [r7, #36]	@ 0x24
 8010e7e:	68bb      	ldr	r3, [r7, #8]
 8010e80:	781b      	ldrb	r3, [r3, #0]
 8010e82:	00da      	lsls	r2, r3, #3
 8010e84:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8010e86:	18d3      	adds	r3, r2, r3
 8010e88:	4a80      	ldr	r2, [pc, #512]	@ (801108c <HAL_PCD_EP_DB_Transmit+0x380>)
 8010e8a:	4694      	mov	ip, r2
 8010e8c:	4463      	add	r3, ip
 8010e8e:	623b      	str	r3, [r7, #32]
 8010e90:	6a3b      	ldr	r3, [r7, #32]
 8010e92:	2200      	movs	r2, #0
 8010e94:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 8010e96:	68bb      	ldr	r3, [r7, #8]
 8010e98:	781a      	ldrb	r2, [r3, #0]
 8010e9a:	68fb      	ldr	r3, [r7, #12]
 8010e9c:	0011      	movs	r1, r2
 8010e9e:	0018      	movs	r0, r3
 8010ea0:	f008 fbb8 	bl	8019614 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8010ea4:	1dbb      	adds	r3, r7, #6
 8010ea6:	881a      	ldrh	r2, [r3, #0]
 8010ea8:	2380      	movs	r3, #128	@ 0x80
 8010eaa:	01db      	lsls	r3, r3, #7
 8010eac:	4013      	ands	r3, r2
 8010eae:	d100      	bne.n	8010eb2 <HAL_PCD_EP_DB_Transmit+0x1a6>
 8010eb0:	e309      	b.n	80114c6 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8010eb2:	68fb      	ldr	r3, [r7, #12]
 8010eb4:	681b      	ldr	r3, [r3, #0]
 8010eb6:	001a      	movs	r2, r3
 8010eb8:	68bb      	ldr	r3, [r7, #8]
 8010eba:	781b      	ldrb	r3, [r3, #0]
 8010ebc:	009b      	lsls	r3, r3, #2
 8010ebe:	18d3      	adds	r3, r2, r3
 8010ec0:	881b      	ldrh	r3, [r3, #0]
 8010ec2:	b29a      	uxth	r2, r3
 8010ec4:	2016      	movs	r0, #22
 8010ec6:	183b      	adds	r3, r7, r0
 8010ec8:	4971      	ldr	r1, [pc, #452]	@ (8011090 <HAL_PCD_EP_DB_Transmit+0x384>)
 8010eca:	400a      	ands	r2, r1
 8010ecc:	801a      	strh	r2, [r3, #0]
 8010ece:	68fb      	ldr	r3, [r7, #12]
 8010ed0:	681b      	ldr	r3, [r3, #0]
 8010ed2:	001a      	movs	r2, r3
 8010ed4:	68bb      	ldr	r3, [r7, #8]
 8010ed6:	781b      	ldrb	r3, [r3, #0]
 8010ed8:	009b      	lsls	r3, r3, #2
 8010eda:	18d3      	adds	r3, r2, r3
 8010edc:	183a      	adds	r2, r7, r0
 8010ede:	8812      	ldrh	r2, [r2, #0]
 8010ee0:	496c      	ldr	r1, [pc, #432]	@ (8011094 <HAL_PCD_EP_DB_Transmit+0x388>)
 8010ee2:	430a      	orrs	r2, r1
 8010ee4:	b292      	uxth	r2, r2
 8010ee6:	801a      	strh	r2, [r3, #0]
 8010ee8:	e2ed      	b.n	80114c6 <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) != 0U)
 8010eea:	1dbb      	adds	r3, r7, #6
 8010eec:	881a      	ldrh	r2, [r3, #0]
 8010eee:	2380      	movs	r3, #128	@ 0x80
 8010ef0:	01db      	lsls	r3, r3, #7
 8010ef2:	4013      	ands	r3, r2
 8010ef4:	d01a      	beq.n	8010f2c <HAL_PCD_EP_DB_Transmit+0x220>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8010ef6:	68fb      	ldr	r3, [r7, #12]
 8010ef8:	681b      	ldr	r3, [r3, #0]
 8010efa:	001a      	movs	r2, r3
 8010efc:	68bb      	ldr	r3, [r7, #8]
 8010efe:	781b      	ldrb	r3, [r3, #0]
 8010f00:	009b      	lsls	r3, r3, #2
 8010f02:	18d3      	adds	r3, r2, r3
 8010f04:	881b      	ldrh	r3, [r3, #0]
 8010f06:	b29a      	uxth	r2, r3
 8010f08:	208a      	movs	r0, #138	@ 0x8a
 8010f0a:	183b      	adds	r3, r7, r0
 8010f0c:	4960      	ldr	r1, [pc, #384]	@ (8011090 <HAL_PCD_EP_DB_Transmit+0x384>)
 8010f0e:	400a      	ands	r2, r1
 8010f10:	801a      	strh	r2, [r3, #0]
 8010f12:	68fb      	ldr	r3, [r7, #12]
 8010f14:	681b      	ldr	r3, [r3, #0]
 8010f16:	001a      	movs	r2, r3
 8010f18:	68bb      	ldr	r3, [r7, #8]
 8010f1a:	781b      	ldrb	r3, [r3, #0]
 8010f1c:	009b      	lsls	r3, r3, #2
 8010f1e:	18d3      	adds	r3, r2, r3
 8010f20:	183a      	adds	r2, r7, r0
 8010f22:	8812      	ldrh	r2, [r2, #0]
 8010f24:	495b      	ldr	r1, [pc, #364]	@ (8011094 <HAL_PCD_EP_DB_Transmit+0x388>)
 8010f26:	430a      	orrs	r2, r1
 8010f28:	b292      	uxth	r2, r2
 8010f2a:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8010f2c:	68bb      	ldr	r3, [r7, #8]
 8010f2e:	2224      	movs	r2, #36	@ 0x24
 8010f30:	5c9b      	ldrb	r3, [r3, r2]
 8010f32:	2b01      	cmp	r3, #1
 8010f34:	d000      	beq.n	8010f38 <HAL_PCD_EP_DB_Transmit+0x22c>
 8010f36:	e2c6      	b.n	80114c6 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 8010f38:	68bb      	ldr	r3, [r7, #8]
 8010f3a:	695a      	ldr	r2, [r3, #20]
 8010f3c:	2186      	movs	r1, #134	@ 0x86
 8010f3e:	187b      	adds	r3, r7, r1
 8010f40:	881b      	ldrh	r3, [r3, #0]
 8010f42:	18d2      	adds	r2, r2, r3
 8010f44:	68bb      	ldr	r3, [r7, #8]
 8010f46:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 8010f48:	68bb      	ldr	r3, [r7, #8]
 8010f4a:	69da      	ldr	r2, [r3, #28]
 8010f4c:	187b      	adds	r3, r7, r1
 8010f4e:	881b      	ldrh	r3, [r3, #0]
 8010f50:	18d2      	adds	r2, r2, r3
 8010f52:	68bb      	ldr	r3, [r7, #8]
 8010f54:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 8010f56:	68bb      	ldr	r3, [r7, #8]
 8010f58:	6a1a      	ldr	r2, [r3, #32]
 8010f5a:	68bb      	ldr	r3, [r7, #8]
 8010f5c:	691b      	ldr	r3, [r3, #16]
 8010f5e:	429a      	cmp	r2, r3
 8010f60:	d30c      	bcc.n	8010f7c <HAL_PCD_EP_DB_Transmit+0x270>
        {
          len = ep->maxpacket;
 8010f62:	68bb      	ldr	r3, [r7, #8]
 8010f64:	691b      	ldr	r3, [r3, #16]
 8010f66:	218c      	movs	r1, #140	@ 0x8c
 8010f68:	187a      	adds	r2, r7, r1
 8010f6a:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8010f6c:	68bb      	ldr	r3, [r7, #8]
 8010f6e:	6a1a      	ldr	r2, [r3, #32]
 8010f70:	187b      	adds	r3, r7, r1
 8010f72:	681b      	ldr	r3, [r3, #0]
 8010f74:	1ad2      	subs	r2, r2, r3
 8010f76:	68bb      	ldr	r3, [r7, #8]
 8010f78:	621a      	str	r2, [r3, #32]
 8010f7a:	e01a      	b.n	8010fb2 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else if (ep->xfer_len_db == 0U)
 8010f7c:	68bb      	ldr	r3, [r7, #8]
 8010f7e:	6a1b      	ldr	r3, [r3, #32]
 8010f80:	2b00      	cmp	r3, #0
 8010f82:	d10a      	bne.n	8010f9a <HAL_PCD_EP_DB_Transmit+0x28e>
        {
          len = TxPctSize;
 8010f84:	2386      	movs	r3, #134	@ 0x86
 8010f86:	18fb      	adds	r3, r7, r3
 8010f88:	881b      	ldrh	r3, [r3, #0]
 8010f8a:	228c      	movs	r2, #140	@ 0x8c
 8010f8c:	18ba      	adds	r2, r7, r2
 8010f8e:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8010f90:	68bb      	ldr	r3, [r7, #8]
 8010f92:	2224      	movs	r2, #36	@ 0x24
 8010f94:	2100      	movs	r1, #0
 8010f96:	5499      	strb	r1, [r3, r2]
 8010f98:	e00b      	b.n	8010fb2 <HAL_PCD_EP_DB_Transmit+0x2a6>
        }
        else
        {
          ep->xfer_fill_db = 0U;
 8010f9a:	68bb      	ldr	r3, [r7, #8]
 8010f9c:	2224      	movs	r2, #36	@ 0x24
 8010f9e:	2100      	movs	r1, #0
 8010fa0:	5499      	strb	r1, [r3, r2]
          len = ep->xfer_len_db;
 8010fa2:	68bb      	ldr	r3, [r7, #8]
 8010fa4:	6a1b      	ldr	r3, [r3, #32]
 8010fa6:	228c      	movs	r2, #140	@ 0x8c
 8010fa8:	18ba      	adds	r2, r7, r2
 8010faa:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 8010fac:	68bb      	ldr	r3, [r7, #8]
 8010fae:	2200      	movs	r2, #0
 8010fb0:	621a      	str	r2, [r3, #32]
        }

        /* Write remaining Data to Buffer */
        /* Set the Double buffer counter for pma buffer1 */
        PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8010fb2:	68bb      	ldr	r3, [r7, #8]
 8010fb4:	785b      	ldrb	r3, [r3, #1]
 8010fb6:	2b00      	cmp	r3, #0
 8010fb8:	d000      	beq.n	8010fbc <HAL_PCD_EP_DB_Transmit+0x2b0>
 8010fba:	e06d      	b.n	8011098 <HAL_PCD_EP_DB_Transmit+0x38c>
 8010fbc:	68fb      	ldr	r3, [r7, #12]
 8010fbe:	681b      	ldr	r3, [r3, #0]
 8010fc0:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010fc2:	68fb      	ldr	r3, [r7, #12]
 8010fc4:	681b      	ldr	r3, [r3, #0]
 8010fc6:	2250      	movs	r2, #80	@ 0x50
 8010fc8:	5a9b      	ldrh	r3, [r3, r2]
 8010fca:	b29b      	uxth	r3, r3
 8010fcc:	001a      	movs	r2, r3
 8010fce:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010fd0:	189b      	adds	r3, r3, r2
 8010fd2:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8010fd4:	68bb      	ldr	r3, [r7, #8]
 8010fd6:	781b      	ldrb	r3, [r3, #0]
 8010fd8:	00da      	lsls	r2, r3, #3
 8010fda:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8010fdc:	18d3      	adds	r3, r2, r3
 8010fde:	4a29      	ldr	r2, [pc, #164]	@ (8011084 <HAL_PCD_EP_DB_Transmit+0x378>)
 8010fe0:	4694      	mov	ip, r2
 8010fe2:	4463      	add	r3, ip
 8010fe4:	63bb      	str	r3, [r7, #56]	@ 0x38
 8010fe6:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010fe8:	881b      	ldrh	r3, [r3, #0]
 8010fea:	b29b      	uxth	r3, r3
 8010fec:	059b      	lsls	r3, r3, #22
 8010fee:	0d9b      	lsrs	r3, r3, #22
 8010ff0:	b29a      	uxth	r2, r3
 8010ff2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8010ff4:	801a      	strh	r2, [r3, #0]
 8010ff6:	228c      	movs	r2, #140	@ 0x8c
 8010ff8:	18bb      	adds	r3, r7, r2
 8010ffa:	681b      	ldr	r3, [r3, #0]
 8010ffc:	2b3e      	cmp	r3, #62	@ 0x3e
 8010ffe:	d91a      	bls.n	8011036 <HAL_PCD_EP_DB_Transmit+0x32a>
 8011000:	18bb      	adds	r3, r7, r2
 8011002:	681b      	ldr	r3, [r3, #0]
 8011004:	095b      	lsrs	r3, r3, #5
 8011006:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011008:	18bb      	adds	r3, r7, r2
 801100a:	681b      	ldr	r3, [r3, #0]
 801100c:	221f      	movs	r2, #31
 801100e:	4013      	ands	r3, r2
 8011010:	d102      	bne.n	8011018 <HAL_PCD_EP_DB_Transmit+0x30c>
 8011012:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011014:	3b01      	subs	r3, #1
 8011016:	64bb      	str	r3, [r7, #72]	@ 0x48
 8011018:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801101a:	881b      	ldrh	r3, [r3, #0]
 801101c:	b29a      	uxth	r2, r3
 801101e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011020:	b29b      	uxth	r3, r3
 8011022:	029b      	lsls	r3, r3, #10
 8011024:	b29b      	uxth	r3, r3
 8011026:	4313      	orrs	r3, r2
 8011028:	b29b      	uxth	r3, r3
 801102a:	4a17      	ldr	r2, [pc, #92]	@ (8011088 <HAL_PCD_EP_DB_Transmit+0x37c>)
 801102c:	4313      	orrs	r3, r2
 801102e:	b29a      	uxth	r2, r3
 8011030:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011032:	801a      	strh	r2, [r3, #0]
 8011034:	e04f      	b.n	80110d6 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8011036:	238c      	movs	r3, #140	@ 0x8c
 8011038:	18fb      	adds	r3, r7, r3
 801103a:	681b      	ldr	r3, [r3, #0]
 801103c:	2b00      	cmp	r3, #0
 801103e:	d108      	bne.n	8011052 <HAL_PCD_EP_DB_Transmit+0x346>
 8011040:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011042:	881b      	ldrh	r3, [r3, #0]
 8011044:	b29b      	uxth	r3, r3
 8011046:	4a10      	ldr	r2, [pc, #64]	@ (8011088 <HAL_PCD_EP_DB_Transmit+0x37c>)
 8011048:	4313      	orrs	r3, r2
 801104a:	b29a      	uxth	r2, r3
 801104c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801104e:	801a      	strh	r2, [r3, #0]
 8011050:	e041      	b.n	80110d6 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8011052:	228c      	movs	r2, #140	@ 0x8c
 8011054:	18bb      	adds	r3, r7, r2
 8011056:	681b      	ldr	r3, [r3, #0]
 8011058:	085b      	lsrs	r3, r3, #1
 801105a:	64bb      	str	r3, [r7, #72]	@ 0x48
 801105c:	18bb      	adds	r3, r7, r2
 801105e:	681b      	ldr	r3, [r3, #0]
 8011060:	2201      	movs	r2, #1
 8011062:	4013      	ands	r3, r2
 8011064:	d002      	beq.n	801106c <HAL_PCD_EP_DB_Transmit+0x360>
 8011066:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011068:	3301      	adds	r3, #1
 801106a:	64bb      	str	r3, [r7, #72]	@ 0x48
 801106c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801106e:	881b      	ldrh	r3, [r3, #0]
 8011070:	b29a      	uxth	r2, r3
 8011072:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8011074:	b29b      	uxth	r3, r3
 8011076:	029b      	lsls	r3, r3, #10
 8011078:	b29b      	uxth	r3, r3
 801107a:	4313      	orrs	r3, r2
 801107c:	b29a      	uxth	r2, r3
 801107e:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8011080:	801a      	strh	r2, [r3, #0]
 8011082:	e028      	b.n	80110d6 <HAL_PCD_EP_DB_Transmit+0x3ca>
 8011084:	00000402 	.word	0x00000402
 8011088:	ffff8000 	.word	0xffff8000
 801108c:	00000406 	.word	0x00000406
 8011090:	ffff8f8f 	.word	0xffff8f8f
 8011094:	ffffc080 	.word	0xffffc080
 8011098:	68bb      	ldr	r3, [r7, #8]
 801109a:	785b      	ldrb	r3, [r3, #1]
 801109c:	2b01      	cmp	r3, #1
 801109e:	d11a      	bne.n	80110d6 <HAL_PCD_EP_DB_Transmit+0x3ca>
 80110a0:	68fb      	ldr	r3, [r7, #12]
 80110a2:	681b      	ldr	r3, [r3, #0]
 80110a4:	647b      	str	r3, [r7, #68]	@ 0x44
 80110a6:	68fb      	ldr	r3, [r7, #12]
 80110a8:	681b      	ldr	r3, [r3, #0]
 80110aa:	2250      	movs	r2, #80	@ 0x50
 80110ac:	5a9b      	ldrh	r3, [r3, r2]
 80110ae:	b29b      	uxth	r3, r3
 80110b0:	001a      	movs	r2, r3
 80110b2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80110b4:	189b      	adds	r3, r3, r2
 80110b6:	647b      	str	r3, [r7, #68]	@ 0x44
 80110b8:	68bb      	ldr	r3, [r7, #8]
 80110ba:	781b      	ldrb	r3, [r3, #0]
 80110bc:	00da      	lsls	r2, r3, #3
 80110be:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80110c0:	18d3      	adds	r3, r2, r3
 80110c2:	4adb      	ldr	r2, [pc, #876]	@ (8011430 <HAL_PCD_EP_DB_Transmit+0x724>)
 80110c4:	4694      	mov	ip, r2
 80110c6:	4463      	add	r3, ip
 80110c8:	643b      	str	r3, [r7, #64]	@ 0x40
 80110ca:	238c      	movs	r3, #140	@ 0x8c
 80110cc:	18fb      	adds	r3, r7, r3
 80110ce:	681b      	ldr	r3, [r3, #0]
 80110d0:	b29a      	uxth	r2, r3
 80110d2:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80110d4:	801a      	strh	r2, [r3, #0]

        /* Copy user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr0, (uint16_t)len);
 80110d6:	68fb      	ldr	r3, [r7, #12]
 80110d8:	6818      	ldr	r0, [r3, #0]
 80110da:	68bb      	ldr	r3, [r7, #8]
 80110dc:	6959      	ldr	r1, [r3, #20]
 80110de:	68bb      	ldr	r3, [r7, #8]
 80110e0:	891a      	ldrh	r2, [r3, #8]
 80110e2:	238c      	movs	r3, #140	@ 0x8c
 80110e4:	18fb      	adds	r3, r7, r3
 80110e6:	681b      	ldr	r3, [r3, #0]
 80110e8:	b29b      	uxth	r3, r3
 80110ea:	f006 fa0f 	bl	801750c <USB_WritePMA>
 80110ee:	e1ea      	b.n	80114c6 <HAL_PCD_EP_DB_Transmit+0x7ba>
    }
  }
  else /* Data Buffer1 ACK received */
  {
    /* multi-packet on the NON control IN endpoint */
    TxPctSize = (uint16_t)PCD_GET_EP_DBUF1_CNT(hpcd->Instance, ep->num);
 80110f0:	68fb      	ldr	r3, [r7, #12]
 80110f2:	681b      	ldr	r3, [r3, #0]
 80110f4:	2250      	movs	r2, #80	@ 0x50
 80110f6:	5a9b      	ldrh	r3, [r3, r2]
 80110f8:	b29b      	uxth	r3, r3
 80110fa:	001a      	movs	r2, r3
 80110fc:	68bb      	ldr	r3, [r7, #8]
 80110fe:	781b      	ldrb	r3, [r3, #0]
 8011100:	00db      	lsls	r3, r3, #3
 8011102:	18d2      	adds	r2, r2, r3
 8011104:	68fb      	ldr	r3, [r7, #12]
 8011106:	681b      	ldr	r3, [r3, #0]
 8011108:	18d3      	adds	r3, r2, r3
 801110a:	4aca      	ldr	r2, [pc, #808]	@ (8011434 <HAL_PCD_EP_DB_Transmit+0x728>)
 801110c:	4694      	mov	ip, r2
 801110e:	4463      	add	r3, ip
 8011110:	881a      	ldrh	r2, [r3, #0]
 8011112:	2186      	movs	r1, #134	@ 0x86
 8011114:	187b      	adds	r3, r7, r1
 8011116:	0592      	lsls	r2, r2, #22
 8011118:	0d92      	lsrs	r2, r2, #22
 801111a:	801a      	strh	r2, [r3, #0]

    if (ep->xfer_len >= TxPctSize)
 801111c:	68bb      	ldr	r3, [r7, #8]
 801111e:	699a      	ldr	r2, [r3, #24]
 8011120:	187b      	adds	r3, r7, r1
 8011122:	881b      	ldrh	r3, [r3, #0]
 8011124:	429a      	cmp	r2, r3
 8011126:	d307      	bcc.n	8011138 <HAL_PCD_EP_DB_Transmit+0x42c>
    {
      ep->xfer_len -= TxPctSize;
 8011128:	68bb      	ldr	r3, [r7, #8]
 801112a:	699a      	ldr	r2, [r3, #24]
 801112c:	187b      	adds	r3, r7, r1
 801112e:	881b      	ldrh	r3, [r3, #0]
 8011130:	1ad2      	subs	r2, r2, r3
 8011132:	68bb      	ldr	r3, [r7, #8]
 8011134:	619a      	str	r2, [r3, #24]
 8011136:	e002      	b.n	801113e <HAL_PCD_EP_DB_Transmit+0x432>
    }
    else
    {
      ep->xfer_len = 0U;
 8011138:	68bb      	ldr	r3, [r7, #8]
 801113a:	2200      	movs	r2, #0
 801113c:	619a      	str	r2, [r3, #24]
    }

    /* Transfer is completed */
    if (ep->xfer_len == 0U)
 801113e:	68bb      	ldr	r3, [r7, #8]
 8011140:	699b      	ldr	r3, [r3, #24]
 8011142:	2b00      	cmp	r3, #0
 8011144:	d000      	beq.n	8011148 <HAL_PCD_EP_DB_Transmit+0x43c>
 8011146:	e0bb      	b.n	80112c0 <HAL_PCD_EP_DB_Transmit+0x5b4>
    {
      PCD_SET_EP_DBUF0_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 8011148:	68bb      	ldr	r3, [r7, #8]
 801114a:	785b      	ldrb	r3, [r3, #1]
 801114c:	2b00      	cmp	r3, #0
 801114e:	d125      	bne.n	801119c <HAL_PCD_EP_DB_Transmit+0x490>
 8011150:	68fb      	ldr	r3, [r7, #12]
 8011152:	681b      	ldr	r3, [r3, #0]
 8011154:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8011156:	68fb      	ldr	r3, [r7, #12]
 8011158:	681b      	ldr	r3, [r3, #0]
 801115a:	2250      	movs	r2, #80	@ 0x50
 801115c:	5a9b      	ldrh	r3, [r3, r2]
 801115e:	b29b      	uxth	r3, r3
 8011160:	001a      	movs	r2, r3
 8011162:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011164:	189b      	adds	r3, r3, r2
 8011166:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8011168:	68bb      	ldr	r3, [r7, #8]
 801116a:	781b      	ldrb	r3, [r3, #0]
 801116c:	00da      	lsls	r2, r3, #3
 801116e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8011170:	18d3      	adds	r3, r2, r3
 8011172:	4aaf      	ldr	r2, [pc, #700]	@ (8011430 <HAL_PCD_EP_DB_Transmit+0x724>)
 8011174:	4694      	mov	ip, r2
 8011176:	4463      	add	r3, ip
 8011178:	67bb      	str	r3, [r7, #120]	@ 0x78
 801117a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801117c:	881b      	ldrh	r3, [r3, #0]
 801117e:	b29b      	uxth	r3, r3
 8011180:	059b      	lsls	r3, r3, #22
 8011182:	0d9b      	lsrs	r3, r3, #22
 8011184:	b29a      	uxth	r2, r3
 8011186:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011188:	801a      	strh	r2, [r3, #0]
 801118a:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801118c:	881b      	ldrh	r3, [r3, #0]
 801118e:	b29b      	uxth	r3, r3
 8011190:	4aa9      	ldr	r2, [pc, #676]	@ (8011438 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8011192:	4313      	orrs	r3, r2
 8011194:	b29a      	uxth	r2, r3
 8011196:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8011198:	801a      	strh	r2, [r3, #0]
 801119a:	e01b      	b.n	80111d4 <HAL_PCD_EP_DB_Transmit+0x4c8>
 801119c:	68bb      	ldr	r3, [r7, #8]
 801119e:	785b      	ldrb	r3, [r3, #1]
 80111a0:	2b01      	cmp	r3, #1
 80111a2:	d117      	bne.n	80111d4 <HAL_PCD_EP_DB_Transmit+0x4c8>
 80111a4:	68fb      	ldr	r3, [r7, #12]
 80111a6:	681b      	ldr	r3, [r3, #0]
 80111a8:	667b      	str	r3, [r7, #100]	@ 0x64
 80111aa:	68fb      	ldr	r3, [r7, #12]
 80111ac:	681b      	ldr	r3, [r3, #0]
 80111ae:	2250      	movs	r2, #80	@ 0x50
 80111b0:	5a9b      	ldrh	r3, [r3, r2]
 80111b2:	b29b      	uxth	r3, r3
 80111b4:	001a      	movs	r2, r3
 80111b6:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80111b8:	189b      	adds	r3, r3, r2
 80111ba:	667b      	str	r3, [r7, #100]	@ 0x64
 80111bc:	68bb      	ldr	r3, [r7, #8]
 80111be:	781b      	ldrb	r3, [r3, #0]
 80111c0:	00da      	lsls	r2, r3, #3
 80111c2:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80111c4:	18d3      	adds	r3, r2, r3
 80111c6:	4a9a      	ldr	r2, [pc, #616]	@ (8011430 <HAL_PCD_EP_DB_Transmit+0x724>)
 80111c8:	4694      	mov	ip, r2
 80111ca:	4463      	add	r3, ip
 80111cc:	663b      	str	r3, [r7, #96]	@ 0x60
 80111ce:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
 80111d0:	2200      	movs	r2, #0
 80111d2:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, 0U);
 80111d4:	68fb      	ldr	r3, [r7, #12]
 80111d6:	681b      	ldr	r3, [r3, #0]
 80111d8:	677b      	str	r3, [r7, #116]	@ 0x74
 80111da:	68bb      	ldr	r3, [r7, #8]
 80111dc:	785b      	ldrb	r3, [r3, #1]
 80111de:	2b00      	cmp	r3, #0
 80111e0:	d12b      	bne.n	801123a <HAL_PCD_EP_DB_Transmit+0x52e>
 80111e2:	68fb      	ldr	r3, [r7, #12]
 80111e4:	681b      	ldr	r3, [r3, #0]
 80111e6:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80111e8:	68fb      	ldr	r3, [r7, #12]
 80111ea:	681b      	ldr	r3, [r3, #0]
 80111ec:	2250      	movs	r2, #80	@ 0x50
 80111ee:	5a9b      	ldrh	r3, [r3, r2]
 80111f0:	b29b      	uxth	r3, r3
 80111f2:	001a      	movs	r2, r3
 80111f4:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80111f6:	189b      	adds	r3, r3, r2
 80111f8:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80111fa:	68bb      	ldr	r3, [r7, #8]
 80111fc:	781b      	ldrb	r3, [r3, #0]
 80111fe:	00da      	lsls	r2, r3, #3
 8011200:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8011202:	18d3      	adds	r3, r2, r3
 8011204:	4a8b      	ldr	r2, [pc, #556]	@ (8011434 <HAL_PCD_EP_DB_Transmit+0x728>)
 8011206:	4694      	mov	ip, r2
 8011208:	4463      	add	r3, ip
 801120a:	2180      	movs	r1, #128	@ 0x80
 801120c:	187a      	adds	r2, r7, r1
 801120e:	6013      	str	r3, [r2, #0]
 8011210:	187b      	adds	r3, r7, r1
 8011212:	681b      	ldr	r3, [r3, #0]
 8011214:	881b      	ldrh	r3, [r3, #0]
 8011216:	b29b      	uxth	r3, r3
 8011218:	059b      	lsls	r3, r3, #22
 801121a:	0d9b      	lsrs	r3, r3, #22
 801121c:	b29a      	uxth	r2, r3
 801121e:	187b      	adds	r3, r7, r1
 8011220:	681b      	ldr	r3, [r3, #0]
 8011222:	801a      	strh	r2, [r3, #0]
 8011224:	187b      	adds	r3, r7, r1
 8011226:	681b      	ldr	r3, [r3, #0]
 8011228:	881b      	ldrh	r3, [r3, #0]
 801122a:	b29b      	uxth	r3, r3
 801122c:	4a82      	ldr	r2, [pc, #520]	@ (8011438 <HAL_PCD_EP_DB_Transmit+0x72c>)
 801122e:	4313      	orrs	r3, r2
 8011230:	b29a      	uxth	r2, r3
 8011232:	187b      	adds	r3, r7, r1
 8011234:	681b      	ldr	r3, [r3, #0]
 8011236:	801a      	strh	r2, [r3, #0]
 8011238:	e018      	b.n	801126c <HAL_PCD_EP_DB_Transmit+0x560>
 801123a:	68bb      	ldr	r3, [r7, #8]
 801123c:	785b      	ldrb	r3, [r3, #1]
 801123e:	2b01      	cmp	r3, #1
 8011240:	d114      	bne.n	801126c <HAL_PCD_EP_DB_Transmit+0x560>
 8011242:	68fb      	ldr	r3, [r7, #12]
 8011244:	681b      	ldr	r3, [r3, #0]
 8011246:	2250      	movs	r2, #80	@ 0x50
 8011248:	5a9b      	ldrh	r3, [r3, r2]
 801124a:	b29b      	uxth	r3, r3
 801124c:	001a      	movs	r2, r3
 801124e:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8011250:	189b      	adds	r3, r3, r2
 8011252:	677b      	str	r3, [r7, #116]	@ 0x74
 8011254:	68bb      	ldr	r3, [r7, #8]
 8011256:	781b      	ldrb	r3, [r3, #0]
 8011258:	00da      	lsls	r2, r3, #3
 801125a:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 801125c:	18d3      	adds	r3, r2, r3
 801125e:	4a75      	ldr	r2, [pc, #468]	@ (8011434 <HAL_PCD_EP_DB_Transmit+0x728>)
 8011260:	4694      	mov	ip, r2
 8011262:	4463      	add	r3, ip
 8011264:	673b      	str	r3, [r7, #112]	@ 0x70
 8011266:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8011268:	2200      	movs	r2, #0
 801126a:	801a      	strh	r2, [r3, #0]

      /* TX COMPLETE */
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
      hpcd->DataInStageCallback(hpcd, ep->num);
#else
      HAL_PCD_DataInStageCallback(hpcd, ep->num);
 801126c:	68bb      	ldr	r3, [r7, #8]
 801126e:	781a      	ldrb	r2, [r3, #0]
 8011270:	68fb      	ldr	r3, [r7, #12]
 8011272:	0011      	movs	r1, r2
 8011274:	0018      	movs	r0, r3
 8011276:	f008 f9cd 	bl	8019614 <HAL_PCD_DataInStageCallback>
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */

      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 801127a:	1dbb      	adds	r3, r7, #6
 801127c:	881a      	ldrh	r2, [r3, #0]
 801127e:	2380      	movs	r3, #128	@ 0x80
 8011280:	01db      	lsls	r3, r3, #7
 8011282:	4013      	ands	r3, r2
 8011284:	d000      	beq.n	8011288 <HAL_PCD_EP_DB_Transmit+0x57c>
 8011286:	e11e      	b.n	80114c6 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 8011288:	68fb      	ldr	r3, [r7, #12]
 801128a:	681b      	ldr	r3, [r3, #0]
 801128c:	001a      	movs	r2, r3
 801128e:	68bb      	ldr	r3, [r7, #8]
 8011290:	781b      	ldrb	r3, [r3, #0]
 8011292:	009b      	lsls	r3, r3, #2
 8011294:	18d3      	adds	r3, r2, r3
 8011296:	881b      	ldrh	r3, [r3, #0]
 8011298:	b29a      	uxth	r2, r3
 801129a:	2088      	movs	r0, #136	@ 0x88
 801129c:	183b      	adds	r3, r7, r0
 801129e:	4967      	ldr	r1, [pc, #412]	@ (801143c <HAL_PCD_EP_DB_Transmit+0x730>)
 80112a0:	400a      	ands	r2, r1
 80112a2:	801a      	strh	r2, [r3, #0]
 80112a4:	68fb      	ldr	r3, [r7, #12]
 80112a6:	681b      	ldr	r3, [r3, #0]
 80112a8:	001a      	movs	r2, r3
 80112aa:	68bb      	ldr	r3, [r7, #8]
 80112ac:	781b      	ldrb	r3, [r3, #0]
 80112ae:	009b      	lsls	r3, r3, #2
 80112b0:	18d3      	adds	r3, r2, r3
 80112b2:	183a      	adds	r2, r7, r0
 80112b4:	8812      	ldrh	r2, [r2, #0]
 80112b6:	4962      	ldr	r1, [pc, #392]	@ (8011440 <HAL_PCD_EP_DB_Transmit+0x734>)
 80112b8:	430a      	orrs	r2, r1
 80112ba:	b292      	uxth	r2, r2
 80112bc:	801a      	strh	r2, [r3, #0]
 80112be:	e102      	b.n	80114c6 <HAL_PCD_EP_DB_Transmit+0x7ba>
      }
    }
    else /* Transfer is not yet Done */
    {
      /* need to Free USB Buff */
      if ((wEPVal & USB_EP_DTOG_RX) == 0U)
 80112c0:	1dbb      	adds	r3, r7, #6
 80112c2:	881a      	ldrh	r2, [r3, #0]
 80112c4:	2380      	movs	r3, #128	@ 0x80
 80112c6:	01db      	lsls	r3, r3, #7
 80112c8:	4013      	ands	r3, r2
 80112ca:	d11a      	bne.n	8011302 <HAL_PCD_EP_DB_Transmit+0x5f6>
      {
        PCD_FREE_USER_BUFFER(hpcd->Instance, ep->num, 1U);
 80112cc:	68fb      	ldr	r3, [r7, #12]
 80112ce:	681b      	ldr	r3, [r3, #0]
 80112d0:	001a      	movs	r2, r3
 80112d2:	68bb      	ldr	r3, [r7, #8]
 80112d4:	781b      	ldrb	r3, [r3, #0]
 80112d6:	009b      	lsls	r3, r3, #2
 80112d8:	18d3      	adds	r3, r2, r3
 80112da:	881b      	ldrh	r3, [r3, #0]
 80112dc:	b29a      	uxth	r2, r3
 80112de:	204e      	movs	r0, #78	@ 0x4e
 80112e0:	183b      	adds	r3, r7, r0
 80112e2:	4956      	ldr	r1, [pc, #344]	@ (801143c <HAL_PCD_EP_DB_Transmit+0x730>)
 80112e4:	400a      	ands	r2, r1
 80112e6:	801a      	strh	r2, [r3, #0]
 80112e8:	68fb      	ldr	r3, [r7, #12]
 80112ea:	681b      	ldr	r3, [r3, #0]
 80112ec:	001a      	movs	r2, r3
 80112ee:	68bb      	ldr	r3, [r7, #8]
 80112f0:	781b      	ldrb	r3, [r3, #0]
 80112f2:	009b      	lsls	r3, r3, #2
 80112f4:	18d3      	adds	r3, r2, r3
 80112f6:	183a      	adds	r2, r7, r0
 80112f8:	8812      	ldrh	r2, [r2, #0]
 80112fa:	4951      	ldr	r1, [pc, #324]	@ (8011440 <HAL_PCD_EP_DB_Transmit+0x734>)
 80112fc:	430a      	orrs	r2, r1
 80112fe:	b292      	uxth	r2, r2
 8011300:	801a      	strh	r2, [r3, #0]
      }

      /* Still there is data to Fill in the next Buffer */
      if (ep->xfer_fill_db == 1U)
 8011302:	68bb      	ldr	r3, [r7, #8]
 8011304:	2224      	movs	r2, #36	@ 0x24
 8011306:	5c9b      	ldrb	r3, [r3, r2]
 8011308:	2b01      	cmp	r3, #1
 801130a:	d000      	beq.n	801130e <HAL_PCD_EP_DB_Transmit+0x602>
 801130c:	e0db      	b.n	80114c6 <HAL_PCD_EP_DB_Transmit+0x7ba>
      {
        ep->xfer_buff += TxPctSize;
 801130e:	68bb      	ldr	r3, [r7, #8]
 8011310:	695a      	ldr	r2, [r3, #20]
 8011312:	2186      	movs	r1, #134	@ 0x86
 8011314:	187b      	adds	r3, r7, r1
 8011316:	881b      	ldrh	r3, [r3, #0]
 8011318:	18d2      	adds	r2, r2, r3
 801131a:	68bb      	ldr	r3, [r7, #8]
 801131c:	615a      	str	r2, [r3, #20]
        ep->xfer_count += TxPctSize;
 801131e:	68bb      	ldr	r3, [r7, #8]
 8011320:	69da      	ldr	r2, [r3, #28]
 8011322:	187b      	adds	r3, r7, r1
 8011324:	881b      	ldrh	r3, [r3, #0]
 8011326:	18d2      	adds	r2, r2, r3
 8011328:	68bb      	ldr	r3, [r7, #8]
 801132a:	61da      	str	r2, [r3, #28]

        /* Calculate the len of the new buffer to fill */
        if (ep->xfer_len_db >= ep->maxpacket)
 801132c:	68bb      	ldr	r3, [r7, #8]
 801132e:	6a1a      	ldr	r2, [r3, #32]
 8011330:	68bb      	ldr	r3, [r7, #8]
 8011332:	691b      	ldr	r3, [r3, #16]
 8011334:	429a      	cmp	r2, r3
 8011336:	d30c      	bcc.n	8011352 <HAL_PCD_EP_DB_Transmit+0x646>
        {
          len = ep->maxpacket;
 8011338:	68bb      	ldr	r3, [r7, #8]
 801133a:	691b      	ldr	r3, [r3, #16]
 801133c:	218c      	movs	r1, #140	@ 0x8c
 801133e:	187a      	adds	r2, r7, r1
 8011340:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db -= len;
 8011342:	68bb      	ldr	r3, [r7, #8]
 8011344:	6a1a      	ldr	r2, [r3, #32]
 8011346:	187b      	adds	r3, r7, r1
 8011348:	681b      	ldr	r3, [r3, #0]
 801134a:	1ad2      	subs	r2, r2, r3
 801134c:	68bb      	ldr	r3, [r7, #8]
 801134e:	621a      	str	r2, [r3, #32]
 8011350:	e01a      	b.n	8011388 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else if (ep->xfer_len_db == 0U)
 8011352:	68bb      	ldr	r3, [r7, #8]
 8011354:	6a1b      	ldr	r3, [r3, #32]
 8011356:	2b00      	cmp	r3, #0
 8011358:	d10a      	bne.n	8011370 <HAL_PCD_EP_DB_Transmit+0x664>
        {
          len = TxPctSize;
 801135a:	2386      	movs	r3, #134	@ 0x86
 801135c:	18fb      	adds	r3, r7, r3
 801135e:	881b      	ldrh	r3, [r3, #0]
 8011360:	228c      	movs	r2, #140	@ 0x8c
 8011362:	18ba      	adds	r2, r7, r2
 8011364:	6013      	str	r3, [r2, #0]
          ep->xfer_fill_db = 0U;
 8011366:	68bb      	ldr	r3, [r7, #8]
 8011368:	2224      	movs	r2, #36	@ 0x24
 801136a:	2100      	movs	r1, #0
 801136c:	5499      	strb	r1, [r3, r2]
 801136e:	e00b      	b.n	8011388 <HAL_PCD_EP_DB_Transmit+0x67c>
        }
        else
        {
          len = ep->xfer_len_db;
 8011370:	68bb      	ldr	r3, [r7, #8]
 8011372:	6a1b      	ldr	r3, [r3, #32]
 8011374:	228c      	movs	r2, #140	@ 0x8c
 8011376:	18ba      	adds	r2, r7, r2
 8011378:	6013      	str	r3, [r2, #0]
          ep->xfer_len_db = 0U;
 801137a:	68bb      	ldr	r3, [r7, #8]
 801137c:	2200      	movs	r2, #0
 801137e:	621a      	str	r2, [r3, #32]
          ep->xfer_fill_db = 0;
 8011380:	68bb      	ldr	r3, [r7, #8]
 8011382:	2224      	movs	r2, #36	@ 0x24
 8011384:	2100      	movs	r1, #0
 8011386:	5499      	strb	r1, [r3, r2]
        }

        /* Set the Double buffer counter for pmabuffer1 */
        PCD_SET_EP_DBUF1_CNT(hpcd->Instance, ep->num, ep->is_in, len);
 8011388:	68fb      	ldr	r3, [r7, #12]
 801138a:	681b      	ldr	r3, [r3, #0]
 801138c:	657b      	str	r3, [r7, #84]	@ 0x54
 801138e:	68bb      	ldr	r3, [r7, #8]
 8011390:	785b      	ldrb	r3, [r3, #1]
 8011392:	2b00      	cmp	r3, #0
 8011394:	d000      	beq.n	8011398 <HAL_PCD_EP_DB_Transmit+0x68c>
 8011396:	e06e      	b.n	8011476 <HAL_PCD_EP_DB_Transmit+0x76a>
 8011398:	68fb      	ldr	r3, [r7, #12]
 801139a:	681b      	ldr	r3, [r3, #0]
 801139c:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801139e:	68fb      	ldr	r3, [r7, #12]
 80113a0:	681b      	ldr	r3, [r3, #0]
 80113a2:	2250      	movs	r2, #80	@ 0x50
 80113a4:	5a9b      	ldrh	r3, [r3, r2]
 80113a6:	b29b      	uxth	r3, r3
 80113a8:	001a      	movs	r2, r3
 80113aa:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80113ac:	189b      	adds	r3, r3, r2
 80113ae:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80113b0:	68bb      	ldr	r3, [r7, #8]
 80113b2:	781b      	ldrb	r3, [r3, #0]
 80113b4:	00da      	lsls	r2, r3, #3
 80113b6:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80113b8:	18d3      	adds	r3, r2, r3
 80113ba:	4a1e      	ldr	r2, [pc, #120]	@ (8011434 <HAL_PCD_EP_DB_Transmit+0x728>)
 80113bc:	4694      	mov	ip, r2
 80113be:	4463      	add	r3, ip
 80113c0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80113c2:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80113c4:	881b      	ldrh	r3, [r3, #0]
 80113c6:	b29b      	uxth	r3, r3
 80113c8:	059b      	lsls	r3, r3, #22
 80113ca:	0d9b      	lsrs	r3, r3, #22
 80113cc:	b29a      	uxth	r2, r3
 80113ce:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80113d0:	801a      	strh	r2, [r3, #0]
 80113d2:	228c      	movs	r2, #140	@ 0x8c
 80113d4:	18bb      	adds	r3, r7, r2
 80113d6:	681b      	ldr	r3, [r3, #0]
 80113d8:	2b3e      	cmp	r3, #62	@ 0x3e
 80113da:	d91a      	bls.n	8011412 <HAL_PCD_EP_DB_Transmit+0x706>
 80113dc:	18bb      	adds	r3, r7, r2
 80113de:	681b      	ldr	r3, [r3, #0]
 80113e0:	095b      	lsrs	r3, r3, #5
 80113e2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80113e4:	18bb      	adds	r3, r7, r2
 80113e6:	681b      	ldr	r3, [r3, #0]
 80113e8:	221f      	movs	r2, #31
 80113ea:	4013      	ands	r3, r2
 80113ec:	d102      	bne.n	80113f4 <HAL_PCD_EP_DB_Transmit+0x6e8>
 80113ee:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80113f0:	3b01      	subs	r3, #1
 80113f2:	66bb      	str	r3, [r7, #104]	@ 0x68
 80113f4:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80113f6:	881b      	ldrh	r3, [r3, #0]
 80113f8:	b29a      	uxth	r2, r3
 80113fa:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80113fc:	b29b      	uxth	r3, r3
 80113fe:	029b      	lsls	r3, r3, #10
 8011400:	b29b      	uxth	r3, r3
 8011402:	4313      	orrs	r3, r2
 8011404:	b29b      	uxth	r3, r3
 8011406:	4a0c      	ldr	r2, [pc, #48]	@ (8011438 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8011408:	4313      	orrs	r3, r2
 801140a:	b29a      	uxth	r2, r3
 801140c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801140e:	801a      	strh	r2, [r3, #0]
 8011410:	e04d      	b.n	80114ae <HAL_PCD_EP_DB_Transmit+0x7a2>
 8011412:	238c      	movs	r3, #140	@ 0x8c
 8011414:	18fb      	adds	r3, r7, r3
 8011416:	681b      	ldr	r3, [r3, #0]
 8011418:	2b00      	cmp	r3, #0
 801141a:	d113      	bne.n	8011444 <HAL_PCD_EP_DB_Transmit+0x738>
 801141c:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801141e:	881b      	ldrh	r3, [r3, #0]
 8011420:	b29b      	uxth	r3, r3
 8011422:	4a05      	ldr	r2, [pc, #20]	@ (8011438 <HAL_PCD_EP_DB_Transmit+0x72c>)
 8011424:	4313      	orrs	r3, r2
 8011426:	b29a      	uxth	r2, r3
 8011428:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 801142a:	801a      	strh	r2, [r3, #0]
 801142c:	e03f      	b.n	80114ae <HAL_PCD_EP_DB_Transmit+0x7a2>
 801142e:	46c0      	nop			@ (mov r8, r8)
 8011430:	00000402 	.word	0x00000402
 8011434:	00000406 	.word	0x00000406
 8011438:	ffff8000 	.word	0xffff8000
 801143c:	ffff8f8f 	.word	0xffff8f8f
 8011440:	ffffc080 	.word	0xffffc080
 8011444:	228c      	movs	r2, #140	@ 0x8c
 8011446:	18bb      	adds	r3, r7, r2
 8011448:	681b      	ldr	r3, [r3, #0]
 801144a:	085b      	lsrs	r3, r3, #1
 801144c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801144e:	18bb      	adds	r3, r7, r2
 8011450:	681b      	ldr	r3, [r3, #0]
 8011452:	2201      	movs	r2, #1
 8011454:	4013      	ands	r3, r2
 8011456:	d002      	beq.n	801145e <HAL_PCD_EP_DB_Transmit+0x752>
 8011458:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801145a:	3301      	adds	r3, #1
 801145c:	66bb      	str	r3, [r7, #104]	@ 0x68
 801145e:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011460:	881b      	ldrh	r3, [r3, #0]
 8011462:	b29a      	uxth	r2, r3
 8011464:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8011466:	b29b      	uxth	r3, r3
 8011468:	029b      	lsls	r3, r3, #10
 801146a:	b29b      	uxth	r3, r3
 801146c:	4313      	orrs	r3, r2
 801146e:	b29a      	uxth	r2, r3
 8011470:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8011472:	801a      	strh	r2, [r3, #0]
 8011474:	e01b      	b.n	80114ae <HAL_PCD_EP_DB_Transmit+0x7a2>
 8011476:	68bb      	ldr	r3, [r7, #8]
 8011478:	785b      	ldrb	r3, [r3, #1]
 801147a:	2b01      	cmp	r3, #1
 801147c:	d117      	bne.n	80114ae <HAL_PCD_EP_DB_Transmit+0x7a2>
 801147e:	68fb      	ldr	r3, [r7, #12]
 8011480:	681b      	ldr	r3, [r3, #0]
 8011482:	2250      	movs	r2, #80	@ 0x50
 8011484:	5a9b      	ldrh	r3, [r3, r2]
 8011486:	b29b      	uxth	r3, r3
 8011488:	001a      	movs	r2, r3
 801148a:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 801148c:	189b      	adds	r3, r3, r2
 801148e:	657b      	str	r3, [r7, #84]	@ 0x54
 8011490:	68bb      	ldr	r3, [r7, #8]
 8011492:	781b      	ldrb	r3, [r3, #0]
 8011494:	00da      	lsls	r2, r3, #3
 8011496:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 8011498:	18d3      	adds	r3, r2, r3
 801149a:	4a21      	ldr	r2, [pc, #132]	@ (8011520 <HAL_PCD_EP_DB_Transmit+0x814>)
 801149c:	4694      	mov	ip, r2
 801149e:	4463      	add	r3, ip
 80114a0:	653b      	str	r3, [r7, #80]	@ 0x50
 80114a2:	238c      	movs	r3, #140	@ 0x8c
 80114a4:	18fb      	adds	r3, r7, r3
 80114a6:	681b      	ldr	r3, [r3, #0]
 80114a8:	b29a      	uxth	r2, r3
 80114aa:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 80114ac:	801a      	strh	r2, [r3, #0]

        /* Copy the user buffer to USB PMA */
        USB_WritePMA(hpcd->Instance, ep->xfer_buff,  ep->pmaaddr1, (uint16_t)len);
 80114ae:	68fb      	ldr	r3, [r7, #12]
 80114b0:	6818      	ldr	r0, [r3, #0]
 80114b2:	68bb      	ldr	r3, [r7, #8]
 80114b4:	6959      	ldr	r1, [r3, #20]
 80114b6:	68bb      	ldr	r3, [r7, #8]
 80114b8:	895a      	ldrh	r2, [r3, #10]
 80114ba:	238c      	movs	r3, #140	@ 0x8c
 80114bc:	18fb      	adds	r3, r7, r3
 80114be:	681b      	ldr	r3, [r3, #0]
 80114c0:	b29b      	uxth	r3, r3
 80114c2:	f006 f823 	bl	801750c <USB_WritePMA>
      }
    }
  }

  /*enable endpoint IN*/
  PCD_SET_EP_TX_STATUS(hpcd->Instance, ep->num, USB_EP_TX_VALID);
 80114c6:	68fb      	ldr	r3, [r7, #12]
 80114c8:	681b      	ldr	r3, [r3, #0]
 80114ca:	001a      	movs	r2, r3
 80114cc:	68bb      	ldr	r3, [r7, #8]
 80114ce:	781b      	ldrb	r3, [r3, #0]
 80114d0:	009b      	lsls	r3, r3, #2
 80114d2:	18d3      	adds	r3, r2, r3
 80114d4:	881b      	ldrh	r3, [r3, #0]
 80114d6:	b29a      	uxth	r2, r3
 80114d8:	2014      	movs	r0, #20
 80114da:	183b      	adds	r3, r7, r0
 80114dc:	4911      	ldr	r1, [pc, #68]	@ (8011524 <HAL_PCD_EP_DB_Transmit+0x818>)
 80114de:	400a      	ands	r2, r1
 80114e0:	801a      	strh	r2, [r3, #0]
 80114e2:	183b      	adds	r3, r7, r0
 80114e4:	183a      	adds	r2, r7, r0
 80114e6:	8812      	ldrh	r2, [r2, #0]
 80114e8:	2110      	movs	r1, #16
 80114ea:	404a      	eors	r2, r1
 80114ec:	801a      	strh	r2, [r3, #0]
 80114ee:	183b      	adds	r3, r7, r0
 80114f0:	183a      	adds	r2, r7, r0
 80114f2:	8812      	ldrh	r2, [r2, #0]
 80114f4:	2120      	movs	r1, #32
 80114f6:	404a      	eors	r2, r1
 80114f8:	801a      	strh	r2, [r3, #0]
 80114fa:	68fb      	ldr	r3, [r7, #12]
 80114fc:	681b      	ldr	r3, [r3, #0]
 80114fe:	001a      	movs	r2, r3
 8011500:	68bb      	ldr	r3, [r7, #8]
 8011502:	781b      	ldrb	r3, [r3, #0]
 8011504:	009b      	lsls	r3, r3, #2
 8011506:	18d3      	adds	r3, r2, r3
 8011508:	183a      	adds	r2, r7, r0
 801150a:	8812      	ldrh	r2, [r2, #0]
 801150c:	4906      	ldr	r1, [pc, #24]	@ (8011528 <HAL_PCD_EP_DB_Transmit+0x81c>)
 801150e:	430a      	orrs	r2, r1
 8011510:	b292      	uxth	r2, r2
 8011512:	801a      	strh	r2, [r3, #0]

  return HAL_OK;
 8011514:	2300      	movs	r3, #0
}
 8011516:	0018      	movs	r0, r3
 8011518:	46bd      	mov	sp, r7
 801151a:	b024      	add	sp, #144	@ 0x90
 801151c:	bd80      	pop	{r7, pc}
 801151e:	46c0      	nop			@ (mov r8, r8)
 8011520:	00000406 	.word	0x00000406
 8011524:	ffff8fbf 	.word	0xffff8fbf
 8011528:	ffff8080 	.word	0xffff8080

0801152c <HAL_PCDEx_PMAConfig>:
  * @retval HAL status
  */

HAL_StatusTypeDef  HAL_PCDEx_PMAConfig(PCD_HandleTypeDef *hpcd, uint16_t ep_addr,
                                       uint16_t ep_kind, uint32_t pmaadress)
{
 801152c:	b590      	push	{r4, r7, lr}
 801152e:	b087      	sub	sp, #28
 8011530:	af00      	add	r7, sp, #0
 8011532:	60f8      	str	r0, [r7, #12]
 8011534:	0008      	movs	r0, r1
 8011536:	0011      	movs	r1, r2
 8011538:	607b      	str	r3, [r7, #4]
 801153a:	240a      	movs	r4, #10
 801153c:	193b      	adds	r3, r7, r4
 801153e:	1c02      	adds	r2, r0, #0
 8011540:	801a      	strh	r2, [r3, #0]
 8011542:	2308      	movs	r3, #8
 8011544:	18fb      	adds	r3, r7, r3
 8011546:	1c0a      	adds	r2, r1, #0
 8011548:	801a      	strh	r2, [r3, #0]
  PCD_EPTypeDef *ep;

  /* initialize ep structure*/
  if ((0x80U & ep_addr) == 0x80U)
 801154a:	0021      	movs	r1, r4
 801154c:	187b      	adds	r3, r7, r1
 801154e:	881b      	ldrh	r3, [r3, #0]
 8011550:	2280      	movs	r2, #128	@ 0x80
 8011552:	4013      	ands	r3, r2
 8011554:	b29b      	uxth	r3, r3
 8011556:	2b00      	cmp	r3, #0
 8011558:	d00c      	beq.n	8011574 <HAL_PCDEx_PMAConfig+0x48>
  {
    ep = &hpcd->IN_ep[ep_addr & EP_ADDR_MSK];
 801155a:	187b      	adds	r3, r7, r1
 801155c:	881b      	ldrh	r3, [r3, #0]
 801155e:	2207      	movs	r2, #7
 8011560:	4013      	ands	r3, r2
 8011562:	1c5a      	adds	r2, r3, #1
 8011564:	0013      	movs	r3, r2
 8011566:	009b      	lsls	r3, r3, #2
 8011568:	189b      	adds	r3, r3, r2
 801156a:	00db      	lsls	r3, r3, #3
 801156c:	68fa      	ldr	r2, [r7, #12]
 801156e:	18d3      	adds	r3, r2, r3
 8011570:	617b      	str	r3, [r7, #20]
 8011572:	e00b      	b.n	801158c <HAL_PCDEx_PMAConfig+0x60>
  }
  else
  {
    ep = &hpcd->OUT_ep[ep_addr];
 8011574:	230a      	movs	r3, #10
 8011576:	18fb      	adds	r3, r7, r3
 8011578:	881a      	ldrh	r2, [r3, #0]
 801157a:	0013      	movs	r3, r2
 801157c:	009b      	lsls	r3, r3, #2
 801157e:	189b      	adds	r3, r3, r2
 8011580:	00db      	lsls	r3, r3, #3
 8011582:	3369      	adds	r3, #105	@ 0x69
 8011584:	33ff      	adds	r3, #255	@ 0xff
 8011586:	68fa      	ldr	r2, [r7, #12]
 8011588:	18d3      	adds	r3, r2, r3
 801158a:	617b      	str	r3, [r7, #20]
  }

  /* Here we check if the endpoint is single or double Buffer*/
  if (ep_kind == PCD_SNG_BUF)
 801158c:	2308      	movs	r3, #8
 801158e:	18fb      	adds	r3, r7, r3
 8011590:	881b      	ldrh	r3, [r3, #0]
 8011592:	2b00      	cmp	r3, #0
 8011594:	d107      	bne.n	80115a6 <HAL_PCDEx_PMAConfig+0x7a>
  {
    /* Single Buffer */
    ep->doublebuffer = 0U;
 8011596:	697b      	ldr	r3, [r7, #20]
 8011598:	2200      	movs	r2, #0
 801159a:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaadress = (uint16_t)pmaadress;
 801159c:	687b      	ldr	r3, [r7, #4]
 801159e:	b29a      	uxth	r2, r3
 80115a0:	697b      	ldr	r3, [r7, #20]
 80115a2:	80da      	strh	r2, [r3, #6]
 80115a4:	e00b      	b.n	80115be <HAL_PCDEx_PMAConfig+0x92>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  else /* USB_DBL_BUF */
  {
    /* Double Buffer Endpoint */
    ep->doublebuffer = 1U;
 80115a6:	697b      	ldr	r3, [r7, #20]
 80115a8:	2201      	movs	r2, #1
 80115aa:	731a      	strb	r2, [r3, #12]
    /* Configure the PMA */
    ep->pmaaddr0 = (uint16_t)(pmaadress & 0xFFFFU);
 80115ac:	687b      	ldr	r3, [r7, #4]
 80115ae:	b29a      	uxth	r2, r3
 80115b0:	697b      	ldr	r3, [r7, #20]
 80115b2:	811a      	strh	r2, [r3, #8]
    ep->pmaaddr1 = (uint16_t)((pmaadress & 0xFFFF0000U) >> 16);
 80115b4:	687b      	ldr	r3, [r7, #4]
 80115b6:	0c1b      	lsrs	r3, r3, #16
 80115b8:	b29a      	uxth	r2, r3
 80115ba:	697b      	ldr	r3, [r7, #20]
 80115bc:	815a      	strh	r2, [r3, #10]
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 80115be:	2300      	movs	r3, #0
}
 80115c0:	0018      	movs	r0, r3
 80115c2:	46bd      	mov	sp, r7
 80115c4:	b007      	add	sp, #28
 80115c6:	bd90      	pop	{r4, r7, pc}

080115c8 <HAL_PCDEx_ActivateLPM>:
  * @brief  Activate LPM feature.
  * @param  hpcd PCD handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_PCDEx_ActivateLPM(PCD_HandleTypeDef *hpcd)
{
 80115c8:	b580      	push	{r7, lr}
 80115ca:	b084      	sub	sp, #16
 80115cc:	af00      	add	r7, sp, #0
 80115ce:	6078      	str	r0, [r7, #4]

  USB_TypeDef *USBx = hpcd->Instance;
 80115d0:	687b      	ldr	r3, [r7, #4]
 80115d2:	681b      	ldr	r3, [r3, #0]
 80115d4:	60fb      	str	r3, [r7, #12]
  hpcd->lpm_active = 1U;
 80115d6:	687a      	ldr	r2, [r7, #4]
 80115d8:	23ba      	movs	r3, #186	@ 0xba
 80115da:	009b      	lsls	r3, r3, #2
 80115dc:	2101      	movs	r1, #1
 80115de:	50d1      	str	r1, [r2, r3]
  hpcd->LPM_State = LPM_L0;
 80115e0:	687a      	ldr	r2, [r7, #4]
 80115e2:	23b8      	movs	r3, #184	@ 0xb8
 80115e4:	009b      	lsls	r3, r3, #2
 80115e6:	2100      	movs	r1, #0
 80115e8:	54d1      	strb	r1, [r2, r3]

  USBx->LPMCSR |= USB_LPMCSR_LMPEN;
 80115ea:	68fb      	ldr	r3, [r7, #12]
 80115ec:	2254      	movs	r2, #84	@ 0x54
 80115ee:	5a9b      	ldrh	r3, [r3, r2]
 80115f0:	b29b      	uxth	r3, r3
 80115f2:	2201      	movs	r2, #1
 80115f4:	4313      	orrs	r3, r2
 80115f6:	b299      	uxth	r1, r3
 80115f8:	68fb      	ldr	r3, [r7, #12]
 80115fa:	2254      	movs	r2, #84	@ 0x54
 80115fc:	5299      	strh	r1, [r3, r2]
  USBx->LPMCSR |= USB_LPMCSR_LPMACK;
 80115fe:	68fb      	ldr	r3, [r7, #12]
 8011600:	2254      	movs	r2, #84	@ 0x54
 8011602:	5a9b      	ldrh	r3, [r3, r2]
 8011604:	b29b      	uxth	r3, r3
 8011606:	2202      	movs	r2, #2
 8011608:	4313      	orrs	r3, r2
 801160a:	b299      	uxth	r1, r3
 801160c:	68fb      	ldr	r3, [r7, #12]
 801160e:	2254      	movs	r2, #84	@ 0x54
 8011610:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8011612:	2300      	movs	r3, #0
}
 8011614:	0018      	movs	r0, r3
 8011616:	46bd      	mov	sp, r7
 8011618:	b004      	add	sp, #16
 801161a:	bd80      	pop	{r7, pc}

0801161c <HAL_PCDEx_LPM_Callback>:
  * @param  hpcd PCD handle
  * @param  msg LPM message
  * @retval HAL status
  */
__weak void HAL_PCDEx_LPM_Callback(PCD_HandleTypeDef *hpcd, PCD_LPM_MsgTypeDef msg)
{
 801161c:	b580      	push	{r7, lr}
 801161e:	b082      	sub	sp, #8
 8011620:	af00      	add	r7, sp, #0
 8011622:	6078      	str	r0, [r7, #4]
 8011624:	000a      	movs	r2, r1
 8011626:	1cfb      	adds	r3, r7, #3
 8011628:	701a      	strb	r2, [r3, #0]
  UNUSED(msg);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_PCDEx_LPM_Callback could be implemented in the user file
   */
}
 801162a:	46c0      	nop			@ (mov r8, r8)
 801162c:	46bd      	mov	sp, r7
 801162e:	b002      	add	sp, #8
 8011630:	bd80      	pop	{r7, pc}
	...

08011634 <HAL_PWR_EnableBkUpAccess>:
  * @note   If the HSE divided by 2, 4, 8 or 16 is used as the RTC clock, the
  *         Backup Domain Access should be kept enabled.
  * @retval None
  */
void HAL_PWR_EnableBkUpAccess(void)
{
 8011634:	b580      	push	{r7, lr}
 8011636:	af00      	add	r7, sp, #0
  /* Enable access to RTC and backup registers */
  SET_BIT(PWR->CR, PWR_CR_DBP);
 8011638:	4b04      	ldr	r3, [pc, #16]	@ (801164c <HAL_PWR_EnableBkUpAccess+0x18>)
 801163a:	681a      	ldr	r2, [r3, #0]
 801163c:	4b03      	ldr	r3, [pc, #12]	@ (801164c <HAL_PWR_EnableBkUpAccess+0x18>)
 801163e:	2180      	movs	r1, #128	@ 0x80
 8011640:	0049      	lsls	r1, r1, #1
 8011642:	430a      	orrs	r2, r1
 8011644:	601a      	str	r2, [r3, #0]
}
 8011646:	46c0      	nop			@ (mov r8, r8)
 8011648:	46bd      	mov	sp, r7
 801164a:	bd80      	pop	{r7, pc}
 801164c:	40007000 	.word	0x40007000

08011650 <HAL_RCC_OscConfig>:
  *         supported by this macro. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8011650:	b5b0      	push	{r4, r5, r7, lr}
 8011652:	b08a      	sub	sp, #40	@ 0x28
 8011654:	af00      	add	r7, sp, #0
 8011656:	6078      	str	r0, [r7, #4]
  uint32_t hsi_state;
  HAL_StatusTypeDef status;
  uint32_t sysclk_source, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8011658:	687b      	ldr	r3, [r7, #4]
 801165a:	2b00      	cmp	r3, #0
 801165c:	d102      	bne.n	8011664 <HAL_RCC_OscConfig+0x14>
  {
    return HAL_ERROR;
 801165e:	2301      	movs	r3, #1
 8011660:	f000 fbbf 	bl	8011de2 <HAL_RCC_OscConfig+0x792>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));

  sysclk_source = __HAL_RCC_GET_SYSCLK_SOURCE();
 8011664:	4bc9      	ldr	r3, [pc, #804]	@ (801198c <HAL_RCC_OscConfig+0x33c>)
 8011666:	68db      	ldr	r3, [r3, #12]
 8011668:	220c      	movs	r2, #12
 801166a:	4013      	ands	r3, r2
 801166c:	61fb      	str	r3, [r7, #28]
  pll_config = __HAL_RCC_GET_PLL_OSCSOURCE();
 801166e:	4bc7      	ldr	r3, [pc, #796]	@ (801198c <HAL_RCC_OscConfig+0x33c>)
 8011670:	68da      	ldr	r2, [r3, #12]
 8011672:	2380      	movs	r3, #128	@ 0x80
 8011674:	025b      	lsls	r3, r3, #9
 8011676:	4013      	ands	r3, r2
 8011678:	61bb      	str	r3, [r7, #24]

  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 801167a:	687b      	ldr	r3, [r7, #4]
 801167c:	681b      	ldr	r3, [r3, #0]
 801167e:	2201      	movs	r2, #1
 8011680:	4013      	ands	r3, r2
 8011682:	d100      	bne.n	8011686 <HAL_RCC_OscConfig+0x36>
 8011684:	e07e      	b.n	8011784 <HAL_RCC_OscConfig+0x134>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));

    /* When the HSE is used as system clock or clock source for PLL in these cases it is not allowed to be disabled */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSE)
 8011686:	69fb      	ldr	r3, [r7, #28]
 8011688:	2b08      	cmp	r3, #8
 801168a:	d007      	beq.n	801169c <HAL_RCC_OscConfig+0x4c>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSE)))
 801168c:	69fb      	ldr	r3, [r7, #28]
 801168e:	2b0c      	cmp	r3, #12
 8011690:	d112      	bne.n	80116b8 <HAL_RCC_OscConfig+0x68>
 8011692:	69ba      	ldr	r2, [r7, #24]
 8011694:	2380      	movs	r3, #128	@ 0x80
 8011696:	025b      	lsls	r3, r3, #9
 8011698:	429a      	cmp	r2, r3
 801169a:	d10d      	bne.n	80116b8 <HAL_RCC_OscConfig+0x68>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 801169c:	4bbb      	ldr	r3, [pc, #748]	@ (801198c <HAL_RCC_OscConfig+0x33c>)
 801169e:	681a      	ldr	r2, [r3, #0]
 80116a0:	2380      	movs	r3, #128	@ 0x80
 80116a2:	029b      	lsls	r3, r3, #10
 80116a4:	4013      	ands	r3, r2
 80116a6:	d100      	bne.n	80116aa <HAL_RCC_OscConfig+0x5a>
 80116a8:	e06b      	b.n	8011782 <HAL_RCC_OscConfig+0x132>
 80116aa:	687b      	ldr	r3, [r7, #4]
 80116ac:	685b      	ldr	r3, [r3, #4]
 80116ae:	2b00      	cmp	r3, #0
 80116b0:	d167      	bne.n	8011782 <HAL_RCC_OscConfig+0x132>
      {
        return HAL_ERROR;
 80116b2:	2301      	movs	r3, #1
 80116b4:	f000 fb95 	bl	8011de2 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80116b8:	687b      	ldr	r3, [r7, #4]
 80116ba:	685a      	ldr	r2, [r3, #4]
 80116bc:	2380      	movs	r3, #128	@ 0x80
 80116be:	025b      	lsls	r3, r3, #9
 80116c0:	429a      	cmp	r2, r3
 80116c2:	d107      	bne.n	80116d4 <HAL_RCC_OscConfig+0x84>
 80116c4:	4bb1      	ldr	r3, [pc, #708]	@ (801198c <HAL_RCC_OscConfig+0x33c>)
 80116c6:	681a      	ldr	r2, [r3, #0]
 80116c8:	4bb0      	ldr	r3, [pc, #704]	@ (801198c <HAL_RCC_OscConfig+0x33c>)
 80116ca:	2180      	movs	r1, #128	@ 0x80
 80116cc:	0249      	lsls	r1, r1, #9
 80116ce:	430a      	orrs	r2, r1
 80116d0:	601a      	str	r2, [r3, #0]
 80116d2:	e027      	b.n	8011724 <HAL_RCC_OscConfig+0xd4>
 80116d4:	687b      	ldr	r3, [r7, #4]
 80116d6:	685a      	ldr	r2, [r3, #4]
 80116d8:	23a0      	movs	r3, #160	@ 0xa0
 80116da:	02db      	lsls	r3, r3, #11
 80116dc:	429a      	cmp	r2, r3
 80116de:	d10e      	bne.n	80116fe <HAL_RCC_OscConfig+0xae>
 80116e0:	4baa      	ldr	r3, [pc, #680]	@ (801198c <HAL_RCC_OscConfig+0x33c>)
 80116e2:	681a      	ldr	r2, [r3, #0]
 80116e4:	4ba9      	ldr	r3, [pc, #676]	@ (801198c <HAL_RCC_OscConfig+0x33c>)
 80116e6:	2180      	movs	r1, #128	@ 0x80
 80116e8:	02c9      	lsls	r1, r1, #11
 80116ea:	430a      	orrs	r2, r1
 80116ec:	601a      	str	r2, [r3, #0]
 80116ee:	4ba7      	ldr	r3, [pc, #668]	@ (801198c <HAL_RCC_OscConfig+0x33c>)
 80116f0:	681a      	ldr	r2, [r3, #0]
 80116f2:	4ba6      	ldr	r3, [pc, #664]	@ (801198c <HAL_RCC_OscConfig+0x33c>)
 80116f4:	2180      	movs	r1, #128	@ 0x80
 80116f6:	0249      	lsls	r1, r1, #9
 80116f8:	430a      	orrs	r2, r1
 80116fa:	601a      	str	r2, [r3, #0]
 80116fc:	e012      	b.n	8011724 <HAL_RCC_OscConfig+0xd4>
 80116fe:	4ba3      	ldr	r3, [pc, #652]	@ (801198c <HAL_RCC_OscConfig+0x33c>)
 8011700:	681a      	ldr	r2, [r3, #0]
 8011702:	4ba2      	ldr	r3, [pc, #648]	@ (801198c <HAL_RCC_OscConfig+0x33c>)
 8011704:	49a2      	ldr	r1, [pc, #648]	@ (8011990 <HAL_RCC_OscConfig+0x340>)
 8011706:	400a      	ands	r2, r1
 8011708:	601a      	str	r2, [r3, #0]
 801170a:	4ba0      	ldr	r3, [pc, #640]	@ (801198c <HAL_RCC_OscConfig+0x33c>)
 801170c:	681a      	ldr	r2, [r3, #0]
 801170e:	2380      	movs	r3, #128	@ 0x80
 8011710:	025b      	lsls	r3, r3, #9
 8011712:	4013      	ands	r3, r2
 8011714:	60fb      	str	r3, [r7, #12]
 8011716:	68fb      	ldr	r3, [r7, #12]
 8011718:	4b9c      	ldr	r3, [pc, #624]	@ (801198c <HAL_RCC_OscConfig+0x33c>)
 801171a:	681a      	ldr	r2, [r3, #0]
 801171c:	4b9b      	ldr	r3, [pc, #620]	@ (801198c <HAL_RCC_OscConfig+0x33c>)
 801171e:	499d      	ldr	r1, [pc, #628]	@ (8011994 <HAL_RCC_OscConfig+0x344>)
 8011720:	400a      	ands	r2, r1
 8011722:	601a      	str	r2, [r3, #0]

      /* Check the HSE State */
      if(RCC_OscInitStruct->HSEState != RCC_HSE_OFF)
 8011724:	687b      	ldr	r3, [r7, #4]
 8011726:	685b      	ldr	r3, [r3, #4]
 8011728:	2b00      	cmp	r3, #0
 801172a:	d015      	beq.n	8011758 <HAL_RCC_OscConfig+0x108>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801172c:	f7fa fb92 	bl	800be54 <HAL_GetTick>
 8011730:	0003      	movs	r3, r0
 8011732:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8011734:	e009      	b.n	801174a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8011736:	f7fa fb8d 	bl	800be54 <HAL_GetTick>
 801173a:	0002      	movs	r2, r0
 801173c:	697b      	ldr	r3, [r7, #20]
 801173e:	1ad3      	subs	r3, r2, r3
 8011740:	2b64      	cmp	r3, #100	@ 0x64
 8011742:	d902      	bls.n	801174a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8011744:	2303      	movs	r3, #3
 8011746:	f000 fb4c 	bl	8011de2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 801174a:	4b90      	ldr	r3, [pc, #576]	@ (801198c <HAL_RCC_OscConfig+0x33c>)
 801174c:	681a      	ldr	r2, [r3, #0]
 801174e:	2380      	movs	r3, #128	@ 0x80
 8011750:	029b      	lsls	r3, r3, #10
 8011752:	4013      	ands	r3, r2
 8011754:	d0ef      	beq.n	8011736 <HAL_RCC_OscConfig+0xe6>
 8011756:	e015      	b.n	8011784 <HAL_RCC_OscConfig+0x134>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011758:	f7fa fb7c 	bl	800be54 <HAL_GetTick>
 801175c:	0003      	movs	r3, r0
 801175e:	617b      	str	r3, [r7, #20]

        /* Wait till HSE is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8011760:	e008      	b.n	8011774 <HAL_RCC_OscConfig+0x124>
        {
           if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8011762:	f7fa fb77 	bl	800be54 <HAL_GetTick>
 8011766:	0002      	movs	r2, r0
 8011768:	697b      	ldr	r3, [r7, #20]
 801176a:	1ad3      	subs	r3, r2, r3
 801176c:	2b64      	cmp	r3, #100	@ 0x64
 801176e:	d901      	bls.n	8011774 <HAL_RCC_OscConfig+0x124>
          {
            return HAL_TIMEOUT;
 8011770:	2303      	movs	r3, #3
 8011772:	e336      	b.n	8011de2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U)
 8011774:	4b85      	ldr	r3, [pc, #532]	@ (801198c <HAL_RCC_OscConfig+0x33c>)
 8011776:	681a      	ldr	r2, [r3, #0]
 8011778:	2380      	movs	r3, #128	@ 0x80
 801177a:	029b      	lsls	r3, r3, #10
 801177c:	4013      	ands	r3, r2
 801177e:	d1f0      	bne.n	8011762 <HAL_RCC_OscConfig+0x112>
 8011780:	e000      	b.n	8011784 <HAL_RCC_OscConfig+0x134>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != 0U) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8011782:	46c0      	nop			@ (mov r8, r8)
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8011784:	687b      	ldr	r3, [r7, #4]
 8011786:	681b      	ldr	r3, [r3, #0]
 8011788:	2202      	movs	r2, #2
 801178a:	4013      	ands	r3, r2
 801178c:	d100      	bne.n	8011790 <HAL_RCC_OscConfig+0x140>
 801178e:	e099      	b.n	80118c4 <HAL_RCC_OscConfig+0x274>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    hsi_state = RCC_OscInitStruct->HSIState;
 8011790:	687b      	ldr	r3, [r7, #4]
 8011792:	68db      	ldr	r3, [r3, #12]
 8011794:	627b      	str	r3, [r7, #36]	@ 0x24

#if defined(RCC_CR_HSIOUTEN)
    if((hsi_state & RCC_HSI_OUTEN) != 0U)
 8011796:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8011798:	2220      	movs	r2, #32
 801179a:	4013      	ands	r3, r2
 801179c:	d009      	beq.n	80117b2 <HAL_RCC_OscConfig+0x162>
    {
      /* HSI Output enable for timer requested */
      SET_BIT(RCC->CR, RCC_CR_HSIOUTEN);
 801179e:	4b7b      	ldr	r3, [pc, #492]	@ (801198c <HAL_RCC_OscConfig+0x33c>)
 80117a0:	681a      	ldr	r2, [r3, #0]
 80117a2:	4b7a      	ldr	r3, [pc, #488]	@ (801198c <HAL_RCC_OscConfig+0x33c>)
 80117a4:	2120      	movs	r1, #32
 80117a6:	430a      	orrs	r2, r1
 80117a8:	601a      	str	r2, [r3, #0]

      hsi_state &= ~RCC_CR_HSIOUTEN;
 80117aa:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117ac:	2220      	movs	r2, #32
 80117ae:	4393      	bics	r3, r2
 80117b0:	627b      	str	r3, [r7, #36]	@ 0x24
    }
#endif

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((sysclk_source == RCC_SYSCLKSOURCE_STATUS_HSI)
 80117b2:	69fb      	ldr	r3, [r7, #28]
 80117b4:	2b04      	cmp	r3, #4
 80117b6:	d005      	beq.n	80117c4 <HAL_RCC_OscConfig+0x174>
       || ((sysclk_source == RCC_SYSCLKSOURCE_STATUS_PLLCLK) && (pll_config == RCC_PLLSOURCE_HSI)))
 80117b8:	69fb      	ldr	r3, [r7, #28]
 80117ba:	2b0c      	cmp	r3, #12
 80117bc:	d13e      	bne.n	801183c <HAL_RCC_OscConfig+0x1ec>
 80117be:	69bb      	ldr	r3, [r7, #24]
 80117c0:	2b00      	cmp	r3, #0
 80117c2:	d13b      	bne.n	801183c <HAL_RCC_OscConfig+0x1ec>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U) && (hsi_state == RCC_HSI_OFF))
 80117c4:	4b71      	ldr	r3, [pc, #452]	@ (801198c <HAL_RCC_OscConfig+0x33c>)
 80117c6:	681b      	ldr	r3, [r3, #0]
 80117c8:	2204      	movs	r2, #4
 80117ca:	4013      	ands	r3, r2
 80117cc:	d004      	beq.n	80117d8 <HAL_RCC_OscConfig+0x188>
 80117ce:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80117d0:	2b00      	cmp	r3, #0
 80117d2:	d101      	bne.n	80117d8 <HAL_RCC_OscConfig+0x188>
      {
        return HAL_ERROR;
 80117d4:	2301      	movs	r3, #1
 80117d6:	e304      	b.n	8011de2 <HAL_RCC_OscConfig+0x792>
      }
      /* Otherwise, just the calibration and HSI or HSIdiv4 are allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80117d8:	4b6c      	ldr	r3, [pc, #432]	@ (801198c <HAL_RCC_OscConfig+0x33c>)
 80117da:	685b      	ldr	r3, [r3, #4]
 80117dc:	4a6e      	ldr	r2, [pc, #440]	@ (8011998 <HAL_RCC_OscConfig+0x348>)
 80117de:	4013      	ands	r3, r2
 80117e0:	0019      	movs	r1, r3
 80117e2:	687b      	ldr	r3, [r7, #4]
 80117e4:	691b      	ldr	r3, [r3, #16]
 80117e6:	021a      	lsls	r2, r3, #8
 80117e8:	4b68      	ldr	r3, [pc, #416]	@ (801198c <HAL_RCC_OscConfig+0x33c>)
 80117ea:	430a      	orrs	r2, r1
 80117ec:	605a      	str	r2, [r3, #4]

        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 80117ee:	4b67      	ldr	r3, [pc, #412]	@ (801198c <HAL_RCC_OscConfig+0x33c>)
 80117f0:	681b      	ldr	r3, [r3, #0]
 80117f2:	2209      	movs	r2, #9
 80117f4:	4393      	bics	r3, r2
 80117f6:	0019      	movs	r1, r3
 80117f8:	4b64      	ldr	r3, [pc, #400]	@ (801198c <HAL_RCC_OscConfig+0x33c>)
 80117fa:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 80117fc:	430a      	orrs	r2, r1
 80117fe:	601a      	str	r2, [r3, #0]
      }

      /* Update the SystemCoreClock global variable */
      SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8011800:	f000 fc42 	bl	8012088 <HAL_RCC_GetSysClockFreq>
 8011804:	0001      	movs	r1, r0
 8011806:	4b61      	ldr	r3, [pc, #388]	@ (801198c <HAL_RCC_OscConfig+0x33c>)
 8011808:	68db      	ldr	r3, [r3, #12]
 801180a:	091b      	lsrs	r3, r3, #4
 801180c:	220f      	movs	r2, #15
 801180e:	4013      	ands	r3, r2
 8011810:	4a62      	ldr	r2, [pc, #392]	@ (801199c <HAL_RCC_OscConfig+0x34c>)
 8011812:	5cd3      	ldrb	r3, [r2, r3]
 8011814:	000a      	movs	r2, r1
 8011816:	40da      	lsrs	r2, r3
 8011818:	4b61      	ldr	r3, [pc, #388]	@ (80119a0 <HAL_RCC_OscConfig+0x350>)
 801181a:	601a      	str	r2, [r3, #0]

      /* Configure the source of time base considering new system clocks settings*/
      status = HAL_InitTick (uwTickPrio);
 801181c:	4b61      	ldr	r3, [pc, #388]	@ (80119a4 <HAL_RCC_OscConfig+0x354>)
 801181e:	681b      	ldr	r3, [r3, #0]
 8011820:	2513      	movs	r5, #19
 8011822:	197c      	adds	r4, r7, r5
 8011824:	0018      	movs	r0, r3
 8011826:	f7fa facf 	bl	800bdc8 <HAL_InitTick>
 801182a:	0003      	movs	r3, r0
 801182c:	7023      	strb	r3, [r4, #0]
      if(status != HAL_OK)
 801182e:	197b      	adds	r3, r7, r5
 8011830:	781b      	ldrb	r3, [r3, #0]
 8011832:	2b00      	cmp	r3, #0
 8011834:	d046      	beq.n	80118c4 <HAL_RCC_OscConfig+0x274>
      {
        return status;
 8011836:	197b      	adds	r3, r7, r5
 8011838:	781b      	ldrb	r3, [r3, #0]
 801183a:	e2d2      	b.n	8011de2 <HAL_RCC_OscConfig+0x792>
      }
    }
    else
    {
      /* Check the HSI State */
      if(hsi_state != RCC_HSI_OFF)
 801183c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801183e:	2b00      	cmp	r3, #0
 8011840:	d027      	beq.n	8011892 <HAL_RCC_OscConfig+0x242>
      {
        /* Enable the Internal High Speed oscillator (HSI or HSIdiv4) */
        __HAL_RCC_HSI_CONFIG(hsi_state);
 8011842:	4b52      	ldr	r3, [pc, #328]	@ (801198c <HAL_RCC_OscConfig+0x33c>)
 8011844:	681b      	ldr	r3, [r3, #0]
 8011846:	2209      	movs	r2, #9
 8011848:	4393      	bics	r3, r2
 801184a:	0019      	movs	r1, r3
 801184c:	4b4f      	ldr	r3, [pc, #316]	@ (801198c <HAL_RCC_OscConfig+0x33c>)
 801184e:	6a7a      	ldr	r2, [r7, #36]	@ 0x24
 8011850:	430a      	orrs	r2, r1
 8011852:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011854:	f7fa fafe 	bl	800be54 <HAL_GetTick>
 8011858:	0003      	movs	r3, r0
 801185a:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 801185c:	e008      	b.n	8011870 <HAL_RCC_OscConfig+0x220>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 801185e:	f7fa faf9 	bl	800be54 <HAL_GetTick>
 8011862:	0002      	movs	r2, r0
 8011864:	697b      	ldr	r3, [r7, #20]
 8011866:	1ad3      	subs	r3, r2, r3
 8011868:	2b02      	cmp	r3, #2
 801186a:	d901      	bls.n	8011870 <HAL_RCC_OscConfig+0x220>
          {
            return HAL_TIMEOUT;
 801186c:	2303      	movs	r3, #3
 801186e:	e2b8      	b.n	8011de2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8011870:	4b46      	ldr	r3, [pc, #280]	@ (801198c <HAL_RCC_OscConfig+0x33c>)
 8011872:	681b      	ldr	r3, [r3, #0]
 8011874:	2204      	movs	r2, #4
 8011876:	4013      	ands	r3, r2
 8011878:	d0f1      	beq.n	801185e <HAL_RCC_OscConfig+0x20e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 801187a:	4b44      	ldr	r3, [pc, #272]	@ (801198c <HAL_RCC_OscConfig+0x33c>)
 801187c:	685b      	ldr	r3, [r3, #4]
 801187e:	4a46      	ldr	r2, [pc, #280]	@ (8011998 <HAL_RCC_OscConfig+0x348>)
 8011880:	4013      	ands	r3, r2
 8011882:	0019      	movs	r1, r3
 8011884:	687b      	ldr	r3, [r7, #4]
 8011886:	691b      	ldr	r3, [r3, #16]
 8011888:	021a      	lsls	r2, r3, #8
 801188a:	4b40      	ldr	r3, [pc, #256]	@ (801198c <HAL_RCC_OscConfig+0x33c>)
 801188c:	430a      	orrs	r2, r1
 801188e:	605a      	str	r2, [r3, #4]
 8011890:	e018      	b.n	80118c4 <HAL_RCC_OscConfig+0x274>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8011892:	4b3e      	ldr	r3, [pc, #248]	@ (801198c <HAL_RCC_OscConfig+0x33c>)
 8011894:	681a      	ldr	r2, [r3, #0]
 8011896:	4b3d      	ldr	r3, [pc, #244]	@ (801198c <HAL_RCC_OscConfig+0x33c>)
 8011898:	2101      	movs	r1, #1
 801189a:	438a      	bics	r2, r1
 801189c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801189e:	f7fa fad9 	bl	800be54 <HAL_GetTick>
 80118a2:	0003      	movs	r3, r0
 80118a4:	617b      	str	r3, [r7, #20]

        /* Wait till HSI is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80118a6:	e008      	b.n	80118ba <HAL_RCC_OscConfig+0x26a>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80118a8:	f7fa fad4 	bl	800be54 <HAL_GetTick>
 80118ac:	0002      	movs	r2, r0
 80118ae:	697b      	ldr	r3, [r7, #20]
 80118b0:	1ad3      	subs	r3, r2, r3
 80118b2:	2b02      	cmp	r3, #2
 80118b4:	d901      	bls.n	80118ba <HAL_RCC_OscConfig+0x26a>
          {
            return HAL_TIMEOUT;
 80118b6:	2303      	movs	r3, #3
 80118b8:	e293      	b.n	8011de2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != 0U)
 80118ba:	4b34      	ldr	r3, [pc, #208]	@ (801198c <HAL_RCC_OscConfig+0x33c>)
 80118bc:	681b      	ldr	r3, [r3, #0]
 80118be:	2204      	movs	r2, #4
 80118c0:	4013      	ands	r3, r2
 80118c2:	d1f1      	bne.n	80118a8 <HAL_RCC_OscConfig+0x258>
        }
      }
    }
  }
  /*----------------------------- MSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_MSI) == RCC_OSCILLATORTYPE_MSI)
 80118c4:	687b      	ldr	r3, [r7, #4]
 80118c6:	681b      	ldr	r3, [r3, #0]
 80118c8:	2210      	movs	r2, #16
 80118ca:	4013      	ands	r3, r2
 80118cc:	d100      	bne.n	80118d0 <HAL_RCC_OscConfig+0x280>
 80118ce:	e0a2      	b.n	8011a16 <HAL_RCC_OscConfig+0x3c6>
  {
    /* When the MSI is used as system clock it will not be disabled */
    if(sysclk_source == RCC_CFGR_SWS_MSI)
 80118d0:	69fb      	ldr	r3, [r7, #28]
 80118d2:	2b00      	cmp	r3, #0
 80118d4:	d140      	bne.n	8011958 <HAL_RCC_OscConfig+0x308>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U) && (RCC_OscInitStruct->MSIState == RCC_MSI_OFF))
 80118d6:	4b2d      	ldr	r3, [pc, #180]	@ (801198c <HAL_RCC_OscConfig+0x33c>)
 80118d8:	681a      	ldr	r2, [r3, #0]
 80118da:	2380      	movs	r3, #128	@ 0x80
 80118dc:	009b      	lsls	r3, r3, #2
 80118de:	4013      	ands	r3, r2
 80118e0:	d005      	beq.n	80118ee <HAL_RCC_OscConfig+0x29e>
 80118e2:	687b      	ldr	r3, [r7, #4]
 80118e4:	69db      	ldr	r3, [r3, #28]
 80118e6:	2b00      	cmp	r3, #0
 80118e8:	d101      	bne.n	80118ee <HAL_RCC_OscConfig+0x29e>
      {
        return HAL_ERROR;
 80118ea:	2301      	movs	r3, #1
 80118ec:	e279      	b.n	8011de2 <HAL_RCC_OscConfig+0x792>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80118ee:	4b27      	ldr	r3, [pc, #156]	@ (801198c <HAL_RCC_OscConfig+0x33c>)
 80118f0:	685b      	ldr	r3, [r3, #4]
 80118f2:	4a2d      	ldr	r2, [pc, #180]	@ (80119a8 <HAL_RCC_OscConfig+0x358>)
 80118f4:	4013      	ands	r3, r2
 80118f6:	0019      	movs	r1, r3
 80118f8:	687b      	ldr	r3, [r7, #4]
 80118fa:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80118fc:	4b23      	ldr	r3, [pc, #140]	@ (801198c <HAL_RCC_OscConfig+0x33c>)
 80118fe:	430a      	orrs	r2, r1
 8011900:	605a      	str	r2, [r3, #4]
        /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 8011902:	4b22      	ldr	r3, [pc, #136]	@ (801198c <HAL_RCC_OscConfig+0x33c>)
 8011904:	685b      	ldr	r3, [r3, #4]
 8011906:	021b      	lsls	r3, r3, #8
 8011908:	0a19      	lsrs	r1, r3, #8
 801190a:	687b      	ldr	r3, [r7, #4]
 801190c:	6a1b      	ldr	r3, [r3, #32]
 801190e:	061a      	lsls	r2, r3, #24
 8011910:	4b1e      	ldr	r3, [pc, #120]	@ (801198c <HAL_RCC_OscConfig+0x33c>)
 8011912:	430a      	orrs	r2, r1
 8011914:	605a      	str	r2, [r3, #4]


        /* Update the SystemCoreClock global variable */
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8011916:	687b      	ldr	r3, [r7, #4]
 8011918:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801191a:	0b5b      	lsrs	r3, r3, #13
 801191c:	3301      	adds	r3, #1
 801191e:	2280      	movs	r2, #128	@ 0x80
 8011920:	0212      	lsls	r2, r2, #8
 8011922:	409a      	lsls	r2, r3
                           >> AHBPrescTable[((RCC->CFGR & RCC_CFGR_HPRE) >> RCC_CFGR_HPRE_Pos)];
 8011924:	4b19      	ldr	r3, [pc, #100]	@ (801198c <HAL_RCC_OscConfig+0x33c>)
 8011926:	68db      	ldr	r3, [r3, #12]
 8011928:	091b      	lsrs	r3, r3, #4
 801192a:	210f      	movs	r1, #15
 801192c:	400b      	ands	r3, r1
 801192e:	491b      	ldr	r1, [pc, #108]	@ (801199c <HAL_RCC_OscConfig+0x34c>)
 8011930:	5ccb      	ldrb	r3, [r1, r3]
 8011932:	40da      	lsrs	r2, r3
        SystemCoreClock =  (32768U * (1UL << ((RCC_OscInitStruct->MSIClockRange >> RCC_ICSCR_MSIRANGE_Pos) + 1U)))
 8011934:	4b1a      	ldr	r3, [pc, #104]	@ (80119a0 <HAL_RCC_OscConfig+0x350>)
 8011936:	601a      	str	r2, [r3, #0]

        /* Configure the source of time base considering new system clocks settings*/
        status = HAL_InitTick (uwTickPrio);
 8011938:	4b1a      	ldr	r3, [pc, #104]	@ (80119a4 <HAL_RCC_OscConfig+0x354>)
 801193a:	681b      	ldr	r3, [r3, #0]
 801193c:	2513      	movs	r5, #19
 801193e:	197c      	adds	r4, r7, r5
 8011940:	0018      	movs	r0, r3
 8011942:	f7fa fa41 	bl	800bdc8 <HAL_InitTick>
 8011946:	0003      	movs	r3, r0
 8011948:	7023      	strb	r3, [r4, #0]
        if(status != HAL_OK)
 801194a:	197b      	adds	r3, r7, r5
 801194c:	781b      	ldrb	r3, [r3, #0]
 801194e:	2b00      	cmp	r3, #0
 8011950:	d061      	beq.n	8011a16 <HAL_RCC_OscConfig+0x3c6>
        {
          return status;
 8011952:	197b      	adds	r3, r7, r5
 8011954:	781b      	ldrb	r3, [r3, #0]
 8011956:	e244      	b.n	8011de2 <HAL_RCC_OscConfig+0x792>
    {
      /* Check MSI State */
      assert_param(IS_RCC_MSI(RCC_OscInitStruct->MSIState));

      /* Check the MSI State */
      if(RCC_OscInitStruct->MSIState != RCC_MSI_OFF)
 8011958:	687b      	ldr	r3, [r7, #4]
 801195a:	69db      	ldr	r3, [r3, #28]
 801195c:	2b00      	cmp	r3, #0
 801195e:	d040      	beq.n	80119e2 <HAL_RCC_OscConfig+0x392>
      {
        /* Enable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_ENABLE();
 8011960:	4b0a      	ldr	r3, [pc, #40]	@ (801198c <HAL_RCC_OscConfig+0x33c>)
 8011962:	681a      	ldr	r2, [r3, #0]
 8011964:	4b09      	ldr	r3, [pc, #36]	@ (801198c <HAL_RCC_OscConfig+0x33c>)
 8011966:	2180      	movs	r1, #128	@ 0x80
 8011968:	0049      	lsls	r1, r1, #1
 801196a:	430a      	orrs	r2, r1
 801196c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 801196e:	f7fa fa71 	bl	800be54 <HAL_GetTick>
 8011972:	0003      	movs	r3, r0
 8011974:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8011976:	e019      	b.n	80119ac <HAL_RCC_OscConfig+0x35c>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 8011978:	f7fa fa6c 	bl	800be54 <HAL_GetTick>
 801197c:	0002      	movs	r2, r0
 801197e:	697b      	ldr	r3, [r7, #20]
 8011980:	1ad3      	subs	r3, r2, r3
 8011982:	2b02      	cmp	r3, #2
 8011984:	d912      	bls.n	80119ac <HAL_RCC_OscConfig+0x35c>
          {
            return HAL_TIMEOUT;
 8011986:	2303      	movs	r3, #3
 8011988:	e22b      	b.n	8011de2 <HAL_RCC_OscConfig+0x792>
 801198a:	46c0      	nop			@ (mov r8, r8)
 801198c:	40021000 	.word	0x40021000
 8011990:	fffeffff 	.word	0xfffeffff
 8011994:	fffbffff 	.word	0xfffbffff
 8011998:	ffffe0ff 	.word	0xffffe0ff
 801199c:	080209f8 	.word	0x080209f8
 80119a0:	200000c8 	.word	0x200000c8
 80119a4:	200000d8 	.word	0x200000d8
 80119a8:	ffff1fff 	.word	0xffff1fff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 80119ac:	4bca      	ldr	r3, [pc, #808]	@ (8011cd8 <HAL_RCC_OscConfig+0x688>)
 80119ae:	681a      	ldr	r2, [r3, #0]
 80119b0:	2380      	movs	r3, #128	@ 0x80
 80119b2:	009b      	lsls	r3, r3, #2
 80119b4:	4013      	ands	r3, r2
 80119b6:	d0df      	beq.n	8011978 <HAL_RCC_OscConfig+0x328>
        /* Check MSICalibrationValue and MSIClockRange input parameters */
        assert_param(IS_RCC_MSICALIBRATION_VALUE(RCC_OscInitStruct->MSICalibrationValue));
        assert_param(IS_RCC_MSI_CLOCK_RANGE(RCC_OscInitStruct->MSIClockRange));

        /* Selects the Multiple Speed oscillator (MSI) clock range .*/
        __HAL_RCC_MSI_RANGE_CONFIG(RCC_OscInitStruct->MSIClockRange);
 80119b8:	4bc7      	ldr	r3, [pc, #796]	@ (8011cd8 <HAL_RCC_OscConfig+0x688>)
 80119ba:	685b      	ldr	r3, [r3, #4]
 80119bc:	4ac7      	ldr	r2, [pc, #796]	@ (8011cdc <HAL_RCC_OscConfig+0x68c>)
 80119be:	4013      	ands	r3, r2
 80119c0:	0019      	movs	r1, r3
 80119c2:	687b      	ldr	r3, [r7, #4]
 80119c4:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80119c6:	4bc4      	ldr	r3, [pc, #784]	@ (8011cd8 <HAL_RCC_OscConfig+0x688>)
 80119c8:	430a      	orrs	r2, r1
 80119ca:	605a      	str	r2, [r3, #4]
         /* Adjusts the Multiple Speed oscillator (MSI) calibration value.*/
        __HAL_RCC_MSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->MSICalibrationValue);
 80119cc:	4bc2      	ldr	r3, [pc, #776]	@ (8011cd8 <HAL_RCC_OscConfig+0x688>)
 80119ce:	685b      	ldr	r3, [r3, #4]
 80119d0:	021b      	lsls	r3, r3, #8
 80119d2:	0a19      	lsrs	r1, r3, #8
 80119d4:	687b      	ldr	r3, [r7, #4]
 80119d6:	6a1b      	ldr	r3, [r3, #32]
 80119d8:	061a      	lsls	r2, r3, #24
 80119da:	4bbf      	ldr	r3, [pc, #764]	@ (8011cd8 <HAL_RCC_OscConfig+0x688>)
 80119dc:	430a      	orrs	r2, r1
 80119de:	605a      	str	r2, [r3, #4]
 80119e0:	e019      	b.n	8011a16 <HAL_RCC_OscConfig+0x3c6>
      }
      else
      {
        /* Disable the Multi Speed oscillator (MSI). */
        __HAL_RCC_MSI_DISABLE();
 80119e2:	4bbd      	ldr	r3, [pc, #756]	@ (8011cd8 <HAL_RCC_OscConfig+0x688>)
 80119e4:	681a      	ldr	r2, [r3, #0]
 80119e6:	4bbc      	ldr	r3, [pc, #752]	@ (8011cd8 <HAL_RCC_OscConfig+0x688>)
 80119e8:	49bd      	ldr	r1, [pc, #756]	@ (8011ce0 <HAL_RCC_OscConfig+0x690>)
 80119ea:	400a      	ands	r2, r1
 80119ec:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80119ee:	f7fa fa31 	bl	800be54 <HAL_GetTick>
 80119f2:	0003      	movs	r3, r0
 80119f4:	617b      	str	r3, [r7, #20]

        /* Wait till MSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 80119f6:	e008      	b.n	8011a0a <HAL_RCC_OscConfig+0x3ba>
        {
          if((HAL_GetTick() - tickstart) > MSI_TIMEOUT_VALUE)
 80119f8:	f7fa fa2c 	bl	800be54 <HAL_GetTick>
 80119fc:	0002      	movs	r2, r0
 80119fe:	697b      	ldr	r3, [r7, #20]
 8011a00:	1ad3      	subs	r3, r2, r3
 8011a02:	2b02      	cmp	r3, #2
 8011a04:	d901      	bls.n	8011a0a <HAL_RCC_OscConfig+0x3ba>
          {
            return HAL_TIMEOUT;
 8011a06:	2303      	movs	r3, #3
 8011a08:	e1eb      	b.n	8011de2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) != 0U)
 8011a0a:	4bb3      	ldr	r3, [pc, #716]	@ (8011cd8 <HAL_RCC_OscConfig+0x688>)
 8011a0c:	681a      	ldr	r2, [r3, #0]
 8011a0e:	2380      	movs	r3, #128	@ 0x80
 8011a10:	009b      	lsls	r3, r3, #2
 8011a12:	4013      	ands	r3, r2
 8011a14:	d1f0      	bne.n	80119f8 <HAL_RCC_OscConfig+0x3a8>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8011a16:	687b      	ldr	r3, [r7, #4]
 8011a18:	681b      	ldr	r3, [r3, #0]
 8011a1a:	2208      	movs	r2, #8
 8011a1c:	4013      	ands	r3, r2
 8011a1e:	d036      	beq.n	8011a8e <HAL_RCC_OscConfig+0x43e>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if(RCC_OscInitStruct->LSIState != RCC_LSI_OFF)
 8011a20:	687b      	ldr	r3, [r7, #4]
 8011a22:	695b      	ldr	r3, [r3, #20]
 8011a24:	2b00      	cmp	r3, #0
 8011a26:	d019      	beq.n	8011a5c <HAL_RCC_OscConfig+0x40c>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8011a28:	4bab      	ldr	r3, [pc, #684]	@ (8011cd8 <HAL_RCC_OscConfig+0x688>)
 8011a2a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011a2c:	4baa      	ldr	r3, [pc, #680]	@ (8011cd8 <HAL_RCC_OscConfig+0x688>)
 8011a2e:	2101      	movs	r1, #1
 8011a30:	430a      	orrs	r2, r1
 8011a32:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8011a34:	f7fa fa0e 	bl	800be54 <HAL_GetTick>
 8011a38:	0003      	movs	r3, r0
 8011a3a:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8011a3c:	e008      	b.n	8011a50 <HAL_RCC_OscConfig+0x400>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8011a3e:	f7fa fa09 	bl	800be54 <HAL_GetTick>
 8011a42:	0002      	movs	r2, r0
 8011a44:	697b      	ldr	r3, [r7, #20]
 8011a46:	1ad3      	subs	r3, r2, r3
 8011a48:	2b02      	cmp	r3, #2
 8011a4a:	d901      	bls.n	8011a50 <HAL_RCC_OscConfig+0x400>
        {
          return HAL_TIMEOUT;
 8011a4c:	2303      	movs	r3, #3
 8011a4e:	e1c8      	b.n	8011de2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == 0U)
 8011a50:	4ba1      	ldr	r3, [pc, #644]	@ (8011cd8 <HAL_RCC_OscConfig+0x688>)
 8011a52:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011a54:	2202      	movs	r2, #2
 8011a56:	4013      	ands	r3, r2
 8011a58:	d0f1      	beq.n	8011a3e <HAL_RCC_OscConfig+0x3ee>
 8011a5a:	e018      	b.n	8011a8e <HAL_RCC_OscConfig+0x43e>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8011a5c:	4b9e      	ldr	r3, [pc, #632]	@ (8011cd8 <HAL_RCC_OscConfig+0x688>)
 8011a5e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011a60:	4b9d      	ldr	r3, [pc, #628]	@ (8011cd8 <HAL_RCC_OscConfig+0x688>)
 8011a62:	2101      	movs	r1, #1
 8011a64:	438a      	bics	r2, r1
 8011a66:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8011a68:	f7fa f9f4 	bl	800be54 <HAL_GetTick>
 8011a6c:	0003      	movs	r3, r0
 8011a6e:	617b      	str	r3, [r7, #20]

      /* Wait till LSI is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8011a70:	e008      	b.n	8011a84 <HAL_RCC_OscConfig+0x434>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8011a72:	f7fa f9ef 	bl	800be54 <HAL_GetTick>
 8011a76:	0002      	movs	r2, r0
 8011a78:	697b      	ldr	r3, [r7, #20]
 8011a7a:	1ad3      	subs	r3, r2, r3
 8011a7c:	2b02      	cmp	r3, #2
 8011a7e:	d901      	bls.n	8011a84 <HAL_RCC_OscConfig+0x434>
        {
          return HAL_TIMEOUT;
 8011a80:	2303      	movs	r3, #3
 8011a82:	e1ae      	b.n	8011de2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != 0U)
 8011a84:	4b94      	ldr	r3, [pc, #592]	@ (8011cd8 <HAL_RCC_OscConfig+0x688>)
 8011a86:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8011a88:	2202      	movs	r2, #2
 8011a8a:	4013      	ands	r3, r2
 8011a8c:	d1f1      	bne.n	8011a72 <HAL_RCC_OscConfig+0x422>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8011a8e:	687b      	ldr	r3, [r7, #4]
 8011a90:	681b      	ldr	r3, [r3, #0]
 8011a92:	2204      	movs	r2, #4
 8011a94:	4013      	ands	r3, r2
 8011a96:	d100      	bne.n	8011a9a <HAL_RCC_OscConfig+0x44a>
 8011a98:	e0ae      	b.n	8011bf8 <HAL_RCC_OscConfig+0x5a8>
  {
    FlagStatus       pwrclkchanged = RESET;
 8011a9a:	2023      	movs	r0, #35	@ 0x23
 8011a9c:	183b      	adds	r3, r7, r0
 8011a9e:	2200      	movs	r2, #0
 8011aa0:	701a      	strb	r2, [r3, #0]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8011aa2:	4b8d      	ldr	r3, [pc, #564]	@ (8011cd8 <HAL_RCC_OscConfig+0x688>)
 8011aa4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011aa6:	2380      	movs	r3, #128	@ 0x80
 8011aa8:	055b      	lsls	r3, r3, #21
 8011aaa:	4013      	ands	r3, r2
 8011aac:	d109      	bne.n	8011ac2 <HAL_RCC_OscConfig+0x472>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8011aae:	4b8a      	ldr	r3, [pc, #552]	@ (8011cd8 <HAL_RCC_OscConfig+0x688>)
 8011ab0:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011ab2:	4b89      	ldr	r3, [pc, #548]	@ (8011cd8 <HAL_RCC_OscConfig+0x688>)
 8011ab4:	2180      	movs	r1, #128	@ 0x80
 8011ab6:	0549      	lsls	r1, r1, #21
 8011ab8:	430a      	orrs	r2, r1
 8011aba:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8011abc:	183b      	adds	r3, r7, r0
 8011abe:	2201      	movs	r2, #1
 8011ac0:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8011ac2:	4b88      	ldr	r3, [pc, #544]	@ (8011ce4 <HAL_RCC_OscConfig+0x694>)
 8011ac4:	681a      	ldr	r2, [r3, #0]
 8011ac6:	2380      	movs	r3, #128	@ 0x80
 8011ac8:	005b      	lsls	r3, r3, #1
 8011aca:	4013      	ands	r3, r2
 8011acc:	d11a      	bne.n	8011b04 <HAL_RCC_OscConfig+0x4b4>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8011ace:	4b85      	ldr	r3, [pc, #532]	@ (8011ce4 <HAL_RCC_OscConfig+0x694>)
 8011ad0:	681a      	ldr	r2, [r3, #0]
 8011ad2:	4b84      	ldr	r3, [pc, #528]	@ (8011ce4 <HAL_RCC_OscConfig+0x694>)
 8011ad4:	2180      	movs	r1, #128	@ 0x80
 8011ad6:	0049      	lsls	r1, r1, #1
 8011ad8:	430a      	orrs	r2, r1
 8011ada:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8011adc:	f7fa f9ba 	bl	800be54 <HAL_GetTick>
 8011ae0:	0003      	movs	r3, r0
 8011ae2:	617b      	str	r3, [r7, #20]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8011ae4:	e008      	b.n	8011af8 <HAL_RCC_OscConfig+0x4a8>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8011ae6:	f7fa f9b5 	bl	800be54 <HAL_GetTick>
 8011aea:	0002      	movs	r2, r0
 8011aec:	697b      	ldr	r3, [r7, #20]
 8011aee:	1ad3      	subs	r3, r2, r3
 8011af0:	2b64      	cmp	r3, #100	@ 0x64
 8011af2:	d901      	bls.n	8011af8 <HAL_RCC_OscConfig+0x4a8>
        {
          return HAL_TIMEOUT;
 8011af4:	2303      	movs	r3, #3
 8011af6:	e174      	b.n	8011de2 <HAL_RCC_OscConfig+0x792>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8011af8:	4b7a      	ldr	r3, [pc, #488]	@ (8011ce4 <HAL_RCC_OscConfig+0x694>)
 8011afa:	681a      	ldr	r2, [r3, #0]
 8011afc:	2380      	movs	r3, #128	@ 0x80
 8011afe:	005b      	lsls	r3, r3, #1
 8011b00:	4013      	ands	r3, r2
 8011b02:	d0f0      	beq.n	8011ae6 <HAL_RCC_OscConfig+0x496>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8011b04:	687b      	ldr	r3, [r7, #4]
 8011b06:	689a      	ldr	r2, [r3, #8]
 8011b08:	2380      	movs	r3, #128	@ 0x80
 8011b0a:	005b      	lsls	r3, r3, #1
 8011b0c:	429a      	cmp	r2, r3
 8011b0e:	d107      	bne.n	8011b20 <HAL_RCC_OscConfig+0x4d0>
 8011b10:	4b71      	ldr	r3, [pc, #452]	@ (8011cd8 <HAL_RCC_OscConfig+0x688>)
 8011b12:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011b14:	4b70      	ldr	r3, [pc, #448]	@ (8011cd8 <HAL_RCC_OscConfig+0x688>)
 8011b16:	2180      	movs	r1, #128	@ 0x80
 8011b18:	0049      	lsls	r1, r1, #1
 8011b1a:	430a      	orrs	r2, r1
 8011b1c:	651a      	str	r2, [r3, #80]	@ 0x50
 8011b1e:	e031      	b.n	8011b84 <HAL_RCC_OscConfig+0x534>
 8011b20:	687b      	ldr	r3, [r7, #4]
 8011b22:	689b      	ldr	r3, [r3, #8]
 8011b24:	2b00      	cmp	r3, #0
 8011b26:	d10c      	bne.n	8011b42 <HAL_RCC_OscConfig+0x4f2>
 8011b28:	4b6b      	ldr	r3, [pc, #428]	@ (8011cd8 <HAL_RCC_OscConfig+0x688>)
 8011b2a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011b2c:	4b6a      	ldr	r3, [pc, #424]	@ (8011cd8 <HAL_RCC_OscConfig+0x688>)
 8011b2e:	496c      	ldr	r1, [pc, #432]	@ (8011ce0 <HAL_RCC_OscConfig+0x690>)
 8011b30:	400a      	ands	r2, r1
 8011b32:	651a      	str	r2, [r3, #80]	@ 0x50
 8011b34:	4b68      	ldr	r3, [pc, #416]	@ (8011cd8 <HAL_RCC_OscConfig+0x688>)
 8011b36:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011b38:	4b67      	ldr	r3, [pc, #412]	@ (8011cd8 <HAL_RCC_OscConfig+0x688>)
 8011b3a:	496b      	ldr	r1, [pc, #428]	@ (8011ce8 <HAL_RCC_OscConfig+0x698>)
 8011b3c:	400a      	ands	r2, r1
 8011b3e:	651a      	str	r2, [r3, #80]	@ 0x50
 8011b40:	e020      	b.n	8011b84 <HAL_RCC_OscConfig+0x534>
 8011b42:	687b      	ldr	r3, [r7, #4]
 8011b44:	689a      	ldr	r2, [r3, #8]
 8011b46:	23a0      	movs	r3, #160	@ 0xa0
 8011b48:	00db      	lsls	r3, r3, #3
 8011b4a:	429a      	cmp	r2, r3
 8011b4c:	d10e      	bne.n	8011b6c <HAL_RCC_OscConfig+0x51c>
 8011b4e:	4b62      	ldr	r3, [pc, #392]	@ (8011cd8 <HAL_RCC_OscConfig+0x688>)
 8011b50:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011b52:	4b61      	ldr	r3, [pc, #388]	@ (8011cd8 <HAL_RCC_OscConfig+0x688>)
 8011b54:	2180      	movs	r1, #128	@ 0x80
 8011b56:	00c9      	lsls	r1, r1, #3
 8011b58:	430a      	orrs	r2, r1
 8011b5a:	651a      	str	r2, [r3, #80]	@ 0x50
 8011b5c:	4b5e      	ldr	r3, [pc, #376]	@ (8011cd8 <HAL_RCC_OscConfig+0x688>)
 8011b5e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011b60:	4b5d      	ldr	r3, [pc, #372]	@ (8011cd8 <HAL_RCC_OscConfig+0x688>)
 8011b62:	2180      	movs	r1, #128	@ 0x80
 8011b64:	0049      	lsls	r1, r1, #1
 8011b66:	430a      	orrs	r2, r1
 8011b68:	651a      	str	r2, [r3, #80]	@ 0x50
 8011b6a:	e00b      	b.n	8011b84 <HAL_RCC_OscConfig+0x534>
 8011b6c:	4b5a      	ldr	r3, [pc, #360]	@ (8011cd8 <HAL_RCC_OscConfig+0x688>)
 8011b6e:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011b70:	4b59      	ldr	r3, [pc, #356]	@ (8011cd8 <HAL_RCC_OscConfig+0x688>)
 8011b72:	495b      	ldr	r1, [pc, #364]	@ (8011ce0 <HAL_RCC_OscConfig+0x690>)
 8011b74:	400a      	ands	r2, r1
 8011b76:	651a      	str	r2, [r3, #80]	@ 0x50
 8011b78:	4b57      	ldr	r3, [pc, #348]	@ (8011cd8 <HAL_RCC_OscConfig+0x688>)
 8011b7a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011b7c:	4b56      	ldr	r3, [pc, #344]	@ (8011cd8 <HAL_RCC_OscConfig+0x688>)
 8011b7e:	495a      	ldr	r1, [pc, #360]	@ (8011ce8 <HAL_RCC_OscConfig+0x698>)
 8011b80:	400a      	ands	r2, r1
 8011b82:	651a      	str	r2, [r3, #80]	@ 0x50

    /* Check the LSE State */
    if(RCC_OscInitStruct->LSEState != RCC_LSE_OFF)
 8011b84:	687b      	ldr	r3, [r7, #4]
 8011b86:	689b      	ldr	r3, [r3, #8]
 8011b88:	2b00      	cmp	r3, #0
 8011b8a:	d015      	beq.n	8011bb8 <HAL_RCC_OscConfig+0x568>
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8011b8c:	f7fa f962 	bl	800be54 <HAL_GetTick>
 8011b90:	0003      	movs	r3, r0
 8011b92:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8011b94:	e009      	b.n	8011baa <HAL_RCC_OscConfig+0x55a>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011b96:	f7fa f95d 	bl	800be54 <HAL_GetTick>
 8011b9a:	0002      	movs	r2, r0
 8011b9c:	697b      	ldr	r3, [r7, #20]
 8011b9e:	1ad3      	subs	r3, r2, r3
 8011ba0:	4a52      	ldr	r2, [pc, #328]	@ (8011cec <HAL_RCC_OscConfig+0x69c>)
 8011ba2:	4293      	cmp	r3, r2
 8011ba4:	d901      	bls.n	8011baa <HAL_RCC_OscConfig+0x55a>
        {
          return HAL_TIMEOUT;
 8011ba6:	2303      	movs	r3, #3
 8011ba8:	e11b      	b.n	8011de2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8011baa:	4b4b      	ldr	r3, [pc, #300]	@ (8011cd8 <HAL_RCC_OscConfig+0x688>)
 8011bac:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011bae:	2380      	movs	r3, #128	@ 0x80
 8011bb0:	009b      	lsls	r3, r3, #2
 8011bb2:	4013      	ands	r3, r2
 8011bb4:	d0ef      	beq.n	8011b96 <HAL_RCC_OscConfig+0x546>
 8011bb6:	e014      	b.n	8011be2 <HAL_RCC_OscConfig+0x592>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8011bb8:	f7fa f94c 	bl	800be54 <HAL_GetTick>
 8011bbc:	0003      	movs	r3, r0
 8011bbe:	617b      	str	r3, [r7, #20]

      /* Wait till LSE is disabled */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8011bc0:	e009      	b.n	8011bd6 <HAL_RCC_OscConfig+0x586>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8011bc2:	f7fa f947 	bl	800be54 <HAL_GetTick>
 8011bc6:	0002      	movs	r2, r0
 8011bc8:	697b      	ldr	r3, [r7, #20]
 8011bca:	1ad3      	subs	r3, r2, r3
 8011bcc:	4a47      	ldr	r2, [pc, #284]	@ (8011cec <HAL_RCC_OscConfig+0x69c>)
 8011bce:	4293      	cmp	r3, r2
 8011bd0:	d901      	bls.n	8011bd6 <HAL_RCC_OscConfig+0x586>
        {
          return HAL_TIMEOUT;
 8011bd2:	2303      	movs	r3, #3
 8011bd4:	e105      	b.n	8011de2 <HAL_RCC_OscConfig+0x792>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != 0U)
 8011bd6:	4b40      	ldr	r3, [pc, #256]	@ (8011cd8 <HAL_RCC_OscConfig+0x688>)
 8011bd8:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8011bda:	2380      	movs	r3, #128	@ 0x80
 8011bdc:	009b      	lsls	r3, r3, #2
 8011bde:	4013      	ands	r3, r2
 8011be0:	d1ef      	bne.n	8011bc2 <HAL_RCC_OscConfig+0x572>
        }
      }
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 8011be2:	2323      	movs	r3, #35	@ 0x23
 8011be4:	18fb      	adds	r3, r7, r3
 8011be6:	781b      	ldrb	r3, [r3, #0]
 8011be8:	2b01      	cmp	r3, #1
 8011bea:	d105      	bne.n	8011bf8 <HAL_RCC_OscConfig+0x5a8>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8011bec:	4b3a      	ldr	r3, [pc, #232]	@ (8011cd8 <HAL_RCC_OscConfig+0x688>)
 8011bee:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8011bf0:	4b39      	ldr	r3, [pc, #228]	@ (8011cd8 <HAL_RCC_OscConfig+0x688>)
 8011bf2:	493f      	ldr	r1, [pc, #252]	@ (8011cf0 <HAL_RCC_OscConfig+0x6a0>)
 8011bf4:	400a      	ands	r2, r1
 8011bf6:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined(RCC_HSI48_SUPPORT)
  /*----------------------------- HSI48 Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI48) == RCC_OSCILLATORTYPE_HSI48)
 8011bf8:	687b      	ldr	r3, [r7, #4]
 8011bfa:	681b      	ldr	r3, [r3, #0]
 8011bfc:	2220      	movs	r2, #32
 8011bfe:	4013      	ands	r3, r2
 8011c00:	d049      	beq.n	8011c96 <HAL_RCC_OscConfig+0x646>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSI48(RCC_OscInitStruct->HSI48State));

      /* Check the HSI48 State */
      if(RCC_OscInitStruct->HSI48State != RCC_HSI48_OFF)
 8011c02:	687b      	ldr	r3, [r7, #4]
 8011c04:	699b      	ldr	r3, [r3, #24]
 8011c06:	2b00      	cmp	r3, #0
 8011c08:	d026      	beq.n	8011c58 <HAL_RCC_OscConfig+0x608>
      {
        /* Enable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_ENABLE();
 8011c0a:	4b33      	ldr	r3, [pc, #204]	@ (8011cd8 <HAL_RCC_OscConfig+0x688>)
 8011c0c:	689a      	ldr	r2, [r3, #8]
 8011c0e:	4b32      	ldr	r3, [pc, #200]	@ (8011cd8 <HAL_RCC_OscConfig+0x688>)
 8011c10:	2101      	movs	r1, #1
 8011c12:	430a      	orrs	r2, r1
 8011c14:	609a      	str	r2, [r3, #8]
 8011c16:	4b30      	ldr	r3, [pc, #192]	@ (8011cd8 <HAL_RCC_OscConfig+0x688>)
 8011c18:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 8011c1a:	4b2f      	ldr	r3, [pc, #188]	@ (8011cd8 <HAL_RCC_OscConfig+0x688>)
 8011c1c:	2101      	movs	r1, #1
 8011c1e:	430a      	orrs	r2, r1
 8011c20:	635a      	str	r2, [r3, #52]	@ 0x34
 8011c22:	4b34      	ldr	r3, [pc, #208]	@ (8011cf4 <HAL_RCC_OscConfig+0x6a4>)
 8011c24:	6a1a      	ldr	r2, [r3, #32]
 8011c26:	4b33      	ldr	r3, [pc, #204]	@ (8011cf4 <HAL_RCC_OscConfig+0x6a4>)
 8011c28:	2180      	movs	r1, #128	@ 0x80
 8011c2a:	0189      	lsls	r1, r1, #6
 8011c2c:	430a      	orrs	r2, r1
 8011c2e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011c30:	f7fa f910 	bl	800be54 <HAL_GetTick>
 8011c34:	0003      	movs	r3, r0
 8011c36:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8011c38:	e008      	b.n	8011c4c <HAL_RCC_OscConfig+0x5fc>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8011c3a:	f7fa f90b 	bl	800be54 <HAL_GetTick>
 8011c3e:	0002      	movs	r2, r0
 8011c40:	697b      	ldr	r3, [r7, #20]
 8011c42:	1ad3      	subs	r3, r2, r3
 8011c44:	2b02      	cmp	r3, #2
 8011c46:	d901      	bls.n	8011c4c <HAL_RCC_OscConfig+0x5fc>
          {
            return HAL_TIMEOUT;
 8011c48:	2303      	movs	r3, #3
 8011c4a:	e0ca      	b.n	8011de2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) == 0U)
 8011c4c:	4b22      	ldr	r3, [pc, #136]	@ (8011cd8 <HAL_RCC_OscConfig+0x688>)
 8011c4e:	689b      	ldr	r3, [r3, #8]
 8011c50:	2202      	movs	r2, #2
 8011c52:	4013      	ands	r3, r2
 8011c54:	d0f1      	beq.n	8011c3a <HAL_RCC_OscConfig+0x5ea>
 8011c56:	e01e      	b.n	8011c96 <HAL_RCC_OscConfig+0x646>
        }
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI48). */
        __HAL_RCC_HSI48_DISABLE();
 8011c58:	4b1f      	ldr	r3, [pc, #124]	@ (8011cd8 <HAL_RCC_OscConfig+0x688>)
 8011c5a:	689a      	ldr	r2, [r3, #8]
 8011c5c:	4b1e      	ldr	r3, [pc, #120]	@ (8011cd8 <HAL_RCC_OscConfig+0x688>)
 8011c5e:	2101      	movs	r1, #1
 8011c60:	438a      	bics	r2, r1
 8011c62:	609a      	str	r2, [r3, #8]
 8011c64:	4b23      	ldr	r3, [pc, #140]	@ (8011cf4 <HAL_RCC_OscConfig+0x6a4>)
 8011c66:	6a1a      	ldr	r2, [r3, #32]
 8011c68:	4b22      	ldr	r3, [pc, #136]	@ (8011cf4 <HAL_RCC_OscConfig+0x6a4>)
 8011c6a:	4923      	ldr	r1, [pc, #140]	@ (8011cf8 <HAL_RCC_OscConfig+0x6a8>)
 8011c6c:	400a      	ands	r2, r1
 8011c6e:	621a      	str	r2, [r3, #32]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011c70:	f7fa f8f0 	bl	800be54 <HAL_GetTick>
 8011c74:	0003      	movs	r3, r0
 8011c76:	617b      	str	r3, [r7, #20]

        /* Wait till HSI48 is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8011c78:	e008      	b.n	8011c8c <HAL_RCC_OscConfig+0x63c>
        {
          if((HAL_GetTick() - tickstart) > HSI48_TIMEOUT_VALUE)
 8011c7a:	f7fa f8eb 	bl	800be54 <HAL_GetTick>
 8011c7e:	0002      	movs	r2, r0
 8011c80:	697b      	ldr	r3, [r7, #20]
 8011c82:	1ad3      	subs	r3, r2, r3
 8011c84:	2b02      	cmp	r3, #2
 8011c86:	d901      	bls.n	8011c8c <HAL_RCC_OscConfig+0x63c>
          {
            return HAL_TIMEOUT;
 8011c88:	2303      	movs	r3, #3
 8011c8a:	e0aa      	b.n	8011de2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSI48RDY) != 0U)
 8011c8c:	4b12      	ldr	r3, [pc, #72]	@ (8011cd8 <HAL_RCC_OscConfig+0x688>)
 8011c8e:	689b      	ldr	r3, [r3, #8]
 8011c90:	2202      	movs	r2, #2
 8011c92:	4013      	ands	r3, r2
 8011c94:	d1f1      	bne.n	8011c7a <HAL_RCC_OscConfig+0x62a>
#endif /* RCC_HSI48_SUPPORT */

  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8011c96:	687b      	ldr	r3, [r7, #4]
 8011c98:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011c9a:	2b00      	cmp	r3, #0
 8011c9c:	d100      	bne.n	8011ca0 <HAL_RCC_OscConfig+0x650>
 8011c9e:	e09f      	b.n	8011de0 <HAL_RCC_OscConfig+0x790>
  {
    /* Check if the PLL is used as system clock or not */
    if(sysclk_source != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8011ca0:	69fb      	ldr	r3, [r7, #28]
 8011ca2:	2b0c      	cmp	r3, #12
 8011ca4:	d100      	bne.n	8011ca8 <HAL_RCC_OscConfig+0x658>
 8011ca6:	e078      	b.n	8011d9a <HAL_RCC_OscConfig+0x74a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8011ca8:	687b      	ldr	r3, [r7, #4]
 8011caa:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011cac:	2b02      	cmp	r3, #2
 8011cae:	d159      	bne.n	8011d64 <HAL_RCC_OscConfig+0x714>
        assert_param(IS_RCC_PLLSOURCE(RCC_OscInitStruct->PLL.PLLSource));
        assert_param(IS_RCC_PLL_MUL(RCC_OscInitStruct->PLL.PLLMUL));
        assert_param(IS_RCC_PLL_DIV(RCC_OscInitStruct->PLL.PLLDIV));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8011cb0:	4b09      	ldr	r3, [pc, #36]	@ (8011cd8 <HAL_RCC_OscConfig+0x688>)
 8011cb2:	681a      	ldr	r2, [r3, #0]
 8011cb4:	4b08      	ldr	r3, [pc, #32]	@ (8011cd8 <HAL_RCC_OscConfig+0x688>)
 8011cb6:	4911      	ldr	r1, [pc, #68]	@ (8011cfc <HAL_RCC_OscConfig+0x6ac>)
 8011cb8:	400a      	ands	r2, r1
 8011cba:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011cbc:	f7fa f8ca 	bl	800be54 <HAL_GetTick>
 8011cc0:	0003      	movs	r3, r0
 8011cc2:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8011cc4:	e01c      	b.n	8011d00 <HAL_RCC_OscConfig+0x6b0>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011cc6:	f7fa f8c5 	bl	800be54 <HAL_GetTick>
 8011cca:	0002      	movs	r2, r0
 8011ccc:	697b      	ldr	r3, [r7, #20]
 8011cce:	1ad3      	subs	r3, r2, r3
 8011cd0:	2b02      	cmp	r3, #2
 8011cd2:	d915      	bls.n	8011d00 <HAL_RCC_OscConfig+0x6b0>
          {
            return HAL_TIMEOUT;
 8011cd4:	2303      	movs	r3, #3
 8011cd6:	e084      	b.n	8011de2 <HAL_RCC_OscConfig+0x792>
 8011cd8:	40021000 	.word	0x40021000
 8011cdc:	ffff1fff 	.word	0xffff1fff
 8011ce0:	fffffeff 	.word	0xfffffeff
 8011ce4:	40007000 	.word	0x40007000
 8011ce8:	fffffbff 	.word	0xfffffbff
 8011cec:	00001388 	.word	0x00001388
 8011cf0:	efffffff 	.word	0xefffffff
 8011cf4:	40010000 	.word	0x40010000
 8011cf8:	ffffdfff 	.word	0xffffdfff
 8011cfc:	feffffff 	.word	0xfeffffff
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8011d00:	4b3a      	ldr	r3, [pc, #232]	@ (8011dec <HAL_RCC_OscConfig+0x79c>)
 8011d02:	681a      	ldr	r2, [r3, #0]
 8011d04:	2380      	movs	r3, #128	@ 0x80
 8011d06:	049b      	lsls	r3, r3, #18
 8011d08:	4013      	ands	r3, r2
 8011d0a:	d1dc      	bne.n	8011cc6 <HAL_RCC_OscConfig+0x676>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        __HAL_RCC_PLL_CONFIG(RCC_OscInitStruct->PLL.PLLSource,
 8011d0c:	4b37      	ldr	r3, [pc, #220]	@ (8011dec <HAL_RCC_OscConfig+0x79c>)
 8011d0e:	68db      	ldr	r3, [r3, #12]
 8011d10:	4a37      	ldr	r2, [pc, #220]	@ (8011df0 <HAL_RCC_OscConfig+0x7a0>)
 8011d12:	4013      	ands	r3, r2
 8011d14:	0019      	movs	r1, r3
 8011d16:	687b      	ldr	r3, [r7, #4]
 8011d18:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8011d1a:	687b      	ldr	r3, [r7, #4]
 8011d1c:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8011d1e:	431a      	orrs	r2, r3
 8011d20:	687b      	ldr	r3, [r7, #4]
 8011d22:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8011d24:	431a      	orrs	r2, r3
 8011d26:	4b31      	ldr	r3, [pc, #196]	@ (8011dec <HAL_RCC_OscConfig+0x79c>)
 8011d28:	430a      	orrs	r2, r1
 8011d2a:	60da      	str	r2, [r3, #12]
                             RCC_OscInitStruct->PLL.PLLMUL,
                             RCC_OscInitStruct->PLL.PLLDIV);
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8011d2c:	4b2f      	ldr	r3, [pc, #188]	@ (8011dec <HAL_RCC_OscConfig+0x79c>)
 8011d2e:	681a      	ldr	r2, [r3, #0]
 8011d30:	4b2e      	ldr	r3, [pc, #184]	@ (8011dec <HAL_RCC_OscConfig+0x79c>)
 8011d32:	2180      	movs	r1, #128	@ 0x80
 8011d34:	0449      	lsls	r1, r1, #17
 8011d36:	430a      	orrs	r2, r1
 8011d38:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011d3a:	f7fa f88b 	bl	800be54 <HAL_GetTick>
 8011d3e:	0003      	movs	r3, r0
 8011d40:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8011d42:	e008      	b.n	8011d56 <HAL_RCC_OscConfig+0x706>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011d44:	f7fa f886 	bl	800be54 <HAL_GetTick>
 8011d48:	0002      	movs	r2, r0
 8011d4a:	697b      	ldr	r3, [r7, #20]
 8011d4c:	1ad3      	subs	r3, r2, r3
 8011d4e:	2b02      	cmp	r3, #2
 8011d50:	d901      	bls.n	8011d56 <HAL_RCC_OscConfig+0x706>
          {
            return HAL_TIMEOUT;
 8011d52:	2303      	movs	r3, #3
 8011d54:	e045      	b.n	8011de2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  == 0U)
 8011d56:	4b25      	ldr	r3, [pc, #148]	@ (8011dec <HAL_RCC_OscConfig+0x79c>)
 8011d58:	681a      	ldr	r2, [r3, #0]
 8011d5a:	2380      	movs	r3, #128	@ 0x80
 8011d5c:	049b      	lsls	r3, r3, #18
 8011d5e:	4013      	ands	r3, r2
 8011d60:	d0f0      	beq.n	8011d44 <HAL_RCC_OscConfig+0x6f4>
 8011d62:	e03d      	b.n	8011de0 <HAL_RCC_OscConfig+0x790>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8011d64:	4b21      	ldr	r3, [pc, #132]	@ (8011dec <HAL_RCC_OscConfig+0x79c>)
 8011d66:	681a      	ldr	r2, [r3, #0]
 8011d68:	4b20      	ldr	r3, [pc, #128]	@ (8011dec <HAL_RCC_OscConfig+0x79c>)
 8011d6a:	4922      	ldr	r1, [pc, #136]	@ (8011df4 <HAL_RCC_OscConfig+0x7a4>)
 8011d6c:	400a      	ands	r2, r1
 8011d6e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8011d70:	f7fa f870 	bl	800be54 <HAL_GetTick>
 8011d74:	0003      	movs	r3, r0
 8011d76:	617b      	str	r3, [r7, #20]

        /* Wait till PLL is disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8011d78:	e008      	b.n	8011d8c <HAL_RCC_OscConfig+0x73c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8011d7a:	f7fa f86b 	bl	800be54 <HAL_GetTick>
 8011d7e:	0002      	movs	r2, r0
 8011d80:	697b      	ldr	r3, [r7, #20]
 8011d82:	1ad3      	subs	r3, r2, r3
 8011d84:	2b02      	cmp	r3, #2
 8011d86:	d901      	bls.n	8011d8c <HAL_RCC_OscConfig+0x73c>
          {
            return HAL_TIMEOUT;
 8011d88:	2303      	movs	r3, #3
 8011d8a:	e02a      	b.n	8011de2 <HAL_RCC_OscConfig+0x792>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY)  != 0U)
 8011d8c:	4b17      	ldr	r3, [pc, #92]	@ (8011dec <HAL_RCC_OscConfig+0x79c>)
 8011d8e:	681a      	ldr	r2, [r3, #0]
 8011d90:	2380      	movs	r3, #128	@ 0x80
 8011d92:	049b      	lsls	r3, r3, #18
 8011d94:	4013      	ands	r3, r2
 8011d96:	d1f0      	bne.n	8011d7a <HAL_RCC_OscConfig+0x72a>
 8011d98:	e022      	b.n	8011de0 <HAL_RCC_OscConfig+0x790>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8011d9a:	687b      	ldr	r3, [r7, #4]
 8011d9c:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8011d9e:	2b01      	cmp	r3, #1
 8011da0:	d101      	bne.n	8011da6 <HAL_RCC_OscConfig+0x756>
      {
        return HAL_ERROR;
 8011da2:	2301      	movs	r3, #1
 8011da4:	e01d      	b.n	8011de2 <HAL_RCC_OscConfig+0x792>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->CFGR;
 8011da6:	4b11      	ldr	r3, [pc, #68]	@ (8011dec <HAL_RCC_OscConfig+0x79c>)
 8011da8:	68db      	ldr	r3, [r3, #12]
 8011daa:	61bb      	str	r3, [r7, #24]
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8011dac:	69ba      	ldr	r2, [r7, #24]
 8011dae:	2380      	movs	r3, #128	@ 0x80
 8011db0:	025b      	lsls	r3, r3, #9
 8011db2:	401a      	ands	r2, r3
 8011db4:	687b      	ldr	r3, [r7, #4]
 8011db6:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8011db8:	429a      	cmp	r2, r3
 8011dba:	d10f      	bne.n	8011ddc <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8011dbc:	69ba      	ldr	r2, [r7, #24]
 8011dbe:	23f0      	movs	r3, #240	@ 0xf0
 8011dc0:	039b      	lsls	r3, r3, #14
 8011dc2:	401a      	ands	r2, r3
 8011dc4:	687b      	ldr	r3, [r7, #4]
 8011dc6:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
        if((READ_BIT(pll_config, RCC_CFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8011dc8:	429a      	cmp	r2, r3
 8011dca:	d107      	bne.n	8011ddc <HAL_RCC_OscConfig+0x78c>
           (READ_BIT(pll_config, RCC_CFGR_PLLDIV) != RCC_OscInitStruct->PLL.PLLDIV))
 8011dcc:	69ba      	ldr	r2, [r7, #24]
 8011dce:	23c0      	movs	r3, #192	@ 0xc0
 8011dd0:	041b      	lsls	r3, r3, #16
 8011dd2:	401a      	ands	r2, r3
 8011dd4:	687b      	ldr	r3, [r7, #4]
 8011dd6:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
           (READ_BIT(pll_config, RCC_CFGR_PLLMUL) != RCC_OscInitStruct->PLL.PLLMUL) ||
 8011dd8:	429a      	cmp	r2, r3
 8011dda:	d001      	beq.n	8011de0 <HAL_RCC_OscConfig+0x790>
        {
          return HAL_ERROR;
 8011ddc:	2301      	movs	r3, #1
 8011dde:	e000      	b.n	8011de2 <HAL_RCC_OscConfig+0x792>
        }
      }
    }
  }
  return HAL_OK;
 8011de0:	2300      	movs	r3, #0
}
 8011de2:	0018      	movs	r0, r3
 8011de4:	46bd      	mov	sp, r7
 8011de6:	b00a      	add	sp, #40	@ 0x28
 8011de8:	bdb0      	pop	{r4, r5, r7, pc}
 8011dea:	46c0      	nop			@ (mov r8, r8)
 8011dec:	40021000 	.word	0x40021000
 8011df0:	ff02ffff 	.word	0xff02ffff
 8011df4:	feffffff 	.word	0xfeffffff

08011df8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8011df8:	b5b0      	push	{r4, r5, r7, lr}
 8011dfa:	b084      	sub	sp, #16
 8011dfc:	af00      	add	r7, sp, #0
 8011dfe:	6078      	str	r0, [r7, #4]
 8011e00:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;
  HAL_StatusTypeDef status;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8011e02:	687b      	ldr	r3, [r7, #4]
 8011e04:	2b00      	cmp	r3, #0
 8011e06:	d101      	bne.n	8011e0c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8011e08:	2301      	movs	r3, #1
 8011e0a:	e128      	b.n	801205e <HAL_RCC_ClockConfig+0x266>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
  must be correctly programmed according to the frequency of the CPU clock
  (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8011e0c:	4b96      	ldr	r3, [pc, #600]	@ (8012068 <HAL_RCC_ClockConfig+0x270>)
 8011e0e:	681b      	ldr	r3, [r3, #0]
 8011e10:	2201      	movs	r2, #1
 8011e12:	4013      	ands	r3, r2
 8011e14:	683a      	ldr	r2, [r7, #0]
 8011e16:	429a      	cmp	r2, r3
 8011e18:	d91e      	bls.n	8011e58 <HAL_RCC_ClockConfig+0x60>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011e1a:	4b93      	ldr	r3, [pc, #588]	@ (8012068 <HAL_RCC_ClockConfig+0x270>)
 8011e1c:	681b      	ldr	r3, [r3, #0]
 8011e1e:	2201      	movs	r2, #1
 8011e20:	4393      	bics	r3, r2
 8011e22:	0019      	movs	r1, r3
 8011e24:	4b90      	ldr	r3, [pc, #576]	@ (8012068 <HAL_RCC_ClockConfig+0x270>)
 8011e26:	683a      	ldr	r2, [r7, #0]
 8011e28:	430a      	orrs	r2, r1
 8011e2a:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8011e2c:	f7fa f812 	bl	800be54 <HAL_GetTick>
 8011e30:	0003      	movs	r3, r0
 8011e32:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8011e34:	e009      	b.n	8011e4a <HAL_RCC_ClockConfig+0x52>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011e36:	f7fa f80d 	bl	800be54 <HAL_GetTick>
 8011e3a:	0002      	movs	r2, r0
 8011e3c:	68fb      	ldr	r3, [r7, #12]
 8011e3e:	1ad3      	subs	r3, r2, r3
 8011e40:	4a8a      	ldr	r2, [pc, #552]	@ (801206c <HAL_RCC_ClockConfig+0x274>)
 8011e42:	4293      	cmp	r3, r2
 8011e44:	d901      	bls.n	8011e4a <HAL_RCC_ClockConfig+0x52>
      {
        return HAL_TIMEOUT;
 8011e46:	2303      	movs	r3, #3
 8011e48:	e109      	b.n	801205e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8011e4a:	4b87      	ldr	r3, [pc, #540]	@ (8012068 <HAL_RCC_ClockConfig+0x270>)
 8011e4c:	681b      	ldr	r3, [r3, #0]
 8011e4e:	2201      	movs	r2, #1
 8011e50:	4013      	ands	r3, r2
 8011e52:	683a      	ldr	r2, [r7, #0]
 8011e54:	429a      	cmp	r2, r3
 8011e56:	d1ee      	bne.n	8011e36 <HAL_RCC_ClockConfig+0x3e>
      }
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8011e58:	687b      	ldr	r3, [r7, #4]
 8011e5a:	681b      	ldr	r3, [r3, #0]
 8011e5c:	2202      	movs	r2, #2
 8011e5e:	4013      	ands	r3, r2
 8011e60:	d009      	beq.n	8011e76 <HAL_RCC_ClockConfig+0x7e>
  {
    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8011e62:	4b83      	ldr	r3, [pc, #524]	@ (8012070 <HAL_RCC_ClockConfig+0x278>)
 8011e64:	68db      	ldr	r3, [r3, #12]
 8011e66:	22f0      	movs	r2, #240	@ 0xf0
 8011e68:	4393      	bics	r3, r2
 8011e6a:	0019      	movs	r1, r3
 8011e6c:	687b      	ldr	r3, [r7, #4]
 8011e6e:	689a      	ldr	r2, [r3, #8]
 8011e70:	4b7f      	ldr	r3, [pc, #508]	@ (8012070 <HAL_RCC_ClockConfig+0x278>)
 8011e72:	430a      	orrs	r2, r1
 8011e74:	60da      	str	r2, [r3, #12]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8011e76:	687b      	ldr	r3, [r7, #4]
 8011e78:	681b      	ldr	r3, [r3, #0]
 8011e7a:	2201      	movs	r2, #1
 8011e7c:	4013      	ands	r3, r2
 8011e7e:	d100      	bne.n	8011e82 <HAL_RCC_ClockConfig+0x8a>
 8011e80:	e089      	b.n	8011f96 <HAL_RCC_ClockConfig+0x19e>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011e82:	687b      	ldr	r3, [r7, #4]
 8011e84:	685b      	ldr	r3, [r3, #4]
 8011e86:	2b02      	cmp	r3, #2
 8011e88:	d107      	bne.n	8011e9a <HAL_RCC_ClockConfig+0xa2>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == 0U)
 8011e8a:	4b79      	ldr	r3, [pc, #484]	@ (8012070 <HAL_RCC_ClockConfig+0x278>)
 8011e8c:	681a      	ldr	r2, [r3, #0]
 8011e8e:	2380      	movs	r3, #128	@ 0x80
 8011e90:	029b      	lsls	r3, r3, #10
 8011e92:	4013      	ands	r3, r2
 8011e94:	d120      	bne.n	8011ed8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8011e96:	2301      	movs	r3, #1
 8011e98:	e0e1      	b.n	801205e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* PLL is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8011e9a:	687b      	ldr	r3, [r7, #4]
 8011e9c:	685b      	ldr	r3, [r3, #4]
 8011e9e:	2b03      	cmp	r3, #3
 8011ea0:	d107      	bne.n	8011eb2 <HAL_RCC_ClockConfig+0xba>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == 0U)
 8011ea2:	4b73      	ldr	r3, [pc, #460]	@ (8012070 <HAL_RCC_ClockConfig+0x278>)
 8011ea4:	681a      	ldr	r2, [r3, #0]
 8011ea6:	2380      	movs	r3, #128	@ 0x80
 8011ea8:	049b      	lsls	r3, r3, #18
 8011eaa:	4013      	ands	r3, r2
 8011eac:	d114      	bne.n	8011ed8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8011eae:	2301      	movs	r3, #1
 8011eb0:	e0d5      	b.n	801205e <HAL_RCC_ClockConfig+0x266>
      }
    }
    /* HSI is selected as System Clock Source */
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8011eb2:	687b      	ldr	r3, [r7, #4]
 8011eb4:	685b      	ldr	r3, [r3, #4]
 8011eb6:	2b01      	cmp	r3, #1
 8011eb8:	d106      	bne.n	8011ec8 <HAL_RCC_ClockConfig+0xd0>
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == 0U)
 8011eba:	4b6d      	ldr	r3, [pc, #436]	@ (8012070 <HAL_RCC_ClockConfig+0x278>)
 8011ebc:	681b      	ldr	r3, [r3, #0]
 8011ebe:	2204      	movs	r2, #4
 8011ec0:	4013      	ands	r3, r2
 8011ec2:	d109      	bne.n	8011ed8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8011ec4:	2301      	movs	r3, #1
 8011ec6:	e0ca      	b.n	801205e <HAL_RCC_ClockConfig+0x266>
    }
    /* MSI is selected as System Clock Source */
    else
    {
      /* Check the MSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_MSIRDY) == 0U)
 8011ec8:	4b69      	ldr	r3, [pc, #420]	@ (8012070 <HAL_RCC_ClockConfig+0x278>)
 8011eca:	681a      	ldr	r2, [r3, #0]
 8011ecc:	2380      	movs	r3, #128	@ 0x80
 8011ece:	009b      	lsls	r3, r3, #2
 8011ed0:	4013      	ands	r3, r2
 8011ed2:	d101      	bne.n	8011ed8 <HAL_RCC_ClockConfig+0xe0>
      {
        return HAL_ERROR;
 8011ed4:	2301      	movs	r3, #1
 8011ed6:	e0c2      	b.n	801205e <HAL_RCC_ClockConfig+0x266>
      }
    }
    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8011ed8:	4b65      	ldr	r3, [pc, #404]	@ (8012070 <HAL_RCC_ClockConfig+0x278>)
 8011eda:	68db      	ldr	r3, [r3, #12]
 8011edc:	2203      	movs	r2, #3
 8011ede:	4393      	bics	r3, r2
 8011ee0:	0019      	movs	r1, r3
 8011ee2:	687b      	ldr	r3, [r7, #4]
 8011ee4:	685a      	ldr	r2, [r3, #4]
 8011ee6:	4b62      	ldr	r3, [pc, #392]	@ (8012070 <HAL_RCC_ClockConfig+0x278>)
 8011ee8:	430a      	orrs	r2, r1
 8011eea:	60da      	str	r2, [r3, #12]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8011eec:	f7f9 ffb2 	bl	800be54 <HAL_GetTick>
 8011ef0:	0003      	movs	r3, r0
 8011ef2:	60fb      	str	r3, [r7, #12]

    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8011ef4:	687b      	ldr	r3, [r7, #4]
 8011ef6:	685b      	ldr	r3, [r3, #4]
 8011ef8:	2b02      	cmp	r3, #2
 8011efa:	d111      	bne.n	8011f20 <HAL_RCC_ClockConfig+0x128>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8011efc:	e009      	b.n	8011f12 <HAL_RCC_ClockConfig+0x11a>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011efe:	f7f9 ffa9 	bl	800be54 <HAL_GetTick>
 8011f02:	0002      	movs	r2, r0
 8011f04:	68fb      	ldr	r3, [r7, #12]
 8011f06:	1ad3      	subs	r3, r2, r3
 8011f08:	4a58      	ldr	r2, [pc, #352]	@ (801206c <HAL_RCC_ClockConfig+0x274>)
 8011f0a:	4293      	cmp	r3, r2
 8011f0c:	d901      	bls.n	8011f12 <HAL_RCC_ClockConfig+0x11a>
        {
          return HAL_TIMEOUT;
 8011f0e:	2303      	movs	r3, #3
 8011f10:	e0a5      	b.n	801205e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSE)
 8011f12:	4b57      	ldr	r3, [pc, #348]	@ (8012070 <HAL_RCC_ClockConfig+0x278>)
 8011f14:	68db      	ldr	r3, [r3, #12]
 8011f16:	220c      	movs	r2, #12
 8011f18:	4013      	ands	r3, r2
 8011f1a:	2b08      	cmp	r3, #8
 8011f1c:	d1ef      	bne.n	8011efe <HAL_RCC_ClockConfig+0x106>
 8011f1e:	e03a      	b.n	8011f96 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)
 8011f20:	687b      	ldr	r3, [r7, #4]
 8011f22:	685b      	ldr	r3, [r3, #4]
 8011f24:	2b03      	cmp	r3, #3
 8011f26:	d111      	bne.n	8011f4c <HAL_RCC_ClockConfig+0x154>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8011f28:	e009      	b.n	8011f3e <HAL_RCC_ClockConfig+0x146>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011f2a:	f7f9 ff93 	bl	800be54 <HAL_GetTick>
 8011f2e:	0002      	movs	r2, r0
 8011f30:	68fb      	ldr	r3, [r7, #12]
 8011f32:	1ad3      	subs	r3, r2, r3
 8011f34:	4a4d      	ldr	r2, [pc, #308]	@ (801206c <HAL_RCC_ClockConfig+0x274>)
 8011f36:	4293      	cmp	r3, r2
 8011f38:	d901      	bls.n	8011f3e <HAL_RCC_ClockConfig+0x146>
        {
          return HAL_TIMEOUT;
 8011f3a:	2303      	movs	r3, #3
 8011f3c:	e08f      	b.n	801205e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_PLLCLK)
 8011f3e:	4b4c      	ldr	r3, [pc, #304]	@ (8012070 <HAL_RCC_ClockConfig+0x278>)
 8011f40:	68db      	ldr	r3, [r3, #12]
 8011f42:	220c      	movs	r2, #12
 8011f44:	4013      	ands	r3, r2
 8011f46:	2b0c      	cmp	r3, #12
 8011f48:	d1ef      	bne.n	8011f2a <HAL_RCC_ClockConfig+0x132>
 8011f4a:	e024      	b.n	8011f96 <HAL_RCC_ClockConfig+0x19e>
        }
      }
    }
    else if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSI)
 8011f4c:	687b      	ldr	r3, [r7, #4]
 8011f4e:	685b      	ldr	r3, [r3, #4]
 8011f50:	2b01      	cmp	r3, #1
 8011f52:	d11b      	bne.n	8011f8c <HAL_RCC_ClockConfig+0x194>
    {
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8011f54:	e009      	b.n	8011f6a <HAL_RCC_ClockConfig+0x172>
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011f56:	f7f9 ff7d 	bl	800be54 <HAL_GetTick>
 8011f5a:	0002      	movs	r2, r0
 8011f5c:	68fb      	ldr	r3, [r7, #12]
 8011f5e:	1ad3      	subs	r3, r2, r3
 8011f60:	4a42      	ldr	r2, [pc, #264]	@ (801206c <HAL_RCC_ClockConfig+0x274>)
 8011f62:	4293      	cmp	r3, r2
 8011f64:	d901      	bls.n	8011f6a <HAL_RCC_ClockConfig+0x172>
        {
          return HAL_TIMEOUT;
 8011f66:	2303      	movs	r3, #3
 8011f68:	e079      	b.n	801205e <HAL_RCC_ClockConfig+0x266>
      while (__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_HSI)
 8011f6a:	4b41      	ldr	r3, [pc, #260]	@ (8012070 <HAL_RCC_ClockConfig+0x278>)
 8011f6c:	68db      	ldr	r3, [r3, #12]
 8011f6e:	220c      	movs	r2, #12
 8011f70:	4013      	ands	r3, r2
 8011f72:	2b04      	cmp	r3, #4
 8011f74:	d1ef      	bne.n	8011f56 <HAL_RCC_ClockConfig+0x15e>
 8011f76:	e00e      	b.n	8011f96 <HAL_RCC_ClockConfig+0x19e>
    }
    else
    {
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
      {
        if((HAL_GetTick() - tickstart ) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011f78:	f7f9 ff6c 	bl	800be54 <HAL_GetTick>
 8011f7c:	0002      	movs	r2, r0
 8011f7e:	68fb      	ldr	r3, [r7, #12]
 8011f80:	1ad3      	subs	r3, r2, r3
 8011f82:	4a3a      	ldr	r2, [pc, #232]	@ (801206c <HAL_RCC_ClockConfig+0x274>)
 8011f84:	4293      	cmp	r3, r2
 8011f86:	d901      	bls.n	8011f8c <HAL_RCC_ClockConfig+0x194>
        {
          return HAL_TIMEOUT;
 8011f88:	2303      	movs	r3, #3
 8011f8a:	e068      	b.n	801205e <HAL_RCC_ClockConfig+0x266>
      while(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_SYSCLKSOURCE_STATUS_MSI)
 8011f8c:	4b38      	ldr	r3, [pc, #224]	@ (8012070 <HAL_RCC_ClockConfig+0x278>)
 8011f8e:	68db      	ldr	r3, [r3, #12]
 8011f90:	220c      	movs	r2, #12
 8011f92:	4013      	ands	r3, r2
 8011f94:	d1f0      	bne.n	8011f78 <HAL_RCC_ClockConfig+0x180>
        }
      }
    }
  }
  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8011f96:	4b34      	ldr	r3, [pc, #208]	@ (8012068 <HAL_RCC_ClockConfig+0x270>)
 8011f98:	681b      	ldr	r3, [r3, #0]
 8011f9a:	2201      	movs	r2, #1
 8011f9c:	4013      	ands	r3, r2
 8011f9e:	683a      	ldr	r2, [r7, #0]
 8011fa0:	429a      	cmp	r2, r3
 8011fa2:	d21e      	bcs.n	8011fe2 <HAL_RCC_ClockConfig+0x1ea>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8011fa4:	4b30      	ldr	r3, [pc, #192]	@ (8012068 <HAL_RCC_ClockConfig+0x270>)
 8011fa6:	681b      	ldr	r3, [r3, #0]
 8011fa8:	2201      	movs	r2, #1
 8011faa:	4393      	bics	r3, r2
 8011fac:	0019      	movs	r1, r3
 8011fae:	4b2e      	ldr	r3, [pc, #184]	@ (8012068 <HAL_RCC_ClockConfig+0x270>)
 8011fb0:	683a      	ldr	r2, [r7, #0]
 8011fb2:	430a      	orrs	r2, r1
 8011fb4:	601a      	str	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by polling the FLASH_ACR register */
    tickstart = HAL_GetTick();
 8011fb6:	f7f9 ff4d 	bl	800be54 <HAL_GetTick>
 8011fba:	0003      	movs	r3, r0
 8011fbc:	60fb      	str	r3, [r7, #12]

    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8011fbe:	e009      	b.n	8011fd4 <HAL_RCC_ClockConfig+0x1dc>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8011fc0:	f7f9 ff48 	bl	800be54 <HAL_GetTick>
 8011fc4:	0002      	movs	r2, r0
 8011fc6:	68fb      	ldr	r3, [r7, #12]
 8011fc8:	1ad3      	subs	r3, r2, r3
 8011fca:	4a28      	ldr	r2, [pc, #160]	@ (801206c <HAL_RCC_ClockConfig+0x274>)
 8011fcc:	4293      	cmp	r3, r2
 8011fce:	d901      	bls.n	8011fd4 <HAL_RCC_ClockConfig+0x1dc>
      {
        return HAL_TIMEOUT;
 8011fd0:	2303      	movs	r3, #3
 8011fd2:	e044      	b.n	801205e <HAL_RCC_ClockConfig+0x266>
    while (__HAL_FLASH_GET_LATENCY() != FLatency)
 8011fd4:	4b24      	ldr	r3, [pc, #144]	@ (8012068 <HAL_RCC_ClockConfig+0x270>)
 8011fd6:	681b      	ldr	r3, [r3, #0]
 8011fd8:	2201      	movs	r2, #1
 8011fda:	4013      	ands	r3, r2
 8011fdc:	683a      	ldr	r2, [r7, #0]
 8011fde:	429a      	cmp	r2, r3
 8011fe0:	d1ee      	bne.n	8011fc0 <HAL_RCC_ClockConfig+0x1c8>
      }
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8011fe2:	687b      	ldr	r3, [r7, #4]
 8011fe4:	681b      	ldr	r3, [r3, #0]
 8011fe6:	2204      	movs	r2, #4
 8011fe8:	4013      	ands	r3, r2
 8011fea:	d009      	beq.n	8012000 <HAL_RCC_ClockConfig+0x208>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8011fec:	4b20      	ldr	r3, [pc, #128]	@ (8012070 <HAL_RCC_ClockConfig+0x278>)
 8011fee:	68db      	ldr	r3, [r3, #12]
 8011ff0:	4a20      	ldr	r2, [pc, #128]	@ (8012074 <HAL_RCC_ClockConfig+0x27c>)
 8011ff2:	4013      	ands	r3, r2
 8011ff4:	0019      	movs	r1, r3
 8011ff6:	687b      	ldr	r3, [r7, #4]
 8011ff8:	68da      	ldr	r2, [r3, #12]
 8011ffa:	4b1d      	ldr	r3, [pc, #116]	@ (8012070 <HAL_RCC_ClockConfig+0x278>)
 8011ffc:	430a      	orrs	r2, r1
 8011ffe:	60da      	str	r2, [r3, #12]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8012000:	687b      	ldr	r3, [r7, #4]
 8012002:	681b      	ldr	r3, [r3, #0]
 8012004:	2208      	movs	r2, #8
 8012006:	4013      	ands	r3, r2
 8012008:	d00a      	beq.n	8012020 <HAL_RCC_ClockConfig+0x228>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3));
 801200a:	4b19      	ldr	r3, [pc, #100]	@ (8012070 <HAL_RCC_ClockConfig+0x278>)
 801200c:	68db      	ldr	r3, [r3, #12]
 801200e:	4a1a      	ldr	r2, [pc, #104]	@ (8012078 <HAL_RCC_ClockConfig+0x280>)
 8012010:	4013      	ands	r3, r2
 8012012:	0019      	movs	r1, r3
 8012014:	687b      	ldr	r3, [r7, #4]
 8012016:	691b      	ldr	r3, [r3, #16]
 8012018:	00da      	lsls	r2, r3, #3
 801201a:	4b15      	ldr	r3, [pc, #84]	@ (8012070 <HAL_RCC_ClockConfig+0x278>)
 801201c:	430a      	orrs	r2, r1
 801201e:	60da      	str	r2, [r3, #12]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8012020:	f000 f832 	bl	8012088 <HAL_RCC_GetSysClockFreq>
 8012024:	0001      	movs	r1, r0
 8012026:	4b12      	ldr	r3, [pc, #72]	@ (8012070 <HAL_RCC_ClockConfig+0x278>)
 8012028:	68db      	ldr	r3, [r3, #12]
 801202a:	091b      	lsrs	r3, r3, #4
 801202c:	220f      	movs	r2, #15
 801202e:	4013      	ands	r3, r2
 8012030:	4a12      	ldr	r2, [pc, #72]	@ (801207c <HAL_RCC_ClockConfig+0x284>)
 8012032:	5cd3      	ldrb	r3, [r2, r3]
 8012034:	000a      	movs	r2, r1
 8012036:	40da      	lsrs	r2, r3
 8012038:	4b11      	ldr	r3, [pc, #68]	@ (8012080 <HAL_RCC_ClockConfig+0x288>)
 801203a:	601a      	str	r2, [r3, #0]

  /* Configure the source of time base considering new system clocks settings*/
  status = HAL_InitTick(uwTickPrio);
 801203c:	4b11      	ldr	r3, [pc, #68]	@ (8012084 <HAL_RCC_ClockConfig+0x28c>)
 801203e:	681b      	ldr	r3, [r3, #0]
 8012040:	250b      	movs	r5, #11
 8012042:	197c      	adds	r4, r7, r5
 8012044:	0018      	movs	r0, r3
 8012046:	f7f9 febf 	bl	800bdc8 <HAL_InitTick>
 801204a:	0003      	movs	r3, r0
 801204c:	7023      	strb	r3, [r4, #0]
  if(status != HAL_OK)
 801204e:	197b      	adds	r3, r7, r5
 8012050:	781b      	ldrb	r3, [r3, #0]
 8012052:	2b00      	cmp	r3, #0
 8012054:	d002      	beq.n	801205c <HAL_RCC_ClockConfig+0x264>
  {
    return status;
 8012056:	197b      	adds	r3, r7, r5
 8012058:	781b      	ldrb	r3, [r3, #0]
 801205a:	e000      	b.n	801205e <HAL_RCC_ClockConfig+0x266>
  }

  return HAL_OK;
 801205c:	2300      	movs	r3, #0
}
 801205e:	0018      	movs	r0, r3
 8012060:	46bd      	mov	sp, r7
 8012062:	b004      	add	sp, #16
 8012064:	bdb0      	pop	{r4, r5, r7, pc}
 8012066:	46c0      	nop			@ (mov r8, r8)
 8012068:	40022000 	.word	0x40022000
 801206c:	00001388 	.word	0x00001388
 8012070:	40021000 	.word	0x40021000
 8012074:	fffff8ff 	.word	0xfffff8ff
 8012078:	ffffc7ff 	.word	0xffffc7ff
 801207c:	080209f8 	.word	0x080209f8
 8012080:	200000c8 	.word	0x200000c8
 8012084:	200000d8 	.word	0x200000d8

08012088 <HAL_RCC_GetSysClockFreq>:
  *         right SYSCLK value. Otherwise, any configuration based on this function will be incorrect.
  *
  * @retval SYSCLK frequency
  */
uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8012088:	b5b0      	push	{r4, r5, r7, lr}
 801208a:	b08e      	sub	sp, #56	@ 0x38
 801208c:	af00      	add	r7, sp, #0
  uint32_t tmpreg, pllm, plld, pllvco, msiclkrange;    /* no init needed */
  uint32_t sysclockfreq;

  tmpreg = RCC->CFGR;
 801208e:	4b4c      	ldr	r3, [pc, #304]	@ (80121c0 <HAL_RCC_GetSysClockFreq+0x138>)
 8012090:	68db      	ldr	r3, [r3, #12]
 8012092:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (tmpreg & RCC_CFGR_SWS)
 8012094:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8012096:	230c      	movs	r3, #12
 8012098:	4013      	ands	r3, r2
 801209a:	2b0c      	cmp	r3, #12
 801209c:	d014      	beq.n	80120c8 <HAL_RCC_GetSysClockFreq+0x40>
 801209e:	d900      	bls.n	80120a2 <HAL_RCC_GetSysClockFreq+0x1a>
 80120a0:	e07b      	b.n	801219a <HAL_RCC_GetSysClockFreq+0x112>
 80120a2:	2b04      	cmp	r3, #4
 80120a4:	d002      	beq.n	80120ac <HAL_RCC_GetSysClockFreq+0x24>
 80120a6:	2b08      	cmp	r3, #8
 80120a8:	d00b      	beq.n	80120c2 <HAL_RCC_GetSysClockFreq+0x3a>
 80120aa:	e076      	b.n	801219a <HAL_RCC_GetSysClockFreq+0x112>
  {
    case RCC_SYSCLKSOURCE_STATUS_HSI:  /* HSI used as system clock source */
    {
      if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 80120ac:	4b44      	ldr	r3, [pc, #272]	@ (80121c0 <HAL_RCC_GetSysClockFreq+0x138>)
 80120ae:	681b      	ldr	r3, [r3, #0]
 80120b0:	2210      	movs	r2, #16
 80120b2:	4013      	ands	r3, r2
 80120b4:	d002      	beq.n	80120bc <HAL_RCC_GetSysClockFreq+0x34>
      {
        sysclockfreq =  (HSI_VALUE >> 2);
 80120b6:	4b43      	ldr	r3, [pc, #268]	@ (80121c4 <HAL_RCC_GetSysClockFreq+0x13c>)
 80120b8:	633b      	str	r3, [r7, #48]	@ 0x30
      }
      else
      {
        sysclockfreq =  HSI_VALUE;
      }
      break;
 80120ba:	e07c      	b.n	80121b6 <HAL_RCC_GetSysClockFreq+0x12e>
        sysclockfreq =  HSI_VALUE;
 80120bc:	4b42      	ldr	r3, [pc, #264]	@ (80121c8 <HAL_RCC_GetSysClockFreq+0x140>)
 80120be:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80120c0:	e079      	b.n	80121b6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_HSE:  /* HSE used as system clock */
    {
      sysclockfreq = HSE_VALUE;
 80120c2:	4b42      	ldr	r3, [pc, #264]	@ (80121cc <HAL_RCC_GetSysClockFreq+0x144>)
 80120c4:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80120c6:	e076      	b.n	80121b6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_PLLCLK:  /* PLL used as system clock */
    {
      pllm = PLLMulTable[(uint32_t)(tmpreg & RCC_CFGR_PLLMUL) >> RCC_CFGR_PLLMUL_Pos];
 80120c8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80120ca:	0c9a      	lsrs	r2, r3, #18
 80120cc:	230f      	movs	r3, #15
 80120ce:	401a      	ands	r2, r3
 80120d0:	4b3f      	ldr	r3, [pc, #252]	@ (80121d0 <HAL_RCC_GetSysClockFreq+0x148>)
 80120d2:	5c9b      	ldrb	r3, [r3, r2]
 80120d4:	62bb      	str	r3, [r7, #40]	@ 0x28
      plld = ((uint32_t)(tmpreg & RCC_CFGR_PLLDIV) >> RCC_CFGR_PLLDIV_Pos) + 1U;
 80120d6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80120d8:	0d9a      	lsrs	r2, r3, #22
 80120da:	2303      	movs	r3, #3
 80120dc:	4013      	ands	r3, r2
 80120de:	3301      	adds	r3, #1
 80120e0:	627b      	str	r3, [r7, #36]	@ 0x24
      if (__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80120e2:	4b37      	ldr	r3, [pc, #220]	@ (80121c0 <HAL_RCC_GetSysClockFreq+0x138>)
 80120e4:	68da      	ldr	r2, [r3, #12]
 80120e6:	2380      	movs	r3, #128	@ 0x80
 80120e8:	025b      	lsls	r3, r3, #9
 80120ea:	4013      	ands	r3, r2
 80120ec:	d01a      	beq.n	8012124 <HAL_RCC_GetSysClockFreq+0x9c>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t)(((uint64_t)HSE_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 80120ee:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80120f0:	61bb      	str	r3, [r7, #24]
 80120f2:	2300      	movs	r3, #0
 80120f4:	61fb      	str	r3, [r7, #28]
 80120f6:	4a35      	ldr	r2, [pc, #212]	@ (80121cc <HAL_RCC_GetSysClockFreq+0x144>)
 80120f8:	2300      	movs	r3, #0
 80120fa:	69b8      	ldr	r0, [r7, #24]
 80120fc:	69f9      	ldr	r1, [r7, #28]
 80120fe:	f7ee fa5f 	bl	80005c0 <__aeabi_lmul>
 8012102:	0002      	movs	r2, r0
 8012104:	000b      	movs	r3, r1
 8012106:	0010      	movs	r0, r2
 8012108:	0019      	movs	r1, r3
 801210a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801210c:	613b      	str	r3, [r7, #16]
 801210e:	2300      	movs	r3, #0
 8012110:	617b      	str	r3, [r7, #20]
 8012112:	693a      	ldr	r2, [r7, #16]
 8012114:	697b      	ldr	r3, [r7, #20]
 8012116:	f7ee fa33 	bl	8000580 <__aeabi_uldivmod>
 801211a:	0002      	movs	r2, r0
 801211c:	000b      	movs	r3, r1
 801211e:	0013      	movs	r3, r2
 8012120:	637b      	str	r3, [r7, #52]	@ 0x34
 8012122:	e037      	b.n	8012194 <HAL_RCC_GetSysClockFreq+0x10c>
      }
      else
      {
        if ((RCC->CR & RCC_CR_HSIDIVF) != 0U)
 8012124:	4b26      	ldr	r3, [pc, #152]	@ (80121c0 <HAL_RCC_GetSysClockFreq+0x138>)
 8012126:	681b      	ldr	r3, [r3, #0]
 8012128:	2210      	movs	r2, #16
 801212a:	4013      	ands	r3, r2
 801212c:	d01a      	beq.n	8012164 <HAL_RCC_GetSysClockFreq+0xdc>
        {
          pllvco = (uint32_t)((((uint64_t)(HSI_VALUE >> 2)) * (uint64_t)pllm) / (uint64_t)plld);
 801212e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012130:	60bb      	str	r3, [r7, #8]
 8012132:	2300      	movs	r3, #0
 8012134:	60fb      	str	r3, [r7, #12]
 8012136:	4a23      	ldr	r2, [pc, #140]	@ (80121c4 <HAL_RCC_GetSysClockFreq+0x13c>)
 8012138:	2300      	movs	r3, #0
 801213a:	68b8      	ldr	r0, [r7, #8]
 801213c:	68f9      	ldr	r1, [r7, #12]
 801213e:	f7ee fa3f 	bl	80005c0 <__aeabi_lmul>
 8012142:	0002      	movs	r2, r0
 8012144:	000b      	movs	r3, r1
 8012146:	0010      	movs	r0, r2
 8012148:	0019      	movs	r1, r3
 801214a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801214c:	603b      	str	r3, [r7, #0]
 801214e:	2300      	movs	r3, #0
 8012150:	607b      	str	r3, [r7, #4]
 8012152:	683a      	ldr	r2, [r7, #0]
 8012154:	687b      	ldr	r3, [r7, #4]
 8012156:	f7ee fa13 	bl	8000580 <__aeabi_uldivmod>
 801215a:	0002      	movs	r2, r0
 801215c:	000b      	movs	r3, r1
 801215e:	0013      	movs	r3, r2
 8012160:	637b      	str	r3, [r7, #52]	@ 0x34
 8012162:	e017      	b.n	8012194 <HAL_RCC_GetSysClockFreq+0x10c>
        }
        else
        {
         pllvco = (uint32_t)(((uint64_t)HSI_VALUE * (uint64_t)pllm) / (uint64_t)plld);
 8012164:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8012166:	0018      	movs	r0, r3
 8012168:	2300      	movs	r3, #0
 801216a:	0019      	movs	r1, r3
 801216c:	4a16      	ldr	r2, [pc, #88]	@ (80121c8 <HAL_RCC_GetSysClockFreq+0x140>)
 801216e:	2300      	movs	r3, #0
 8012170:	f7ee fa26 	bl	80005c0 <__aeabi_lmul>
 8012174:	0002      	movs	r2, r0
 8012176:	000b      	movs	r3, r1
 8012178:	0010      	movs	r0, r2
 801217a:	0019      	movs	r1, r3
 801217c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801217e:	001c      	movs	r4, r3
 8012180:	2300      	movs	r3, #0
 8012182:	001d      	movs	r5, r3
 8012184:	0022      	movs	r2, r4
 8012186:	002b      	movs	r3, r5
 8012188:	f7ee f9fa 	bl	8000580 <__aeabi_uldivmod>
 801218c:	0002      	movs	r2, r0
 801218e:	000b      	movs	r3, r1
 8012190:	0013      	movs	r3, r2
 8012192:	637b      	str	r3, [r7, #52]	@ 0x34
        }
      }
      sysclockfreq = pllvco;
 8012194:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8012196:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 8012198:	e00d      	b.n	80121b6 <HAL_RCC_GetSysClockFreq+0x12e>
    }
    case RCC_SYSCLKSOURCE_STATUS_MSI:  /* MSI used as system clock source */
    default: /* MSI used as system clock */
    {
      msiclkrange = (RCC->ICSCR & RCC_ICSCR_MSIRANGE ) >> RCC_ICSCR_MSIRANGE_Pos;
 801219a:	4b09      	ldr	r3, [pc, #36]	@ (80121c0 <HAL_RCC_GetSysClockFreq+0x138>)
 801219c:	685b      	ldr	r3, [r3, #4]
 801219e:	0b5b      	lsrs	r3, r3, #13
 80121a0:	2207      	movs	r2, #7
 80121a2:	4013      	ands	r3, r2
 80121a4:	623b      	str	r3, [r7, #32]
      sysclockfreq = (32768U * (1UL << (msiclkrange + 1U)));
 80121a6:	6a3b      	ldr	r3, [r7, #32]
 80121a8:	3301      	adds	r3, #1
 80121aa:	2280      	movs	r2, #128	@ 0x80
 80121ac:	0212      	lsls	r2, r2, #8
 80121ae:	409a      	lsls	r2, r3
 80121b0:	0013      	movs	r3, r2
 80121b2:	633b      	str	r3, [r7, #48]	@ 0x30
      break;
 80121b4:	46c0      	nop			@ (mov r8, r8)
    }
  }
  return sysclockfreq;
 80121b6:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
}
 80121b8:	0018      	movs	r0, r3
 80121ba:	46bd      	mov	sp, r7
 80121bc:	b00e      	add	sp, #56	@ 0x38
 80121be:	bdb0      	pop	{r4, r5, r7, pc}
 80121c0:	40021000 	.word	0x40021000
 80121c4:	003d0900 	.word	0x003d0900
 80121c8:	00f42400 	.word	0x00f42400
 80121cc:	007a1200 	.word	0x007a1200
 80121d0:	08020a10 	.word	0x08020a10

080121d4 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80121d4:	b580      	push	{r7, lr}
 80121d6:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80121d8:	4b02      	ldr	r3, [pc, #8]	@ (80121e4 <HAL_RCC_GetHCLKFreq+0x10>)
 80121da:	681b      	ldr	r3, [r3, #0]
}
 80121dc:	0018      	movs	r0, r3
 80121de:	46bd      	mov	sp, r7
 80121e0:	bd80      	pop	{r7, pc}
 80121e2:	46c0      	nop			@ (mov r8, r8)
 80121e4:	200000c8 	.word	0x200000c8

080121e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80121e8:	b580      	push	{r7, lr}
 80121ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1) >> RCC_CFGR_PPRE1_Pos]);
 80121ec:	f7ff fff2 	bl	80121d4 <HAL_RCC_GetHCLKFreq>
 80121f0:	0001      	movs	r1, r0
 80121f2:	4b06      	ldr	r3, [pc, #24]	@ (801220c <HAL_RCC_GetPCLK1Freq+0x24>)
 80121f4:	68db      	ldr	r3, [r3, #12]
 80121f6:	0a1b      	lsrs	r3, r3, #8
 80121f8:	2207      	movs	r2, #7
 80121fa:	4013      	ands	r3, r2
 80121fc:	4a04      	ldr	r2, [pc, #16]	@ (8012210 <HAL_RCC_GetPCLK1Freq+0x28>)
 80121fe:	5cd3      	ldrb	r3, [r2, r3]
 8012200:	40d9      	lsrs	r1, r3
 8012202:	000b      	movs	r3, r1
}
 8012204:	0018      	movs	r0, r3
 8012206:	46bd      	mov	sp, r7
 8012208:	bd80      	pop	{r7, pc}
 801220a:	46c0      	nop			@ (mov r8, r8)
 801220c:	40021000 	.word	0x40021000
 8012210:	08020a08 	.word	0x08020a08

08012214 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8012214:	b580      	push	{r7, lr}
 8012216:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2) >> RCC_CFGR_PPRE2_Pos]);
 8012218:	f7ff ffdc 	bl	80121d4 <HAL_RCC_GetHCLKFreq>
 801221c:	0001      	movs	r1, r0
 801221e:	4b06      	ldr	r3, [pc, #24]	@ (8012238 <HAL_RCC_GetPCLK2Freq+0x24>)
 8012220:	68db      	ldr	r3, [r3, #12]
 8012222:	0adb      	lsrs	r3, r3, #11
 8012224:	2207      	movs	r2, #7
 8012226:	4013      	ands	r3, r2
 8012228:	4a04      	ldr	r2, [pc, #16]	@ (801223c <HAL_RCC_GetPCLK2Freq+0x28>)
 801222a:	5cd3      	ldrb	r3, [r2, r3]
 801222c:	40d9      	lsrs	r1, r3
 801222e:	000b      	movs	r3, r1
}
 8012230:	0018      	movs	r0, r3
 8012232:	46bd      	mov	sp, r7
 8012234:	bd80      	pop	{r7, pc}
 8012236:	46c0      	nop			@ (mov r8, r8)
 8012238:	40021000 	.word	0x40021000
 801223c:	08020a08 	.word	0x08020a08

08012240 <HAL_RCCEx_PeriphCLKConfig>:
  * @retval HAL status
  * @note   If HAL_ERROR returned, first switch-OFF HSE clock oscillator with @ref HAL_RCC_OscConfig()
  *         to possibly update HSE divider.
  */
HAL_StatusTypeDef HAL_RCCEx_PeriphCLKConfig(RCC_PeriphCLKInitTypeDef  *PeriphClkInit)
{
 8012240:	b580      	push	{r7, lr}
 8012242:	b086      	sub	sp, #24
 8012244:	af00      	add	r7, sp, #0
 8012246:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;
  uint32_t temp_reg;
  FlagStatus       pwrclkchanged = RESET;
 8012248:	2017      	movs	r0, #23
 801224a:	183b      	adds	r3, r7, r0
 801224c:	2200      	movs	r2, #0
 801224e:	701a      	strb	r2, [r3, #0]

  /* Check the parameters */
  assert_param(IS_RCC_PERIPHCLOCK(PeriphClkInit->PeriphClockSelection));

  /*------------------------------- RTC/LCD Configuration ------------------------*/
  if ((((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 8012250:	687b      	ldr	r3, [r7, #4]
 8012252:	681b      	ldr	r3, [r3, #0]
 8012254:	2220      	movs	r2, #32
 8012256:	4013      	ands	r3, r2
 8012258:	d100      	bne.n	801225c <HAL_RCCEx_PeriphCLKConfig+0x1c>
 801225a:	e0c7      	b.n	80123ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>
#endif /* LCD */

    /* As soon as function is called to change RTC clock source, activation of the
       power domain is done. */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 801225c:	4b9b      	ldr	r3, [pc, #620]	@ (80124cc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801225e:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8012260:	2380      	movs	r3, #128	@ 0x80
 8012262:	055b      	lsls	r3, r3, #21
 8012264:	4013      	ands	r3, r2
 8012266:	d109      	bne.n	801227c <HAL_RCCEx_PeriphCLKConfig+0x3c>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8012268:	4b98      	ldr	r3, [pc, #608]	@ (80124cc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801226a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801226c:	4b97      	ldr	r3, [pc, #604]	@ (80124cc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801226e:	2180      	movs	r1, #128	@ 0x80
 8012270:	0549      	lsls	r1, r1, #21
 8012272:	430a      	orrs	r2, r1
 8012274:	639a      	str	r2, [r3, #56]	@ 0x38
      pwrclkchanged = SET;
 8012276:	183b      	adds	r3, r7, r0
 8012278:	2201      	movs	r2, #1
 801227a:	701a      	strb	r2, [r3, #0]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801227c:	4b94      	ldr	r3, [pc, #592]	@ (80124d0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801227e:	681a      	ldr	r2, [r3, #0]
 8012280:	2380      	movs	r3, #128	@ 0x80
 8012282:	005b      	lsls	r3, r3, #1
 8012284:	4013      	ands	r3, r2
 8012286:	d11a      	bne.n	80122be <HAL_RCCEx_PeriphCLKConfig+0x7e>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8012288:	4b91      	ldr	r3, [pc, #580]	@ (80124d0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801228a:	681a      	ldr	r2, [r3, #0]
 801228c:	4b90      	ldr	r3, [pc, #576]	@ (80124d0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 801228e:	2180      	movs	r1, #128	@ 0x80
 8012290:	0049      	lsls	r1, r1, #1
 8012292:	430a      	orrs	r2, r1
 8012294:	601a      	str	r2, [r3, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8012296:	f7f9 fddd 	bl	800be54 <HAL_GetTick>
 801229a:	0003      	movs	r3, r0
 801229c:	613b      	str	r3, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 801229e:	e008      	b.n	80122b2 <HAL_RCCEx_PeriphCLKConfig+0x72>
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 80122a0:	f7f9 fdd8 	bl	800be54 <HAL_GetTick>
 80122a4:	0002      	movs	r2, r0
 80122a6:	693b      	ldr	r3, [r7, #16]
 80122a8:	1ad3      	subs	r3, r2, r3
 80122aa:	2b64      	cmp	r3, #100	@ 0x64
 80122ac:	d901      	bls.n	80122b2 <HAL_RCCEx_PeriphCLKConfig+0x72>
        {
          return HAL_TIMEOUT;
 80122ae:	2303      	movs	r3, #3
 80122b0:	e107      	b.n	80124c2 <HAL_RCCEx_PeriphCLKConfig+0x282>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80122b2:	4b87      	ldr	r3, [pc, #540]	@ (80124d0 <HAL_RCCEx_PeriphCLKConfig+0x290>)
 80122b4:	681a      	ldr	r2, [r3, #0]
 80122b6:	2380      	movs	r3, #128	@ 0x80
 80122b8:	005b      	lsls	r3, r3, #1
 80122ba:	4013      	ands	r3, r2
 80122bc:	d0f0      	beq.n	80122a0 <HAL_RCCEx_PeriphCLKConfig+0x60>
        }
      }
    }

    /* Check if user wants to change HSE RTC prescaler whereas HSE is enabled */
    temp_reg = (RCC->CR & RCC_CR_RTCPRE);
 80122be:	4b83      	ldr	r3, [pc, #524]	@ (80124cc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80122c0:	681a      	ldr	r2, [r3, #0]
 80122c2:	23c0      	movs	r3, #192	@ 0xc0
 80122c4:	039b      	lsls	r3, r3, #14
 80122c6:	4013      	ands	r3, r2
 80122c8:	60fb      	str	r3, [r7, #12]
    if ((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CR_RTCPRE))
 80122ca:	687b      	ldr	r3, [r7, #4]
 80122cc:	685a      	ldr	r2, [r3, #4]
 80122ce:	23c0      	movs	r3, #192	@ 0xc0
 80122d0:	039b      	lsls	r3, r3, #14
 80122d2:	4013      	ands	r3, r2
 80122d4:	68fa      	ldr	r2, [r7, #12]
 80122d6:	429a      	cmp	r2, r3
 80122d8:	d013      	beq.n	8012302 <HAL_RCCEx_PeriphCLKConfig+0xc2>
#if defined (LCD)
     || (temp_reg != (PeriphClkInit->LCDClockSelection & RCC_CR_RTCPRE))
#endif /* LCD */
       )
    { /* Check HSE State */
      if ((PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL) == RCC_CSR_RTCSEL_HSE)
 80122da:	687b      	ldr	r3, [r7, #4]
 80122dc:	685a      	ldr	r2, [r3, #4]
 80122de:	23c0      	movs	r3, #192	@ 0xc0
 80122e0:	029b      	lsls	r3, r3, #10
 80122e2:	401a      	ands	r2, r3
 80122e4:	23c0      	movs	r3, #192	@ 0xc0
 80122e6:	029b      	lsls	r3, r3, #10
 80122e8:	429a      	cmp	r2, r3
 80122ea:	d10a      	bne.n	8012302 <HAL_RCCEx_PeriphCLKConfig+0xc2>
      {
        if (HAL_IS_BIT_SET(RCC->CR, RCC_CR_HSERDY))
 80122ec:	4b77      	ldr	r3, [pc, #476]	@ (80124cc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80122ee:	681a      	ldr	r2, [r3, #0]
 80122f0:	2380      	movs	r3, #128	@ 0x80
 80122f2:	029b      	lsls	r3, r3, #10
 80122f4:	401a      	ands	r2, r3
 80122f6:	2380      	movs	r3, #128	@ 0x80
 80122f8:	029b      	lsls	r3, r3, #10
 80122fa:	429a      	cmp	r2, r3
 80122fc:	d101      	bne.n	8012302 <HAL_RCCEx_PeriphCLKConfig+0xc2>
        {
          /* To update HSE divider, first switch-OFF HSE clock oscillator*/
          return HAL_ERROR;
 80122fe:	2301      	movs	r3, #1
 8012300:	e0df      	b.n	80124c2 <HAL_RCCEx_PeriphCLKConfig+0x282>
        }
      }
    }

    /* Reset the Backup domain only if the RTC Clock source selection is modified from reset value */
    temp_reg = (RCC->CSR & RCC_CSR_RTCSEL);
 8012302:	4b72      	ldr	r3, [pc, #456]	@ (80124cc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8012304:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8012306:	23c0      	movs	r3, #192	@ 0xc0
 8012308:	029b      	lsls	r3, r3, #10
 801230a:	4013      	ands	r3, r2
 801230c:	60fb      	str	r3, [r7, #12]

    if((temp_reg != 0x00000000U) && (((temp_reg != (PeriphClkInit->RTCClockSelection & RCC_CSR_RTCSEL)) \
 801230e:	68fb      	ldr	r3, [r7, #12]
 8012310:	2b00      	cmp	r3, #0
 8012312:	d03b      	beq.n	801238c <HAL_RCCEx_PeriphCLKConfig+0x14c>
 8012314:	687b      	ldr	r3, [r7, #4]
 8012316:	685a      	ldr	r2, [r3, #4]
 8012318:	23c0      	movs	r3, #192	@ 0xc0
 801231a:	029b      	lsls	r3, r3, #10
 801231c:	4013      	ands	r3, r2
 801231e:	68fa      	ldr	r2, [r7, #12]
 8012320:	429a      	cmp	r2, r3
 8012322:	d033      	beq.n	801238c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC))
 8012324:	687b      	ldr	r3, [r7, #4]
 8012326:	681b      	ldr	r3, [r3, #0]
 8012328:	2220      	movs	r2, #32
 801232a:	4013      	ands	r3, r2
 801232c:	d02e      	beq.n	801238c <HAL_RCCEx_PeriphCLKConfig+0x14c>
       && (((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LCD) == RCC_PERIPHCLK_LCD))
#endif /* LCD */
     ))
    {
      /* Store the content of CSR register before the reset of Backup Domain */
      temp_reg = (RCC->CSR & ~(RCC_CSR_RTCSEL));
 801232e:	4b67      	ldr	r3, [pc, #412]	@ (80124cc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8012330:	6d1b      	ldr	r3, [r3, #80]	@ 0x50
 8012332:	4a68      	ldr	r2, [pc, #416]	@ (80124d4 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8012334:	4013      	ands	r3, r2
 8012336:	60fb      	str	r3, [r7, #12]

      /* RTC Clock selection can be changed only if the Backup Domain is reset */
      __HAL_RCC_BACKUPRESET_FORCE();
 8012338:	4b64      	ldr	r3, [pc, #400]	@ (80124cc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801233a:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801233c:	4b63      	ldr	r3, [pc, #396]	@ (80124cc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801233e:	2180      	movs	r1, #128	@ 0x80
 8012340:	0309      	lsls	r1, r1, #12
 8012342:	430a      	orrs	r2, r1
 8012344:	651a      	str	r2, [r3, #80]	@ 0x50
      __HAL_RCC_BACKUPRESET_RELEASE();
 8012346:	4b61      	ldr	r3, [pc, #388]	@ (80124cc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8012348:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 801234a:	4b60      	ldr	r3, [pc, #384]	@ (80124cc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801234c:	4962      	ldr	r1, [pc, #392]	@ (80124d8 <HAL_RCCEx_PeriphCLKConfig+0x298>)
 801234e:	400a      	ands	r2, r1
 8012350:	651a      	str	r2, [r3, #80]	@ 0x50

      /* Restore the Content of CSR register */
      RCC->CSR = temp_reg;
 8012352:	4b5e      	ldr	r3, [pc, #376]	@ (80124cc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8012354:	68fa      	ldr	r2, [r7, #12]
 8012356:	651a      	str	r2, [r3, #80]	@ 0x50

       /* Wait for LSERDY if LSE was enabled */
      if (HAL_IS_BIT_SET(temp_reg, RCC_CSR_LSEON))
 8012358:	68fa      	ldr	r2, [r7, #12]
 801235a:	2380      	movs	r3, #128	@ 0x80
 801235c:	005b      	lsls	r3, r3, #1
 801235e:	4013      	ands	r3, r2
 8012360:	d014      	beq.n	801238c <HAL_RCCEx_PeriphCLKConfig+0x14c>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8012362:	f7f9 fd77 	bl	800be54 <HAL_GetTick>
 8012366:	0003      	movs	r3, r0
 8012368:	613b      	str	r3, [r7, #16]

        /* Wait till LSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 801236a:	e009      	b.n	8012380 <HAL_RCCEx_PeriphCLKConfig+0x140>
        {
          if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 801236c:	f7f9 fd72 	bl	800be54 <HAL_GetTick>
 8012370:	0002      	movs	r2, r0
 8012372:	693b      	ldr	r3, [r7, #16]
 8012374:	1ad3      	subs	r3, r2, r3
 8012376:	4a59      	ldr	r2, [pc, #356]	@ (80124dc <HAL_RCCEx_PeriphCLKConfig+0x29c>)
 8012378:	4293      	cmp	r3, r2
 801237a:	d901      	bls.n	8012380 <HAL_RCCEx_PeriphCLKConfig+0x140>
          {
            return HAL_TIMEOUT;
 801237c:	2303      	movs	r3, #3
 801237e:	e0a0      	b.n	80124c2 <HAL_RCCEx_PeriphCLKConfig+0x282>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == 0U)
 8012380:	4b52      	ldr	r3, [pc, #328]	@ (80124cc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8012382:	6d1a      	ldr	r2, [r3, #80]	@ 0x50
 8012384:	2380      	movs	r3, #128	@ 0x80
 8012386:	009b      	lsls	r3, r3, #2
 8012388:	4013      	ands	r3, r2
 801238a:	d0ef      	beq.n	801236c <HAL_RCCEx_PeriphCLKConfig+0x12c>
    {
      __HAL_RCC_LCD_CONFIG(PeriphClkInit->LCDClockSelection);
    } 
#endif /* LCD */

    if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_RTC) == RCC_PERIPHCLK_RTC)
 801238c:	687b      	ldr	r3, [r7, #4]
 801238e:	681b      	ldr	r3, [r3, #0]
 8012390:	2220      	movs	r2, #32
 8012392:	4013      	ands	r3, r2
 8012394:	d01f      	beq.n	80123d6 <HAL_RCCEx_PeriphCLKConfig+0x196>
    {
      __HAL_RCC_RTC_CONFIG(PeriphClkInit->RTCClockSelection);
 8012396:	687b      	ldr	r3, [r7, #4]
 8012398:	685a      	ldr	r2, [r3, #4]
 801239a:	23c0      	movs	r3, #192	@ 0xc0
 801239c:	029b      	lsls	r3, r3, #10
 801239e:	401a      	ands	r2, r3
 80123a0:	23c0      	movs	r3, #192	@ 0xc0
 80123a2:	029b      	lsls	r3, r3, #10
 80123a4:	429a      	cmp	r2, r3
 80123a6:	d10c      	bne.n	80123c2 <HAL_RCCEx_PeriphCLKConfig+0x182>
 80123a8:	4b48      	ldr	r3, [pc, #288]	@ (80124cc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80123aa:	681b      	ldr	r3, [r3, #0]
 80123ac:	4a4c      	ldr	r2, [pc, #304]	@ (80124e0 <HAL_RCCEx_PeriphCLKConfig+0x2a0>)
 80123ae:	4013      	ands	r3, r2
 80123b0:	0019      	movs	r1, r3
 80123b2:	687b      	ldr	r3, [r7, #4]
 80123b4:	685a      	ldr	r2, [r3, #4]
 80123b6:	23c0      	movs	r3, #192	@ 0xc0
 80123b8:	039b      	lsls	r3, r3, #14
 80123ba:	401a      	ands	r2, r3
 80123bc:	4b43      	ldr	r3, [pc, #268]	@ (80124cc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80123be:	430a      	orrs	r2, r1
 80123c0:	601a      	str	r2, [r3, #0]
 80123c2:	4b42      	ldr	r3, [pc, #264]	@ (80124cc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80123c4:	6d19      	ldr	r1, [r3, #80]	@ 0x50
 80123c6:	687b      	ldr	r3, [r7, #4]
 80123c8:	685a      	ldr	r2, [r3, #4]
 80123ca:	23c0      	movs	r3, #192	@ 0xc0
 80123cc:	029b      	lsls	r3, r3, #10
 80123ce:	401a      	ands	r2, r3
 80123d0:	4b3e      	ldr	r3, [pc, #248]	@ (80124cc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80123d2:	430a      	orrs	r2, r1
 80123d4:	651a      	str	r2, [r3, #80]	@ 0x50
    }

    /* Require to disable power clock if necessary */
    if(pwrclkchanged == SET)
 80123d6:	2317      	movs	r3, #23
 80123d8:	18fb      	adds	r3, r7, r3
 80123da:	781b      	ldrb	r3, [r3, #0]
 80123dc:	2b01      	cmp	r3, #1
 80123de:	d105      	bne.n	80123ec <HAL_RCCEx_PeriphCLKConfig+0x1ac>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80123e0:	4b3a      	ldr	r3, [pc, #232]	@ (80124cc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80123e2:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80123e4:	4b39      	ldr	r3, [pc, #228]	@ (80124cc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80123e6:	493f      	ldr	r1, [pc, #252]	@ (80124e4 <HAL_RCCEx_PeriphCLKConfig+0x2a4>)
 80123e8:	400a      	ands	r2, r1
 80123ea:	639a      	str	r2, [r3, #56]	@ 0x38
    }
  }

#if defined (RCC_CCIPR_USART1SEL)
  /*------------------------------- USART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART1) == RCC_PERIPHCLK_USART1)
 80123ec:	687b      	ldr	r3, [r7, #4]
 80123ee:	681b      	ldr	r3, [r3, #0]
 80123f0:	2201      	movs	r2, #1
 80123f2:	4013      	ands	r3, r2
 80123f4:	d009      	beq.n	801240a <HAL_RCCEx_PeriphCLKConfig+0x1ca>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART1CLKSOURCE(PeriphClkInit->Usart1ClockSelection));

    /* Configure the USART1 clock source */
    __HAL_RCC_USART1_CONFIG(PeriphClkInit->Usart1ClockSelection);
 80123f6:	4b35      	ldr	r3, [pc, #212]	@ (80124cc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80123f8:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80123fa:	2203      	movs	r2, #3
 80123fc:	4393      	bics	r3, r2
 80123fe:	0019      	movs	r1, r3
 8012400:	687b      	ldr	r3, [r7, #4]
 8012402:	689a      	ldr	r2, [r3, #8]
 8012404:	4b31      	ldr	r3, [pc, #196]	@ (80124cc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8012406:	430a      	orrs	r2, r1
 8012408:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_USART1SEL */

  /*----------------------------- USART2 Configuration --------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USART2) == RCC_PERIPHCLK_USART2)
 801240a:	687b      	ldr	r3, [r7, #4]
 801240c:	681b      	ldr	r3, [r3, #0]
 801240e:	2202      	movs	r2, #2
 8012410:	4013      	ands	r3, r2
 8012412:	d009      	beq.n	8012428 <HAL_RCCEx_PeriphCLKConfig+0x1e8>
  {
    /* Check the parameters */
    assert_param(IS_RCC_USART2CLKSOURCE(PeriphClkInit->Usart2ClockSelection));

    /* Configure the USART2 clock source */
    __HAL_RCC_USART2_CONFIG(PeriphClkInit->Usart2ClockSelection);
 8012414:	4b2d      	ldr	r3, [pc, #180]	@ (80124cc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8012416:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012418:	220c      	movs	r2, #12
 801241a:	4393      	bics	r3, r2
 801241c:	0019      	movs	r1, r3
 801241e:	687b      	ldr	r3, [r7, #4]
 8012420:	68da      	ldr	r2, [r3, #12]
 8012422:	4b2a      	ldr	r3, [pc, #168]	@ (80124cc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8012424:	430a      	orrs	r2, r1
 8012426:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ LPUART1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPUART1) == RCC_PERIPHCLK_LPUART1)
 8012428:	687b      	ldr	r3, [r7, #4]
 801242a:	681b      	ldr	r3, [r3, #0]
 801242c:	2204      	movs	r2, #4
 801242e:	4013      	ands	r3, r2
 8012430:	d009      	beq.n	8012446 <HAL_RCCEx_PeriphCLKConfig+0x206>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LPUART1CLKSOURCE(PeriphClkInit->Lpuart1ClockSelection));

    /* Configure the LPUAR1 clock source */
    __HAL_RCC_LPUART1_CONFIG(PeriphClkInit->Lpuart1ClockSelection);
 8012432:	4b26      	ldr	r3, [pc, #152]	@ (80124cc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8012434:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012436:	4a2c      	ldr	r2, [pc, #176]	@ (80124e8 <HAL_RCCEx_PeriphCLKConfig+0x2a8>)
 8012438:	4013      	ands	r3, r2
 801243a:	0019      	movs	r1, r3
 801243c:	687b      	ldr	r3, [r7, #4]
 801243e:	691a      	ldr	r2, [r3, #16]
 8012440:	4b22      	ldr	r3, [pc, #136]	@ (80124cc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8012442:	430a      	orrs	r2, r1
 8012444:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  /*------------------------------ I2C1 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C1) == RCC_PERIPHCLK_I2C1)
 8012446:	687b      	ldr	r3, [r7, #4]
 8012448:	681b      	ldr	r3, [r3, #0]
 801244a:	2208      	movs	r2, #8
 801244c:	4013      	ands	r3, r2
 801244e:	d009      	beq.n	8012464 <HAL_RCCEx_PeriphCLKConfig+0x224>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C1CLKSOURCE(PeriphClkInit->I2c1ClockSelection));

    /* Configure the I2C1 clock source */
    __HAL_RCC_I2C1_CONFIG(PeriphClkInit->I2c1ClockSelection);
 8012450:	4b1e      	ldr	r3, [pc, #120]	@ (80124cc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8012452:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012454:	4a25      	ldr	r2, [pc, #148]	@ (80124ec <HAL_RCCEx_PeriphCLKConfig+0x2ac>)
 8012456:	4013      	ands	r3, r2
 8012458:	0019      	movs	r1, r3
 801245a:	687b      	ldr	r3, [r7, #4]
 801245c:	695a      	ldr	r2, [r3, #20]
 801245e:	4b1b      	ldr	r3, [pc, #108]	@ (80124cc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8012460:	430a      	orrs	r2, r1
 8012462:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

#if defined (RCC_CCIPR_I2C3SEL)
    /*------------------------------ I2C3 Configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_I2C3) == RCC_PERIPHCLK_I2C3)
 8012464:	687b      	ldr	r3, [r7, #4]
 8012466:	681a      	ldr	r2, [r3, #0]
 8012468:	2380      	movs	r3, #128	@ 0x80
 801246a:	005b      	lsls	r3, r3, #1
 801246c:	4013      	ands	r3, r2
 801246e:	d009      	beq.n	8012484 <HAL_RCCEx_PeriphCLKConfig+0x244>
  {
    /* Check the parameters */
    assert_param(IS_RCC_I2C3CLKSOURCE(PeriphClkInit->I2c3ClockSelection));

    /* Configure the I2C3 clock source */
    __HAL_RCC_I2C3_CONFIG(PeriphClkInit->I2c3ClockSelection);
 8012470:	4b16      	ldr	r3, [pc, #88]	@ (80124cc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8012472:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012474:	4a17      	ldr	r2, [pc, #92]	@ (80124d4 <HAL_RCCEx_PeriphCLKConfig+0x294>)
 8012476:	4013      	ands	r3, r2
 8012478:	0019      	movs	r1, r3
 801247a:	687b      	ldr	r3, [r7, #4]
 801247c:	699a      	ldr	r2, [r3, #24]
 801247e:	4b13      	ldr	r3, [pc, #76]	@ (80124cc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8012480:	430a      	orrs	r2, r1
 8012482:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* RCC_CCIPR_I2C3SEL */

#if defined(USB)
 /*---------------------------- USB and RNG configuration --------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_USB) == (RCC_PERIPHCLK_USB))
 8012484:	687b      	ldr	r3, [r7, #4]
 8012486:	681b      	ldr	r3, [r3, #0]
 8012488:	2240      	movs	r2, #64	@ 0x40
 801248a:	4013      	ands	r3, r2
 801248c:	d009      	beq.n	80124a2 <HAL_RCCEx_PeriphCLKConfig+0x262>
  {
    assert_param(IS_RCC_USBCLKSOURCE(PeriphClkInit->UsbClockSelection));
    __HAL_RCC_USB_CONFIG(PeriphClkInit->UsbClockSelection);
 801248e:	4b0f      	ldr	r3, [pc, #60]	@ (80124cc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 8012490:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8012492:	4a17      	ldr	r2, [pc, #92]	@ (80124f0 <HAL_RCCEx_PeriphCLKConfig+0x2b0>)
 8012494:	4013      	ands	r3, r2
 8012496:	0019      	movs	r1, r3
 8012498:	687b      	ldr	r3, [r7, #4]
 801249a:	6a1a      	ldr	r2, [r3, #32]
 801249c:	4b0b      	ldr	r3, [pc, #44]	@ (80124cc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 801249e:	430a      	orrs	r2, r1
 80124a0:	64da      	str	r2, [r3, #76]	@ 0x4c
  }
#endif /* USB */

  /*---------------------------- LPTIM1 configuration ------------------------*/
  if(((PeriphClkInit->PeriphClockSelection) & RCC_PERIPHCLK_LPTIM1) == (RCC_PERIPHCLK_LPTIM1))
 80124a2:	687b      	ldr	r3, [r7, #4]
 80124a4:	681b      	ldr	r3, [r3, #0]
 80124a6:	2280      	movs	r2, #128	@ 0x80
 80124a8:	4013      	ands	r3, r2
 80124aa:	d009      	beq.n	80124c0 <HAL_RCCEx_PeriphCLKConfig+0x280>
  {
    assert_param(IS_RCC_LPTIMCLK(PeriphClkInit->LptimClockSelection));
    __HAL_RCC_LPTIM1_CONFIG(PeriphClkInit->LptimClockSelection);
 80124ac:	4b07      	ldr	r3, [pc, #28]	@ (80124cc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80124ae:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80124b0:	4a10      	ldr	r2, [pc, #64]	@ (80124f4 <HAL_RCCEx_PeriphCLKConfig+0x2b4>)
 80124b2:	4013      	ands	r3, r2
 80124b4:	0019      	movs	r1, r3
 80124b6:	687b      	ldr	r3, [r7, #4]
 80124b8:	69da      	ldr	r2, [r3, #28]
 80124ba:	4b04      	ldr	r3, [pc, #16]	@ (80124cc <HAL_RCCEx_PeriphCLKConfig+0x28c>)
 80124bc:	430a      	orrs	r2, r1
 80124be:	64da      	str	r2, [r3, #76]	@ 0x4c
  }

  return HAL_OK;
 80124c0:	2300      	movs	r3, #0
}
 80124c2:	0018      	movs	r0, r3
 80124c4:	46bd      	mov	sp, r7
 80124c6:	b006      	add	sp, #24
 80124c8:	bd80      	pop	{r7, pc}
 80124ca:	46c0      	nop			@ (mov r8, r8)
 80124cc:	40021000 	.word	0x40021000
 80124d0:	40007000 	.word	0x40007000
 80124d4:	fffcffff 	.word	0xfffcffff
 80124d8:	fff7ffff 	.word	0xfff7ffff
 80124dc:	00001388 	.word	0x00001388
 80124e0:	ffcfffff 	.word	0xffcfffff
 80124e4:	efffffff 	.word	0xefffffff
 80124e8:	fffff3ff 	.word	0xfffff3ff
 80124ec:	ffffcfff 	.word	0xffffcfff
 80124f0:	fbffffff 	.word	0xfbffffff
 80124f4:	fff3ffff 	.word	0xfff3ffff

080124f8 <HAL_RTC_Init>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_Init(RTC_HandleTypeDef *hrtc)
{
 80124f8:	b5b0      	push	{r4, r5, r7, lr}
 80124fa:	b084      	sub	sp, #16
 80124fc:	af00      	add	r7, sp, #0
 80124fe:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_ERROR;
 8012500:	230f      	movs	r3, #15
 8012502:	18fb      	adds	r3, r7, r3
 8012504:	2201      	movs	r2, #1
 8012506:	701a      	strb	r2, [r3, #0]

  /* Check RTC handler validity */
  if (hrtc == NULL)
 8012508:	687b      	ldr	r3, [r7, #4]
 801250a:	2b00      	cmp	r3, #0
 801250c:	d101      	bne.n	8012512 <HAL_RTC_Init+0x1a>
  {
    return HAL_ERROR;
 801250e:	2301      	movs	r3, #1
 8012510:	e088      	b.n	8012624 <HAL_RTC_Init+0x12c>
    {
      hrtc->MspDeInitCallback = HAL_RTC_MspDeInit;
    }
  }
#else /* USE_HAL_RTC_REGISTER_CALLBACKS */
  if (hrtc->State == HAL_RTC_STATE_RESET)
 8012512:	687b      	ldr	r3, [r7, #4]
 8012514:	2221      	movs	r2, #33	@ 0x21
 8012516:	5c9b      	ldrb	r3, [r3, r2]
 8012518:	b2db      	uxtb	r3, r3
 801251a:	2b00      	cmp	r3, #0
 801251c:	d107      	bne.n	801252e <HAL_RTC_Init+0x36>
  {
    /* Allocate lock resource and initialize it */
    hrtc->Lock = HAL_UNLOCKED;
 801251e:	687b      	ldr	r3, [r7, #4]
 8012520:	2220      	movs	r2, #32
 8012522:	2100      	movs	r1, #0
 8012524:	5499      	strb	r1, [r3, r2]

    /* Initialize RTC MSP */
    HAL_RTC_MspInit(hrtc);
 8012526:	687b      	ldr	r3, [r7, #4]
 8012528:	0018      	movs	r0, r3
 801252a:	f7f5 fda1 	bl	8008070 <HAL_RTC_MspInit>
  }
#endif /* USE_HAL_RTC_REGISTER_CALLBACKS */

  /* Set RTC state */
  hrtc->State = HAL_RTC_STATE_BUSY;
 801252e:	687b      	ldr	r3, [r7, #4]
 8012530:	2221      	movs	r2, #33	@ 0x21
 8012532:	2102      	movs	r1, #2
 8012534:	5499      	strb	r1, [r3, r2]

  /* Check whether the calendar needs to be initialized */
  if (__HAL_RTC_IS_CALENDAR_INITIALIZED(hrtc) == 0U)
 8012536:	687b      	ldr	r3, [r7, #4]
 8012538:	681b      	ldr	r3, [r3, #0]
 801253a:	68db      	ldr	r3, [r3, #12]
 801253c:	2210      	movs	r2, #16
 801253e:	4013      	ands	r3, r2
 8012540:	2b10      	cmp	r3, #16
 8012542:	d05f      	beq.n	8012604 <HAL_RTC_Init+0x10c>
  {
    /* Disable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8012544:	687b      	ldr	r3, [r7, #4]
 8012546:	681b      	ldr	r3, [r3, #0]
 8012548:	22ca      	movs	r2, #202	@ 0xca
 801254a:	625a      	str	r2, [r3, #36]	@ 0x24
 801254c:	687b      	ldr	r3, [r7, #4]
 801254e:	681b      	ldr	r3, [r3, #0]
 8012550:	2253      	movs	r2, #83	@ 0x53
 8012552:	625a      	str	r2, [r3, #36]	@ 0x24

    /* Enter Initialization mode */
    status = RTC_EnterInitMode(hrtc);
 8012554:	250f      	movs	r5, #15
 8012556:	197c      	adds	r4, r7, r5
 8012558:	687b      	ldr	r3, [r7, #4]
 801255a:	0018      	movs	r0, r3
 801255c:	f000 fa7c 	bl	8012a58 <RTC_EnterInitMode>
 8012560:	0003      	movs	r3, r0
 8012562:	7023      	strb	r3, [r4, #0]

    if (status == HAL_OK)
 8012564:	0028      	movs	r0, r5
 8012566:	183b      	adds	r3, r7, r0
 8012568:	781b      	ldrb	r3, [r3, #0]
 801256a:	2b00      	cmp	r3, #0
 801256c:	d12c      	bne.n	80125c8 <HAL_RTC_Init+0xd0>
    {
      /* Clear RTC_CR FMT, OSEL and POL Bits */
      hrtc->Instance->CR &= ((uint32_t)~(RTC_CR_FMT | RTC_CR_OSEL | RTC_CR_POL));
 801256e:	687b      	ldr	r3, [r7, #4]
 8012570:	681b      	ldr	r3, [r3, #0]
 8012572:	689a      	ldr	r2, [r3, #8]
 8012574:	687b      	ldr	r3, [r7, #4]
 8012576:	681b      	ldr	r3, [r3, #0]
 8012578:	492c      	ldr	r1, [pc, #176]	@ (801262c <HAL_RTC_Init+0x134>)
 801257a:	400a      	ands	r2, r1
 801257c:	609a      	str	r2, [r3, #8]
      /* Set RTC_CR register */
      hrtc->Instance->CR |= (uint32_t)(hrtc->Init.HourFormat | hrtc->Init.OutPut | hrtc->Init.OutPutPolarity);
 801257e:	687b      	ldr	r3, [r7, #4]
 8012580:	681b      	ldr	r3, [r3, #0]
 8012582:	6899      	ldr	r1, [r3, #8]
 8012584:	687b      	ldr	r3, [r7, #4]
 8012586:	685a      	ldr	r2, [r3, #4]
 8012588:	687b      	ldr	r3, [r7, #4]
 801258a:	691b      	ldr	r3, [r3, #16]
 801258c:	431a      	orrs	r2, r3
 801258e:	687b      	ldr	r3, [r7, #4]
 8012590:	699b      	ldr	r3, [r3, #24]
 8012592:	431a      	orrs	r2, r3
 8012594:	687b      	ldr	r3, [r7, #4]
 8012596:	681b      	ldr	r3, [r3, #0]
 8012598:	430a      	orrs	r2, r1
 801259a:	609a      	str	r2, [r3, #8]

      /* Configure the RTC PRER */
      hrtc->Instance->PRER = (uint32_t)(hrtc->Init.SynchPrediv);
 801259c:	687b      	ldr	r3, [r7, #4]
 801259e:	681b      	ldr	r3, [r3, #0]
 80125a0:	687a      	ldr	r2, [r7, #4]
 80125a2:	68d2      	ldr	r2, [r2, #12]
 80125a4:	611a      	str	r2, [r3, #16]
      hrtc->Instance->PRER |= (uint32_t)(hrtc->Init.AsynchPrediv << RTC_PRER_PREDIV_A_Pos);
 80125a6:	687b      	ldr	r3, [r7, #4]
 80125a8:	681b      	ldr	r3, [r3, #0]
 80125aa:	6919      	ldr	r1, [r3, #16]
 80125ac:	687b      	ldr	r3, [r7, #4]
 80125ae:	689b      	ldr	r3, [r3, #8]
 80125b0:	041a      	lsls	r2, r3, #16
 80125b2:	687b      	ldr	r3, [r7, #4]
 80125b4:	681b      	ldr	r3, [r3, #0]
 80125b6:	430a      	orrs	r2, r1
 80125b8:	611a      	str	r2, [r3, #16]

      /* Exit Initialization mode */
      status = RTC_ExitInitMode(hrtc);
 80125ba:	183c      	adds	r4, r7, r0
 80125bc:	687b      	ldr	r3, [r7, #4]
 80125be:	0018      	movs	r0, r3
 80125c0:	f000 fa8e 	bl	8012ae0 <RTC_ExitInitMode>
 80125c4:	0003      	movs	r3, r0
 80125c6:	7023      	strb	r3, [r4, #0]
    }

    if (status == HAL_OK)
 80125c8:	230f      	movs	r3, #15
 80125ca:	18fb      	adds	r3, r7, r3
 80125cc:	781b      	ldrb	r3, [r3, #0]
 80125ce:	2b00      	cmp	r3, #0
 80125d0:	d113      	bne.n	80125fa <HAL_RTC_Init+0x102>
    {
      hrtc->Instance->OR &= (uint32_t)~(RTC_OUTPUT_TYPE_PUSHPULL | RTC_OUTPUT_REMAP_POS1);
 80125d2:	687b      	ldr	r3, [r7, #4]
 80125d4:	681b      	ldr	r3, [r3, #0]
 80125d6:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80125d8:	687b      	ldr	r3, [r7, #4]
 80125da:	681b      	ldr	r3, [r3, #0]
 80125dc:	2103      	movs	r1, #3
 80125de:	438a      	bics	r2, r1
 80125e0:	64da      	str	r2, [r3, #76]	@ 0x4c
      hrtc->Instance->OR |= (uint32_t)(hrtc->Init.OutPutType | hrtc->Init.OutPutRemap);
 80125e2:	687b      	ldr	r3, [r7, #4]
 80125e4:	681b      	ldr	r3, [r3, #0]
 80125e6:	6cd9      	ldr	r1, [r3, #76]	@ 0x4c
 80125e8:	687b      	ldr	r3, [r7, #4]
 80125ea:	69da      	ldr	r2, [r3, #28]
 80125ec:	687b      	ldr	r3, [r7, #4]
 80125ee:	695b      	ldr	r3, [r3, #20]
 80125f0:	431a      	orrs	r2, r3
 80125f2:	687b      	ldr	r3, [r7, #4]
 80125f4:	681b      	ldr	r3, [r3, #0]
 80125f6:	430a      	orrs	r2, r1
 80125f8:	64da      	str	r2, [r3, #76]	@ 0x4c
    }

    /* Enable the write protection for RTC registers */
    __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 80125fa:	687b      	ldr	r3, [r7, #4]
 80125fc:	681b      	ldr	r3, [r3, #0]
 80125fe:	22ff      	movs	r2, #255	@ 0xff
 8012600:	625a      	str	r2, [r3, #36]	@ 0x24
 8012602:	e003      	b.n	801260c <HAL_RTC_Init+0x114>
  }
  else
  {
    /* The calendar is already initialized */
    status = HAL_OK;
 8012604:	230f      	movs	r3, #15
 8012606:	18fb      	adds	r3, r7, r3
 8012608:	2200      	movs	r2, #0
 801260a:	701a      	strb	r2, [r3, #0]
  }

  if (status == HAL_OK)
 801260c:	230f      	movs	r3, #15
 801260e:	18fb      	adds	r3, r7, r3
 8012610:	781b      	ldrb	r3, [r3, #0]
 8012612:	2b00      	cmp	r3, #0
 8012614:	d103      	bne.n	801261e <HAL_RTC_Init+0x126>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8012616:	687b      	ldr	r3, [r7, #4]
 8012618:	2221      	movs	r2, #33	@ 0x21
 801261a:	2101      	movs	r1, #1
 801261c:	5499      	strb	r1, [r3, r2]
  }

  return status;
 801261e:	230f      	movs	r3, #15
 8012620:	18fb      	adds	r3, r7, r3
 8012622:	781b      	ldrb	r3, [r3, #0]
}
 8012624:	0018      	movs	r0, r3
 8012626:	46bd      	mov	sp, r7
 8012628:	b004      	add	sp, #16
 801262a:	bdb0      	pop	{r4, r5, r7, pc}
 801262c:	ff8fffbf 	.word	0xff8fffbf

08012630 <HAL_RTC_SetTime>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8012630:	b5b0      	push	{r4, r5, r7, lr}
 8012632:	b086      	sub	sp, #24
 8012634:	af00      	add	r7, sp, #0
 8012636:	60f8      	str	r0, [r7, #12]
 8012638:	60b9      	str	r1, [r7, #8]
 801263a:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 801263c:	2300      	movs	r3, #0
 801263e:	617b      	str	r3, [r7, #20]
  assert_param(IS_RTC_FORMAT(Format));
  assert_param(IS_RTC_DAYLIGHT_SAVING(sTime->DayLightSaving));
  assert_param(IS_RTC_STORE_OPERATION(sTime->StoreOperation));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8012640:	68fb      	ldr	r3, [r7, #12]
 8012642:	2220      	movs	r2, #32
 8012644:	5c9b      	ldrb	r3, [r3, r2]
 8012646:	2b01      	cmp	r3, #1
 8012648:	d101      	bne.n	801264e <HAL_RTC_SetTime+0x1e>
 801264a:	2302      	movs	r3, #2
 801264c:	e092      	b.n	8012774 <HAL_RTC_SetTime+0x144>
 801264e:	68fb      	ldr	r3, [r7, #12]
 8012650:	2220      	movs	r2, #32
 8012652:	2101      	movs	r1, #1
 8012654:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8012656:	68fb      	ldr	r3, [r7, #12]
 8012658:	2221      	movs	r2, #33	@ 0x21
 801265a:	2102      	movs	r1, #2
 801265c:	5499      	strb	r1, [r3, r2]

  if (Format == RTC_FORMAT_BIN)
 801265e:	687b      	ldr	r3, [r7, #4]
 8012660:	2b00      	cmp	r3, #0
 8012662:	d125      	bne.n	80126b0 <HAL_RTC_SetTime+0x80>
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 8012664:	68fb      	ldr	r3, [r7, #12]
 8012666:	681b      	ldr	r3, [r3, #0]
 8012668:	689b      	ldr	r3, [r3, #8]
 801266a:	2240      	movs	r2, #64	@ 0x40
 801266c:	4013      	ands	r3, r2
 801266e:	d102      	bne.n	8012676 <HAL_RTC_SetTime+0x46>
      assert_param(IS_RTC_HOUR12(sTime->Hours));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 8012670:	68bb      	ldr	r3, [r7, #8]
 8012672:	2200      	movs	r2, #0
 8012674:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(sTime->Hours));
    }
    assert_param(IS_RTC_MINUTES(sTime->Minutes));
    assert_param(IS_RTC_SECONDS(sTime->Seconds));

    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8012676:	68bb      	ldr	r3, [r7, #8]
 8012678:	781b      	ldrb	r3, [r3, #0]
 801267a:	0018      	movs	r0, r3
 801267c:	f000 fa5a 	bl	8012b34 <RTC_ByteToBcd2>
 8012680:	0003      	movs	r3, r0
 8012682:	041c      	lsls	r4, r3, #16
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 8012684:	68bb      	ldr	r3, [r7, #8]
 8012686:	785b      	ldrb	r3, [r3, #1]
 8012688:	0018      	movs	r0, r3
 801268a:	f000 fa53 	bl	8012b34 <RTC_ByteToBcd2>
 801268e:	0003      	movs	r3, r0
 8012690:	021b      	lsls	r3, r3, #8
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 8012692:	431c      	orrs	r4, r3
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Seconds))                   | \
 8012694:	68bb      	ldr	r3, [r7, #8]
 8012696:	789b      	ldrb	r3, [r3, #2]
 8012698:	0018      	movs	r0, r3
 801269a:	f000 fa4b 	bl	8012b34 <RTC_ByteToBcd2>
 801269e:	0003      	movs	r3, r0
                        ( (uint32_t)RTC_ByteToBcd2(sTime->Minutes) << RTC_TR_MNU_Pos) | \
 80126a0:	0022      	movs	r2, r4
 80126a2:	431a      	orrs	r2, r3
                        (((uint32_t)sTime->TimeFormat)             << RTC_TR_PM_Pos));
 80126a4:	68bb      	ldr	r3, [r7, #8]
 80126a6:	78db      	ldrb	r3, [r3, #3]
 80126a8:	059b      	lsls	r3, r3, #22
    tmpreg = (uint32_t)(( (uint32_t)RTC_ByteToBcd2(sTime->Hours)   << RTC_TR_HU_Pos)  | \
 80126aa:	4313      	orrs	r3, r2
 80126ac:	617b      	str	r3, [r7, #20]
 80126ae:	e017      	b.n	80126e0 <HAL_RTC_SetTime+0xb0>
  }
  else
  {
    if ((hrtc->Instance->CR & RTC_CR_FMT) != 0U)
 80126b0:	68fb      	ldr	r3, [r7, #12]
 80126b2:	681b      	ldr	r3, [r3, #0]
 80126b4:	689b      	ldr	r3, [r3, #8]
 80126b6:	2240      	movs	r2, #64	@ 0x40
 80126b8:	4013      	ands	r3, r2
 80126ba:	d102      	bne.n	80126c2 <HAL_RTC_SetTime+0x92>
      assert_param(IS_RTC_HOUR12(RTC_Bcd2ToByte(sTime->Hours)));
      assert_param(IS_RTC_HOURFORMAT12(sTime->TimeFormat));
    }
    else
    {
      sTime->TimeFormat = 0x00U;
 80126bc:	68bb      	ldr	r3, [r7, #8]
 80126be:	2200      	movs	r2, #0
 80126c0:	70da      	strb	r2, [r3, #3]
      assert_param(IS_RTC_HOUR24(RTC_Bcd2ToByte(sTime->Hours)));
    }
    assert_param(IS_RTC_MINUTES(RTC_Bcd2ToByte(sTime->Minutes)));
    assert_param(IS_RTC_SECONDS(RTC_Bcd2ToByte(sTime->Seconds)));
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80126c2:	68bb      	ldr	r3, [r7, #8]
 80126c4:	781b      	ldrb	r3, [r3, #0]
 80126c6:	041a      	lsls	r2, r3, #16
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80126c8:	68bb      	ldr	r3, [r7, #8]
 80126ca:	785b      	ldrb	r3, [r3, #1]
 80126cc:	021b      	lsls	r3, r3, #8
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80126ce:	4313      	orrs	r3, r2
              ((uint32_t) sTime->Seconds)                       | \
 80126d0:	68ba      	ldr	r2, [r7, #8]
 80126d2:	7892      	ldrb	r2, [r2, #2]
              ((uint32_t)(sTime->Minutes)    << RTC_TR_MNU_Pos) | \
 80126d4:	431a      	orrs	r2, r3
              ((uint32_t)(sTime->TimeFormat) << RTC_TR_PM_Pos));
 80126d6:	68bb      	ldr	r3, [r7, #8]
 80126d8:	78db      	ldrb	r3, [r3, #3]
 80126da:	059b      	lsls	r3, r3, #22
    tmpreg = (((uint32_t)(sTime->Hours)      << RTC_TR_HU_Pos)  | \
 80126dc:	4313      	orrs	r3, r2
 80126de:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80126e0:	68fb      	ldr	r3, [r7, #12]
 80126e2:	681b      	ldr	r3, [r3, #0]
 80126e4:	22ca      	movs	r2, #202	@ 0xca
 80126e6:	625a      	str	r2, [r3, #36]	@ 0x24
 80126e8:	68fb      	ldr	r3, [r7, #12]
 80126ea:	681b      	ldr	r3, [r3, #0]
 80126ec:	2253      	movs	r2, #83	@ 0x53
 80126ee:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 80126f0:	2513      	movs	r5, #19
 80126f2:	197c      	adds	r4, r7, r5
 80126f4:	68fb      	ldr	r3, [r7, #12]
 80126f6:	0018      	movs	r0, r3
 80126f8:	f000 f9ae 	bl	8012a58 <RTC_EnterInitMode>
 80126fc:	0003      	movs	r3, r0
 80126fe:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8012700:	0028      	movs	r0, r5
 8012702:	183b      	adds	r3, r7, r0
 8012704:	781b      	ldrb	r3, [r3, #0]
 8012706:	2b00      	cmp	r3, #0
 8012708:	d120      	bne.n	801274c <HAL_RTC_SetTime+0x11c>
  {
    /* Set the RTC_TR register */
    hrtc->Instance->TR = (uint32_t)(tmpreg & RTC_TR_RESERVED_MASK);
 801270a:	68fb      	ldr	r3, [r7, #12]
 801270c:	681b      	ldr	r3, [r3, #0]
 801270e:	697a      	ldr	r2, [r7, #20]
 8012710:	491a      	ldr	r1, [pc, #104]	@ (801277c <HAL_RTC_SetTime+0x14c>)
 8012712:	400a      	ands	r2, r1
 8012714:	601a      	str	r2, [r3, #0]

    /* Clear the bits to be configured (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR &= (uint32_t)~RTC_CR_BKP;
 8012716:	68fb      	ldr	r3, [r7, #12]
 8012718:	681b      	ldr	r3, [r3, #0]
 801271a:	689a      	ldr	r2, [r3, #8]
 801271c:	68fb      	ldr	r3, [r7, #12]
 801271e:	681b      	ldr	r3, [r3, #0]
 8012720:	4917      	ldr	r1, [pc, #92]	@ (8012780 <HAL_RTC_SetTime+0x150>)
 8012722:	400a      	ands	r2, r1
 8012724:	609a      	str	r2, [r3, #8]

    /* Configure the RTC_CR register (Deprecated. Use HAL_RTC_DST_xxx functions instead) */
    hrtc->Instance->CR |= (uint32_t)(sTime->DayLightSaving | sTime->StoreOperation);
 8012726:	68fb      	ldr	r3, [r7, #12]
 8012728:	681b      	ldr	r3, [r3, #0]
 801272a:	6899      	ldr	r1, [r3, #8]
 801272c:	68bb      	ldr	r3, [r7, #8]
 801272e:	68da      	ldr	r2, [r3, #12]
 8012730:	68bb      	ldr	r3, [r7, #8]
 8012732:	691b      	ldr	r3, [r3, #16]
 8012734:	431a      	orrs	r2, r3
 8012736:	68fb      	ldr	r3, [r7, #12]
 8012738:	681b      	ldr	r3, [r3, #0]
 801273a:	430a      	orrs	r2, r1
 801273c:	609a      	str	r2, [r3, #8]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 801273e:	183c      	adds	r4, r7, r0
 8012740:	68fb      	ldr	r3, [r7, #12]
 8012742:	0018      	movs	r0, r3
 8012744:	f000 f9cc 	bl	8012ae0 <RTC_ExitInitMode>
 8012748:	0003      	movs	r3, r0
 801274a:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 801274c:	2313      	movs	r3, #19
 801274e:	18fb      	adds	r3, r7, r3
 8012750:	781b      	ldrb	r3, [r3, #0]
 8012752:	2b00      	cmp	r3, #0
 8012754:	d103      	bne.n	801275e <HAL_RTC_SetTime+0x12e>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 8012756:	68fb      	ldr	r3, [r7, #12]
 8012758:	2221      	movs	r2, #33	@ 0x21
 801275a:	2101      	movs	r1, #1
 801275c:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 801275e:	68fb      	ldr	r3, [r7, #12]
 8012760:	681b      	ldr	r3, [r3, #0]
 8012762:	22ff      	movs	r2, #255	@ 0xff
 8012764:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8012766:	68fb      	ldr	r3, [r7, #12]
 8012768:	2220      	movs	r2, #32
 801276a:	2100      	movs	r1, #0
 801276c:	5499      	strb	r1, [r3, r2]

  return status;
 801276e:	2313      	movs	r3, #19
 8012770:	18fb      	adds	r3, r7, r3
 8012772:	781b      	ldrb	r3, [r3, #0]
}
 8012774:	0018      	movs	r0, r3
 8012776:	46bd      	mov	sp, r7
 8012778:	b006      	add	sp, #24
 801277a:	bdb0      	pop	{r4, r5, r7, pc}
 801277c:	007f7f7f 	.word	0x007f7f7f
 8012780:	fffbffff 	.word	0xfffbffff

08012784 <HAL_RTC_GetTime>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetTime(RTC_HandleTypeDef *hrtc, RTC_TimeTypeDef *sTime, uint32_t Format)
{
 8012784:	b580      	push	{r7, lr}
 8012786:	b086      	sub	sp, #24
 8012788:	af00      	add	r7, sp, #0
 801278a:	60f8      	str	r0, [r7, #12]
 801278c:	60b9      	str	r1, [r7, #8]
 801278e:	607a      	str	r2, [r7, #4]
  uint32_t tmpreg = 0U;
 8012790:	2300      	movs	r3, #0
 8012792:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get subseconds value from the corresponding register */
  sTime->SubSeconds = (uint32_t)(hrtc->Instance->SSR);
 8012794:	68fb      	ldr	r3, [r7, #12]
 8012796:	681b      	ldr	r3, [r3, #0]
 8012798:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801279a:	68bb      	ldr	r3, [r7, #8]
 801279c:	605a      	str	r2, [r3, #4]

  /* Get SecondFraction structure field from the corresponding register field*/
  sTime->SecondFraction = (uint32_t)(hrtc->Instance->PRER & RTC_PRER_PREDIV_S);
 801279e:	68fb      	ldr	r3, [r7, #12]
 80127a0:	681b      	ldr	r3, [r3, #0]
 80127a2:	691b      	ldr	r3, [r3, #16]
 80127a4:	045b      	lsls	r3, r3, #17
 80127a6:	0c5a      	lsrs	r2, r3, #17
 80127a8:	68bb      	ldr	r3, [r7, #8]
 80127aa:	609a      	str	r2, [r3, #8]

  /* Get the TR register */
  tmpreg = (uint32_t)(hrtc->Instance->TR & RTC_TR_RESERVED_MASK);
 80127ac:	68fb      	ldr	r3, [r7, #12]
 80127ae:	681b      	ldr	r3, [r3, #0]
 80127b0:	681b      	ldr	r3, [r3, #0]
 80127b2:	4a22      	ldr	r2, [pc, #136]	@ (801283c <HAL_RTC_GetTime+0xb8>)
 80127b4:	4013      	ands	r3, r2
 80127b6:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sTime->Hours      = (uint8_t)((tmpreg & (RTC_TR_HT  | RTC_TR_HU))  >> RTC_TR_HU_Pos);
 80127b8:	697b      	ldr	r3, [r7, #20]
 80127ba:	0c1b      	lsrs	r3, r3, #16
 80127bc:	b2db      	uxtb	r3, r3
 80127be:	223f      	movs	r2, #63	@ 0x3f
 80127c0:	4013      	ands	r3, r2
 80127c2:	b2da      	uxtb	r2, r3
 80127c4:	68bb      	ldr	r3, [r7, #8]
 80127c6:	701a      	strb	r2, [r3, #0]
  sTime->Minutes    = (uint8_t)((tmpreg & (RTC_TR_MNT | RTC_TR_MNU)) >> RTC_TR_MNU_Pos);
 80127c8:	697b      	ldr	r3, [r7, #20]
 80127ca:	0a1b      	lsrs	r3, r3, #8
 80127cc:	b2db      	uxtb	r3, r3
 80127ce:	227f      	movs	r2, #127	@ 0x7f
 80127d0:	4013      	ands	r3, r2
 80127d2:	b2da      	uxtb	r2, r3
 80127d4:	68bb      	ldr	r3, [r7, #8]
 80127d6:	705a      	strb	r2, [r3, #1]
  sTime->Seconds    = (uint8_t)( tmpreg & (RTC_TR_ST  | RTC_TR_SU));
 80127d8:	697b      	ldr	r3, [r7, #20]
 80127da:	b2db      	uxtb	r3, r3
 80127dc:	227f      	movs	r2, #127	@ 0x7f
 80127de:	4013      	ands	r3, r2
 80127e0:	b2da      	uxtb	r2, r3
 80127e2:	68bb      	ldr	r3, [r7, #8]
 80127e4:	709a      	strb	r2, [r3, #2]
  sTime->TimeFormat = (uint8_t)((tmpreg & (RTC_TR_PM))               >> RTC_TR_PM_Pos);
 80127e6:	697b      	ldr	r3, [r7, #20]
 80127e8:	0d9b      	lsrs	r3, r3, #22
 80127ea:	b2db      	uxtb	r3, r3
 80127ec:	2201      	movs	r2, #1
 80127ee:	4013      	ands	r3, r2
 80127f0:	b2da      	uxtb	r2, r3
 80127f2:	68bb      	ldr	r3, [r7, #8]
 80127f4:	70da      	strb	r2, [r3, #3]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80127f6:	687b      	ldr	r3, [r7, #4]
 80127f8:	2b00      	cmp	r3, #0
 80127fa:	d11a      	bne.n	8012832 <HAL_RTC_GetTime+0xae>
  {
    /* Convert the time structure parameters to Binary format */
    sTime->Hours = (uint8_t)RTC_Bcd2ToByte(sTime->Hours);
 80127fc:	68bb      	ldr	r3, [r7, #8]
 80127fe:	781b      	ldrb	r3, [r3, #0]
 8012800:	0018      	movs	r0, r3
 8012802:	f000 f9b8 	bl	8012b76 <RTC_Bcd2ToByte>
 8012806:	0003      	movs	r3, r0
 8012808:	001a      	movs	r2, r3
 801280a:	68bb      	ldr	r3, [r7, #8]
 801280c:	701a      	strb	r2, [r3, #0]
    sTime->Minutes = (uint8_t)RTC_Bcd2ToByte(sTime->Minutes);
 801280e:	68bb      	ldr	r3, [r7, #8]
 8012810:	785b      	ldrb	r3, [r3, #1]
 8012812:	0018      	movs	r0, r3
 8012814:	f000 f9af 	bl	8012b76 <RTC_Bcd2ToByte>
 8012818:	0003      	movs	r3, r0
 801281a:	001a      	movs	r2, r3
 801281c:	68bb      	ldr	r3, [r7, #8]
 801281e:	705a      	strb	r2, [r3, #1]
    sTime->Seconds = (uint8_t)RTC_Bcd2ToByte(sTime->Seconds);
 8012820:	68bb      	ldr	r3, [r7, #8]
 8012822:	789b      	ldrb	r3, [r3, #2]
 8012824:	0018      	movs	r0, r3
 8012826:	f000 f9a6 	bl	8012b76 <RTC_Bcd2ToByte>
 801282a:	0003      	movs	r3, r0
 801282c:	001a      	movs	r2, r3
 801282e:	68bb      	ldr	r3, [r7, #8]
 8012830:	709a      	strb	r2, [r3, #2]
  }

  return HAL_OK;
 8012832:	2300      	movs	r3, #0
}
 8012834:	0018      	movs	r0, r3
 8012836:	46bd      	mov	sp, r7
 8012838:	b006      	add	sp, #24
 801283a:	bd80      	pop	{r7, pc}
 801283c:	007f7f7f 	.word	0x007f7f7f

08012840 <HAL_RTC_SetDate>:
  *            @arg RTC_FORMAT_BIN: Binary data format
  *            @arg RTC_FORMAT_BCD: BCD data format
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_SetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8012840:	b5b0      	push	{r4, r5, r7, lr}
 8012842:	b086      	sub	sp, #24
 8012844:	af00      	add	r7, sp, #0
 8012846:	60f8      	str	r0, [r7, #12]
 8012848:	60b9      	str	r1, [r7, #8]
 801284a:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 801284c:	2300      	movs	r3, #0
 801284e:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8012850:	68fb      	ldr	r3, [r7, #12]
 8012852:	2220      	movs	r2, #32
 8012854:	5c9b      	ldrb	r3, [r3, r2]
 8012856:	2b01      	cmp	r3, #1
 8012858:	d101      	bne.n	801285e <HAL_RTC_SetDate+0x1e>
 801285a:	2302      	movs	r3, #2
 801285c:	e07e      	b.n	801295c <HAL_RTC_SetDate+0x11c>
 801285e:	68fb      	ldr	r3, [r7, #12]
 8012860:	2220      	movs	r2, #32
 8012862:	2101      	movs	r1, #1
 8012864:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8012866:	68fb      	ldr	r3, [r7, #12]
 8012868:	2221      	movs	r2, #33	@ 0x21
 801286a:	2102      	movs	r1, #2
 801286c:	5499      	strb	r1, [r3, r2]

  if ((Format == RTC_FORMAT_BIN) && ((sDate->Month & 0x10U) == 0x10U))
 801286e:	687b      	ldr	r3, [r7, #4]
 8012870:	2b00      	cmp	r3, #0
 8012872:	d10e      	bne.n	8012892 <HAL_RTC_SetDate+0x52>
 8012874:	68bb      	ldr	r3, [r7, #8]
 8012876:	785b      	ldrb	r3, [r3, #1]
 8012878:	001a      	movs	r2, r3
 801287a:	2310      	movs	r3, #16
 801287c:	4013      	ands	r3, r2
 801287e:	d008      	beq.n	8012892 <HAL_RTC_SetDate+0x52>
  {
    sDate->Month = (uint8_t)((sDate->Month & (uint8_t)~(0x10U)) + (uint8_t)0x0AU);
 8012880:	68bb      	ldr	r3, [r7, #8]
 8012882:	785b      	ldrb	r3, [r3, #1]
 8012884:	2210      	movs	r2, #16
 8012886:	4393      	bics	r3, r2
 8012888:	b2db      	uxtb	r3, r3
 801288a:	330a      	adds	r3, #10
 801288c:	b2da      	uxtb	r2, r3
 801288e:	68bb      	ldr	r3, [r7, #8]
 8012890:	705a      	strb	r2, [r3, #1]
  }

  assert_param(IS_RTC_WEEKDAY(sDate->WeekDay));

  if (Format == RTC_FORMAT_BIN)
 8012892:	687b      	ldr	r3, [r7, #4]
 8012894:	2b00      	cmp	r3, #0
 8012896:	d11c      	bne.n	80128d2 <HAL_RTC_SetDate+0x92>
  {
    assert_param(IS_RTC_YEAR(sDate->Year));
    assert_param(IS_RTC_MONTH(sDate->Month));
    assert_param(IS_RTC_DATE(sDate->Date));

    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 8012898:	68bb      	ldr	r3, [r7, #8]
 801289a:	78db      	ldrb	r3, [r3, #3]
 801289c:	0018      	movs	r0, r3
 801289e:	f000 f949 	bl	8012b34 <RTC_ByteToBcd2>
 80128a2:	0003      	movs	r3, r0
 80128a4:	041c      	lsls	r4, r3, #16
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80128a6:	68bb      	ldr	r3, [r7, #8]
 80128a8:	785b      	ldrb	r3, [r3, #1]
 80128aa:	0018      	movs	r0, r3
 80128ac:	f000 f942 	bl	8012b34 <RTC_ByteToBcd2>
 80128b0:	0003      	movs	r3, r0
 80128b2:	021b      	lsls	r3, r3, #8
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80128b4:	431c      	orrs	r4, r3
                  ((uint32_t)RTC_ByteToBcd2(sDate->Date))                   | \
 80128b6:	68bb      	ldr	r3, [r7, #8]
 80128b8:	789b      	ldrb	r3, [r3, #2]
 80128ba:	0018      	movs	r0, r3
 80128bc:	f000 f93a 	bl	8012b34 <RTC_ByteToBcd2>
 80128c0:	0003      	movs	r3, r0
                  ((uint32_t)RTC_ByteToBcd2(sDate->Month) << RTC_DR_MU_Pos) | \
 80128c2:	0022      	movs	r2, r4
 80128c4:	431a      	orrs	r2, r3
                  ((uint32_t)sDate->WeekDay               << RTC_DR_WDU_Pos));
 80128c6:	68bb      	ldr	r3, [r7, #8]
 80128c8:	781b      	ldrb	r3, [r3, #0]
 80128ca:	035b      	lsls	r3, r3, #13
    datetmpreg = (((uint32_t)RTC_ByteToBcd2(sDate->Year)  << RTC_DR_YU_Pos) | \
 80128cc:	4313      	orrs	r3, r2
 80128ce:	617b      	str	r3, [r7, #20]
 80128d0:	e00e      	b.n	80128f0 <HAL_RTC_SetDate+0xb0>
  {
    assert_param(IS_RTC_YEAR(RTC_Bcd2ToByte(sDate->Year)));
    assert_param(IS_RTC_MONTH(RTC_Bcd2ToByte(sDate->Month)));
    assert_param(IS_RTC_DATE(RTC_Bcd2ToByte(sDate->Date)));

    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80128d2:	68bb      	ldr	r3, [r7, #8]
 80128d4:	78db      	ldrb	r3, [r3, #3]
 80128d6:	041a      	lsls	r2, r3, #16
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80128d8:	68bb      	ldr	r3, [r7, #8]
 80128da:	785b      	ldrb	r3, [r3, #1]
 80128dc:	021b      	lsls	r3, r3, #8
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80128de:	4313      	orrs	r3, r2
                  ((uint32_t) sDate->Date)                      | \
 80128e0:	68ba      	ldr	r2, [r7, #8]
 80128e2:	7892      	ldrb	r2, [r2, #2]
                  (((uint32_t)sDate->Month)   << RTC_DR_MU_Pos) | \
 80128e4:	431a      	orrs	r2, r3
                  (((uint32_t)sDate->WeekDay) << RTC_DR_WDU_Pos));
 80128e6:	68bb      	ldr	r3, [r7, #8]
 80128e8:	781b      	ldrb	r3, [r3, #0]
 80128ea:	035b      	lsls	r3, r3, #13
    datetmpreg = ((((uint32_t)sDate->Year)    << RTC_DR_YU_Pos) | \
 80128ec:	4313      	orrs	r3, r2
 80128ee:	617b      	str	r3, [r7, #20]
  }

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 80128f0:	68fb      	ldr	r3, [r7, #12]
 80128f2:	681b      	ldr	r3, [r3, #0]
 80128f4:	22ca      	movs	r2, #202	@ 0xca
 80128f6:	625a      	str	r2, [r3, #36]	@ 0x24
 80128f8:	68fb      	ldr	r3, [r7, #12]
 80128fa:	681b      	ldr	r3, [r3, #0]
 80128fc:	2253      	movs	r2, #83	@ 0x53
 80128fe:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Enter Initialization mode */
  status = RTC_EnterInitMode(hrtc);
 8012900:	2513      	movs	r5, #19
 8012902:	197c      	adds	r4, r7, r5
 8012904:	68fb      	ldr	r3, [r7, #12]
 8012906:	0018      	movs	r0, r3
 8012908:	f000 f8a6 	bl	8012a58 <RTC_EnterInitMode>
 801290c:	0003      	movs	r3, r0
 801290e:	7023      	strb	r3, [r4, #0]

  if (status == HAL_OK)
 8012910:	0028      	movs	r0, r5
 8012912:	183b      	adds	r3, r7, r0
 8012914:	781b      	ldrb	r3, [r3, #0]
 8012916:	2b00      	cmp	r3, #0
 8012918:	d10c      	bne.n	8012934 <HAL_RTC_SetDate+0xf4>
  {
    /* Set the RTC_DR register */
    hrtc->Instance->DR = (uint32_t)(datetmpreg & RTC_DR_RESERVED_MASK);
 801291a:	68fb      	ldr	r3, [r7, #12]
 801291c:	681b      	ldr	r3, [r3, #0]
 801291e:	697a      	ldr	r2, [r7, #20]
 8012920:	4910      	ldr	r1, [pc, #64]	@ (8012964 <HAL_RTC_SetDate+0x124>)
 8012922:	400a      	ands	r2, r1
 8012924:	605a      	str	r2, [r3, #4]

    /* Exit Initialization mode */
    status = RTC_ExitInitMode(hrtc);
 8012926:	183c      	adds	r4, r7, r0
 8012928:	68fb      	ldr	r3, [r7, #12]
 801292a:	0018      	movs	r0, r3
 801292c:	f000 f8d8 	bl	8012ae0 <RTC_ExitInitMode>
 8012930:	0003      	movs	r3, r0
 8012932:	7023      	strb	r3, [r4, #0]
  }

  if (status == HAL_OK)
 8012934:	2313      	movs	r3, #19
 8012936:	18fb      	adds	r3, r7, r3
 8012938:	781b      	ldrb	r3, [r3, #0]
 801293a:	2b00      	cmp	r3, #0
 801293c:	d103      	bne.n	8012946 <HAL_RTC_SetDate+0x106>
  {
    hrtc->State = HAL_RTC_STATE_READY;
 801293e:	68fb      	ldr	r3, [r7, #12]
 8012940:	2221      	movs	r2, #33	@ 0x21
 8012942:	2101      	movs	r1, #1
 8012944:	5499      	strb	r1, [r3, r2]
  }

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8012946:	68fb      	ldr	r3, [r7, #12]
 8012948:	681b      	ldr	r3, [r3, #0]
 801294a:	22ff      	movs	r2, #255	@ 0xff
 801294c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 801294e:	68fb      	ldr	r3, [r7, #12]
 8012950:	2220      	movs	r2, #32
 8012952:	2100      	movs	r1, #0
 8012954:	5499      	strb	r1, [r3, r2]

  return status;
 8012956:	2313      	movs	r3, #19
 8012958:	18fb      	adds	r3, r7, r3
 801295a:	781b      	ldrb	r3, [r3, #0]
}
 801295c:	0018      	movs	r0, r3
 801295e:	46bd      	mov	sp, r7
 8012960:	b006      	add	sp, #24
 8012962:	bdb0      	pop	{r4, r5, r7, pc}
 8012964:	00ffff3f 	.word	0x00ffff3f

08012968 <HAL_RTC_GetDate>:
  *        until current date is read to ensure consistency between the time and
  *        date values.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_GetDate(RTC_HandleTypeDef *hrtc, RTC_DateTypeDef *sDate, uint32_t Format)
{
 8012968:	b580      	push	{r7, lr}
 801296a:	b086      	sub	sp, #24
 801296c:	af00      	add	r7, sp, #0
 801296e:	60f8      	str	r0, [r7, #12]
 8012970:	60b9      	str	r1, [r7, #8]
 8012972:	607a      	str	r2, [r7, #4]
  uint32_t datetmpreg = 0U;
 8012974:	2300      	movs	r3, #0
 8012976:	617b      	str	r3, [r7, #20]

  /* Check the parameters */
  assert_param(IS_RTC_FORMAT(Format));

  /* Get the DR register */
  datetmpreg = (uint32_t)(hrtc->Instance->DR & RTC_DR_RESERVED_MASK);
 8012978:	68fb      	ldr	r3, [r7, #12]
 801297a:	681b      	ldr	r3, [r3, #0]
 801297c:	685b      	ldr	r3, [r3, #4]
 801297e:	4a21      	ldr	r2, [pc, #132]	@ (8012a04 <HAL_RTC_GetDate+0x9c>)
 8012980:	4013      	ands	r3, r2
 8012982:	617b      	str	r3, [r7, #20]

  /* Fill the structure fields with the read parameters */
  sDate->Year    = (uint8_t)((datetmpreg & (RTC_DR_YT | RTC_DR_YU)) >> RTC_DR_YU_Pos);
 8012984:	697b      	ldr	r3, [r7, #20]
 8012986:	0c1b      	lsrs	r3, r3, #16
 8012988:	b2da      	uxtb	r2, r3
 801298a:	68bb      	ldr	r3, [r7, #8]
 801298c:	70da      	strb	r2, [r3, #3]
  sDate->Month   = (uint8_t)((datetmpreg & (RTC_DR_MT | RTC_DR_MU)) >> RTC_DR_MU_Pos);
 801298e:	697b      	ldr	r3, [r7, #20]
 8012990:	0a1b      	lsrs	r3, r3, #8
 8012992:	b2db      	uxtb	r3, r3
 8012994:	221f      	movs	r2, #31
 8012996:	4013      	ands	r3, r2
 8012998:	b2da      	uxtb	r2, r3
 801299a:	68bb      	ldr	r3, [r7, #8]
 801299c:	705a      	strb	r2, [r3, #1]
  sDate->Date    = (uint8_t) (datetmpreg & (RTC_DR_DT | RTC_DR_DU));
 801299e:	697b      	ldr	r3, [r7, #20]
 80129a0:	b2db      	uxtb	r3, r3
 80129a2:	223f      	movs	r2, #63	@ 0x3f
 80129a4:	4013      	ands	r3, r2
 80129a6:	b2da      	uxtb	r2, r3
 80129a8:	68bb      	ldr	r3, [r7, #8]
 80129aa:	709a      	strb	r2, [r3, #2]
  sDate->WeekDay = (uint8_t)((datetmpreg & (RTC_DR_WDU))            >> RTC_DR_WDU_Pos);
 80129ac:	697b      	ldr	r3, [r7, #20]
 80129ae:	0b5b      	lsrs	r3, r3, #13
 80129b0:	b2db      	uxtb	r3, r3
 80129b2:	2207      	movs	r2, #7
 80129b4:	4013      	ands	r3, r2
 80129b6:	b2da      	uxtb	r2, r3
 80129b8:	68bb      	ldr	r3, [r7, #8]
 80129ba:	701a      	strb	r2, [r3, #0]

  /* Check the input parameters format */
  if (Format == RTC_FORMAT_BIN)
 80129bc:	687b      	ldr	r3, [r7, #4]
 80129be:	2b00      	cmp	r3, #0
 80129c0:	d11a      	bne.n	80129f8 <HAL_RTC_GetDate+0x90>
  {
    /* Convert the date structure parameters to Binary format */
    sDate->Year  = (uint8_t)RTC_Bcd2ToByte(sDate->Year);
 80129c2:	68bb      	ldr	r3, [r7, #8]
 80129c4:	78db      	ldrb	r3, [r3, #3]
 80129c6:	0018      	movs	r0, r3
 80129c8:	f000 f8d5 	bl	8012b76 <RTC_Bcd2ToByte>
 80129cc:	0003      	movs	r3, r0
 80129ce:	001a      	movs	r2, r3
 80129d0:	68bb      	ldr	r3, [r7, #8]
 80129d2:	70da      	strb	r2, [r3, #3]
    sDate->Month = (uint8_t)RTC_Bcd2ToByte(sDate->Month);
 80129d4:	68bb      	ldr	r3, [r7, #8]
 80129d6:	785b      	ldrb	r3, [r3, #1]
 80129d8:	0018      	movs	r0, r3
 80129da:	f000 f8cc 	bl	8012b76 <RTC_Bcd2ToByte>
 80129de:	0003      	movs	r3, r0
 80129e0:	001a      	movs	r2, r3
 80129e2:	68bb      	ldr	r3, [r7, #8]
 80129e4:	705a      	strb	r2, [r3, #1]
    sDate->Date  = (uint8_t)RTC_Bcd2ToByte(sDate->Date);
 80129e6:	68bb      	ldr	r3, [r7, #8]
 80129e8:	789b      	ldrb	r3, [r3, #2]
 80129ea:	0018      	movs	r0, r3
 80129ec:	f000 f8c3 	bl	8012b76 <RTC_Bcd2ToByte>
 80129f0:	0003      	movs	r3, r0
 80129f2:	001a      	movs	r2, r3
 80129f4:	68bb      	ldr	r3, [r7, #8]
 80129f6:	709a      	strb	r2, [r3, #2]
  }
  return HAL_OK;
 80129f8:	2300      	movs	r3, #0
}
 80129fa:	0018      	movs	r0, r3
 80129fc:	46bd      	mov	sp, r7
 80129fe:	b006      	add	sp, #24
 8012a00:	bd80      	pop	{r7, pc}
 8012a02:	46c0      	nop			@ (mov r8, r8)
 8012a04:	00ffff3f 	.word	0x00ffff3f

08012a08 <HAL_RTC_WaitForSynchro>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTC_WaitForSynchro(RTC_HandleTypeDef *hrtc)
{
 8012a08:	b580      	push	{r7, lr}
 8012a0a:	b084      	sub	sp, #16
 8012a0c:	af00      	add	r7, sp, #0
 8012a0e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8012a10:	2300      	movs	r3, #0
 8012a12:	60fb      	str	r3, [r7, #12]

  /* Clear RSF flag, keep reserved bits at reset values (setting other flags has no effect) */
  hrtc->Instance->ISR = ((uint32_t)(RTC_RSF_MASK & RTC_ISR_RESERVED_MASK));
 8012a14:	687b      	ldr	r3, [r7, #4]
 8012a16:	681b      	ldr	r3, [r3, #0]
 8012a18:	4a0e      	ldr	r2, [pc, #56]	@ (8012a54 <HAL_RTC_WaitForSynchro+0x4c>)
 8012a1a:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8012a1c:	f7f9 fa1a 	bl	800be54 <HAL_GetTick>
 8012a20:	0003      	movs	r3, r0
 8012a22:	60fb      	str	r3, [r7, #12]

  /* Wait the registers to be synchronised */
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8012a24:	e00a      	b.n	8012a3c <HAL_RTC_WaitForSynchro+0x34>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8012a26:	f7f9 fa15 	bl	800be54 <HAL_GetTick>
 8012a2a:	0002      	movs	r2, r0
 8012a2c:	68fb      	ldr	r3, [r7, #12]
 8012a2e:	1ad2      	subs	r2, r2, r3
 8012a30:	23fa      	movs	r3, #250	@ 0xfa
 8012a32:	009b      	lsls	r3, r3, #2
 8012a34:	429a      	cmp	r2, r3
 8012a36:	d901      	bls.n	8012a3c <HAL_RTC_WaitForSynchro+0x34>
    {
      return HAL_TIMEOUT;
 8012a38:	2303      	movs	r3, #3
 8012a3a:	e006      	b.n	8012a4a <HAL_RTC_WaitForSynchro+0x42>
  while ((hrtc->Instance->ISR & RTC_ISR_RSF) == 0U)
 8012a3c:	687b      	ldr	r3, [r7, #4]
 8012a3e:	681b      	ldr	r3, [r3, #0]
 8012a40:	68db      	ldr	r3, [r3, #12]
 8012a42:	2220      	movs	r2, #32
 8012a44:	4013      	ands	r3, r2
 8012a46:	d0ee      	beq.n	8012a26 <HAL_RTC_WaitForSynchro+0x1e>
    }
  }

  return HAL_OK;
 8012a48:	2300      	movs	r3, #0
}
 8012a4a:	0018      	movs	r0, r3
 8012a4c:	46bd      	mov	sp, r7
 8012a4e:	b004      	add	sp, #16
 8012a50:	bd80      	pop	{r7, pc}
 8012a52:	46c0      	nop			@ (mov r8, r8)
 8012a54:	0001ff5f 	.word	0x0001ff5f

08012a58 <RTC_EnterInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_EnterInitMode(RTC_HandleTypeDef *hrtc)
{
 8012a58:	b580      	push	{r7, lr}
 8012a5a:	b084      	sub	sp, #16
 8012a5c:	af00      	add	r7, sp, #0
 8012a5e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = 0U;
 8012a60:	2300      	movs	r3, #0
 8012a62:	60bb      	str	r3, [r7, #8]
  HAL_StatusTypeDef status = HAL_OK;
 8012a64:	230f      	movs	r3, #15
 8012a66:	18fb      	adds	r3, r7, r3
 8012a68:	2200      	movs	r2, #0
 8012a6a:	701a      	strb	r2, [r3, #0]

  /* Check that Initialization mode is not already set */
  if (READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U)
 8012a6c:	687b      	ldr	r3, [r7, #4]
 8012a6e:	681b      	ldr	r3, [r3, #0]
 8012a70:	68db      	ldr	r3, [r3, #12]
 8012a72:	2240      	movs	r2, #64	@ 0x40
 8012a74:	4013      	ands	r3, r2
 8012a76:	d12c      	bne.n	8012ad2 <RTC_EnterInitMode+0x7a>
  {
    /* Set INIT bit to enter Initialization mode */
    SET_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8012a78:	687b      	ldr	r3, [r7, #4]
 8012a7a:	681b      	ldr	r3, [r3, #0]
 8012a7c:	68da      	ldr	r2, [r3, #12]
 8012a7e:	687b      	ldr	r3, [r7, #4]
 8012a80:	681b      	ldr	r3, [r3, #0]
 8012a82:	2180      	movs	r1, #128	@ 0x80
 8012a84:	430a      	orrs	r2, r1
 8012a86:	60da      	str	r2, [r3, #12]

    /* Get tick */
    tickstart = HAL_GetTick();
 8012a88:	f7f9 f9e4 	bl	800be54 <HAL_GetTick>
 8012a8c:	0003      	movs	r3, r0
 8012a8e:	60bb      	str	r3, [r7, #8]

    /* Wait till RTC is in INIT state and if timeout is reached exit */
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8012a90:	e014      	b.n	8012abc <RTC_EnterInitMode+0x64>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8012a92:	f7f9 f9df 	bl	800be54 <HAL_GetTick>
 8012a96:	0002      	movs	r2, r0
 8012a98:	68bb      	ldr	r3, [r7, #8]
 8012a9a:	1ad2      	subs	r2, r2, r3
 8012a9c:	200f      	movs	r0, #15
 8012a9e:	183b      	adds	r3, r7, r0
 8012aa0:	1839      	adds	r1, r7, r0
 8012aa2:	7809      	ldrb	r1, [r1, #0]
 8012aa4:	7019      	strb	r1, [r3, #0]
 8012aa6:	23fa      	movs	r3, #250	@ 0xfa
 8012aa8:	009b      	lsls	r3, r3, #2
 8012aaa:	429a      	cmp	r2, r3
 8012aac:	d906      	bls.n	8012abc <RTC_EnterInitMode+0x64>
      {
        /* Set RTC state */
        hrtc->State = HAL_RTC_STATE_ERROR;
 8012aae:	687b      	ldr	r3, [r7, #4]
 8012ab0:	2221      	movs	r2, #33	@ 0x21
 8012ab2:	2104      	movs	r1, #4
 8012ab4:	5499      	strb	r1, [r3, r2]
        status = HAL_ERROR;
 8012ab6:	183b      	adds	r3, r7, r0
 8012ab8:	2201      	movs	r2, #1
 8012aba:	701a      	strb	r2, [r3, #0]
    while ((READ_BIT(hrtc->Instance->ISR, RTC_ISR_INITF) == 0U) && (status != HAL_ERROR))
 8012abc:	687b      	ldr	r3, [r7, #4]
 8012abe:	681b      	ldr	r3, [r3, #0]
 8012ac0:	68db      	ldr	r3, [r3, #12]
 8012ac2:	2240      	movs	r2, #64	@ 0x40
 8012ac4:	4013      	ands	r3, r2
 8012ac6:	d104      	bne.n	8012ad2 <RTC_EnterInitMode+0x7a>
 8012ac8:	230f      	movs	r3, #15
 8012aca:	18fb      	adds	r3, r7, r3
 8012acc:	781b      	ldrb	r3, [r3, #0]
 8012ace:	2b01      	cmp	r3, #1
 8012ad0:	d1df      	bne.n	8012a92 <RTC_EnterInitMode+0x3a>
      }
    }
  }

  return status;
 8012ad2:	230f      	movs	r3, #15
 8012ad4:	18fb      	adds	r3, r7, r3
 8012ad6:	781b      	ldrb	r3, [r3, #0]
}
 8012ad8:	0018      	movs	r0, r3
 8012ada:	46bd      	mov	sp, r7
 8012adc:	b004      	add	sp, #16
 8012ade:	bd80      	pop	{r7, pc}

08012ae0 <RTC_ExitInitMode>:
  * @param  hrtc pointer to a RTC_HandleTypeDef structure that contains
  *                the configuration information for RTC.
  * @retval HAL status
  */
HAL_StatusTypeDef RTC_ExitInitMode(RTC_HandleTypeDef *hrtc)
{
 8012ae0:	b590      	push	{r4, r7, lr}
 8012ae2:	b085      	sub	sp, #20
 8012ae4:	af00      	add	r7, sp, #0
 8012ae6:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8012ae8:	240f      	movs	r4, #15
 8012aea:	193b      	adds	r3, r7, r4
 8012aec:	2200      	movs	r2, #0
 8012aee:	701a      	strb	r2, [r3, #0]

  /* Clear INIT bit to exit Initialization mode */
  CLEAR_BIT(hrtc->Instance->ISR, RTC_ISR_INIT);
 8012af0:	687b      	ldr	r3, [r7, #4]
 8012af2:	681b      	ldr	r3, [r3, #0]
 8012af4:	68da      	ldr	r2, [r3, #12]
 8012af6:	687b      	ldr	r3, [r7, #4]
 8012af8:	681b      	ldr	r3, [r3, #0]
 8012afa:	2180      	movs	r1, #128	@ 0x80
 8012afc:	438a      	bics	r2, r1
 8012afe:	60da      	str	r2, [r3, #12]

  /* If CR_BYPSHAD bit = 0, wait for synchro */
  if (READ_BIT(hrtc->Instance->CR, RTC_CR_BYPSHAD) == 0U)
 8012b00:	687b      	ldr	r3, [r7, #4]
 8012b02:	681b      	ldr	r3, [r3, #0]
 8012b04:	689b      	ldr	r3, [r3, #8]
 8012b06:	2220      	movs	r2, #32
 8012b08:	4013      	ands	r3, r2
 8012b0a:	d10c      	bne.n	8012b26 <RTC_ExitInitMode+0x46>
  {
    if (HAL_RTC_WaitForSynchro(hrtc) != HAL_OK)
 8012b0c:	687b      	ldr	r3, [r7, #4]
 8012b0e:	0018      	movs	r0, r3
 8012b10:	f7ff ff7a 	bl	8012a08 <HAL_RTC_WaitForSynchro>
 8012b14:	1e03      	subs	r3, r0, #0
 8012b16:	d006      	beq.n	8012b26 <RTC_ExitInitMode+0x46>
    {
      /* Set RTC state */
      hrtc->State = HAL_RTC_STATE_ERROR;
 8012b18:	687b      	ldr	r3, [r7, #4]
 8012b1a:	2221      	movs	r2, #33	@ 0x21
 8012b1c:	2104      	movs	r1, #4
 8012b1e:	5499      	strb	r1, [r3, r2]
      status = HAL_ERROR;
 8012b20:	193b      	adds	r3, r7, r4
 8012b22:	2201      	movs	r2, #1
 8012b24:	701a      	strb	r2, [r3, #0]
    }
  }

  return status;
 8012b26:	230f      	movs	r3, #15
 8012b28:	18fb      	adds	r3, r7, r3
 8012b2a:	781b      	ldrb	r3, [r3, #0]
}
 8012b2c:	0018      	movs	r0, r3
 8012b2e:	46bd      	mov	sp, r7
 8012b30:	b005      	add	sp, #20
 8012b32:	bd90      	pop	{r4, r7, pc}

08012b34 <RTC_ByteToBcd2>:
  * @brief  Converts a 2-digit number from decimal to BCD format.
  * @param  number decimal-formatted number (from 0 to 99) to be converted
  * @retval Converted byte
  */
uint8_t RTC_ByteToBcd2(uint8_t number)
{
 8012b34:	b580      	push	{r7, lr}
 8012b36:	b084      	sub	sp, #16
 8012b38:	af00      	add	r7, sp, #0
 8012b3a:	0002      	movs	r2, r0
 8012b3c:	1dfb      	adds	r3, r7, #7
 8012b3e:	701a      	strb	r2, [r3, #0]
  uint32_t bcdhigh = 0U;
 8012b40:	2300      	movs	r3, #0
 8012b42:	60fb      	str	r3, [r7, #12]

  while (number >= 10U)
 8012b44:	e007      	b.n	8012b56 <RTC_ByteToBcd2+0x22>
  {
    bcdhigh++;
 8012b46:	68fb      	ldr	r3, [r7, #12]
 8012b48:	3301      	adds	r3, #1
 8012b4a:	60fb      	str	r3, [r7, #12]
    number -= 10U;
 8012b4c:	1dfb      	adds	r3, r7, #7
 8012b4e:	1dfa      	adds	r2, r7, #7
 8012b50:	7812      	ldrb	r2, [r2, #0]
 8012b52:	3a0a      	subs	r2, #10
 8012b54:	701a      	strb	r2, [r3, #0]
  while (number >= 10U)
 8012b56:	1dfb      	adds	r3, r7, #7
 8012b58:	781b      	ldrb	r3, [r3, #0]
 8012b5a:	2b09      	cmp	r3, #9
 8012b5c:	d8f3      	bhi.n	8012b46 <RTC_ByteToBcd2+0x12>
  }

  return ((uint8_t)(bcdhigh << 4U) | number);
 8012b5e:	68fb      	ldr	r3, [r7, #12]
 8012b60:	b2db      	uxtb	r3, r3
 8012b62:	011b      	lsls	r3, r3, #4
 8012b64:	b2da      	uxtb	r2, r3
 8012b66:	1dfb      	adds	r3, r7, #7
 8012b68:	781b      	ldrb	r3, [r3, #0]
 8012b6a:	4313      	orrs	r3, r2
 8012b6c:	b2db      	uxtb	r3, r3
}
 8012b6e:	0018      	movs	r0, r3
 8012b70:	46bd      	mov	sp, r7
 8012b72:	b004      	add	sp, #16
 8012b74:	bd80      	pop	{r7, pc}

08012b76 <RTC_Bcd2ToByte>:
  * @brief  Converts a 2-digit number from BCD to decimal format.
  * @param  number BCD-formatted number (from 00 to 99) to be converted
  * @retval Converted word
  */
uint8_t RTC_Bcd2ToByte(uint8_t number)
{
 8012b76:	b580      	push	{r7, lr}
 8012b78:	b084      	sub	sp, #16
 8012b7a:	af00      	add	r7, sp, #0
 8012b7c:	0002      	movs	r2, r0
 8012b7e:	1dfb      	adds	r3, r7, #7
 8012b80:	701a      	strb	r2, [r3, #0]
  uint32_t tens = 0U;
 8012b82:	2300      	movs	r3, #0
 8012b84:	60fb      	str	r3, [r7, #12]
  tens = (((uint32_t)number & 0xF0U) >> 4U) * 10U;
 8012b86:	1dfb      	adds	r3, r7, #7
 8012b88:	781b      	ldrb	r3, [r3, #0]
 8012b8a:	091b      	lsrs	r3, r3, #4
 8012b8c:	b2db      	uxtb	r3, r3
 8012b8e:	001a      	movs	r2, r3
 8012b90:	0013      	movs	r3, r2
 8012b92:	009b      	lsls	r3, r3, #2
 8012b94:	189b      	adds	r3, r3, r2
 8012b96:	005b      	lsls	r3, r3, #1
 8012b98:	60fb      	str	r3, [r7, #12]
  return (uint8_t)(tens + ((uint32_t)number & 0x0FU));
 8012b9a:	68fb      	ldr	r3, [r7, #12]
 8012b9c:	b2da      	uxtb	r2, r3
 8012b9e:	1dfb      	adds	r3, r7, #7
 8012ba0:	781b      	ldrb	r3, [r3, #0]
 8012ba2:	210f      	movs	r1, #15
 8012ba4:	400b      	ands	r3, r1
 8012ba6:	b2db      	uxtb	r3, r3
 8012ba8:	18d3      	adds	r3, r2, r3
 8012baa:	b2db      	uxtb	r3, r3
}
 8012bac:	0018      	movs	r0, r3
 8012bae:	46bd      	mov	sp, r7
 8012bb0:	b004      	add	sp, #16
 8012bb2:	bd80      	pop	{r7, pc}

08012bb4 <HAL_RTCEx_SetWakeUpTimer>:
  * @param  WakeUpCounter Wakeup counter
  * @param  WakeUpClock Wakeup clock
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_RTCEx_SetWakeUpTimer(RTC_HandleTypeDef *hrtc, uint32_t WakeUpCounter, uint32_t WakeUpClock)
{
 8012bb4:	b580      	push	{r7, lr}
 8012bb6:	b086      	sub	sp, #24
 8012bb8:	af00      	add	r7, sp, #0
 8012bba:	60f8      	str	r0, [r7, #12]
 8012bbc:	60b9      	str	r1, [r7, #8]
 8012bbe:	607a      	str	r2, [r7, #4]
  uint32_t tickstart = 0U;
 8012bc0:	2300      	movs	r3, #0
 8012bc2:	617b      	str	r3, [r7, #20]
  /* Check the parameters */
  assert_param(IS_RTC_WAKEUP_CLOCK(WakeUpClock));
  assert_param(IS_RTC_WAKEUP_COUNTER(WakeUpCounter));

  /* Process Locked */
  __HAL_LOCK(hrtc);
 8012bc4:	68fb      	ldr	r3, [r7, #12]
 8012bc6:	2220      	movs	r2, #32
 8012bc8:	5c9b      	ldrb	r3, [r3, r2]
 8012bca:	2b01      	cmp	r3, #1
 8012bcc:	d101      	bne.n	8012bd2 <HAL_RTCEx_SetWakeUpTimer+0x1e>
 8012bce:	2302      	movs	r3, #2
 8012bd0:	e096      	b.n	8012d00 <HAL_RTCEx_SetWakeUpTimer+0x14c>
 8012bd2:	68fb      	ldr	r3, [r7, #12]
 8012bd4:	2220      	movs	r2, #32
 8012bd6:	2101      	movs	r1, #1
 8012bd8:	5499      	strb	r1, [r3, r2]

  hrtc->State = HAL_RTC_STATE_BUSY;
 8012bda:	68fb      	ldr	r3, [r7, #12]
 8012bdc:	2221      	movs	r2, #33	@ 0x21
 8012bde:	2102      	movs	r1, #2
 8012be0:	5499      	strb	r1, [r3, r2]

  /* Disable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_DISABLE(hrtc);
 8012be2:	68fb      	ldr	r3, [r7, #12]
 8012be4:	681b      	ldr	r3, [r3, #0]
 8012be6:	22ca      	movs	r2, #202	@ 0xca
 8012be8:	625a      	str	r2, [r3, #36]	@ 0x24
 8012bea:	68fb      	ldr	r3, [r7, #12]
 8012bec:	681b      	ldr	r3, [r3, #0]
 8012bee:	2253      	movs	r2, #83	@ 0x53
 8012bf0:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Check RTC WUTWF flag is reset only when wakeup timer enabled*/
  if ((hrtc->Instance->CR & RTC_CR_WUTE) != 0U)
 8012bf2:	68fb      	ldr	r3, [r7, #12]
 8012bf4:	681b      	ldr	r3, [r3, #0]
 8012bf6:	689a      	ldr	r2, [r3, #8]
 8012bf8:	2380      	movs	r3, #128	@ 0x80
 8012bfa:	00db      	lsls	r3, r3, #3
 8012bfc:	4013      	ands	r3, r2
 8012bfe:	d021      	beq.n	8012c44 <HAL_RTCEx_SetWakeUpTimer+0x90>
  {
    tickstart = HAL_GetTick();
 8012c00:	f7f9 f928 	bl	800be54 <HAL_GetTick>
 8012c04:	0003      	movs	r3, r0
 8012c06:	617b      	str	r3, [r7, #20]

    /* Wait till RTC WUTWF flag is reset and if timeout is reached exit */
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U)
 8012c08:	e016      	b.n	8012c38 <HAL_RTCEx_SetWakeUpTimer+0x84>
    {
      if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8012c0a:	f7f9 f923 	bl	800be54 <HAL_GetTick>
 8012c0e:	0002      	movs	r2, r0
 8012c10:	697b      	ldr	r3, [r7, #20]
 8012c12:	1ad2      	subs	r2, r2, r3
 8012c14:	23fa      	movs	r3, #250	@ 0xfa
 8012c16:	009b      	lsls	r3, r3, #2
 8012c18:	429a      	cmp	r2, r3
 8012c1a:	d90d      	bls.n	8012c38 <HAL_RTCEx_SetWakeUpTimer+0x84>
      {
        /* Enable the write protection for RTC registers */
        __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8012c1c:	68fb      	ldr	r3, [r7, #12]
 8012c1e:	681b      	ldr	r3, [r3, #0]
 8012c20:	22ff      	movs	r2, #255	@ 0xff
 8012c22:	625a      	str	r2, [r3, #36]	@ 0x24

        hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8012c24:	68fb      	ldr	r3, [r7, #12]
 8012c26:	2221      	movs	r2, #33	@ 0x21
 8012c28:	2103      	movs	r1, #3
 8012c2a:	5499      	strb	r1, [r3, r2]

        /* Process Unlocked */
        __HAL_UNLOCK(hrtc);
 8012c2c:	68fb      	ldr	r3, [r7, #12]
 8012c2e:	2220      	movs	r2, #32
 8012c30:	2100      	movs	r1, #0
 8012c32:	5499      	strb	r1, [r3, r2]

        return HAL_TIMEOUT;
 8012c34:	2303      	movs	r3, #3
 8012c36:	e063      	b.n	8012d00 <HAL_RTCEx_SetWakeUpTimer+0x14c>
    while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) != 0U)
 8012c38:	68fb      	ldr	r3, [r7, #12]
 8012c3a:	681b      	ldr	r3, [r3, #0]
 8012c3c:	68db      	ldr	r3, [r3, #12]
 8012c3e:	2204      	movs	r2, #4
 8012c40:	4013      	ands	r3, r2
 8012c42:	d1e2      	bne.n	8012c0a <HAL_RTCEx_SetWakeUpTimer+0x56>
      }
    }
  }

  /* Disable the Wakeup timer */
  __HAL_RTC_WAKEUPTIMER_DISABLE(hrtc);
 8012c44:	68fb      	ldr	r3, [r7, #12]
 8012c46:	681b      	ldr	r3, [r3, #0]
 8012c48:	689a      	ldr	r2, [r3, #8]
 8012c4a:	68fb      	ldr	r3, [r7, #12]
 8012c4c:	681b      	ldr	r3, [r3, #0]
 8012c4e:	492e      	ldr	r1, [pc, #184]	@ (8012d08 <HAL_RTCEx_SetWakeUpTimer+0x154>)
 8012c50:	400a      	ands	r2, r1
 8012c52:	609a      	str	r2, [r3, #8]

  /* Clear the Wakeup flag */
  __HAL_RTC_WAKEUPTIMER_CLEAR_FLAG(hrtc, RTC_FLAG_WUTF);
 8012c54:	68fb      	ldr	r3, [r7, #12]
 8012c56:	681b      	ldr	r3, [r3, #0]
 8012c58:	68db      	ldr	r3, [r3, #12]
 8012c5a:	22ff      	movs	r2, #255	@ 0xff
 8012c5c:	401a      	ands	r2, r3
 8012c5e:	68fb      	ldr	r3, [r7, #12]
 8012c60:	681b      	ldr	r3, [r3, #0]
 8012c62:	492a      	ldr	r1, [pc, #168]	@ (8012d0c <HAL_RTCEx_SetWakeUpTimer+0x158>)
 8012c64:	430a      	orrs	r2, r1
 8012c66:	60da      	str	r2, [r3, #12]

  /* Get tick */
  tickstart = HAL_GetTick();
 8012c68:	f7f9 f8f4 	bl	800be54 <HAL_GetTick>
 8012c6c:	0003      	movs	r3, r0
 8012c6e:	617b      	str	r3, [r7, #20]

  /* Wait till RTC WUTWF flag is set and if timeout is reached exit */
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8012c70:	e016      	b.n	8012ca0 <HAL_RTCEx_SetWakeUpTimer+0xec>
  {
    if ((HAL_GetTick() - tickstart) > RTC_TIMEOUT_VALUE)
 8012c72:	f7f9 f8ef 	bl	800be54 <HAL_GetTick>
 8012c76:	0002      	movs	r2, r0
 8012c78:	697b      	ldr	r3, [r7, #20]
 8012c7a:	1ad2      	subs	r2, r2, r3
 8012c7c:	23fa      	movs	r3, #250	@ 0xfa
 8012c7e:	009b      	lsls	r3, r3, #2
 8012c80:	429a      	cmp	r2, r3
 8012c82:	d90d      	bls.n	8012ca0 <HAL_RTCEx_SetWakeUpTimer+0xec>
    {
      /* Enable the write protection for RTC registers */
      __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8012c84:	68fb      	ldr	r3, [r7, #12]
 8012c86:	681b      	ldr	r3, [r3, #0]
 8012c88:	22ff      	movs	r2, #255	@ 0xff
 8012c8a:	625a      	str	r2, [r3, #36]	@ 0x24

      hrtc->State = HAL_RTC_STATE_TIMEOUT;
 8012c8c:	68fb      	ldr	r3, [r7, #12]
 8012c8e:	2221      	movs	r2, #33	@ 0x21
 8012c90:	2103      	movs	r1, #3
 8012c92:	5499      	strb	r1, [r3, r2]

      /* Process Unlocked */
      __HAL_UNLOCK(hrtc);
 8012c94:	68fb      	ldr	r3, [r7, #12]
 8012c96:	2220      	movs	r2, #32
 8012c98:	2100      	movs	r1, #0
 8012c9a:	5499      	strb	r1, [r3, r2]

      return HAL_TIMEOUT;
 8012c9c:	2303      	movs	r3, #3
 8012c9e:	e02f      	b.n	8012d00 <HAL_RTCEx_SetWakeUpTimer+0x14c>
  while (__HAL_RTC_WAKEUPTIMER_GET_FLAG(hrtc, RTC_FLAG_WUTWF) == 0U)
 8012ca0:	68fb      	ldr	r3, [r7, #12]
 8012ca2:	681b      	ldr	r3, [r3, #0]
 8012ca4:	68db      	ldr	r3, [r3, #12]
 8012ca6:	2204      	movs	r2, #4
 8012ca8:	4013      	ands	r3, r2
 8012caa:	d0e2      	beq.n	8012c72 <HAL_RTCEx_SetWakeUpTimer+0xbe>
    }
  }

  /* Clear the Wakeup Timer clock source bits in CR register */
  hrtc->Instance->CR &= (uint32_t)~RTC_CR_WUCKSEL;
 8012cac:	68fb      	ldr	r3, [r7, #12]
 8012cae:	681b      	ldr	r3, [r3, #0]
 8012cb0:	689a      	ldr	r2, [r3, #8]
 8012cb2:	68fb      	ldr	r3, [r7, #12]
 8012cb4:	681b      	ldr	r3, [r3, #0]
 8012cb6:	2107      	movs	r1, #7
 8012cb8:	438a      	bics	r2, r1
 8012cba:	609a      	str	r2, [r3, #8]

  /* Configure the clock source */
  hrtc->Instance->CR |= (uint32_t)WakeUpClock;
 8012cbc:	68fb      	ldr	r3, [r7, #12]
 8012cbe:	681b      	ldr	r3, [r3, #0]
 8012cc0:	6899      	ldr	r1, [r3, #8]
 8012cc2:	68fb      	ldr	r3, [r7, #12]
 8012cc4:	681b      	ldr	r3, [r3, #0]
 8012cc6:	687a      	ldr	r2, [r7, #4]
 8012cc8:	430a      	orrs	r2, r1
 8012cca:	609a      	str	r2, [r3, #8]

  /* Configure the Wakeup Timer counter */
  hrtc->Instance->WUTR = (uint32_t)WakeUpCounter;
 8012ccc:	68fb      	ldr	r3, [r7, #12]
 8012cce:	681b      	ldr	r3, [r3, #0]
 8012cd0:	68ba      	ldr	r2, [r7, #8]
 8012cd2:	615a      	str	r2, [r3, #20]

  /* Enable the Wakeup Timer */
  __HAL_RTC_WAKEUPTIMER_ENABLE(hrtc);
 8012cd4:	68fb      	ldr	r3, [r7, #12]
 8012cd6:	681b      	ldr	r3, [r3, #0]
 8012cd8:	689a      	ldr	r2, [r3, #8]
 8012cda:	68fb      	ldr	r3, [r7, #12]
 8012cdc:	681b      	ldr	r3, [r3, #0]
 8012cde:	2180      	movs	r1, #128	@ 0x80
 8012ce0:	00c9      	lsls	r1, r1, #3
 8012ce2:	430a      	orrs	r2, r1
 8012ce4:	609a      	str	r2, [r3, #8]

  /* Enable the write protection for RTC registers */
  __HAL_RTC_WRITEPROTECTION_ENABLE(hrtc);
 8012ce6:	68fb      	ldr	r3, [r7, #12]
 8012ce8:	681b      	ldr	r3, [r3, #0]
 8012cea:	22ff      	movs	r2, #255	@ 0xff
 8012cec:	625a      	str	r2, [r3, #36]	@ 0x24

  hrtc->State = HAL_RTC_STATE_READY;
 8012cee:	68fb      	ldr	r3, [r7, #12]
 8012cf0:	2221      	movs	r2, #33	@ 0x21
 8012cf2:	2101      	movs	r1, #1
 8012cf4:	5499      	strb	r1, [r3, r2]

  /* Process Unlocked */
  __HAL_UNLOCK(hrtc);
 8012cf6:	68fb      	ldr	r3, [r7, #12]
 8012cf8:	2220      	movs	r2, #32
 8012cfa:	2100      	movs	r1, #0
 8012cfc:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8012cfe:	2300      	movs	r3, #0
}
 8012d00:	0018      	movs	r0, r3
 8012d02:	46bd      	mov	sp, r7
 8012d04:	b006      	add	sp, #24
 8012d06:	bd80      	pop	{r7, pc}
 8012d08:	fffffbff 	.word	0xfffffbff
 8012d0c:	fffffb7f 	.word	0xfffffb7f

08012d10 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8012d10:	b580      	push	{r7, lr}
 8012d12:	b082      	sub	sp, #8
 8012d14:	af00      	add	r7, sp, #0
 8012d16:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012d18:	687b      	ldr	r3, [r7, #4]
 8012d1a:	2b00      	cmp	r3, #0
 8012d1c:	d101      	bne.n	8012d22 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8012d1e:	2301      	movs	r3, #1
 8012d20:	e032      	b.n	8012d88 <HAL_TIM_Base_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8012d22:	687b      	ldr	r3, [r7, #4]
 8012d24:	2239      	movs	r2, #57	@ 0x39
 8012d26:	5c9b      	ldrb	r3, [r3, r2]
 8012d28:	b2db      	uxtb	r3, r3
 8012d2a:	2b00      	cmp	r3, #0
 8012d2c:	d107      	bne.n	8012d3e <HAL_TIM_Base_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8012d2e:	687b      	ldr	r3, [r7, #4]
 8012d30:	2238      	movs	r2, #56	@ 0x38
 8012d32:	2100      	movs	r1, #0
 8012d34:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8012d36:	687b      	ldr	r3, [r7, #4]
 8012d38:	0018      	movs	r0, r3
 8012d3a:	f7f8 fa47 	bl	800b1cc <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012d3e:	687b      	ldr	r3, [r7, #4]
 8012d40:	2239      	movs	r2, #57	@ 0x39
 8012d42:	2102      	movs	r1, #2
 8012d44:	5499      	strb	r1, [r3, r2]

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012d46:	687b      	ldr	r3, [r7, #4]
 8012d48:	681a      	ldr	r2, [r3, #0]
 8012d4a:	687b      	ldr	r3, [r7, #4]
 8012d4c:	3304      	adds	r3, #4
 8012d4e:	0019      	movs	r1, r3
 8012d50:	0010      	movs	r0, r2
 8012d52:	f000 fa1d 	bl	8013190 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8012d56:	687b      	ldr	r3, [r7, #4]
 8012d58:	223e      	movs	r2, #62	@ 0x3e
 8012d5a:	2101      	movs	r1, #1
 8012d5c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012d5e:	687b      	ldr	r3, [r7, #4]
 8012d60:	223a      	movs	r2, #58	@ 0x3a
 8012d62:	2101      	movs	r1, #1
 8012d64:	5499      	strb	r1, [r3, r2]
 8012d66:	687b      	ldr	r3, [r7, #4]
 8012d68:	223b      	movs	r2, #59	@ 0x3b
 8012d6a:	2101      	movs	r1, #1
 8012d6c:	5499      	strb	r1, [r3, r2]
 8012d6e:	687b      	ldr	r3, [r7, #4]
 8012d70:	223c      	movs	r2, #60	@ 0x3c
 8012d72:	2101      	movs	r1, #1
 8012d74:	5499      	strb	r1, [r3, r2]
 8012d76:	687b      	ldr	r3, [r7, #4]
 8012d78:	223d      	movs	r2, #61	@ 0x3d
 8012d7a:	2101      	movs	r1, #1
 8012d7c:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012d7e:	687b      	ldr	r3, [r7, #4]
 8012d80:	2239      	movs	r2, #57	@ 0x39
 8012d82:	2101      	movs	r1, #1
 8012d84:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8012d86:	2300      	movs	r3, #0
}
 8012d88:	0018      	movs	r0, r3
 8012d8a:	46bd      	mov	sp, r7
 8012d8c:	b002      	add	sp, #8
 8012d8e:	bd80      	pop	{r7, pc}

08012d90 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8012d90:	b580      	push	{r7, lr}
 8012d92:	b084      	sub	sp, #16
 8012d94:	af00      	add	r7, sp, #0
 8012d96:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8012d98:	687b      	ldr	r3, [r7, #4]
 8012d9a:	2239      	movs	r2, #57	@ 0x39
 8012d9c:	5c9b      	ldrb	r3, [r3, r2]
 8012d9e:	b2db      	uxtb	r3, r3
 8012da0:	2b01      	cmp	r3, #1
 8012da2:	d001      	beq.n	8012da8 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8012da4:	2301      	movs	r3, #1
 8012da6:	e033      	b.n	8012e10 <HAL_TIM_Base_Start+0x80>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012da8:	687b      	ldr	r3, [r7, #4]
 8012daa:	2239      	movs	r2, #57	@ 0x39
 8012dac:	2102      	movs	r1, #2
 8012dae:	5499      	strb	r1, [r3, r2]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012db0:	687b      	ldr	r3, [r7, #4]
 8012db2:	681a      	ldr	r2, [r3, #0]
 8012db4:	2380      	movs	r3, #128	@ 0x80
 8012db6:	05db      	lsls	r3, r3, #23
 8012db8:	429a      	cmp	r2, r3
 8012dba:	d00e      	beq.n	8012dda <HAL_TIM_Base_Start+0x4a>
 8012dbc:	687b      	ldr	r3, [r7, #4]
 8012dbe:	681b      	ldr	r3, [r3, #0]
 8012dc0:	4a15      	ldr	r2, [pc, #84]	@ (8012e18 <HAL_TIM_Base_Start+0x88>)
 8012dc2:	4293      	cmp	r3, r2
 8012dc4:	d009      	beq.n	8012dda <HAL_TIM_Base_Start+0x4a>
 8012dc6:	687b      	ldr	r3, [r7, #4]
 8012dc8:	681b      	ldr	r3, [r3, #0]
 8012dca:	4a14      	ldr	r2, [pc, #80]	@ (8012e1c <HAL_TIM_Base_Start+0x8c>)
 8012dcc:	4293      	cmp	r3, r2
 8012dce:	d004      	beq.n	8012dda <HAL_TIM_Base_Start+0x4a>
 8012dd0:	687b      	ldr	r3, [r7, #4]
 8012dd2:	681b      	ldr	r3, [r3, #0]
 8012dd4:	4a12      	ldr	r2, [pc, #72]	@ (8012e20 <HAL_TIM_Base_Start+0x90>)
 8012dd6:	4293      	cmp	r3, r2
 8012dd8:	d111      	bne.n	8012dfe <HAL_TIM_Base_Start+0x6e>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012dda:	687b      	ldr	r3, [r7, #4]
 8012ddc:	681b      	ldr	r3, [r3, #0]
 8012dde:	689b      	ldr	r3, [r3, #8]
 8012de0:	2207      	movs	r2, #7
 8012de2:	4013      	ands	r3, r2
 8012de4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012de6:	68fb      	ldr	r3, [r7, #12]
 8012de8:	2b06      	cmp	r3, #6
 8012dea:	d010      	beq.n	8012e0e <HAL_TIM_Base_Start+0x7e>
    {
      __HAL_TIM_ENABLE(htim);
 8012dec:	687b      	ldr	r3, [r7, #4]
 8012dee:	681b      	ldr	r3, [r3, #0]
 8012df0:	681a      	ldr	r2, [r3, #0]
 8012df2:	687b      	ldr	r3, [r7, #4]
 8012df4:	681b      	ldr	r3, [r3, #0]
 8012df6:	2101      	movs	r1, #1
 8012df8:	430a      	orrs	r2, r1
 8012dfa:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012dfc:	e007      	b.n	8012e0e <HAL_TIM_Base_Start+0x7e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8012dfe:	687b      	ldr	r3, [r7, #4]
 8012e00:	681b      	ldr	r3, [r3, #0]
 8012e02:	681a      	ldr	r2, [r3, #0]
 8012e04:	687b      	ldr	r3, [r7, #4]
 8012e06:	681b      	ldr	r3, [r3, #0]
 8012e08:	2101      	movs	r1, #1
 8012e0a:	430a      	orrs	r2, r1
 8012e0c:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8012e0e:	2300      	movs	r3, #0
}
 8012e10:	0018      	movs	r0, r3
 8012e12:	46bd      	mov	sp, r7
 8012e14:	b004      	add	sp, #16
 8012e16:	bd80      	pop	{r7, pc}
 8012e18:	40000400 	.word	0x40000400
 8012e1c:	40010800 	.word	0x40010800
 8012e20:	40011400 	.word	0x40011400

08012e24 <HAL_TIM_Base_Stop>:
  * @brief  Stops the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Stop(TIM_HandleTypeDef *htim)
{
 8012e24:	b580      	push	{r7, lr}
 8012e26:	b082      	sub	sp, #8
 8012e28:	af00      	add	r7, sp, #0
 8012e2a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Disable the Peripheral */
  __HAL_TIM_DISABLE(htim);
 8012e2c:	687b      	ldr	r3, [r7, #4]
 8012e2e:	681b      	ldr	r3, [r3, #0]
 8012e30:	6a1b      	ldr	r3, [r3, #32]
 8012e32:	4a0a      	ldr	r2, [pc, #40]	@ (8012e5c <HAL_TIM_Base_Stop+0x38>)
 8012e34:	4013      	ands	r3, r2
 8012e36:	d107      	bne.n	8012e48 <HAL_TIM_Base_Stop+0x24>
 8012e38:	687b      	ldr	r3, [r7, #4]
 8012e3a:	681b      	ldr	r3, [r3, #0]
 8012e3c:	681a      	ldr	r2, [r3, #0]
 8012e3e:	687b      	ldr	r3, [r7, #4]
 8012e40:	681b      	ldr	r3, [r3, #0]
 8012e42:	2101      	movs	r1, #1
 8012e44:	438a      	bics	r2, r1
 8012e46:	601a      	str	r2, [r3, #0]

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_READY;
 8012e48:	687b      	ldr	r3, [r7, #4]
 8012e4a:	2239      	movs	r2, #57	@ 0x39
 8012e4c:	2101      	movs	r1, #1
 8012e4e:	5499      	strb	r1, [r3, r2]

  /* Return function status */
  return HAL_OK;
 8012e50:	2300      	movs	r3, #0
}
 8012e52:	0018      	movs	r0, r3
 8012e54:	46bd      	mov	sp, r7
 8012e56:	b002      	add	sp, #8
 8012e58:	bd80      	pop	{r7, pc}
 8012e5a:	46c0      	nop			@ (mov r8, r8)
 8012e5c:	00001111 	.word	0x00001111

08012e60 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8012e60:	b580      	push	{r7, lr}
 8012e62:	b082      	sub	sp, #8
 8012e64:	af00      	add	r7, sp, #0
 8012e66:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8012e68:	687b      	ldr	r3, [r7, #4]
 8012e6a:	2b00      	cmp	r3, #0
 8012e6c:	d101      	bne.n	8012e72 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8012e6e:	2301      	movs	r3, #1
 8012e70:	e032      	b.n	8012ed8 <HAL_TIM_PWM_Init+0x78>
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_PERIOD(htim->Init.Period));
  assert_param(IS_TIM_PRESCALER(htim->Init.Prescaler));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8012e72:	687b      	ldr	r3, [r7, #4]
 8012e74:	2239      	movs	r2, #57	@ 0x39
 8012e76:	5c9b      	ldrb	r3, [r3, r2]
 8012e78:	b2db      	uxtb	r3, r3
 8012e7a:	2b00      	cmp	r3, #0
 8012e7c:	d107      	bne.n	8012e8e <HAL_TIM_PWM_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8012e7e:	687b      	ldr	r3, [r7, #4]
 8012e80:	2238      	movs	r2, #56	@ 0x38
 8012e82:	2100      	movs	r1, #0
 8012e84:	5499      	strb	r1, [r3, r2]
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8012e86:	687b      	ldr	r3, [r7, #4]
 8012e88:	0018      	movs	r0, r3
 8012e8a:	f7f8 f97b 	bl	800b184 <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8012e8e:	687b      	ldr	r3, [r7, #4]
 8012e90:	2239      	movs	r2, #57	@ 0x39
 8012e92:	2102      	movs	r1, #2
 8012e94:	5499      	strb	r1, [r3, r2]

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8012e96:	687b      	ldr	r3, [r7, #4]
 8012e98:	681a      	ldr	r2, [r3, #0]
 8012e9a:	687b      	ldr	r3, [r7, #4]
 8012e9c:	3304      	adds	r3, #4
 8012e9e:	0019      	movs	r1, r3
 8012ea0:	0010      	movs	r0, r2
 8012ea2:	f000 f975 	bl	8013190 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8012ea6:	687b      	ldr	r3, [r7, #4]
 8012ea8:	223e      	movs	r2, #62	@ 0x3e
 8012eaa:	2101      	movs	r1, #1
 8012eac:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8012eae:	687b      	ldr	r3, [r7, #4]
 8012eb0:	223a      	movs	r2, #58	@ 0x3a
 8012eb2:	2101      	movs	r1, #1
 8012eb4:	5499      	strb	r1, [r3, r2]
 8012eb6:	687b      	ldr	r3, [r7, #4]
 8012eb8:	223b      	movs	r2, #59	@ 0x3b
 8012eba:	2101      	movs	r1, #1
 8012ebc:	5499      	strb	r1, [r3, r2]
 8012ebe:	687b      	ldr	r3, [r7, #4]
 8012ec0:	223c      	movs	r2, #60	@ 0x3c
 8012ec2:	2101      	movs	r1, #1
 8012ec4:	5499      	strb	r1, [r3, r2]
 8012ec6:	687b      	ldr	r3, [r7, #4]
 8012ec8:	223d      	movs	r2, #61	@ 0x3d
 8012eca:	2101      	movs	r1, #1
 8012ecc:	5499      	strb	r1, [r3, r2]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8012ece:	687b      	ldr	r3, [r7, #4]
 8012ed0:	2239      	movs	r2, #57	@ 0x39
 8012ed2:	2101      	movs	r1, #1
 8012ed4:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8012ed6:	2300      	movs	r3, #0
}
 8012ed8:	0018      	movs	r0, r3
 8012eda:	46bd      	mov	sp, r7
 8012edc:	b002      	add	sp, #8
 8012ede:	bd80      	pop	{r7, pc}

08012ee0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8012ee0:	b580      	push	{r7, lr}
 8012ee2:	b084      	sub	sp, #16
 8012ee4:	af00      	add	r7, sp, #0
 8012ee6:	6078      	str	r0, [r7, #4]
 8012ee8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8012eea:	683b      	ldr	r3, [r7, #0]
 8012eec:	2b00      	cmp	r3, #0
 8012eee:	d108      	bne.n	8012f02 <HAL_TIM_PWM_Start+0x22>
 8012ef0:	687b      	ldr	r3, [r7, #4]
 8012ef2:	223a      	movs	r2, #58	@ 0x3a
 8012ef4:	5c9b      	ldrb	r3, [r3, r2]
 8012ef6:	b2db      	uxtb	r3, r3
 8012ef8:	3b01      	subs	r3, #1
 8012efa:	1e5a      	subs	r2, r3, #1
 8012efc:	4193      	sbcs	r3, r2
 8012efe:	b2db      	uxtb	r3, r3
 8012f00:	e01f      	b.n	8012f42 <HAL_TIM_PWM_Start+0x62>
 8012f02:	683b      	ldr	r3, [r7, #0]
 8012f04:	2b04      	cmp	r3, #4
 8012f06:	d108      	bne.n	8012f1a <HAL_TIM_PWM_Start+0x3a>
 8012f08:	687b      	ldr	r3, [r7, #4]
 8012f0a:	223b      	movs	r2, #59	@ 0x3b
 8012f0c:	5c9b      	ldrb	r3, [r3, r2]
 8012f0e:	b2db      	uxtb	r3, r3
 8012f10:	3b01      	subs	r3, #1
 8012f12:	1e5a      	subs	r2, r3, #1
 8012f14:	4193      	sbcs	r3, r2
 8012f16:	b2db      	uxtb	r3, r3
 8012f18:	e013      	b.n	8012f42 <HAL_TIM_PWM_Start+0x62>
 8012f1a:	683b      	ldr	r3, [r7, #0]
 8012f1c:	2b08      	cmp	r3, #8
 8012f1e:	d108      	bne.n	8012f32 <HAL_TIM_PWM_Start+0x52>
 8012f20:	687b      	ldr	r3, [r7, #4]
 8012f22:	223c      	movs	r2, #60	@ 0x3c
 8012f24:	5c9b      	ldrb	r3, [r3, r2]
 8012f26:	b2db      	uxtb	r3, r3
 8012f28:	3b01      	subs	r3, #1
 8012f2a:	1e5a      	subs	r2, r3, #1
 8012f2c:	4193      	sbcs	r3, r2
 8012f2e:	b2db      	uxtb	r3, r3
 8012f30:	e007      	b.n	8012f42 <HAL_TIM_PWM_Start+0x62>
 8012f32:	687b      	ldr	r3, [r7, #4]
 8012f34:	223d      	movs	r2, #61	@ 0x3d
 8012f36:	5c9b      	ldrb	r3, [r3, r2]
 8012f38:	b2db      	uxtb	r3, r3
 8012f3a:	3b01      	subs	r3, #1
 8012f3c:	1e5a      	subs	r2, r3, #1
 8012f3e:	4193      	sbcs	r3, r2
 8012f40:	b2db      	uxtb	r3, r3
 8012f42:	2b00      	cmp	r3, #0
 8012f44:	d001      	beq.n	8012f4a <HAL_TIM_PWM_Start+0x6a>
  {
    return HAL_ERROR;
 8012f46:	2301      	movs	r3, #1
 8012f48:	e052      	b.n	8012ff0 <HAL_TIM_PWM_Start+0x110>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8012f4a:	683b      	ldr	r3, [r7, #0]
 8012f4c:	2b00      	cmp	r3, #0
 8012f4e:	d104      	bne.n	8012f5a <HAL_TIM_PWM_Start+0x7a>
 8012f50:	687b      	ldr	r3, [r7, #4]
 8012f52:	223a      	movs	r2, #58	@ 0x3a
 8012f54:	2102      	movs	r1, #2
 8012f56:	5499      	strb	r1, [r3, r2]
 8012f58:	e013      	b.n	8012f82 <HAL_TIM_PWM_Start+0xa2>
 8012f5a:	683b      	ldr	r3, [r7, #0]
 8012f5c:	2b04      	cmp	r3, #4
 8012f5e:	d104      	bne.n	8012f6a <HAL_TIM_PWM_Start+0x8a>
 8012f60:	687b      	ldr	r3, [r7, #4]
 8012f62:	223b      	movs	r2, #59	@ 0x3b
 8012f64:	2102      	movs	r1, #2
 8012f66:	5499      	strb	r1, [r3, r2]
 8012f68:	e00b      	b.n	8012f82 <HAL_TIM_PWM_Start+0xa2>
 8012f6a:	683b      	ldr	r3, [r7, #0]
 8012f6c:	2b08      	cmp	r3, #8
 8012f6e:	d104      	bne.n	8012f7a <HAL_TIM_PWM_Start+0x9a>
 8012f70:	687b      	ldr	r3, [r7, #4]
 8012f72:	223c      	movs	r2, #60	@ 0x3c
 8012f74:	2102      	movs	r1, #2
 8012f76:	5499      	strb	r1, [r3, r2]
 8012f78:	e003      	b.n	8012f82 <HAL_TIM_PWM_Start+0xa2>
 8012f7a:	687b      	ldr	r3, [r7, #4]
 8012f7c:	223d      	movs	r2, #61	@ 0x3d
 8012f7e:	2102      	movs	r1, #2
 8012f80:	5499      	strb	r1, [r3, r2]

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8012f82:	687b      	ldr	r3, [r7, #4]
 8012f84:	681b      	ldr	r3, [r3, #0]
 8012f86:	6839      	ldr	r1, [r7, #0]
 8012f88:	2201      	movs	r2, #1
 8012f8a:	0018      	movs	r0, r3
 8012f8c:	f000 fa62 	bl	8013454 <TIM_CCxChannelCmd>

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8012f90:	687b      	ldr	r3, [r7, #4]
 8012f92:	681a      	ldr	r2, [r3, #0]
 8012f94:	2380      	movs	r3, #128	@ 0x80
 8012f96:	05db      	lsls	r3, r3, #23
 8012f98:	429a      	cmp	r2, r3
 8012f9a:	d00e      	beq.n	8012fba <HAL_TIM_PWM_Start+0xda>
 8012f9c:	687b      	ldr	r3, [r7, #4]
 8012f9e:	681b      	ldr	r3, [r3, #0]
 8012fa0:	4a15      	ldr	r2, [pc, #84]	@ (8012ff8 <HAL_TIM_PWM_Start+0x118>)
 8012fa2:	4293      	cmp	r3, r2
 8012fa4:	d009      	beq.n	8012fba <HAL_TIM_PWM_Start+0xda>
 8012fa6:	687b      	ldr	r3, [r7, #4]
 8012fa8:	681b      	ldr	r3, [r3, #0]
 8012faa:	4a14      	ldr	r2, [pc, #80]	@ (8012ffc <HAL_TIM_PWM_Start+0x11c>)
 8012fac:	4293      	cmp	r3, r2
 8012fae:	d004      	beq.n	8012fba <HAL_TIM_PWM_Start+0xda>
 8012fb0:	687b      	ldr	r3, [r7, #4]
 8012fb2:	681b      	ldr	r3, [r3, #0]
 8012fb4:	4a12      	ldr	r2, [pc, #72]	@ (8013000 <HAL_TIM_PWM_Start+0x120>)
 8012fb6:	4293      	cmp	r3, r2
 8012fb8:	d111      	bne.n	8012fde <HAL_TIM_PWM_Start+0xfe>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8012fba:	687b      	ldr	r3, [r7, #4]
 8012fbc:	681b      	ldr	r3, [r3, #0]
 8012fbe:	689b      	ldr	r3, [r3, #8]
 8012fc0:	2207      	movs	r2, #7
 8012fc2:	4013      	ands	r3, r2
 8012fc4:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012fc6:	68fb      	ldr	r3, [r7, #12]
 8012fc8:	2b06      	cmp	r3, #6
 8012fca:	d010      	beq.n	8012fee <HAL_TIM_PWM_Start+0x10e>
    {
      __HAL_TIM_ENABLE(htim);
 8012fcc:	687b      	ldr	r3, [r7, #4]
 8012fce:	681b      	ldr	r3, [r3, #0]
 8012fd0:	681a      	ldr	r2, [r3, #0]
 8012fd2:	687b      	ldr	r3, [r7, #4]
 8012fd4:	681b      	ldr	r3, [r3, #0]
 8012fd6:	2101      	movs	r1, #1
 8012fd8:	430a      	orrs	r2, r1
 8012fda:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8012fdc:	e007      	b.n	8012fee <HAL_TIM_PWM_Start+0x10e>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8012fde:	687b      	ldr	r3, [r7, #4]
 8012fe0:	681b      	ldr	r3, [r3, #0]
 8012fe2:	681a      	ldr	r2, [r3, #0]
 8012fe4:	687b      	ldr	r3, [r7, #4]
 8012fe6:	681b      	ldr	r3, [r3, #0]
 8012fe8:	2101      	movs	r1, #1
 8012fea:	430a      	orrs	r2, r1
 8012fec:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8012fee:	2300      	movs	r3, #0
}
 8012ff0:	0018      	movs	r0, r3
 8012ff2:	46bd      	mov	sp, r7
 8012ff4:	b004      	add	sp, #16
 8012ff6:	bd80      	pop	{r7, pc}
 8012ff8:	40000400 	.word	0x40000400
 8012ffc:	40010800 	.word	0x40010800
 8013000:	40011400 	.word	0x40011400

08013004 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            const TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8013004:	b580      	push	{r7, lr}
 8013006:	b086      	sub	sp, #24
 8013008:	af00      	add	r7, sp, #0
 801300a:	60f8      	str	r0, [r7, #12]
 801300c:	60b9      	str	r1, [r7, #8]
 801300e:	607a      	str	r2, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8013010:	2317      	movs	r3, #23
 8013012:	18fb      	adds	r3, r7, r3
 8013014:	2200      	movs	r2, #0
 8013016:	701a      	strb	r2, [r3, #0]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8013018:	68fb      	ldr	r3, [r7, #12]
 801301a:	2238      	movs	r2, #56	@ 0x38
 801301c:	5c9b      	ldrb	r3, [r3, r2]
 801301e:	2b01      	cmp	r3, #1
 8013020:	d101      	bne.n	8013026 <HAL_TIM_PWM_ConfigChannel+0x22>
 8013022:	2302      	movs	r3, #2
 8013024:	e0ad      	b.n	8013182 <HAL_TIM_PWM_ConfigChannel+0x17e>
 8013026:	68fb      	ldr	r3, [r7, #12]
 8013028:	2238      	movs	r2, #56	@ 0x38
 801302a:	2101      	movs	r1, #1
 801302c:	5499      	strb	r1, [r3, r2]

  switch (Channel)
 801302e:	687b      	ldr	r3, [r7, #4]
 8013030:	2b0c      	cmp	r3, #12
 8013032:	d100      	bne.n	8013036 <HAL_TIM_PWM_ConfigChannel+0x32>
 8013034:	e076      	b.n	8013124 <HAL_TIM_PWM_ConfigChannel+0x120>
 8013036:	687b      	ldr	r3, [r7, #4]
 8013038:	2b0c      	cmp	r3, #12
 801303a:	d900      	bls.n	801303e <HAL_TIM_PWM_ConfigChannel+0x3a>
 801303c:	e095      	b.n	801316a <HAL_TIM_PWM_ConfigChannel+0x166>
 801303e:	687b      	ldr	r3, [r7, #4]
 8013040:	2b08      	cmp	r3, #8
 8013042:	d04e      	beq.n	80130e2 <HAL_TIM_PWM_ConfigChannel+0xde>
 8013044:	687b      	ldr	r3, [r7, #4]
 8013046:	2b08      	cmp	r3, #8
 8013048:	d900      	bls.n	801304c <HAL_TIM_PWM_ConfigChannel+0x48>
 801304a:	e08e      	b.n	801316a <HAL_TIM_PWM_ConfigChannel+0x166>
 801304c:	687b      	ldr	r3, [r7, #4]
 801304e:	2b00      	cmp	r3, #0
 8013050:	d003      	beq.n	801305a <HAL_TIM_PWM_ConfigChannel+0x56>
 8013052:	687b      	ldr	r3, [r7, #4]
 8013054:	2b04      	cmp	r3, #4
 8013056:	d021      	beq.n	801309c <HAL_TIM_PWM_ConfigChannel+0x98>
 8013058:	e087      	b.n	801316a <HAL_TIM_PWM_ConfigChannel+0x166>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 801305a:	68fb      	ldr	r3, [r7, #12]
 801305c:	681b      	ldr	r3, [r3, #0]
 801305e:	68ba      	ldr	r2, [r7, #8]
 8013060:	0011      	movs	r1, r2
 8013062:	0018      	movs	r0, r3
 8013064:	f000 f8f2 	bl	801324c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8013068:	68fb      	ldr	r3, [r7, #12]
 801306a:	681b      	ldr	r3, [r3, #0]
 801306c:	699a      	ldr	r2, [r3, #24]
 801306e:	68fb      	ldr	r3, [r7, #12]
 8013070:	681b      	ldr	r3, [r3, #0]
 8013072:	2108      	movs	r1, #8
 8013074:	430a      	orrs	r2, r1
 8013076:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8013078:	68fb      	ldr	r3, [r7, #12]
 801307a:	681b      	ldr	r3, [r3, #0]
 801307c:	699a      	ldr	r2, [r3, #24]
 801307e:	68fb      	ldr	r3, [r7, #12]
 8013080:	681b      	ldr	r3, [r3, #0]
 8013082:	2104      	movs	r1, #4
 8013084:	438a      	bics	r2, r1
 8013086:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8013088:	68fb      	ldr	r3, [r7, #12]
 801308a:	681b      	ldr	r3, [r3, #0]
 801308c:	6999      	ldr	r1, [r3, #24]
 801308e:	68bb      	ldr	r3, [r7, #8]
 8013090:	68da      	ldr	r2, [r3, #12]
 8013092:	68fb      	ldr	r3, [r7, #12]
 8013094:	681b      	ldr	r3, [r3, #0]
 8013096:	430a      	orrs	r2, r1
 8013098:	619a      	str	r2, [r3, #24]
      break;
 801309a:	e06b      	b.n	8013174 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 801309c:	68fb      	ldr	r3, [r7, #12]
 801309e:	681b      	ldr	r3, [r3, #0]
 80130a0:	68ba      	ldr	r2, [r7, #8]
 80130a2:	0011      	movs	r1, r2
 80130a4:	0018      	movs	r0, r3
 80130a6:	f000 f90d 	bl	80132c4 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80130aa:	68fb      	ldr	r3, [r7, #12]
 80130ac:	681b      	ldr	r3, [r3, #0]
 80130ae:	699a      	ldr	r2, [r3, #24]
 80130b0:	68fb      	ldr	r3, [r7, #12]
 80130b2:	681b      	ldr	r3, [r3, #0]
 80130b4:	2180      	movs	r1, #128	@ 0x80
 80130b6:	0109      	lsls	r1, r1, #4
 80130b8:	430a      	orrs	r2, r1
 80130ba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80130bc:	68fb      	ldr	r3, [r7, #12]
 80130be:	681b      	ldr	r3, [r3, #0]
 80130c0:	699a      	ldr	r2, [r3, #24]
 80130c2:	68fb      	ldr	r3, [r7, #12]
 80130c4:	681b      	ldr	r3, [r3, #0]
 80130c6:	4931      	ldr	r1, [pc, #196]	@ (801318c <HAL_TIM_PWM_ConfigChannel+0x188>)
 80130c8:	400a      	ands	r2, r1
 80130ca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80130cc:	68fb      	ldr	r3, [r7, #12]
 80130ce:	681b      	ldr	r3, [r3, #0]
 80130d0:	6999      	ldr	r1, [r3, #24]
 80130d2:	68bb      	ldr	r3, [r7, #8]
 80130d4:	68db      	ldr	r3, [r3, #12]
 80130d6:	021a      	lsls	r2, r3, #8
 80130d8:	68fb      	ldr	r3, [r7, #12]
 80130da:	681b      	ldr	r3, [r3, #0]
 80130dc:	430a      	orrs	r2, r1
 80130de:	619a      	str	r2, [r3, #24]
      break;
 80130e0:	e048      	b.n	8013174 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80130e2:	68fb      	ldr	r3, [r7, #12]
 80130e4:	681b      	ldr	r3, [r3, #0]
 80130e6:	68ba      	ldr	r2, [r7, #8]
 80130e8:	0011      	movs	r1, r2
 80130ea:	0018      	movs	r0, r3
 80130ec:	f000 f92c 	bl	8013348 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80130f0:	68fb      	ldr	r3, [r7, #12]
 80130f2:	681b      	ldr	r3, [r3, #0]
 80130f4:	69da      	ldr	r2, [r3, #28]
 80130f6:	68fb      	ldr	r3, [r7, #12]
 80130f8:	681b      	ldr	r3, [r3, #0]
 80130fa:	2108      	movs	r1, #8
 80130fc:	430a      	orrs	r2, r1
 80130fe:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8013100:	68fb      	ldr	r3, [r7, #12]
 8013102:	681b      	ldr	r3, [r3, #0]
 8013104:	69da      	ldr	r2, [r3, #28]
 8013106:	68fb      	ldr	r3, [r7, #12]
 8013108:	681b      	ldr	r3, [r3, #0]
 801310a:	2104      	movs	r1, #4
 801310c:	438a      	bics	r2, r1
 801310e:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8013110:	68fb      	ldr	r3, [r7, #12]
 8013112:	681b      	ldr	r3, [r3, #0]
 8013114:	69d9      	ldr	r1, [r3, #28]
 8013116:	68bb      	ldr	r3, [r7, #8]
 8013118:	68da      	ldr	r2, [r3, #12]
 801311a:	68fb      	ldr	r3, [r7, #12]
 801311c:	681b      	ldr	r3, [r3, #0]
 801311e:	430a      	orrs	r2, r1
 8013120:	61da      	str	r2, [r3, #28]
      break;
 8013122:	e027      	b.n	8013174 <HAL_TIM_PWM_ConfigChannel+0x170>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8013124:	68fb      	ldr	r3, [r7, #12]
 8013126:	681b      	ldr	r3, [r3, #0]
 8013128:	68ba      	ldr	r2, [r7, #8]
 801312a:	0011      	movs	r1, r2
 801312c:	0018      	movs	r0, r3
 801312e:	f000 f94b 	bl	80133c8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8013132:	68fb      	ldr	r3, [r7, #12]
 8013134:	681b      	ldr	r3, [r3, #0]
 8013136:	69da      	ldr	r2, [r3, #28]
 8013138:	68fb      	ldr	r3, [r7, #12]
 801313a:	681b      	ldr	r3, [r3, #0]
 801313c:	2180      	movs	r1, #128	@ 0x80
 801313e:	0109      	lsls	r1, r1, #4
 8013140:	430a      	orrs	r2, r1
 8013142:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8013144:	68fb      	ldr	r3, [r7, #12]
 8013146:	681b      	ldr	r3, [r3, #0]
 8013148:	69da      	ldr	r2, [r3, #28]
 801314a:	68fb      	ldr	r3, [r7, #12]
 801314c:	681b      	ldr	r3, [r3, #0]
 801314e:	490f      	ldr	r1, [pc, #60]	@ (801318c <HAL_TIM_PWM_ConfigChannel+0x188>)
 8013150:	400a      	ands	r2, r1
 8013152:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8013154:	68fb      	ldr	r3, [r7, #12]
 8013156:	681b      	ldr	r3, [r3, #0]
 8013158:	69d9      	ldr	r1, [r3, #28]
 801315a:	68bb      	ldr	r3, [r7, #8]
 801315c:	68db      	ldr	r3, [r3, #12]
 801315e:	021a      	lsls	r2, r3, #8
 8013160:	68fb      	ldr	r3, [r7, #12]
 8013162:	681b      	ldr	r3, [r3, #0]
 8013164:	430a      	orrs	r2, r1
 8013166:	61da      	str	r2, [r3, #28]
      break;
 8013168:	e004      	b.n	8013174 <HAL_TIM_PWM_ConfigChannel+0x170>
    }

    default:
      status = HAL_ERROR;
 801316a:	2317      	movs	r3, #23
 801316c:	18fb      	adds	r3, r7, r3
 801316e:	2201      	movs	r2, #1
 8013170:	701a      	strb	r2, [r3, #0]
      break;
 8013172:	46c0      	nop			@ (mov r8, r8)
  }

  __HAL_UNLOCK(htim);
 8013174:	68fb      	ldr	r3, [r7, #12]
 8013176:	2238      	movs	r2, #56	@ 0x38
 8013178:	2100      	movs	r1, #0
 801317a:	5499      	strb	r1, [r3, r2]

  return status;
 801317c:	2317      	movs	r3, #23
 801317e:	18fb      	adds	r3, r7, r3
 8013180:	781b      	ldrb	r3, [r3, #0]
}
 8013182:	0018      	movs	r0, r3
 8013184:	46bd      	mov	sp, r7
 8013186:	b006      	add	sp, #24
 8013188:	bd80      	pop	{r7, pc}
 801318a:	46c0      	nop			@ (mov r8, r8)
 801318c:	fffffbff 	.word	0xfffffbff

08013190 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
static void TIM_Base_SetConfig(TIM_TypeDef *TIMx, const TIM_Base_InitTypeDef *Structure)
{
 8013190:	b580      	push	{r7, lr}
 8013192:	b084      	sub	sp, #16
 8013194:	af00      	add	r7, sp, #0
 8013196:	6078      	str	r0, [r7, #4]
 8013198:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 801319a:	687b      	ldr	r3, [r7, #4]
 801319c:	681b      	ldr	r3, [r3, #0]
 801319e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80131a0:	687a      	ldr	r2, [r7, #4]
 80131a2:	2380      	movs	r3, #128	@ 0x80
 80131a4:	05db      	lsls	r3, r3, #23
 80131a6:	429a      	cmp	r2, r3
 80131a8:	d00b      	beq.n	80131c2 <TIM_Base_SetConfig+0x32>
 80131aa:	687b      	ldr	r3, [r7, #4]
 80131ac:	4a23      	ldr	r2, [pc, #140]	@ (801323c <TIM_Base_SetConfig+0xac>)
 80131ae:	4293      	cmp	r3, r2
 80131b0:	d007      	beq.n	80131c2 <TIM_Base_SetConfig+0x32>
 80131b2:	687b      	ldr	r3, [r7, #4]
 80131b4:	4a22      	ldr	r2, [pc, #136]	@ (8013240 <TIM_Base_SetConfig+0xb0>)
 80131b6:	4293      	cmp	r3, r2
 80131b8:	d003      	beq.n	80131c2 <TIM_Base_SetConfig+0x32>
 80131ba:	687b      	ldr	r3, [r7, #4]
 80131bc:	4a21      	ldr	r2, [pc, #132]	@ (8013244 <TIM_Base_SetConfig+0xb4>)
 80131be:	4293      	cmp	r3, r2
 80131c0:	d108      	bne.n	80131d4 <TIM_Base_SetConfig+0x44>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80131c2:	68fb      	ldr	r3, [r7, #12]
 80131c4:	2270      	movs	r2, #112	@ 0x70
 80131c6:	4393      	bics	r3, r2
 80131c8:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80131ca:	683b      	ldr	r3, [r7, #0]
 80131cc:	685b      	ldr	r3, [r3, #4]
 80131ce:	68fa      	ldr	r2, [r7, #12]
 80131d0:	4313      	orrs	r3, r2
 80131d2:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80131d4:	687a      	ldr	r2, [r7, #4]
 80131d6:	2380      	movs	r3, #128	@ 0x80
 80131d8:	05db      	lsls	r3, r3, #23
 80131da:	429a      	cmp	r2, r3
 80131dc:	d00b      	beq.n	80131f6 <TIM_Base_SetConfig+0x66>
 80131de:	687b      	ldr	r3, [r7, #4]
 80131e0:	4a16      	ldr	r2, [pc, #88]	@ (801323c <TIM_Base_SetConfig+0xac>)
 80131e2:	4293      	cmp	r3, r2
 80131e4:	d007      	beq.n	80131f6 <TIM_Base_SetConfig+0x66>
 80131e6:	687b      	ldr	r3, [r7, #4]
 80131e8:	4a15      	ldr	r2, [pc, #84]	@ (8013240 <TIM_Base_SetConfig+0xb0>)
 80131ea:	4293      	cmp	r3, r2
 80131ec:	d003      	beq.n	80131f6 <TIM_Base_SetConfig+0x66>
 80131ee:	687b      	ldr	r3, [r7, #4]
 80131f0:	4a14      	ldr	r2, [pc, #80]	@ (8013244 <TIM_Base_SetConfig+0xb4>)
 80131f2:	4293      	cmp	r3, r2
 80131f4:	d108      	bne.n	8013208 <TIM_Base_SetConfig+0x78>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80131f6:	68fb      	ldr	r3, [r7, #12]
 80131f8:	4a13      	ldr	r2, [pc, #76]	@ (8013248 <TIM_Base_SetConfig+0xb8>)
 80131fa:	4013      	ands	r3, r2
 80131fc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80131fe:	683b      	ldr	r3, [r7, #0]
 8013200:	68db      	ldr	r3, [r3, #12]
 8013202:	68fa      	ldr	r2, [r7, #12]
 8013204:	4313      	orrs	r3, r2
 8013206:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8013208:	68fb      	ldr	r3, [r7, #12]
 801320a:	2280      	movs	r2, #128	@ 0x80
 801320c:	4393      	bics	r3, r2
 801320e:	001a      	movs	r2, r3
 8013210:	683b      	ldr	r3, [r7, #0]
 8013212:	691b      	ldr	r3, [r3, #16]
 8013214:	4313      	orrs	r3, r2
 8013216:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8013218:	687b      	ldr	r3, [r7, #4]
 801321a:	68fa      	ldr	r2, [r7, #12]
 801321c:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 801321e:	683b      	ldr	r3, [r7, #0]
 8013220:	689a      	ldr	r2, [r3, #8]
 8013222:	687b      	ldr	r3, [r7, #4]
 8013224:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8013226:	683b      	ldr	r3, [r7, #0]
 8013228:	681a      	ldr	r2, [r3, #0]
 801322a:	687b      	ldr	r3, [r7, #4]
 801322c:	629a      	str	r2, [r3, #40]	@ 0x28

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 801322e:	687b      	ldr	r3, [r7, #4]
 8013230:	2201      	movs	r2, #1
 8013232:	615a      	str	r2, [r3, #20]
}
 8013234:	46c0      	nop			@ (mov r8, r8)
 8013236:	46bd      	mov	sp, r7
 8013238:	b004      	add	sp, #16
 801323a:	bd80      	pop	{r7, pc}
 801323c:	40000400 	.word	0x40000400
 8013240:	40010800 	.word	0x40010800
 8013244:	40011400 	.word	0x40011400
 8013248:	fffffcff 	.word	0xfffffcff

0801324c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 801324c:	b580      	push	{r7, lr}
 801324e:	b086      	sub	sp, #24
 8013250:	af00      	add	r7, sp, #0
 8013252:	6078      	str	r0, [r7, #4]
 8013254:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8013256:	687b      	ldr	r3, [r7, #4]
 8013258:	6a1b      	ldr	r3, [r3, #32]
 801325a:	2201      	movs	r2, #1
 801325c:	4393      	bics	r3, r2
 801325e:	001a      	movs	r2, r3
 8013260:	687b      	ldr	r3, [r7, #4]
 8013262:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8013264:	687b      	ldr	r3, [r7, #4]
 8013266:	6a1b      	ldr	r3, [r3, #32]
 8013268:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 801326a:	687b      	ldr	r3, [r7, #4]
 801326c:	685b      	ldr	r3, [r3, #4]
 801326e:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8013270:	687b      	ldr	r3, [r7, #4]
 8013272:	699b      	ldr	r3, [r3, #24]
 8013274:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8013276:	68fb      	ldr	r3, [r7, #12]
 8013278:	2270      	movs	r2, #112	@ 0x70
 801327a:	4393      	bics	r3, r2
 801327c:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 801327e:	68fb      	ldr	r3, [r7, #12]
 8013280:	2203      	movs	r2, #3
 8013282:	4393      	bics	r3, r2
 8013284:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013286:	683b      	ldr	r3, [r7, #0]
 8013288:	681b      	ldr	r3, [r3, #0]
 801328a:	68fa      	ldr	r2, [r7, #12]
 801328c:	4313      	orrs	r3, r2
 801328e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8013290:	697b      	ldr	r3, [r7, #20]
 8013292:	2202      	movs	r2, #2
 8013294:	4393      	bics	r3, r2
 8013296:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8013298:	683b      	ldr	r3, [r7, #0]
 801329a:	689b      	ldr	r3, [r3, #8]
 801329c:	697a      	ldr	r2, [r7, #20]
 801329e:	4313      	orrs	r3, r2
 80132a0:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80132a2:	687b      	ldr	r3, [r7, #4]
 80132a4:	693a      	ldr	r2, [r7, #16]
 80132a6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80132a8:	687b      	ldr	r3, [r7, #4]
 80132aa:	68fa      	ldr	r2, [r7, #12]
 80132ac:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80132ae:	683b      	ldr	r3, [r7, #0]
 80132b0:	685a      	ldr	r2, [r3, #4]
 80132b2:	687b      	ldr	r3, [r7, #4]
 80132b4:	635a      	str	r2, [r3, #52]	@ 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80132b6:	687b      	ldr	r3, [r7, #4]
 80132b8:	697a      	ldr	r2, [r7, #20]
 80132ba:	621a      	str	r2, [r3, #32]
}
 80132bc:	46c0      	nop			@ (mov r8, r8)
 80132be:	46bd      	mov	sp, r7
 80132c0:	b006      	add	sp, #24
 80132c2:	bd80      	pop	{r7, pc}

080132c4 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80132c4:	b580      	push	{r7, lr}
 80132c6:	b086      	sub	sp, #24
 80132c8:	af00      	add	r7, sp, #0
 80132ca:	6078      	str	r0, [r7, #4]
 80132cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80132ce:	687b      	ldr	r3, [r7, #4]
 80132d0:	6a1b      	ldr	r3, [r3, #32]
 80132d2:	2210      	movs	r2, #16
 80132d4:	4393      	bics	r3, r2
 80132d6:	001a      	movs	r2, r3
 80132d8:	687b      	ldr	r3, [r7, #4]
 80132da:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80132dc:	687b      	ldr	r3, [r7, #4]
 80132de:	6a1b      	ldr	r3, [r3, #32]
 80132e0:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80132e2:	687b      	ldr	r3, [r7, #4]
 80132e4:	685b      	ldr	r3, [r3, #4]
 80132e6:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80132e8:	687b      	ldr	r3, [r7, #4]
 80132ea:	699b      	ldr	r3, [r3, #24]
 80132ec:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80132ee:	68fb      	ldr	r3, [r7, #12]
 80132f0:	4a13      	ldr	r2, [pc, #76]	@ (8013340 <TIM_OC2_SetConfig+0x7c>)
 80132f2:	4013      	ands	r3, r2
 80132f4:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80132f6:	68fb      	ldr	r3, [r7, #12]
 80132f8:	4a12      	ldr	r2, [pc, #72]	@ (8013344 <TIM_OC2_SetConfig+0x80>)
 80132fa:	4013      	ands	r3, r2
 80132fc:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80132fe:	683b      	ldr	r3, [r7, #0]
 8013300:	681b      	ldr	r3, [r3, #0]
 8013302:	021b      	lsls	r3, r3, #8
 8013304:	68fa      	ldr	r2, [r7, #12]
 8013306:	4313      	orrs	r3, r2
 8013308:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 801330a:	697b      	ldr	r3, [r7, #20]
 801330c:	2220      	movs	r2, #32
 801330e:	4393      	bics	r3, r2
 8013310:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8013312:	683b      	ldr	r3, [r7, #0]
 8013314:	689b      	ldr	r3, [r3, #8]
 8013316:	011b      	lsls	r3, r3, #4
 8013318:	697a      	ldr	r2, [r7, #20]
 801331a:	4313      	orrs	r3, r2
 801331c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801331e:	687b      	ldr	r3, [r7, #4]
 8013320:	693a      	ldr	r2, [r7, #16]
 8013322:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8013324:	687b      	ldr	r3, [r7, #4]
 8013326:	68fa      	ldr	r2, [r7, #12]
 8013328:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 801332a:	683b      	ldr	r3, [r7, #0]
 801332c:	685a      	ldr	r2, [r3, #4]
 801332e:	687b      	ldr	r3, [r7, #4]
 8013330:	639a      	str	r2, [r3, #56]	@ 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013332:	687b      	ldr	r3, [r7, #4]
 8013334:	697a      	ldr	r2, [r7, #20]
 8013336:	621a      	str	r2, [r3, #32]
}
 8013338:	46c0      	nop			@ (mov r8, r8)
 801333a:	46bd      	mov	sp, r7
 801333c:	b006      	add	sp, #24
 801333e:	bd80      	pop	{r7, pc}
 8013340:	ffff8fff 	.word	0xffff8fff
 8013344:	fffffcff 	.word	0xfffffcff

08013348 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 8013348:	b580      	push	{r7, lr}
 801334a:	b086      	sub	sp, #24
 801334c:	af00      	add	r7, sp, #0
 801334e:	6078      	str	r0, [r7, #4]
 8013350:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8013352:	687b      	ldr	r3, [r7, #4]
 8013354:	6a1b      	ldr	r3, [r3, #32]
 8013356:	4a1a      	ldr	r2, [pc, #104]	@ (80133c0 <TIM_OC3_SetConfig+0x78>)
 8013358:	401a      	ands	r2, r3
 801335a:	687b      	ldr	r3, [r7, #4]
 801335c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 801335e:	687b      	ldr	r3, [r7, #4]
 8013360:	6a1b      	ldr	r3, [r3, #32]
 8013362:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8013364:	687b      	ldr	r3, [r7, #4]
 8013366:	685b      	ldr	r3, [r3, #4]
 8013368:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 801336a:	687b      	ldr	r3, [r7, #4]
 801336c:	69db      	ldr	r3, [r3, #28]
 801336e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8013370:	68fb      	ldr	r3, [r7, #12]
 8013372:	2270      	movs	r2, #112	@ 0x70
 8013374:	4393      	bics	r3, r2
 8013376:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8013378:	68fb      	ldr	r3, [r7, #12]
 801337a:	2203      	movs	r2, #3
 801337c:	4393      	bics	r3, r2
 801337e:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8013380:	683b      	ldr	r3, [r7, #0]
 8013382:	681b      	ldr	r3, [r3, #0]
 8013384:	68fa      	ldr	r2, [r7, #12]
 8013386:	4313      	orrs	r3, r2
 8013388:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 801338a:	697b      	ldr	r3, [r7, #20]
 801338c:	4a0d      	ldr	r2, [pc, #52]	@ (80133c4 <TIM_OC3_SetConfig+0x7c>)
 801338e:	4013      	ands	r3, r2
 8013390:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8013392:	683b      	ldr	r3, [r7, #0]
 8013394:	689b      	ldr	r3, [r3, #8]
 8013396:	021b      	lsls	r3, r3, #8
 8013398:	697a      	ldr	r2, [r7, #20]
 801339a:	4313      	orrs	r3, r2
 801339c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 801339e:	687b      	ldr	r3, [r7, #4]
 80133a0:	693a      	ldr	r2, [r7, #16]
 80133a2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80133a4:	687b      	ldr	r3, [r7, #4]
 80133a6:	68fa      	ldr	r2, [r7, #12]
 80133a8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80133aa:	683b      	ldr	r3, [r7, #0]
 80133ac:	685a      	ldr	r2, [r3, #4]
 80133ae:	687b      	ldr	r3, [r7, #4]
 80133b0:	63da      	str	r2, [r3, #60]	@ 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80133b2:	687b      	ldr	r3, [r7, #4]
 80133b4:	697a      	ldr	r2, [r7, #20]
 80133b6:	621a      	str	r2, [r3, #32]
}
 80133b8:	46c0      	nop			@ (mov r8, r8)
 80133ba:	46bd      	mov	sp, r7
 80133bc:	b006      	add	sp, #24
 80133be:	bd80      	pop	{r7, pc}
 80133c0:	fffffeff 	.word	0xfffffeff
 80133c4:	fffffdff 	.word	0xfffffdff

080133c8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, const TIM_OC_InitTypeDef *OC_Config)
{
 80133c8:	b580      	push	{r7, lr}
 80133ca:	b086      	sub	sp, #24
 80133cc:	af00      	add	r7, sp, #0
 80133ce:	6078      	str	r0, [r7, #4]
 80133d0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80133d2:	687b      	ldr	r3, [r7, #4]
 80133d4:	6a1b      	ldr	r3, [r3, #32]
 80133d6:	4a1b      	ldr	r2, [pc, #108]	@ (8013444 <TIM_OC4_SetConfig+0x7c>)
 80133d8:	401a      	ands	r2, r3
 80133da:	687b      	ldr	r3, [r7, #4]
 80133dc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80133de:	687b      	ldr	r3, [r7, #4]
 80133e0:	6a1b      	ldr	r3, [r3, #32]
 80133e2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80133e4:	687b      	ldr	r3, [r7, #4]
 80133e6:	685b      	ldr	r3, [r3, #4]
 80133e8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80133ea:	687b      	ldr	r3, [r7, #4]
 80133ec:	69db      	ldr	r3, [r3, #28]
 80133ee:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80133f0:	68fb      	ldr	r3, [r7, #12]
 80133f2:	4a15      	ldr	r2, [pc, #84]	@ (8013448 <TIM_OC4_SetConfig+0x80>)
 80133f4:	4013      	ands	r3, r2
 80133f6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80133f8:	68fb      	ldr	r3, [r7, #12]
 80133fa:	4a14      	ldr	r2, [pc, #80]	@ (801344c <TIM_OC4_SetConfig+0x84>)
 80133fc:	4013      	ands	r3, r2
 80133fe:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8013400:	683b      	ldr	r3, [r7, #0]
 8013402:	681b      	ldr	r3, [r3, #0]
 8013404:	021b      	lsls	r3, r3, #8
 8013406:	68fa      	ldr	r2, [r7, #12]
 8013408:	4313      	orrs	r3, r2
 801340a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 801340c:	697b      	ldr	r3, [r7, #20]
 801340e:	4a10      	ldr	r2, [pc, #64]	@ (8013450 <TIM_OC4_SetConfig+0x88>)
 8013410:	4013      	ands	r3, r2
 8013412:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8013414:	683b      	ldr	r3, [r7, #0]
 8013416:	689b      	ldr	r3, [r3, #8]
 8013418:	031b      	lsls	r3, r3, #12
 801341a:	697a      	ldr	r2, [r7, #20]
 801341c:	4313      	orrs	r3, r2
 801341e:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8013420:	687b      	ldr	r3, [r7, #4]
 8013422:	693a      	ldr	r2, [r7, #16]
 8013424:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8013426:	687b      	ldr	r3, [r7, #4]
 8013428:	68fa      	ldr	r2, [r7, #12]
 801342a:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 801342c:	683b      	ldr	r3, [r7, #0]
 801342e:	685a      	ldr	r2, [r3, #4]
 8013430:	687b      	ldr	r3, [r7, #4]
 8013432:	641a      	str	r2, [r3, #64]	@ 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8013434:	687b      	ldr	r3, [r7, #4]
 8013436:	697a      	ldr	r2, [r7, #20]
 8013438:	621a      	str	r2, [r3, #32]
}
 801343a:	46c0      	nop			@ (mov r8, r8)
 801343c:	46bd      	mov	sp, r7
 801343e:	b006      	add	sp, #24
 8013440:	bd80      	pop	{r7, pc}
 8013442:	46c0      	nop			@ (mov r8, r8)
 8013444:	ffffefff 	.word	0xffffefff
 8013448:	ffff8fff 	.word	0xffff8fff
 801344c:	fffffcff 	.word	0xfffffcff
 8013450:	ffffdfff 	.word	0xffffdfff

08013454 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
static void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8013454:	b580      	push	{r7, lr}
 8013456:	b086      	sub	sp, #24
 8013458:	af00      	add	r7, sp, #0
 801345a:	60f8      	str	r0, [r7, #12]
 801345c:	60b9      	str	r1, [r7, #8]
 801345e:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8013460:	68bb      	ldr	r3, [r7, #8]
 8013462:	221f      	movs	r2, #31
 8013464:	4013      	ands	r3, r2
 8013466:	2201      	movs	r2, #1
 8013468:	409a      	lsls	r2, r3
 801346a:	0013      	movs	r3, r2
 801346c:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 801346e:	68fb      	ldr	r3, [r7, #12]
 8013470:	6a1b      	ldr	r3, [r3, #32]
 8013472:	697a      	ldr	r2, [r7, #20]
 8013474:	43d2      	mvns	r2, r2
 8013476:	401a      	ands	r2, r3
 8013478:	68fb      	ldr	r3, [r7, #12]
 801347a:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 801347c:	68fb      	ldr	r3, [r7, #12]
 801347e:	6a1a      	ldr	r2, [r3, #32]
 8013480:	68bb      	ldr	r3, [r7, #8]
 8013482:	211f      	movs	r1, #31
 8013484:	400b      	ands	r3, r1
 8013486:	6879      	ldr	r1, [r7, #4]
 8013488:	4099      	lsls	r1, r3
 801348a:	000b      	movs	r3, r1
 801348c:	431a      	orrs	r2, r3
 801348e:	68fb      	ldr	r3, [r7, #12]
 8013490:	621a      	str	r2, [r3, #32]
}
 8013492:	46c0      	nop			@ (mov r8, r8)
 8013494:	46bd      	mov	sp, r7
 8013496:	b006      	add	sp, #24
 8013498:	bd80      	pop	{r7, pc}
	...

0801349c <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        const TIM_MasterConfigTypeDef *sMasterConfig)
{
 801349c:	b580      	push	{r7, lr}
 801349e:	b084      	sub	sp, #16
 80134a0:	af00      	add	r7, sp, #0
 80134a2:	6078      	str	r0, [r7, #4]
 80134a4:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80134a6:	687b      	ldr	r3, [r7, #4]
 80134a8:	2238      	movs	r2, #56	@ 0x38
 80134aa:	5c9b      	ldrb	r3, [r3, r2]
 80134ac:	2b01      	cmp	r3, #1
 80134ae:	d101      	bne.n	80134b4 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 80134b0:	2302      	movs	r3, #2
 80134b2:	e047      	b.n	8013544 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
 80134b4:	687b      	ldr	r3, [r7, #4]
 80134b6:	2238      	movs	r2, #56	@ 0x38
 80134b8:	2101      	movs	r1, #1
 80134ba:	5499      	strb	r1, [r3, r2]

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80134bc:	687b      	ldr	r3, [r7, #4]
 80134be:	2239      	movs	r2, #57	@ 0x39
 80134c0:	2102      	movs	r1, #2
 80134c2:	5499      	strb	r1, [r3, r2]

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80134c4:	687b      	ldr	r3, [r7, #4]
 80134c6:	681b      	ldr	r3, [r3, #0]
 80134c8:	685b      	ldr	r3, [r3, #4]
 80134ca:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80134cc:	687b      	ldr	r3, [r7, #4]
 80134ce:	681b      	ldr	r3, [r3, #0]
 80134d0:	689b      	ldr	r3, [r3, #8]
 80134d2:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80134d4:	68fb      	ldr	r3, [r7, #12]
 80134d6:	2270      	movs	r2, #112	@ 0x70
 80134d8:	4393      	bics	r3, r2
 80134da:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80134dc:	683b      	ldr	r3, [r7, #0]
 80134de:	681b      	ldr	r3, [r3, #0]
 80134e0:	68fa      	ldr	r2, [r7, #12]
 80134e2:	4313      	orrs	r3, r2
 80134e4:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80134e6:	687b      	ldr	r3, [r7, #4]
 80134e8:	681b      	ldr	r3, [r3, #0]
 80134ea:	68fa      	ldr	r2, [r7, #12]
 80134ec:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80134ee:	687b      	ldr	r3, [r7, #4]
 80134f0:	681a      	ldr	r2, [r3, #0]
 80134f2:	2380      	movs	r3, #128	@ 0x80
 80134f4:	05db      	lsls	r3, r3, #23
 80134f6:	429a      	cmp	r2, r3
 80134f8:	d00e      	beq.n	8013518 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 80134fa:	687b      	ldr	r3, [r7, #4]
 80134fc:	681b      	ldr	r3, [r3, #0]
 80134fe:	4a13      	ldr	r2, [pc, #76]	@ (801354c <HAL_TIMEx_MasterConfigSynchronization+0xb0>)
 8013500:	4293      	cmp	r3, r2
 8013502:	d009      	beq.n	8013518 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 8013504:	687b      	ldr	r3, [r7, #4]
 8013506:	681b      	ldr	r3, [r3, #0]
 8013508:	4a11      	ldr	r2, [pc, #68]	@ (8013550 <HAL_TIMEx_MasterConfigSynchronization+0xb4>)
 801350a:	4293      	cmp	r3, r2
 801350c:	d004      	beq.n	8013518 <HAL_TIMEx_MasterConfigSynchronization+0x7c>
 801350e:	687b      	ldr	r3, [r7, #4]
 8013510:	681b      	ldr	r3, [r3, #0]
 8013512:	4a10      	ldr	r2, [pc, #64]	@ (8013554 <HAL_TIMEx_MasterConfigSynchronization+0xb8>)
 8013514:	4293      	cmp	r3, r2
 8013516:	d10c      	bne.n	8013532 <HAL_TIMEx_MasterConfigSynchronization+0x96>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8013518:	68bb      	ldr	r3, [r7, #8]
 801351a:	2280      	movs	r2, #128	@ 0x80
 801351c:	4393      	bics	r3, r2
 801351e:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8013520:	683b      	ldr	r3, [r7, #0]
 8013522:	685b      	ldr	r3, [r3, #4]
 8013524:	68ba      	ldr	r2, [r7, #8]
 8013526:	4313      	orrs	r3, r2
 8013528:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 801352a:	687b      	ldr	r3, [r7, #4]
 801352c:	681b      	ldr	r3, [r3, #0]
 801352e:	68ba      	ldr	r2, [r7, #8]
 8013530:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8013532:	687b      	ldr	r3, [r7, #4]
 8013534:	2239      	movs	r2, #57	@ 0x39
 8013536:	2101      	movs	r1, #1
 8013538:	5499      	strb	r1, [r3, r2]

  __HAL_UNLOCK(htim);
 801353a:	687b      	ldr	r3, [r7, #4]
 801353c:	2238      	movs	r2, #56	@ 0x38
 801353e:	2100      	movs	r1, #0
 8013540:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8013542:	2300      	movs	r3, #0
}
 8013544:	0018      	movs	r0, r3
 8013546:	46bd      	mov	sp, r7
 8013548:	b004      	add	sp, #16
 801354a:	bd80      	pop	{r7, pc}
 801354c:	40000400 	.word	0x40000400
 8013550:	40010800 	.word	0x40010800
 8013554:	40011400 	.word	0x40011400

08013558 <HAL_TIMEx_RemapConfig>:
  @endif
  *
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_RemapConfig(TIM_HandleTypeDef *htim, uint32_t Remap)
{
 8013558:	b580      	push	{r7, lr}
 801355a:	b082      	sub	sp, #8
 801355c:	af00      	add	r7, sp, #0
 801355e:	6078      	str	r0, [r7, #4]
 8013560:	6039      	str	r1, [r7, #0]

  /* Check parameters */
  assert_param(IS_TIM_REMAP(htim->Instance, Remap));

  __HAL_LOCK(htim);
 8013562:	687b      	ldr	r3, [r7, #4]
 8013564:	2238      	movs	r2, #56	@ 0x38
 8013566:	5c9b      	ldrb	r3, [r3, r2]
 8013568:	2b01      	cmp	r3, #1
 801356a:	d101      	bne.n	8013570 <HAL_TIMEx_RemapConfig+0x18>
 801356c:	2302      	movs	r3, #2
 801356e:	e00c      	b.n	801358a <HAL_TIMEx_RemapConfig+0x32>
 8013570:	687b      	ldr	r3, [r7, #4]
 8013572:	2238      	movs	r2, #56	@ 0x38
 8013574:	2101      	movs	r1, #1
 8013576:	5499      	strb	r1, [r3, r2]

  /* Set the Timer remapping configuration */
  WRITE_REG(htim->Instance->OR, Remap);
 8013578:	687b      	ldr	r3, [r7, #4]
 801357a:	681b      	ldr	r3, [r3, #0]
 801357c:	683a      	ldr	r2, [r7, #0]
 801357e:	651a      	str	r2, [r3, #80]	@ 0x50

  __HAL_UNLOCK(htim);
 8013580:	687b      	ldr	r3, [r7, #4]
 8013582:	2238      	movs	r2, #56	@ 0x38
 8013584:	2100      	movs	r1, #0
 8013586:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 8013588:	2300      	movs	r3, #0
}
 801358a:	0018      	movs	r0, r3
 801358c:	46bd      	mov	sp, r7
 801358e:	b002      	add	sp, #8
 8013590:	bd80      	pop	{r7, pc}
	...

08013594 <HAL_UART_Init>:
  *        parameters in the UART_InitTypeDef and initialize the associated handle.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8013594:	b580      	push	{r7, lr}
 8013596:	b082      	sub	sp, #8
 8013598:	af00      	add	r7, sp, #0
 801359a:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 801359c:	687b      	ldr	r3, [r7, #4]
 801359e:	2b00      	cmp	r3, #0
 80135a0:	d101      	bne.n	80135a6 <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 80135a2:	2301      	movs	r3, #1
 80135a4:	e053      	b.n	801364e <HAL_UART_Init+0xba>
  {
    /* Check the parameters */
    assert_param((IS_UART_INSTANCE(huart->Instance)) || (IS_LPUART_INSTANCE(huart->Instance)));
  }

  if (huart->gState == HAL_UART_STATE_RESET)
 80135a6:	687b      	ldr	r3, [r7, #4]
 80135a8:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 80135aa:	2b00      	cmp	r3, #0
 80135ac:	d116      	bne.n	80135dc <HAL_UART_Init+0x48>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80135ae:	687b      	ldr	r3, [r7, #4]
 80135b0:	2278      	movs	r2, #120	@ 0x78
 80135b2:	2100      	movs	r1, #0
 80135b4:	5499      	strb	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    UART_InitCallbacksToDefault(huart);
 80135b6:	687b      	ldr	r3, [r7, #4]
 80135b8:	0018      	movs	r0, r3
 80135ba:	f000 fd65 	bl	8014088 <UART_InitCallbacksToDefault>

    if (huart->MspInitCallback == NULL)
 80135be:	687b      	ldr	r3, [r7, #4]
 80135c0:	22b0      	movs	r2, #176	@ 0xb0
 80135c2:	589b      	ldr	r3, [r3, r2]
 80135c4:	2b00      	cmp	r3, #0
 80135c6:	d103      	bne.n	80135d0 <HAL_UART_Init+0x3c>
    {
      huart->MspInitCallback = HAL_UART_MspInit;
 80135c8:	687b      	ldr	r3, [r7, #4]
 80135ca:	21b0      	movs	r1, #176	@ 0xb0
 80135cc:	4a22      	ldr	r2, [pc, #136]	@ (8013658 <HAL_UART_Init+0xc4>)
 80135ce:	505a      	str	r2, [r3, r1]
    }

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
 80135d0:	687b      	ldr	r3, [r7, #4]
 80135d2:	22b0      	movs	r2, #176	@ 0xb0
 80135d4:	589b      	ldr	r3, [r3, r2]
 80135d6:	687a      	ldr	r2, [r7, #4]
 80135d8:	0010      	movs	r0, r2
 80135da:	4798      	blx	r3
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80135dc:	687b      	ldr	r3, [r7, #4]
 80135de:	2224      	movs	r2, #36	@ 0x24
 80135e0:	67da      	str	r2, [r3, #124]	@ 0x7c

  __HAL_UART_DISABLE(huart);
 80135e2:	687b      	ldr	r3, [r7, #4]
 80135e4:	681b      	ldr	r3, [r3, #0]
 80135e6:	681a      	ldr	r2, [r3, #0]
 80135e8:	687b      	ldr	r3, [r7, #4]
 80135ea:	681b      	ldr	r3, [r3, #0]
 80135ec:	2101      	movs	r1, #1
 80135ee:	438a      	bics	r2, r1
 80135f0:	601a      	str	r2, [r3, #0]

  /* Set the UART Communication parameters */
  if (UART_SetConfig(huart) == HAL_ERROR)
 80135f2:	687b      	ldr	r3, [r7, #4]
 80135f4:	0018      	movs	r0, r3
 80135f6:	f000 fd8b 	bl	8014110 <UART_SetConfig>
 80135fa:	0003      	movs	r3, r0
 80135fc:	2b01      	cmp	r3, #1
 80135fe:	d101      	bne.n	8013604 <HAL_UART_Init+0x70>
  {
    return HAL_ERROR;
 8013600:	2301      	movs	r3, #1
 8013602:	e024      	b.n	801364e <HAL_UART_Init+0xba>
  }

  if (huart->AdvancedInit.AdvFeatureInit != UART_ADVFEATURE_NO_INIT)
 8013604:	687b      	ldr	r3, [r7, #4]
 8013606:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8013608:	2b00      	cmp	r3, #0
 801360a:	d003      	beq.n	8013614 <HAL_UART_Init+0x80>
  {
    UART_AdvFeatureConfig(huart);
 801360c:	687b      	ldr	r3, [r7, #4]
 801360e:	0018      	movs	r0, r3
 8013610:	f001 f81c 	bl	801464c <UART_AdvFeatureConfig>
  }

  /* In asynchronous mode, the following bits must be kept cleared:
  - LINEN and CLKEN bits in the USART_CR2 register,
  - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8013614:	687b      	ldr	r3, [r7, #4]
 8013616:	681b      	ldr	r3, [r3, #0]
 8013618:	685a      	ldr	r2, [r3, #4]
 801361a:	687b      	ldr	r3, [r7, #4]
 801361c:	681b      	ldr	r3, [r3, #0]
 801361e:	490f      	ldr	r1, [pc, #60]	@ (801365c <HAL_UART_Init+0xc8>)
 8013620:	400a      	ands	r2, r1
 8013622:	605a      	str	r2, [r3, #4]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8013624:	687b      	ldr	r3, [r7, #4]
 8013626:	681b      	ldr	r3, [r3, #0]
 8013628:	689a      	ldr	r2, [r3, #8]
 801362a:	687b      	ldr	r3, [r7, #4]
 801362c:	681b      	ldr	r3, [r3, #0]
 801362e:	212a      	movs	r1, #42	@ 0x2a
 8013630:	438a      	bics	r2, r1
 8013632:	609a      	str	r2, [r3, #8]

  __HAL_UART_ENABLE(huart);
 8013634:	687b      	ldr	r3, [r7, #4]
 8013636:	681b      	ldr	r3, [r3, #0]
 8013638:	681a      	ldr	r2, [r3, #0]
 801363a:	687b      	ldr	r3, [r7, #4]
 801363c:	681b      	ldr	r3, [r3, #0]
 801363e:	2101      	movs	r1, #1
 8013640:	430a      	orrs	r2, r1
 8013642:	601a      	str	r2, [r3, #0]

  /* TEACK and/or REACK to check before moving huart->gState and huart->RxState to Ready */
  return (UART_CheckIdleState(huart));
 8013644:	687b      	ldr	r3, [r7, #4]
 8013646:	0018      	movs	r0, r3
 8013648:	f001 f8b4 	bl	80147b4 <UART_CheckIdleState>
 801364c:	0003      	movs	r3, r0
}
 801364e:	0018      	movs	r0, r3
 8013650:	46bd      	mov	sp, r7
 8013652:	b002      	add	sp, #8
 8013654:	bd80      	pop	{r7, pc}
 8013656:	46c0      	nop			@ (mov r8, r8)
 8013658:	0800b401 	.word	0x0800b401
 801365c:	ffffb7ff 	.word	0xffffb7ff

08013660 <HAL_UART_Transmit>:
  * @param Size    Amount of data elements (u8 or u16) to be sent.
  * @param Timeout Timeout duration.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size, uint32_t Timeout)
{
 8013660:	b580      	push	{r7, lr}
 8013662:	b08a      	sub	sp, #40	@ 0x28
 8013664:	af02      	add	r7, sp, #8
 8013666:	60f8      	str	r0, [r7, #12]
 8013668:	60b9      	str	r1, [r7, #8]
 801366a:	603b      	str	r3, [r7, #0]
 801366c:	1dbb      	adds	r3, r7, #6
 801366e:	801a      	strh	r2, [r3, #0]
  const uint8_t  *pdata8bits;
  const uint16_t *pdata16bits;
  uint32_t tickstart;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 8013670:	68fb      	ldr	r3, [r7, #12]
 8013672:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 8013674:	2b20      	cmp	r3, #32
 8013676:	d000      	beq.n	801367a <HAL_UART_Transmit+0x1a>
 8013678:	e08c      	b.n	8013794 <HAL_UART_Transmit+0x134>
  {
    if ((pData == NULL) || (Size == 0U))
 801367a:	68bb      	ldr	r3, [r7, #8]
 801367c:	2b00      	cmp	r3, #0
 801367e:	d003      	beq.n	8013688 <HAL_UART_Transmit+0x28>
 8013680:	1dbb      	adds	r3, r7, #6
 8013682:	881b      	ldrh	r3, [r3, #0]
 8013684:	2b00      	cmp	r3, #0
 8013686:	d101      	bne.n	801368c <HAL_UART_Transmit+0x2c>
    {
      return  HAL_ERROR;
 8013688:	2301      	movs	r3, #1
 801368a:	e084      	b.n	8013796 <HAL_UART_Transmit+0x136>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be filled into TDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 801368c:	68fb      	ldr	r3, [r7, #12]
 801368e:	689a      	ldr	r2, [r3, #8]
 8013690:	2380      	movs	r3, #128	@ 0x80
 8013692:	015b      	lsls	r3, r3, #5
 8013694:	429a      	cmp	r2, r3
 8013696:	d109      	bne.n	80136ac <HAL_UART_Transmit+0x4c>
 8013698:	68fb      	ldr	r3, [r7, #12]
 801369a:	691b      	ldr	r3, [r3, #16]
 801369c:	2b00      	cmp	r3, #0
 801369e:	d105      	bne.n	80136ac <HAL_UART_Transmit+0x4c>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80136a0:	68bb      	ldr	r3, [r7, #8]
 80136a2:	2201      	movs	r2, #1
 80136a4:	4013      	ands	r3, r2
 80136a6:	d001      	beq.n	80136ac <HAL_UART_Transmit+0x4c>
      {
        return  HAL_ERROR;
 80136a8:	2301      	movs	r3, #1
 80136aa:	e074      	b.n	8013796 <HAL_UART_Transmit+0x136>
      }
    }

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80136ac:	68fb      	ldr	r3, [r7, #12]
 80136ae:	2284      	movs	r2, #132	@ 0x84
 80136b0:	2100      	movs	r1, #0
 80136b2:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80136b4:	68fb      	ldr	r3, [r7, #12]
 80136b6:	2221      	movs	r2, #33	@ 0x21
 80136b8:	67da      	str	r2, [r3, #124]	@ 0x7c

    /* Init tickstart for timeout management */
    tickstart = HAL_GetTick();
 80136ba:	f7f8 fbcb 	bl	800be54 <HAL_GetTick>
 80136be:	0003      	movs	r3, r0
 80136c0:	617b      	str	r3, [r7, #20]

    huart->TxXferSize  = Size;
 80136c2:	68fb      	ldr	r3, [r7, #12]
 80136c4:	1dba      	adds	r2, r7, #6
 80136c6:	2150      	movs	r1, #80	@ 0x50
 80136c8:	8812      	ldrh	r2, [r2, #0]
 80136ca:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80136cc:	68fb      	ldr	r3, [r7, #12]
 80136ce:	1dba      	adds	r2, r7, #6
 80136d0:	2152      	movs	r1, #82	@ 0x52
 80136d2:	8812      	ldrh	r2, [r2, #0]
 80136d4:	525a      	strh	r2, [r3, r1]

    /* In case of 9bits/No Parity transfer, pData needs to be handled as a uint16_t pointer */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80136d6:	68fb      	ldr	r3, [r7, #12]
 80136d8:	689a      	ldr	r2, [r3, #8]
 80136da:	2380      	movs	r3, #128	@ 0x80
 80136dc:	015b      	lsls	r3, r3, #5
 80136de:	429a      	cmp	r2, r3
 80136e0:	d108      	bne.n	80136f4 <HAL_UART_Transmit+0x94>
 80136e2:	68fb      	ldr	r3, [r7, #12]
 80136e4:	691b      	ldr	r3, [r3, #16]
 80136e6:	2b00      	cmp	r3, #0
 80136e8:	d104      	bne.n	80136f4 <HAL_UART_Transmit+0x94>
    {
      pdata8bits  = NULL;
 80136ea:	2300      	movs	r3, #0
 80136ec:	61fb      	str	r3, [r7, #28]
      pdata16bits = (const uint16_t *) pData;
 80136ee:	68bb      	ldr	r3, [r7, #8]
 80136f0:	61bb      	str	r3, [r7, #24]
 80136f2:	e003      	b.n	80136fc <HAL_UART_Transmit+0x9c>
    }
    else
    {
      pdata8bits  = pData;
 80136f4:	68bb      	ldr	r3, [r7, #8]
 80136f6:	61fb      	str	r3, [r7, #28]
      pdata16bits = NULL;
 80136f8:	2300      	movs	r3, #0
 80136fa:	61bb      	str	r3, [r7, #24]
    }

    while (huart->TxXferCount > 0U)
 80136fc:	e02f      	b.n	801375e <HAL_UART_Transmit+0xfe>
    {
      if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TXE, RESET, tickstart, Timeout) != HAL_OK)
 80136fe:	697a      	ldr	r2, [r7, #20]
 8013700:	68f8      	ldr	r0, [r7, #12]
 8013702:	683b      	ldr	r3, [r7, #0]
 8013704:	9300      	str	r3, [sp, #0]
 8013706:	0013      	movs	r3, r2
 8013708:	2200      	movs	r2, #0
 801370a:	2180      	movs	r1, #128	@ 0x80
 801370c:	f001 f8fa 	bl	8014904 <UART_WaitOnFlagUntilTimeout>
 8013710:	1e03      	subs	r3, r0, #0
 8013712:	d004      	beq.n	801371e <HAL_UART_Transmit+0xbe>
      {

        huart->gState = HAL_UART_STATE_READY;
 8013714:	68fb      	ldr	r3, [r7, #12]
 8013716:	2220      	movs	r2, #32
 8013718:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_TIMEOUT;
 801371a:	2303      	movs	r3, #3
 801371c:	e03b      	b.n	8013796 <HAL_UART_Transmit+0x136>
      }
      if (pdata8bits == NULL)
 801371e:	69fb      	ldr	r3, [r7, #28]
 8013720:	2b00      	cmp	r3, #0
 8013722:	d10b      	bne.n	801373c <HAL_UART_Transmit+0xdc>
      {
        huart->Instance->TDR = (uint16_t)(*pdata16bits & 0x01FFU);
 8013724:	69bb      	ldr	r3, [r7, #24]
 8013726:	881b      	ldrh	r3, [r3, #0]
 8013728:	001a      	movs	r2, r3
 801372a:	68fb      	ldr	r3, [r7, #12]
 801372c:	681b      	ldr	r3, [r3, #0]
 801372e:	05d2      	lsls	r2, r2, #23
 8013730:	0dd2      	lsrs	r2, r2, #23
 8013732:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata16bits++;
 8013734:	69bb      	ldr	r3, [r7, #24]
 8013736:	3302      	adds	r3, #2
 8013738:	61bb      	str	r3, [r7, #24]
 801373a:	e007      	b.n	801374c <HAL_UART_Transmit+0xec>
      }
      else
      {
        huart->Instance->TDR = (uint8_t)(*pdata8bits & 0xFFU);
 801373c:	69fb      	ldr	r3, [r7, #28]
 801373e:	781a      	ldrb	r2, [r3, #0]
 8013740:	68fb      	ldr	r3, [r7, #12]
 8013742:	681b      	ldr	r3, [r3, #0]
 8013744:	629a      	str	r2, [r3, #40]	@ 0x28
        pdata8bits++;
 8013746:	69fb      	ldr	r3, [r7, #28]
 8013748:	3301      	adds	r3, #1
 801374a:	61fb      	str	r3, [r7, #28]
      }
      huart->TxXferCount--;
 801374c:	68fb      	ldr	r3, [r7, #12]
 801374e:	2252      	movs	r2, #82	@ 0x52
 8013750:	5a9b      	ldrh	r3, [r3, r2]
 8013752:	b29b      	uxth	r3, r3
 8013754:	3b01      	subs	r3, #1
 8013756:	b299      	uxth	r1, r3
 8013758:	68fb      	ldr	r3, [r7, #12]
 801375a:	2252      	movs	r2, #82	@ 0x52
 801375c:	5299      	strh	r1, [r3, r2]
    while (huart->TxXferCount > 0U)
 801375e:	68fb      	ldr	r3, [r7, #12]
 8013760:	2252      	movs	r2, #82	@ 0x52
 8013762:	5a9b      	ldrh	r3, [r3, r2]
 8013764:	b29b      	uxth	r3, r3
 8013766:	2b00      	cmp	r3, #0
 8013768:	d1c9      	bne.n	80136fe <HAL_UART_Transmit+0x9e>
    }

    if (UART_WaitOnFlagUntilTimeout(huart, UART_FLAG_TC, RESET, tickstart, Timeout) != HAL_OK)
 801376a:	697a      	ldr	r2, [r7, #20]
 801376c:	68f8      	ldr	r0, [r7, #12]
 801376e:	683b      	ldr	r3, [r7, #0]
 8013770:	9300      	str	r3, [sp, #0]
 8013772:	0013      	movs	r3, r2
 8013774:	2200      	movs	r2, #0
 8013776:	2140      	movs	r1, #64	@ 0x40
 8013778:	f001 f8c4 	bl	8014904 <UART_WaitOnFlagUntilTimeout>
 801377c:	1e03      	subs	r3, r0, #0
 801377e:	d004      	beq.n	801378a <HAL_UART_Transmit+0x12a>
    {
      huart->gState = HAL_UART_STATE_READY;
 8013780:	68fb      	ldr	r3, [r7, #12]
 8013782:	2220      	movs	r2, #32
 8013784:	67da      	str	r2, [r3, #124]	@ 0x7c

      return HAL_TIMEOUT;
 8013786:	2303      	movs	r3, #3
 8013788:	e005      	b.n	8013796 <HAL_UART_Transmit+0x136>
    }

    /* At end of Tx process, restore huart->gState to Ready */
    huart->gState = HAL_UART_STATE_READY;
 801378a:	68fb      	ldr	r3, [r7, #12]
 801378c:	2220      	movs	r2, #32
 801378e:	67da      	str	r2, [r3, #124]	@ 0x7c

    return HAL_OK;
 8013790:	2300      	movs	r3, #0
 8013792:	e000      	b.n	8013796 <HAL_UART_Transmit+0x136>
  }
  else
  {
    return HAL_BUSY;
 8013794:	2302      	movs	r3, #2
  }
}
 8013796:	0018      	movs	r0, r3
 8013798:	46bd      	mov	sp, r7
 801379a:	b008      	add	sp, #32
 801379c:	bd80      	pop	{r7, pc}
	...

080137a0 <HAL_UART_Receive_IT>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80137a0:	b580      	push	{r7, lr}
 80137a2:	b088      	sub	sp, #32
 80137a4:	af00      	add	r7, sp, #0
 80137a6:	60f8      	str	r0, [r7, #12]
 80137a8:	60b9      	str	r1, [r7, #8]
 80137aa:	1dbb      	adds	r3, r7, #6
 80137ac:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80137ae:	68fb      	ldr	r3, [r7, #12]
 80137b0:	2280      	movs	r2, #128	@ 0x80
 80137b2:	589b      	ldr	r3, [r3, r2]
 80137b4:	2b20      	cmp	r3, #32
 80137b6:	d14a      	bne.n	801384e <HAL_UART_Receive_IT+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 80137b8:	68bb      	ldr	r3, [r7, #8]
 80137ba:	2b00      	cmp	r3, #0
 80137bc:	d003      	beq.n	80137c6 <HAL_UART_Receive_IT+0x26>
 80137be:	1dbb      	adds	r3, r7, #6
 80137c0:	881b      	ldrh	r3, [r3, #0]
 80137c2:	2b00      	cmp	r3, #0
 80137c4:	d101      	bne.n	80137ca <HAL_UART_Receive_IT+0x2a>
    {
      return HAL_ERROR;
 80137c6:	2301      	movs	r3, #1
 80137c8:	e042      	b.n	8013850 <HAL_UART_Receive_IT+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data to be received from RDR will be
       handled through a u16 cast. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80137ca:	68fb      	ldr	r3, [r7, #12]
 80137cc:	689a      	ldr	r2, [r3, #8]
 80137ce:	2380      	movs	r3, #128	@ 0x80
 80137d0:	015b      	lsls	r3, r3, #5
 80137d2:	429a      	cmp	r2, r3
 80137d4:	d109      	bne.n	80137ea <HAL_UART_Receive_IT+0x4a>
 80137d6:	68fb      	ldr	r3, [r7, #12]
 80137d8:	691b      	ldr	r3, [r3, #16]
 80137da:	2b00      	cmp	r3, #0
 80137dc:	d105      	bne.n	80137ea <HAL_UART_Receive_IT+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80137de:	68bb      	ldr	r3, [r7, #8]
 80137e0:	2201      	movs	r2, #1
 80137e2:	4013      	ands	r3, r2
 80137e4:	d001      	beq.n	80137ea <HAL_UART_Receive_IT+0x4a>
      {
        return  HAL_ERROR;
 80137e6:	2301      	movs	r3, #1
 80137e8:	e032      	b.n	8013850 <HAL_UART_Receive_IT+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80137ea:	68fb      	ldr	r3, [r7, #12]
 80137ec:	2200      	movs	r2, #0
 80137ee:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80137f0:	68fb      	ldr	r3, [r7, #12]
 80137f2:	681b      	ldr	r3, [r3, #0]
 80137f4:	4a18      	ldr	r2, [pc, #96]	@ (8013858 <HAL_UART_Receive_IT+0xb8>)
 80137f6:	4293      	cmp	r3, r2
 80137f8:	d020      	beq.n	801383c <HAL_UART_Receive_IT+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80137fa:	68fb      	ldr	r3, [r7, #12]
 80137fc:	681b      	ldr	r3, [r3, #0]
 80137fe:	685a      	ldr	r2, [r3, #4]
 8013800:	2380      	movs	r3, #128	@ 0x80
 8013802:	041b      	lsls	r3, r3, #16
 8013804:	4013      	ands	r3, r2
 8013806:	d019      	beq.n	801383c <HAL_UART_Receive_IT+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013808:	f3ef 8310 	mrs	r3, PRIMASK
 801380c:	613b      	str	r3, [r7, #16]
  return(result);
 801380e:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8013810:	61fb      	str	r3, [r7, #28]
 8013812:	2301      	movs	r3, #1
 8013814:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013816:	697b      	ldr	r3, [r7, #20]
 8013818:	f383 8810 	msr	PRIMASK, r3
}
 801381c:	46c0      	nop			@ (mov r8, r8)
 801381e:	68fb      	ldr	r3, [r7, #12]
 8013820:	681b      	ldr	r3, [r3, #0]
 8013822:	681a      	ldr	r2, [r3, #0]
 8013824:	68fb      	ldr	r3, [r7, #12]
 8013826:	681b      	ldr	r3, [r3, #0]
 8013828:	2180      	movs	r1, #128	@ 0x80
 801382a:	04c9      	lsls	r1, r1, #19
 801382c:	430a      	orrs	r2, r1
 801382e:	601a      	str	r2, [r3, #0]
 8013830:	69fb      	ldr	r3, [r7, #28]
 8013832:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013834:	69bb      	ldr	r3, [r7, #24]
 8013836:	f383 8810 	msr	PRIMASK, r3
}
 801383a:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_IT(huart, pData, Size));
 801383c:	1dbb      	adds	r3, r7, #6
 801383e:	881a      	ldrh	r2, [r3, #0]
 8013840:	68b9      	ldr	r1, [r7, #8]
 8013842:	68fb      	ldr	r3, [r7, #12]
 8013844:	0018      	movs	r0, r3
 8013846:	f001 f8c7 	bl	80149d8 <UART_Start_Receive_IT>
 801384a:	0003      	movs	r3, r0
 801384c:	e000      	b.n	8013850 <HAL_UART_Receive_IT+0xb0>
  }
  else
  {
    return HAL_BUSY;
 801384e:	2302      	movs	r3, #2
  }
}
 8013850:	0018      	movs	r0, r3
 8013852:	46bd      	mov	sp, r7
 8013854:	b008      	add	sp, #32
 8013856:	bd80      	pop	{r7, pc}
 8013858:	40004800 	.word	0x40004800

0801385c <HAL_UART_Transmit_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be sent.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, const uint8_t *pData, uint16_t Size)
{
 801385c:	b580      	push	{r7, lr}
 801385e:	b088      	sub	sp, #32
 8013860:	af00      	add	r7, sp, #0
 8013862:	60f8      	str	r0, [r7, #12]
 8013864:	60b9      	str	r1, [r7, #8]
 8013866:	1dbb      	adds	r3, r7, #6
 8013868:	801a      	strh	r2, [r3, #0]
  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 801386a:	68fb      	ldr	r3, [r7, #12]
 801386c:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801386e:	2b20      	cmp	r3, #32
 8013870:	d000      	beq.n	8013874 <HAL_UART_Transmit_DMA+0x18>
 8013872:	e077      	b.n	8013964 <HAL_UART_Transmit_DMA+0x108>
  {
    if ((pData == NULL) || (Size == 0U))
 8013874:	68bb      	ldr	r3, [r7, #8]
 8013876:	2b00      	cmp	r3, #0
 8013878:	d003      	beq.n	8013882 <HAL_UART_Transmit_DMA+0x26>
 801387a:	1dbb      	adds	r3, r7, #6
 801387c:	881b      	ldrh	r3, [r3, #0]
 801387e:	2b00      	cmp	r3, #0
 8013880:	d101      	bne.n	8013886 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 8013882:	2301      	movs	r3, #1
 8013884:	e06f      	b.n	8013966 <HAL_UART_Transmit_DMA+0x10a>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy into TDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8013886:	68fb      	ldr	r3, [r7, #12]
 8013888:	689a      	ldr	r2, [r3, #8]
 801388a:	2380      	movs	r3, #128	@ 0x80
 801388c:	015b      	lsls	r3, r3, #5
 801388e:	429a      	cmp	r2, r3
 8013890:	d109      	bne.n	80138a6 <HAL_UART_Transmit_DMA+0x4a>
 8013892:	68fb      	ldr	r3, [r7, #12]
 8013894:	691b      	ldr	r3, [r3, #16]
 8013896:	2b00      	cmp	r3, #0
 8013898:	d105      	bne.n	80138a6 <HAL_UART_Transmit_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 801389a:	68bb      	ldr	r3, [r7, #8]
 801389c:	2201      	movs	r2, #1
 801389e:	4013      	ands	r3, r2
 80138a0:	d001      	beq.n	80138a6 <HAL_UART_Transmit_DMA+0x4a>
      {
        return  HAL_ERROR;
 80138a2:	2301      	movs	r3, #1
 80138a4:	e05f      	b.n	8013966 <HAL_UART_Transmit_DMA+0x10a>
      }
    }

    huart->pTxBuffPtr  = pData;
 80138a6:	68fb      	ldr	r3, [r7, #12]
 80138a8:	68ba      	ldr	r2, [r7, #8]
 80138aa:	64da      	str	r2, [r3, #76]	@ 0x4c
    huart->TxXferSize  = Size;
 80138ac:	68fb      	ldr	r3, [r7, #12]
 80138ae:	1dba      	adds	r2, r7, #6
 80138b0:	2150      	movs	r1, #80	@ 0x50
 80138b2:	8812      	ldrh	r2, [r2, #0]
 80138b4:	525a      	strh	r2, [r3, r1]
    huart->TxXferCount = Size;
 80138b6:	68fb      	ldr	r3, [r7, #12]
 80138b8:	1dba      	adds	r2, r7, #6
 80138ba:	2152      	movs	r1, #82	@ 0x52
 80138bc:	8812      	ldrh	r2, [r2, #0]
 80138be:	525a      	strh	r2, [r3, r1]

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80138c0:	68fb      	ldr	r3, [r7, #12]
 80138c2:	2284      	movs	r2, #132	@ 0x84
 80138c4:	2100      	movs	r1, #0
 80138c6:	5099      	str	r1, [r3, r2]
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80138c8:	68fb      	ldr	r3, [r7, #12]
 80138ca:	2221      	movs	r2, #33	@ 0x21
 80138cc:	67da      	str	r2, [r3, #124]	@ 0x7c

    if (huart->hdmatx != NULL)
 80138ce:	68fb      	ldr	r3, [r7, #12]
 80138d0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80138d2:	2b00      	cmp	r3, #0
 80138d4:	d027      	beq.n	8013926 <HAL_UART_Transmit_DMA+0xca>
    {
      /* Set the UART DMA transfer complete callback */
      huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 80138d6:	68fb      	ldr	r3, [r7, #12]
 80138d8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80138da:	4a25      	ldr	r2, [pc, #148]	@ (8013970 <HAL_UART_Transmit_DMA+0x114>)
 80138dc:	62da      	str	r2, [r3, #44]	@ 0x2c

      /* Set the UART DMA Half transfer complete callback */
      huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 80138de:	68fb      	ldr	r3, [r7, #12]
 80138e0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80138e2:	4a24      	ldr	r2, [pc, #144]	@ (8013974 <HAL_UART_Transmit_DMA+0x118>)
 80138e4:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Set the DMA error callback */
      huart->hdmatx->XferErrorCallback = UART_DMAError;
 80138e6:	68fb      	ldr	r3, [r7, #12]
 80138e8:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80138ea:	4a23      	ldr	r2, [pc, #140]	@ (8013978 <HAL_UART_Transmit_DMA+0x11c>)
 80138ec:	635a      	str	r2, [r3, #52]	@ 0x34

      /* Set the DMA abort callback */
      huart->hdmatx->XferAbortCallback = NULL;
 80138ee:	68fb      	ldr	r3, [r7, #12]
 80138f0:	6f1b      	ldr	r3, [r3, #112]	@ 0x70
 80138f2:	2200      	movs	r2, #0
 80138f4:	639a      	str	r2, [r3, #56]	@ 0x38

      /* Enable the UART transmit DMA channel */
      if (HAL_DMA_Start_IT(huart->hdmatx, (uint32_t)huart->pTxBuffPtr, (uint32_t)&huart->Instance->TDR, Size) != HAL_OK)
 80138f6:	68fb      	ldr	r3, [r7, #12]
 80138f8:	6f18      	ldr	r0, [r3, #112]	@ 0x70
 80138fa:	68fb      	ldr	r3, [r7, #12]
 80138fc:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80138fe:	0019      	movs	r1, r3
 8013900:	68fb      	ldr	r3, [r7, #12]
 8013902:	681b      	ldr	r3, [r3, #0]
 8013904:	3328      	adds	r3, #40	@ 0x28
 8013906:	001a      	movs	r2, r3
 8013908:	1dbb      	adds	r3, r7, #6
 801390a:	881b      	ldrh	r3, [r3, #0]
 801390c:	f7f8 ffc2 	bl	800c894 <HAL_DMA_Start_IT>
 8013910:	1e03      	subs	r3, r0, #0
 8013912:	d008      	beq.n	8013926 <HAL_UART_Transmit_DMA+0xca>
      {
        /* Set error code to DMA */
        huart->ErrorCode = HAL_UART_ERROR_DMA;
 8013914:	68fb      	ldr	r3, [r7, #12]
 8013916:	2284      	movs	r2, #132	@ 0x84
 8013918:	2110      	movs	r1, #16
 801391a:	5099      	str	r1, [r3, r2]

        /* Restore huart->gState to ready */
        huart->gState = HAL_UART_STATE_READY;
 801391c:	68fb      	ldr	r3, [r7, #12]
 801391e:	2220      	movs	r2, #32
 8013920:	67da      	str	r2, [r3, #124]	@ 0x7c

        return HAL_ERROR;
 8013922:	2301      	movs	r3, #1
 8013924:	e01f      	b.n	8013966 <HAL_UART_Transmit_DMA+0x10a>
      }
    }
    /* Clear the TC flag in the ICR register */
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_TCF);
 8013926:	68fb      	ldr	r3, [r7, #12]
 8013928:	681b      	ldr	r3, [r3, #0]
 801392a:	2240      	movs	r2, #64	@ 0x40
 801392c:	621a      	str	r2, [r3, #32]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801392e:	f3ef 8310 	mrs	r3, PRIMASK
 8013932:	613b      	str	r3, [r7, #16]
  return(result);
 8013934:	693b      	ldr	r3, [r7, #16]

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
    in the UART CR3 register */
    ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8013936:	61fb      	str	r3, [r7, #28]
 8013938:	2301      	movs	r3, #1
 801393a:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801393c:	697b      	ldr	r3, [r7, #20]
 801393e:	f383 8810 	msr	PRIMASK, r3
}
 8013942:	46c0      	nop			@ (mov r8, r8)
 8013944:	68fb      	ldr	r3, [r7, #12]
 8013946:	681b      	ldr	r3, [r3, #0]
 8013948:	689a      	ldr	r2, [r3, #8]
 801394a:	68fb      	ldr	r3, [r7, #12]
 801394c:	681b      	ldr	r3, [r3, #0]
 801394e:	2180      	movs	r1, #128	@ 0x80
 8013950:	430a      	orrs	r2, r1
 8013952:	609a      	str	r2, [r3, #8]
 8013954:	69fb      	ldr	r3, [r7, #28]
 8013956:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013958:	69bb      	ldr	r3, [r7, #24]
 801395a:	f383 8810 	msr	PRIMASK, r3
}
 801395e:	46c0      	nop			@ (mov r8, r8)

    return HAL_OK;
 8013960:	2300      	movs	r3, #0
 8013962:	e000      	b.n	8013966 <HAL_UART_Transmit_DMA+0x10a>
  }
  else
  {
    return HAL_BUSY;
 8013964:	2302      	movs	r3, #2
  }
}
 8013966:	0018      	movs	r0, r3
 8013968:	46bd      	mov	sp, r7
 801396a:	b008      	add	sp, #32
 801396c:	bd80      	pop	{r7, pc}
 801396e:	46c0      	nop			@ (mov r8, r8)
 8013970:	08014dbd 	.word	0x08014dbd
 8013974:	08014e59 	.word	0x08014e59
 8013978:	08014ff9 	.word	0x08014ff9

0801397c <HAL_UART_Receive_DMA>:
  * @param pData Pointer to data buffer (u8 or u16 data elements).
  * @param Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 801397c:	b580      	push	{r7, lr}
 801397e:	b088      	sub	sp, #32
 8013980:	af00      	add	r7, sp, #0
 8013982:	60f8      	str	r0, [r7, #12]
 8013984:	60b9      	str	r1, [r7, #8]
 8013986:	1dbb      	adds	r3, r7, #6
 8013988:	801a      	strh	r2, [r3, #0]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 801398a:	68fb      	ldr	r3, [r7, #12]
 801398c:	2280      	movs	r2, #128	@ 0x80
 801398e:	589b      	ldr	r3, [r3, r2]
 8013990:	2b20      	cmp	r3, #32
 8013992:	d14a      	bne.n	8013a2a <HAL_UART_Receive_DMA+0xae>
  {
    if ((pData == NULL) || (Size == 0U))
 8013994:	68bb      	ldr	r3, [r7, #8]
 8013996:	2b00      	cmp	r3, #0
 8013998:	d003      	beq.n	80139a2 <HAL_UART_Receive_DMA+0x26>
 801399a:	1dbb      	adds	r3, r7, #6
 801399c:	881b      	ldrh	r3, [r3, #0]
 801399e:	2b00      	cmp	r3, #0
 80139a0:	d101      	bne.n	80139a6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80139a2:	2301      	movs	r3, #1
 80139a4:	e042      	b.n	8013a2c <HAL_UART_Receive_DMA+0xb0>
    }

    /* In case of 9bits/No Parity transfer, pData buffer provided as input parameter
       should be aligned on a u16 frontier, as data copy from RDR will be
       handled by DMA from a u16 frontier. */
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 80139a6:	68fb      	ldr	r3, [r7, #12]
 80139a8:	689a      	ldr	r2, [r3, #8]
 80139aa:	2380      	movs	r3, #128	@ 0x80
 80139ac:	015b      	lsls	r3, r3, #5
 80139ae:	429a      	cmp	r2, r3
 80139b0:	d109      	bne.n	80139c6 <HAL_UART_Receive_DMA+0x4a>
 80139b2:	68fb      	ldr	r3, [r7, #12]
 80139b4:	691b      	ldr	r3, [r3, #16]
 80139b6:	2b00      	cmp	r3, #0
 80139b8:	d105      	bne.n	80139c6 <HAL_UART_Receive_DMA+0x4a>
    {
      if ((((uint32_t)pData) & 1U) != 0U)
 80139ba:	68bb      	ldr	r3, [r7, #8]
 80139bc:	2201      	movs	r2, #1
 80139be:	4013      	ands	r3, r2
 80139c0:	d001      	beq.n	80139c6 <HAL_UART_Receive_DMA+0x4a>
      {
        return  HAL_ERROR;
 80139c2:	2301      	movs	r3, #1
 80139c4:	e032      	b.n	8013a2c <HAL_UART_Receive_DMA+0xb0>
      }
    }

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80139c6:	68fb      	ldr	r3, [r7, #12]
 80139c8:	2200      	movs	r2, #0
 80139ca:	661a      	str	r2, [r3, #96]	@ 0x60

    if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80139cc:	68fb      	ldr	r3, [r7, #12]
 80139ce:	681b      	ldr	r3, [r3, #0]
 80139d0:	4a18      	ldr	r2, [pc, #96]	@ (8013a34 <HAL_UART_Receive_DMA+0xb8>)
 80139d2:	4293      	cmp	r3, r2
 80139d4:	d020      	beq.n	8013a18 <HAL_UART_Receive_DMA+0x9c>
    {
      /* Check that USART RTOEN bit is set */
      if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80139d6:	68fb      	ldr	r3, [r7, #12]
 80139d8:	681b      	ldr	r3, [r3, #0]
 80139da:	685a      	ldr	r2, [r3, #4]
 80139dc:	2380      	movs	r3, #128	@ 0x80
 80139de:	041b      	lsls	r3, r3, #16
 80139e0:	4013      	ands	r3, r2
 80139e2:	d019      	beq.n	8013a18 <HAL_UART_Receive_DMA+0x9c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80139e4:	f3ef 8310 	mrs	r3, PRIMASK
 80139e8:	613b      	str	r3, [r7, #16]
  return(result);
 80139ea:	693b      	ldr	r3, [r7, #16]
      {
        /* Enable the UART Receiver Timeout Interrupt */
        ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80139ec:	61fb      	str	r3, [r7, #28]
 80139ee:	2301      	movs	r3, #1
 80139f0:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80139f2:	697b      	ldr	r3, [r7, #20]
 80139f4:	f383 8810 	msr	PRIMASK, r3
}
 80139f8:	46c0      	nop			@ (mov r8, r8)
 80139fa:	68fb      	ldr	r3, [r7, #12]
 80139fc:	681b      	ldr	r3, [r3, #0]
 80139fe:	681a      	ldr	r2, [r3, #0]
 8013a00:	68fb      	ldr	r3, [r7, #12]
 8013a02:	681b      	ldr	r3, [r3, #0]
 8013a04:	2180      	movs	r1, #128	@ 0x80
 8013a06:	04c9      	lsls	r1, r1, #19
 8013a08:	430a      	orrs	r2, r1
 8013a0a:	601a      	str	r2, [r3, #0]
 8013a0c:	69fb      	ldr	r3, [r7, #28]
 8013a0e:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013a10:	69bb      	ldr	r3, [r7, #24]
 8013a12:	f383 8810 	msr	PRIMASK, r3
}
 8013a16:	46c0      	nop			@ (mov r8, r8)
      }
    }

    return (UART_Start_Receive_DMA(huart, pData, Size));
 8013a18:	1dbb      	adds	r3, r7, #6
 8013a1a:	881a      	ldrh	r2, [r3, #0]
 8013a1c:	68b9      	ldr	r1, [r7, #8]
 8013a1e:	68fb      	ldr	r3, [r7, #12]
 8013a20:	0018      	movs	r0, r3
 8013a22:	f001 f8a3 	bl	8014b6c <UART_Start_Receive_DMA>
 8013a26:	0003      	movs	r3, r0
 8013a28:	e000      	b.n	8013a2c <HAL_UART_Receive_DMA+0xb0>
  }
  else
  {
    return HAL_BUSY;
 8013a2a:	2302      	movs	r3, #2
  }
}
 8013a2c:	0018      	movs	r0, r3
 8013a2e:	46bd      	mov	sp, r7
 8013a30:	b008      	add	sp, #32
 8013a32:	bd80      	pop	{r7, pc}
 8013a34:	40004800 	.word	0x40004800

08013a38 <HAL_UART_IRQHandler>:
  * @brief Handle UART interrupt request.
  * @param huart UART handle.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8013a38:	b590      	push	{r4, r7, lr}
 8013a3a:	b0ab      	sub	sp, #172	@ 0xac
 8013a3c:	af00      	add	r7, sp, #0
 8013a3e:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->ISR);
 8013a40:	687b      	ldr	r3, [r7, #4]
 8013a42:	681b      	ldr	r3, [r3, #0]
 8013a44:	69db      	ldr	r3, [r3, #28]
 8013a46:	22a4      	movs	r2, #164	@ 0xa4
 8013a48:	18b9      	adds	r1, r7, r2
 8013a4a:	600b      	str	r3, [r1, #0]
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8013a4c:	687b      	ldr	r3, [r7, #4]
 8013a4e:	681b      	ldr	r3, [r3, #0]
 8013a50:	681b      	ldr	r3, [r3, #0]
 8013a52:	20a0      	movs	r0, #160	@ 0xa0
 8013a54:	1839      	adds	r1, r7, r0
 8013a56:	600b      	str	r3, [r1, #0]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8013a58:	687b      	ldr	r3, [r7, #4]
 8013a5a:	681b      	ldr	r3, [r3, #0]
 8013a5c:	689b      	ldr	r3, [r3, #8]
 8013a5e:	219c      	movs	r1, #156	@ 0x9c
 8013a60:	1879      	adds	r1, r7, r1
 8013a62:	600b      	str	r3, [r1, #0]

  uint32_t errorflags;
  uint32_t errorcode;

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_ISR_PE | USART_ISR_FE | USART_ISR_ORE | USART_ISR_NE | USART_ISR_RTOF));
 8013a64:	0011      	movs	r1, r2
 8013a66:	18bb      	adds	r3, r7, r2
 8013a68:	681b      	ldr	r3, [r3, #0]
 8013a6a:	4a9c      	ldr	r2, [pc, #624]	@ (8013cdc <HAL_UART_IRQHandler+0x2a4>)
 8013a6c:	4013      	ands	r3, r2
 8013a6e:	2298      	movs	r2, #152	@ 0x98
 8013a70:	18bc      	adds	r4, r7, r2
 8013a72:	6023      	str	r3, [r4, #0]
  if (errorflags == 0U)
 8013a74:	18bb      	adds	r3, r7, r2
 8013a76:	681b      	ldr	r3, [r3, #0]
 8013a78:	2b00      	cmp	r3, #0
 8013a7a:	d114      	bne.n	8013aa6 <HAL_UART_IRQHandler+0x6e>
  {
    /* UART in mode Receiver ---------------------------------------------------*/
    if (((isrflags & USART_ISR_RXNE) != 0U)
 8013a7c:	187b      	adds	r3, r7, r1
 8013a7e:	681b      	ldr	r3, [r3, #0]
 8013a80:	2220      	movs	r2, #32
 8013a82:	4013      	ands	r3, r2
 8013a84:	d00f      	beq.n	8013aa6 <HAL_UART_IRQHandler+0x6e>
        && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8013a86:	183b      	adds	r3, r7, r0
 8013a88:	681b      	ldr	r3, [r3, #0]
 8013a8a:	2220      	movs	r2, #32
 8013a8c:	4013      	ands	r3, r2
 8013a8e:	d00a      	beq.n	8013aa6 <HAL_UART_IRQHandler+0x6e>
    {
      if (huart->RxISR != NULL)
 8013a90:	687b      	ldr	r3, [r7, #4]
 8013a92:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013a94:	2b00      	cmp	r3, #0
 8013a96:	d100      	bne.n	8013a9a <HAL_UART_IRQHandler+0x62>
 8013a98:	e2aa      	b.n	8013ff0 <HAL_UART_IRQHandler+0x5b8>
      {
        huart->RxISR(huart);
 8013a9a:	687b      	ldr	r3, [r7, #4]
 8013a9c:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013a9e:	687a      	ldr	r2, [r7, #4]
 8013aa0:	0010      	movs	r0, r2
 8013aa2:	4798      	blx	r3
      }
      return;
 8013aa4:	e2a4      	b.n	8013ff0 <HAL_UART_IRQHandler+0x5b8>
    }
  }

  /* If some errors occur */
  if ((errorflags != 0U)
 8013aa6:	2398      	movs	r3, #152	@ 0x98
 8013aa8:	18fb      	adds	r3, r7, r3
 8013aaa:	681b      	ldr	r3, [r3, #0]
 8013aac:	2b00      	cmp	r3, #0
 8013aae:	d100      	bne.n	8013ab2 <HAL_UART_IRQHandler+0x7a>
 8013ab0:	e11a      	b.n	8013ce8 <HAL_UART_IRQHandler+0x2b0>
      && (((cr3its & USART_CR3_EIE) != 0U)
 8013ab2:	239c      	movs	r3, #156	@ 0x9c
 8013ab4:	18fb      	adds	r3, r7, r3
 8013ab6:	681b      	ldr	r3, [r3, #0]
 8013ab8:	2201      	movs	r2, #1
 8013aba:	4013      	ands	r3, r2
 8013abc:	d106      	bne.n	8013acc <HAL_UART_IRQHandler+0x94>
          || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE | USART_CR1_RTOIE)) != 0U)))
 8013abe:	23a0      	movs	r3, #160	@ 0xa0
 8013ac0:	18fb      	adds	r3, r7, r3
 8013ac2:	681b      	ldr	r3, [r3, #0]
 8013ac4:	4a86      	ldr	r2, [pc, #536]	@ (8013ce0 <HAL_UART_IRQHandler+0x2a8>)
 8013ac6:	4013      	ands	r3, r2
 8013ac8:	d100      	bne.n	8013acc <HAL_UART_IRQHandler+0x94>
 8013aca:	e10d      	b.n	8013ce8 <HAL_UART_IRQHandler+0x2b0>
  {
    /* UART parity error interrupt occurred -------------------------------------*/
    if (((isrflags & USART_ISR_PE) != 0U) && ((cr1its & USART_CR1_PEIE) != 0U))
 8013acc:	23a4      	movs	r3, #164	@ 0xa4
 8013ace:	18fb      	adds	r3, r7, r3
 8013ad0:	681b      	ldr	r3, [r3, #0]
 8013ad2:	2201      	movs	r2, #1
 8013ad4:	4013      	ands	r3, r2
 8013ad6:	d012      	beq.n	8013afe <HAL_UART_IRQHandler+0xc6>
 8013ad8:	23a0      	movs	r3, #160	@ 0xa0
 8013ada:	18fb      	adds	r3, r7, r3
 8013adc:	681a      	ldr	r2, [r3, #0]
 8013ade:	2380      	movs	r3, #128	@ 0x80
 8013ae0:	005b      	lsls	r3, r3, #1
 8013ae2:	4013      	ands	r3, r2
 8013ae4:	d00b      	beq.n	8013afe <HAL_UART_IRQHandler+0xc6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_PEF);
 8013ae6:	687b      	ldr	r3, [r7, #4]
 8013ae8:	681b      	ldr	r3, [r3, #0]
 8013aea:	2201      	movs	r2, #1
 8013aec:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8013aee:	687b      	ldr	r3, [r7, #4]
 8013af0:	2284      	movs	r2, #132	@ 0x84
 8013af2:	589b      	ldr	r3, [r3, r2]
 8013af4:	2201      	movs	r2, #1
 8013af6:	431a      	orrs	r2, r3
 8013af8:	687b      	ldr	r3, [r7, #4]
 8013afa:	2184      	movs	r1, #132	@ 0x84
 8013afc:	505a      	str	r2, [r3, r1]
    }

    /* UART frame error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_FE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8013afe:	23a4      	movs	r3, #164	@ 0xa4
 8013b00:	18fb      	adds	r3, r7, r3
 8013b02:	681b      	ldr	r3, [r3, #0]
 8013b04:	2202      	movs	r2, #2
 8013b06:	4013      	ands	r3, r2
 8013b08:	d011      	beq.n	8013b2e <HAL_UART_IRQHandler+0xf6>
 8013b0a:	239c      	movs	r3, #156	@ 0x9c
 8013b0c:	18fb      	adds	r3, r7, r3
 8013b0e:	681b      	ldr	r3, [r3, #0]
 8013b10:	2201      	movs	r2, #1
 8013b12:	4013      	ands	r3, r2
 8013b14:	d00b      	beq.n	8013b2e <HAL_UART_IRQHandler+0xf6>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_FEF);
 8013b16:	687b      	ldr	r3, [r7, #4]
 8013b18:	681b      	ldr	r3, [r3, #0]
 8013b1a:	2202      	movs	r2, #2
 8013b1c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8013b1e:	687b      	ldr	r3, [r7, #4]
 8013b20:	2284      	movs	r2, #132	@ 0x84
 8013b22:	589b      	ldr	r3, [r3, r2]
 8013b24:	2204      	movs	r2, #4
 8013b26:	431a      	orrs	r2, r3
 8013b28:	687b      	ldr	r3, [r7, #4]
 8013b2a:	2184      	movs	r1, #132	@ 0x84
 8013b2c:	505a      	str	r2, [r3, r1]
    }

    /* UART noise error interrupt occurred --------------------------------------*/
    if (((isrflags & USART_ISR_NE) != 0U) && ((cr3its & USART_CR3_EIE) != 0U))
 8013b2e:	23a4      	movs	r3, #164	@ 0xa4
 8013b30:	18fb      	adds	r3, r7, r3
 8013b32:	681b      	ldr	r3, [r3, #0]
 8013b34:	2204      	movs	r2, #4
 8013b36:	4013      	ands	r3, r2
 8013b38:	d011      	beq.n	8013b5e <HAL_UART_IRQHandler+0x126>
 8013b3a:	239c      	movs	r3, #156	@ 0x9c
 8013b3c:	18fb      	adds	r3, r7, r3
 8013b3e:	681b      	ldr	r3, [r3, #0]
 8013b40:	2201      	movs	r2, #1
 8013b42:	4013      	ands	r3, r2
 8013b44:	d00b      	beq.n	8013b5e <HAL_UART_IRQHandler+0x126>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_NEF);
 8013b46:	687b      	ldr	r3, [r7, #4]
 8013b48:	681b      	ldr	r3, [r3, #0]
 8013b4a:	2204      	movs	r2, #4
 8013b4c:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8013b4e:	687b      	ldr	r3, [r7, #4]
 8013b50:	2284      	movs	r2, #132	@ 0x84
 8013b52:	589b      	ldr	r3, [r3, r2]
 8013b54:	2202      	movs	r2, #2
 8013b56:	431a      	orrs	r2, r3
 8013b58:	687b      	ldr	r3, [r7, #4]
 8013b5a:	2184      	movs	r1, #132	@ 0x84
 8013b5c:	505a      	str	r2, [r3, r1]
    }

    /* UART Over-Run interrupt occurred -----------------------------------------*/
    if (((isrflags & USART_ISR_ORE) != 0U)
 8013b5e:	23a4      	movs	r3, #164	@ 0xa4
 8013b60:	18fb      	adds	r3, r7, r3
 8013b62:	681b      	ldr	r3, [r3, #0]
 8013b64:	2208      	movs	r2, #8
 8013b66:	4013      	ands	r3, r2
 8013b68:	d017      	beq.n	8013b9a <HAL_UART_IRQHandler+0x162>
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8013b6a:	23a0      	movs	r3, #160	@ 0xa0
 8013b6c:	18fb      	adds	r3, r7, r3
 8013b6e:	681b      	ldr	r3, [r3, #0]
 8013b70:	2220      	movs	r2, #32
 8013b72:	4013      	ands	r3, r2
 8013b74:	d105      	bne.n	8013b82 <HAL_UART_IRQHandler+0x14a>
            ((cr3its & USART_CR3_EIE) != 0U)))
 8013b76:	239c      	movs	r3, #156	@ 0x9c
 8013b78:	18fb      	adds	r3, r7, r3
 8013b7a:	681b      	ldr	r3, [r3, #0]
 8013b7c:	2201      	movs	r2, #1
 8013b7e:	4013      	ands	r3, r2
        && (((cr1its & USART_CR1_RXNEIE) != 0U) ||
 8013b80:	d00b      	beq.n	8013b9a <HAL_UART_IRQHandler+0x162>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8013b82:	687b      	ldr	r3, [r7, #4]
 8013b84:	681b      	ldr	r3, [r3, #0]
 8013b86:	2208      	movs	r2, #8
 8013b88:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8013b8a:	687b      	ldr	r3, [r7, #4]
 8013b8c:	2284      	movs	r2, #132	@ 0x84
 8013b8e:	589b      	ldr	r3, [r3, r2]
 8013b90:	2208      	movs	r2, #8
 8013b92:	431a      	orrs	r2, r3
 8013b94:	687b      	ldr	r3, [r7, #4]
 8013b96:	2184      	movs	r1, #132	@ 0x84
 8013b98:	505a      	str	r2, [r3, r1]
    }

    /* UART Receiver Timeout interrupt occurred ---------------------------------*/
    if (((isrflags & USART_ISR_RTOF) != 0U) && ((cr1its & USART_CR1_RTOIE) != 0U))
 8013b9a:	23a4      	movs	r3, #164	@ 0xa4
 8013b9c:	18fb      	adds	r3, r7, r3
 8013b9e:	681a      	ldr	r2, [r3, #0]
 8013ba0:	2380      	movs	r3, #128	@ 0x80
 8013ba2:	011b      	lsls	r3, r3, #4
 8013ba4:	4013      	ands	r3, r2
 8013ba6:	d013      	beq.n	8013bd0 <HAL_UART_IRQHandler+0x198>
 8013ba8:	23a0      	movs	r3, #160	@ 0xa0
 8013baa:	18fb      	adds	r3, r7, r3
 8013bac:	681a      	ldr	r2, [r3, #0]
 8013bae:	2380      	movs	r3, #128	@ 0x80
 8013bb0:	04db      	lsls	r3, r3, #19
 8013bb2:	4013      	ands	r3, r2
 8013bb4:	d00c      	beq.n	8013bd0 <HAL_UART_IRQHandler+0x198>
    {
      __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8013bb6:	687b      	ldr	r3, [r7, #4]
 8013bb8:	681b      	ldr	r3, [r3, #0]
 8013bba:	2280      	movs	r2, #128	@ 0x80
 8013bbc:	0112      	lsls	r2, r2, #4
 8013bbe:	621a      	str	r2, [r3, #32]

      huart->ErrorCode |= HAL_UART_ERROR_RTO;
 8013bc0:	687b      	ldr	r3, [r7, #4]
 8013bc2:	2284      	movs	r2, #132	@ 0x84
 8013bc4:	589b      	ldr	r3, [r3, r2]
 8013bc6:	2220      	movs	r2, #32
 8013bc8:	431a      	orrs	r2, r3
 8013bca:	687b      	ldr	r3, [r7, #4]
 8013bcc:	2184      	movs	r1, #132	@ 0x84
 8013bce:	505a      	str	r2, [r3, r1]
    }

    /* Call UART Error Call back function if need be ----------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8013bd0:	687b      	ldr	r3, [r7, #4]
 8013bd2:	2284      	movs	r2, #132	@ 0x84
 8013bd4:	589b      	ldr	r3, [r3, r2]
 8013bd6:	2b00      	cmp	r3, #0
 8013bd8:	d100      	bne.n	8013bdc <HAL_UART_IRQHandler+0x1a4>
 8013bda:	e20b      	b.n	8013ff4 <HAL_UART_IRQHandler+0x5bc>
    {
      /* UART in mode Receiver --------------------------------------------------*/
      if (((isrflags & USART_ISR_RXNE) != 0U)
 8013bdc:	23a4      	movs	r3, #164	@ 0xa4
 8013bde:	18fb      	adds	r3, r7, r3
 8013be0:	681b      	ldr	r3, [r3, #0]
 8013be2:	2220      	movs	r2, #32
 8013be4:	4013      	ands	r3, r2
 8013be6:	d00e      	beq.n	8013c06 <HAL_UART_IRQHandler+0x1ce>
          && ((cr1its & USART_CR1_RXNEIE) != 0U))
 8013be8:	23a0      	movs	r3, #160	@ 0xa0
 8013bea:	18fb      	adds	r3, r7, r3
 8013bec:	681b      	ldr	r3, [r3, #0]
 8013bee:	2220      	movs	r2, #32
 8013bf0:	4013      	ands	r3, r2
 8013bf2:	d008      	beq.n	8013c06 <HAL_UART_IRQHandler+0x1ce>
      {
        if (huart->RxISR != NULL)
 8013bf4:	687b      	ldr	r3, [r7, #4]
 8013bf6:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013bf8:	2b00      	cmp	r3, #0
 8013bfa:	d004      	beq.n	8013c06 <HAL_UART_IRQHandler+0x1ce>
        {
          huart->RxISR(huart);
 8013bfc:	687b      	ldr	r3, [r7, #4]
 8013bfe:	6e9b      	ldr	r3, [r3, #104]	@ 0x68
 8013c00:	687a      	ldr	r2, [r7, #4]
 8013c02:	0010      	movs	r0, r2
 8013c04:	4798      	blx	r3
      /* If Error is to be considered as blocking :
          - Receiver Timeout error in Reception
          - Overrun error in Reception
          - any error occurs in DMA mode reception
      */
      errorcode = huart->ErrorCode;
 8013c06:	687b      	ldr	r3, [r7, #4]
 8013c08:	2284      	movs	r2, #132	@ 0x84
 8013c0a:	589b      	ldr	r3, [r3, r2]
 8013c0c:	2194      	movs	r1, #148	@ 0x94
 8013c0e:	187a      	adds	r2, r7, r1
 8013c10:	6013      	str	r3, [r2, #0]
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8013c12:	687b      	ldr	r3, [r7, #4]
 8013c14:	681b      	ldr	r3, [r3, #0]
 8013c16:	689b      	ldr	r3, [r3, #8]
 8013c18:	2240      	movs	r2, #64	@ 0x40
 8013c1a:	4013      	ands	r3, r2
 8013c1c:	2b40      	cmp	r3, #64	@ 0x40
 8013c1e:	d004      	beq.n	8013c2a <HAL_UART_IRQHandler+0x1f2>
          ((errorcode & (HAL_UART_ERROR_RTO | HAL_UART_ERROR_ORE)) != 0U))
 8013c20:	187b      	adds	r3, r7, r1
 8013c22:	681b      	ldr	r3, [r3, #0]
 8013c24:	2228      	movs	r2, #40	@ 0x28
 8013c26:	4013      	ands	r3, r2
      if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) ||
 8013c28:	d04b      	beq.n	8013cc2 <HAL_UART_IRQHandler+0x28a>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8013c2a:	687b      	ldr	r3, [r7, #4]
 8013c2c:	0018      	movs	r0, r3
 8013c2e:	f001 f861 	bl	8014cf4 <UART_EndRxTransfer>

        /* Abort the UART DMA Rx channel if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013c32:	687b      	ldr	r3, [r7, #4]
 8013c34:	681b      	ldr	r3, [r3, #0]
 8013c36:	689b      	ldr	r3, [r3, #8]
 8013c38:	2240      	movs	r2, #64	@ 0x40
 8013c3a:	4013      	ands	r3, r2
 8013c3c:	2b40      	cmp	r3, #64	@ 0x40
 8013c3e:	d139      	bne.n	8013cb4 <HAL_UART_IRQHandler+0x27c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013c40:	f3ef 8310 	mrs	r3, PRIMASK
 8013c44:	663b      	str	r3, [r7, #96]	@ 0x60
  return(result);
 8013c46:	6e3b      	ldr	r3, [r7, #96]	@ 0x60
        {
          /* Disable the UART DMA Rx request if enabled */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8013c48:	2090      	movs	r0, #144	@ 0x90
 8013c4a:	183a      	adds	r2, r7, r0
 8013c4c:	6013      	str	r3, [r2, #0]
 8013c4e:	2301      	movs	r3, #1
 8013c50:	667b      	str	r3, [r7, #100]	@ 0x64
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013c52:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8013c54:	f383 8810 	msr	PRIMASK, r3
}
 8013c58:	46c0      	nop			@ (mov r8, r8)
 8013c5a:	687b      	ldr	r3, [r7, #4]
 8013c5c:	681b      	ldr	r3, [r3, #0]
 8013c5e:	689a      	ldr	r2, [r3, #8]
 8013c60:	687b      	ldr	r3, [r7, #4]
 8013c62:	681b      	ldr	r3, [r3, #0]
 8013c64:	2140      	movs	r1, #64	@ 0x40
 8013c66:	438a      	bics	r2, r1
 8013c68:	609a      	str	r2, [r3, #8]
 8013c6a:	183b      	adds	r3, r7, r0
 8013c6c:	681b      	ldr	r3, [r3, #0]
 8013c6e:	66bb      	str	r3, [r7, #104]	@ 0x68
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013c70:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8013c72:	f383 8810 	msr	PRIMASK, r3
}
 8013c76:	46c0      	nop			@ (mov r8, r8)

          /* Abort the UART DMA Rx channel */
          if (huart->hdmarx != NULL)
 8013c78:	687b      	ldr	r3, [r7, #4]
 8013c7a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013c7c:	2b00      	cmp	r3, #0
 8013c7e:	d012      	beq.n	8013ca6 <HAL_UART_IRQHandler+0x26e>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8013c80:	687b      	ldr	r3, [r7, #4]
 8013c82:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013c84:	4a17      	ldr	r2, [pc, #92]	@ (8013ce4 <HAL_UART_IRQHandler+0x2ac>)
 8013c86:	639a      	str	r2, [r3, #56]	@ 0x38

            /* Abort DMA RX */
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8013c88:	687b      	ldr	r3, [r7, #4]
 8013c8a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013c8c:	0018      	movs	r0, r3
 8013c8e:	f7f8 fea7 	bl	800c9e0 <HAL_DMA_Abort_IT>
 8013c92:	1e03      	subs	r3, r0, #0
 8013c94:	d020      	beq.n	8013cd8 <HAL_UART_IRQHandler+0x2a0>
            {
              /* Call Directly huart->hdmarx->XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8013c96:	687b      	ldr	r3, [r7, #4]
 8013c98:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013c9a:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 8013c9c:	687b      	ldr	r3, [r7, #4]
 8013c9e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013ca0:	0018      	movs	r0, r3
 8013ca2:	4790      	blx	r2
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013ca4:	e018      	b.n	8013cd8 <HAL_UART_IRQHandler+0x2a0>
          else
          {
            /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
 8013ca6:	687b      	ldr	r3, [r7, #4]
 8013ca8:	2298      	movs	r2, #152	@ 0x98
 8013caa:	589b      	ldr	r3, [r3, r2]
 8013cac:	687a      	ldr	r2, [r7, #4]
 8013cae:	0010      	movs	r0, r2
 8013cb0:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013cb2:	e011      	b.n	8013cd8 <HAL_UART_IRQHandler+0x2a0>
        else
        {
          /* Call user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
 8013cb4:	687b      	ldr	r3, [r7, #4]
 8013cb6:	2298      	movs	r2, #152	@ 0x98
 8013cb8:	589b      	ldr	r3, [r3, r2]
 8013cba:	687a      	ldr	r2, [r7, #4]
 8013cbc:	0010      	movs	r0, r2
 8013cbe:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013cc0:	e00a      	b.n	8013cd8 <HAL_UART_IRQHandler+0x2a0>
      {
        /* Non Blocking error : transfer could go on.
           Error is notified to user through user error callback */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
 8013cc2:	687b      	ldr	r3, [r7, #4]
 8013cc4:	2298      	movs	r2, #152	@ 0x98
 8013cc6:	589b      	ldr	r3, [r3, r2]
 8013cc8:	687a      	ldr	r2, [r7, #4]
 8013cca:	0010      	movs	r0, r2
 8013ccc:	4798      	blx	r3
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8013cce:	687b      	ldr	r3, [r7, #4]
 8013cd0:	2284      	movs	r2, #132	@ 0x84
 8013cd2:	2100      	movs	r1, #0
 8013cd4:	5099      	str	r1, [r3, r2]
      }
    }
    return;
 8013cd6:	e18d      	b.n	8013ff4 <HAL_UART_IRQHandler+0x5bc>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013cd8:	46c0      	nop			@ (mov r8, r8)
    return;
 8013cda:	e18b      	b.n	8013ff4 <HAL_UART_IRQHandler+0x5bc>
 8013cdc:	0000080f 	.word	0x0000080f
 8013ce0:	04000120 	.word	0x04000120
 8013ce4:	08015081 	.word	0x08015081

  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if ((huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8013ce8:	687b      	ldr	r3, [r7, #4]
 8013cea:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8013cec:	2b01      	cmp	r3, #1
 8013cee:	d000      	beq.n	8013cf2 <HAL_UART_IRQHandler+0x2ba>
 8013cf0:	e13d      	b.n	8013f6e <HAL_UART_IRQHandler+0x536>
      && ((isrflags & USART_ISR_IDLE) != 0U)
 8013cf2:	23a4      	movs	r3, #164	@ 0xa4
 8013cf4:	18fb      	adds	r3, r7, r3
 8013cf6:	681b      	ldr	r3, [r3, #0]
 8013cf8:	2210      	movs	r2, #16
 8013cfa:	4013      	ands	r3, r2
 8013cfc:	d100      	bne.n	8013d00 <HAL_UART_IRQHandler+0x2c8>
 8013cfe:	e136      	b.n	8013f6e <HAL_UART_IRQHandler+0x536>
      && ((cr1its & USART_ISR_IDLE) != 0U))
 8013d00:	23a0      	movs	r3, #160	@ 0xa0
 8013d02:	18fb      	adds	r3, r7, r3
 8013d04:	681b      	ldr	r3, [r3, #0]
 8013d06:	2210      	movs	r2, #16
 8013d08:	4013      	ands	r3, r2
 8013d0a:	d100      	bne.n	8013d0e <HAL_UART_IRQHandler+0x2d6>
 8013d0c:	e12f      	b.n	8013f6e <HAL_UART_IRQHandler+0x536>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8013d0e:	687b      	ldr	r3, [r7, #4]
 8013d10:	681b      	ldr	r3, [r3, #0]
 8013d12:	2210      	movs	r2, #16
 8013d14:	621a      	str	r2, [r3, #32]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8013d16:	687b      	ldr	r3, [r7, #4]
 8013d18:	681b      	ldr	r3, [r3, #0]
 8013d1a:	689b      	ldr	r3, [r3, #8]
 8013d1c:	2240      	movs	r2, #64	@ 0x40
 8013d1e:	4013      	ands	r3, r2
 8013d20:	2b40      	cmp	r3, #64	@ 0x40
 8013d22:	d000      	beq.n	8013d26 <HAL_UART_IRQHandler+0x2ee>
 8013d24:	e0a2      	b.n	8013e6c <HAL_UART_IRQHandler+0x434>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8013d26:	687b      	ldr	r3, [r7, #4]
 8013d28:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013d2a:	681b      	ldr	r3, [r3, #0]
 8013d2c:	685a      	ldr	r2, [r3, #4]
 8013d2e:	217e      	movs	r1, #126	@ 0x7e
 8013d30:	187b      	adds	r3, r7, r1
 8013d32:	801a      	strh	r2, [r3, #0]
      if ((nb_remaining_rx_data > 0U)
 8013d34:	187b      	adds	r3, r7, r1
 8013d36:	881b      	ldrh	r3, [r3, #0]
 8013d38:	2b00      	cmp	r3, #0
 8013d3a:	d100      	bne.n	8013d3e <HAL_UART_IRQHandler+0x306>
 8013d3c:	e15c      	b.n	8013ff8 <HAL_UART_IRQHandler+0x5c0>
          && (nb_remaining_rx_data < huart->RxXferSize))
 8013d3e:	687b      	ldr	r3, [r7, #4]
 8013d40:	2258      	movs	r2, #88	@ 0x58
 8013d42:	5a9b      	ldrh	r3, [r3, r2]
 8013d44:	187a      	adds	r2, r7, r1
 8013d46:	8812      	ldrh	r2, [r2, #0]
 8013d48:	429a      	cmp	r2, r3
 8013d4a:	d300      	bcc.n	8013d4e <HAL_UART_IRQHandler+0x316>
 8013d4c:	e154      	b.n	8013ff8 <HAL_UART_IRQHandler+0x5c0>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8013d4e:	687b      	ldr	r3, [r7, #4]
 8013d50:	187a      	adds	r2, r7, r1
 8013d52:	215a      	movs	r1, #90	@ 0x5a
 8013d54:	8812      	ldrh	r2, [r2, #0]
 8013d56:	525a      	strh	r2, [r3, r1]

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (HAL_IS_BIT_CLR(huart->hdmarx->Instance->CCR, DMA_CCR_CIRC))
 8013d58:	687b      	ldr	r3, [r7, #4]
 8013d5a:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013d5c:	681b      	ldr	r3, [r3, #0]
 8013d5e:	681b      	ldr	r3, [r3, #0]
 8013d60:	2220      	movs	r2, #32
 8013d62:	4013      	ands	r3, r2
 8013d64:	d16f      	bne.n	8013e46 <HAL_UART_IRQHandler+0x40e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013d66:	f3ef 8310 	mrs	r3, PRIMASK
 8013d6a:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8013d6c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8013d6e:	67bb      	str	r3, [r7, #120]	@ 0x78
 8013d70:	2301      	movs	r3, #1
 8013d72:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013d74:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8013d76:	f383 8810 	msr	PRIMASK, r3
}
 8013d7a:	46c0      	nop			@ (mov r8, r8)
 8013d7c:	687b      	ldr	r3, [r7, #4]
 8013d7e:	681b      	ldr	r3, [r3, #0]
 8013d80:	681a      	ldr	r2, [r3, #0]
 8013d82:	687b      	ldr	r3, [r7, #4]
 8013d84:	681b      	ldr	r3, [r3, #0]
 8013d86:	49a0      	ldr	r1, [pc, #640]	@ (8014008 <HAL_UART_IRQHandler+0x5d0>)
 8013d88:	400a      	ands	r2, r1
 8013d8a:	601a      	str	r2, [r3, #0]
 8013d8c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8013d8e:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013d90:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8013d92:	f383 8810 	msr	PRIMASK, r3
}
 8013d96:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013d98:	f3ef 8310 	mrs	r3, PRIMASK
 8013d9c:	63fb      	str	r3, [r7, #60]	@ 0x3c
  return(result);
 8013d9e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013da0:	677b      	str	r3, [r7, #116]	@ 0x74
 8013da2:	2301      	movs	r3, #1
 8013da4:	643b      	str	r3, [r7, #64]	@ 0x40
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013da6:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8013da8:	f383 8810 	msr	PRIMASK, r3
}
 8013dac:	46c0      	nop			@ (mov r8, r8)
 8013dae:	687b      	ldr	r3, [r7, #4]
 8013db0:	681b      	ldr	r3, [r3, #0]
 8013db2:	689a      	ldr	r2, [r3, #8]
 8013db4:	687b      	ldr	r3, [r7, #4]
 8013db6:	681b      	ldr	r3, [r3, #0]
 8013db8:	2101      	movs	r1, #1
 8013dba:	438a      	bics	r2, r1
 8013dbc:	609a      	str	r2, [r3, #8]
 8013dbe:	6f7b      	ldr	r3, [r7, #116]	@ 0x74
 8013dc0:	647b      	str	r3, [r7, #68]	@ 0x44
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013dc2:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8013dc4:	f383 8810 	msr	PRIMASK, r3
}
 8013dc8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013dca:	f3ef 8310 	mrs	r3, PRIMASK
 8013dce:	64bb      	str	r3, [r7, #72]	@ 0x48
  return(result);
 8013dd0:	6cbb      	ldr	r3, [r7, #72]	@ 0x48

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8013dd2:	673b      	str	r3, [r7, #112]	@ 0x70
 8013dd4:	2301      	movs	r3, #1
 8013dd6:	64fb      	str	r3, [r7, #76]	@ 0x4c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013dd8:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8013dda:	f383 8810 	msr	PRIMASK, r3
}
 8013dde:	46c0      	nop			@ (mov r8, r8)
 8013de0:	687b      	ldr	r3, [r7, #4]
 8013de2:	681b      	ldr	r3, [r3, #0]
 8013de4:	689a      	ldr	r2, [r3, #8]
 8013de6:	687b      	ldr	r3, [r7, #4]
 8013de8:	681b      	ldr	r3, [r3, #0]
 8013dea:	2140      	movs	r1, #64	@ 0x40
 8013dec:	438a      	bics	r2, r1
 8013dee:	609a      	str	r2, [r3, #8]
 8013df0:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 8013df2:	653b      	str	r3, [r7, #80]	@ 0x50
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013df4:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8013df6:	f383 8810 	msr	PRIMASK, r3
}
 8013dfa:	46c0      	nop			@ (mov r8, r8)

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8013dfc:	687b      	ldr	r3, [r7, #4]
 8013dfe:	2280      	movs	r2, #128	@ 0x80
 8013e00:	2120      	movs	r1, #32
 8013e02:	5099      	str	r1, [r3, r2]
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013e04:	687b      	ldr	r3, [r7, #4]
 8013e06:	2200      	movs	r2, #0
 8013e08:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013e0a:	f3ef 8310 	mrs	r3, PRIMASK
 8013e0e:	657b      	str	r3, [r7, #84]	@ 0x54
  return(result);
 8013e10:	6d7b      	ldr	r3, [r7, #84]	@ 0x54

          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013e12:	66fb      	str	r3, [r7, #108]	@ 0x6c
 8013e14:	2301      	movs	r3, #1
 8013e16:	65bb      	str	r3, [r7, #88]	@ 0x58
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013e18:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8013e1a:	f383 8810 	msr	PRIMASK, r3
}
 8013e1e:	46c0      	nop			@ (mov r8, r8)
 8013e20:	687b      	ldr	r3, [r7, #4]
 8013e22:	681b      	ldr	r3, [r3, #0]
 8013e24:	681a      	ldr	r2, [r3, #0]
 8013e26:	687b      	ldr	r3, [r7, #4]
 8013e28:	681b      	ldr	r3, [r3, #0]
 8013e2a:	2110      	movs	r1, #16
 8013e2c:	438a      	bics	r2, r1
 8013e2e:	601a      	str	r2, [r3, #0]
 8013e30:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 8013e32:	65fb      	str	r3, [r7, #92]	@ 0x5c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013e34:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8013e36:	f383 8810 	msr	PRIMASK, r3
}
 8013e3a:	46c0      	nop			@ (mov r8, r8)

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8013e3c:	687b      	ldr	r3, [r7, #4]
 8013e3e:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8013e40:	0018      	movs	r0, r3
 8013e42:	f7f8 fd8d 	bl	800c960 <HAL_DMA_Abort>
        }

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8013e46:	687b      	ldr	r3, [r7, #4]
 8013e48:	2202      	movs	r2, #2
 8013e4a:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8013e4c:	687b      	ldr	r3, [r7, #4]
 8013e4e:	22ac      	movs	r2, #172	@ 0xac
 8013e50:	589b      	ldr	r3, [r3, r2]
 8013e52:	687a      	ldr	r2, [r7, #4]
 8013e54:	2158      	movs	r1, #88	@ 0x58
 8013e56:	5a51      	ldrh	r1, [r2, r1]
 8013e58:	687a      	ldr	r2, [r7, #4]
 8013e5a:	205a      	movs	r0, #90	@ 0x5a
 8013e5c:	5a12      	ldrh	r2, [r2, r0]
 8013e5e:	b292      	uxth	r2, r2
 8013e60:	1a8a      	subs	r2, r1, r2
 8013e62:	b291      	uxth	r1, r2
 8013e64:	687a      	ldr	r2, [r7, #4]
 8013e66:	0010      	movs	r0, r2
 8013e68:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8013e6a:	e0c5      	b.n	8013ff8 <HAL_UART_IRQHandler+0x5c0>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8013e6c:	687b      	ldr	r3, [r7, #4]
 8013e6e:	2258      	movs	r2, #88	@ 0x58
 8013e70:	5a99      	ldrh	r1, [r3, r2]
 8013e72:	687b      	ldr	r3, [r7, #4]
 8013e74:	225a      	movs	r2, #90	@ 0x5a
 8013e76:	5a9b      	ldrh	r3, [r3, r2]
 8013e78:	b29a      	uxth	r2, r3
 8013e7a:	208e      	movs	r0, #142	@ 0x8e
 8013e7c:	183b      	adds	r3, r7, r0
 8013e7e:	1a8a      	subs	r2, r1, r2
 8013e80:	801a      	strh	r2, [r3, #0]
      if ((huart->RxXferCount > 0U)
 8013e82:	687b      	ldr	r3, [r7, #4]
 8013e84:	225a      	movs	r2, #90	@ 0x5a
 8013e86:	5a9b      	ldrh	r3, [r3, r2]
 8013e88:	b29b      	uxth	r3, r3
 8013e8a:	2b00      	cmp	r3, #0
 8013e8c:	d100      	bne.n	8013e90 <HAL_UART_IRQHandler+0x458>
 8013e8e:	e0b5      	b.n	8013ffc <HAL_UART_IRQHandler+0x5c4>
          && (nb_rx_data > 0U))
 8013e90:	183b      	adds	r3, r7, r0
 8013e92:	881b      	ldrh	r3, [r3, #0]
 8013e94:	2b00      	cmp	r3, #0
 8013e96:	d100      	bne.n	8013e9a <HAL_UART_IRQHandler+0x462>
 8013e98:	e0b0      	b.n	8013ffc <HAL_UART_IRQHandler+0x5c4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013e9a:	f3ef 8310 	mrs	r3, PRIMASK
 8013e9e:	60fb      	str	r3, [r7, #12]
  return(result);
 8013ea0:	68fb      	ldr	r3, [r7, #12]
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8013ea2:	2488      	movs	r4, #136	@ 0x88
 8013ea4:	193a      	adds	r2, r7, r4
 8013ea6:	6013      	str	r3, [r2, #0]
 8013ea8:	2301      	movs	r3, #1
 8013eaa:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013eac:	693b      	ldr	r3, [r7, #16]
 8013eae:	f383 8810 	msr	PRIMASK, r3
}
 8013eb2:	46c0      	nop			@ (mov r8, r8)
 8013eb4:	687b      	ldr	r3, [r7, #4]
 8013eb6:	681b      	ldr	r3, [r3, #0]
 8013eb8:	681a      	ldr	r2, [r3, #0]
 8013eba:	687b      	ldr	r3, [r7, #4]
 8013ebc:	681b      	ldr	r3, [r3, #0]
 8013ebe:	4953      	ldr	r1, [pc, #332]	@ (801400c <HAL_UART_IRQHandler+0x5d4>)
 8013ec0:	400a      	ands	r2, r1
 8013ec2:	601a      	str	r2, [r3, #0]
 8013ec4:	193b      	adds	r3, r7, r4
 8013ec6:	681b      	ldr	r3, [r3, #0]
 8013ec8:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013eca:	697b      	ldr	r3, [r7, #20]
 8013ecc:	f383 8810 	msr	PRIMASK, r3
}
 8013ed0:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013ed2:	f3ef 8310 	mrs	r3, PRIMASK
 8013ed6:	61bb      	str	r3, [r7, #24]
  return(result);
 8013ed8:	69bb      	ldr	r3, [r7, #24]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8013eda:	2484      	movs	r4, #132	@ 0x84
 8013edc:	193a      	adds	r2, r7, r4
 8013ede:	6013      	str	r3, [r2, #0]
 8013ee0:	2301      	movs	r3, #1
 8013ee2:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013ee4:	69fb      	ldr	r3, [r7, #28]
 8013ee6:	f383 8810 	msr	PRIMASK, r3
}
 8013eea:	46c0      	nop			@ (mov r8, r8)
 8013eec:	687b      	ldr	r3, [r7, #4]
 8013eee:	681b      	ldr	r3, [r3, #0]
 8013ef0:	689a      	ldr	r2, [r3, #8]
 8013ef2:	687b      	ldr	r3, [r7, #4]
 8013ef4:	681b      	ldr	r3, [r3, #0]
 8013ef6:	2101      	movs	r1, #1
 8013ef8:	438a      	bics	r2, r1
 8013efa:	609a      	str	r2, [r3, #8]
 8013efc:	193b      	adds	r3, r7, r4
 8013efe:	681b      	ldr	r3, [r3, #0]
 8013f00:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013f02:	6a3b      	ldr	r3, [r7, #32]
 8013f04:	f383 8810 	msr	PRIMASK, r3
}
 8013f08:	46c0      	nop			@ (mov r8, r8)

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8013f0a:	687b      	ldr	r3, [r7, #4]
 8013f0c:	2280      	movs	r2, #128	@ 0x80
 8013f0e:	2120      	movs	r1, #32
 8013f10:	5099      	str	r1, [r3, r2]
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8013f12:	687b      	ldr	r3, [r7, #4]
 8013f14:	2200      	movs	r2, #0
 8013f16:	661a      	str	r2, [r3, #96]	@ 0x60

        /* Clear RxISR function pointer */
        huart->RxISR = NULL;
 8013f18:	687b      	ldr	r3, [r7, #4]
 8013f1a:	2200      	movs	r2, #0
 8013f1c:	669a      	str	r2, [r3, #104]	@ 0x68
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8013f1e:	f3ef 8310 	mrs	r3, PRIMASK
 8013f22:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8013f24:	6a7b      	ldr	r3, [r7, #36]	@ 0x24

        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8013f26:	2480      	movs	r4, #128	@ 0x80
 8013f28:	193a      	adds	r2, r7, r4
 8013f2a:	6013      	str	r3, [r2, #0]
 8013f2c:	2301      	movs	r3, #1
 8013f2e:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013f30:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8013f32:	f383 8810 	msr	PRIMASK, r3
}
 8013f36:	46c0      	nop			@ (mov r8, r8)
 8013f38:	687b      	ldr	r3, [r7, #4]
 8013f3a:	681b      	ldr	r3, [r3, #0]
 8013f3c:	681a      	ldr	r2, [r3, #0]
 8013f3e:	687b      	ldr	r3, [r7, #4]
 8013f40:	681b      	ldr	r3, [r3, #0]
 8013f42:	2110      	movs	r1, #16
 8013f44:	438a      	bics	r2, r1
 8013f46:	601a      	str	r2, [r3, #0]
 8013f48:	193b      	adds	r3, r7, r4
 8013f4a:	681b      	ldr	r3, [r3, #0]
 8013f4c:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8013f4e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8013f50:	f383 8810 	msr	PRIMASK, r3
}
 8013f54:	46c0      	nop			@ (mov r8, r8)

        /* Initialize type of RxEvent that correspond to RxEvent callback execution;
           In this case, Rx Event type is Idle Event */
        huart->RxEventType = HAL_UART_RXEVENT_IDLE;
 8013f56:	687b      	ldr	r3, [r7, #4]
 8013f58:	2202      	movs	r2, #2
 8013f5a:	665a      	str	r2, [r3, #100]	@ 0x64

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
 8013f5c:	687b      	ldr	r3, [r7, #4]
 8013f5e:	22ac      	movs	r2, #172	@ 0xac
 8013f60:	589b      	ldr	r3, [r3, r2]
 8013f62:	183a      	adds	r2, r7, r0
 8013f64:	8811      	ldrh	r1, [r2, #0]
 8013f66:	687a      	ldr	r2, [r7, #4]
 8013f68:	0010      	movs	r0, r2
 8013f6a:	4798      	blx	r3
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
      }
      return;
 8013f6c:	e046      	b.n	8013ffc <HAL_UART_IRQHandler+0x5c4>
    }
  }

  /* UART wakeup from Stop mode interrupt occurred ---------------------------*/
  if (((isrflags & USART_ISR_WUF) != 0U) && ((cr3its & USART_CR3_WUFIE) != 0U))
 8013f6e:	23a4      	movs	r3, #164	@ 0xa4
 8013f70:	18fb      	adds	r3, r7, r3
 8013f72:	681a      	ldr	r2, [r3, #0]
 8013f74:	2380      	movs	r3, #128	@ 0x80
 8013f76:	035b      	lsls	r3, r3, #13
 8013f78:	4013      	ands	r3, r2
 8013f7a:	d012      	beq.n	8013fa2 <HAL_UART_IRQHandler+0x56a>
 8013f7c:	239c      	movs	r3, #156	@ 0x9c
 8013f7e:	18fb      	adds	r3, r7, r3
 8013f80:	681a      	ldr	r2, [r3, #0]
 8013f82:	2380      	movs	r3, #128	@ 0x80
 8013f84:	03db      	lsls	r3, r3, #15
 8013f86:	4013      	ands	r3, r2
 8013f88:	d00b      	beq.n	8013fa2 <HAL_UART_IRQHandler+0x56a>
  {
    __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_WUF);
 8013f8a:	687b      	ldr	r3, [r7, #4]
 8013f8c:	681b      	ldr	r3, [r3, #0]
 8013f8e:	2280      	movs	r2, #128	@ 0x80
 8013f90:	0352      	lsls	r2, r2, #13
 8013f92:	621a      	str	r2, [r3, #32]
    /* UART Rx state is not reset as a reception process might be ongoing.
       If UART handle state fields need to be reset to READY, this could be done in Wakeup callback */

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /* Call registered Wakeup Callback */
    huart->WakeupCallback(huart);
 8013f94:	687b      	ldr	r3, [r7, #4]
 8013f96:	22a8      	movs	r2, #168	@ 0xa8
 8013f98:	589b      	ldr	r3, [r3, r2]
 8013f9a:	687a      	ldr	r2, [r7, #4]
 8013f9c:	0010      	movs	r0, r2
 8013f9e:	4798      	blx	r3
#else
    /* Call legacy weak Wakeup Callback */
    HAL_UARTEx_WakeupCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
    return;
 8013fa0:	e02f      	b.n	8014002 <HAL_UART_IRQHandler+0x5ca>
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_ISR_TXE) != 0U)
 8013fa2:	23a4      	movs	r3, #164	@ 0xa4
 8013fa4:	18fb      	adds	r3, r7, r3
 8013fa6:	681b      	ldr	r3, [r3, #0]
 8013fa8:	2280      	movs	r2, #128	@ 0x80
 8013faa:	4013      	ands	r3, r2
 8013fac:	d00f      	beq.n	8013fce <HAL_UART_IRQHandler+0x596>
      && ((cr1its & USART_CR1_TXEIE) != 0U))
 8013fae:	23a0      	movs	r3, #160	@ 0xa0
 8013fb0:	18fb      	adds	r3, r7, r3
 8013fb2:	681b      	ldr	r3, [r3, #0]
 8013fb4:	2280      	movs	r2, #128	@ 0x80
 8013fb6:	4013      	ands	r3, r2
 8013fb8:	d009      	beq.n	8013fce <HAL_UART_IRQHandler+0x596>
  {
    if (huart->TxISR != NULL)
 8013fba:	687b      	ldr	r3, [r7, #4]
 8013fbc:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013fbe:	2b00      	cmp	r3, #0
 8013fc0:	d01e      	beq.n	8014000 <HAL_UART_IRQHandler+0x5c8>
    {
      huart->TxISR(huart);
 8013fc2:	687b      	ldr	r3, [r7, #4]
 8013fc4:	6edb      	ldr	r3, [r3, #108]	@ 0x6c
 8013fc6:	687a      	ldr	r2, [r7, #4]
 8013fc8:	0010      	movs	r0, r2
 8013fca:	4798      	blx	r3
    }
    return;
 8013fcc:	e018      	b.n	8014000 <HAL_UART_IRQHandler+0x5c8>
  }

  /* UART in mode Transmitter (transmission end) -----------------------------*/
  if (((isrflags & USART_ISR_TC) != 0U) && ((cr1its & USART_CR1_TCIE) != 0U))
 8013fce:	23a4      	movs	r3, #164	@ 0xa4
 8013fd0:	18fb      	adds	r3, r7, r3
 8013fd2:	681b      	ldr	r3, [r3, #0]
 8013fd4:	2240      	movs	r2, #64	@ 0x40
 8013fd6:	4013      	ands	r3, r2
 8013fd8:	d013      	beq.n	8014002 <HAL_UART_IRQHandler+0x5ca>
 8013fda:	23a0      	movs	r3, #160	@ 0xa0
 8013fdc:	18fb      	adds	r3, r7, r3
 8013fde:	681b      	ldr	r3, [r3, #0]
 8013fe0:	2240      	movs	r2, #64	@ 0x40
 8013fe2:	4013      	ands	r3, r2
 8013fe4:	d00d      	beq.n	8014002 <HAL_UART_IRQHandler+0x5ca>
  {
    UART_EndTransmit_IT(huart);
 8013fe6:	687b      	ldr	r3, [r7, #4]
 8013fe8:	0018      	movs	r0, r3
 8013fea:	f001 f862 	bl	80150b2 <UART_EndTransmit_IT>
    return;
 8013fee:	e008      	b.n	8014002 <HAL_UART_IRQHandler+0x5ca>
      return;
 8013ff0:	46c0      	nop			@ (mov r8, r8)
 8013ff2:	e006      	b.n	8014002 <HAL_UART_IRQHandler+0x5ca>
    return;
 8013ff4:	46c0      	nop			@ (mov r8, r8)
 8013ff6:	e004      	b.n	8014002 <HAL_UART_IRQHandler+0x5ca>
      return;
 8013ff8:	46c0      	nop			@ (mov r8, r8)
 8013ffa:	e002      	b.n	8014002 <HAL_UART_IRQHandler+0x5ca>
      return;
 8013ffc:	46c0      	nop			@ (mov r8, r8)
 8013ffe:	e000      	b.n	8014002 <HAL_UART_IRQHandler+0x5ca>
    return;
 8014000:	46c0      	nop			@ (mov r8, r8)
  }

}
 8014002:	46bd      	mov	sp, r7
 8014004:	b02b      	add	sp, #172	@ 0xac
 8014006:	bd90      	pop	{r4, r7, pc}
 8014008:	fffffeff 	.word	0xfffffeff
 801400c:	fffffedf 	.word	0xfffffedf

08014010 <HAL_UART_TxCpltCallback>:
  * @brief Tx Transfer completed callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8014010:	b580      	push	{r7, lr}
 8014012:	b082      	sub	sp, #8
 8014014:	af00      	add	r7, sp, #0
 8014016:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_TxCpltCallback can be implemented in the user file.
   */
}
 8014018:	46c0      	nop			@ (mov r8, r8)
 801401a:	46bd      	mov	sp, r7
 801401c:	b002      	add	sp, #8
 801401e:	bd80      	pop	{r7, pc}

08014020 <HAL_UART_TxHalfCpltCallback>:
  * @brief  Tx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8014020:	b580      	push	{r7, lr}
 8014022:	b082      	sub	sp, #8
 8014024:	af00      	add	r7, sp, #0
 8014026:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback can be implemented in the user file.
   */
}
 8014028:	46c0      	nop			@ (mov r8, r8)
 801402a:	46bd      	mov	sp, r7
 801402c:	b002      	add	sp, #8
 801402e:	bd80      	pop	{r7, pc}

08014030 <HAL_UART_RxHalfCpltCallback>:
  * @brief  Rx Half Transfer completed callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8014030:	b580      	push	{r7, lr}
 8014032:	b082      	sub	sp, #8
 8014034:	af00      	add	r7, sp, #0
 8014036:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback can be implemented in the user file.
   */
}
 8014038:	46c0      	nop			@ (mov r8, r8)
 801403a:	46bd      	mov	sp, r7
 801403c:	b002      	add	sp, #8
 801403e:	bd80      	pop	{r7, pc}

08014040 <HAL_UART_AbortCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortCpltCallback(UART_HandleTypeDef *huart)
{
 8014040:	b580      	push	{r7, lr}
 8014042:	b082      	sub	sp, #8
 8014044:	af00      	add	r7, sp, #0
 8014046:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortCpltCallback can be implemented in the user file.
   */
}
 8014048:	46c0      	nop			@ (mov r8, r8)
 801404a:	46bd      	mov	sp, r7
 801404c:	b002      	add	sp, #8
 801404e:	bd80      	pop	{r7, pc}

08014050 <HAL_UART_AbortTransmitCpltCallback>:
  * @brief  UART Abort Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortTransmitCpltCallback(UART_HandleTypeDef *huart)
{
 8014050:	b580      	push	{r7, lr}
 8014052:	b082      	sub	sp, #8
 8014054:	af00      	add	r7, sp, #0
 8014056:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortTransmitCpltCallback can be implemented in the user file.
   */
}
 8014058:	46c0      	nop			@ (mov r8, r8)
 801405a:	46bd      	mov	sp, r7
 801405c:	b002      	add	sp, #8
 801405e:	bd80      	pop	{r7, pc}

08014060 <HAL_UART_AbortReceiveCpltCallback>:
  * @brief  UART Abort Receive Complete callback.
  * @param  huart UART handle.
  * @retval None
  */
__weak void HAL_UART_AbortReceiveCpltCallback(UART_HandleTypeDef *huart)
{
 8014060:	b580      	push	{r7, lr}
 8014062:	b082      	sub	sp, #8
 8014064:	af00      	add	r7, sp, #0
 8014066:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UART_AbortReceiveCpltCallback can be implemented in the user file.
   */
}
 8014068:	46c0      	nop			@ (mov r8, r8)
 801406a:	46bd      	mov	sp, r7
 801406c:	b002      	add	sp, #8
 801406e:	bd80      	pop	{r7, pc}

08014070 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8014070:	b580      	push	{r7, lr}
 8014072:	b082      	sub	sp, #8
 8014074:	af00      	add	r7, sp, #0
 8014076:	6078      	str	r0, [r7, #4]
 8014078:	000a      	movs	r2, r1
 801407a:	1cbb      	adds	r3, r7, #2
 801407c:	801a      	strh	r2, [r3, #0]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 801407e:	46c0      	nop			@ (mov r8, r8)
 8014080:	46bd      	mov	sp, r7
 8014082:	b002      	add	sp, #8
 8014084:	bd80      	pop	{r7, pc}
	...

08014088 <UART_InitCallbacksToDefault>:
  * @param  huart UART handle.
  * @retval none
  */
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
void UART_InitCallbacksToDefault(UART_HandleTypeDef *huart)
{
 8014088:	b580      	push	{r7, lr}
 801408a:	b082      	sub	sp, #8
 801408c:	af00      	add	r7, sp, #0
 801408e:	6078      	str	r0, [r7, #4]
  /* Init the UART Callback settings */
  huart->TxHalfCpltCallback        = HAL_UART_TxHalfCpltCallback;        /* Legacy weak TxHalfCpltCallback        */
 8014090:	687b      	ldr	r3, [r7, #4]
 8014092:	2188      	movs	r1, #136	@ 0x88
 8014094:	4a14      	ldr	r2, [pc, #80]	@ (80140e8 <UART_InitCallbacksToDefault+0x60>)
 8014096:	505a      	str	r2, [r3, r1]
  huart->TxCpltCallback            = HAL_UART_TxCpltCallback;            /* Legacy weak TxCpltCallback            */
 8014098:	687b      	ldr	r3, [r7, #4]
 801409a:	218c      	movs	r1, #140	@ 0x8c
 801409c:	4a13      	ldr	r2, [pc, #76]	@ (80140ec <UART_InitCallbacksToDefault+0x64>)
 801409e:	505a      	str	r2, [r3, r1]
  huart->RxHalfCpltCallback        = HAL_UART_RxHalfCpltCallback;        /* Legacy weak RxHalfCpltCallback        */
 80140a0:	687b      	ldr	r3, [r7, #4]
 80140a2:	2190      	movs	r1, #144	@ 0x90
 80140a4:	4a12      	ldr	r2, [pc, #72]	@ (80140f0 <UART_InitCallbacksToDefault+0x68>)
 80140a6:	505a      	str	r2, [r3, r1]
  huart->RxCpltCallback            = HAL_UART_RxCpltCallback;            /* Legacy weak RxCpltCallback            */
 80140a8:	687b      	ldr	r3, [r7, #4]
 80140aa:	2194      	movs	r1, #148	@ 0x94
 80140ac:	4a11      	ldr	r2, [pc, #68]	@ (80140f4 <UART_InitCallbacksToDefault+0x6c>)
 80140ae:	505a      	str	r2, [r3, r1]
  huart->ErrorCallback             = HAL_UART_ErrorCallback;             /* Legacy weak ErrorCallback             */
 80140b0:	687b      	ldr	r3, [r7, #4]
 80140b2:	2198      	movs	r1, #152	@ 0x98
 80140b4:	4a10      	ldr	r2, [pc, #64]	@ (80140f8 <UART_InitCallbacksToDefault+0x70>)
 80140b6:	505a      	str	r2, [r3, r1]
  huart->AbortCpltCallback         = HAL_UART_AbortCpltCallback;         /* Legacy weak AbortCpltCallback         */
 80140b8:	687b      	ldr	r3, [r7, #4]
 80140ba:	219c      	movs	r1, #156	@ 0x9c
 80140bc:	4a0f      	ldr	r2, [pc, #60]	@ (80140fc <UART_InitCallbacksToDefault+0x74>)
 80140be:	505a      	str	r2, [r3, r1]
  huart->AbortTransmitCpltCallback = HAL_UART_AbortTransmitCpltCallback; /* Legacy weak AbortTransmitCpltCallback */
 80140c0:	687b      	ldr	r3, [r7, #4]
 80140c2:	21a0      	movs	r1, #160	@ 0xa0
 80140c4:	4a0e      	ldr	r2, [pc, #56]	@ (8014100 <UART_InitCallbacksToDefault+0x78>)
 80140c6:	505a      	str	r2, [r3, r1]
  huart->AbortReceiveCpltCallback  = HAL_UART_AbortReceiveCpltCallback;  /* Legacy weak AbortReceiveCpltCallback  */
 80140c8:	687b      	ldr	r3, [r7, #4]
 80140ca:	21a4      	movs	r1, #164	@ 0xa4
 80140cc:	4a0d      	ldr	r2, [pc, #52]	@ (8014104 <UART_InitCallbacksToDefault+0x7c>)
 80140ce:	505a      	str	r2, [r3, r1]
  huart->WakeupCallback            = HAL_UARTEx_WakeupCallback;          /* Legacy weak WakeupCallback            */
 80140d0:	687b      	ldr	r3, [r7, #4]
 80140d2:	21a8      	movs	r1, #168	@ 0xa8
 80140d4:	4a0c      	ldr	r2, [pc, #48]	@ (8014108 <UART_InitCallbacksToDefault+0x80>)
 80140d6:	505a      	str	r2, [r3, r1]
  huart->RxEventCallback           = HAL_UARTEx_RxEventCallback;         /* Legacy weak RxEventCallback           */
 80140d8:	687b      	ldr	r3, [r7, #4]
 80140da:	21ac      	movs	r1, #172	@ 0xac
 80140dc:	4a0b      	ldr	r2, [pc, #44]	@ (801410c <UART_InitCallbacksToDefault+0x84>)
 80140de:	505a      	str	r2, [r3, r1]

}
 80140e0:	46c0      	nop			@ (mov r8, r8)
 80140e2:	46bd      	mov	sp, r7
 80140e4:	b002      	add	sp, #8
 80140e6:	bd80      	pop	{r7, pc}
 80140e8:	08014021 	.word	0x08014021
 80140ec:	08014011 	.word	0x08014011
 80140f0:	08014031 	.word	0x08014031
 80140f4:	080073c5 	.word	0x080073c5
 80140f8:	08003a75 	.word	0x08003a75
 80140fc:	08014041 	.word	0x08014041
 8014100:	08014051 	.word	0x08014051
 8014104:	08014061 	.word	0x08014061
 8014108:	080154a5 	.word	0x080154a5
 801410c:	08014071 	.word	0x08014071

08014110 <UART_SetConfig>:
  * @brief Configure the UART peripheral.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_SetConfig(UART_HandleTypeDef *huart)
{
 8014110:	b5b0      	push	{r4, r5, r7, lr}
 8014112:	b08e      	sub	sp, #56	@ 0x38
 8014114:	af00      	add	r7, sp, #0
 8014116:	61f8      	str	r0, [r7, #28]
  uint32_t tmpreg;
  uint16_t brrtemp;
  UART_ClockSourceTypeDef clocksource;
  uint32_t usartdiv;
  HAL_StatusTypeDef ret               = HAL_OK;
 8014118:	231a      	movs	r3, #26
 801411a:	2218      	movs	r2, #24
 801411c:	189b      	adds	r3, r3, r2
 801411e:	19db      	adds	r3, r3, r7
 8014120:	2200      	movs	r2, #0
 8014122:	701a      	strb	r2, [r3, #0]
  *  the UART Word Length, Parity, Mode and oversampling:
  *  set the M bits according to huart->Init.WordLength value
  *  set PCE and PS bits according to huart->Init.Parity value
  *  set TE and RE bits according to huart->Init.Mode value
  *  set OVER8 bit according to huart->Init.OverSampling value */
  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling ;
 8014124:	69fb      	ldr	r3, [r7, #28]
 8014126:	689a      	ldr	r2, [r3, #8]
 8014128:	69fb      	ldr	r3, [r7, #28]
 801412a:	691b      	ldr	r3, [r3, #16]
 801412c:	431a      	orrs	r2, r3
 801412e:	69fb      	ldr	r3, [r7, #28]
 8014130:	695b      	ldr	r3, [r3, #20]
 8014132:	431a      	orrs	r2, r3
 8014134:	69fb      	ldr	r3, [r7, #28]
 8014136:	69db      	ldr	r3, [r3, #28]
 8014138:	4313      	orrs	r3, r2
 801413a:	637b      	str	r3, [r7, #52]	@ 0x34
  MODIFY_REG(huart->Instance->CR1, USART_CR1_FIELDS, tmpreg);
 801413c:	69fb      	ldr	r3, [r7, #28]
 801413e:	681b      	ldr	r3, [r3, #0]
 8014140:	681b      	ldr	r3, [r3, #0]
 8014142:	4ac3      	ldr	r2, [pc, #780]	@ (8014450 <UART_SetConfig+0x340>)
 8014144:	4013      	ands	r3, r2
 8014146:	0019      	movs	r1, r3
 8014148:	69fb      	ldr	r3, [r7, #28]
 801414a:	681b      	ldr	r3, [r3, #0]
 801414c:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 801414e:	430a      	orrs	r2, r1
 8014150:	601a      	str	r2, [r3, #0]

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits according
  * to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8014152:	69fb      	ldr	r3, [r7, #28]
 8014154:	681b      	ldr	r3, [r3, #0]
 8014156:	685b      	ldr	r3, [r3, #4]
 8014158:	4abe      	ldr	r2, [pc, #760]	@ (8014454 <UART_SetConfig+0x344>)
 801415a:	4013      	ands	r3, r2
 801415c:	0019      	movs	r1, r3
 801415e:	69fb      	ldr	r3, [r7, #28]
 8014160:	68da      	ldr	r2, [r3, #12]
 8014162:	69fb      	ldr	r3, [r7, #28]
 8014164:	681b      	ldr	r3, [r3, #0]
 8014166:	430a      	orrs	r2, r1
 8014168:	605a      	str	r2, [r3, #4]
  /* Configure
  * - UART HardWare Flow Control: set CTSE and RTSE bits according
  *   to huart->Init.HwFlowCtl value
  * - one-bit sampling method versus three samples' majority rule according
  *   to huart->Init.OneBitSampling (not applicable to LPUART) */
  tmpreg = (uint32_t)huart->Init.HwFlowCtl;
 801416a:	69fb      	ldr	r3, [r7, #28]
 801416c:	699b      	ldr	r3, [r3, #24]
 801416e:	637b      	str	r3, [r7, #52]	@ 0x34

  if (!(UART_INSTANCE_LOWPOWER(huart)))
 8014170:	69fb      	ldr	r3, [r7, #28]
 8014172:	681b      	ldr	r3, [r3, #0]
 8014174:	4ab8      	ldr	r2, [pc, #736]	@ (8014458 <UART_SetConfig+0x348>)
 8014176:	4293      	cmp	r3, r2
 8014178:	d004      	beq.n	8014184 <UART_SetConfig+0x74>
  {
    tmpreg |= huart->Init.OneBitSampling;
 801417a:	69fb      	ldr	r3, [r7, #28]
 801417c:	6a1b      	ldr	r3, [r3, #32]
 801417e:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014180:	4313      	orrs	r3, r2
 8014182:	637b      	str	r3, [r7, #52]	@ 0x34
  }
  MODIFY_REG(huart->Instance->CR3, USART_CR3_FIELDS, tmpreg);
 8014184:	69fb      	ldr	r3, [r7, #28]
 8014186:	681b      	ldr	r3, [r3, #0]
 8014188:	689b      	ldr	r3, [r3, #8]
 801418a:	4ab4      	ldr	r2, [pc, #720]	@ (801445c <UART_SetConfig+0x34c>)
 801418c:	4013      	ands	r3, r2
 801418e:	0019      	movs	r1, r3
 8014190:	69fb      	ldr	r3, [r7, #28]
 8014192:	681b      	ldr	r3, [r3, #0]
 8014194:	6b7a      	ldr	r2, [r7, #52]	@ 0x34
 8014196:	430a      	orrs	r2, r1
 8014198:	609a      	str	r2, [r3, #8]


  /*-------------------------- USART BRR Configuration -----------------------*/
  UART_GETCLOCKSOURCE(huart, clocksource);
 801419a:	69fb      	ldr	r3, [r7, #28]
 801419c:	681b      	ldr	r3, [r3, #0]
 801419e:	4ab0      	ldr	r2, [pc, #704]	@ (8014460 <UART_SetConfig+0x350>)
 80141a0:	4293      	cmp	r3, r2
 80141a2:	d131      	bne.n	8014208 <UART_SetConfig+0xf8>
 80141a4:	4baf      	ldr	r3, [pc, #700]	@ (8014464 <UART_SetConfig+0x354>)
 80141a6:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 80141a8:	2203      	movs	r2, #3
 80141aa:	4013      	ands	r3, r2
 80141ac:	2b03      	cmp	r3, #3
 80141ae:	d01d      	beq.n	80141ec <UART_SetConfig+0xdc>
 80141b0:	d823      	bhi.n	80141fa <UART_SetConfig+0xea>
 80141b2:	2b02      	cmp	r3, #2
 80141b4:	d00c      	beq.n	80141d0 <UART_SetConfig+0xc0>
 80141b6:	d820      	bhi.n	80141fa <UART_SetConfig+0xea>
 80141b8:	2b00      	cmp	r3, #0
 80141ba:	d002      	beq.n	80141c2 <UART_SetConfig+0xb2>
 80141bc:	2b01      	cmp	r3, #1
 80141be:	d00e      	beq.n	80141de <UART_SetConfig+0xce>
 80141c0:	e01b      	b.n	80141fa <UART_SetConfig+0xea>
 80141c2:	231b      	movs	r3, #27
 80141c4:	2218      	movs	r2, #24
 80141c6:	189b      	adds	r3, r3, r2
 80141c8:	19db      	adds	r3, r3, r7
 80141ca:	2201      	movs	r2, #1
 80141cc:	701a      	strb	r2, [r3, #0]
 80141ce:	e0b4      	b.n	801433a <UART_SetConfig+0x22a>
 80141d0:	231b      	movs	r3, #27
 80141d2:	2218      	movs	r2, #24
 80141d4:	189b      	adds	r3, r3, r2
 80141d6:	19db      	adds	r3, r3, r7
 80141d8:	2202      	movs	r2, #2
 80141da:	701a      	strb	r2, [r3, #0]
 80141dc:	e0ad      	b.n	801433a <UART_SetConfig+0x22a>
 80141de:	231b      	movs	r3, #27
 80141e0:	2218      	movs	r2, #24
 80141e2:	189b      	adds	r3, r3, r2
 80141e4:	19db      	adds	r3, r3, r7
 80141e6:	2204      	movs	r2, #4
 80141e8:	701a      	strb	r2, [r3, #0]
 80141ea:	e0a6      	b.n	801433a <UART_SetConfig+0x22a>
 80141ec:	231b      	movs	r3, #27
 80141ee:	2218      	movs	r2, #24
 80141f0:	189b      	adds	r3, r3, r2
 80141f2:	19db      	adds	r3, r3, r7
 80141f4:	2208      	movs	r2, #8
 80141f6:	701a      	strb	r2, [r3, #0]
 80141f8:	e09f      	b.n	801433a <UART_SetConfig+0x22a>
 80141fa:	231b      	movs	r3, #27
 80141fc:	2218      	movs	r2, #24
 80141fe:	189b      	adds	r3, r3, r2
 8014200:	19db      	adds	r3, r3, r7
 8014202:	2210      	movs	r2, #16
 8014204:	701a      	strb	r2, [r3, #0]
 8014206:	e098      	b.n	801433a <UART_SetConfig+0x22a>
 8014208:	69fb      	ldr	r3, [r7, #28]
 801420a:	681b      	ldr	r3, [r3, #0]
 801420c:	4a96      	ldr	r2, [pc, #600]	@ (8014468 <UART_SetConfig+0x358>)
 801420e:	4293      	cmp	r3, r2
 8014210:	d131      	bne.n	8014276 <UART_SetConfig+0x166>
 8014212:	4b94      	ldr	r3, [pc, #592]	@ (8014464 <UART_SetConfig+0x354>)
 8014214:	6cdb      	ldr	r3, [r3, #76]	@ 0x4c
 8014216:	220c      	movs	r2, #12
 8014218:	4013      	ands	r3, r2
 801421a:	2b0c      	cmp	r3, #12
 801421c:	d01d      	beq.n	801425a <UART_SetConfig+0x14a>
 801421e:	d823      	bhi.n	8014268 <UART_SetConfig+0x158>
 8014220:	2b08      	cmp	r3, #8
 8014222:	d00c      	beq.n	801423e <UART_SetConfig+0x12e>
 8014224:	d820      	bhi.n	8014268 <UART_SetConfig+0x158>
 8014226:	2b00      	cmp	r3, #0
 8014228:	d002      	beq.n	8014230 <UART_SetConfig+0x120>
 801422a:	2b04      	cmp	r3, #4
 801422c:	d00e      	beq.n	801424c <UART_SetConfig+0x13c>
 801422e:	e01b      	b.n	8014268 <UART_SetConfig+0x158>
 8014230:	231b      	movs	r3, #27
 8014232:	2218      	movs	r2, #24
 8014234:	189b      	adds	r3, r3, r2
 8014236:	19db      	adds	r3, r3, r7
 8014238:	2200      	movs	r2, #0
 801423a:	701a      	strb	r2, [r3, #0]
 801423c:	e07d      	b.n	801433a <UART_SetConfig+0x22a>
 801423e:	231b      	movs	r3, #27
 8014240:	2218      	movs	r2, #24
 8014242:	189b      	adds	r3, r3, r2
 8014244:	19db      	adds	r3, r3, r7
 8014246:	2202      	movs	r2, #2
 8014248:	701a      	strb	r2, [r3, #0]
 801424a:	e076      	b.n	801433a <UART_SetConfig+0x22a>
 801424c:	231b      	movs	r3, #27
 801424e:	2218      	movs	r2, #24
 8014250:	189b      	adds	r3, r3, r2
 8014252:	19db      	adds	r3, r3, r7
 8014254:	2204      	movs	r2, #4
 8014256:	701a      	strb	r2, [r3, #0]
 8014258:	e06f      	b.n	801433a <UART_SetConfig+0x22a>
 801425a:	231b      	movs	r3, #27
 801425c:	2218      	movs	r2, #24
 801425e:	189b      	adds	r3, r3, r2
 8014260:	19db      	adds	r3, r3, r7
 8014262:	2208      	movs	r2, #8
 8014264:	701a      	strb	r2, [r3, #0]
 8014266:	e068      	b.n	801433a <UART_SetConfig+0x22a>
 8014268:	231b      	movs	r3, #27
 801426a:	2218      	movs	r2, #24
 801426c:	189b      	adds	r3, r3, r2
 801426e:	19db      	adds	r3, r3, r7
 8014270:	2210      	movs	r2, #16
 8014272:	701a      	strb	r2, [r3, #0]
 8014274:	e061      	b.n	801433a <UART_SetConfig+0x22a>
 8014276:	69fb      	ldr	r3, [r7, #28]
 8014278:	681b      	ldr	r3, [r3, #0]
 801427a:	4a7c      	ldr	r2, [pc, #496]	@ (801446c <UART_SetConfig+0x35c>)
 801427c:	4293      	cmp	r3, r2
 801427e:	d106      	bne.n	801428e <UART_SetConfig+0x17e>
 8014280:	231b      	movs	r3, #27
 8014282:	2218      	movs	r2, #24
 8014284:	189b      	adds	r3, r3, r2
 8014286:	19db      	adds	r3, r3, r7
 8014288:	2200      	movs	r2, #0
 801428a:	701a      	strb	r2, [r3, #0]
 801428c:	e055      	b.n	801433a <UART_SetConfig+0x22a>
 801428e:	69fb      	ldr	r3, [r7, #28]
 8014290:	681b      	ldr	r3, [r3, #0]
 8014292:	4a77      	ldr	r2, [pc, #476]	@ (8014470 <UART_SetConfig+0x360>)
 8014294:	4293      	cmp	r3, r2
 8014296:	d106      	bne.n	80142a6 <UART_SetConfig+0x196>
 8014298:	231b      	movs	r3, #27
 801429a:	2218      	movs	r2, #24
 801429c:	189b      	adds	r3, r3, r2
 801429e:	19db      	adds	r3, r3, r7
 80142a0:	2200      	movs	r2, #0
 80142a2:	701a      	strb	r2, [r3, #0]
 80142a4:	e049      	b.n	801433a <UART_SetConfig+0x22a>
 80142a6:	69fb      	ldr	r3, [r7, #28]
 80142a8:	681b      	ldr	r3, [r3, #0]
 80142aa:	4a6b      	ldr	r2, [pc, #428]	@ (8014458 <UART_SetConfig+0x348>)
 80142ac:	4293      	cmp	r3, r2
 80142ae:	d13e      	bne.n	801432e <UART_SetConfig+0x21e>
 80142b0:	4b6c      	ldr	r3, [pc, #432]	@ (8014464 <UART_SetConfig+0x354>)
 80142b2:	6cda      	ldr	r2, [r3, #76]	@ 0x4c
 80142b4:	23c0      	movs	r3, #192	@ 0xc0
 80142b6:	011b      	lsls	r3, r3, #4
 80142b8:	4013      	ands	r3, r2
 80142ba:	22c0      	movs	r2, #192	@ 0xc0
 80142bc:	0112      	lsls	r2, r2, #4
 80142be:	4293      	cmp	r3, r2
 80142c0:	d027      	beq.n	8014312 <UART_SetConfig+0x202>
 80142c2:	22c0      	movs	r2, #192	@ 0xc0
 80142c4:	0112      	lsls	r2, r2, #4
 80142c6:	4293      	cmp	r3, r2
 80142c8:	d82a      	bhi.n	8014320 <UART_SetConfig+0x210>
 80142ca:	2280      	movs	r2, #128	@ 0x80
 80142cc:	0112      	lsls	r2, r2, #4
 80142ce:	4293      	cmp	r3, r2
 80142d0:	d011      	beq.n	80142f6 <UART_SetConfig+0x1e6>
 80142d2:	2280      	movs	r2, #128	@ 0x80
 80142d4:	0112      	lsls	r2, r2, #4
 80142d6:	4293      	cmp	r3, r2
 80142d8:	d822      	bhi.n	8014320 <UART_SetConfig+0x210>
 80142da:	2b00      	cmp	r3, #0
 80142dc:	d004      	beq.n	80142e8 <UART_SetConfig+0x1d8>
 80142de:	2280      	movs	r2, #128	@ 0x80
 80142e0:	00d2      	lsls	r2, r2, #3
 80142e2:	4293      	cmp	r3, r2
 80142e4:	d00e      	beq.n	8014304 <UART_SetConfig+0x1f4>
 80142e6:	e01b      	b.n	8014320 <UART_SetConfig+0x210>
 80142e8:	231b      	movs	r3, #27
 80142ea:	2218      	movs	r2, #24
 80142ec:	189b      	adds	r3, r3, r2
 80142ee:	19db      	adds	r3, r3, r7
 80142f0:	2200      	movs	r2, #0
 80142f2:	701a      	strb	r2, [r3, #0]
 80142f4:	e021      	b.n	801433a <UART_SetConfig+0x22a>
 80142f6:	231b      	movs	r3, #27
 80142f8:	2218      	movs	r2, #24
 80142fa:	189b      	adds	r3, r3, r2
 80142fc:	19db      	adds	r3, r3, r7
 80142fe:	2202      	movs	r2, #2
 8014300:	701a      	strb	r2, [r3, #0]
 8014302:	e01a      	b.n	801433a <UART_SetConfig+0x22a>
 8014304:	231b      	movs	r3, #27
 8014306:	2218      	movs	r2, #24
 8014308:	189b      	adds	r3, r3, r2
 801430a:	19db      	adds	r3, r3, r7
 801430c:	2204      	movs	r2, #4
 801430e:	701a      	strb	r2, [r3, #0]
 8014310:	e013      	b.n	801433a <UART_SetConfig+0x22a>
 8014312:	231b      	movs	r3, #27
 8014314:	2218      	movs	r2, #24
 8014316:	189b      	adds	r3, r3, r2
 8014318:	19db      	adds	r3, r3, r7
 801431a:	2208      	movs	r2, #8
 801431c:	701a      	strb	r2, [r3, #0]
 801431e:	e00c      	b.n	801433a <UART_SetConfig+0x22a>
 8014320:	231b      	movs	r3, #27
 8014322:	2218      	movs	r2, #24
 8014324:	189b      	adds	r3, r3, r2
 8014326:	19db      	adds	r3, r3, r7
 8014328:	2210      	movs	r2, #16
 801432a:	701a      	strb	r2, [r3, #0]
 801432c:	e005      	b.n	801433a <UART_SetConfig+0x22a>
 801432e:	231b      	movs	r3, #27
 8014330:	2218      	movs	r2, #24
 8014332:	189b      	adds	r3, r3, r2
 8014334:	19db      	adds	r3, r3, r7
 8014336:	2210      	movs	r2, #16
 8014338:	701a      	strb	r2, [r3, #0]

  /* Check LPUART instance */
  if (UART_INSTANCE_LOWPOWER(huart))
 801433a:	69fb      	ldr	r3, [r7, #28]
 801433c:	681b      	ldr	r3, [r3, #0]
 801433e:	4a46      	ldr	r2, [pc, #280]	@ (8014458 <UART_SetConfig+0x348>)
 8014340:	4293      	cmp	r3, r2
 8014342:	d000      	beq.n	8014346 <UART_SetConfig+0x236>
 8014344:	e09a      	b.n	801447c <UART_SetConfig+0x36c>
  {
    /* Retrieve frequency clock */
    switch (clocksource)
 8014346:	231b      	movs	r3, #27
 8014348:	2218      	movs	r2, #24
 801434a:	189b      	adds	r3, r3, r2
 801434c:	19db      	adds	r3, r3, r7
 801434e:	781b      	ldrb	r3, [r3, #0]
 8014350:	2b08      	cmp	r3, #8
 8014352:	d01d      	beq.n	8014390 <UART_SetConfig+0x280>
 8014354:	dc20      	bgt.n	8014398 <UART_SetConfig+0x288>
 8014356:	2b04      	cmp	r3, #4
 8014358:	d015      	beq.n	8014386 <UART_SetConfig+0x276>
 801435a:	dc1d      	bgt.n	8014398 <UART_SetConfig+0x288>
 801435c:	2b00      	cmp	r3, #0
 801435e:	d002      	beq.n	8014366 <UART_SetConfig+0x256>
 8014360:	2b02      	cmp	r3, #2
 8014362:	d005      	beq.n	8014370 <UART_SetConfig+0x260>
 8014364:	e018      	b.n	8014398 <UART_SetConfig+0x288>
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8014366:	f7fd ff3f 	bl	80121e8 <HAL_RCC_GetPCLK1Freq>
 801436a:	0003      	movs	r3, r0
 801436c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801436e:	e01c      	b.n	80143aa <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8014370:	4b3c      	ldr	r3, [pc, #240]	@ (8014464 <UART_SetConfig+0x354>)
 8014372:	681b      	ldr	r3, [r3, #0]
 8014374:	2210      	movs	r2, #16
 8014376:	4013      	ands	r3, r2
 8014378:	d002      	beq.n	8014380 <UART_SetConfig+0x270>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 801437a:	4b3e      	ldr	r3, [pc, #248]	@ (8014474 <UART_SetConfig+0x364>)
 801437c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 801437e:	e014      	b.n	80143aa <UART_SetConfig+0x29a>
          pclk = (uint32_t) HSI_VALUE;
 8014380:	4b3d      	ldr	r3, [pc, #244]	@ (8014478 <UART_SetConfig+0x368>)
 8014382:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8014384:	e011      	b.n	80143aa <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 8014386:	f7fd fe7f 	bl	8012088 <HAL_RCC_GetSysClockFreq>
 801438a:	0003      	movs	r3, r0
 801438c:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801438e:	e00c      	b.n	80143aa <UART_SetConfig+0x29a>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 8014390:	2380      	movs	r3, #128	@ 0x80
 8014392:	021b      	lsls	r3, r3, #8
 8014394:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8014396:	e008      	b.n	80143aa <UART_SetConfig+0x29a>
      default:
        pclk = 0U;
 8014398:	2300      	movs	r3, #0
 801439a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 801439c:	231a      	movs	r3, #26
 801439e:	2218      	movs	r2, #24
 80143a0:	189b      	adds	r3, r3, r2
 80143a2:	19db      	adds	r3, r3, r7
 80143a4:	2201      	movs	r2, #1
 80143a6:	701a      	strb	r2, [r3, #0]
        break;
 80143a8:	46c0      	nop			@ (mov r8, r8)
    }

    /* If proper clock source reported */
    if (pclk != 0U)
 80143aa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80143ac:	2b00      	cmp	r3, #0
 80143ae:	d100      	bne.n	80143b2 <UART_SetConfig+0x2a2>
 80143b0:	e133      	b.n	801461a <UART_SetConfig+0x50a>
    {
      /* No Prescaler applicable */
      /* Ensure that Frequency clock is in the range [3 * baudrate, 4096 * baudrate] */
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80143b2:	69fb      	ldr	r3, [r7, #28]
 80143b4:	685a      	ldr	r2, [r3, #4]
 80143b6:	0013      	movs	r3, r2
 80143b8:	005b      	lsls	r3, r3, #1
 80143ba:	189b      	adds	r3, r3, r2
 80143bc:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80143be:	429a      	cmp	r2, r3
 80143c0:	d305      	bcc.n	80143ce <UART_SetConfig+0x2be>
          (pclk > (4096U * huart->Init.BaudRate)))
 80143c2:	69fb      	ldr	r3, [r7, #28]
 80143c4:	685b      	ldr	r3, [r3, #4]
 80143c6:	031b      	lsls	r3, r3, #12
      if ((pclk < (3U * huart->Init.BaudRate)) ||
 80143c8:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 80143ca:	429a      	cmp	r2, r3
 80143cc:	d906      	bls.n	80143dc <UART_SetConfig+0x2cc>
      {
        ret = HAL_ERROR;
 80143ce:	231a      	movs	r3, #26
 80143d0:	2218      	movs	r2, #24
 80143d2:	189b      	adds	r3, r3, r2
 80143d4:	19db      	adds	r3, r3, r7
 80143d6:	2201      	movs	r2, #1
 80143d8:	701a      	strb	r2, [r3, #0]
 80143da:	e11e      	b.n	801461a <UART_SetConfig+0x50a>
      }
      else
      {
        usartdiv = (uint32_t)(UART_DIV_LPUART(pclk, huart->Init.BaudRate));
 80143dc:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80143de:	613b      	str	r3, [r7, #16]
 80143e0:	2300      	movs	r3, #0
 80143e2:	617b      	str	r3, [r7, #20]
 80143e4:	6939      	ldr	r1, [r7, #16]
 80143e6:	697a      	ldr	r2, [r7, #20]
 80143e8:	000b      	movs	r3, r1
 80143ea:	0e1b      	lsrs	r3, r3, #24
 80143ec:	0010      	movs	r0, r2
 80143ee:	0205      	lsls	r5, r0, #8
 80143f0:	431d      	orrs	r5, r3
 80143f2:	000b      	movs	r3, r1
 80143f4:	021c      	lsls	r4, r3, #8
 80143f6:	69fb      	ldr	r3, [r7, #28]
 80143f8:	685b      	ldr	r3, [r3, #4]
 80143fa:	085b      	lsrs	r3, r3, #1
 80143fc:	60bb      	str	r3, [r7, #8]
 80143fe:	2300      	movs	r3, #0
 8014400:	60fb      	str	r3, [r7, #12]
 8014402:	68b8      	ldr	r0, [r7, #8]
 8014404:	68f9      	ldr	r1, [r7, #12]
 8014406:	1900      	adds	r0, r0, r4
 8014408:	4169      	adcs	r1, r5
 801440a:	69fb      	ldr	r3, [r7, #28]
 801440c:	685b      	ldr	r3, [r3, #4]
 801440e:	603b      	str	r3, [r7, #0]
 8014410:	2300      	movs	r3, #0
 8014412:	607b      	str	r3, [r7, #4]
 8014414:	683a      	ldr	r2, [r7, #0]
 8014416:	687b      	ldr	r3, [r7, #4]
 8014418:	f7ec f8b2 	bl	8000580 <__aeabi_uldivmod>
 801441c:	0002      	movs	r2, r0
 801441e:	000b      	movs	r3, r1
 8014420:	0013      	movs	r3, r2
 8014422:	62bb      	str	r3, [r7, #40]	@ 0x28
        if ((usartdiv >= LPUART_BRR_MIN) && (usartdiv <= LPUART_BRR_MAX))
 8014424:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014426:	23c0      	movs	r3, #192	@ 0xc0
 8014428:	009b      	lsls	r3, r3, #2
 801442a:	429a      	cmp	r2, r3
 801442c:	d309      	bcc.n	8014442 <UART_SetConfig+0x332>
 801442e:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 8014430:	2380      	movs	r3, #128	@ 0x80
 8014432:	035b      	lsls	r3, r3, #13
 8014434:	429a      	cmp	r2, r3
 8014436:	d204      	bcs.n	8014442 <UART_SetConfig+0x332>
        {
          huart->Instance->BRR = usartdiv;
 8014438:	69fb      	ldr	r3, [r7, #28]
 801443a:	681b      	ldr	r3, [r3, #0]
 801443c:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801443e:	60da      	str	r2, [r3, #12]
 8014440:	e0eb      	b.n	801461a <UART_SetConfig+0x50a>
        }
        else
        {
          ret = HAL_ERROR;
 8014442:	231a      	movs	r3, #26
 8014444:	2218      	movs	r2, #24
 8014446:	189b      	adds	r3, r3, r2
 8014448:	19db      	adds	r3, r3, r7
 801444a:	2201      	movs	r2, #1
 801444c:	701a      	strb	r2, [r3, #0]
 801444e:	e0e4      	b.n	801461a <UART_SetConfig+0x50a>
 8014450:	efff69f3 	.word	0xefff69f3
 8014454:	ffffcfff 	.word	0xffffcfff
 8014458:	40004800 	.word	0x40004800
 801445c:	fffff4ff 	.word	0xfffff4ff
 8014460:	40013800 	.word	0x40013800
 8014464:	40021000 	.word	0x40021000
 8014468:	40004400 	.word	0x40004400
 801446c:	40004c00 	.word	0x40004c00
 8014470:	40005000 	.word	0x40005000
 8014474:	003d0900 	.word	0x003d0900
 8014478:	00f42400 	.word	0x00f42400
        }
      } /* if ( (pclk < (3 * huart->Init.BaudRate) ) || (pclk > (4096 * huart->Init.BaudRate) )) */
    } /* if (pclk != 0) */
  }
  /* Check UART Over Sampling to set Baud Rate Register */
  else if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 801447c:	69fb      	ldr	r3, [r7, #28]
 801447e:	69da      	ldr	r2, [r3, #28]
 8014480:	2380      	movs	r3, #128	@ 0x80
 8014482:	021b      	lsls	r3, r3, #8
 8014484:	429a      	cmp	r2, r3
 8014486:	d000      	beq.n	801448a <UART_SetConfig+0x37a>
 8014488:	e070      	b.n	801456c <UART_SetConfig+0x45c>
  {
    switch (clocksource)
 801448a:	231b      	movs	r3, #27
 801448c:	2218      	movs	r2, #24
 801448e:	189b      	adds	r3, r3, r2
 8014490:	19db      	adds	r3, r3, r7
 8014492:	781b      	ldrb	r3, [r3, #0]
 8014494:	2b08      	cmp	r3, #8
 8014496:	d822      	bhi.n	80144de <UART_SetConfig+0x3ce>
 8014498:	009a      	lsls	r2, r3, #2
 801449a:	4b67      	ldr	r3, [pc, #412]	@ (8014638 <UART_SetConfig+0x528>)
 801449c:	18d3      	adds	r3, r2, r3
 801449e:	681b      	ldr	r3, [r3, #0]
 80144a0:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 80144a2:	f7fd fea1 	bl	80121e8 <HAL_RCC_GetPCLK1Freq>
 80144a6:	0003      	movs	r3, r0
 80144a8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80144aa:	e021      	b.n	80144f0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 80144ac:	f7fd feb2 	bl	8012214 <HAL_RCC_GetPCLK2Freq>
 80144b0:	0003      	movs	r3, r0
 80144b2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80144b4:	e01c      	b.n	80144f0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 80144b6:	4b61      	ldr	r3, [pc, #388]	@ (801463c <UART_SetConfig+0x52c>)
 80144b8:	681b      	ldr	r3, [r3, #0]
 80144ba:	2210      	movs	r2, #16
 80144bc:	4013      	ands	r3, r2
 80144be:	d002      	beq.n	80144c6 <UART_SetConfig+0x3b6>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80144c0:	4b5f      	ldr	r3, [pc, #380]	@ (8014640 <UART_SetConfig+0x530>)
 80144c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80144c4:	e014      	b.n	80144f0 <UART_SetConfig+0x3e0>
          pclk = (uint32_t) HSI_VALUE;
 80144c6:	4b5f      	ldr	r3, [pc, #380]	@ (8014644 <UART_SetConfig+0x534>)
 80144c8:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80144ca:	e011      	b.n	80144f0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80144cc:	f7fd fddc 	bl	8012088 <HAL_RCC_GetSysClockFreq>
 80144d0:	0003      	movs	r3, r0
 80144d2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80144d4:	e00c      	b.n	80144f0 <UART_SetConfig+0x3e0>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80144d6:	2380      	movs	r3, #128	@ 0x80
 80144d8:	021b      	lsls	r3, r3, #8
 80144da:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80144dc:	e008      	b.n	80144f0 <UART_SetConfig+0x3e0>
      default:
        pclk = 0U;
 80144de:	2300      	movs	r3, #0
 80144e0:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80144e2:	231a      	movs	r3, #26
 80144e4:	2218      	movs	r2, #24
 80144e6:	189b      	adds	r3, r3, r2
 80144e8:	19db      	adds	r3, r3, r7
 80144ea:	2201      	movs	r2, #1
 80144ec:	701a      	strb	r2, [r3, #0]
        break;
 80144ee:	46c0      	nop			@ (mov r8, r8)
    }

    /* USARTDIV must be greater than or equal to 0d16 */
    if (pclk != 0U)
 80144f0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80144f2:	2b00      	cmp	r3, #0
 80144f4:	d100      	bne.n	80144f8 <UART_SetConfig+0x3e8>
 80144f6:	e090      	b.n	801461a <UART_SetConfig+0x50a>
    {
      usartdiv = (uint32_t)(UART_DIV_SAMPLING8(pclk, huart->Init.BaudRate));
 80144f8:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80144fa:	005a      	lsls	r2, r3, #1
 80144fc:	69fb      	ldr	r3, [r7, #28]
 80144fe:	685b      	ldr	r3, [r3, #4]
 8014500:	085b      	lsrs	r3, r3, #1
 8014502:	18d2      	adds	r2, r2, r3
 8014504:	69fb      	ldr	r3, [r7, #28]
 8014506:	685b      	ldr	r3, [r3, #4]
 8014508:	0019      	movs	r1, r3
 801450a:	0010      	movs	r0, r2
 801450c:	f7eb fe4a 	bl	80001a4 <__udivsi3>
 8014510:	0003      	movs	r3, r0
 8014512:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 8014514:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014516:	2b0f      	cmp	r3, #15
 8014518:	d921      	bls.n	801455e <UART_SetConfig+0x44e>
 801451a:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 801451c:	2380      	movs	r3, #128	@ 0x80
 801451e:	025b      	lsls	r3, r3, #9
 8014520:	429a      	cmp	r2, r3
 8014522:	d21c      	bcs.n	801455e <UART_SetConfig+0x44e>
      {
        brrtemp = (uint16_t)(usartdiv & 0xFFF0U);
 8014524:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014526:	b29a      	uxth	r2, r3
 8014528:	200e      	movs	r0, #14
 801452a:	2418      	movs	r4, #24
 801452c:	1903      	adds	r3, r0, r4
 801452e:	19db      	adds	r3, r3, r7
 8014530:	210f      	movs	r1, #15
 8014532:	438a      	bics	r2, r1
 8014534:	801a      	strh	r2, [r3, #0]
        brrtemp |= (uint16_t)((usartdiv & (uint16_t)0x000FU) >> 1U);
 8014536:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014538:	085b      	lsrs	r3, r3, #1
 801453a:	b29b      	uxth	r3, r3
 801453c:	2207      	movs	r2, #7
 801453e:	4013      	ands	r3, r2
 8014540:	b299      	uxth	r1, r3
 8014542:	1903      	adds	r3, r0, r4
 8014544:	19db      	adds	r3, r3, r7
 8014546:	1902      	adds	r2, r0, r4
 8014548:	19d2      	adds	r2, r2, r7
 801454a:	8812      	ldrh	r2, [r2, #0]
 801454c:	430a      	orrs	r2, r1
 801454e:	801a      	strh	r2, [r3, #0]
        huart->Instance->BRR = brrtemp;
 8014550:	69fb      	ldr	r3, [r7, #28]
 8014552:	681b      	ldr	r3, [r3, #0]
 8014554:	1902      	adds	r2, r0, r4
 8014556:	19d2      	adds	r2, r2, r7
 8014558:	8812      	ldrh	r2, [r2, #0]
 801455a:	60da      	str	r2, [r3, #12]
 801455c:	e05d      	b.n	801461a <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 801455e:	231a      	movs	r3, #26
 8014560:	2218      	movs	r2, #24
 8014562:	189b      	adds	r3, r3, r2
 8014564:	19db      	adds	r3, r3, r7
 8014566:	2201      	movs	r2, #1
 8014568:	701a      	strb	r2, [r3, #0]
 801456a:	e056      	b.n	801461a <UART_SetConfig+0x50a>
      }
    }
  }
  else
  {
    switch (clocksource)
 801456c:	231b      	movs	r3, #27
 801456e:	2218      	movs	r2, #24
 8014570:	189b      	adds	r3, r3, r2
 8014572:	19db      	adds	r3, r3, r7
 8014574:	781b      	ldrb	r3, [r3, #0]
 8014576:	2b08      	cmp	r3, #8
 8014578:	d822      	bhi.n	80145c0 <UART_SetConfig+0x4b0>
 801457a:	009a      	lsls	r2, r3, #2
 801457c:	4b32      	ldr	r3, [pc, #200]	@ (8014648 <UART_SetConfig+0x538>)
 801457e:	18d3      	adds	r3, r2, r3
 8014580:	681b      	ldr	r3, [r3, #0]
 8014582:	469f      	mov	pc, r3
    {
      case UART_CLOCKSOURCE_PCLK1:
        pclk = HAL_RCC_GetPCLK1Freq();
 8014584:	f7fd fe30 	bl	80121e8 <HAL_RCC_GetPCLK1Freq>
 8014588:	0003      	movs	r3, r0
 801458a:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 801458c:	e021      	b.n	80145d2 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_PCLK2:
        pclk = HAL_RCC_GetPCLK2Freq();
 801458e:	f7fd fe41 	bl	8012214 <HAL_RCC_GetPCLK2Freq>
 8014592:	0003      	movs	r3, r0
 8014594:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 8014596:	e01c      	b.n	80145d2 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_HSI:
        if (__HAL_RCC_GET_FLAG(RCC_FLAG_HSIDIV) != 0U)
 8014598:	4b28      	ldr	r3, [pc, #160]	@ (801463c <UART_SetConfig+0x52c>)
 801459a:	681b      	ldr	r3, [r3, #0]
 801459c:	2210      	movs	r2, #16
 801459e:	4013      	ands	r3, r2
 80145a0:	d002      	beq.n	80145a8 <UART_SetConfig+0x498>
        {
          pclk = (uint32_t)(HSI_VALUE >> 2U);
 80145a2:	4b27      	ldr	r3, [pc, #156]	@ (8014640 <UART_SetConfig+0x530>)
 80145a4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        }
        else
        {
          pclk = (uint32_t) HSI_VALUE;
        }
        break;
 80145a6:	e014      	b.n	80145d2 <UART_SetConfig+0x4c2>
          pclk = (uint32_t) HSI_VALUE;
 80145a8:	4b26      	ldr	r3, [pc, #152]	@ (8014644 <UART_SetConfig+0x534>)
 80145aa:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80145ac:	e011      	b.n	80145d2 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_SYSCLK:
        pclk = HAL_RCC_GetSysClockFreq();
 80145ae:	f7fd fd6b 	bl	8012088 <HAL_RCC_GetSysClockFreq>
 80145b2:	0003      	movs	r3, r0
 80145b4:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80145b6:	e00c      	b.n	80145d2 <UART_SetConfig+0x4c2>
      case UART_CLOCKSOURCE_LSE:
        pclk = (uint32_t) LSE_VALUE;
 80145b8:	2380      	movs	r3, #128	@ 0x80
 80145ba:	021b      	lsls	r3, r3, #8
 80145bc:	62fb      	str	r3, [r7, #44]	@ 0x2c
        break;
 80145be:	e008      	b.n	80145d2 <UART_SetConfig+0x4c2>
      default:
        pclk = 0U;
 80145c0:	2300      	movs	r3, #0
 80145c2:	62fb      	str	r3, [r7, #44]	@ 0x2c
        ret = HAL_ERROR;
 80145c4:	231a      	movs	r3, #26
 80145c6:	2218      	movs	r2, #24
 80145c8:	189b      	adds	r3, r3, r2
 80145ca:	19db      	adds	r3, r3, r7
 80145cc:	2201      	movs	r2, #1
 80145ce:	701a      	strb	r2, [r3, #0]
        break;
 80145d0:	46c0      	nop			@ (mov r8, r8)
    }

    if (pclk != 0U)
 80145d2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80145d4:	2b00      	cmp	r3, #0
 80145d6:	d020      	beq.n	801461a <UART_SetConfig+0x50a>
    {
      /* USARTDIV must be greater than or equal to 0d16 */
      usartdiv = (uint32_t)(UART_DIV_SAMPLING16(pclk, huart->Init.BaudRate));
 80145d8:	69fb      	ldr	r3, [r7, #28]
 80145da:	685b      	ldr	r3, [r3, #4]
 80145dc:	085a      	lsrs	r2, r3, #1
 80145de:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80145e0:	18d2      	adds	r2, r2, r3
 80145e2:	69fb      	ldr	r3, [r7, #28]
 80145e4:	685b      	ldr	r3, [r3, #4]
 80145e6:	0019      	movs	r1, r3
 80145e8:	0010      	movs	r0, r2
 80145ea:	f7eb fddb 	bl	80001a4 <__udivsi3>
 80145ee:	0003      	movs	r3, r0
 80145f0:	62bb      	str	r3, [r7, #40]	@ 0x28
      if ((usartdiv >= UART_BRR_MIN) && (usartdiv <= UART_BRR_MAX))
 80145f2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80145f4:	2b0f      	cmp	r3, #15
 80145f6:	d90a      	bls.n	801460e <UART_SetConfig+0x4fe>
 80145f8:	6aba      	ldr	r2, [r7, #40]	@ 0x28
 80145fa:	2380      	movs	r3, #128	@ 0x80
 80145fc:	025b      	lsls	r3, r3, #9
 80145fe:	429a      	cmp	r2, r3
 8014600:	d205      	bcs.n	801460e <UART_SetConfig+0x4fe>
      {
        huart->Instance->BRR = (uint16_t)usartdiv;
 8014602:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014604:	b29a      	uxth	r2, r3
 8014606:	69fb      	ldr	r3, [r7, #28]
 8014608:	681b      	ldr	r3, [r3, #0]
 801460a:	60da      	str	r2, [r3, #12]
 801460c:	e005      	b.n	801461a <UART_SetConfig+0x50a>
      }
      else
      {
        ret = HAL_ERROR;
 801460e:	231a      	movs	r3, #26
 8014610:	2218      	movs	r2, #24
 8014612:	189b      	adds	r3, r3, r2
 8014614:	19db      	adds	r3, r3, r7
 8014616:	2201      	movs	r2, #1
 8014618:	701a      	strb	r2, [r3, #0]
    }
  }


  /* Clear ISR function pointers */
  huart->RxISR = NULL;
 801461a:	69fb      	ldr	r3, [r7, #28]
 801461c:	2200      	movs	r2, #0
 801461e:	669a      	str	r2, [r3, #104]	@ 0x68
  huart->TxISR = NULL;
 8014620:	69fb      	ldr	r3, [r7, #28]
 8014622:	2200      	movs	r2, #0
 8014624:	66da      	str	r2, [r3, #108]	@ 0x6c

  return ret;
 8014626:	231a      	movs	r3, #26
 8014628:	2218      	movs	r2, #24
 801462a:	189b      	adds	r3, r3, r2
 801462c:	19db      	adds	r3, r3, r7
 801462e:	781b      	ldrb	r3, [r3, #0]
}
 8014630:	0018      	movs	r0, r3
 8014632:	46bd      	mov	sp, r7
 8014634:	b00e      	add	sp, #56	@ 0x38
 8014636:	bdb0      	pop	{r4, r5, r7, pc}
 8014638:	08020a28 	.word	0x08020a28
 801463c:	40021000 	.word	0x40021000
 8014640:	003d0900 	.word	0x003d0900
 8014644:	00f42400 	.word	0x00f42400
 8014648:	08020a4c 	.word	0x08020a4c

0801464c <UART_AdvFeatureConfig>:
  * @brief Configure the UART peripheral advanced features.
  * @param huart UART handle.
  * @retval None
  */
void UART_AdvFeatureConfig(UART_HandleTypeDef *huart)
{
 801464c:	b580      	push	{r7, lr}
 801464e:	b082      	sub	sp, #8
 8014650:	af00      	add	r7, sp, #0
 8014652:	6078      	str	r0, [r7, #4]
  /* Check whether the set of advanced features to configure is properly set */
  assert_param(IS_UART_ADVFEATURE_INIT(huart->AdvancedInit.AdvFeatureInit));

  /* if required, configure TX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_TXINVERT_INIT))
 8014654:	687b      	ldr	r3, [r7, #4]
 8014656:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014658:	2201      	movs	r2, #1
 801465a:	4013      	ands	r3, r2
 801465c:	d00b      	beq.n	8014676 <UART_AdvFeatureConfig+0x2a>
  {
    assert_param(IS_UART_ADVFEATURE_TXINV(huart->AdvancedInit.TxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_TXINV, huart->AdvancedInit.TxPinLevelInvert);
 801465e:	687b      	ldr	r3, [r7, #4]
 8014660:	681b      	ldr	r3, [r3, #0]
 8014662:	685b      	ldr	r3, [r3, #4]
 8014664:	4a4a      	ldr	r2, [pc, #296]	@ (8014790 <UART_AdvFeatureConfig+0x144>)
 8014666:	4013      	ands	r3, r2
 8014668:	0019      	movs	r1, r3
 801466a:	687b      	ldr	r3, [r7, #4]
 801466c:	6a9a      	ldr	r2, [r3, #40]	@ 0x28
 801466e:	687b      	ldr	r3, [r7, #4]
 8014670:	681b      	ldr	r3, [r3, #0]
 8014672:	430a      	orrs	r2, r1
 8014674:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX pin active level inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXINVERT_INIT))
 8014676:	687b      	ldr	r3, [r7, #4]
 8014678:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801467a:	2202      	movs	r2, #2
 801467c:	4013      	ands	r3, r2
 801467e:	d00b      	beq.n	8014698 <UART_AdvFeatureConfig+0x4c>
  {
    assert_param(IS_UART_ADVFEATURE_RXINV(huart->AdvancedInit.RxPinLevelInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_RXINV, huart->AdvancedInit.RxPinLevelInvert);
 8014680:	687b      	ldr	r3, [r7, #4]
 8014682:	681b      	ldr	r3, [r3, #0]
 8014684:	685b      	ldr	r3, [r3, #4]
 8014686:	4a43      	ldr	r2, [pc, #268]	@ (8014794 <UART_AdvFeatureConfig+0x148>)
 8014688:	4013      	ands	r3, r2
 801468a:	0019      	movs	r1, r3
 801468c:	687b      	ldr	r3, [r7, #4]
 801468e:	6ada      	ldr	r2, [r3, #44]	@ 0x2c
 8014690:	687b      	ldr	r3, [r7, #4]
 8014692:	681b      	ldr	r3, [r3, #0]
 8014694:	430a      	orrs	r2, r1
 8014696:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure data inversion */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DATAINVERT_INIT))
 8014698:	687b      	ldr	r3, [r7, #4]
 801469a:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801469c:	2204      	movs	r2, #4
 801469e:	4013      	ands	r3, r2
 80146a0:	d00b      	beq.n	80146ba <UART_AdvFeatureConfig+0x6e>
  {
    assert_param(IS_UART_ADVFEATURE_DATAINV(huart->AdvancedInit.DataInvert));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_DATAINV, huart->AdvancedInit.DataInvert);
 80146a2:	687b      	ldr	r3, [r7, #4]
 80146a4:	681b      	ldr	r3, [r3, #0]
 80146a6:	685b      	ldr	r3, [r3, #4]
 80146a8:	4a3b      	ldr	r2, [pc, #236]	@ (8014798 <UART_AdvFeatureConfig+0x14c>)
 80146aa:	4013      	ands	r3, r2
 80146ac:	0019      	movs	r1, r3
 80146ae:	687b      	ldr	r3, [r7, #4]
 80146b0:	6b1a      	ldr	r2, [r3, #48]	@ 0x30
 80146b2:	687b      	ldr	r3, [r7, #4]
 80146b4:	681b      	ldr	r3, [r3, #0]
 80146b6:	430a      	orrs	r2, r1
 80146b8:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX/TX pins swap */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_SWAP_INIT))
 80146ba:	687b      	ldr	r3, [r7, #4]
 80146bc:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80146be:	2208      	movs	r2, #8
 80146c0:	4013      	ands	r3, r2
 80146c2:	d00b      	beq.n	80146dc <UART_AdvFeatureConfig+0x90>
  {
    assert_param(IS_UART_ADVFEATURE_SWAP(huart->AdvancedInit.Swap));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_SWAP, huart->AdvancedInit.Swap);
 80146c4:	687b      	ldr	r3, [r7, #4]
 80146c6:	681b      	ldr	r3, [r3, #0]
 80146c8:	685b      	ldr	r3, [r3, #4]
 80146ca:	4a34      	ldr	r2, [pc, #208]	@ (801479c <UART_AdvFeatureConfig+0x150>)
 80146cc:	4013      	ands	r3, r2
 80146ce:	0019      	movs	r1, r3
 80146d0:	687b      	ldr	r3, [r7, #4]
 80146d2:	6b5a      	ldr	r2, [r3, #52]	@ 0x34
 80146d4:	687b      	ldr	r3, [r7, #4]
 80146d6:	681b      	ldr	r3, [r3, #0]
 80146d8:	430a      	orrs	r2, r1
 80146da:	605a      	str	r2, [r3, #4]
  }

  /* if required, configure RX overrun detection disabling */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_RXOVERRUNDISABLE_INIT))
 80146dc:	687b      	ldr	r3, [r7, #4]
 80146de:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 80146e0:	2210      	movs	r2, #16
 80146e2:	4013      	ands	r3, r2
 80146e4:	d00b      	beq.n	80146fe <UART_AdvFeatureConfig+0xb2>
  {
    assert_param(IS_UART_OVERRUN(huart->AdvancedInit.OverrunDisable));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_OVRDIS, huart->AdvancedInit.OverrunDisable);
 80146e6:	687b      	ldr	r3, [r7, #4]
 80146e8:	681b      	ldr	r3, [r3, #0]
 80146ea:	689b      	ldr	r3, [r3, #8]
 80146ec:	4a2c      	ldr	r2, [pc, #176]	@ (80147a0 <UART_AdvFeatureConfig+0x154>)
 80146ee:	4013      	ands	r3, r2
 80146f0:	0019      	movs	r1, r3
 80146f2:	687b      	ldr	r3, [r7, #4]
 80146f4:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 80146f6:	687b      	ldr	r3, [r7, #4]
 80146f8:	681b      	ldr	r3, [r3, #0]
 80146fa:	430a      	orrs	r2, r1
 80146fc:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure DMA disabling on reception error */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_DMADISABLEONERROR_INIT))
 80146fe:	687b      	ldr	r3, [r7, #4]
 8014700:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014702:	2220      	movs	r2, #32
 8014704:	4013      	ands	r3, r2
 8014706:	d00b      	beq.n	8014720 <UART_AdvFeatureConfig+0xd4>
  {
    assert_param(IS_UART_ADVFEATURE_DMAONRXERROR(huart->AdvancedInit.DMADisableonRxError));
    MODIFY_REG(huart->Instance->CR3, USART_CR3_DDRE, huart->AdvancedInit.DMADisableonRxError);
 8014708:	687b      	ldr	r3, [r7, #4]
 801470a:	681b      	ldr	r3, [r3, #0]
 801470c:	689b      	ldr	r3, [r3, #8]
 801470e:	4a25      	ldr	r2, [pc, #148]	@ (80147a4 <UART_AdvFeatureConfig+0x158>)
 8014710:	4013      	ands	r3, r2
 8014712:	0019      	movs	r1, r3
 8014714:	687b      	ldr	r3, [r7, #4]
 8014716:	6bda      	ldr	r2, [r3, #60]	@ 0x3c
 8014718:	687b      	ldr	r3, [r7, #4]
 801471a:	681b      	ldr	r3, [r3, #0]
 801471c:	430a      	orrs	r2, r1
 801471e:	609a      	str	r2, [r3, #8]
  }

  /* if required, configure auto Baud rate detection scheme */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_AUTOBAUDRATE_INIT))
 8014720:	687b      	ldr	r3, [r7, #4]
 8014722:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 8014724:	2240      	movs	r2, #64	@ 0x40
 8014726:	4013      	ands	r3, r2
 8014728:	d01d      	beq.n	8014766 <UART_AdvFeatureConfig+0x11a>
  {
    assert_param(IS_USART_AUTOBAUDRATE_DETECTION_INSTANCE(huart->Instance));
    assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATE(huart->AdvancedInit.AutoBaudRateEnable));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_ABREN, huart->AdvancedInit.AutoBaudRateEnable);
 801472a:	687b      	ldr	r3, [r7, #4]
 801472c:	681b      	ldr	r3, [r3, #0]
 801472e:	685b      	ldr	r3, [r3, #4]
 8014730:	4a1d      	ldr	r2, [pc, #116]	@ (80147a8 <UART_AdvFeatureConfig+0x15c>)
 8014732:	4013      	ands	r3, r2
 8014734:	0019      	movs	r1, r3
 8014736:	687b      	ldr	r3, [r7, #4]
 8014738:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 801473a:	687b      	ldr	r3, [r7, #4]
 801473c:	681b      	ldr	r3, [r3, #0]
 801473e:	430a      	orrs	r2, r1
 8014740:	605a      	str	r2, [r3, #4]
    /* set auto Baudrate detection parameters if detection is enabled */
    if (huart->AdvancedInit.AutoBaudRateEnable == UART_ADVFEATURE_AUTOBAUDRATE_ENABLE)
 8014742:	687b      	ldr	r3, [r7, #4]
 8014744:	6c1a      	ldr	r2, [r3, #64]	@ 0x40
 8014746:	2380      	movs	r3, #128	@ 0x80
 8014748:	035b      	lsls	r3, r3, #13
 801474a:	429a      	cmp	r2, r3
 801474c:	d10b      	bne.n	8014766 <UART_AdvFeatureConfig+0x11a>
    {
      assert_param(IS_UART_ADVFEATURE_AUTOBAUDRATEMODE(huart->AdvancedInit.AutoBaudRateMode));
      MODIFY_REG(huart->Instance->CR2, USART_CR2_ABRMODE, huart->AdvancedInit.AutoBaudRateMode);
 801474e:	687b      	ldr	r3, [r7, #4]
 8014750:	681b      	ldr	r3, [r3, #0]
 8014752:	685b      	ldr	r3, [r3, #4]
 8014754:	4a15      	ldr	r2, [pc, #84]	@ (80147ac <UART_AdvFeatureConfig+0x160>)
 8014756:	4013      	ands	r3, r2
 8014758:	0019      	movs	r1, r3
 801475a:	687b      	ldr	r3, [r7, #4]
 801475c:	6c5a      	ldr	r2, [r3, #68]	@ 0x44
 801475e:	687b      	ldr	r3, [r7, #4]
 8014760:	681b      	ldr	r3, [r3, #0]
 8014762:	430a      	orrs	r2, r1
 8014764:	605a      	str	r2, [r3, #4]
    }
  }

  /* if required, configure MSB first on communication line */
  if (HAL_IS_BIT_SET(huart->AdvancedInit.AdvFeatureInit, UART_ADVFEATURE_MSBFIRST_INIT))
 8014766:	687b      	ldr	r3, [r7, #4]
 8014768:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801476a:	2280      	movs	r2, #128	@ 0x80
 801476c:	4013      	ands	r3, r2
 801476e:	d00b      	beq.n	8014788 <UART_AdvFeatureConfig+0x13c>
  {
    assert_param(IS_UART_ADVFEATURE_MSBFIRST(huart->AdvancedInit.MSBFirst));
    MODIFY_REG(huart->Instance->CR2, USART_CR2_MSBFIRST, huart->AdvancedInit.MSBFirst);
 8014770:	687b      	ldr	r3, [r7, #4]
 8014772:	681b      	ldr	r3, [r3, #0]
 8014774:	685b      	ldr	r3, [r3, #4]
 8014776:	4a0e      	ldr	r2, [pc, #56]	@ (80147b0 <UART_AdvFeatureConfig+0x164>)
 8014778:	4013      	ands	r3, r2
 801477a:	0019      	movs	r1, r3
 801477c:	687b      	ldr	r3, [r7, #4]
 801477e:	6c9a      	ldr	r2, [r3, #72]	@ 0x48
 8014780:	687b      	ldr	r3, [r7, #4]
 8014782:	681b      	ldr	r3, [r3, #0]
 8014784:	430a      	orrs	r2, r1
 8014786:	605a      	str	r2, [r3, #4]
  }
}
 8014788:	46c0      	nop			@ (mov r8, r8)
 801478a:	46bd      	mov	sp, r7
 801478c:	b002      	add	sp, #8
 801478e:	bd80      	pop	{r7, pc}
 8014790:	fffdffff 	.word	0xfffdffff
 8014794:	fffeffff 	.word	0xfffeffff
 8014798:	fffbffff 	.word	0xfffbffff
 801479c:	ffff7fff 	.word	0xffff7fff
 80147a0:	ffffefff 	.word	0xffffefff
 80147a4:	ffffdfff 	.word	0xffffdfff
 80147a8:	ffefffff 	.word	0xffefffff
 80147ac:	ff9fffff 	.word	0xff9fffff
 80147b0:	fff7ffff 	.word	0xfff7ffff

080147b4 <UART_CheckIdleState>:
  * @brief Check the UART Idle State.
  * @param huart UART handle.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_CheckIdleState(UART_HandleTypeDef *huart)
{
 80147b4:	b580      	push	{r7, lr}
 80147b6:	b092      	sub	sp, #72	@ 0x48
 80147b8:	af02      	add	r7, sp, #8
 80147ba:	6078      	str	r0, [r7, #4]
  uint32_t tickstart;

  /* Initialize the UART ErrorCode */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80147bc:	687b      	ldr	r3, [r7, #4]
 80147be:	2284      	movs	r2, #132	@ 0x84
 80147c0:	2100      	movs	r1, #0
 80147c2:	5099      	str	r1, [r3, r2]

  /* Init tickstart for timeout management */
  tickstart = HAL_GetTick();
 80147c4:	f7f7 fb46 	bl	800be54 <HAL_GetTick>
 80147c8:	0003      	movs	r3, r0
 80147ca:	63fb      	str	r3, [r7, #60]	@ 0x3c

  /* Check if the Transmitter is enabled */
  if ((huart->Instance->CR1 & USART_CR1_TE) == USART_CR1_TE)
 80147cc:	687b      	ldr	r3, [r7, #4]
 80147ce:	681b      	ldr	r3, [r3, #0]
 80147d0:	681b      	ldr	r3, [r3, #0]
 80147d2:	2208      	movs	r2, #8
 80147d4:	4013      	ands	r3, r2
 80147d6:	2b08      	cmp	r3, #8
 80147d8:	d12c      	bne.n	8014834 <UART_CheckIdleState+0x80>
  {
    /* Wait until TEACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_TEACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 80147da:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80147dc:	2280      	movs	r2, #128	@ 0x80
 80147de:	0391      	lsls	r1, r2, #14
 80147e0:	6878      	ldr	r0, [r7, #4]
 80147e2:	4a46      	ldr	r2, [pc, #280]	@ (80148fc <UART_CheckIdleState+0x148>)
 80147e4:	9200      	str	r2, [sp, #0]
 80147e6:	2200      	movs	r2, #0
 80147e8:	f000 f88c 	bl	8014904 <UART_WaitOnFlagUntilTimeout>
 80147ec:	1e03      	subs	r3, r0, #0
 80147ee:	d021      	beq.n	8014834 <UART_CheckIdleState+0x80>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80147f0:	f3ef 8310 	mrs	r3, PRIMASK
 80147f4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 80147f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable TXE interrupt for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE));
 80147f8:	63bb      	str	r3, [r7, #56]	@ 0x38
 80147fa:	2301      	movs	r3, #1
 80147fc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80147fe:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014800:	f383 8810 	msr	PRIMASK, r3
}
 8014804:	46c0      	nop			@ (mov r8, r8)
 8014806:	687b      	ldr	r3, [r7, #4]
 8014808:	681b      	ldr	r3, [r3, #0]
 801480a:	681a      	ldr	r2, [r3, #0]
 801480c:	687b      	ldr	r3, [r7, #4]
 801480e:	681b      	ldr	r3, [r3, #0]
 8014810:	2180      	movs	r1, #128	@ 0x80
 8014812:	438a      	bics	r2, r1
 8014814:	601a      	str	r2, [r3, #0]
 8014816:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014818:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801481a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801481c:	f383 8810 	msr	PRIMASK, r3
}
 8014820:	46c0      	nop			@ (mov r8, r8)

      huart->gState = HAL_UART_STATE_READY;
 8014822:	687b      	ldr	r3, [r7, #4]
 8014824:	2220      	movs	r2, #32
 8014826:	67da      	str	r2, [r3, #124]	@ 0x7c

      __HAL_UNLOCK(huart);
 8014828:	687b      	ldr	r3, [r7, #4]
 801482a:	2278      	movs	r2, #120	@ 0x78
 801482c:	2100      	movs	r1, #0
 801482e:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 8014830:	2303      	movs	r3, #3
 8014832:	e05f      	b.n	80148f4 <UART_CheckIdleState+0x140>
    }
  }

  /* Check if the Receiver is enabled */
  if ((huart->Instance->CR1 & USART_CR1_RE) == USART_CR1_RE)
 8014834:	687b      	ldr	r3, [r7, #4]
 8014836:	681b      	ldr	r3, [r3, #0]
 8014838:	681b      	ldr	r3, [r3, #0]
 801483a:	2204      	movs	r2, #4
 801483c:	4013      	ands	r3, r2
 801483e:	2b04      	cmp	r3, #4
 8014840:	d146      	bne.n	80148d0 <UART_CheckIdleState+0x11c>
  {
    /* Wait until REACK flag is set */
    if (UART_WaitOnFlagUntilTimeout(huart, USART_ISR_REACK, RESET, tickstart, HAL_UART_TIMEOUT_VALUE) != HAL_OK)
 8014842:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014844:	2280      	movs	r2, #128	@ 0x80
 8014846:	03d1      	lsls	r1, r2, #15
 8014848:	6878      	ldr	r0, [r7, #4]
 801484a:	4a2c      	ldr	r2, [pc, #176]	@ (80148fc <UART_CheckIdleState+0x148>)
 801484c:	9200      	str	r2, [sp, #0]
 801484e:	2200      	movs	r2, #0
 8014850:	f000 f858 	bl	8014904 <UART_WaitOnFlagUntilTimeout>
 8014854:	1e03      	subs	r3, r0, #0
 8014856:	d03b      	beq.n	80148d0 <UART_CheckIdleState+0x11c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014858:	f3ef 8310 	mrs	r3, PRIMASK
 801485c:	60fb      	str	r3, [r7, #12]
  return(result);
 801485e:	68fb      	ldr	r3, [r7, #12]
    {
      /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error)
      interrupts for the interrupt process */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8014860:	637b      	str	r3, [r7, #52]	@ 0x34
 8014862:	2301      	movs	r3, #1
 8014864:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014866:	693b      	ldr	r3, [r7, #16]
 8014868:	f383 8810 	msr	PRIMASK, r3
}
 801486c:	46c0      	nop			@ (mov r8, r8)
 801486e:	687b      	ldr	r3, [r7, #4]
 8014870:	681b      	ldr	r3, [r3, #0]
 8014872:	681a      	ldr	r2, [r3, #0]
 8014874:	687b      	ldr	r3, [r7, #4]
 8014876:	681b      	ldr	r3, [r3, #0]
 8014878:	4921      	ldr	r1, [pc, #132]	@ (8014900 <UART_CheckIdleState+0x14c>)
 801487a:	400a      	ands	r2, r1
 801487c:	601a      	str	r2, [r3, #0]
 801487e:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014880:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014882:	697b      	ldr	r3, [r7, #20]
 8014884:	f383 8810 	msr	PRIMASK, r3
}
 8014888:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 801488a:	f3ef 8310 	mrs	r3, PRIMASK
 801488e:	61bb      	str	r3, [r7, #24]
  return(result);
 8014890:	69bb      	ldr	r3, [r7, #24]
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014892:	633b      	str	r3, [r7, #48]	@ 0x30
 8014894:	2301      	movs	r3, #1
 8014896:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014898:	69fb      	ldr	r3, [r7, #28]
 801489a:	f383 8810 	msr	PRIMASK, r3
}
 801489e:	46c0      	nop			@ (mov r8, r8)
 80148a0:	687b      	ldr	r3, [r7, #4]
 80148a2:	681b      	ldr	r3, [r3, #0]
 80148a4:	689a      	ldr	r2, [r3, #8]
 80148a6:	687b      	ldr	r3, [r7, #4]
 80148a8:	681b      	ldr	r3, [r3, #0]
 80148aa:	2101      	movs	r1, #1
 80148ac:	438a      	bics	r2, r1
 80148ae:	609a      	str	r2, [r3, #8]
 80148b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 80148b2:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80148b4:	6a3b      	ldr	r3, [r7, #32]
 80148b6:	f383 8810 	msr	PRIMASK, r3
}
 80148ba:	46c0      	nop			@ (mov r8, r8)

      huart->RxState = HAL_UART_STATE_READY;
 80148bc:	687b      	ldr	r3, [r7, #4]
 80148be:	2280      	movs	r2, #128	@ 0x80
 80148c0:	2120      	movs	r1, #32
 80148c2:	5099      	str	r1, [r3, r2]

      __HAL_UNLOCK(huart);
 80148c4:	687b      	ldr	r3, [r7, #4]
 80148c6:	2278      	movs	r2, #120	@ 0x78
 80148c8:	2100      	movs	r1, #0
 80148ca:	5499      	strb	r1, [r3, r2]

      /* Timeout occurred */
      return HAL_TIMEOUT;
 80148cc:	2303      	movs	r3, #3
 80148ce:	e011      	b.n	80148f4 <UART_CheckIdleState+0x140>
    }
  }

  /* Initialize the UART State */
  huart->gState = HAL_UART_STATE_READY;
 80148d0:	687b      	ldr	r3, [r7, #4]
 80148d2:	2220      	movs	r2, #32
 80148d4:	67da      	str	r2, [r3, #124]	@ 0x7c
  huart->RxState = HAL_UART_STATE_READY;
 80148d6:	687b      	ldr	r3, [r7, #4]
 80148d8:	2280      	movs	r2, #128	@ 0x80
 80148da:	2120      	movs	r1, #32
 80148dc:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80148de:	687b      	ldr	r3, [r7, #4]
 80148e0:	2200      	movs	r2, #0
 80148e2:	661a      	str	r2, [r3, #96]	@ 0x60
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 80148e4:	687b      	ldr	r3, [r7, #4]
 80148e6:	2200      	movs	r2, #0
 80148e8:	665a      	str	r2, [r3, #100]	@ 0x64

  __HAL_UNLOCK(huart);
 80148ea:	687b      	ldr	r3, [r7, #4]
 80148ec:	2278      	movs	r2, #120	@ 0x78
 80148ee:	2100      	movs	r1, #0
 80148f0:	5499      	strb	r1, [r3, r2]

  return HAL_OK;
 80148f2:	2300      	movs	r3, #0
}
 80148f4:	0018      	movs	r0, r3
 80148f6:	46bd      	mov	sp, r7
 80148f8:	b010      	add	sp, #64	@ 0x40
 80148fa:	bd80      	pop	{r7, pc}
 80148fc:	01ffffff 	.word	0x01ffffff
 8014900:	fffffedf 	.word	0xfffffedf

08014904 <UART_WaitOnFlagUntilTimeout>:
  * @param Timeout   Timeout duration
  * @retval HAL status
  */
HAL_StatusTypeDef UART_WaitOnFlagUntilTimeout(UART_HandleTypeDef *huart, uint32_t Flag, FlagStatus Status,
                                              uint32_t Tickstart, uint32_t Timeout)
{
 8014904:	b580      	push	{r7, lr}
 8014906:	b084      	sub	sp, #16
 8014908:	af00      	add	r7, sp, #0
 801490a:	60f8      	str	r0, [r7, #12]
 801490c:	60b9      	str	r1, [r7, #8]
 801490e:	603b      	str	r3, [r7, #0]
 8014910:	1dfb      	adds	r3, r7, #7
 8014912:	701a      	strb	r2, [r3, #0]
  /* Wait until flag is set */
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 8014914:	e04b      	b.n	80149ae <UART_WaitOnFlagUntilTimeout+0xaa>
  {
    /* Check for the Timeout */
    if (Timeout != HAL_MAX_DELAY)
 8014916:	69bb      	ldr	r3, [r7, #24]
 8014918:	3301      	adds	r3, #1
 801491a:	d048      	beq.n	80149ae <UART_WaitOnFlagUntilTimeout+0xaa>
    {
      if (((HAL_GetTick() - Tickstart) > Timeout) || (Timeout == 0U))
 801491c:	f7f7 fa9a 	bl	800be54 <HAL_GetTick>
 8014920:	0002      	movs	r2, r0
 8014922:	683b      	ldr	r3, [r7, #0]
 8014924:	1ad3      	subs	r3, r2, r3
 8014926:	69ba      	ldr	r2, [r7, #24]
 8014928:	429a      	cmp	r2, r3
 801492a:	d302      	bcc.n	8014932 <UART_WaitOnFlagUntilTimeout+0x2e>
 801492c:	69bb      	ldr	r3, [r7, #24]
 801492e:	2b00      	cmp	r3, #0
 8014930:	d101      	bne.n	8014936 <UART_WaitOnFlagUntilTimeout+0x32>
      {

        return HAL_TIMEOUT;
 8014932:	2303      	movs	r3, #3
 8014934:	e04b      	b.n	80149ce <UART_WaitOnFlagUntilTimeout+0xca>
      }

      if (READ_BIT(huart->Instance->CR1, USART_CR1_RE) != 0U)
 8014936:	68fb      	ldr	r3, [r7, #12]
 8014938:	681b      	ldr	r3, [r3, #0]
 801493a:	681b      	ldr	r3, [r3, #0]
 801493c:	2204      	movs	r2, #4
 801493e:	4013      	ands	r3, r2
 8014940:	d035      	beq.n	80149ae <UART_WaitOnFlagUntilTimeout+0xaa>
      {
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_ORE) == SET)
 8014942:	68fb      	ldr	r3, [r7, #12]
 8014944:	681b      	ldr	r3, [r3, #0]
 8014946:	69db      	ldr	r3, [r3, #28]
 8014948:	2208      	movs	r2, #8
 801494a:	4013      	ands	r3, r2
 801494c:	2b08      	cmp	r3, #8
 801494e:	d111      	bne.n	8014974 <UART_WaitOnFlagUntilTimeout+0x70>
        {
           /* Clear Overrun Error flag*/
           __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_OREF);
 8014950:	68fb      	ldr	r3, [r7, #12]
 8014952:	681b      	ldr	r3, [r3, #0]
 8014954:	2208      	movs	r2, #8
 8014956:	621a      	str	r2, [r3, #32]

           /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts if ongoing */
           UART_EndRxTransfer(huart);
 8014958:	68fb      	ldr	r3, [r7, #12]
 801495a:	0018      	movs	r0, r3
 801495c:	f000 f9ca 	bl	8014cf4 <UART_EndRxTransfer>

           huart->ErrorCode = HAL_UART_ERROR_ORE;
 8014960:	68fb      	ldr	r3, [r7, #12]
 8014962:	2284      	movs	r2, #132	@ 0x84
 8014964:	2108      	movs	r1, #8
 8014966:	5099      	str	r1, [r3, r2]

           /* Process Unlocked */
           __HAL_UNLOCK(huart);
 8014968:	68fb      	ldr	r3, [r7, #12]
 801496a:	2278      	movs	r2, #120	@ 0x78
 801496c:	2100      	movs	r1, #0
 801496e:	5499      	strb	r1, [r3, r2]

           return HAL_ERROR;
 8014970:	2301      	movs	r3, #1
 8014972:	e02c      	b.n	80149ce <UART_WaitOnFlagUntilTimeout+0xca>
        }
        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_RTOF) == SET)
 8014974:	68fb      	ldr	r3, [r7, #12]
 8014976:	681b      	ldr	r3, [r3, #0]
 8014978:	69da      	ldr	r2, [r3, #28]
 801497a:	2380      	movs	r3, #128	@ 0x80
 801497c:	011b      	lsls	r3, r3, #4
 801497e:	401a      	ands	r2, r3
 8014980:	2380      	movs	r3, #128	@ 0x80
 8014982:	011b      	lsls	r3, r3, #4
 8014984:	429a      	cmp	r2, r3
 8014986:	d112      	bne.n	80149ae <UART_WaitOnFlagUntilTimeout+0xaa>
        {
          /* Clear Receiver Timeout flag*/
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_RTOF);
 8014988:	68fb      	ldr	r3, [r7, #12]
 801498a:	681b      	ldr	r3, [r3, #0]
 801498c:	2280      	movs	r2, #128	@ 0x80
 801498e:	0112      	lsls	r2, r2, #4
 8014990:	621a      	str	r2, [r3, #32]

          /* Blocking error : transfer is aborted
          Set the UART state ready to be able to start again the process,
          Disable Rx Interrupts if ongoing */
          UART_EndRxTransfer(huart);
 8014992:	68fb      	ldr	r3, [r7, #12]
 8014994:	0018      	movs	r0, r3
 8014996:	f000 f9ad 	bl	8014cf4 <UART_EndRxTransfer>

          huart->ErrorCode = HAL_UART_ERROR_RTO;
 801499a:	68fb      	ldr	r3, [r7, #12]
 801499c:	2284      	movs	r2, #132	@ 0x84
 801499e:	2120      	movs	r1, #32
 80149a0:	5099      	str	r1, [r3, r2]

          /* Process Unlocked */
          __HAL_UNLOCK(huart);
 80149a2:	68fb      	ldr	r3, [r7, #12]
 80149a4:	2278      	movs	r2, #120	@ 0x78
 80149a6:	2100      	movs	r1, #0
 80149a8:	5499      	strb	r1, [r3, r2]

          return HAL_TIMEOUT;
 80149aa:	2303      	movs	r3, #3
 80149ac:	e00f      	b.n	80149ce <UART_WaitOnFlagUntilTimeout+0xca>
  while ((__HAL_UART_GET_FLAG(huart, Flag) ? SET : RESET) == Status)
 80149ae:	68fb      	ldr	r3, [r7, #12]
 80149b0:	681b      	ldr	r3, [r3, #0]
 80149b2:	69db      	ldr	r3, [r3, #28]
 80149b4:	68ba      	ldr	r2, [r7, #8]
 80149b6:	4013      	ands	r3, r2
 80149b8:	68ba      	ldr	r2, [r7, #8]
 80149ba:	1ad3      	subs	r3, r2, r3
 80149bc:	425a      	negs	r2, r3
 80149be:	4153      	adcs	r3, r2
 80149c0:	b2db      	uxtb	r3, r3
 80149c2:	001a      	movs	r2, r3
 80149c4:	1dfb      	adds	r3, r7, #7
 80149c6:	781b      	ldrb	r3, [r3, #0]
 80149c8:	429a      	cmp	r2, r3
 80149ca:	d0a4      	beq.n	8014916 <UART_WaitOnFlagUntilTimeout+0x12>
        }
      }
    }
  }
  return HAL_OK;
 80149cc:	2300      	movs	r3, #0
}
 80149ce:	0018      	movs	r0, r3
 80149d0:	46bd      	mov	sp, r7
 80149d2:	b004      	add	sp, #16
 80149d4:	bd80      	pop	{r7, pc}
	...

080149d8 <UART_Start_Receive_IT>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_IT(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80149d8:	b580      	push	{r7, lr}
 80149da:	b090      	sub	sp, #64	@ 0x40
 80149dc:	af00      	add	r7, sp, #0
 80149de:	60f8      	str	r0, [r7, #12]
 80149e0:	60b9      	str	r1, [r7, #8]
 80149e2:	1dbb      	adds	r3, r7, #6
 80149e4:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr  = pData;
 80149e6:	68fb      	ldr	r3, [r7, #12]
 80149e8:	68ba      	ldr	r2, [r7, #8]
 80149ea:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize  = Size;
 80149ec:	68fb      	ldr	r3, [r7, #12]
 80149ee:	1dba      	adds	r2, r7, #6
 80149f0:	2158      	movs	r1, #88	@ 0x58
 80149f2:	8812      	ldrh	r2, [r2, #0]
 80149f4:	525a      	strh	r2, [r3, r1]
  huart->RxXferCount = Size;
 80149f6:	68fb      	ldr	r3, [r7, #12]
 80149f8:	1dba      	adds	r2, r7, #6
 80149fa:	215a      	movs	r1, #90	@ 0x5a
 80149fc:	8812      	ldrh	r2, [r2, #0]
 80149fe:	525a      	strh	r2, [r3, r1]
  huart->RxISR       = NULL;
 8014a00:	68fb      	ldr	r3, [r7, #12]
 8014a02:	2200      	movs	r2, #0
 8014a04:	669a      	str	r2, [r3, #104]	@ 0x68

  /* Computation of UART mask to apply to RDR register */
  UART_MASK_COMPUTATION(huart);
 8014a06:	68fb      	ldr	r3, [r7, #12]
 8014a08:	689a      	ldr	r2, [r3, #8]
 8014a0a:	2380      	movs	r3, #128	@ 0x80
 8014a0c:	015b      	lsls	r3, r3, #5
 8014a0e:	429a      	cmp	r2, r3
 8014a10:	d10d      	bne.n	8014a2e <UART_Start_Receive_IT+0x56>
 8014a12:	68fb      	ldr	r3, [r7, #12]
 8014a14:	691b      	ldr	r3, [r3, #16]
 8014a16:	2b00      	cmp	r3, #0
 8014a18:	d104      	bne.n	8014a24 <UART_Start_Receive_IT+0x4c>
 8014a1a:	68fb      	ldr	r3, [r7, #12]
 8014a1c:	225c      	movs	r2, #92	@ 0x5c
 8014a1e:	4950      	ldr	r1, [pc, #320]	@ (8014b60 <UART_Start_Receive_IT+0x188>)
 8014a20:	5299      	strh	r1, [r3, r2]
 8014a22:	e02e      	b.n	8014a82 <UART_Start_Receive_IT+0xaa>
 8014a24:	68fb      	ldr	r3, [r7, #12]
 8014a26:	225c      	movs	r2, #92	@ 0x5c
 8014a28:	21ff      	movs	r1, #255	@ 0xff
 8014a2a:	5299      	strh	r1, [r3, r2]
 8014a2c:	e029      	b.n	8014a82 <UART_Start_Receive_IT+0xaa>
 8014a2e:	68fb      	ldr	r3, [r7, #12]
 8014a30:	689b      	ldr	r3, [r3, #8]
 8014a32:	2b00      	cmp	r3, #0
 8014a34:	d10d      	bne.n	8014a52 <UART_Start_Receive_IT+0x7a>
 8014a36:	68fb      	ldr	r3, [r7, #12]
 8014a38:	691b      	ldr	r3, [r3, #16]
 8014a3a:	2b00      	cmp	r3, #0
 8014a3c:	d104      	bne.n	8014a48 <UART_Start_Receive_IT+0x70>
 8014a3e:	68fb      	ldr	r3, [r7, #12]
 8014a40:	225c      	movs	r2, #92	@ 0x5c
 8014a42:	21ff      	movs	r1, #255	@ 0xff
 8014a44:	5299      	strh	r1, [r3, r2]
 8014a46:	e01c      	b.n	8014a82 <UART_Start_Receive_IT+0xaa>
 8014a48:	68fb      	ldr	r3, [r7, #12]
 8014a4a:	225c      	movs	r2, #92	@ 0x5c
 8014a4c:	217f      	movs	r1, #127	@ 0x7f
 8014a4e:	5299      	strh	r1, [r3, r2]
 8014a50:	e017      	b.n	8014a82 <UART_Start_Receive_IT+0xaa>
 8014a52:	68fb      	ldr	r3, [r7, #12]
 8014a54:	689a      	ldr	r2, [r3, #8]
 8014a56:	2380      	movs	r3, #128	@ 0x80
 8014a58:	055b      	lsls	r3, r3, #21
 8014a5a:	429a      	cmp	r2, r3
 8014a5c:	d10d      	bne.n	8014a7a <UART_Start_Receive_IT+0xa2>
 8014a5e:	68fb      	ldr	r3, [r7, #12]
 8014a60:	691b      	ldr	r3, [r3, #16]
 8014a62:	2b00      	cmp	r3, #0
 8014a64:	d104      	bne.n	8014a70 <UART_Start_Receive_IT+0x98>
 8014a66:	68fb      	ldr	r3, [r7, #12]
 8014a68:	225c      	movs	r2, #92	@ 0x5c
 8014a6a:	217f      	movs	r1, #127	@ 0x7f
 8014a6c:	5299      	strh	r1, [r3, r2]
 8014a6e:	e008      	b.n	8014a82 <UART_Start_Receive_IT+0xaa>
 8014a70:	68fb      	ldr	r3, [r7, #12]
 8014a72:	225c      	movs	r2, #92	@ 0x5c
 8014a74:	213f      	movs	r1, #63	@ 0x3f
 8014a76:	5299      	strh	r1, [r3, r2]
 8014a78:	e003      	b.n	8014a82 <UART_Start_Receive_IT+0xaa>
 8014a7a:	68fb      	ldr	r3, [r7, #12]
 8014a7c:	225c      	movs	r2, #92	@ 0x5c
 8014a7e:	2100      	movs	r1, #0
 8014a80:	5299      	strh	r1, [r3, r2]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014a82:	68fb      	ldr	r3, [r7, #12]
 8014a84:	2284      	movs	r2, #132	@ 0x84
 8014a86:	2100      	movs	r1, #0
 8014a88:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8014a8a:	68fb      	ldr	r3, [r7, #12]
 8014a8c:	2280      	movs	r2, #128	@ 0x80
 8014a8e:	2122      	movs	r1, #34	@ 0x22
 8014a90:	5099      	str	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014a92:	f3ef 8310 	mrs	r3, PRIMASK
 8014a96:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8014a98:	6abb      	ldr	r3, [r7, #40]	@ 0x28

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014a9a:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014a9c:	2301      	movs	r3, #1
 8014a9e:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014aa0:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014aa2:	f383 8810 	msr	PRIMASK, r3
}
 8014aa6:	46c0      	nop			@ (mov r8, r8)
 8014aa8:	68fb      	ldr	r3, [r7, #12]
 8014aaa:	681b      	ldr	r3, [r3, #0]
 8014aac:	689a      	ldr	r2, [r3, #8]
 8014aae:	68fb      	ldr	r3, [r7, #12]
 8014ab0:	681b      	ldr	r3, [r3, #0]
 8014ab2:	2101      	movs	r1, #1
 8014ab4:	430a      	orrs	r2, r1
 8014ab6:	609a      	str	r2, [r3, #8]
 8014ab8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014aba:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014abc:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014abe:	f383 8810 	msr	PRIMASK, r3
}
 8014ac2:	46c0      	nop			@ (mov r8, r8)

  /* Set the Rx ISR function pointer according to the data word length */
  if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8014ac4:	68fb      	ldr	r3, [r7, #12]
 8014ac6:	689a      	ldr	r2, [r3, #8]
 8014ac8:	2380      	movs	r3, #128	@ 0x80
 8014aca:	015b      	lsls	r3, r3, #5
 8014acc:	429a      	cmp	r2, r3
 8014ace:	d107      	bne.n	8014ae0 <UART_Start_Receive_IT+0x108>
 8014ad0:	68fb      	ldr	r3, [r7, #12]
 8014ad2:	691b      	ldr	r3, [r3, #16]
 8014ad4:	2b00      	cmp	r3, #0
 8014ad6:	d103      	bne.n	8014ae0 <UART_Start_Receive_IT+0x108>
  {
    huart->RxISR = UART_RxISR_16BIT;
 8014ad8:	68fb      	ldr	r3, [r7, #12]
 8014ada:	4a22      	ldr	r2, [pc, #136]	@ (8014b64 <UART_Start_Receive_IT+0x18c>)
 8014adc:	669a      	str	r2, [r3, #104]	@ 0x68
 8014ade:	e002      	b.n	8014ae6 <UART_Start_Receive_IT+0x10e>
  }
  else
  {
    huart->RxISR = UART_RxISR_8BIT;
 8014ae0:	68fb      	ldr	r3, [r7, #12]
 8014ae2:	4a21      	ldr	r2, [pc, #132]	@ (8014b68 <UART_Start_Receive_IT+0x190>)
 8014ae4:	669a      	str	r2, [r3, #104]	@ 0x68
  }

  /* Enable the UART Parity Error interrupt and Data Register Not Empty interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8014ae6:	68fb      	ldr	r3, [r7, #12]
 8014ae8:	691b      	ldr	r3, [r3, #16]
 8014aea:	2b00      	cmp	r3, #0
 8014aec:	d019      	beq.n	8014b22 <UART_Start_Receive_IT+0x14a>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014aee:	f3ef 8310 	mrs	r3, PRIMASK
 8014af2:	61fb      	str	r3, [r7, #28]
  return(result);
 8014af4:	69fb      	ldr	r3, [r7, #28]
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE | USART_CR1_RXNEIE);
 8014af6:	637b      	str	r3, [r7, #52]	@ 0x34
 8014af8:	2301      	movs	r3, #1
 8014afa:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014afc:	6a3b      	ldr	r3, [r7, #32]
 8014afe:	f383 8810 	msr	PRIMASK, r3
}
 8014b02:	46c0      	nop			@ (mov r8, r8)
 8014b04:	68fb      	ldr	r3, [r7, #12]
 8014b06:	681b      	ldr	r3, [r3, #0]
 8014b08:	681a      	ldr	r2, [r3, #0]
 8014b0a:	68fb      	ldr	r3, [r7, #12]
 8014b0c:	681b      	ldr	r3, [r3, #0]
 8014b0e:	2190      	movs	r1, #144	@ 0x90
 8014b10:	0049      	lsls	r1, r1, #1
 8014b12:	430a      	orrs	r2, r1
 8014b14:	601a      	str	r2, [r3, #0]
 8014b16:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014b18:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014b1a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014b1c:	f383 8810 	msr	PRIMASK, r3
}
 8014b20:	e018      	b.n	8014b54 <UART_Start_Receive_IT+0x17c>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014b22:	f3ef 8310 	mrs	r3, PRIMASK
 8014b26:	613b      	str	r3, [r7, #16]
  return(result);
 8014b28:	693b      	ldr	r3, [r7, #16]
  }
  else
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_RXNEIE);
 8014b2a:	63bb      	str	r3, [r7, #56]	@ 0x38
 8014b2c:	2301      	movs	r3, #1
 8014b2e:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014b30:	697b      	ldr	r3, [r7, #20]
 8014b32:	f383 8810 	msr	PRIMASK, r3
}
 8014b36:	46c0      	nop			@ (mov r8, r8)
 8014b38:	68fb      	ldr	r3, [r7, #12]
 8014b3a:	681b      	ldr	r3, [r3, #0]
 8014b3c:	681a      	ldr	r2, [r3, #0]
 8014b3e:	68fb      	ldr	r3, [r7, #12]
 8014b40:	681b      	ldr	r3, [r3, #0]
 8014b42:	2120      	movs	r1, #32
 8014b44:	430a      	orrs	r2, r1
 8014b46:	601a      	str	r2, [r3, #0]
 8014b48:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014b4a:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014b4c:	69bb      	ldr	r3, [r7, #24]
 8014b4e:	f383 8810 	msr	PRIMASK, r3
}
 8014b52:	46c0      	nop			@ (mov r8, r8)
  }
  return HAL_OK;
 8014b54:	2300      	movs	r3, #0
}
 8014b56:	0018      	movs	r0, r3
 8014b58:	46bd      	mov	sp, r7
 8014b5a:	b010      	add	sp, #64	@ 0x40
 8014b5c:	bd80      	pop	{r7, pc}
 8014b5e:	46c0      	nop			@ (mov r8, r8)
 8014b60:	000001ff 	.word	0x000001ff
 8014b64:	080152d9 	.word	0x080152d9
 8014b68:	0801510d 	.word	0x0801510d

08014b6c <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8014b6c:	b580      	push	{r7, lr}
 8014b6e:	b090      	sub	sp, #64	@ 0x40
 8014b70:	af00      	add	r7, sp, #0
 8014b72:	60f8      	str	r0, [r7, #12]
 8014b74:	60b9      	str	r1, [r7, #8]
 8014b76:	1dbb      	adds	r3, r7, #6
 8014b78:	801a      	strh	r2, [r3, #0]
  huart->pRxBuffPtr = pData;
 8014b7a:	68fb      	ldr	r3, [r7, #12]
 8014b7c:	68ba      	ldr	r2, [r7, #8]
 8014b7e:	655a      	str	r2, [r3, #84]	@ 0x54
  huart->RxXferSize = Size;
 8014b80:	68fb      	ldr	r3, [r7, #12]
 8014b82:	1dba      	adds	r2, r7, #6
 8014b84:	2158      	movs	r1, #88	@ 0x58
 8014b86:	8812      	ldrh	r2, [r2, #0]
 8014b88:	525a      	strh	r2, [r3, r1]

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8014b8a:	68fb      	ldr	r3, [r7, #12]
 8014b8c:	2284      	movs	r2, #132	@ 0x84
 8014b8e:	2100      	movs	r1, #0
 8014b90:	5099      	str	r1, [r3, r2]
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8014b92:	68fb      	ldr	r3, [r7, #12]
 8014b94:	2280      	movs	r2, #128	@ 0x80
 8014b96:	2122      	movs	r1, #34	@ 0x22
 8014b98:	5099      	str	r1, [r3, r2]

  if (huart->hdmarx != NULL)
 8014b9a:	68fb      	ldr	r3, [r7, #12]
 8014b9c:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014b9e:	2b00      	cmp	r3, #0
 8014ba0:	d028      	beq.n	8014bf4 <UART_Start_Receive_DMA+0x88>
  {
    /* Set the UART DMA transfer complete callback */
    huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8014ba2:	68fb      	ldr	r3, [r7, #12]
 8014ba4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014ba6:	4a3e      	ldr	r2, [pc, #248]	@ (8014ca0 <UART_Start_Receive_DMA+0x134>)
 8014ba8:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8014baa:	68fb      	ldr	r3, [r7, #12]
 8014bac:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014bae:	4a3d      	ldr	r2, [pc, #244]	@ (8014ca4 <UART_Start_Receive_DMA+0x138>)
 8014bb0:	631a      	str	r2, [r3, #48]	@ 0x30

    /* Set the DMA error callback */
    huart->hdmarx->XferErrorCallback = UART_DMAError;
 8014bb2:	68fb      	ldr	r3, [r7, #12]
 8014bb4:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014bb6:	4a3c      	ldr	r2, [pc, #240]	@ (8014ca8 <UART_Start_Receive_DMA+0x13c>)
 8014bb8:	635a      	str	r2, [r3, #52]	@ 0x34

    /* Set the DMA abort callback */
    huart->hdmarx->XferAbortCallback = NULL;
 8014bba:	68fb      	ldr	r3, [r7, #12]
 8014bbc:	6f5b      	ldr	r3, [r3, #116]	@ 0x74
 8014bbe:	2200      	movs	r2, #0
 8014bc0:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Enable the DMA channel */
    if (HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->RDR, (uint32_t)huart->pRxBuffPtr, Size) != HAL_OK)
 8014bc2:	68fb      	ldr	r3, [r7, #12]
 8014bc4:	6f58      	ldr	r0, [r3, #116]	@ 0x74
 8014bc6:	68fb      	ldr	r3, [r7, #12]
 8014bc8:	681b      	ldr	r3, [r3, #0]
 8014bca:	3324      	adds	r3, #36	@ 0x24
 8014bcc:	0019      	movs	r1, r3
 8014bce:	68fb      	ldr	r3, [r7, #12]
 8014bd0:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8014bd2:	001a      	movs	r2, r3
 8014bd4:	1dbb      	adds	r3, r7, #6
 8014bd6:	881b      	ldrh	r3, [r3, #0]
 8014bd8:	f7f7 fe5c 	bl	800c894 <HAL_DMA_Start_IT>
 8014bdc:	1e03      	subs	r3, r0, #0
 8014bde:	d009      	beq.n	8014bf4 <UART_Start_Receive_DMA+0x88>
    {
      /* Set error code to DMA */
      huart->ErrorCode = HAL_UART_ERROR_DMA;
 8014be0:	68fb      	ldr	r3, [r7, #12]
 8014be2:	2284      	movs	r2, #132	@ 0x84
 8014be4:	2110      	movs	r1, #16
 8014be6:	5099      	str	r1, [r3, r2]

      /* Restore huart->RxState to ready */
      huart->RxState = HAL_UART_STATE_READY;
 8014be8:	68fb      	ldr	r3, [r7, #12]
 8014bea:	2280      	movs	r2, #128	@ 0x80
 8014bec:	2120      	movs	r1, #32
 8014bee:	5099      	str	r1, [r3, r2]

      return HAL_ERROR;
 8014bf0:	2301      	movs	r3, #1
 8014bf2:	e050      	b.n	8014c96 <UART_Start_Receive_DMA+0x12a>
    }
  }

  /* Enable the UART Parity Error Interrupt */
  if (huart->Init.Parity != UART_PARITY_NONE)
 8014bf4:	68fb      	ldr	r3, [r7, #12]
 8014bf6:	691b      	ldr	r3, [r3, #16]
 8014bf8:	2b00      	cmp	r3, #0
 8014bfa:	d019      	beq.n	8014c30 <UART_Start_Receive_DMA+0xc4>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014bfc:	f3ef 8310 	mrs	r3, PRIMASK
 8014c00:	62bb      	str	r3, [r7, #40]	@ 0x28
  return(result);
 8014c02:	6abb      	ldr	r3, [r7, #40]	@ 0x28
  {
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8014c04:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014c06:	2301      	movs	r3, #1
 8014c08:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014c0a:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014c0c:	f383 8810 	msr	PRIMASK, r3
}
 8014c10:	46c0      	nop			@ (mov r8, r8)
 8014c12:	68fb      	ldr	r3, [r7, #12]
 8014c14:	681b      	ldr	r3, [r3, #0]
 8014c16:	681a      	ldr	r2, [r3, #0]
 8014c18:	68fb      	ldr	r3, [r7, #12]
 8014c1a:	681b      	ldr	r3, [r3, #0]
 8014c1c:	2180      	movs	r1, #128	@ 0x80
 8014c1e:	0049      	lsls	r1, r1, #1
 8014c20:	430a      	orrs	r2, r1
 8014c22:	601a      	str	r2, [r3, #0]
 8014c24:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014c26:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014c28:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014c2a:	f383 8810 	msr	PRIMASK, r3
}
 8014c2e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014c30:	f3ef 8310 	mrs	r3, PRIMASK
 8014c34:	613b      	str	r3, [r7, #16]
  return(result);
 8014c36:	693b      	ldr	r3, [r7, #16]
  }

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014c38:	63bb      	str	r3, [r7, #56]	@ 0x38
 8014c3a:	2301      	movs	r3, #1
 8014c3c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014c3e:	697b      	ldr	r3, [r7, #20]
 8014c40:	f383 8810 	msr	PRIMASK, r3
}
 8014c44:	46c0      	nop			@ (mov r8, r8)
 8014c46:	68fb      	ldr	r3, [r7, #12]
 8014c48:	681b      	ldr	r3, [r3, #0]
 8014c4a:	689a      	ldr	r2, [r3, #8]
 8014c4c:	68fb      	ldr	r3, [r7, #12]
 8014c4e:	681b      	ldr	r3, [r3, #0]
 8014c50:	2101      	movs	r1, #1
 8014c52:	430a      	orrs	r2, r1
 8014c54:	609a      	str	r2, [r3, #8]
 8014c56:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014c58:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014c5a:	69bb      	ldr	r3, [r7, #24]
 8014c5c:	f383 8810 	msr	PRIMASK, r3
}
 8014c60:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014c62:	f3ef 8310 	mrs	r3, PRIMASK
 8014c66:	61fb      	str	r3, [r7, #28]
  return(result);
 8014c68:	69fb      	ldr	r3, [r7, #28]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  ATOMIC_SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8014c6a:	637b      	str	r3, [r7, #52]	@ 0x34
 8014c6c:	2301      	movs	r3, #1
 8014c6e:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014c70:	6a3b      	ldr	r3, [r7, #32]
 8014c72:	f383 8810 	msr	PRIMASK, r3
}
 8014c76:	46c0      	nop			@ (mov r8, r8)
 8014c78:	68fb      	ldr	r3, [r7, #12]
 8014c7a:	681b      	ldr	r3, [r3, #0]
 8014c7c:	689a      	ldr	r2, [r3, #8]
 8014c7e:	68fb      	ldr	r3, [r7, #12]
 8014c80:	681b      	ldr	r3, [r3, #0]
 8014c82:	2140      	movs	r1, #64	@ 0x40
 8014c84:	430a      	orrs	r2, r1
 8014c86:	609a      	str	r2, [r3, #8]
 8014c88:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014c8a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014c8c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014c8e:	f383 8810 	msr	PRIMASK, r3
}
 8014c92:	46c0      	nop			@ (mov r8, r8)

  return HAL_OK;
 8014c94:	2300      	movs	r3, #0
}
 8014c96:	0018      	movs	r0, r3
 8014c98:	46bd      	mov	sp, r7
 8014c9a:	b010      	add	sp, #64	@ 0x40
 8014c9c:	bd80      	pop	{r7, pc}
 8014c9e:	46c0      	nop			@ (mov r8, r8)
 8014ca0:	08014e7d 	.word	0x08014e7d
 8014ca4:	08014fb1 	.word	0x08014fb1
 8014ca8:	08014ff9 	.word	0x08014ff9

08014cac <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8014cac:	b580      	push	{r7, lr}
 8014cae:	b086      	sub	sp, #24
 8014cb0:	af00      	add	r7, sp, #0
 8014cb2:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014cb4:	f3ef 8310 	mrs	r3, PRIMASK
 8014cb8:	60bb      	str	r3, [r7, #8]
  return(result);
 8014cba:	68bb      	ldr	r3, [r7, #8]
  /* Disable TXEIE and TCIE interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8014cbc:	617b      	str	r3, [r7, #20]
 8014cbe:	2301      	movs	r3, #1
 8014cc0:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014cc2:	68fb      	ldr	r3, [r7, #12]
 8014cc4:	f383 8810 	msr	PRIMASK, r3
}
 8014cc8:	46c0      	nop			@ (mov r8, r8)
 8014cca:	687b      	ldr	r3, [r7, #4]
 8014ccc:	681b      	ldr	r3, [r3, #0]
 8014cce:	681a      	ldr	r2, [r3, #0]
 8014cd0:	687b      	ldr	r3, [r7, #4]
 8014cd2:	681b      	ldr	r3, [r3, #0]
 8014cd4:	21c0      	movs	r1, #192	@ 0xc0
 8014cd6:	438a      	bics	r2, r1
 8014cd8:	601a      	str	r2, [r3, #0]
 8014cda:	697b      	ldr	r3, [r7, #20]
 8014cdc:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014cde:	693b      	ldr	r3, [r7, #16]
 8014ce0:	f383 8810 	msr	PRIMASK, r3
}
 8014ce4:	46c0      	nop			@ (mov r8, r8)

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8014ce6:	687b      	ldr	r3, [r7, #4]
 8014ce8:	2220      	movs	r2, #32
 8014cea:	67da      	str	r2, [r3, #124]	@ 0x7c
}
 8014cec:	46c0      	nop			@ (mov r8, r8)
 8014cee:	46bd      	mov	sp, r7
 8014cf0:	b006      	add	sp, #24
 8014cf2:	bd80      	pop	{r7, pc}

08014cf4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8014cf4:	b580      	push	{r7, lr}
 8014cf6:	b08e      	sub	sp, #56	@ 0x38
 8014cf8:	af00      	add	r7, sp, #0
 8014cfa:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014cfc:	f3ef 8310 	mrs	r3, PRIMASK
 8014d00:	617b      	str	r3, [r7, #20]
  return(result);
 8014d02:	697b      	ldr	r3, [r7, #20]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8014d04:	637b      	str	r3, [r7, #52]	@ 0x34
 8014d06:	2301      	movs	r3, #1
 8014d08:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014d0a:	69bb      	ldr	r3, [r7, #24]
 8014d0c:	f383 8810 	msr	PRIMASK, r3
}
 8014d10:	46c0      	nop			@ (mov r8, r8)
 8014d12:	687b      	ldr	r3, [r7, #4]
 8014d14:	681b      	ldr	r3, [r3, #0]
 8014d16:	681a      	ldr	r2, [r3, #0]
 8014d18:	687b      	ldr	r3, [r7, #4]
 8014d1a:	681b      	ldr	r3, [r3, #0]
 8014d1c:	4926      	ldr	r1, [pc, #152]	@ (8014db8 <UART_EndRxTransfer+0xc4>)
 8014d1e:	400a      	ands	r2, r1
 8014d20:	601a      	str	r2, [r3, #0]
 8014d22:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014d24:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014d26:	69fb      	ldr	r3, [r7, #28]
 8014d28:	f383 8810 	msr	PRIMASK, r3
}
 8014d2c:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014d2e:	f3ef 8310 	mrs	r3, PRIMASK
 8014d32:	623b      	str	r3, [r7, #32]
  return(result);
 8014d34:	6a3b      	ldr	r3, [r7, #32]
  ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014d36:	633b      	str	r3, [r7, #48]	@ 0x30
 8014d38:	2301      	movs	r3, #1
 8014d3a:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014d3c:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014d3e:	f383 8810 	msr	PRIMASK, r3
}
 8014d42:	46c0      	nop			@ (mov r8, r8)
 8014d44:	687b      	ldr	r3, [r7, #4]
 8014d46:	681b      	ldr	r3, [r3, #0]
 8014d48:	689a      	ldr	r2, [r3, #8]
 8014d4a:	687b      	ldr	r3, [r7, #4]
 8014d4c:	681b      	ldr	r3, [r3, #0]
 8014d4e:	2101      	movs	r1, #1
 8014d50:	438a      	bics	r2, r1
 8014d52:	609a      	str	r2, [r3, #8]
 8014d54:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8014d56:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014d58:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014d5a:	f383 8810 	msr	PRIMASK, r3
}
 8014d5e:	46c0      	nop			@ (mov r8, r8)

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014d60:	687b      	ldr	r3, [r7, #4]
 8014d62:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8014d64:	2b01      	cmp	r3, #1
 8014d66:	d118      	bne.n	8014d9a <UART_EndRxTransfer+0xa6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014d68:	f3ef 8310 	mrs	r3, PRIMASK
 8014d6c:	60bb      	str	r3, [r7, #8]
  return(result);
 8014d6e:	68bb      	ldr	r3, [r7, #8]
  {
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014d70:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8014d72:	2301      	movs	r3, #1
 8014d74:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014d76:	68fb      	ldr	r3, [r7, #12]
 8014d78:	f383 8810 	msr	PRIMASK, r3
}
 8014d7c:	46c0      	nop			@ (mov r8, r8)
 8014d7e:	687b      	ldr	r3, [r7, #4]
 8014d80:	681b      	ldr	r3, [r3, #0]
 8014d82:	681a      	ldr	r2, [r3, #0]
 8014d84:	687b      	ldr	r3, [r7, #4]
 8014d86:	681b      	ldr	r3, [r3, #0]
 8014d88:	2110      	movs	r1, #16
 8014d8a:	438a      	bics	r2, r1
 8014d8c:	601a      	str	r2, [r3, #0]
 8014d8e:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014d90:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014d92:	693b      	ldr	r3, [r7, #16]
 8014d94:	f383 8810 	msr	PRIMASK, r3
}
 8014d98:	46c0      	nop			@ (mov r8, r8)
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8014d9a:	687b      	ldr	r3, [r7, #4]
 8014d9c:	2280      	movs	r2, #128	@ 0x80
 8014d9e:	2120      	movs	r1, #32
 8014da0:	5099      	str	r1, [r3, r2]
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8014da2:	687b      	ldr	r3, [r7, #4]
 8014da4:	2200      	movs	r2, #0
 8014da6:	661a      	str	r2, [r3, #96]	@ 0x60

  /* Reset RxIsr function pointer */
  huart->RxISR = NULL;
 8014da8:	687b      	ldr	r3, [r7, #4]
 8014daa:	2200      	movs	r2, #0
 8014dac:	669a      	str	r2, [r3, #104]	@ 0x68
}
 8014dae:	46c0      	nop			@ (mov r8, r8)
 8014db0:	46bd      	mov	sp, r7
 8014db2:	b00e      	add	sp, #56	@ 0x38
 8014db4:	bd80      	pop	{r7, pc}
 8014db6:	46c0      	nop			@ (mov r8, r8)
 8014db8:	fffffedf 	.word	0xfffffedf

08014dbc <UART_DMATransmitCplt>:
  * @brief DMA UART transmit process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8014dbc:	b580      	push	{r7, lr}
 8014dbe:	b08c      	sub	sp, #48	@ 0x30
 8014dc0:	af00      	add	r7, sp, #0
 8014dc2:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8014dc4:	687b      	ldr	r3, [r7, #4]
 8014dc6:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014dc8:	62fb      	str	r3, [r7, #44]	@ 0x2c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8014dca:	687b      	ldr	r3, [r7, #4]
 8014dcc:	681b      	ldr	r3, [r3, #0]
 8014dce:	681b      	ldr	r3, [r3, #0]
 8014dd0:	2220      	movs	r2, #32
 8014dd2:	4013      	ands	r3, r2
 8014dd4:	d135      	bne.n	8014e42 <UART_DMATransmitCplt+0x86>
  {
    huart->TxXferCount = 0U;
 8014dd6:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014dd8:	2252      	movs	r2, #82	@ 0x52
 8014dda:	2100      	movs	r1, #0
 8014ddc:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014dde:	f3ef 8310 	mrs	r3, PRIMASK
 8014de2:	60fb      	str	r3, [r7, #12]
  return(result);
 8014de4:	68fb      	ldr	r3, [r7, #12]

    /* Disable the DMA transfer for transmit request by resetting the DMAT bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8014de6:	62bb      	str	r3, [r7, #40]	@ 0x28
 8014de8:	2301      	movs	r3, #1
 8014dea:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014dec:	693b      	ldr	r3, [r7, #16]
 8014dee:	f383 8810 	msr	PRIMASK, r3
}
 8014df2:	46c0      	nop			@ (mov r8, r8)
 8014df4:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014df6:	681b      	ldr	r3, [r3, #0]
 8014df8:	689a      	ldr	r2, [r3, #8]
 8014dfa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014dfc:	681b      	ldr	r3, [r3, #0]
 8014dfe:	2180      	movs	r1, #128	@ 0x80
 8014e00:	438a      	bics	r2, r1
 8014e02:	609a      	str	r2, [r3, #8]
 8014e04:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014e06:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014e08:	697b      	ldr	r3, [r7, #20]
 8014e0a:	f383 8810 	msr	PRIMASK, r3
}
 8014e0e:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014e10:	f3ef 8310 	mrs	r3, PRIMASK
 8014e14:	61bb      	str	r3, [r7, #24]
  return(result);
 8014e16:	69bb      	ldr	r3, [r7, #24]

    /* Enable the UART Transmit Complete Interrupt */
    ATOMIC_SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8014e18:	627b      	str	r3, [r7, #36]	@ 0x24
 8014e1a:	2301      	movs	r3, #1
 8014e1c:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014e1e:	69fb      	ldr	r3, [r7, #28]
 8014e20:	f383 8810 	msr	PRIMASK, r3
}
 8014e24:	46c0      	nop			@ (mov r8, r8)
 8014e26:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014e28:	681b      	ldr	r3, [r3, #0]
 8014e2a:	681a      	ldr	r2, [r3, #0]
 8014e2c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014e2e:	681b      	ldr	r3, [r3, #0]
 8014e30:	2140      	movs	r1, #64	@ 0x40
 8014e32:	430a      	orrs	r2, r1
 8014e34:	601a      	str	r2, [r3, #0]
 8014e36:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8014e38:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014e3a:	6a3b      	ldr	r3, [r7, #32]
 8014e3c:	f383 8810 	msr	PRIMASK, r3
}
 8014e40:	e006      	b.n	8014e50 <UART_DMATransmitCplt+0x94>
  /* DMA Circular mode */
  else
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Tx complete callback*/
    huart->TxCpltCallback(huart);
 8014e42:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014e44:	228c      	movs	r2, #140	@ 0x8c
 8014e46:	589b      	ldr	r3, [r3, r2]
 8014e48:	6afa      	ldr	r2, [r7, #44]	@ 0x2c
 8014e4a:	0010      	movs	r0, r2
 8014e4c:	4798      	blx	r3
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8014e4e:	46c0      	nop			@ (mov r8, r8)
 8014e50:	46c0      	nop			@ (mov r8, r8)
 8014e52:	46bd      	mov	sp, r7
 8014e54:	b00c      	add	sp, #48	@ 0x30
 8014e56:	bd80      	pop	{r7, pc}

08014e58 <UART_DMATxHalfCplt>:
  * @brief DMA UART transmit process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8014e58:	b580      	push	{r7, lr}
 8014e5a:	b084      	sub	sp, #16
 8014e5c:	af00      	add	r7, sp, #0
 8014e5e:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8014e60:	687b      	ldr	r3, [r7, #4]
 8014e62:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014e64:	60fb      	str	r3, [r7, #12]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx Half complete callback*/
  huart->TxHalfCpltCallback(huart);
 8014e66:	68fb      	ldr	r3, [r7, #12]
 8014e68:	2288      	movs	r2, #136	@ 0x88
 8014e6a:	589b      	ldr	r3, [r3, r2]
 8014e6c:	68fa      	ldr	r2, [r7, #12]
 8014e6e:	0010      	movs	r0, r2
 8014e70:	4798      	blx	r3
#else
  /*Call legacy weak Tx Half complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8014e72:	46c0      	nop			@ (mov r8, r8)
 8014e74:	46bd      	mov	sp, r7
 8014e76:	b004      	add	sp, #16
 8014e78:	bd80      	pop	{r7, pc}
	...

08014e7c <UART_DMAReceiveCplt>:
  * @brief DMA UART receive process complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8014e7c:	b580      	push	{r7, lr}
 8014e7e:	b094      	sub	sp, #80	@ 0x50
 8014e80:	af00      	add	r7, sp, #0
 8014e82:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8014e84:	687b      	ldr	r3, [r7, #4]
 8014e86:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014e88:	64fb      	str	r3, [r7, #76]	@ 0x4c

  /* DMA Normal mode */
  if (HAL_IS_BIT_CLR(hdma->Instance->CCR, DMA_CCR_CIRC))
 8014e8a:	687b      	ldr	r3, [r7, #4]
 8014e8c:	681b      	ldr	r3, [r3, #0]
 8014e8e:	681b      	ldr	r3, [r3, #0]
 8014e90:	2220      	movs	r2, #32
 8014e92:	4013      	ands	r3, r2
 8014e94:	d16f      	bne.n	8014f76 <UART_DMAReceiveCplt+0xfa>
  {
    huart->RxXferCount = 0U;
 8014e96:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014e98:	225a      	movs	r2, #90	@ 0x5a
 8014e9a:	2100      	movs	r1, #0
 8014e9c:	5299      	strh	r1, [r3, r2]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014e9e:	f3ef 8310 	mrs	r3, PRIMASK
 8014ea2:	61bb      	str	r3, [r7, #24]
  return(result);
 8014ea4:	69bb      	ldr	r3, [r7, #24]

    /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
    ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8014ea6:	64bb      	str	r3, [r7, #72]	@ 0x48
 8014ea8:	2301      	movs	r3, #1
 8014eaa:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014eac:	69fb      	ldr	r3, [r7, #28]
 8014eae:	f383 8810 	msr	PRIMASK, r3
}
 8014eb2:	46c0      	nop			@ (mov r8, r8)
 8014eb4:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014eb6:	681b      	ldr	r3, [r3, #0]
 8014eb8:	681a      	ldr	r2, [r3, #0]
 8014eba:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014ebc:	681b      	ldr	r3, [r3, #0]
 8014ebe:	493b      	ldr	r1, [pc, #236]	@ (8014fac <UART_DMAReceiveCplt+0x130>)
 8014ec0:	400a      	ands	r2, r1
 8014ec2:	601a      	str	r2, [r3, #0]
 8014ec4:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8014ec6:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014ec8:	6a3b      	ldr	r3, [r7, #32]
 8014eca:	f383 8810 	msr	PRIMASK, r3
}
 8014ece:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014ed0:	f3ef 8310 	mrs	r3, PRIMASK
 8014ed4:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 8014ed6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8014ed8:	647b      	str	r3, [r7, #68]	@ 0x44
 8014eda:	2301      	movs	r3, #1
 8014edc:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014ede:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8014ee0:	f383 8810 	msr	PRIMASK, r3
}
 8014ee4:	46c0      	nop			@ (mov r8, r8)
 8014ee6:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014ee8:	681b      	ldr	r3, [r3, #0]
 8014eea:	689a      	ldr	r2, [r3, #8]
 8014eec:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014eee:	681b      	ldr	r3, [r3, #0]
 8014ef0:	2101      	movs	r1, #1
 8014ef2:	438a      	bics	r2, r1
 8014ef4:	609a      	str	r2, [r3, #8]
 8014ef6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8014ef8:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014efa:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8014efc:	f383 8810 	msr	PRIMASK, r3
}
 8014f00:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014f02:	f3ef 8310 	mrs	r3, PRIMASK
 8014f06:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 8014f08:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

    /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
       in the UART CR3 register */
    ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8014f0a:	643b      	str	r3, [r7, #64]	@ 0x40
 8014f0c:	2301      	movs	r3, #1
 8014f0e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014f10:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8014f12:	f383 8810 	msr	PRIMASK, r3
}
 8014f16:	46c0      	nop			@ (mov r8, r8)
 8014f18:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014f1a:	681b      	ldr	r3, [r3, #0]
 8014f1c:	689a      	ldr	r2, [r3, #8]
 8014f1e:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014f20:	681b      	ldr	r3, [r3, #0]
 8014f22:	2140      	movs	r1, #64	@ 0x40
 8014f24:	438a      	bics	r2, r1
 8014f26:	609a      	str	r2, [r3, #8]
 8014f28:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8014f2a:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014f2c:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 8014f2e:	f383 8810 	msr	PRIMASK, r3
}
 8014f32:	46c0      	nop			@ (mov r8, r8)

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8014f34:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014f36:	2280      	movs	r2, #128	@ 0x80
 8014f38:	2120      	movs	r1, #32
 8014f3a:	5099      	str	r1, [r3, r2]

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014f3c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014f3e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8014f40:	2b01      	cmp	r3, #1
 8014f42:	d118      	bne.n	8014f76 <UART_DMAReceiveCplt+0xfa>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8014f44:	f3ef 8310 	mrs	r3, PRIMASK
 8014f48:	60fb      	str	r3, [r7, #12]
  return(result);
 8014f4a:	68fb      	ldr	r3, [r7, #12]
    {
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8014f4c:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8014f4e:	2301      	movs	r3, #1
 8014f50:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014f52:	693b      	ldr	r3, [r7, #16]
 8014f54:	f383 8810 	msr	PRIMASK, r3
}
 8014f58:	46c0      	nop			@ (mov r8, r8)
 8014f5a:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014f5c:	681b      	ldr	r3, [r3, #0]
 8014f5e:	681a      	ldr	r2, [r3, #0]
 8014f60:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014f62:	681b      	ldr	r3, [r3, #0]
 8014f64:	2110      	movs	r1, #16
 8014f66:	438a      	bics	r2, r1
 8014f68:	601a      	str	r2, [r3, #0]
 8014f6a:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8014f6c:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8014f6e:	697b      	ldr	r3, [r7, #20]
 8014f70:	f383 8810 	msr	PRIMASK, r3
}
 8014f74:	46c0      	nop			@ (mov r8, r8)
    }
  }

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Transfer Complete */
  huart->RxEventType = HAL_UART_RXEVENT_TC;
 8014f76:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014f78:	2200      	movs	r2, #0
 8014f7a:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014f7c:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014f7e:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8014f80:	2b01      	cmp	r3, #1
 8014f82:	d109      	bne.n	8014f98 <UART_DMAReceiveCplt+0x11c>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
 8014f84:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014f86:	22ac      	movs	r2, #172	@ 0xac
 8014f88:	589b      	ldr	r3, [r3, r2]
 8014f8a:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8014f8c:	2158      	movs	r1, #88	@ 0x58
 8014f8e:	5a51      	ldrh	r1, [r2, r1]
 8014f90:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8014f92:	0010      	movs	r0, r2
 8014f94:	4798      	blx	r3
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8014f96:	e005      	b.n	8014fa4 <UART_DMAReceiveCplt+0x128>
    huart->RxCpltCallback(huart);
 8014f98:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8014f9a:	2294      	movs	r2, #148	@ 0x94
 8014f9c:	589b      	ldr	r3, [r3, r2]
 8014f9e:	6cfa      	ldr	r2, [r7, #76]	@ 0x4c
 8014fa0:	0010      	movs	r0, r2
 8014fa2:	4798      	blx	r3
}
 8014fa4:	46c0      	nop			@ (mov r8, r8)
 8014fa6:	46bd      	mov	sp, r7
 8014fa8:	b014      	add	sp, #80	@ 0x50
 8014faa:	bd80      	pop	{r7, pc}
 8014fac:	fffffeff 	.word	0xfffffeff

08014fb0 <UART_DMARxHalfCplt>:
  * @brief DMA UART receive process half complete callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8014fb0:	b580      	push	{r7, lr}
 8014fb2:	b084      	sub	sp, #16
 8014fb4:	af00      	add	r7, sp, #0
 8014fb6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8014fb8:	687b      	ldr	r3, [r7, #4]
 8014fba:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8014fbc:	60fb      	str	r3, [r7, #12]

  /* Initialize type of RxEvent that correspond to RxEvent callback execution;
     In this case, Rx Event type is Half Transfer */
  huart->RxEventType = HAL_UART_RXEVENT_HT;
 8014fbe:	68fb      	ldr	r3, [r7, #12]
 8014fc0:	2201      	movs	r2, #1
 8014fc2:	665a      	str	r2, [r3, #100]	@ 0x64

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8014fc4:	68fb      	ldr	r3, [r7, #12]
 8014fc6:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 8014fc8:	2b01      	cmp	r3, #1
 8014fca:	d10b      	bne.n	8014fe4 <UART_DMARxHalfCplt+0x34>
  {
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize / 2U);
 8014fcc:	68fb      	ldr	r3, [r7, #12]
 8014fce:	22ac      	movs	r2, #172	@ 0xac
 8014fd0:	589b      	ldr	r3, [r3, r2]
 8014fd2:	68fa      	ldr	r2, [r7, #12]
 8014fd4:	2158      	movs	r1, #88	@ 0x58
 8014fd6:	5a52      	ldrh	r2, [r2, r1]
 8014fd8:	0852      	lsrs	r2, r2, #1
 8014fda:	b291      	uxth	r1, r2
 8014fdc:	68fa      	ldr	r2, [r7, #12]
 8014fde:	0010      	movs	r0, r2
 8014fe0:	4798      	blx	r3
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8014fe2:	e005      	b.n	8014ff0 <UART_DMARxHalfCplt+0x40>
    huart->RxHalfCpltCallback(huart);
 8014fe4:	68fb      	ldr	r3, [r7, #12]
 8014fe6:	2290      	movs	r2, #144	@ 0x90
 8014fe8:	589b      	ldr	r3, [r3, r2]
 8014fea:	68fa      	ldr	r2, [r7, #12]
 8014fec:	0010      	movs	r0, r2
 8014fee:	4798      	blx	r3
}
 8014ff0:	46c0      	nop			@ (mov r8, r8)
 8014ff2:	46bd      	mov	sp, r7
 8014ff4:	b004      	add	sp, #16
 8014ff6:	bd80      	pop	{r7, pc}

08014ff8 <UART_DMAError>:
  * @brief DMA UART communication error callback.
  * @param hdma DMA handle.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8014ff8:	b580      	push	{r7, lr}
 8014ffa:	b086      	sub	sp, #24
 8014ffc:	af00      	add	r7, sp, #0
 8014ffe:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8015000:	687b      	ldr	r3, [r7, #4]
 8015002:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 8015004:	617b      	str	r3, [r7, #20]

  const HAL_UART_StateTypeDef gstate = huart->gState;
 8015006:	697b      	ldr	r3, [r7, #20]
 8015008:	6fdb      	ldr	r3, [r3, #124]	@ 0x7c
 801500a:	613b      	str	r3, [r7, #16]
  const HAL_UART_StateTypeDef rxstate = huart->RxState;
 801500c:	697b      	ldr	r3, [r7, #20]
 801500e:	2280      	movs	r2, #128	@ 0x80
 8015010:	589b      	ldr	r3, [r3, r2]
 8015012:	60fb      	str	r3, [r7, #12]

  /* Stop UART DMA Tx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT)) &&
 8015014:	697b      	ldr	r3, [r7, #20]
 8015016:	681b      	ldr	r3, [r3, #0]
 8015018:	689b      	ldr	r3, [r3, #8]
 801501a:	2280      	movs	r2, #128	@ 0x80
 801501c:	4013      	ands	r3, r2
 801501e:	2b80      	cmp	r3, #128	@ 0x80
 8015020:	d10a      	bne.n	8015038 <UART_DMAError+0x40>
 8015022:	693b      	ldr	r3, [r7, #16]
 8015024:	2b21      	cmp	r3, #33	@ 0x21
 8015026:	d107      	bne.n	8015038 <UART_DMAError+0x40>
      (gstate == HAL_UART_STATE_BUSY_TX))
  {
    huart->TxXferCount = 0U;
 8015028:	697b      	ldr	r3, [r7, #20]
 801502a:	2252      	movs	r2, #82	@ 0x52
 801502c:	2100      	movs	r1, #0
 801502e:	5299      	strh	r1, [r3, r2]
    UART_EndTxTransfer(huart);
 8015030:	697b      	ldr	r3, [r7, #20]
 8015032:	0018      	movs	r0, r3
 8015034:	f7ff fe3a 	bl	8014cac <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  if ((HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR)) &&
 8015038:	697b      	ldr	r3, [r7, #20]
 801503a:	681b      	ldr	r3, [r3, #0]
 801503c:	689b      	ldr	r3, [r3, #8]
 801503e:	2240      	movs	r2, #64	@ 0x40
 8015040:	4013      	ands	r3, r2
 8015042:	2b40      	cmp	r3, #64	@ 0x40
 8015044:	d10a      	bne.n	801505c <UART_DMAError+0x64>
 8015046:	68fb      	ldr	r3, [r7, #12]
 8015048:	2b22      	cmp	r3, #34	@ 0x22
 801504a:	d107      	bne.n	801505c <UART_DMAError+0x64>
      (rxstate == HAL_UART_STATE_BUSY_RX))
  {
    huart->RxXferCount = 0U;
 801504c:	697b      	ldr	r3, [r7, #20]
 801504e:	225a      	movs	r2, #90	@ 0x5a
 8015050:	2100      	movs	r1, #0
 8015052:	5299      	strh	r1, [r3, r2]
    UART_EndRxTransfer(huart);
 8015054:	697b      	ldr	r3, [r7, #20]
 8015056:	0018      	movs	r0, r3
 8015058:	f7ff fe4c 	bl	8014cf4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 801505c:	697b      	ldr	r3, [r7, #20]
 801505e:	2284      	movs	r2, #132	@ 0x84
 8015060:	589b      	ldr	r3, [r3, r2]
 8015062:	2210      	movs	r2, #16
 8015064:	431a      	orrs	r2, r3
 8015066:	697b      	ldr	r3, [r7, #20]
 8015068:	2184      	movs	r1, #132	@ 0x84
 801506a:	505a      	str	r2, [r3, r1]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 801506c:	697b      	ldr	r3, [r7, #20]
 801506e:	2298      	movs	r2, #152	@ 0x98
 8015070:	589b      	ldr	r3, [r3, r2]
 8015072:	697a      	ldr	r2, [r7, #20]
 8015074:	0010      	movs	r0, r2
 8015076:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8015078:	46c0      	nop			@ (mov r8, r8)
 801507a:	46bd      	mov	sp, r7
 801507c:	b006      	add	sp, #24
 801507e:	bd80      	pop	{r7, pc}

08015080 <UART_DMAAbortOnError>:
  *         (To be called at end of DMA Abort procedure following error occurrence).
  * @param  hdma DMA handle.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8015080:	b580      	push	{r7, lr}
 8015082:	b084      	sub	sp, #16
 8015084:	af00      	add	r7, sp, #0
 8015086:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)(hdma->Parent);
 8015088:	687b      	ldr	r3, [r7, #4]
 801508a:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 801508c:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0U;
 801508e:	68fb      	ldr	r3, [r7, #12]
 8015090:	225a      	movs	r2, #90	@ 0x5a
 8015092:	2100      	movs	r1, #0
 8015094:	5299      	strh	r1, [r3, r2]
  huart->TxXferCount = 0U;
 8015096:	68fb      	ldr	r3, [r7, #12]
 8015098:	2252      	movs	r2, #82	@ 0x52
 801509a:	2100      	movs	r1, #0
 801509c:	5299      	strh	r1, [r3, r2]

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
 801509e:	68fb      	ldr	r3, [r7, #12]
 80150a0:	2298      	movs	r2, #152	@ 0x98
 80150a2:	589b      	ldr	r3, [r3, r2]
 80150a4:	68fa      	ldr	r2, [r7, #12]
 80150a6:	0010      	movs	r0, r2
 80150a8:	4798      	blx	r3
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80150aa:	46c0      	nop			@ (mov r8, r8)
 80150ac:	46bd      	mov	sp, r7
 80150ae:	b004      	add	sp, #16
 80150b0:	bd80      	pop	{r7, pc}

080150b2 <UART_EndTransmit_IT>:
  * @param  huart pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80150b2:	b580      	push	{r7, lr}
 80150b4:	b086      	sub	sp, #24
 80150b6:	af00      	add	r7, sp, #0
 80150b8:	6078      	str	r0, [r7, #4]
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80150ba:	f3ef 8310 	mrs	r3, PRIMASK
 80150be:	60bb      	str	r3, [r7, #8]
  return(result);
 80150c0:	68bb      	ldr	r3, [r7, #8]
  /* Disable the UART Transmit Complete Interrupt */
  ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80150c2:	617b      	str	r3, [r7, #20]
 80150c4:	2301      	movs	r3, #1
 80150c6:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80150c8:	68fb      	ldr	r3, [r7, #12]
 80150ca:	f383 8810 	msr	PRIMASK, r3
}
 80150ce:	46c0      	nop			@ (mov r8, r8)
 80150d0:	687b      	ldr	r3, [r7, #4]
 80150d2:	681b      	ldr	r3, [r3, #0]
 80150d4:	681a      	ldr	r2, [r3, #0]
 80150d6:	687b      	ldr	r3, [r7, #4]
 80150d8:	681b      	ldr	r3, [r3, #0]
 80150da:	2140      	movs	r1, #64	@ 0x40
 80150dc:	438a      	bics	r2, r1
 80150de:	601a      	str	r2, [r3, #0]
 80150e0:	697b      	ldr	r3, [r7, #20]
 80150e2:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80150e4:	693b      	ldr	r3, [r7, #16]
 80150e6:	f383 8810 	msr	PRIMASK, r3
}
 80150ea:	46c0      	nop			@ (mov r8, r8)

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80150ec:	687b      	ldr	r3, [r7, #4]
 80150ee:	2220      	movs	r2, #32
 80150f0:	67da      	str	r2, [r3, #124]	@ 0x7c

  /* Cleat TxISR function pointer */
  huart->TxISR = NULL;
 80150f2:	687b      	ldr	r3, [r7, #4]
 80150f4:	2200      	movs	r2, #0
 80150f6:	66da      	str	r2, [r3, #108]	@ 0x6c

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
 80150f8:	687b      	ldr	r3, [r7, #4]
 80150fa:	228c      	movs	r2, #140	@ 0x8c
 80150fc:	589b      	ldr	r3, [r3, r2]
 80150fe:	687a      	ldr	r2, [r7, #4]
 8015100:	0010      	movs	r0, r2
 8015102:	4798      	blx	r3
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8015104:	46c0      	nop			@ (mov r8, r8)
 8015106:	46bd      	mov	sp, r7
 8015108:	b006      	add	sp, #24
 801510a:	bd80      	pop	{r7, pc}

0801510c <UART_RxISR_8BIT>:
  * @brief RX interrupt handler for 7 or 8 bits data word length .
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_8BIT(UART_HandleTypeDef *huart)
{
 801510c:	b580      	push	{r7, lr}
 801510e:	b094      	sub	sp, #80	@ 0x50
 8015110:	af00      	add	r7, sp, #0
 8015112:	6078      	str	r0, [r7, #4]
  uint16_t uhMask = huart->Mask;
 8015114:	204e      	movs	r0, #78	@ 0x4e
 8015116:	183b      	adds	r3, r7, r0
 8015118:	687a      	ldr	r2, [r7, #4]
 801511a:	215c      	movs	r1, #92	@ 0x5c
 801511c:	5a52      	ldrh	r2, [r2, r1]
 801511e:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8015120:	687b      	ldr	r3, [r7, #4]
 8015122:	2280      	movs	r2, #128	@ 0x80
 8015124:	589b      	ldr	r3, [r3, r2]
 8015126:	2b22      	cmp	r3, #34	@ 0x22
 8015128:	d000      	beq.n	801512c <UART_RxISR_8BIT+0x20>
 801512a:	e0c2      	b.n	80152b2 <UART_RxISR_8BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 801512c:	687b      	ldr	r3, [r7, #4]
 801512e:	681b      	ldr	r3, [r3, #0]
 8015130:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 8015132:	214c      	movs	r1, #76	@ 0x4c
 8015134:	187b      	adds	r3, r7, r1
 8015136:	801a      	strh	r2, [r3, #0]
    *huart->pRxBuffPtr = (uint8_t)(uhdata & (uint8_t)uhMask);
 8015138:	187b      	adds	r3, r7, r1
 801513a:	881b      	ldrh	r3, [r3, #0]
 801513c:	b2da      	uxtb	r2, r3
 801513e:	183b      	adds	r3, r7, r0
 8015140:	881b      	ldrh	r3, [r3, #0]
 8015142:	b2d9      	uxtb	r1, r3
 8015144:	687b      	ldr	r3, [r7, #4]
 8015146:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015148:	400a      	ands	r2, r1
 801514a:	b2d2      	uxtb	r2, r2
 801514c:	701a      	strb	r2, [r3, #0]
    huart->pRxBuffPtr++;
 801514e:	687b      	ldr	r3, [r7, #4]
 8015150:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015152:	1c5a      	adds	r2, r3, #1
 8015154:	687b      	ldr	r3, [r7, #4]
 8015156:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8015158:	687b      	ldr	r3, [r7, #4]
 801515a:	225a      	movs	r2, #90	@ 0x5a
 801515c:	5a9b      	ldrh	r3, [r3, r2]
 801515e:	b29b      	uxth	r3, r3
 8015160:	3b01      	subs	r3, #1
 8015162:	b299      	uxth	r1, r3
 8015164:	687b      	ldr	r3, [r7, #4]
 8015166:	225a      	movs	r2, #90	@ 0x5a
 8015168:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 801516a:	687b      	ldr	r3, [r7, #4]
 801516c:	225a      	movs	r2, #90	@ 0x5a
 801516e:	5a9b      	ldrh	r3, [r3, r2]
 8015170:	b29b      	uxth	r3, r3
 8015172:	2b00      	cmp	r3, #0
 8015174:	d000      	beq.n	8015178 <UART_RxISR_8BIT+0x6c>
 8015176:	e0a4      	b.n	80152c2 <UART_RxISR_8BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015178:	f3ef 8310 	mrs	r3, PRIMASK
 801517c:	627b      	str	r3, [r7, #36]	@ 0x24
  return(result);
 801517e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupts */
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8015180:	64bb      	str	r3, [r7, #72]	@ 0x48
 8015182:	2301      	movs	r3, #1
 8015184:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015186:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015188:	f383 8810 	msr	PRIMASK, r3
}
 801518c:	46c0      	nop			@ (mov r8, r8)
 801518e:	687b      	ldr	r3, [r7, #4]
 8015190:	681b      	ldr	r3, [r3, #0]
 8015192:	681a      	ldr	r2, [r3, #0]
 8015194:	687b      	ldr	r3, [r7, #4]
 8015196:	681b      	ldr	r3, [r3, #0]
 8015198:	494c      	ldr	r1, [pc, #304]	@ (80152cc <UART_RxISR_8BIT+0x1c0>)
 801519a:	400a      	ands	r2, r1
 801519c:	601a      	str	r2, [r3, #0]
 801519e:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 80151a0:	62fb      	str	r3, [r7, #44]	@ 0x2c
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80151a2:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 80151a4:	f383 8810 	msr	PRIMASK, r3
}
 80151a8:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80151aa:	f3ef 8310 	mrs	r3, PRIMASK
 80151ae:	633b      	str	r3, [r7, #48]	@ 0x30
  return(result);
 80151b0:	6b3b      	ldr	r3, [r7, #48]	@ 0x30

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80151b2:	647b      	str	r3, [r7, #68]	@ 0x44
 80151b4:	2301      	movs	r3, #1
 80151b6:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80151b8:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80151ba:	f383 8810 	msr	PRIMASK, r3
}
 80151be:	46c0      	nop			@ (mov r8, r8)
 80151c0:	687b      	ldr	r3, [r7, #4]
 80151c2:	681b      	ldr	r3, [r3, #0]
 80151c4:	689a      	ldr	r2, [r3, #8]
 80151c6:	687b      	ldr	r3, [r7, #4]
 80151c8:	681b      	ldr	r3, [r3, #0]
 80151ca:	2101      	movs	r1, #1
 80151cc:	438a      	bics	r2, r1
 80151ce:	609a      	str	r2, [r3, #8]
 80151d0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80151d2:	63bb      	str	r3, [r7, #56]	@ 0x38
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80151d4:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80151d6:	f383 8810 	msr	PRIMASK, r3
}
 80151da:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80151dc:	687b      	ldr	r3, [r7, #4]
 80151de:	2280      	movs	r2, #128	@ 0x80
 80151e0:	2120      	movs	r1, #32
 80151e2:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80151e4:	687b      	ldr	r3, [r7, #4]
 80151e6:	2200      	movs	r2, #0
 80151e8:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80151ea:	687b      	ldr	r3, [r7, #4]
 80151ec:	2200      	movs	r2, #0
 80151ee:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80151f0:	687b      	ldr	r3, [r7, #4]
 80151f2:	681b      	ldr	r3, [r3, #0]
 80151f4:	4a36      	ldr	r2, [pc, #216]	@ (80152d0 <UART_RxISR_8BIT+0x1c4>)
 80151f6:	4293      	cmp	r3, r2
 80151f8:	d01f      	beq.n	801523a <UART_RxISR_8BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80151fa:	687b      	ldr	r3, [r7, #4]
 80151fc:	681b      	ldr	r3, [r3, #0]
 80151fe:	685a      	ldr	r2, [r3, #4]
 8015200:	2380      	movs	r3, #128	@ 0x80
 8015202:	041b      	lsls	r3, r3, #16
 8015204:	4013      	ands	r3, r2
 8015206:	d018      	beq.n	801523a <UART_RxISR_8BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015208:	f3ef 8310 	mrs	r3, PRIMASK
 801520c:	61bb      	str	r3, [r7, #24]
  return(result);
 801520e:	69bb      	ldr	r3, [r7, #24]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 8015210:	643b      	str	r3, [r7, #64]	@ 0x40
 8015212:	2301      	movs	r3, #1
 8015214:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015216:	69fb      	ldr	r3, [r7, #28]
 8015218:	f383 8810 	msr	PRIMASK, r3
}
 801521c:	46c0      	nop			@ (mov r8, r8)
 801521e:	687b      	ldr	r3, [r7, #4]
 8015220:	681b      	ldr	r3, [r3, #0]
 8015222:	681a      	ldr	r2, [r3, #0]
 8015224:	687b      	ldr	r3, [r7, #4]
 8015226:	681b      	ldr	r3, [r3, #0]
 8015228:	492a      	ldr	r1, [pc, #168]	@ (80152d4 <UART_RxISR_8BIT+0x1c8>)
 801522a:	400a      	ands	r2, r1
 801522c:	601a      	str	r2, [r3, #0]
 801522e:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 8015230:	623b      	str	r3, [r7, #32]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015232:	6a3b      	ldr	r3, [r7, #32]
 8015234:	f383 8810 	msr	PRIMASK, r3
}
 8015238:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 801523a:	687b      	ldr	r3, [r7, #4]
 801523c:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801523e:	2b01      	cmp	r3, #1
 8015240:	d130      	bne.n	80152a4 <UART_RxISR_8BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8015242:	687b      	ldr	r3, [r7, #4]
 8015244:	2200      	movs	r2, #0
 8015246:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015248:	f3ef 8310 	mrs	r3, PRIMASK
 801524c:	60fb      	str	r3, [r7, #12]
  return(result);
 801524e:	68fb      	ldr	r3, [r7, #12]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8015250:	63fb      	str	r3, [r7, #60]	@ 0x3c
 8015252:	2301      	movs	r3, #1
 8015254:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015256:	693b      	ldr	r3, [r7, #16]
 8015258:	f383 8810 	msr	PRIMASK, r3
}
 801525c:	46c0      	nop			@ (mov r8, r8)
 801525e:	687b      	ldr	r3, [r7, #4]
 8015260:	681b      	ldr	r3, [r3, #0]
 8015262:	681a      	ldr	r2, [r3, #0]
 8015264:	687b      	ldr	r3, [r7, #4]
 8015266:	681b      	ldr	r3, [r3, #0]
 8015268:	2110      	movs	r1, #16
 801526a:	438a      	bics	r2, r1
 801526c:	601a      	str	r2, [r3, #0]
 801526e:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 8015270:	617b      	str	r3, [r7, #20]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015272:	697b      	ldr	r3, [r7, #20]
 8015274:	f383 8810 	msr	PRIMASK, r3
}
 8015278:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 801527a:	687b      	ldr	r3, [r7, #4]
 801527c:	681b      	ldr	r3, [r3, #0]
 801527e:	69db      	ldr	r3, [r3, #28]
 8015280:	2210      	movs	r2, #16
 8015282:	4013      	ands	r3, r2
 8015284:	2b10      	cmp	r3, #16
 8015286:	d103      	bne.n	8015290 <UART_RxISR_8BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8015288:	687b      	ldr	r3, [r7, #4]
 801528a:	681b      	ldr	r3, [r3, #0]
 801528c:	2210      	movs	r2, #16
 801528e:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 8015290:	687b      	ldr	r3, [r7, #4]
 8015292:	22ac      	movs	r2, #172	@ 0xac
 8015294:	589b      	ldr	r3, [r3, r2]
 8015296:	687a      	ldr	r2, [r7, #4]
 8015298:	2158      	movs	r1, #88	@ 0x58
 801529a:	5a51      	ldrh	r1, [r2, r1]
 801529c:	687a      	ldr	r2, [r7, #4]
 801529e:	0010      	movs	r0, r2
 80152a0:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 80152a2:	e00e      	b.n	80152c2 <UART_RxISR_8BIT+0x1b6>
        huart->RxCpltCallback(huart);
 80152a4:	687b      	ldr	r3, [r7, #4]
 80152a6:	2294      	movs	r2, #148	@ 0x94
 80152a8:	589b      	ldr	r3, [r3, r2]
 80152aa:	687a      	ldr	r2, [r7, #4]
 80152ac:	0010      	movs	r0, r2
 80152ae:	4798      	blx	r3
}
 80152b0:	e007      	b.n	80152c2 <UART_RxISR_8BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 80152b2:	687b      	ldr	r3, [r7, #4]
 80152b4:	681b      	ldr	r3, [r3, #0]
 80152b6:	699a      	ldr	r2, [r3, #24]
 80152b8:	687b      	ldr	r3, [r7, #4]
 80152ba:	681b      	ldr	r3, [r3, #0]
 80152bc:	2108      	movs	r1, #8
 80152be:	430a      	orrs	r2, r1
 80152c0:	619a      	str	r2, [r3, #24]
}
 80152c2:	46c0      	nop			@ (mov r8, r8)
 80152c4:	46bd      	mov	sp, r7
 80152c6:	b014      	add	sp, #80	@ 0x50
 80152c8:	bd80      	pop	{r7, pc}
 80152ca:	46c0      	nop			@ (mov r8, r8)
 80152cc:	fffffedf 	.word	0xfffffedf
 80152d0:	40004800 	.word	0x40004800
 80152d4:	fbffffff 	.word	0xfbffffff

080152d8 <UART_RxISR_16BIT>:
  *         interruptions have been enabled by HAL_UART_Receive_IT()
  * @param huart UART handle.
  * @retval None
  */
static void UART_RxISR_16BIT(UART_HandleTypeDef *huart)
{
 80152d8:	b580      	push	{r7, lr}
 80152da:	b094      	sub	sp, #80	@ 0x50
 80152dc:	af00      	add	r7, sp, #0
 80152de:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;
  uint16_t uhMask = huart->Mask;
 80152e0:	204e      	movs	r0, #78	@ 0x4e
 80152e2:	183b      	adds	r3, r7, r0
 80152e4:	687a      	ldr	r2, [r7, #4]
 80152e6:	215c      	movs	r1, #92	@ 0x5c
 80152e8:	5a52      	ldrh	r2, [r2, r1]
 80152ea:	801a      	strh	r2, [r3, #0]
  uint16_t  uhdata;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80152ec:	687b      	ldr	r3, [r7, #4]
 80152ee:	2280      	movs	r2, #128	@ 0x80
 80152f0:	589b      	ldr	r3, [r3, r2]
 80152f2:	2b22      	cmp	r3, #34	@ 0x22
 80152f4:	d000      	beq.n	80152f8 <UART_RxISR_16BIT+0x20>
 80152f6:	e0c2      	b.n	801547e <UART_RxISR_16BIT+0x1a6>
  {
    uhdata = (uint16_t) READ_REG(huart->Instance->RDR);
 80152f8:	687b      	ldr	r3, [r7, #4]
 80152fa:	681b      	ldr	r3, [r3, #0]
 80152fc:	6a5a      	ldr	r2, [r3, #36]	@ 0x24
 80152fe:	214c      	movs	r1, #76	@ 0x4c
 8015300:	187b      	adds	r3, r7, r1
 8015302:	801a      	strh	r2, [r3, #0]
    tmp = (uint16_t *) huart->pRxBuffPtr ;
 8015304:	687b      	ldr	r3, [r7, #4]
 8015306:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 8015308:	64bb      	str	r3, [r7, #72]	@ 0x48
    *tmp = (uint16_t)(uhdata & uhMask);
 801530a:	187b      	adds	r3, r7, r1
 801530c:	183a      	adds	r2, r7, r0
 801530e:	881b      	ldrh	r3, [r3, #0]
 8015310:	8812      	ldrh	r2, [r2, #0]
 8015312:	4013      	ands	r3, r2
 8015314:	b29a      	uxth	r2, r3
 8015316:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8015318:	801a      	strh	r2, [r3, #0]
    huart->pRxBuffPtr += 2U;
 801531a:	687b      	ldr	r3, [r7, #4]
 801531c:	6d5b      	ldr	r3, [r3, #84]	@ 0x54
 801531e:	1c9a      	adds	r2, r3, #2
 8015320:	687b      	ldr	r3, [r7, #4]
 8015322:	655a      	str	r2, [r3, #84]	@ 0x54
    huart->RxXferCount--;
 8015324:	687b      	ldr	r3, [r7, #4]
 8015326:	225a      	movs	r2, #90	@ 0x5a
 8015328:	5a9b      	ldrh	r3, [r3, r2]
 801532a:	b29b      	uxth	r3, r3
 801532c:	3b01      	subs	r3, #1
 801532e:	b299      	uxth	r1, r3
 8015330:	687b      	ldr	r3, [r7, #4]
 8015332:	225a      	movs	r2, #90	@ 0x5a
 8015334:	5299      	strh	r1, [r3, r2]

    if (huart->RxXferCount == 0U)
 8015336:	687b      	ldr	r3, [r7, #4]
 8015338:	225a      	movs	r2, #90	@ 0x5a
 801533a:	5a9b      	ldrh	r3, [r3, r2]
 801533c:	b29b      	uxth	r3, r3
 801533e:	2b00      	cmp	r3, #0
 8015340:	d000      	beq.n	8015344 <UART_RxISR_16BIT+0x6c>
 8015342:	e0a4      	b.n	801548e <UART_RxISR_16BIT+0x1b6>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015344:	f3ef 8310 	mrs	r3, PRIMASK
 8015348:	623b      	str	r3, [r7, #32]
  return(result);
 801534a:	6a3b      	ldr	r3, [r7, #32]
    {
      /* Disable the UART Parity Error Interrupt and RXNE interrupt*/
      ATOMIC_CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 801534c:	647b      	str	r3, [r7, #68]	@ 0x44
 801534e:	2301      	movs	r3, #1
 8015350:	627b      	str	r3, [r7, #36]	@ 0x24
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015352:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015354:	f383 8810 	msr	PRIMASK, r3
}
 8015358:	46c0      	nop			@ (mov r8, r8)
 801535a:	687b      	ldr	r3, [r7, #4]
 801535c:	681b      	ldr	r3, [r3, #0]
 801535e:	681a      	ldr	r2, [r3, #0]
 8015360:	687b      	ldr	r3, [r7, #4]
 8015362:	681b      	ldr	r3, [r3, #0]
 8015364:	494c      	ldr	r1, [pc, #304]	@ (8015498 <UART_RxISR_16BIT+0x1c0>)
 8015366:	400a      	ands	r2, r1
 8015368:	601a      	str	r2, [r3, #0]
 801536a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801536c:	62bb      	str	r3, [r7, #40]	@ 0x28
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801536e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015370:	f383 8810 	msr	PRIMASK, r3
}
 8015374:	46c0      	nop			@ (mov r8, r8)
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015376:	f3ef 8310 	mrs	r3, PRIMASK
 801537a:	62fb      	str	r3, [r7, #44]	@ 0x2c
  return(result);
 801537c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      ATOMIC_CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 801537e:	643b      	str	r3, [r7, #64]	@ 0x40
 8015380:	2301      	movs	r3, #1
 8015382:	633b      	str	r3, [r7, #48]	@ 0x30
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015384:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015386:	f383 8810 	msr	PRIMASK, r3
}
 801538a:	46c0      	nop			@ (mov r8, r8)
 801538c:	687b      	ldr	r3, [r7, #4]
 801538e:	681b      	ldr	r3, [r3, #0]
 8015390:	689a      	ldr	r2, [r3, #8]
 8015392:	687b      	ldr	r3, [r7, #4]
 8015394:	681b      	ldr	r3, [r3, #0]
 8015396:	2101      	movs	r1, #1
 8015398:	438a      	bics	r2, r1
 801539a:	609a      	str	r2, [r3, #8]
 801539c:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801539e:	637b      	str	r3, [r7, #52]	@ 0x34
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80153a0:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80153a2:	f383 8810 	msr	PRIMASK, r3
}
 80153a6:	46c0      	nop			@ (mov r8, r8)

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80153a8:	687b      	ldr	r3, [r7, #4]
 80153aa:	2280      	movs	r2, #128	@ 0x80
 80153ac:	2120      	movs	r1, #32
 80153ae:	5099      	str	r1, [r3, r2]

      /* Clear RxISR function pointer */
      huart->RxISR = NULL;
 80153b0:	687b      	ldr	r3, [r7, #4]
 80153b2:	2200      	movs	r2, #0
 80153b4:	669a      	str	r2, [r3, #104]	@ 0x68

      /* Initialize type of RxEvent to Transfer Complete */
      huart->RxEventType = HAL_UART_RXEVENT_TC;
 80153b6:	687b      	ldr	r3, [r7, #4]
 80153b8:	2200      	movs	r2, #0
 80153ba:	665a      	str	r2, [r3, #100]	@ 0x64

      if (!(IS_LPUART_INSTANCE(huart->Instance)))
 80153bc:	687b      	ldr	r3, [r7, #4]
 80153be:	681b      	ldr	r3, [r3, #0]
 80153c0:	4a36      	ldr	r2, [pc, #216]	@ (801549c <UART_RxISR_16BIT+0x1c4>)
 80153c2:	4293      	cmp	r3, r2
 80153c4:	d01f      	beq.n	8015406 <UART_RxISR_16BIT+0x12e>
      {
        /* Check that USART RTOEN bit is set */
        if (READ_BIT(huart->Instance->CR2, USART_CR2_RTOEN) != 0U)
 80153c6:	687b      	ldr	r3, [r7, #4]
 80153c8:	681b      	ldr	r3, [r3, #0]
 80153ca:	685a      	ldr	r2, [r3, #4]
 80153cc:	2380      	movs	r3, #128	@ 0x80
 80153ce:	041b      	lsls	r3, r3, #16
 80153d0:	4013      	ands	r3, r2
 80153d2:	d018      	beq.n	8015406 <UART_RxISR_16BIT+0x12e>
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 80153d4:	f3ef 8310 	mrs	r3, PRIMASK
 80153d8:	617b      	str	r3, [r7, #20]
  return(result);
 80153da:	697b      	ldr	r3, [r7, #20]
        {
          /* Enable the UART Receiver Timeout Interrupt */
          ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_RTOIE);
 80153dc:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80153de:	2301      	movs	r3, #1
 80153e0:	61bb      	str	r3, [r7, #24]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80153e2:	69bb      	ldr	r3, [r7, #24]
 80153e4:	f383 8810 	msr	PRIMASK, r3
}
 80153e8:	46c0      	nop			@ (mov r8, r8)
 80153ea:	687b      	ldr	r3, [r7, #4]
 80153ec:	681b      	ldr	r3, [r3, #0]
 80153ee:	681a      	ldr	r2, [r3, #0]
 80153f0:	687b      	ldr	r3, [r7, #4]
 80153f2:	681b      	ldr	r3, [r3, #0]
 80153f4:	492a      	ldr	r1, [pc, #168]	@ (80154a0 <UART_RxISR_16BIT+0x1c8>)
 80153f6:	400a      	ands	r2, r1
 80153f8:	601a      	str	r2, [r3, #0]
 80153fa:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80153fc:	61fb      	str	r3, [r7, #28]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 80153fe:	69fb      	ldr	r3, [r7, #28]
 8015400:	f383 8810 	msr	PRIMASK, r3
}
 8015404:	46c0      	nop			@ (mov r8, r8)
        }
      }

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8015406:	687b      	ldr	r3, [r7, #4]
 8015408:	6e1b      	ldr	r3, [r3, #96]	@ 0x60
 801540a:	2b01      	cmp	r3, #1
 801540c:	d130      	bne.n	8015470 <UART_RxISR_16BIT+0x198>
      {
        /* Set reception type to Standard */
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 801540e:	687b      	ldr	r3, [r7, #4]
 8015410:	2200      	movs	r2, #0
 8015412:	661a      	str	r2, [r3, #96]	@ 0x60
  __ASM volatile ("MRS %0, primask" : "=r" (result) :: "memory");
 8015414:	f3ef 8310 	mrs	r3, PRIMASK
 8015418:	60bb      	str	r3, [r7, #8]
  return(result);
 801541a:	68bb      	ldr	r3, [r7, #8]

        /* Disable IDLE interrupt */
        ATOMIC_CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 801541c:	63bb      	str	r3, [r7, #56]	@ 0x38
 801541e:	2301      	movs	r3, #1
 8015420:	60fb      	str	r3, [r7, #12]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 8015422:	68fb      	ldr	r3, [r7, #12]
 8015424:	f383 8810 	msr	PRIMASK, r3
}
 8015428:	46c0      	nop			@ (mov r8, r8)
 801542a:	687b      	ldr	r3, [r7, #4]
 801542c:	681b      	ldr	r3, [r3, #0]
 801542e:	681a      	ldr	r2, [r3, #0]
 8015430:	687b      	ldr	r3, [r7, #4]
 8015432:	681b      	ldr	r3, [r3, #0]
 8015434:	2110      	movs	r1, #16
 8015436:	438a      	bics	r2, r1
 8015438:	601a      	str	r2, [r3, #0]
 801543a:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 801543c:	613b      	str	r3, [r7, #16]
  __ASM volatile ("MSR primask, %0" : : "r" (priMask) : "memory");
 801543e:	693b      	ldr	r3, [r7, #16]
 8015440:	f383 8810 	msr	PRIMASK, r3
}
 8015444:	46c0      	nop			@ (mov r8, r8)

        if (__HAL_UART_GET_FLAG(huart, UART_FLAG_IDLE) == SET)
 8015446:	687b      	ldr	r3, [r7, #4]
 8015448:	681b      	ldr	r3, [r3, #0]
 801544a:	69db      	ldr	r3, [r3, #28]
 801544c:	2210      	movs	r2, #16
 801544e:	4013      	ands	r3, r2
 8015450:	2b10      	cmp	r3, #16
 8015452:	d103      	bne.n	801545c <UART_RxISR_16BIT+0x184>
        {
          /* Clear IDLE Flag */
          __HAL_UART_CLEAR_FLAG(huart, UART_CLEAR_IDLEF);
 8015454:	687b      	ldr	r3, [r7, #4]
 8015456:	681b      	ldr	r3, [r3, #0]
 8015458:	2210      	movs	r2, #16
 801545a:	621a      	str	r2, [r3, #32]
        }

#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
 801545c:	687b      	ldr	r3, [r7, #4]
 801545e:	22ac      	movs	r2, #172	@ 0xac
 8015460:	589b      	ldr	r3, [r3, r2]
 8015462:	687a      	ldr	r2, [r7, #4]
 8015464:	2158      	movs	r1, #88	@ 0x58
 8015466:	5a51      	ldrh	r1, [r2, r1]
 8015468:	687a      	ldr	r2, [r7, #4]
 801546a:	0010      	movs	r0, r2
 801546c:	4798      	blx	r3
  else
  {
    /* Clear RXNE interrupt flag */
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
  }
}
 801546e:	e00e      	b.n	801548e <UART_RxISR_16BIT+0x1b6>
        huart->RxCpltCallback(huart);
 8015470:	687b      	ldr	r3, [r7, #4]
 8015472:	2294      	movs	r2, #148	@ 0x94
 8015474:	589b      	ldr	r3, [r3, r2]
 8015476:	687a      	ldr	r2, [r7, #4]
 8015478:	0010      	movs	r0, r2
 801547a:	4798      	blx	r3
}
 801547c:	e007      	b.n	801548e <UART_RxISR_16BIT+0x1b6>
    __HAL_UART_SEND_REQ(huart, UART_RXDATA_FLUSH_REQUEST);
 801547e:	687b      	ldr	r3, [r7, #4]
 8015480:	681b      	ldr	r3, [r3, #0]
 8015482:	699a      	ldr	r2, [r3, #24]
 8015484:	687b      	ldr	r3, [r7, #4]
 8015486:	681b      	ldr	r3, [r3, #0]
 8015488:	2108      	movs	r1, #8
 801548a:	430a      	orrs	r2, r1
 801548c:	619a      	str	r2, [r3, #24]
}
 801548e:	46c0      	nop			@ (mov r8, r8)
 8015490:	46bd      	mov	sp, r7
 8015492:	b014      	add	sp, #80	@ 0x50
 8015494:	bd80      	pop	{r7, pc}
 8015496:	46c0      	nop			@ (mov r8, r8)
 8015498:	fffffedf 	.word	0xfffffedf
 801549c:	40004800 	.word	0x40004800
 80154a0:	fbffffff 	.word	0xfbffffff

080154a4 <HAL_UARTEx_WakeupCallback>:
  * @brief UART wakeup from Stop mode callback.
  * @param huart UART handle.
  * @retval None
  */
__weak void HAL_UARTEx_WakeupCallback(UART_HandleTypeDef *huart)
{
 80154a4:	b580      	push	{r7, lr}
 80154a6:	b082      	sub	sp, #8
 80154a8:	af00      	add	r7, sp, #0
 80154aa:	6078      	str	r0, [r7, #4]
  UNUSED(huart);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_WakeupCallback can be implemented in the user file.
   */
}
 80154ac:	46c0      	nop			@ (mov r8, r8)
 80154ae:	46bd      	mov	sp, r7
 80154b0:	b002      	add	sp, #8
 80154b2:	bd80      	pop	{r7, pc}

080154b4 <USB_EnableGlobalInt>:
  *         Enables the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EnableGlobalInt(USB_TypeDef *USBx)
{
 80154b4:	b580      	push	{r7, lr}
 80154b6:	b084      	sub	sp, #16
 80154b8:	af00      	add	r7, sp, #0
 80154ba:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 80154bc:	687b      	ldr	r3, [r7, #4]
 80154be:	2244      	movs	r2, #68	@ 0x44
 80154c0:	2100      	movs	r1, #0
 80154c2:	5299      	strh	r1, [r3, r2]

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80154c4:	4b05      	ldr	r3, [pc, #20]	@ (80154dc <USB_EnableGlobalInt+0x28>)
 80154c6:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Set interrupt mask */
  USBx->CNTR = (uint16_t)winterruptmask;
 80154c8:	68fb      	ldr	r3, [r7, #12]
 80154ca:	b299      	uxth	r1, r3
 80154cc:	687b      	ldr	r3, [r7, #4]
 80154ce:	2240      	movs	r2, #64	@ 0x40
 80154d0:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80154d2:	2300      	movs	r3, #0
}
 80154d4:	0018      	movs	r0, r3
 80154d6:	46bd      	mov	sp, r7
 80154d8:	b004      	add	sp, #16
 80154da:	bd80      	pop	{r7, pc}
 80154dc:	0000bf80 	.word	0x0000bf80

080154e0 <USB_DisableGlobalInt>:
  *         Disable the controller's Global Int in the AHB Config reg
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DisableGlobalInt(USB_TypeDef *USBx)
{
 80154e0:	b580      	push	{r7, lr}
 80154e2:	b084      	sub	sp, #16
 80154e4:	af00      	add	r7, sp, #0
 80154e6:	6078      	str	r0, [r7, #4]
  uint32_t winterruptmask;

  /* Set winterruptmask variable */
  winterruptmask = USB_CNTR_CTRM  | USB_CNTR_WKUPM |
 80154e8:	4b09      	ldr	r3, [pc, #36]	@ (8015510 <USB_DisableGlobalInt+0x30>)
 80154ea:	60fb      	str	r3, [r7, #12]
                   USB_CNTR_SUSPM | USB_CNTR_ERRM |
                   USB_CNTR_SOFM | USB_CNTR_ESOFM |
                   USB_CNTR_RESETM | USB_CNTR_L1REQM;

  /* Clear interrupt mask */
  USBx->CNTR &= (uint16_t)(~winterruptmask);
 80154ec:	687b      	ldr	r3, [r7, #4]
 80154ee:	2240      	movs	r2, #64	@ 0x40
 80154f0:	5a9b      	ldrh	r3, [r3, r2]
 80154f2:	b29b      	uxth	r3, r3
 80154f4:	68fa      	ldr	r2, [r7, #12]
 80154f6:	b292      	uxth	r2, r2
 80154f8:	43d2      	mvns	r2, r2
 80154fa:	b292      	uxth	r2, r2
 80154fc:	4013      	ands	r3, r2
 80154fe:	b299      	uxth	r1, r3
 8015500:	687b      	ldr	r3, [r7, #4]
 8015502:	2240      	movs	r2, #64	@ 0x40
 8015504:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8015506:	2300      	movs	r3, #0
}
 8015508:	0018      	movs	r0, r3
 801550a:	46bd      	mov	sp, r7
 801550c:	b004      	add	sp, #16
 801550e:	bd80      	pop	{r7, pc}
 8015510:	0000bf80 	.word	0x0000bf80

08015514 <USB_DevInit>:
  * @param  cfg  pointer to a USB_CfgTypeDef structure that contains
  *         the configuration information for the specified USBx peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DevInit(USB_TypeDef *USBx, USB_CfgTypeDef cfg)
{
 8015514:	b084      	sub	sp, #16
 8015516:	b590      	push	{r4, r7, lr}
 8015518:	b083      	sub	sp, #12
 801551a:	af00      	add	r7, sp, #0
 801551c:	6078      	str	r0, [r7, #4]
 801551e:	2004      	movs	r0, #4
 8015520:	2410      	movs	r4, #16
 8015522:	1900      	adds	r0, r0, r4
 8015524:	2408      	movs	r4, #8
 8015526:	46a4      	mov	ip, r4
 8015528:	44bc      	add	ip, r7
 801552a:	4460      	add	r0, ip
 801552c:	6001      	str	r1, [r0, #0]
 801552e:	6042      	str	r2, [r0, #4]
 8015530:	6083      	str	r3, [r0, #8]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(cfg);

  /* Init Device */
  /* CNTR_FRES = 1 */
  USBx->CNTR = (uint16_t)USB_CNTR_FRES;
 8015532:	687b      	ldr	r3, [r7, #4]
 8015534:	2240      	movs	r2, #64	@ 0x40
 8015536:	2101      	movs	r1, #1
 8015538:	5299      	strh	r1, [r3, r2]

  /* CNTR_FRES = 0 */
  USBx->CNTR = 0U;
 801553a:	687b      	ldr	r3, [r7, #4]
 801553c:	2240      	movs	r2, #64	@ 0x40
 801553e:	2100      	movs	r1, #0
 8015540:	5299      	strh	r1, [r3, r2]

  /* Clear pending interrupts */
  USBx->ISTR = 0U;
 8015542:	687b      	ldr	r3, [r7, #4]
 8015544:	2244      	movs	r2, #68	@ 0x44
 8015546:	2100      	movs	r1, #0
 8015548:	5299      	strh	r1, [r3, r2]

  /*Set Btable Address*/
  USBx->BTABLE = BTABLE_ADDRESS;
 801554a:	687b      	ldr	r3, [r7, #4]
 801554c:	2250      	movs	r2, #80	@ 0x50
 801554e:	2100      	movs	r1, #0
 8015550:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 8015552:	2300      	movs	r3, #0
}
 8015554:	0018      	movs	r0, r3
 8015556:	46bd      	mov	sp, r7
 8015558:	b003      	add	sp, #12
 801555a:	bc90      	pop	{r4, r7}
 801555c:	bc08      	pop	{r3}
 801555e:	b004      	add	sp, #16
 8015560:	4718      	bx	r3
	...

08015564 <USB_ActivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_ActivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8015564:	b580      	push	{r7, lr}
 8015566:	b09c      	sub	sp, #112	@ 0x70
 8015568:	af00      	add	r7, sp, #0
 801556a:	6078      	str	r0, [r7, #4]
 801556c:	6039      	str	r1, [r7, #0]
  HAL_StatusTypeDef ret = HAL_OK;
 801556e:	236f      	movs	r3, #111	@ 0x6f
 8015570:	18fb      	adds	r3, r7, r3
 8015572:	2200      	movs	r2, #0
 8015574:	701a      	strb	r2, [r3, #0]
  uint16_t wEpRegVal;

  wEpRegVal = PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_T_MASK;
 8015576:	687a      	ldr	r2, [r7, #4]
 8015578:	683b      	ldr	r3, [r7, #0]
 801557a:	781b      	ldrb	r3, [r3, #0]
 801557c:	009b      	lsls	r3, r3, #2
 801557e:	18d3      	adds	r3, r2, r3
 8015580:	881b      	ldrh	r3, [r3, #0]
 8015582:	b29a      	uxth	r2, r3
 8015584:	236c      	movs	r3, #108	@ 0x6c
 8015586:	18fb      	adds	r3, r7, r3
 8015588:	49a3      	ldr	r1, [pc, #652]	@ (8015818 <USB_ActivateEndpoint+0x2b4>)
 801558a:	400a      	ands	r2, r1
 801558c:	801a      	strh	r2, [r3, #0]

  /* initialize Endpoint */
  switch (ep->type)
 801558e:	683b      	ldr	r3, [r7, #0]
 8015590:	78db      	ldrb	r3, [r3, #3]
 8015592:	2b03      	cmp	r3, #3
 8015594:	d017      	beq.n	80155c6 <USB_ActivateEndpoint+0x62>
 8015596:	dc28      	bgt.n	80155ea <USB_ActivateEndpoint+0x86>
 8015598:	2b02      	cmp	r3, #2
 801559a:	d00e      	beq.n	80155ba <USB_ActivateEndpoint+0x56>
 801559c:	dc25      	bgt.n	80155ea <USB_ActivateEndpoint+0x86>
 801559e:	2b00      	cmp	r3, #0
 80155a0:	d002      	beq.n	80155a8 <USB_ActivateEndpoint+0x44>
 80155a2:	2b01      	cmp	r3, #1
 80155a4:	d018      	beq.n	80155d8 <USB_ActivateEndpoint+0x74>
 80155a6:	e020      	b.n	80155ea <USB_ActivateEndpoint+0x86>
  {
    case EP_TYPE_CTRL:
      wEpRegVal |= USB_EP_CONTROL;
 80155a8:	226c      	movs	r2, #108	@ 0x6c
 80155aa:	18bb      	adds	r3, r7, r2
 80155ac:	18ba      	adds	r2, r7, r2
 80155ae:	8812      	ldrh	r2, [r2, #0]
 80155b0:	2180      	movs	r1, #128	@ 0x80
 80155b2:	0089      	lsls	r1, r1, #2
 80155b4:	430a      	orrs	r2, r1
 80155b6:	801a      	strh	r2, [r3, #0]
      break;
 80155b8:	e01c      	b.n	80155f4 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_BULK:
      wEpRegVal |= USB_EP_BULK;
 80155ba:	226c      	movs	r2, #108	@ 0x6c
 80155bc:	18bb      	adds	r3, r7, r2
 80155be:	18ba      	adds	r2, r7, r2
 80155c0:	8812      	ldrh	r2, [r2, #0]
 80155c2:	801a      	strh	r2, [r3, #0]
      break;
 80155c4:	e016      	b.n	80155f4 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_INTR:
      wEpRegVal |= USB_EP_INTERRUPT;
 80155c6:	226c      	movs	r2, #108	@ 0x6c
 80155c8:	18bb      	adds	r3, r7, r2
 80155ca:	18ba      	adds	r2, r7, r2
 80155cc:	8812      	ldrh	r2, [r2, #0]
 80155ce:	21c0      	movs	r1, #192	@ 0xc0
 80155d0:	00c9      	lsls	r1, r1, #3
 80155d2:	430a      	orrs	r2, r1
 80155d4:	801a      	strh	r2, [r3, #0]
      break;
 80155d6:	e00d      	b.n	80155f4 <USB_ActivateEndpoint+0x90>

    case EP_TYPE_ISOC:
      wEpRegVal |= USB_EP_ISOCHRONOUS;
 80155d8:	226c      	movs	r2, #108	@ 0x6c
 80155da:	18bb      	adds	r3, r7, r2
 80155dc:	18ba      	adds	r2, r7, r2
 80155de:	8812      	ldrh	r2, [r2, #0]
 80155e0:	2180      	movs	r1, #128	@ 0x80
 80155e2:	00c9      	lsls	r1, r1, #3
 80155e4:	430a      	orrs	r2, r1
 80155e6:	801a      	strh	r2, [r3, #0]
      break;
 80155e8:	e004      	b.n	80155f4 <USB_ActivateEndpoint+0x90>

    default:
      ret = HAL_ERROR;
 80155ea:	236f      	movs	r3, #111	@ 0x6f
 80155ec:	18fb      	adds	r3, r7, r3
 80155ee:	2201      	movs	r2, #1
 80155f0:	701a      	strb	r2, [r3, #0]
      break;
 80155f2:	46c0      	nop			@ (mov r8, r8)
  }

  PCD_SET_ENDPOINT(USBx, ep->num, (wEpRegVal | USB_EP_CTR_RX | USB_EP_CTR_TX));
 80155f4:	687a      	ldr	r2, [r7, #4]
 80155f6:	683b      	ldr	r3, [r7, #0]
 80155f8:	781b      	ldrb	r3, [r3, #0]
 80155fa:	009b      	lsls	r3, r3, #2
 80155fc:	18d3      	adds	r3, r2, r3
 80155fe:	226c      	movs	r2, #108	@ 0x6c
 8015600:	18ba      	adds	r2, r7, r2
 8015602:	8812      	ldrh	r2, [r2, #0]
 8015604:	4985      	ldr	r1, [pc, #532]	@ (801581c <USB_ActivateEndpoint+0x2b8>)
 8015606:	430a      	orrs	r2, r1
 8015608:	b292      	uxth	r2, r2
 801560a:	801a      	strh	r2, [r3, #0]

  PCD_SET_EP_ADDRESS(USBx, ep->num, ep->num);
 801560c:	687a      	ldr	r2, [r7, #4]
 801560e:	683b      	ldr	r3, [r7, #0]
 8015610:	781b      	ldrb	r3, [r3, #0]
 8015612:	009b      	lsls	r3, r3, #2
 8015614:	18d3      	adds	r3, r2, r3
 8015616:	881b      	ldrh	r3, [r3, #0]
 8015618:	b29b      	uxth	r3, r3
 801561a:	b21b      	sxth	r3, r3
 801561c:	4a80      	ldr	r2, [pc, #512]	@ (8015820 <USB_ActivateEndpoint+0x2bc>)
 801561e:	4013      	ands	r3, r2
 8015620:	b21a      	sxth	r2, r3
 8015622:	683b      	ldr	r3, [r7, #0]
 8015624:	781b      	ldrb	r3, [r3, #0]
 8015626:	b21b      	sxth	r3, r3
 8015628:	4313      	orrs	r3, r2
 801562a:	b21a      	sxth	r2, r3
 801562c:	2166      	movs	r1, #102	@ 0x66
 801562e:	187b      	adds	r3, r7, r1
 8015630:	801a      	strh	r2, [r3, #0]
 8015632:	687a      	ldr	r2, [r7, #4]
 8015634:	683b      	ldr	r3, [r7, #0]
 8015636:	781b      	ldrb	r3, [r3, #0]
 8015638:	009b      	lsls	r3, r3, #2
 801563a:	18d3      	adds	r3, r2, r3
 801563c:	187a      	adds	r2, r7, r1
 801563e:	8812      	ldrh	r2, [r2, #0]
 8015640:	4976      	ldr	r1, [pc, #472]	@ (801581c <USB_ActivateEndpoint+0x2b8>)
 8015642:	430a      	orrs	r2, r1
 8015644:	b292      	uxth	r2, r2
 8015646:	801a      	strh	r2, [r3, #0]

  if (ep->doublebuffer == 0U)
 8015648:	683b      	ldr	r3, [r7, #0]
 801564a:	7b1b      	ldrb	r3, [r3, #12]
 801564c:	2b00      	cmp	r3, #0
 801564e:	d000      	beq.n	8015652 <USB_ActivateEndpoint+0xee>
 8015650:	e178      	b.n	8015944 <USB_ActivateEndpoint+0x3e0>
  {
    if (ep->is_in != 0U)
 8015652:	683b      	ldr	r3, [r7, #0]
 8015654:	785b      	ldrb	r3, [r3, #1]
 8015656:	2b00      	cmp	r3, #0
 8015658:	d100      	bne.n	801565c <USB_ActivateEndpoint+0xf8>
 801565a:	e07a      	b.n	8015752 <USB_ActivateEndpoint+0x1ee>
    {
      /*Set the endpoint Transmit buffer address */
      PCD_SET_EP_TX_ADDRESS(USBx, ep->num, ep->pmaadress);
 801565c:	687b      	ldr	r3, [r7, #4]
 801565e:	61bb      	str	r3, [r7, #24]
 8015660:	687b      	ldr	r3, [r7, #4]
 8015662:	2250      	movs	r2, #80	@ 0x50
 8015664:	5a9b      	ldrh	r3, [r3, r2]
 8015666:	b29b      	uxth	r3, r3
 8015668:	001a      	movs	r2, r3
 801566a:	69bb      	ldr	r3, [r7, #24]
 801566c:	189b      	adds	r3, r3, r2
 801566e:	61bb      	str	r3, [r7, #24]
 8015670:	683b      	ldr	r3, [r7, #0]
 8015672:	781b      	ldrb	r3, [r3, #0]
 8015674:	00da      	lsls	r2, r3, #3
 8015676:	69bb      	ldr	r3, [r7, #24]
 8015678:	18d3      	adds	r3, r2, r3
 801567a:	2280      	movs	r2, #128	@ 0x80
 801567c:	00d2      	lsls	r2, r2, #3
 801567e:	4694      	mov	ip, r2
 8015680:	4463      	add	r3, ip
 8015682:	617b      	str	r3, [r7, #20]
 8015684:	683b      	ldr	r3, [r7, #0]
 8015686:	88db      	ldrh	r3, [r3, #6]
 8015688:	085b      	lsrs	r3, r3, #1
 801568a:	b29b      	uxth	r3, r3
 801568c:	18db      	adds	r3, r3, r3
 801568e:	b29a      	uxth	r2, r3
 8015690:	697b      	ldr	r3, [r7, #20]
 8015692:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8015694:	687a      	ldr	r2, [r7, #4]
 8015696:	683b      	ldr	r3, [r7, #0]
 8015698:	781b      	ldrb	r3, [r3, #0]
 801569a:	009b      	lsls	r3, r3, #2
 801569c:	18d2      	adds	r2, r2, r3
 801569e:	2112      	movs	r1, #18
 80156a0:	187b      	adds	r3, r7, r1
 80156a2:	8812      	ldrh	r2, [r2, #0]
 80156a4:	801a      	strh	r2, [r3, #0]
 80156a6:	187b      	adds	r3, r7, r1
 80156a8:	881b      	ldrh	r3, [r3, #0]
 80156aa:	2240      	movs	r2, #64	@ 0x40
 80156ac:	4013      	ands	r3, r2
 80156ae:	d016      	beq.n	80156de <USB_ActivateEndpoint+0x17a>
 80156b0:	687a      	ldr	r2, [r7, #4]
 80156b2:	683b      	ldr	r3, [r7, #0]
 80156b4:	781b      	ldrb	r3, [r3, #0]
 80156b6:	009b      	lsls	r3, r3, #2
 80156b8:	18d3      	adds	r3, r2, r3
 80156ba:	881b      	ldrh	r3, [r3, #0]
 80156bc:	b29a      	uxth	r2, r3
 80156be:	2010      	movs	r0, #16
 80156c0:	183b      	adds	r3, r7, r0
 80156c2:	4957      	ldr	r1, [pc, #348]	@ (8015820 <USB_ActivateEndpoint+0x2bc>)
 80156c4:	400a      	ands	r2, r1
 80156c6:	801a      	strh	r2, [r3, #0]
 80156c8:	687a      	ldr	r2, [r7, #4]
 80156ca:	683b      	ldr	r3, [r7, #0]
 80156cc:	781b      	ldrb	r3, [r3, #0]
 80156ce:	009b      	lsls	r3, r3, #2
 80156d0:	18d3      	adds	r3, r2, r3
 80156d2:	183a      	adds	r2, r7, r0
 80156d4:	8812      	ldrh	r2, [r2, #0]
 80156d6:	4953      	ldr	r1, [pc, #332]	@ (8015824 <USB_ActivateEndpoint+0x2c0>)
 80156d8:	430a      	orrs	r2, r1
 80156da:	b292      	uxth	r2, r2
 80156dc:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 80156de:	683b      	ldr	r3, [r7, #0]
 80156e0:	78db      	ldrb	r3, [r3, #3]
 80156e2:	2b01      	cmp	r3, #1
 80156e4:	d01d      	beq.n	8015722 <USB_ActivateEndpoint+0x1be>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80156e6:	687a      	ldr	r2, [r7, #4]
 80156e8:	683b      	ldr	r3, [r7, #0]
 80156ea:	781b      	ldrb	r3, [r3, #0]
 80156ec:	009b      	lsls	r3, r3, #2
 80156ee:	18d3      	adds	r3, r2, r3
 80156f0:	881b      	ldrh	r3, [r3, #0]
 80156f2:	b29a      	uxth	r2, r3
 80156f4:	200c      	movs	r0, #12
 80156f6:	183b      	adds	r3, r7, r0
 80156f8:	494b      	ldr	r1, [pc, #300]	@ (8015828 <USB_ActivateEndpoint+0x2c4>)
 80156fa:	400a      	ands	r2, r1
 80156fc:	801a      	strh	r2, [r3, #0]
 80156fe:	183b      	adds	r3, r7, r0
 8015700:	183a      	adds	r2, r7, r0
 8015702:	8812      	ldrh	r2, [r2, #0]
 8015704:	2120      	movs	r1, #32
 8015706:	404a      	eors	r2, r1
 8015708:	801a      	strh	r2, [r3, #0]
 801570a:	687a      	ldr	r2, [r7, #4]
 801570c:	683b      	ldr	r3, [r7, #0]
 801570e:	781b      	ldrb	r3, [r3, #0]
 8015710:	009b      	lsls	r3, r3, #2
 8015712:	18d3      	adds	r3, r2, r3
 8015714:	183a      	adds	r2, r7, r0
 8015716:	8812      	ldrh	r2, [r2, #0]
 8015718:	4940      	ldr	r1, [pc, #256]	@ (801581c <USB_ActivateEndpoint+0x2b8>)
 801571a:	430a      	orrs	r2, r1
 801571c:	b292      	uxth	r2, r2
 801571e:	801a      	strh	r2, [r3, #0]
 8015720:	e2b4      	b.n	8015c8c <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8015722:	687a      	ldr	r2, [r7, #4]
 8015724:	683b      	ldr	r3, [r7, #0]
 8015726:	781b      	ldrb	r3, [r3, #0]
 8015728:	009b      	lsls	r3, r3, #2
 801572a:	18d3      	adds	r3, r2, r3
 801572c:	881b      	ldrh	r3, [r3, #0]
 801572e:	b29a      	uxth	r2, r3
 8015730:	200e      	movs	r0, #14
 8015732:	183b      	adds	r3, r7, r0
 8015734:	493c      	ldr	r1, [pc, #240]	@ (8015828 <USB_ActivateEndpoint+0x2c4>)
 8015736:	400a      	ands	r2, r1
 8015738:	801a      	strh	r2, [r3, #0]
 801573a:	687a      	ldr	r2, [r7, #4]
 801573c:	683b      	ldr	r3, [r7, #0]
 801573e:	781b      	ldrb	r3, [r3, #0]
 8015740:	009b      	lsls	r3, r3, #2
 8015742:	18d3      	adds	r3, r2, r3
 8015744:	183a      	adds	r2, r7, r0
 8015746:	8812      	ldrh	r2, [r2, #0]
 8015748:	4934      	ldr	r1, [pc, #208]	@ (801581c <USB_ActivateEndpoint+0x2b8>)
 801574a:	430a      	orrs	r2, r1
 801574c:	b292      	uxth	r2, r2
 801574e:	801a      	strh	r2, [r3, #0]
 8015750:	e29c      	b.n	8015c8c <USB_ActivateEndpoint+0x728>
      }
    }
    else
    {
      /* Set the endpoint Receive buffer address */
      PCD_SET_EP_RX_ADDRESS(USBx, ep->num, ep->pmaadress);
 8015752:	687b      	ldr	r3, [r7, #4]
 8015754:	633b      	str	r3, [r7, #48]	@ 0x30
 8015756:	687b      	ldr	r3, [r7, #4]
 8015758:	2250      	movs	r2, #80	@ 0x50
 801575a:	5a9b      	ldrh	r3, [r3, r2]
 801575c:	b29b      	uxth	r3, r3
 801575e:	001a      	movs	r2, r3
 8015760:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 8015762:	189b      	adds	r3, r3, r2
 8015764:	633b      	str	r3, [r7, #48]	@ 0x30
 8015766:	683b      	ldr	r3, [r7, #0]
 8015768:	781b      	ldrb	r3, [r3, #0]
 801576a:	00da      	lsls	r2, r3, #3
 801576c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801576e:	18d3      	adds	r3, r2, r3
 8015770:	4a2e      	ldr	r2, [pc, #184]	@ (801582c <USB_ActivateEndpoint+0x2c8>)
 8015772:	4694      	mov	ip, r2
 8015774:	4463      	add	r3, ip
 8015776:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8015778:	683b      	ldr	r3, [r7, #0]
 801577a:	88db      	ldrh	r3, [r3, #6]
 801577c:	085b      	lsrs	r3, r3, #1
 801577e:	b29b      	uxth	r3, r3
 8015780:	18db      	adds	r3, r3, r3
 8015782:	b29a      	uxth	r2, r3
 8015784:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 8015786:	801a      	strh	r2, [r3, #0]

      /* Set the endpoint Receive buffer counter */
      PCD_SET_EP_RX_CNT(USBx, ep->num, ep->maxpacket);
 8015788:	687b      	ldr	r3, [r7, #4]
 801578a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801578c:	687b      	ldr	r3, [r7, #4]
 801578e:	2250      	movs	r2, #80	@ 0x50
 8015790:	5a9b      	ldrh	r3, [r3, r2]
 8015792:	b29b      	uxth	r3, r3
 8015794:	001a      	movs	r2, r3
 8015796:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8015798:	189b      	adds	r3, r3, r2
 801579a:	62bb      	str	r3, [r7, #40]	@ 0x28
 801579c:	683b      	ldr	r3, [r7, #0]
 801579e:	781b      	ldrb	r3, [r3, #0]
 80157a0:	00da      	lsls	r2, r3, #3
 80157a2:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 80157a4:	18d3      	adds	r3, r2, r3
 80157a6:	4a22      	ldr	r2, [pc, #136]	@ (8015830 <USB_ActivateEndpoint+0x2cc>)
 80157a8:	4694      	mov	ip, r2
 80157aa:	4463      	add	r3, ip
 80157ac:	627b      	str	r3, [r7, #36]	@ 0x24
 80157ae:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80157b0:	881b      	ldrh	r3, [r3, #0]
 80157b2:	b29b      	uxth	r3, r3
 80157b4:	059b      	lsls	r3, r3, #22
 80157b6:	0d9b      	lsrs	r3, r3, #22
 80157b8:	b29a      	uxth	r2, r3
 80157ba:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80157bc:	801a      	strh	r2, [r3, #0]
 80157be:	683b      	ldr	r3, [r7, #0]
 80157c0:	691b      	ldr	r3, [r3, #16]
 80157c2:	2b3e      	cmp	r3, #62	@ 0x3e
 80157c4:	d91a      	bls.n	80157fc <USB_ActivateEndpoint+0x298>
 80157c6:	683b      	ldr	r3, [r7, #0]
 80157c8:	691b      	ldr	r3, [r3, #16]
 80157ca:	095b      	lsrs	r3, r3, #5
 80157cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80157ce:	683b      	ldr	r3, [r7, #0]
 80157d0:	691b      	ldr	r3, [r3, #16]
 80157d2:	221f      	movs	r2, #31
 80157d4:	4013      	ands	r3, r2
 80157d6:	d102      	bne.n	80157de <USB_ActivateEndpoint+0x27a>
 80157d8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80157da:	3b01      	subs	r3, #1
 80157dc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80157de:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80157e0:	881b      	ldrh	r3, [r3, #0]
 80157e2:	b29a      	uxth	r2, r3
 80157e4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80157e6:	b29b      	uxth	r3, r3
 80157e8:	029b      	lsls	r3, r3, #10
 80157ea:	b29b      	uxth	r3, r3
 80157ec:	4313      	orrs	r3, r2
 80157ee:	b29b      	uxth	r3, r3
 80157f0:	4a10      	ldr	r2, [pc, #64]	@ (8015834 <USB_ActivateEndpoint+0x2d0>)
 80157f2:	4313      	orrs	r3, r2
 80157f4:	b29a      	uxth	r2, r3
 80157f6:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80157f8:	801a      	strh	r2, [r3, #0]
 80157fa:	e034      	b.n	8015866 <USB_ActivateEndpoint+0x302>
 80157fc:	683b      	ldr	r3, [r7, #0]
 80157fe:	691b      	ldr	r3, [r3, #16]
 8015800:	2b00      	cmp	r3, #0
 8015802:	d119      	bne.n	8015838 <USB_ActivateEndpoint+0x2d4>
 8015804:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015806:	881b      	ldrh	r3, [r3, #0]
 8015808:	b29b      	uxth	r3, r3
 801580a:	4a0a      	ldr	r2, [pc, #40]	@ (8015834 <USB_ActivateEndpoint+0x2d0>)
 801580c:	4313      	orrs	r3, r2
 801580e:	b29a      	uxth	r2, r3
 8015810:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015812:	801a      	strh	r2, [r3, #0]
 8015814:	e027      	b.n	8015866 <USB_ActivateEndpoint+0x302>
 8015816:	46c0      	nop			@ (mov r8, r8)
 8015818:	ffff898f 	.word	0xffff898f
 801581c:	ffff8080 	.word	0xffff8080
 8015820:	ffff8f8f 	.word	0xffff8f8f
 8015824:	ffff80c0 	.word	0xffff80c0
 8015828:	ffff8fbf 	.word	0xffff8fbf
 801582c:	00000404 	.word	0x00000404
 8015830:	00000406 	.word	0x00000406
 8015834:	ffff8000 	.word	0xffff8000
 8015838:	683b      	ldr	r3, [r7, #0]
 801583a:	691b      	ldr	r3, [r3, #16]
 801583c:	085b      	lsrs	r3, r3, #1
 801583e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8015840:	683b      	ldr	r3, [r7, #0]
 8015842:	691b      	ldr	r3, [r3, #16]
 8015844:	2201      	movs	r2, #1
 8015846:	4013      	ands	r3, r2
 8015848:	d002      	beq.n	8015850 <USB_ActivateEndpoint+0x2ec>
 801584a:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 801584c:	3301      	adds	r3, #1
 801584e:	66bb      	str	r3, [r7, #104]	@ 0x68
 8015850:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015852:	881b      	ldrh	r3, [r3, #0]
 8015854:	b29a      	uxth	r2, r3
 8015856:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 8015858:	b29b      	uxth	r3, r3
 801585a:	029b      	lsls	r3, r3, #10
 801585c:	b29b      	uxth	r3, r3
 801585e:	4313      	orrs	r3, r2
 8015860:	b29a      	uxth	r2, r3
 8015862:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8015864:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8015866:	687a      	ldr	r2, [r7, #4]
 8015868:	683b      	ldr	r3, [r7, #0]
 801586a:	781b      	ldrb	r3, [r3, #0]
 801586c:	009b      	lsls	r3, r3, #2
 801586e:	18d2      	adds	r2, r2, r3
 8015870:	2122      	movs	r1, #34	@ 0x22
 8015872:	187b      	adds	r3, r7, r1
 8015874:	8812      	ldrh	r2, [r2, #0]
 8015876:	801a      	strh	r2, [r3, #0]
 8015878:	187b      	adds	r3, r7, r1
 801587a:	881a      	ldrh	r2, [r3, #0]
 801587c:	2380      	movs	r3, #128	@ 0x80
 801587e:	01db      	lsls	r3, r3, #7
 8015880:	4013      	ands	r3, r2
 8015882:	d016      	beq.n	80158b2 <USB_ActivateEndpoint+0x34e>
 8015884:	687a      	ldr	r2, [r7, #4]
 8015886:	683b      	ldr	r3, [r7, #0]
 8015888:	781b      	ldrb	r3, [r3, #0]
 801588a:	009b      	lsls	r3, r3, #2
 801588c:	18d3      	adds	r3, r2, r3
 801588e:	881b      	ldrh	r3, [r3, #0]
 8015890:	b29a      	uxth	r2, r3
 8015892:	2020      	movs	r0, #32
 8015894:	183b      	adds	r3, r7, r0
 8015896:	49dd      	ldr	r1, [pc, #884]	@ (8015c0c <USB_ActivateEndpoint+0x6a8>)
 8015898:	400a      	ands	r2, r1
 801589a:	801a      	strh	r2, [r3, #0]
 801589c:	687a      	ldr	r2, [r7, #4]
 801589e:	683b      	ldr	r3, [r7, #0]
 80158a0:	781b      	ldrb	r3, [r3, #0]
 80158a2:	009b      	lsls	r3, r3, #2
 80158a4:	18d3      	adds	r3, r2, r3
 80158a6:	183a      	adds	r2, r7, r0
 80158a8:	8812      	ldrh	r2, [r2, #0]
 80158aa:	49d9      	ldr	r1, [pc, #868]	@ (8015c10 <USB_ActivateEndpoint+0x6ac>)
 80158ac:	430a      	orrs	r2, r1
 80158ae:	b292      	uxth	r2, r2
 80158b0:	801a      	strh	r2, [r3, #0]

      if (ep->num == 0U)
 80158b2:	683b      	ldr	r3, [r7, #0]
 80158b4:	781b      	ldrb	r3, [r3, #0]
 80158b6:	2b00      	cmp	r3, #0
 80158b8:	d125      	bne.n	8015906 <USB_ActivateEndpoint+0x3a2>
      {
        /* Configure VALID status for EP0 */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 80158ba:	687a      	ldr	r2, [r7, #4]
 80158bc:	683b      	ldr	r3, [r7, #0]
 80158be:	781b      	ldrb	r3, [r3, #0]
 80158c0:	009b      	lsls	r3, r3, #2
 80158c2:	18d3      	adds	r3, r2, r3
 80158c4:	881b      	ldrh	r3, [r3, #0]
 80158c6:	b29a      	uxth	r2, r3
 80158c8:	201c      	movs	r0, #28
 80158ca:	183b      	adds	r3, r7, r0
 80158cc:	49d1      	ldr	r1, [pc, #836]	@ (8015c14 <USB_ActivateEndpoint+0x6b0>)
 80158ce:	400a      	ands	r2, r1
 80158d0:	801a      	strh	r2, [r3, #0]
 80158d2:	183b      	adds	r3, r7, r0
 80158d4:	183a      	adds	r2, r7, r0
 80158d6:	8812      	ldrh	r2, [r2, #0]
 80158d8:	2180      	movs	r1, #128	@ 0x80
 80158da:	0149      	lsls	r1, r1, #5
 80158dc:	404a      	eors	r2, r1
 80158de:	801a      	strh	r2, [r3, #0]
 80158e0:	183b      	adds	r3, r7, r0
 80158e2:	183a      	adds	r2, r7, r0
 80158e4:	8812      	ldrh	r2, [r2, #0]
 80158e6:	2180      	movs	r1, #128	@ 0x80
 80158e8:	0189      	lsls	r1, r1, #6
 80158ea:	404a      	eors	r2, r1
 80158ec:	801a      	strh	r2, [r3, #0]
 80158ee:	687a      	ldr	r2, [r7, #4]
 80158f0:	683b      	ldr	r3, [r7, #0]
 80158f2:	781b      	ldrb	r3, [r3, #0]
 80158f4:	009b      	lsls	r3, r3, #2
 80158f6:	18d3      	adds	r3, r2, r3
 80158f8:	183a      	adds	r2, r7, r0
 80158fa:	8812      	ldrh	r2, [r2, #0]
 80158fc:	49c6      	ldr	r1, [pc, #792]	@ (8015c18 <USB_ActivateEndpoint+0x6b4>)
 80158fe:	430a      	orrs	r2, r1
 8015900:	b292      	uxth	r2, r2
 8015902:	801a      	strh	r2, [r3, #0]
 8015904:	e1c2      	b.n	8015c8c <USB_ActivateEndpoint+0x728>
      }
      else
      {
        /* Configure NAK status for OUT Endpoint */
        PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_NAK);
 8015906:	687a      	ldr	r2, [r7, #4]
 8015908:	683b      	ldr	r3, [r7, #0]
 801590a:	781b      	ldrb	r3, [r3, #0]
 801590c:	009b      	lsls	r3, r3, #2
 801590e:	18d3      	adds	r3, r2, r3
 8015910:	881b      	ldrh	r3, [r3, #0]
 8015912:	b29a      	uxth	r2, r3
 8015914:	201e      	movs	r0, #30
 8015916:	183b      	adds	r3, r7, r0
 8015918:	49be      	ldr	r1, [pc, #760]	@ (8015c14 <USB_ActivateEndpoint+0x6b0>)
 801591a:	400a      	ands	r2, r1
 801591c:	801a      	strh	r2, [r3, #0]
 801591e:	183b      	adds	r3, r7, r0
 8015920:	183a      	adds	r2, r7, r0
 8015922:	8812      	ldrh	r2, [r2, #0]
 8015924:	2180      	movs	r1, #128	@ 0x80
 8015926:	0189      	lsls	r1, r1, #6
 8015928:	404a      	eors	r2, r1
 801592a:	801a      	strh	r2, [r3, #0]
 801592c:	687a      	ldr	r2, [r7, #4]
 801592e:	683b      	ldr	r3, [r7, #0]
 8015930:	781b      	ldrb	r3, [r3, #0]
 8015932:	009b      	lsls	r3, r3, #2
 8015934:	18d3      	adds	r3, r2, r3
 8015936:	183a      	adds	r2, r7, r0
 8015938:	8812      	ldrh	r2, [r2, #0]
 801593a:	49b7      	ldr	r1, [pc, #732]	@ (8015c18 <USB_ActivateEndpoint+0x6b4>)
 801593c:	430a      	orrs	r2, r1
 801593e:	b292      	uxth	r2, r2
 8015940:	801a      	strh	r2, [r3, #0]
 8015942:	e1a3      	b.n	8015c8c <USB_ActivateEndpoint+0x728>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->type == EP_TYPE_BULK)
 8015944:	683b      	ldr	r3, [r7, #0]
 8015946:	78db      	ldrb	r3, [r3, #3]
 8015948:	2b02      	cmp	r3, #2
 801594a:	d117      	bne.n	801597c <USB_ActivateEndpoint+0x418>
    {
      /* Set bulk endpoint as double buffered */
      PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 801594c:	687a      	ldr	r2, [r7, #4]
 801594e:	683b      	ldr	r3, [r7, #0]
 8015950:	781b      	ldrb	r3, [r3, #0]
 8015952:	009b      	lsls	r3, r3, #2
 8015954:	18d3      	adds	r3, r2, r3
 8015956:	881b      	ldrh	r3, [r3, #0]
 8015958:	b29a      	uxth	r2, r3
 801595a:	2062      	movs	r0, #98	@ 0x62
 801595c:	183b      	adds	r3, r7, r0
 801595e:	49ab      	ldr	r1, [pc, #684]	@ (8015c0c <USB_ActivateEndpoint+0x6a8>)
 8015960:	400a      	ands	r2, r1
 8015962:	801a      	strh	r2, [r3, #0]
 8015964:	687a      	ldr	r2, [r7, #4]
 8015966:	683b      	ldr	r3, [r7, #0]
 8015968:	781b      	ldrb	r3, [r3, #0]
 801596a:	009b      	lsls	r3, r3, #2
 801596c:	18d3      	adds	r3, r2, r3
 801596e:	183a      	adds	r2, r7, r0
 8015970:	8812      	ldrh	r2, [r2, #0]
 8015972:	49aa      	ldr	r1, [pc, #680]	@ (8015c1c <USB_ActivateEndpoint+0x6b8>)
 8015974:	430a      	orrs	r2, r1
 8015976:	b292      	uxth	r2, r2
 8015978:	801a      	strh	r2, [r3, #0]
 801597a:	e016      	b.n	80159aa <USB_ActivateEndpoint+0x446>
    }
    else
    {
      /* Set the ISOC endpoint in double buffer mode */
      PCD_CLEAR_EP_KIND(USBx, ep->num);
 801597c:	687a      	ldr	r2, [r7, #4]
 801597e:	683b      	ldr	r3, [r7, #0]
 8015980:	781b      	ldrb	r3, [r3, #0]
 8015982:	009b      	lsls	r3, r3, #2
 8015984:	18d3      	adds	r3, r2, r3
 8015986:	881b      	ldrh	r3, [r3, #0]
 8015988:	b29a      	uxth	r2, r3
 801598a:	2064      	movs	r0, #100	@ 0x64
 801598c:	183b      	adds	r3, r7, r0
 801598e:	49a4      	ldr	r1, [pc, #656]	@ (8015c20 <USB_ActivateEndpoint+0x6bc>)
 8015990:	400a      	ands	r2, r1
 8015992:	801a      	strh	r2, [r3, #0]
 8015994:	687a      	ldr	r2, [r7, #4]
 8015996:	683b      	ldr	r3, [r7, #0]
 8015998:	781b      	ldrb	r3, [r3, #0]
 801599a:	009b      	lsls	r3, r3, #2
 801599c:	18d3      	adds	r3, r2, r3
 801599e:	183a      	adds	r2, r7, r0
 80159a0:	8812      	ldrh	r2, [r2, #0]
 80159a2:	499d      	ldr	r1, [pc, #628]	@ (8015c18 <USB_ActivateEndpoint+0x6b4>)
 80159a4:	430a      	orrs	r2, r1
 80159a6:	b292      	uxth	r2, r2
 80159a8:	801a      	strh	r2, [r3, #0]
    }

    /* Set buffer address for double buffered mode */
    PCD_SET_EP_DBUF_ADDR(USBx, ep->num, ep->pmaaddr0, ep->pmaaddr1);
 80159aa:	687b      	ldr	r3, [r7, #4]
 80159ac:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80159ae:	687b      	ldr	r3, [r7, #4]
 80159b0:	2250      	movs	r2, #80	@ 0x50
 80159b2:	5a9b      	ldrh	r3, [r3, r2]
 80159b4:	b29b      	uxth	r3, r3
 80159b6:	001a      	movs	r2, r3
 80159b8:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80159ba:	189b      	adds	r3, r3, r2
 80159bc:	65fb      	str	r3, [r7, #92]	@ 0x5c
 80159be:	683b      	ldr	r3, [r7, #0]
 80159c0:	781b      	ldrb	r3, [r3, #0]
 80159c2:	00da      	lsls	r2, r3, #3
 80159c4:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 80159c6:	18d3      	adds	r3, r2, r3
 80159c8:	2280      	movs	r2, #128	@ 0x80
 80159ca:	00d2      	lsls	r2, r2, #3
 80159cc:	4694      	mov	ip, r2
 80159ce:	4463      	add	r3, ip
 80159d0:	65bb      	str	r3, [r7, #88]	@ 0x58
 80159d2:	683b      	ldr	r3, [r7, #0]
 80159d4:	891b      	ldrh	r3, [r3, #8]
 80159d6:	085b      	lsrs	r3, r3, #1
 80159d8:	b29b      	uxth	r3, r3
 80159da:	18db      	adds	r3, r3, r3
 80159dc:	b29a      	uxth	r2, r3
 80159de:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 80159e0:	801a      	strh	r2, [r3, #0]
 80159e2:	687b      	ldr	r3, [r7, #4]
 80159e4:	657b      	str	r3, [r7, #84]	@ 0x54
 80159e6:	687b      	ldr	r3, [r7, #4]
 80159e8:	2250      	movs	r2, #80	@ 0x50
 80159ea:	5a9b      	ldrh	r3, [r3, r2]
 80159ec:	b29b      	uxth	r3, r3
 80159ee:	001a      	movs	r2, r3
 80159f0:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80159f2:	189b      	adds	r3, r3, r2
 80159f4:	657b      	str	r3, [r7, #84]	@ 0x54
 80159f6:	683b      	ldr	r3, [r7, #0]
 80159f8:	781b      	ldrb	r3, [r3, #0]
 80159fa:	00da      	lsls	r2, r3, #3
 80159fc:	6d7b      	ldr	r3, [r7, #84]	@ 0x54
 80159fe:	18d3      	adds	r3, r2, r3
 8015a00:	4a88      	ldr	r2, [pc, #544]	@ (8015c24 <USB_ActivateEndpoint+0x6c0>)
 8015a02:	4694      	mov	ip, r2
 8015a04:	4463      	add	r3, ip
 8015a06:	653b      	str	r3, [r7, #80]	@ 0x50
 8015a08:	683b      	ldr	r3, [r7, #0]
 8015a0a:	895b      	ldrh	r3, [r3, #10]
 8015a0c:	085b      	lsrs	r3, r3, #1
 8015a0e:	b29b      	uxth	r3, r3
 8015a10:	18db      	adds	r3, r3, r3
 8015a12:	b29a      	uxth	r2, r3
 8015a14:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8015a16:	801a      	strh	r2, [r3, #0]

    if (ep->is_in == 0U)
 8015a18:	683b      	ldr	r3, [r7, #0]
 8015a1a:	785b      	ldrb	r3, [r3, #1]
 8015a1c:	2b00      	cmp	r3, #0
 8015a1e:	d000      	beq.n	8015a22 <USB_ActivateEndpoint+0x4be>
 8015a20:	e087      	b.n	8015b32 <USB_ActivateEndpoint+0x5ce>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8015a22:	687a      	ldr	r2, [r7, #4]
 8015a24:	683b      	ldr	r3, [r7, #0]
 8015a26:	781b      	ldrb	r3, [r3, #0]
 8015a28:	009b      	lsls	r3, r3, #2
 8015a2a:	18d2      	adds	r2, r2, r3
 8015a2c:	2140      	movs	r1, #64	@ 0x40
 8015a2e:	187b      	adds	r3, r7, r1
 8015a30:	8812      	ldrh	r2, [r2, #0]
 8015a32:	801a      	strh	r2, [r3, #0]
 8015a34:	187b      	adds	r3, r7, r1
 8015a36:	881a      	ldrh	r2, [r3, #0]
 8015a38:	2380      	movs	r3, #128	@ 0x80
 8015a3a:	01db      	lsls	r3, r3, #7
 8015a3c:	4013      	ands	r3, r2
 8015a3e:	d016      	beq.n	8015a6e <USB_ActivateEndpoint+0x50a>
 8015a40:	687a      	ldr	r2, [r7, #4]
 8015a42:	683b      	ldr	r3, [r7, #0]
 8015a44:	781b      	ldrb	r3, [r3, #0]
 8015a46:	009b      	lsls	r3, r3, #2
 8015a48:	18d3      	adds	r3, r2, r3
 8015a4a:	881b      	ldrh	r3, [r3, #0]
 8015a4c:	b29a      	uxth	r2, r3
 8015a4e:	203e      	movs	r0, #62	@ 0x3e
 8015a50:	183b      	adds	r3, r7, r0
 8015a52:	496e      	ldr	r1, [pc, #440]	@ (8015c0c <USB_ActivateEndpoint+0x6a8>)
 8015a54:	400a      	ands	r2, r1
 8015a56:	801a      	strh	r2, [r3, #0]
 8015a58:	687a      	ldr	r2, [r7, #4]
 8015a5a:	683b      	ldr	r3, [r7, #0]
 8015a5c:	781b      	ldrb	r3, [r3, #0]
 8015a5e:	009b      	lsls	r3, r3, #2
 8015a60:	18d3      	adds	r3, r2, r3
 8015a62:	183a      	adds	r2, r7, r0
 8015a64:	8812      	ldrh	r2, [r2, #0]
 8015a66:	496a      	ldr	r1, [pc, #424]	@ (8015c10 <USB_ActivateEndpoint+0x6ac>)
 8015a68:	430a      	orrs	r2, r1
 8015a6a:	b292      	uxth	r2, r2
 8015a6c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8015a6e:	687a      	ldr	r2, [r7, #4]
 8015a70:	683b      	ldr	r3, [r7, #0]
 8015a72:	781b      	ldrb	r3, [r3, #0]
 8015a74:	009b      	lsls	r3, r3, #2
 8015a76:	18d2      	adds	r2, r2, r3
 8015a78:	213c      	movs	r1, #60	@ 0x3c
 8015a7a:	187b      	adds	r3, r7, r1
 8015a7c:	8812      	ldrh	r2, [r2, #0]
 8015a7e:	801a      	strh	r2, [r3, #0]
 8015a80:	187b      	adds	r3, r7, r1
 8015a82:	881b      	ldrh	r3, [r3, #0]
 8015a84:	2240      	movs	r2, #64	@ 0x40
 8015a86:	4013      	ands	r3, r2
 8015a88:	d016      	beq.n	8015ab8 <USB_ActivateEndpoint+0x554>
 8015a8a:	687a      	ldr	r2, [r7, #4]
 8015a8c:	683b      	ldr	r3, [r7, #0]
 8015a8e:	781b      	ldrb	r3, [r3, #0]
 8015a90:	009b      	lsls	r3, r3, #2
 8015a92:	18d3      	adds	r3, r2, r3
 8015a94:	881b      	ldrh	r3, [r3, #0]
 8015a96:	b29a      	uxth	r2, r3
 8015a98:	203a      	movs	r0, #58	@ 0x3a
 8015a9a:	183b      	adds	r3, r7, r0
 8015a9c:	495b      	ldr	r1, [pc, #364]	@ (8015c0c <USB_ActivateEndpoint+0x6a8>)
 8015a9e:	400a      	ands	r2, r1
 8015aa0:	801a      	strh	r2, [r3, #0]
 8015aa2:	687a      	ldr	r2, [r7, #4]
 8015aa4:	683b      	ldr	r3, [r7, #0]
 8015aa6:	781b      	ldrb	r3, [r3, #0]
 8015aa8:	009b      	lsls	r3, r3, #2
 8015aaa:	18d3      	adds	r3, r2, r3
 8015aac:	183a      	adds	r2, r7, r0
 8015aae:	8812      	ldrh	r2, [r2, #0]
 8015ab0:	495d      	ldr	r1, [pc, #372]	@ (8015c28 <USB_ActivateEndpoint+0x6c4>)
 8015ab2:	430a      	orrs	r2, r1
 8015ab4:	b292      	uxth	r2, r2
 8015ab6:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8015ab8:	687a      	ldr	r2, [r7, #4]
 8015aba:	683b      	ldr	r3, [r7, #0]
 8015abc:	781b      	ldrb	r3, [r3, #0]
 8015abe:	009b      	lsls	r3, r3, #2
 8015ac0:	18d3      	adds	r3, r2, r3
 8015ac2:	881b      	ldrh	r3, [r3, #0]
 8015ac4:	b29a      	uxth	r2, r3
 8015ac6:	2038      	movs	r0, #56	@ 0x38
 8015ac8:	183b      	adds	r3, r7, r0
 8015aca:	4952      	ldr	r1, [pc, #328]	@ (8015c14 <USB_ActivateEndpoint+0x6b0>)
 8015acc:	400a      	ands	r2, r1
 8015ace:	801a      	strh	r2, [r3, #0]
 8015ad0:	183b      	adds	r3, r7, r0
 8015ad2:	183a      	adds	r2, r7, r0
 8015ad4:	8812      	ldrh	r2, [r2, #0]
 8015ad6:	2180      	movs	r1, #128	@ 0x80
 8015ad8:	0149      	lsls	r1, r1, #5
 8015ada:	404a      	eors	r2, r1
 8015adc:	801a      	strh	r2, [r3, #0]
 8015ade:	183b      	adds	r3, r7, r0
 8015ae0:	183a      	adds	r2, r7, r0
 8015ae2:	8812      	ldrh	r2, [r2, #0]
 8015ae4:	2180      	movs	r1, #128	@ 0x80
 8015ae6:	0189      	lsls	r1, r1, #6
 8015ae8:	404a      	eors	r2, r1
 8015aea:	801a      	strh	r2, [r3, #0]
 8015aec:	687a      	ldr	r2, [r7, #4]
 8015aee:	683b      	ldr	r3, [r7, #0]
 8015af0:	781b      	ldrb	r3, [r3, #0]
 8015af2:	009b      	lsls	r3, r3, #2
 8015af4:	18d3      	adds	r3, r2, r3
 8015af6:	183a      	adds	r2, r7, r0
 8015af8:	8812      	ldrh	r2, [r2, #0]
 8015afa:	4947      	ldr	r1, [pc, #284]	@ (8015c18 <USB_ActivateEndpoint+0x6b4>)
 8015afc:	430a      	orrs	r2, r1
 8015afe:	b292      	uxth	r2, r2
 8015b00:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8015b02:	687a      	ldr	r2, [r7, #4]
 8015b04:	683b      	ldr	r3, [r7, #0]
 8015b06:	781b      	ldrb	r3, [r3, #0]
 8015b08:	009b      	lsls	r3, r3, #2
 8015b0a:	18d3      	adds	r3, r2, r3
 8015b0c:	881b      	ldrh	r3, [r3, #0]
 8015b0e:	b29a      	uxth	r2, r3
 8015b10:	2036      	movs	r0, #54	@ 0x36
 8015b12:	183b      	adds	r3, r7, r0
 8015b14:	4945      	ldr	r1, [pc, #276]	@ (8015c2c <USB_ActivateEndpoint+0x6c8>)
 8015b16:	400a      	ands	r2, r1
 8015b18:	801a      	strh	r2, [r3, #0]
 8015b1a:	687a      	ldr	r2, [r7, #4]
 8015b1c:	683b      	ldr	r3, [r7, #0]
 8015b1e:	781b      	ldrb	r3, [r3, #0]
 8015b20:	009b      	lsls	r3, r3, #2
 8015b22:	18d3      	adds	r3, r2, r3
 8015b24:	183a      	adds	r2, r7, r0
 8015b26:	8812      	ldrh	r2, [r2, #0]
 8015b28:	493b      	ldr	r1, [pc, #236]	@ (8015c18 <USB_ActivateEndpoint+0x6b4>)
 8015b2a:	430a      	orrs	r2, r1
 8015b2c:	b292      	uxth	r2, r2
 8015b2e:	801a      	strh	r2, [r3, #0]
 8015b30:	e0ac      	b.n	8015c8c <USB_ActivateEndpoint+0x728>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT */
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8015b32:	687a      	ldr	r2, [r7, #4]
 8015b34:	683b      	ldr	r3, [r7, #0]
 8015b36:	781b      	ldrb	r3, [r3, #0]
 8015b38:	009b      	lsls	r3, r3, #2
 8015b3a:	18d2      	adds	r2, r2, r3
 8015b3c:	214e      	movs	r1, #78	@ 0x4e
 8015b3e:	187b      	adds	r3, r7, r1
 8015b40:	8812      	ldrh	r2, [r2, #0]
 8015b42:	801a      	strh	r2, [r3, #0]
 8015b44:	187b      	adds	r3, r7, r1
 8015b46:	881a      	ldrh	r2, [r3, #0]
 8015b48:	2380      	movs	r3, #128	@ 0x80
 8015b4a:	01db      	lsls	r3, r3, #7
 8015b4c:	4013      	ands	r3, r2
 8015b4e:	d016      	beq.n	8015b7e <USB_ActivateEndpoint+0x61a>
 8015b50:	687a      	ldr	r2, [r7, #4]
 8015b52:	683b      	ldr	r3, [r7, #0]
 8015b54:	781b      	ldrb	r3, [r3, #0]
 8015b56:	009b      	lsls	r3, r3, #2
 8015b58:	18d3      	adds	r3, r2, r3
 8015b5a:	881b      	ldrh	r3, [r3, #0]
 8015b5c:	b29a      	uxth	r2, r3
 8015b5e:	204c      	movs	r0, #76	@ 0x4c
 8015b60:	183b      	adds	r3, r7, r0
 8015b62:	492a      	ldr	r1, [pc, #168]	@ (8015c0c <USB_ActivateEndpoint+0x6a8>)
 8015b64:	400a      	ands	r2, r1
 8015b66:	801a      	strh	r2, [r3, #0]
 8015b68:	687a      	ldr	r2, [r7, #4]
 8015b6a:	683b      	ldr	r3, [r7, #0]
 8015b6c:	781b      	ldrb	r3, [r3, #0]
 8015b6e:	009b      	lsls	r3, r3, #2
 8015b70:	18d3      	adds	r3, r2, r3
 8015b72:	183a      	adds	r2, r7, r0
 8015b74:	8812      	ldrh	r2, [r2, #0]
 8015b76:	4926      	ldr	r1, [pc, #152]	@ (8015c10 <USB_ActivateEndpoint+0x6ac>)
 8015b78:	430a      	orrs	r2, r1
 8015b7a:	b292      	uxth	r2, r2
 8015b7c:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8015b7e:	687a      	ldr	r2, [r7, #4]
 8015b80:	683b      	ldr	r3, [r7, #0]
 8015b82:	781b      	ldrb	r3, [r3, #0]
 8015b84:	009b      	lsls	r3, r3, #2
 8015b86:	18d2      	adds	r2, r2, r3
 8015b88:	214a      	movs	r1, #74	@ 0x4a
 8015b8a:	187b      	adds	r3, r7, r1
 8015b8c:	8812      	ldrh	r2, [r2, #0]
 8015b8e:	801a      	strh	r2, [r3, #0]
 8015b90:	187b      	adds	r3, r7, r1
 8015b92:	881b      	ldrh	r3, [r3, #0]
 8015b94:	2240      	movs	r2, #64	@ 0x40
 8015b96:	4013      	ands	r3, r2
 8015b98:	d016      	beq.n	8015bc8 <USB_ActivateEndpoint+0x664>
 8015b9a:	687a      	ldr	r2, [r7, #4]
 8015b9c:	683b      	ldr	r3, [r7, #0]
 8015b9e:	781b      	ldrb	r3, [r3, #0]
 8015ba0:	009b      	lsls	r3, r3, #2
 8015ba2:	18d3      	adds	r3, r2, r3
 8015ba4:	881b      	ldrh	r3, [r3, #0]
 8015ba6:	b29a      	uxth	r2, r3
 8015ba8:	2048      	movs	r0, #72	@ 0x48
 8015baa:	183b      	adds	r3, r7, r0
 8015bac:	4917      	ldr	r1, [pc, #92]	@ (8015c0c <USB_ActivateEndpoint+0x6a8>)
 8015bae:	400a      	ands	r2, r1
 8015bb0:	801a      	strh	r2, [r3, #0]
 8015bb2:	687a      	ldr	r2, [r7, #4]
 8015bb4:	683b      	ldr	r3, [r7, #0]
 8015bb6:	781b      	ldrb	r3, [r3, #0]
 8015bb8:	009b      	lsls	r3, r3, #2
 8015bba:	18d3      	adds	r3, r2, r3
 8015bbc:	183a      	adds	r2, r7, r0
 8015bbe:	8812      	ldrh	r2, [r2, #0]
 8015bc0:	4919      	ldr	r1, [pc, #100]	@ (8015c28 <USB_ActivateEndpoint+0x6c4>)
 8015bc2:	430a      	orrs	r2, r1
 8015bc4:	b292      	uxth	r2, r2
 8015bc6:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 8015bc8:	683b      	ldr	r3, [r7, #0]
 8015bca:	78db      	ldrb	r3, [r3, #3]
 8015bcc:	2b01      	cmp	r3, #1
 8015bce:	d02f      	beq.n	8015c30 <USB_ActivateEndpoint+0x6cc>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 8015bd0:	687a      	ldr	r2, [r7, #4]
 8015bd2:	683b      	ldr	r3, [r7, #0]
 8015bd4:	781b      	ldrb	r3, [r3, #0]
 8015bd6:	009b      	lsls	r3, r3, #2
 8015bd8:	18d3      	adds	r3, r2, r3
 8015bda:	881b      	ldrh	r3, [r3, #0]
 8015bdc:	b29a      	uxth	r2, r3
 8015bde:	2044      	movs	r0, #68	@ 0x44
 8015be0:	183b      	adds	r3, r7, r0
 8015be2:	4912      	ldr	r1, [pc, #72]	@ (8015c2c <USB_ActivateEndpoint+0x6c8>)
 8015be4:	400a      	ands	r2, r1
 8015be6:	801a      	strh	r2, [r3, #0]
 8015be8:	183b      	adds	r3, r7, r0
 8015bea:	183a      	adds	r2, r7, r0
 8015bec:	8812      	ldrh	r2, [r2, #0]
 8015bee:	2120      	movs	r1, #32
 8015bf0:	404a      	eors	r2, r1
 8015bf2:	801a      	strh	r2, [r3, #0]
 8015bf4:	687a      	ldr	r2, [r7, #4]
 8015bf6:	683b      	ldr	r3, [r7, #0]
 8015bf8:	781b      	ldrb	r3, [r3, #0]
 8015bfa:	009b      	lsls	r3, r3, #2
 8015bfc:	18d3      	adds	r3, r2, r3
 8015bfe:	183a      	adds	r2, r7, r0
 8015c00:	8812      	ldrh	r2, [r2, #0]
 8015c02:	4905      	ldr	r1, [pc, #20]	@ (8015c18 <USB_ActivateEndpoint+0x6b4>)
 8015c04:	430a      	orrs	r2, r1
 8015c06:	b292      	uxth	r2, r2
 8015c08:	801a      	strh	r2, [r3, #0]
 8015c0a:	e028      	b.n	8015c5e <USB_ActivateEndpoint+0x6fa>
 8015c0c:	ffff8f8f 	.word	0xffff8f8f
 8015c10:	ffffc080 	.word	0xffffc080
 8015c14:	ffffbf8f 	.word	0xffffbf8f
 8015c18:	ffff8080 	.word	0xffff8080
 8015c1c:	ffff8180 	.word	0xffff8180
 8015c20:	ffff8e8f 	.word	0xffff8e8f
 8015c24:	00000404 	.word	0x00000404
 8015c28:	ffff80c0 	.word	0xffff80c0
 8015c2c:	ffff8fbf 	.word	0xffff8fbf
      }
      else
      {
        /* Configure TX Endpoint to disabled state */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8015c30:	687a      	ldr	r2, [r7, #4]
 8015c32:	683b      	ldr	r3, [r7, #0]
 8015c34:	781b      	ldrb	r3, [r3, #0]
 8015c36:	009b      	lsls	r3, r3, #2
 8015c38:	18d3      	adds	r3, r2, r3
 8015c3a:	881b      	ldrh	r3, [r3, #0]
 8015c3c:	b29a      	uxth	r2, r3
 8015c3e:	2046      	movs	r0, #70	@ 0x46
 8015c40:	183b      	adds	r3, r7, r0
 8015c42:	4916      	ldr	r1, [pc, #88]	@ (8015c9c <USB_ActivateEndpoint+0x738>)
 8015c44:	400a      	ands	r2, r1
 8015c46:	801a      	strh	r2, [r3, #0]
 8015c48:	687a      	ldr	r2, [r7, #4]
 8015c4a:	683b      	ldr	r3, [r7, #0]
 8015c4c:	781b      	ldrb	r3, [r3, #0]
 8015c4e:	009b      	lsls	r3, r3, #2
 8015c50:	18d3      	adds	r3, r2, r3
 8015c52:	183a      	adds	r2, r7, r0
 8015c54:	8812      	ldrh	r2, [r2, #0]
 8015c56:	4912      	ldr	r1, [pc, #72]	@ (8015ca0 <USB_ActivateEndpoint+0x73c>)
 8015c58:	430a      	orrs	r2, r1
 8015c5a:	b292      	uxth	r2, r2
 8015c5c:	801a      	strh	r2, [r3, #0]
      }

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8015c5e:	687a      	ldr	r2, [r7, #4]
 8015c60:	683b      	ldr	r3, [r7, #0]
 8015c62:	781b      	ldrb	r3, [r3, #0]
 8015c64:	009b      	lsls	r3, r3, #2
 8015c66:	18d3      	adds	r3, r2, r3
 8015c68:	881b      	ldrh	r3, [r3, #0]
 8015c6a:	b29a      	uxth	r2, r3
 8015c6c:	2042      	movs	r0, #66	@ 0x42
 8015c6e:	183b      	adds	r3, r7, r0
 8015c70:	490c      	ldr	r1, [pc, #48]	@ (8015ca4 <USB_ActivateEndpoint+0x740>)
 8015c72:	400a      	ands	r2, r1
 8015c74:	801a      	strh	r2, [r3, #0]
 8015c76:	687a      	ldr	r2, [r7, #4]
 8015c78:	683b      	ldr	r3, [r7, #0]
 8015c7a:	781b      	ldrb	r3, [r3, #0]
 8015c7c:	009b      	lsls	r3, r3, #2
 8015c7e:	18d3      	adds	r3, r2, r3
 8015c80:	183a      	adds	r2, r7, r0
 8015c82:	8812      	ldrh	r2, [r2, #0]
 8015c84:	4906      	ldr	r1, [pc, #24]	@ (8015ca0 <USB_ActivateEndpoint+0x73c>)
 8015c86:	430a      	orrs	r2, r1
 8015c88:	b292      	uxth	r2, r2
 8015c8a:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return ret;
 8015c8c:	236f      	movs	r3, #111	@ 0x6f
 8015c8e:	18fb      	adds	r3, r7, r3
 8015c90:	781b      	ldrb	r3, [r3, #0]
}
 8015c92:	0018      	movs	r0, r3
 8015c94:	46bd      	mov	sp, r7
 8015c96:	b01c      	add	sp, #112	@ 0x70
 8015c98:	bd80      	pop	{r7, pc}
 8015c9a:	46c0      	nop			@ (mov r8, r8)
 8015c9c:	ffff8fbf 	.word	0xffff8fbf
 8015ca0:	ffff8080 	.word	0xffff8080
 8015ca4:	ffffbf8f 	.word	0xffffbf8f

08015ca8 <USB_DeactivateEndpoint>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_DeactivateEndpoint(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8015ca8:	b580      	push	{r7, lr}
 8015caa:	b08c      	sub	sp, #48	@ 0x30
 8015cac:	af00      	add	r7, sp, #0
 8015cae:	6078      	str	r0, [r7, #4]
 8015cb0:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8015cb2:	683b      	ldr	r3, [r7, #0]
 8015cb4:	7b1b      	ldrb	r3, [r3, #12]
 8015cb6:	2b00      	cmp	r3, #0
 8015cb8:	d000      	beq.n	8015cbc <USB_DeactivateEndpoint+0x14>
 8015cba:	e07e      	b.n	8015dba <USB_DeactivateEndpoint+0x112>
  {
    if (ep->is_in != 0U)
 8015cbc:	683b      	ldr	r3, [r7, #0]
 8015cbe:	785b      	ldrb	r3, [r3, #1]
 8015cc0:	2b00      	cmp	r3, #0
 8015cc2:	d03c      	beq.n	8015d3e <USB_DeactivateEndpoint+0x96>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8015cc4:	687a      	ldr	r2, [r7, #4]
 8015cc6:	683b      	ldr	r3, [r7, #0]
 8015cc8:	781b      	ldrb	r3, [r3, #0]
 8015cca:	009b      	lsls	r3, r3, #2
 8015ccc:	18d2      	adds	r2, r2, r3
 8015cce:	210c      	movs	r1, #12
 8015cd0:	187b      	adds	r3, r7, r1
 8015cd2:	8812      	ldrh	r2, [r2, #0]
 8015cd4:	801a      	strh	r2, [r3, #0]
 8015cd6:	187b      	adds	r3, r7, r1
 8015cd8:	881b      	ldrh	r3, [r3, #0]
 8015cda:	2240      	movs	r2, #64	@ 0x40
 8015cdc:	4013      	ands	r3, r2
 8015cde:	d016      	beq.n	8015d0e <USB_DeactivateEndpoint+0x66>
 8015ce0:	687a      	ldr	r2, [r7, #4]
 8015ce2:	683b      	ldr	r3, [r7, #0]
 8015ce4:	781b      	ldrb	r3, [r3, #0]
 8015ce6:	009b      	lsls	r3, r3, #2
 8015ce8:	18d3      	adds	r3, r2, r3
 8015cea:	881b      	ldrh	r3, [r3, #0]
 8015cec:	b29a      	uxth	r2, r3
 8015cee:	200a      	movs	r0, #10
 8015cf0:	183b      	adds	r3, r7, r0
 8015cf2:	49c7      	ldr	r1, [pc, #796]	@ (8016010 <USB_DeactivateEndpoint+0x368>)
 8015cf4:	400a      	ands	r2, r1
 8015cf6:	801a      	strh	r2, [r3, #0]
 8015cf8:	687a      	ldr	r2, [r7, #4]
 8015cfa:	683b      	ldr	r3, [r7, #0]
 8015cfc:	781b      	ldrb	r3, [r3, #0]
 8015cfe:	009b      	lsls	r3, r3, #2
 8015d00:	18d3      	adds	r3, r2, r3
 8015d02:	183a      	adds	r2, r7, r0
 8015d04:	8812      	ldrh	r2, [r2, #0]
 8015d06:	49c3      	ldr	r1, [pc, #780]	@ (8016014 <USB_DeactivateEndpoint+0x36c>)
 8015d08:	430a      	orrs	r2, r1
 8015d0a:	b292      	uxth	r2, r2
 8015d0c:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8015d0e:	687a      	ldr	r2, [r7, #4]
 8015d10:	683b      	ldr	r3, [r7, #0]
 8015d12:	781b      	ldrb	r3, [r3, #0]
 8015d14:	009b      	lsls	r3, r3, #2
 8015d16:	18d3      	adds	r3, r2, r3
 8015d18:	881b      	ldrh	r3, [r3, #0]
 8015d1a:	b29a      	uxth	r2, r3
 8015d1c:	2008      	movs	r0, #8
 8015d1e:	183b      	adds	r3, r7, r0
 8015d20:	49bd      	ldr	r1, [pc, #756]	@ (8016018 <USB_DeactivateEndpoint+0x370>)
 8015d22:	400a      	ands	r2, r1
 8015d24:	801a      	strh	r2, [r3, #0]
 8015d26:	687a      	ldr	r2, [r7, #4]
 8015d28:	683b      	ldr	r3, [r7, #0]
 8015d2a:	781b      	ldrb	r3, [r3, #0]
 8015d2c:	009b      	lsls	r3, r3, #2
 8015d2e:	18d3      	adds	r3, r2, r3
 8015d30:	183a      	adds	r2, r7, r0
 8015d32:	8812      	ldrh	r2, [r2, #0]
 8015d34:	49b9      	ldr	r1, [pc, #740]	@ (801601c <USB_DeactivateEndpoint+0x374>)
 8015d36:	430a      	orrs	r2, r1
 8015d38:	b292      	uxth	r2, r2
 8015d3a:	801a      	strh	r2, [r3, #0]
 8015d3c:	e163      	b.n	8016006 <USB_DeactivateEndpoint+0x35e>
    }

    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8015d3e:	687a      	ldr	r2, [r7, #4]
 8015d40:	683b      	ldr	r3, [r7, #0]
 8015d42:	781b      	ldrb	r3, [r3, #0]
 8015d44:	009b      	lsls	r3, r3, #2
 8015d46:	18d2      	adds	r2, r2, r3
 8015d48:	2112      	movs	r1, #18
 8015d4a:	187b      	adds	r3, r7, r1
 8015d4c:	8812      	ldrh	r2, [r2, #0]
 8015d4e:	801a      	strh	r2, [r3, #0]
 8015d50:	187b      	adds	r3, r7, r1
 8015d52:	881a      	ldrh	r2, [r3, #0]
 8015d54:	2380      	movs	r3, #128	@ 0x80
 8015d56:	01db      	lsls	r3, r3, #7
 8015d58:	4013      	ands	r3, r2
 8015d5a:	d016      	beq.n	8015d8a <USB_DeactivateEndpoint+0xe2>
 8015d5c:	687a      	ldr	r2, [r7, #4]
 8015d5e:	683b      	ldr	r3, [r7, #0]
 8015d60:	781b      	ldrb	r3, [r3, #0]
 8015d62:	009b      	lsls	r3, r3, #2
 8015d64:	18d3      	adds	r3, r2, r3
 8015d66:	881b      	ldrh	r3, [r3, #0]
 8015d68:	b29a      	uxth	r2, r3
 8015d6a:	2010      	movs	r0, #16
 8015d6c:	183b      	adds	r3, r7, r0
 8015d6e:	49a8      	ldr	r1, [pc, #672]	@ (8016010 <USB_DeactivateEndpoint+0x368>)
 8015d70:	400a      	ands	r2, r1
 8015d72:	801a      	strh	r2, [r3, #0]
 8015d74:	687a      	ldr	r2, [r7, #4]
 8015d76:	683b      	ldr	r3, [r7, #0]
 8015d78:	781b      	ldrb	r3, [r3, #0]
 8015d7a:	009b      	lsls	r3, r3, #2
 8015d7c:	18d3      	adds	r3, r2, r3
 8015d7e:	183a      	adds	r2, r7, r0
 8015d80:	8812      	ldrh	r2, [r2, #0]
 8015d82:	49a7      	ldr	r1, [pc, #668]	@ (8016020 <USB_DeactivateEndpoint+0x378>)
 8015d84:	430a      	orrs	r2, r1
 8015d86:	b292      	uxth	r2, r2
 8015d88:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8015d8a:	687a      	ldr	r2, [r7, #4]
 8015d8c:	683b      	ldr	r3, [r7, #0]
 8015d8e:	781b      	ldrb	r3, [r3, #0]
 8015d90:	009b      	lsls	r3, r3, #2
 8015d92:	18d3      	adds	r3, r2, r3
 8015d94:	881b      	ldrh	r3, [r3, #0]
 8015d96:	b29a      	uxth	r2, r3
 8015d98:	200e      	movs	r0, #14
 8015d9a:	183b      	adds	r3, r7, r0
 8015d9c:	49a1      	ldr	r1, [pc, #644]	@ (8016024 <USB_DeactivateEndpoint+0x37c>)
 8015d9e:	400a      	ands	r2, r1
 8015da0:	801a      	strh	r2, [r3, #0]
 8015da2:	687a      	ldr	r2, [r7, #4]
 8015da4:	683b      	ldr	r3, [r7, #0]
 8015da6:	781b      	ldrb	r3, [r3, #0]
 8015da8:	009b      	lsls	r3, r3, #2
 8015daa:	18d3      	adds	r3, r2, r3
 8015dac:	183a      	adds	r2, r7, r0
 8015dae:	8812      	ldrh	r2, [r2, #0]
 8015db0:	499a      	ldr	r1, [pc, #616]	@ (801601c <USB_DeactivateEndpoint+0x374>)
 8015db2:	430a      	orrs	r2, r1
 8015db4:	b292      	uxth	r2, r2
 8015db6:	801a      	strh	r2, [r3, #0]
 8015db8:	e125      	b.n	8016006 <USB_DeactivateEndpoint+0x35e>
  }
#if (USE_USB_DOUBLE_BUFFER == 1U)
  /* Double Buffer */
  else
  {
    if (ep->is_in == 0U)
 8015dba:	683b      	ldr	r3, [r7, #0]
 8015dbc:	785b      	ldrb	r3, [r3, #1]
 8015dbe:	2b00      	cmp	r3, #0
 8015dc0:	d000      	beq.n	8015dc4 <USB_DeactivateEndpoint+0x11c>
 8015dc2:	e090      	b.n	8015ee6 <USB_DeactivateEndpoint+0x23e>
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8015dc4:	687a      	ldr	r2, [r7, #4]
 8015dc6:	683b      	ldr	r3, [r7, #0]
 8015dc8:	781b      	ldrb	r3, [r3, #0]
 8015dca:	009b      	lsls	r3, r3, #2
 8015dcc:	18d2      	adds	r2, r2, r3
 8015dce:	2120      	movs	r1, #32
 8015dd0:	187b      	adds	r3, r7, r1
 8015dd2:	8812      	ldrh	r2, [r2, #0]
 8015dd4:	801a      	strh	r2, [r3, #0]
 8015dd6:	187b      	adds	r3, r7, r1
 8015dd8:	881a      	ldrh	r2, [r3, #0]
 8015dda:	2380      	movs	r3, #128	@ 0x80
 8015ddc:	01db      	lsls	r3, r3, #7
 8015dde:	4013      	ands	r3, r2
 8015de0:	d016      	beq.n	8015e10 <USB_DeactivateEndpoint+0x168>
 8015de2:	687a      	ldr	r2, [r7, #4]
 8015de4:	683b      	ldr	r3, [r7, #0]
 8015de6:	781b      	ldrb	r3, [r3, #0]
 8015de8:	009b      	lsls	r3, r3, #2
 8015dea:	18d3      	adds	r3, r2, r3
 8015dec:	881b      	ldrh	r3, [r3, #0]
 8015dee:	b29a      	uxth	r2, r3
 8015df0:	201e      	movs	r0, #30
 8015df2:	183b      	adds	r3, r7, r0
 8015df4:	4986      	ldr	r1, [pc, #536]	@ (8016010 <USB_DeactivateEndpoint+0x368>)
 8015df6:	400a      	ands	r2, r1
 8015df8:	801a      	strh	r2, [r3, #0]
 8015dfa:	687a      	ldr	r2, [r7, #4]
 8015dfc:	683b      	ldr	r3, [r7, #0]
 8015dfe:	781b      	ldrb	r3, [r3, #0]
 8015e00:	009b      	lsls	r3, r3, #2
 8015e02:	18d3      	adds	r3, r2, r3
 8015e04:	183a      	adds	r2, r7, r0
 8015e06:	8812      	ldrh	r2, [r2, #0]
 8015e08:	4985      	ldr	r1, [pc, #532]	@ (8016020 <USB_DeactivateEndpoint+0x378>)
 8015e0a:	430a      	orrs	r2, r1
 8015e0c:	b292      	uxth	r2, r2
 8015e0e:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8015e10:	687a      	ldr	r2, [r7, #4]
 8015e12:	683b      	ldr	r3, [r7, #0]
 8015e14:	781b      	ldrb	r3, [r3, #0]
 8015e16:	009b      	lsls	r3, r3, #2
 8015e18:	18d2      	adds	r2, r2, r3
 8015e1a:	211c      	movs	r1, #28
 8015e1c:	187b      	adds	r3, r7, r1
 8015e1e:	8812      	ldrh	r2, [r2, #0]
 8015e20:	801a      	strh	r2, [r3, #0]
 8015e22:	187b      	adds	r3, r7, r1
 8015e24:	881b      	ldrh	r3, [r3, #0]
 8015e26:	2240      	movs	r2, #64	@ 0x40
 8015e28:	4013      	ands	r3, r2
 8015e2a:	d016      	beq.n	8015e5a <USB_DeactivateEndpoint+0x1b2>
 8015e2c:	687a      	ldr	r2, [r7, #4]
 8015e2e:	683b      	ldr	r3, [r7, #0]
 8015e30:	781b      	ldrb	r3, [r3, #0]
 8015e32:	009b      	lsls	r3, r3, #2
 8015e34:	18d3      	adds	r3, r2, r3
 8015e36:	881b      	ldrh	r3, [r3, #0]
 8015e38:	b29a      	uxth	r2, r3
 8015e3a:	201a      	movs	r0, #26
 8015e3c:	183b      	adds	r3, r7, r0
 8015e3e:	4974      	ldr	r1, [pc, #464]	@ (8016010 <USB_DeactivateEndpoint+0x368>)
 8015e40:	400a      	ands	r2, r1
 8015e42:	801a      	strh	r2, [r3, #0]
 8015e44:	687a      	ldr	r2, [r7, #4]
 8015e46:	683b      	ldr	r3, [r7, #0]
 8015e48:	781b      	ldrb	r3, [r3, #0]
 8015e4a:	009b      	lsls	r3, r3, #2
 8015e4c:	18d3      	adds	r3, r2, r3
 8015e4e:	183a      	adds	r2, r7, r0
 8015e50:	8812      	ldrh	r2, [r2, #0]
 8015e52:	4970      	ldr	r1, [pc, #448]	@ (8016014 <USB_DeactivateEndpoint+0x36c>)
 8015e54:	430a      	orrs	r2, r1
 8015e56:	b292      	uxth	r2, r2
 8015e58:	801a      	strh	r2, [r3, #0]

      /* Reset value of the data toggle bits for the endpoint out*/
      PCD_TX_DTOG(USBx, ep->num);
 8015e5a:	687a      	ldr	r2, [r7, #4]
 8015e5c:	683b      	ldr	r3, [r7, #0]
 8015e5e:	781b      	ldrb	r3, [r3, #0]
 8015e60:	009b      	lsls	r3, r3, #2
 8015e62:	18d3      	adds	r3, r2, r3
 8015e64:	881b      	ldrh	r3, [r3, #0]
 8015e66:	b29a      	uxth	r2, r3
 8015e68:	2018      	movs	r0, #24
 8015e6a:	183b      	adds	r3, r7, r0
 8015e6c:	4968      	ldr	r1, [pc, #416]	@ (8016010 <USB_DeactivateEndpoint+0x368>)
 8015e6e:	400a      	ands	r2, r1
 8015e70:	801a      	strh	r2, [r3, #0]
 8015e72:	687a      	ldr	r2, [r7, #4]
 8015e74:	683b      	ldr	r3, [r7, #0]
 8015e76:	781b      	ldrb	r3, [r3, #0]
 8015e78:	009b      	lsls	r3, r3, #2
 8015e7a:	18d3      	adds	r3, r2, r3
 8015e7c:	183a      	adds	r2, r7, r0
 8015e7e:	8812      	ldrh	r2, [r2, #0]
 8015e80:	4964      	ldr	r1, [pc, #400]	@ (8016014 <USB_DeactivateEndpoint+0x36c>)
 8015e82:	430a      	orrs	r2, r1
 8015e84:	b292      	uxth	r2, r2
 8015e86:	801a      	strh	r2, [r3, #0]

      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8015e88:	687a      	ldr	r2, [r7, #4]
 8015e8a:	683b      	ldr	r3, [r7, #0]
 8015e8c:	781b      	ldrb	r3, [r3, #0]
 8015e8e:	009b      	lsls	r3, r3, #2
 8015e90:	18d3      	adds	r3, r2, r3
 8015e92:	881b      	ldrh	r3, [r3, #0]
 8015e94:	b29a      	uxth	r2, r3
 8015e96:	2016      	movs	r0, #22
 8015e98:	183b      	adds	r3, r7, r0
 8015e9a:	4962      	ldr	r1, [pc, #392]	@ (8016024 <USB_DeactivateEndpoint+0x37c>)
 8015e9c:	400a      	ands	r2, r1
 8015e9e:	801a      	strh	r2, [r3, #0]
 8015ea0:	687a      	ldr	r2, [r7, #4]
 8015ea2:	683b      	ldr	r3, [r7, #0]
 8015ea4:	781b      	ldrb	r3, [r3, #0]
 8015ea6:	009b      	lsls	r3, r3, #2
 8015ea8:	18d3      	adds	r3, r2, r3
 8015eaa:	183a      	adds	r2, r7, r0
 8015eac:	8812      	ldrh	r2, [r2, #0]
 8015eae:	495b      	ldr	r1, [pc, #364]	@ (801601c <USB_DeactivateEndpoint+0x374>)
 8015eb0:	430a      	orrs	r2, r1
 8015eb2:	b292      	uxth	r2, r2
 8015eb4:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8015eb6:	687a      	ldr	r2, [r7, #4]
 8015eb8:	683b      	ldr	r3, [r7, #0]
 8015eba:	781b      	ldrb	r3, [r3, #0]
 8015ebc:	009b      	lsls	r3, r3, #2
 8015ebe:	18d3      	adds	r3, r2, r3
 8015ec0:	881b      	ldrh	r3, [r3, #0]
 8015ec2:	b29a      	uxth	r2, r3
 8015ec4:	2014      	movs	r0, #20
 8015ec6:	183b      	adds	r3, r7, r0
 8015ec8:	4953      	ldr	r1, [pc, #332]	@ (8016018 <USB_DeactivateEndpoint+0x370>)
 8015eca:	400a      	ands	r2, r1
 8015ecc:	801a      	strh	r2, [r3, #0]
 8015ece:	687a      	ldr	r2, [r7, #4]
 8015ed0:	683b      	ldr	r3, [r7, #0]
 8015ed2:	781b      	ldrb	r3, [r3, #0]
 8015ed4:	009b      	lsls	r3, r3, #2
 8015ed6:	18d3      	adds	r3, r2, r3
 8015ed8:	183a      	adds	r2, r7, r0
 8015eda:	8812      	ldrh	r2, [r2, #0]
 8015edc:	494f      	ldr	r1, [pc, #316]	@ (801601c <USB_DeactivateEndpoint+0x374>)
 8015ede:	430a      	orrs	r2, r1
 8015ee0:	b292      	uxth	r2, r2
 8015ee2:	801a      	strh	r2, [r3, #0]
 8015ee4:	e08f      	b.n	8016006 <USB_DeactivateEndpoint+0x35e>
    }
    else
    {
      /* Clear the data toggle bits for the endpoint IN/OUT*/
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 8015ee6:	687a      	ldr	r2, [r7, #4]
 8015ee8:	683b      	ldr	r3, [r7, #0]
 8015eea:	781b      	ldrb	r3, [r3, #0]
 8015eec:	009b      	lsls	r3, r3, #2
 8015eee:	18d2      	adds	r2, r2, r3
 8015ef0:	212e      	movs	r1, #46	@ 0x2e
 8015ef2:	187b      	adds	r3, r7, r1
 8015ef4:	8812      	ldrh	r2, [r2, #0]
 8015ef6:	801a      	strh	r2, [r3, #0]
 8015ef8:	187b      	adds	r3, r7, r1
 8015efa:	881a      	ldrh	r2, [r3, #0]
 8015efc:	2380      	movs	r3, #128	@ 0x80
 8015efe:	01db      	lsls	r3, r3, #7
 8015f00:	4013      	ands	r3, r2
 8015f02:	d016      	beq.n	8015f32 <USB_DeactivateEndpoint+0x28a>
 8015f04:	687a      	ldr	r2, [r7, #4]
 8015f06:	683b      	ldr	r3, [r7, #0]
 8015f08:	781b      	ldrb	r3, [r3, #0]
 8015f0a:	009b      	lsls	r3, r3, #2
 8015f0c:	18d3      	adds	r3, r2, r3
 8015f0e:	881b      	ldrh	r3, [r3, #0]
 8015f10:	b29a      	uxth	r2, r3
 8015f12:	202c      	movs	r0, #44	@ 0x2c
 8015f14:	183b      	adds	r3, r7, r0
 8015f16:	493e      	ldr	r1, [pc, #248]	@ (8016010 <USB_DeactivateEndpoint+0x368>)
 8015f18:	400a      	ands	r2, r1
 8015f1a:	801a      	strh	r2, [r3, #0]
 8015f1c:	687a      	ldr	r2, [r7, #4]
 8015f1e:	683b      	ldr	r3, [r7, #0]
 8015f20:	781b      	ldrb	r3, [r3, #0]
 8015f22:	009b      	lsls	r3, r3, #2
 8015f24:	18d3      	adds	r3, r2, r3
 8015f26:	183a      	adds	r2, r7, r0
 8015f28:	8812      	ldrh	r2, [r2, #0]
 8015f2a:	493d      	ldr	r1, [pc, #244]	@ (8016020 <USB_DeactivateEndpoint+0x378>)
 8015f2c:	430a      	orrs	r2, r1
 8015f2e:	b292      	uxth	r2, r2
 8015f30:	801a      	strh	r2, [r3, #0]
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8015f32:	687a      	ldr	r2, [r7, #4]
 8015f34:	683b      	ldr	r3, [r7, #0]
 8015f36:	781b      	ldrb	r3, [r3, #0]
 8015f38:	009b      	lsls	r3, r3, #2
 8015f3a:	18d2      	adds	r2, r2, r3
 8015f3c:	212a      	movs	r1, #42	@ 0x2a
 8015f3e:	187b      	adds	r3, r7, r1
 8015f40:	8812      	ldrh	r2, [r2, #0]
 8015f42:	801a      	strh	r2, [r3, #0]
 8015f44:	187b      	adds	r3, r7, r1
 8015f46:	881b      	ldrh	r3, [r3, #0]
 8015f48:	2240      	movs	r2, #64	@ 0x40
 8015f4a:	4013      	ands	r3, r2
 8015f4c:	d016      	beq.n	8015f7c <USB_DeactivateEndpoint+0x2d4>
 8015f4e:	687a      	ldr	r2, [r7, #4]
 8015f50:	683b      	ldr	r3, [r7, #0]
 8015f52:	781b      	ldrb	r3, [r3, #0]
 8015f54:	009b      	lsls	r3, r3, #2
 8015f56:	18d3      	adds	r3, r2, r3
 8015f58:	881b      	ldrh	r3, [r3, #0]
 8015f5a:	b29a      	uxth	r2, r3
 8015f5c:	2028      	movs	r0, #40	@ 0x28
 8015f5e:	183b      	adds	r3, r7, r0
 8015f60:	492b      	ldr	r1, [pc, #172]	@ (8016010 <USB_DeactivateEndpoint+0x368>)
 8015f62:	400a      	ands	r2, r1
 8015f64:	801a      	strh	r2, [r3, #0]
 8015f66:	687a      	ldr	r2, [r7, #4]
 8015f68:	683b      	ldr	r3, [r7, #0]
 8015f6a:	781b      	ldrb	r3, [r3, #0]
 8015f6c:	009b      	lsls	r3, r3, #2
 8015f6e:	18d3      	adds	r3, r2, r3
 8015f70:	183a      	adds	r2, r7, r0
 8015f72:	8812      	ldrh	r2, [r2, #0]
 8015f74:	4927      	ldr	r1, [pc, #156]	@ (8016014 <USB_DeactivateEndpoint+0x36c>)
 8015f76:	430a      	orrs	r2, r1
 8015f78:	b292      	uxth	r2, r2
 8015f7a:	801a      	strh	r2, [r3, #0]
      PCD_RX_DTOG(USBx, ep->num);
 8015f7c:	687a      	ldr	r2, [r7, #4]
 8015f7e:	683b      	ldr	r3, [r7, #0]
 8015f80:	781b      	ldrb	r3, [r3, #0]
 8015f82:	009b      	lsls	r3, r3, #2
 8015f84:	18d3      	adds	r3, r2, r3
 8015f86:	881b      	ldrh	r3, [r3, #0]
 8015f88:	b29a      	uxth	r2, r3
 8015f8a:	2026      	movs	r0, #38	@ 0x26
 8015f8c:	183b      	adds	r3, r7, r0
 8015f8e:	4920      	ldr	r1, [pc, #128]	@ (8016010 <USB_DeactivateEndpoint+0x368>)
 8015f90:	400a      	ands	r2, r1
 8015f92:	801a      	strh	r2, [r3, #0]
 8015f94:	687a      	ldr	r2, [r7, #4]
 8015f96:	683b      	ldr	r3, [r7, #0]
 8015f98:	781b      	ldrb	r3, [r3, #0]
 8015f9a:	009b      	lsls	r3, r3, #2
 8015f9c:	18d3      	adds	r3, r2, r3
 8015f9e:	183a      	adds	r2, r7, r0
 8015fa0:	8812      	ldrh	r2, [r2, #0]
 8015fa2:	491f      	ldr	r1, [pc, #124]	@ (8016020 <USB_DeactivateEndpoint+0x378>)
 8015fa4:	430a      	orrs	r2, r1
 8015fa6:	b292      	uxth	r2, r2
 8015fa8:	801a      	strh	r2, [r3, #0]

      /* Configure DISABLE status for the Endpoint*/
      PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_DIS);
 8015faa:	687a      	ldr	r2, [r7, #4]
 8015fac:	683b      	ldr	r3, [r7, #0]
 8015fae:	781b      	ldrb	r3, [r3, #0]
 8015fb0:	009b      	lsls	r3, r3, #2
 8015fb2:	18d3      	adds	r3, r2, r3
 8015fb4:	881b      	ldrh	r3, [r3, #0]
 8015fb6:	b29a      	uxth	r2, r3
 8015fb8:	2024      	movs	r0, #36	@ 0x24
 8015fba:	183b      	adds	r3, r7, r0
 8015fbc:	4916      	ldr	r1, [pc, #88]	@ (8016018 <USB_DeactivateEndpoint+0x370>)
 8015fbe:	400a      	ands	r2, r1
 8015fc0:	801a      	strh	r2, [r3, #0]
 8015fc2:	687a      	ldr	r2, [r7, #4]
 8015fc4:	683b      	ldr	r3, [r7, #0]
 8015fc6:	781b      	ldrb	r3, [r3, #0]
 8015fc8:	009b      	lsls	r3, r3, #2
 8015fca:	18d3      	adds	r3, r2, r3
 8015fcc:	183a      	adds	r2, r7, r0
 8015fce:	8812      	ldrh	r2, [r2, #0]
 8015fd0:	4912      	ldr	r1, [pc, #72]	@ (801601c <USB_DeactivateEndpoint+0x374>)
 8015fd2:	430a      	orrs	r2, r1
 8015fd4:	b292      	uxth	r2, r2
 8015fd6:	801a      	strh	r2, [r3, #0]
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_DIS);
 8015fd8:	687a      	ldr	r2, [r7, #4]
 8015fda:	683b      	ldr	r3, [r7, #0]
 8015fdc:	781b      	ldrb	r3, [r3, #0]
 8015fde:	009b      	lsls	r3, r3, #2
 8015fe0:	18d3      	adds	r3, r2, r3
 8015fe2:	881b      	ldrh	r3, [r3, #0]
 8015fe4:	b29a      	uxth	r2, r3
 8015fe6:	2022      	movs	r0, #34	@ 0x22
 8015fe8:	183b      	adds	r3, r7, r0
 8015fea:	490e      	ldr	r1, [pc, #56]	@ (8016024 <USB_DeactivateEndpoint+0x37c>)
 8015fec:	400a      	ands	r2, r1
 8015fee:	801a      	strh	r2, [r3, #0]
 8015ff0:	687a      	ldr	r2, [r7, #4]
 8015ff2:	683b      	ldr	r3, [r7, #0]
 8015ff4:	781b      	ldrb	r3, [r3, #0]
 8015ff6:	009b      	lsls	r3, r3, #2
 8015ff8:	18d3      	adds	r3, r2, r3
 8015ffa:	183a      	adds	r2, r7, r0
 8015ffc:	8812      	ldrh	r2, [r2, #0]
 8015ffe:	4907      	ldr	r1, [pc, #28]	@ (801601c <USB_DeactivateEndpoint+0x374>)
 8016000:	430a      	orrs	r2, r1
 8016002:	b292      	uxth	r2, r2
 8016004:	801a      	strh	r2, [r3, #0]
    }
  }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  return HAL_OK;
 8016006:	2300      	movs	r3, #0
}
 8016008:	0018      	movs	r0, r3
 801600a:	46bd      	mov	sp, r7
 801600c:	b00c      	add	sp, #48	@ 0x30
 801600e:	bd80      	pop	{r7, pc}
 8016010:	ffff8f8f 	.word	0xffff8f8f
 8016014:	ffff80c0 	.word	0xffff80c0
 8016018:	ffff8fbf 	.word	0xffff8fbf
 801601c:	ffff8080 	.word	0xffff8080
 8016020:	ffffc080 	.word	0xffffc080
 8016024:	ffffbf8f 	.word	0xffffbf8f

08016028 <USB_EPStartXfer>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPStartXfer(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8016028:	b590      	push	{r4, r7, lr}
 801602a:	b0c3      	sub	sp, #268	@ 0x10c
 801602c:	af00      	add	r7, sp, #0
 801602e:	6078      	str	r0, [r7, #4]
 8016030:	6039      	str	r1, [r7, #0]
  uint16_t pmabuffer;
  uint16_t wEPVal;
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

  /* IN endpoint */
  if (ep->is_in == 1U)
 8016032:	683b      	ldr	r3, [r7, #0]
 8016034:	785b      	ldrb	r3, [r3, #1]
 8016036:	2b01      	cmp	r3, #1
 8016038:	d001      	beq.n	801603e <USB_EPStartXfer+0x16>
 801603a:	f000 fd2d 	bl	8016a98 <USB_EPStartXfer+0xa70>
  {
    /*Multi packet transfer*/
    if (ep->xfer_len > ep->maxpacket)
 801603e:	683b      	ldr	r3, [r7, #0]
 8016040:	699a      	ldr	r2, [r3, #24]
 8016042:	683b      	ldr	r3, [r7, #0]
 8016044:	691b      	ldr	r3, [r3, #16]
 8016046:	429a      	cmp	r2, r3
 8016048:	d905      	bls.n	8016056 <USB_EPStartXfer+0x2e>
    {
      len = ep->maxpacket;
 801604a:	683b      	ldr	r3, [r7, #0]
 801604c:	691b      	ldr	r3, [r3, #16]
 801604e:	1d7a      	adds	r2, r7, #5
 8016050:	32ff      	adds	r2, #255	@ 0xff
 8016052:	6013      	str	r3, [r2, #0]
 8016054:	e004      	b.n	8016060 <USB_EPStartXfer+0x38>
    }
    else
    {
      len = ep->xfer_len;
 8016056:	683b      	ldr	r3, [r7, #0]
 8016058:	699b      	ldr	r3, [r3, #24]
 801605a:	1d7a      	adds	r2, r7, #5
 801605c:	32ff      	adds	r2, #255	@ 0xff
 801605e:	6013      	str	r3, [r2, #0]
    }

    /* configure and validate Tx endpoint */
    if (ep->doublebuffer == 0U)
 8016060:	683b      	ldr	r3, [r7, #0]
 8016062:	7b1b      	ldrb	r3, [r3, #12]
 8016064:	2b00      	cmp	r3, #0
 8016066:	d125      	bne.n	80160b4 <USB_EPStartXfer+0x8c>
    {
      USB_WritePMA(USBx, ep->xfer_buff, ep->pmaadress, (uint16_t)len);
 8016068:	683b      	ldr	r3, [r7, #0]
 801606a:	6959      	ldr	r1, [r3, #20]
 801606c:	683b      	ldr	r3, [r7, #0]
 801606e:	88da      	ldrh	r2, [r3, #6]
 8016070:	1d7b      	adds	r3, r7, #5
 8016072:	33ff      	adds	r3, #255	@ 0xff
 8016074:	681b      	ldr	r3, [r3, #0]
 8016076:	b29b      	uxth	r3, r3
 8016078:	6878      	ldr	r0, [r7, #4]
 801607a:	f001 fa47 	bl	801750c <USB_WritePMA>
      PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 801607e:	687b      	ldr	r3, [r7, #4]
 8016080:	613b      	str	r3, [r7, #16]
 8016082:	687b      	ldr	r3, [r7, #4]
 8016084:	2250      	movs	r2, #80	@ 0x50
 8016086:	5a9b      	ldrh	r3, [r3, r2]
 8016088:	b29b      	uxth	r3, r3
 801608a:	001a      	movs	r2, r3
 801608c:	693b      	ldr	r3, [r7, #16]
 801608e:	189b      	adds	r3, r3, r2
 8016090:	613b      	str	r3, [r7, #16]
 8016092:	683b      	ldr	r3, [r7, #0]
 8016094:	781b      	ldrb	r3, [r3, #0]
 8016096:	00da      	lsls	r2, r3, #3
 8016098:	693b      	ldr	r3, [r7, #16]
 801609a:	18d3      	adds	r3, r2, r3
 801609c:	4ad7      	ldr	r2, [pc, #860]	@ (80163fc <USB_EPStartXfer+0x3d4>)
 801609e:	4694      	mov	ip, r2
 80160a0:	4463      	add	r3, ip
 80160a2:	60fb      	str	r3, [r7, #12]
 80160a4:	1d7b      	adds	r3, r7, #5
 80160a6:	33ff      	adds	r3, #255	@ 0xff
 80160a8:	681b      	ldr	r3, [r3, #0]
 80160aa:	b29a      	uxth	r2, r3
 80160ac:	68fb      	ldr	r3, [r7, #12]
 80160ae:	801a      	strh	r2, [r3, #0]
 80160b0:	f000 fccd 	bl	8016a4e <USB_EPStartXfer+0xa26>
    }
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* double buffer bulk management */
      if (ep->type == EP_TYPE_BULK)
 80160b4:	683b      	ldr	r3, [r7, #0]
 80160b6:	78db      	ldrb	r3, [r3, #3]
 80160b8:	2b02      	cmp	r3, #2
 80160ba:	d000      	beq.n	80160be <USB_EPStartXfer+0x96>
 80160bc:	e362      	b.n	8016784 <USB_EPStartXfer+0x75c>
      {
        if (ep->xfer_len_db > ep->maxpacket)
 80160be:	683b      	ldr	r3, [r7, #0]
 80160c0:	6a1a      	ldr	r2, [r3, #32]
 80160c2:	683b      	ldr	r3, [r7, #0]
 80160c4:	691b      	ldr	r3, [r3, #16]
 80160c6:	429a      	cmp	r2, r3
 80160c8:	d800      	bhi.n	80160cc <USB_EPStartXfer+0xa4>
 80160ca:	e309      	b.n	80166e0 <USB_EPStartXfer+0x6b8>
        {
          /* enable double buffer */
          PCD_SET_BULK_EP_DBUF(USBx, ep->num);
 80160cc:	687a      	ldr	r2, [r7, #4]
 80160ce:	683b      	ldr	r3, [r7, #0]
 80160d0:	781b      	ldrb	r3, [r3, #0]
 80160d2:	009b      	lsls	r3, r3, #2
 80160d4:	18d3      	adds	r3, r2, r3
 80160d6:	881b      	ldrh	r3, [r3, #0]
 80160d8:	b29a      	uxth	r2, r3
 80160da:	2056      	movs	r0, #86	@ 0x56
 80160dc:	183b      	adds	r3, r7, r0
 80160de:	49c8      	ldr	r1, [pc, #800]	@ (8016400 <USB_EPStartXfer+0x3d8>)
 80160e0:	400a      	ands	r2, r1
 80160e2:	801a      	strh	r2, [r3, #0]
 80160e4:	687a      	ldr	r2, [r7, #4]
 80160e6:	683b      	ldr	r3, [r7, #0]
 80160e8:	781b      	ldrb	r3, [r3, #0]
 80160ea:	009b      	lsls	r3, r3, #2
 80160ec:	18d3      	adds	r3, r2, r3
 80160ee:	183a      	adds	r2, r7, r0
 80160f0:	8812      	ldrh	r2, [r2, #0]
 80160f2:	49c4      	ldr	r1, [pc, #784]	@ (8016404 <USB_EPStartXfer+0x3dc>)
 80160f4:	430a      	orrs	r2, r1
 80160f6:	b292      	uxth	r2, r2
 80160f8:	801a      	strh	r2, [r3, #0]

          /* each Time to write in PMA xfer_len_db will */
          ep->xfer_len_db -= len;
 80160fa:	683b      	ldr	r3, [r7, #0]
 80160fc:	6a1a      	ldr	r2, [r3, #32]
 80160fe:	1d7b      	adds	r3, r7, #5
 8016100:	33ff      	adds	r3, #255	@ 0xff
 8016102:	681b      	ldr	r3, [r3, #0]
 8016104:	1ad2      	subs	r2, r2, r3
 8016106:	683b      	ldr	r3, [r7, #0]
 8016108:	621a      	str	r2, [r3, #32]

          /* Fill the two first buffer in the Buffer0 & Buffer1 */
          if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 801610a:	687a      	ldr	r2, [r7, #4]
 801610c:	683b      	ldr	r3, [r7, #0]
 801610e:	781b      	ldrb	r3, [r3, #0]
 8016110:	009b      	lsls	r3, r3, #2
 8016112:	18d3      	adds	r3, r2, r3
 8016114:	881b      	ldrh	r3, [r3, #0]
 8016116:	b29b      	uxth	r3, r3
 8016118:	001a      	movs	r2, r3
 801611a:	2340      	movs	r3, #64	@ 0x40
 801611c:	4013      	ands	r3, r2
 801611e:	d100      	bne.n	8016122 <USB_EPStartXfer+0xfa>
 8016120:	e176      	b.n	8016410 <USB_EPStartXfer+0x3e8>
          {
            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8016122:	687b      	ldr	r3, [r7, #4]
 8016124:	633b      	str	r3, [r7, #48]	@ 0x30
 8016126:	683b      	ldr	r3, [r7, #0]
 8016128:	785b      	ldrb	r3, [r3, #1]
 801612a:	2b00      	cmp	r3, #0
 801612c:	d000      	beq.n	8016130 <USB_EPStartXfer+0x108>
 801612e:	e074      	b.n	801621a <USB_EPStartXfer+0x1f2>
 8016130:	687b      	ldr	r3, [r7, #4]
 8016132:	62bb      	str	r3, [r7, #40]	@ 0x28
 8016134:	687b      	ldr	r3, [r7, #4]
 8016136:	2250      	movs	r2, #80	@ 0x50
 8016138:	5a9b      	ldrh	r3, [r3, r2]
 801613a:	b29b      	uxth	r3, r3
 801613c:	001a      	movs	r2, r3
 801613e:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 8016140:	189b      	adds	r3, r3, r2
 8016142:	62bb      	str	r3, [r7, #40]	@ 0x28
 8016144:	683b      	ldr	r3, [r7, #0]
 8016146:	781b      	ldrb	r3, [r3, #0]
 8016148:	00da      	lsls	r2, r3, #3
 801614a:	6abb      	ldr	r3, [r7, #40]	@ 0x28
 801614c:	18d3      	adds	r3, r2, r3
 801614e:	4aae      	ldr	r2, [pc, #696]	@ (8016408 <USB_EPStartXfer+0x3e0>)
 8016150:	4694      	mov	ip, r2
 8016152:	4463      	add	r3, ip
 8016154:	627b      	str	r3, [r7, #36]	@ 0x24
 8016156:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016158:	881b      	ldrh	r3, [r3, #0]
 801615a:	b29b      	uxth	r3, r3
 801615c:	059b      	lsls	r3, r3, #22
 801615e:	0d9b      	lsrs	r3, r3, #22
 8016160:	b29a      	uxth	r2, r3
 8016162:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016164:	801a      	strh	r2, [r3, #0]
 8016166:	1d7b      	adds	r3, r7, #5
 8016168:	33ff      	adds	r3, #255	@ 0xff
 801616a:	681b      	ldr	r3, [r3, #0]
 801616c:	2b3e      	cmp	r3, #62	@ 0x3e
 801616e:	d924      	bls.n	80161ba <USB_EPStartXfer+0x192>
 8016170:	1d7b      	adds	r3, r7, #5
 8016172:	33ff      	adds	r3, #255	@ 0xff
 8016174:	681b      	ldr	r3, [r3, #0]
 8016176:	095b      	lsrs	r3, r3, #5
 8016178:	1c7a      	adds	r2, r7, #1
 801617a:	32ff      	adds	r2, #255	@ 0xff
 801617c:	6013      	str	r3, [r2, #0]
 801617e:	1d7b      	adds	r3, r7, #5
 8016180:	33ff      	adds	r3, #255	@ 0xff
 8016182:	681b      	ldr	r3, [r3, #0]
 8016184:	221f      	movs	r2, #31
 8016186:	4013      	ands	r3, r2
 8016188:	d106      	bne.n	8016198 <USB_EPStartXfer+0x170>
 801618a:	1c7b      	adds	r3, r7, #1
 801618c:	33ff      	adds	r3, #255	@ 0xff
 801618e:	681b      	ldr	r3, [r3, #0]
 8016190:	3b01      	subs	r3, #1
 8016192:	1c7a      	adds	r2, r7, #1
 8016194:	32ff      	adds	r2, #255	@ 0xff
 8016196:	6013      	str	r3, [r2, #0]
 8016198:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801619a:	881b      	ldrh	r3, [r3, #0]
 801619c:	b29a      	uxth	r2, r3
 801619e:	1c7b      	adds	r3, r7, #1
 80161a0:	33ff      	adds	r3, #255	@ 0xff
 80161a2:	681b      	ldr	r3, [r3, #0]
 80161a4:	b29b      	uxth	r3, r3
 80161a6:	029b      	lsls	r3, r3, #10
 80161a8:	b29b      	uxth	r3, r3
 80161aa:	4313      	orrs	r3, r2
 80161ac:	b29b      	uxth	r3, r3
 80161ae:	4a97      	ldr	r2, [pc, #604]	@ (801640c <USB_EPStartXfer+0x3e4>)
 80161b0:	4313      	orrs	r3, r2
 80161b2:	b29a      	uxth	r2, r3
 80161b4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80161b6:	801a      	strh	r2, [r3, #0]
 80161b8:	e04a      	b.n	8016250 <USB_EPStartXfer+0x228>
 80161ba:	1d7b      	adds	r3, r7, #5
 80161bc:	33ff      	adds	r3, #255	@ 0xff
 80161be:	681b      	ldr	r3, [r3, #0]
 80161c0:	2b00      	cmp	r3, #0
 80161c2:	d108      	bne.n	80161d6 <USB_EPStartXfer+0x1ae>
 80161c4:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80161c6:	881b      	ldrh	r3, [r3, #0]
 80161c8:	b29b      	uxth	r3, r3
 80161ca:	4a90      	ldr	r2, [pc, #576]	@ (801640c <USB_EPStartXfer+0x3e4>)
 80161cc:	4313      	orrs	r3, r2
 80161ce:	b29a      	uxth	r2, r3
 80161d0:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 80161d2:	801a      	strh	r2, [r3, #0]
 80161d4:	e03c      	b.n	8016250 <USB_EPStartXfer+0x228>
 80161d6:	1d7b      	adds	r3, r7, #5
 80161d8:	33ff      	adds	r3, #255	@ 0xff
 80161da:	681b      	ldr	r3, [r3, #0]
 80161dc:	085b      	lsrs	r3, r3, #1
 80161de:	1c7a      	adds	r2, r7, #1
 80161e0:	32ff      	adds	r2, #255	@ 0xff
 80161e2:	6013      	str	r3, [r2, #0]
 80161e4:	1d7b      	adds	r3, r7, #5
 80161e6:	33ff      	adds	r3, #255	@ 0xff
 80161e8:	681b      	ldr	r3, [r3, #0]
 80161ea:	2201      	movs	r2, #1
 80161ec:	4013      	ands	r3, r2
 80161ee:	d006      	beq.n	80161fe <USB_EPStartXfer+0x1d6>
 80161f0:	1c7b      	adds	r3, r7, #1
 80161f2:	33ff      	adds	r3, #255	@ 0xff
 80161f4:	681b      	ldr	r3, [r3, #0]
 80161f6:	3301      	adds	r3, #1
 80161f8:	1c7a      	adds	r2, r7, #1
 80161fa:	32ff      	adds	r2, #255	@ 0xff
 80161fc:	6013      	str	r3, [r2, #0]
 80161fe:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016200:	881b      	ldrh	r3, [r3, #0]
 8016202:	b29a      	uxth	r2, r3
 8016204:	1c7b      	adds	r3, r7, #1
 8016206:	33ff      	adds	r3, #255	@ 0xff
 8016208:	681b      	ldr	r3, [r3, #0]
 801620a:	b29b      	uxth	r3, r3
 801620c:	029b      	lsls	r3, r3, #10
 801620e:	b29b      	uxth	r3, r3
 8016210:	4313      	orrs	r3, r2
 8016212:	b29a      	uxth	r2, r3
 8016214:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8016216:	801a      	strh	r2, [r3, #0]
 8016218:	e01a      	b.n	8016250 <USB_EPStartXfer+0x228>
 801621a:	683b      	ldr	r3, [r7, #0]
 801621c:	785b      	ldrb	r3, [r3, #1]
 801621e:	2b01      	cmp	r3, #1
 8016220:	d116      	bne.n	8016250 <USB_EPStartXfer+0x228>
 8016222:	687b      	ldr	r3, [r7, #4]
 8016224:	2250      	movs	r2, #80	@ 0x50
 8016226:	5a9b      	ldrh	r3, [r3, r2]
 8016228:	b29b      	uxth	r3, r3
 801622a:	001a      	movs	r2, r3
 801622c:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801622e:	189b      	adds	r3, r3, r2
 8016230:	633b      	str	r3, [r7, #48]	@ 0x30
 8016232:	683b      	ldr	r3, [r7, #0]
 8016234:	781b      	ldrb	r3, [r3, #0]
 8016236:	00da      	lsls	r2, r3, #3
 8016238:	6b3b      	ldr	r3, [r7, #48]	@ 0x30
 801623a:	18d3      	adds	r3, r2, r3
 801623c:	4a72      	ldr	r2, [pc, #456]	@ (8016408 <USB_EPStartXfer+0x3e0>)
 801623e:	4694      	mov	ip, r2
 8016240:	4463      	add	r3, ip
 8016242:	62fb      	str	r3, [r7, #44]	@ 0x2c
 8016244:	1d7b      	adds	r3, r7, #5
 8016246:	33ff      	adds	r3, #255	@ 0xff
 8016248:	681b      	ldr	r3, [r3, #0]
 801624a:	b29a      	uxth	r2, r3
 801624c:	6afb      	ldr	r3, [r7, #44]	@ 0x2c
 801624e:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 8016250:	2076      	movs	r0, #118	@ 0x76
 8016252:	183b      	adds	r3, r7, r0
 8016254:	683a      	ldr	r2, [r7, #0]
 8016256:	8952      	ldrh	r2, [r2, #10]
 8016258:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 801625a:	683b      	ldr	r3, [r7, #0]
 801625c:	6959      	ldr	r1, [r3, #20]
 801625e:	1d7b      	adds	r3, r7, #5
 8016260:	33ff      	adds	r3, #255	@ 0xff
 8016262:	681b      	ldr	r3, [r3, #0]
 8016264:	b29c      	uxth	r4, r3
 8016266:	183b      	adds	r3, r7, r0
 8016268:	881a      	ldrh	r2, [r3, #0]
 801626a:	6878      	ldr	r0, [r7, #4]
 801626c:	0023      	movs	r3, r4
 801626e:	f001 f94d 	bl	801750c <USB_WritePMA>
            ep->xfer_buff += len;
 8016272:	683b      	ldr	r3, [r7, #0]
 8016274:	695a      	ldr	r2, [r3, #20]
 8016276:	1d7b      	adds	r3, r7, #5
 8016278:	33ff      	adds	r3, #255	@ 0xff
 801627a:	681b      	ldr	r3, [r3, #0]
 801627c:	18d2      	adds	r2, r2, r3
 801627e:	683b      	ldr	r3, [r7, #0]
 8016280:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8016282:	683b      	ldr	r3, [r7, #0]
 8016284:	6a1a      	ldr	r2, [r3, #32]
 8016286:	683b      	ldr	r3, [r7, #0]
 8016288:	691b      	ldr	r3, [r3, #16]
 801628a:	429a      	cmp	r2, r3
 801628c:	d908      	bls.n	80162a0 <USB_EPStartXfer+0x278>
            {
              ep->xfer_len_db -= len;
 801628e:	683b      	ldr	r3, [r7, #0]
 8016290:	6a1a      	ldr	r2, [r3, #32]
 8016292:	1d7b      	adds	r3, r7, #5
 8016294:	33ff      	adds	r3, #255	@ 0xff
 8016296:	681b      	ldr	r3, [r3, #0]
 8016298:	1ad2      	subs	r2, r2, r3
 801629a:	683b      	ldr	r3, [r7, #0]
 801629c:	621a      	str	r2, [r3, #32]
 801629e:	e007      	b.n	80162b0 <USB_EPStartXfer+0x288>
            }
            else
            {
              len = ep->xfer_len_db;
 80162a0:	683b      	ldr	r3, [r7, #0]
 80162a2:	6a1b      	ldr	r3, [r3, #32]
 80162a4:	1d7a      	adds	r2, r7, #5
 80162a6:	32ff      	adds	r2, #255	@ 0xff
 80162a8:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 80162aa:	683b      	ldr	r3, [r7, #0]
 80162ac:	2200      	movs	r2, #0
 80162ae:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80162b0:	683b      	ldr	r3, [r7, #0]
 80162b2:	785b      	ldrb	r3, [r3, #1]
 80162b4:	2b00      	cmp	r3, #0
 80162b6:	d000      	beq.n	80162ba <USB_EPStartXfer+0x292>
 80162b8:	e070      	b.n	801639c <USB_EPStartXfer+0x374>
 80162ba:	687b      	ldr	r3, [r7, #4]
 80162bc:	61bb      	str	r3, [r7, #24]
 80162be:	687b      	ldr	r3, [r7, #4]
 80162c0:	2250      	movs	r2, #80	@ 0x50
 80162c2:	5a9b      	ldrh	r3, [r3, r2]
 80162c4:	b29b      	uxth	r3, r3
 80162c6:	001a      	movs	r2, r3
 80162c8:	69bb      	ldr	r3, [r7, #24]
 80162ca:	189b      	adds	r3, r3, r2
 80162cc:	61bb      	str	r3, [r7, #24]
 80162ce:	683b      	ldr	r3, [r7, #0]
 80162d0:	781b      	ldrb	r3, [r3, #0]
 80162d2:	00da      	lsls	r2, r3, #3
 80162d4:	69bb      	ldr	r3, [r7, #24]
 80162d6:	18d3      	adds	r3, r2, r3
 80162d8:	4a48      	ldr	r2, [pc, #288]	@ (80163fc <USB_EPStartXfer+0x3d4>)
 80162da:	4694      	mov	ip, r2
 80162dc:	4463      	add	r3, ip
 80162de:	617b      	str	r3, [r7, #20]
 80162e0:	697b      	ldr	r3, [r7, #20]
 80162e2:	881b      	ldrh	r3, [r3, #0]
 80162e4:	b29b      	uxth	r3, r3
 80162e6:	059b      	lsls	r3, r3, #22
 80162e8:	0d9b      	lsrs	r3, r3, #22
 80162ea:	b29a      	uxth	r2, r3
 80162ec:	697b      	ldr	r3, [r7, #20]
 80162ee:	801a      	strh	r2, [r3, #0]
 80162f0:	1d7b      	adds	r3, r7, #5
 80162f2:	33ff      	adds	r3, #255	@ 0xff
 80162f4:	681b      	ldr	r3, [r3, #0]
 80162f6:	2b3e      	cmp	r3, #62	@ 0x3e
 80162f8:	d922      	bls.n	8016340 <USB_EPStartXfer+0x318>
 80162fa:	1d7b      	adds	r3, r7, #5
 80162fc:	33ff      	adds	r3, #255	@ 0xff
 80162fe:	681b      	ldr	r3, [r3, #0]
 8016300:	095b      	lsrs	r3, r3, #5
 8016302:	21fc      	movs	r1, #252	@ 0xfc
 8016304:	187a      	adds	r2, r7, r1
 8016306:	6013      	str	r3, [r2, #0]
 8016308:	1d7b      	adds	r3, r7, #5
 801630a:	33ff      	adds	r3, #255	@ 0xff
 801630c:	681b      	ldr	r3, [r3, #0]
 801630e:	221f      	movs	r2, #31
 8016310:	4013      	ands	r3, r2
 8016312:	d104      	bne.n	801631e <USB_EPStartXfer+0x2f6>
 8016314:	187b      	adds	r3, r7, r1
 8016316:	681b      	ldr	r3, [r3, #0]
 8016318:	3b01      	subs	r3, #1
 801631a:	187a      	adds	r2, r7, r1
 801631c:	6013      	str	r3, [r2, #0]
 801631e:	697b      	ldr	r3, [r7, #20]
 8016320:	881b      	ldrh	r3, [r3, #0]
 8016322:	b29a      	uxth	r2, r3
 8016324:	23fc      	movs	r3, #252	@ 0xfc
 8016326:	18fb      	adds	r3, r7, r3
 8016328:	681b      	ldr	r3, [r3, #0]
 801632a:	b29b      	uxth	r3, r3
 801632c:	029b      	lsls	r3, r3, #10
 801632e:	b29b      	uxth	r3, r3
 8016330:	4313      	orrs	r3, r2
 8016332:	b29b      	uxth	r3, r3
 8016334:	4a35      	ldr	r2, [pc, #212]	@ (801640c <USB_EPStartXfer+0x3e4>)
 8016336:	4313      	orrs	r3, r2
 8016338:	b29a      	uxth	r2, r3
 801633a:	697b      	ldr	r3, [r7, #20]
 801633c:	801a      	strh	r2, [r3, #0]
 801633e:	e04a      	b.n	80163d6 <USB_EPStartXfer+0x3ae>
 8016340:	1d7b      	adds	r3, r7, #5
 8016342:	33ff      	adds	r3, #255	@ 0xff
 8016344:	681b      	ldr	r3, [r3, #0]
 8016346:	2b00      	cmp	r3, #0
 8016348:	d108      	bne.n	801635c <USB_EPStartXfer+0x334>
 801634a:	697b      	ldr	r3, [r7, #20]
 801634c:	881b      	ldrh	r3, [r3, #0]
 801634e:	b29b      	uxth	r3, r3
 8016350:	4a2e      	ldr	r2, [pc, #184]	@ (801640c <USB_EPStartXfer+0x3e4>)
 8016352:	4313      	orrs	r3, r2
 8016354:	b29a      	uxth	r2, r3
 8016356:	697b      	ldr	r3, [r7, #20]
 8016358:	801a      	strh	r2, [r3, #0]
 801635a:	e03c      	b.n	80163d6 <USB_EPStartXfer+0x3ae>
 801635c:	1d7b      	adds	r3, r7, #5
 801635e:	33ff      	adds	r3, #255	@ 0xff
 8016360:	681b      	ldr	r3, [r3, #0]
 8016362:	085b      	lsrs	r3, r3, #1
 8016364:	21fc      	movs	r1, #252	@ 0xfc
 8016366:	187a      	adds	r2, r7, r1
 8016368:	6013      	str	r3, [r2, #0]
 801636a:	1d7b      	adds	r3, r7, #5
 801636c:	33ff      	adds	r3, #255	@ 0xff
 801636e:	681b      	ldr	r3, [r3, #0]
 8016370:	2201      	movs	r2, #1
 8016372:	4013      	ands	r3, r2
 8016374:	d004      	beq.n	8016380 <USB_EPStartXfer+0x358>
 8016376:	187b      	adds	r3, r7, r1
 8016378:	681b      	ldr	r3, [r3, #0]
 801637a:	3301      	adds	r3, #1
 801637c:	187a      	adds	r2, r7, r1
 801637e:	6013      	str	r3, [r2, #0]
 8016380:	697b      	ldr	r3, [r7, #20]
 8016382:	881b      	ldrh	r3, [r3, #0]
 8016384:	b29a      	uxth	r2, r3
 8016386:	23fc      	movs	r3, #252	@ 0xfc
 8016388:	18fb      	adds	r3, r7, r3
 801638a:	681b      	ldr	r3, [r3, #0]
 801638c:	b29b      	uxth	r3, r3
 801638e:	029b      	lsls	r3, r3, #10
 8016390:	b29b      	uxth	r3, r3
 8016392:	4313      	orrs	r3, r2
 8016394:	b29a      	uxth	r2, r3
 8016396:	697b      	ldr	r3, [r7, #20]
 8016398:	801a      	strh	r2, [r3, #0]
 801639a:	e01c      	b.n	80163d6 <USB_EPStartXfer+0x3ae>
 801639c:	683b      	ldr	r3, [r7, #0]
 801639e:	785b      	ldrb	r3, [r3, #1]
 80163a0:	2b01      	cmp	r3, #1
 80163a2:	d118      	bne.n	80163d6 <USB_EPStartXfer+0x3ae>
 80163a4:	687b      	ldr	r3, [r7, #4]
 80163a6:	623b      	str	r3, [r7, #32]
 80163a8:	687b      	ldr	r3, [r7, #4]
 80163aa:	2250      	movs	r2, #80	@ 0x50
 80163ac:	5a9b      	ldrh	r3, [r3, r2]
 80163ae:	b29b      	uxth	r3, r3
 80163b0:	001a      	movs	r2, r3
 80163b2:	6a3b      	ldr	r3, [r7, #32]
 80163b4:	189b      	adds	r3, r3, r2
 80163b6:	623b      	str	r3, [r7, #32]
 80163b8:	683b      	ldr	r3, [r7, #0]
 80163ba:	781b      	ldrb	r3, [r3, #0]
 80163bc:	00da      	lsls	r2, r3, #3
 80163be:	6a3b      	ldr	r3, [r7, #32]
 80163c0:	18d3      	adds	r3, r2, r3
 80163c2:	4a0e      	ldr	r2, [pc, #56]	@ (80163fc <USB_EPStartXfer+0x3d4>)
 80163c4:	4694      	mov	ip, r2
 80163c6:	4463      	add	r3, ip
 80163c8:	61fb      	str	r3, [r7, #28]
 80163ca:	1d7b      	adds	r3, r7, #5
 80163cc:	33ff      	adds	r3, #255	@ 0xff
 80163ce:	681b      	ldr	r3, [r3, #0]
 80163d0:	b29a      	uxth	r2, r3
 80163d2:	69fb      	ldr	r3, [r7, #28]
 80163d4:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 80163d6:	2076      	movs	r0, #118	@ 0x76
 80163d8:	183b      	adds	r3, r7, r0
 80163da:	683a      	ldr	r2, [r7, #0]
 80163dc:	8912      	ldrh	r2, [r2, #8]
 80163de:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80163e0:	683b      	ldr	r3, [r7, #0]
 80163e2:	6959      	ldr	r1, [r3, #20]
 80163e4:	1d7b      	adds	r3, r7, #5
 80163e6:	33ff      	adds	r3, #255	@ 0xff
 80163e8:	681b      	ldr	r3, [r3, #0]
 80163ea:	b29c      	uxth	r4, r3
 80163ec:	183b      	adds	r3, r7, r0
 80163ee:	881a      	ldrh	r2, [r3, #0]
 80163f0:	6878      	ldr	r0, [r7, #4]
 80163f2:	0023      	movs	r3, r4
 80163f4:	f001 f88a 	bl	801750c <USB_WritePMA>
 80163f8:	e329      	b.n	8016a4e <USB_EPStartXfer+0xa26>
 80163fa:	46c0      	nop			@ (mov r8, r8)
 80163fc:	00000402 	.word	0x00000402
 8016400:	ffff8f8f 	.word	0xffff8f8f
 8016404:	ffff8180 	.word	0xffff8180
 8016408:	00000406 	.word	0x00000406
 801640c:	ffff8000 	.word	0xffff8000
          }
          else
          {
            /* Set the Double buffer counter for pmabuffer0 */
            PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 8016410:	683b      	ldr	r3, [r7, #0]
 8016412:	785b      	ldrb	r3, [r3, #1]
 8016414:	2b00      	cmp	r3, #0
 8016416:	d000      	beq.n	801641a <USB_EPStartXfer+0x3f2>
 8016418:	e070      	b.n	80164fc <USB_EPStartXfer+0x4d4>
 801641a:	687b      	ldr	r3, [r7, #4]
 801641c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801641e:	687b      	ldr	r3, [r7, #4]
 8016420:	2250      	movs	r2, #80	@ 0x50
 8016422:	5a9b      	ldrh	r3, [r3, r2]
 8016424:	b29b      	uxth	r3, r3
 8016426:	001a      	movs	r2, r3
 8016428:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 801642a:	189b      	adds	r3, r3, r2
 801642c:	64bb      	str	r3, [r7, #72]	@ 0x48
 801642e:	683b      	ldr	r3, [r7, #0]
 8016430:	781b      	ldrb	r3, [r3, #0]
 8016432:	00da      	lsls	r2, r3, #3
 8016434:	6cbb      	ldr	r3, [r7, #72]	@ 0x48
 8016436:	18d3      	adds	r3, r2, r3
 8016438:	4acd      	ldr	r2, [pc, #820]	@ (8016770 <USB_EPStartXfer+0x748>)
 801643a:	4694      	mov	ip, r2
 801643c:	4463      	add	r3, ip
 801643e:	647b      	str	r3, [r7, #68]	@ 0x44
 8016440:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016442:	881b      	ldrh	r3, [r3, #0]
 8016444:	b29b      	uxth	r3, r3
 8016446:	059b      	lsls	r3, r3, #22
 8016448:	0d9b      	lsrs	r3, r3, #22
 801644a:	b29a      	uxth	r2, r3
 801644c:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801644e:	801a      	strh	r2, [r3, #0]
 8016450:	1d7b      	adds	r3, r7, #5
 8016452:	33ff      	adds	r3, #255	@ 0xff
 8016454:	681b      	ldr	r3, [r3, #0]
 8016456:	2b3e      	cmp	r3, #62	@ 0x3e
 8016458:	d922      	bls.n	80164a0 <USB_EPStartXfer+0x478>
 801645a:	1d7b      	adds	r3, r7, #5
 801645c:	33ff      	adds	r3, #255	@ 0xff
 801645e:	681b      	ldr	r3, [r3, #0]
 8016460:	095b      	lsrs	r3, r3, #5
 8016462:	21f8      	movs	r1, #248	@ 0xf8
 8016464:	187a      	adds	r2, r7, r1
 8016466:	6013      	str	r3, [r2, #0]
 8016468:	1d7b      	adds	r3, r7, #5
 801646a:	33ff      	adds	r3, #255	@ 0xff
 801646c:	681b      	ldr	r3, [r3, #0]
 801646e:	221f      	movs	r2, #31
 8016470:	4013      	ands	r3, r2
 8016472:	d104      	bne.n	801647e <USB_EPStartXfer+0x456>
 8016474:	187b      	adds	r3, r7, r1
 8016476:	681b      	ldr	r3, [r3, #0]
 8016478:	3b01      	subs	r3, #1
 801647a:	187a      	adds	r2, r7, r1
 801647c:	6013      	str	r3, [r2, #0]
 801647e:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 8016480:	881b      	ldrh	r3, [r3, #0]
 8016482:	b29a      	uxth	r2, r3
 8016484:	23f8      	movs	r3, #248	@ 0xf8
 8016486:	18fb      	adds	r3, r7, r3
 8016488:	681b      	ldr	r3, [r3, #0]
 801648a:	b29b      	uxth	r3, r3
 801648c:	029b      	lsls	r3, r3, #10
 801648e:	b29b      	uxth	r3, r3
 8016490:	4313      	orrs	r3, r2
 8016492:	b29b      	uxth	r3, r3
 8016494:	4ab7      	ldr	r2, [pc, #732]	@ (8016774 <USB_EPStartXfer+0x74c>)
 8016496:	4313      	orrs	r3, r2
 8016498:	b29a      	uxth	r2, r3
 801649a:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 801649c:	801a      	strh	r2, [r3, #0]
 801649e:	e04a      	b.n	8016536 <USB_EPStartXfer+0x50e>
 80164a0:	1d7b      	adds	r3, r7, #5
 80164a2:	33ff      	adds	r3, #255	@ 0xff
 80164a4:	681b      	ldr	r3, [r3, #0]
 80164a6:	2b00      	cmp	r3, #0
 80164a8:	d108      	bne.n	80164bc <USB_EPStartXfer+0x494>
 80164aa:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80164ac:	881b      	ldrh	r3, [r3, #0]
 80164ae:	b29b      	uxth	r3, r3
 80164b0:	4ab0      	ldr	r2, [pc, #704]	@ (8016774 <USB_EPStartXfer+0x74c>)
 80164b2:	4313      	orrs	r3, r2
 80164b4:	b29a      	uxth	r2, r3
 80164b6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80164b8:	801a      	strh	r2, [r3, #0]
 80164ba:	e03c      	b.n	8016536 <USB_EPStartXfer+0x50e>
 80164bc:	1d7b      	adds	r3, r7, #5
 80164be:	33ff      	adds	r3, #255	@ 0xff
 80164c0:	681b      	ldr	r3, [r3, #0]
 80164c2:	085b      	lsrs	r3, r3, #1
 80164c4:	21f8      	movs	r1, #248	@ 0xf8
 80164c6:	187a      	adds	r2, r7, r1
 80164c8:	6013      	str	r3, [r2, #0]
 80164ca:	1d7b      	adds	r3, r7, #5
 80164cc:	33ff      	adds	r3, #255	@ 0xff
 80164ce:	681b      	ldr	r3, [r3, #0]
 80164d0:	2201      	movs	r2, #1
 80164d2:	4013      	ands	r3, r2
 80164d4:	d004      	beq.n	80164e0 <USB_EPStartXfer+0x4b8>
 80164d6:	187b      	adds	r3, r7, r1
 80164d8:	681b      	ldr	r3, [r3, #0]
 80164da:	3301      	adds	r3, #1
 80164dc:	187a      	adds	r2, r7, r1
 80164de:	6013      	str	r3, [r2, #0]
 80164e0:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80164e2:	881b      	ldrh	r3, [r3, #0]
 80164e4:	b29a      	uxth	r2, r3
 80164e6:	23f8      	movs	r3, #248	@ 0xf8
 80164e8:	18fb      	adds	r3, r7, r3
 80164ea:	681b      	ldr	r3, [r3, #0]
 80164ec:	b29b      	uxth	r3, r3
 80164ee:	029b      	lsls	r3, r3, #10
 80164f0:	b29b      	uxth	r3, r3
 80164f2:	4313      	orrs	r3, r2
 80164f4:	b29a      	uxth	r2, r3
 80164f6:	6c7b      	ldr	r3, [r7, #68]	@ 0x44
 80164f8:	801a      	strh	r2, [r3, #0]
 80164fa:	e01c      	b.n	8016536 <USB_EPStartXfer+0x50e>
 80164fc:	683b      	ldr	r3, [r7, #0]
 80164fe:	785b      	ldrb	r3, [r3, #1]
 8016500:	2b01      	cmp	r3, #1
 8016502:	d118      	bne.n	8016536 <USB_EPStartXfer+0x50e>
 8016504:	687b      	ldr	r3, [r7, #4]
 8016506:	653b      	str	r3, [r7, #80]	@ 0x50
 8016508:	687b      	ldr	r3, [r7, #4]
 801650a:	2250      	movs	r2, #80	@ 0x50
 801650c:	5a9b      	ldrh	r3, [r3, r2]
 801650e:	b29b      	uxth	r3, r3
 8016510:	001a      	movs	r2, r3
 8016512:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016514:	189b      	adds	r3, r3, r2
 8016516:	653b      	str	r3, [r7, #80]	@ 0x50
 8016518:	683b      	ldr	r3, [r7, #0]
 801651a:	781b      	ldrb	r3, [r3, #0]
 801651c:	00da      	lsls	r2, r3, #3
 801651e:	6d3b      	ldr	r3, [r7, #80]	@ 0x50
 8016520:	18d3      	adds	r3, r2, r3
 8016522:	4a93      	ldr	r2, [pc, #588]	@ (8016770 <USB_EPStartXfer+0x748>)
 8016524:	4694      	mov	ip, r2
 8016526:	4463      	add	r3, ip
 8016528:	64fb      	str	r3, [r7, #76]	@ 0x4c
 801652a:	1d7b      	adds	r3, r7, #5
 801652c:	33ff      	adds	r3, #255	@ 0xff
 801652e:	681b      	ldr	r3, [r3, #0]
 8016530:	b29a      	uxth	r2, r3
 8016532:	6cfb      	ldr	r3, [r7, #76]	@ 0x4c
 8016534:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr0;
 8016536:	2076      	movs	r0, #118	@ 0x76
 8016538:	183b      	adds	r3, r7, r0
 801653a:	683a      	ldr	r2, [r7, #0]
 801653c:	8912      	ldrh	r2, [r2, #8]
 801653e:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8016540:	683b      	ldr	r3, [r7, #0]
 8016542:	6959      	ldr	r1, [r3, #20]
 8016544:	1d7b      	adds	r3, r7, #5
 8016546:	33ff      	adds	r3, #255	@ 0xff
 8016548:	681b      	ldr	r3, [r3, #0]
 801654a:	b29c      	uxth	r4, r3
 801654c:	183b      	adds	r3, r7, r0
 801654e:	881a      	ldrh	r2, [r3, #0]
 8016550:	6878      	ldr	r0, [r7, #4]
 8016552:	0023      	movs	r3, r4
 8016554:	f000 ffda 	bl	801750c <USB_WritePMA>
            ep->xfer_buff += len;
 8016558:	683b      	ldr	r3, [r7, #0]
 801655a:	695a      	ldr	r2, [r3, #20]
 801655c:	1d7b      	adds	r3, r7, #5
 801655e:	33ff      	adds	r3, #255	@ 0xff
 8016560:	681b      	ldr	r3, [r3, #0]
 8016562:	18d2      	adds	r2, r2, r3
 8016564:	683b      	ldr	r3, [r7, #0]
 8016566:	615a      	str	r2, [r3, #20]

            if (ep->xfer_len_db > ep->maxpacket)
 8016568:	683b      	ldr	r3, [r7, #0]
 801656a:	6a1a      	ldr	r2, [r3, #32]
 801656c:	683b      	ldr	r3, [r7, #0]
 801656e:	691b      	ldr	r3, [r3, #16]
 8016570:	429a      	cmp	r2, r3
 8016572:	d908      	bls.n	8016586 <USB_EPStartXfer+0x55e>
            {
              ep->xfer_len_db -= len;
 8016574:	683b      	ldr	r3, [r7, #0]
 8016576:	6a1a      	ldr	r2, [r3, #32]
 8016578:	1d7b      	adds	r3, r7, #5
 801657a:	33ff      	adds	r3, #255	@ 0xff
 801657c:	681b      	ldr	r3, [r3, #0]
 801657e:	1ad2      	subs	r2, r2, r3
 8016580:	683b      	ldr	r3, [r7, #0]
 8016582:	621a      	str	r2, [r3, #32]
 8016584:	e007      	b.n	8016596 <USB_EPStartXfer+0x56e>
            }
            else
            {
              len = ep->xfer_len_db;
 8016586:	683b      	ldr	r3, [r7, #0]
 8016588:	6a1b      	ldr	r3, [r3, #32]
 801658a:	1d7a      	adds	r2, r7, #5
 801658c:	32ff      	adds	r2, #255	@ 0xff
 801658e:	6013      	str	r3, [r2, #0]
              ep->xfer_len_db = 0U;
 8016590:	683b      	ldr	r3, [r7, #0]
 8016592:	2200      	movs	r2, #0
 8016594:	621a      	str	r2, [r3, #32]
            }

            /* Set the Double buffer counter for pmabuffer1 */
            PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 8016596:	687b      	ldr	r3, [r7, #4]
 8016598:	643b      	str	r3, [r7, #64]	@ 0x40
 801659a:	683b      	ldr	r3, [r7, #0]
 801659c:	785b      	ldrb	r3, [r3, #1]
 801659e:	2b00      	cmp	r3, #0
 80165a0:	d000      	beq.n	80165a4 <USB_EPStartXfer+0x57c>
 80165a2:	e070      	b.n	8016686 <USB_EPStartXfer+0x65e>
 80165a4:	687b      	ldr	r3, [r7, #4]
 80165a6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80165a8:	687b      	ldr	r3, [r7, #4]
 80165aa:	2250      	movs	r2, #80	@ 0x50
 80165ac:	5a9b      	ldrh	r3, [r3, r2]
 80165ae:	b29b      	uxth	r3, r3
 80165b0:	001a      	movs	r2, r3
 80165b2:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80165b4:	189b      	adds	r3, r3, r2
 80165b6:	63bb      	str	r3, [r7, #56]	@ 0x38
 80165b8:	683b      	ldr	r3, [r7, #0]
 80165ba:	781b      	ldrb	r3, [r3, #0]
 80165bc:	00da      	lsls	r2, r3, #3
 80165be:	6bbb      	ldr	r3, [r7, #56]	@ 0x38
 80165c0:	18d3      	adds	r3, r2, r3
 80165c2:	4a6d      	ldr	r2, [pc, #436]	@ (8016778 <USB_EPStartXfer+0x750>)
 80165c4:	4694      	mov	ip, r2
 80165c6:	4463      	add	r3, ip
 80165c8:	637b      	str	r3, [r7, #52]	@ 0x34
 80165ca:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80165cc:	881b      	ldrh	r3, [r3, #0]
 80165ce:	b29b      	uxth	r3, r3
 80165d0:	059b      	lsls	r3, r3, #22
 80165d2:	0d9b      	lsrs	r3, r3, #22
 80165d4:	b29a      	uxth	r2, r3
 80165d6:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 80165d8:	801a      	strh	r2, [r3, #0]
 80165da:	1d7b      	adds	r3, r7, #5
 80165dc:	33ff      	adds	r3, #255	@ 0xff
 80165de:	681b      	ldr	r3, [r3, #0]
 80165e0:	2b3e      	cmp	r3, #62	@ 0x3e
 80165e2:	d922      	bls.n	801662a <USB_EPStartXfer+0x602>
 80165e4:	1d7b      	adds	r3, r7, #5
 80165e6:	33ff      	adds	r3, #255	@ 0xff
 80165e8:	681b      	ldr	r3, [r3, #0]
 80165ea:	095b      	lsrs	r3, r3, #5
 80165ec:	21f4      	movs	r1, #244	@ 0xf4
 80165ee:	187a      	adds	r2, r7, r1
 80165f0:	6013      	str	r3, [r2, #0]
 80165f2:	1d7b      	adds	r3, r7, #5
 80165f4:	33ff      	adds	r3, #255	@ 0xff
 80165f6:	681b      	ldr	r3, [r3, #0]
 80165f8:	221f      	movs	r2, #31
 80165fa:	4013      	ands	r3, r2
 80165fc:	d104      	bne.n	8016608 <USB_EPStartXfer+0x5e0>
 80165fe:	187b      	adds	r3, r7, r1
 8016600:	681b      	ldr	r3, [r3, #0]
 8016602:	3b01      	subs	r3, #1
 8016604:	187a      	adds	r2, r7, r1
 8016606:	6013      	str	r3, [r2, #0]
 8016608:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801660a:	881b      	ldrh	r3, [r3, #0]
 801660c:	b29a      	uxth	r2, r3
 801660e:	23f4      	movs	r3, #244	@ 0xf4
 8016610:	18fb      	adds	r3, r7, r3
 8016612:	681b      	ldr	r3, [r3, #0]
 8016614:	b29b      	uxth	r3, r3
 8016616:	029b      	lsls	r3, r3, #10
 8016618:	b29b      	uxth	r3, r3
 801661a:	4313      	orrs	r3, r2
 801661c:	b29b      	uxth	r3, r3
 801661e:	4a55      	ldr	r2, [pc, #340]	@ (8016774 <USB_EPStartXfer+0x74c>)
 8016620:	4313      	orrs	r3, r2
 8016622:	b29a      	uxth	r2, r3
 8016624:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016626:	801a      	strh	r2, [r3, #0]
 8016628:	e048      	b.n	80166bc <USB_EPStartXfer+0x694>
 801662a:	1d7b      	adds	r3, r7, #5
 801662c:	33ff      	adds	r3, #255	@ 0xff
 801662e:	681b      	ldr	r3, [r3, #0]
 8016630:	2b00      	cmp	r3, #0
 8016632:	d108      	bne.n	8016646 <USB_EPStartXfer+0x61e>
 8016634:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016636:	881b      	ldrh	r3, [r3, #0]
 8016638:	b29b      	uxth	r3, r3
 801663a:	4a4e      	ldr	r2, [pc, #312]	@ (8016774 <USB_EPStartXfer+0x74c>)
 801663c:	4313      	orrs	r3, r2
 801663e:	b29a      	uxth	r2, r3
 8016640:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016642:	801a      	strh	r2, [r3, #0]
 8016644:	e03a      	b.n	80166bc <USB_EPStartXfer+0x694>
 8016646:	1d7b      	adds	r3, r7, #5
 8016648:	33ff      	adds	r3, #255	@ 0xff
 801664a:	681b      	ldr	r3, [r3, #0]
 801664c:	085b      	lsrs	r3, r3, #1
 801664e:	21f4      	movs	r1, #244	@ 0xf4
 8016650:	187a      	adds	r2, r7, r1
 8016652:	6013      	str	r3, [r2, #0]
 8016654:	1d7b      	adds	r3, r7, #5
 8016656:	33ff      	adds	r3, #255	@ 0xff
 8016658:	681b      	ldr	r3, [r3, #0]
 801665a:	2201      	movs	r2, #1
 801665c:	4013      	ands	r3, r2
 801665e:	d004      	beq.n	801666a <USB_EPStartXfer+0x642>
 8016660:	187b      	adds	r3, r7, r1
 8016662:	681b      	ldr	r3, [r3, #0]
 8016664:	3301      	adds	r3, #1
 8016666:	187a      	adds	r2, r7, r1
 8016668:	6013      	str	r3, [r2, #0]
 801666a:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 801666c:	881b      	ldrh	r3, [r3, #0]
 801666e:	b29a      	uxth	r2, r3
 8016670:	23f4      	movs	r3, #244	@ 0xf4
 8016672:	18fb      	adds	r3, r7, r3
 8016674:	681b      	ldr	r3, [r3, #0]
 8016676:	b29b      	uxth	r3, r3
 8016678:	029b      	lsls	r3, r3, #10
 801667a:	b29b      	uxth	r3, r3
 801667c:	4313      	orrs	r3, r2
 801667e:	b29a      	uxth	r2, r3
 8016680:	6b7b      	ldr	r3, [r7, #52]	@ 0x34
 8016682:	801a      	strh	r2, [r3, #0]
 8016684:	e01a      	b.n	80166bc <USB_EPStartXfer+0x694>
 8016686:	683b      	ldr	r3, [r7, #0]
 8016688:	785b      	ldrb	r3, [r3, #1]
 801668a:	2b01      	cmp	r3, #1
 801668c:	d116      	bne.n	80166bc <USB_EPStartXfer+0x694>
 801668e:	687b      	ldr	r3, [r7, #4]
 8016690:	2250      	movs	r2, #80	@ 0x50
 8016692:	5a9b      	ldrh	r3, [r3, r2]
 8016694:	b29b      	uxth	r3, r3
 8016696:	001a      	movs	r2, r3
 8016698:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 801669a:	189b      	adds	r3, r3, r2
 801669c:	643b      	str	r3, [r7, #64]	@ 0x40
 801669e:	683b      	ldr	r3, [r7, #0]
 80166a0:	781b      	ldrb	r3, [r3, #0]
 80166a2:	00da      	lsls	r2, r3, #3
 80166a4:	6c3b      	ldr	r3, [r7, #64]	@ 0x40
 80166a6:	18d3      	adds	r3, r2, r3
 80166a8:	4a33      	ldr	r2, [pc, #204]	@ (8016778 <USB_EPStartXfer+0x750>)
 80166aa:	4694      	mov	ip, r2
 80166ac:	4463      	add	r3, ip
 80166ae:	63fb      	str	r3, [r7, #60]	@ 0x3c
 80166b0:	1d7b      	adds	r3, r7, #5
 80166b2:	33ff      	adds	r3, #255	@ 0xff
 80166b4:	681b      	ldr	r3, [r3, #0]
 80166b6:	b29a      	uxth	r2, r3
 80166b8:	6bfb      	ldr	r3, [r7, #60]	@ 0x3c
 80166ba:	801a      	strh	r2, [r3, #0]
            pmabuffer = ep->pmaaddr1;
 80166bc:	2076      	movs	r0, #118	@ 0x76
 80166be:	183b      	adds	r3, r7, r0
 80166c0:	683a      	ldr	r2, [r7, #0]
 80166c2:	8952      	ldrh	r2, [r2, #10]
 80166c4:	801a      	strh	r2, [r3, #0]

            /* Write the user buffer to USB PMA */
            USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80166c6:	683b      	ldr	r3, [r7, #0]
 80166c8:	6959      	ldr	r1, [r3, #20]
 80166ca:	1d7b      	adds	r3, r7, #5
 80166cc:	33ff      	adds	r3, #255	@ 0xff
 80166ce:	681b      	ldr	r3, [r3, #0]
 80166d0:	b29c      	uxth	r4, r3
 80166d2:	183b      	adds	r3, r7, r0
 80166d4:	881a      	ldrh	r2, [r3, #0]
 80166d6:	6878      	ldr	r0, [r7, #4]
 80166d8:	0023      	movs	r3, r4
 80166da:	f000 ff17 	bl	801750c <USB_WritePMA>
 80166de:	e1b6      	b.n	8016a4e <USB_EPStartXfer+0xa26>
          }
        }
        /* auto Switch to single buffer mode when transfer <Mps no need to manage in double buffer */
        else
        {
          len = ep->xfer_len_db;
 80166e0:	683b      	ldr	r3, [r7, #0]
 80166e2:	6a1b      	ldr	r3, [r3, #32]
 80166e4:	1d7a      	adds	r2, r7, #5
 80166e6:	32ff      	adds	r2, #255	@ 0xff
 80166e8:	6013      	str	r3, [r2, #0]

          /* disable double buffer mode for Bulk endpoint */
          PCD_CLEAR_BULK_EP_DBUF(USBx, ep->num);
 80166ea:	687a      	ldr	r2, [r7, #4]
 80166ec:	683b      	ldr	r3, [r7, #0]
 80166ee:	781b      	ldrb	r3, [r3, #0]
 80166f0:	009b      	lsls	r3, r3, #2
 80166f2:	18d3      	adds	r3, r2, r3
 80166f4:	881b      	ldrh	r3, [r3, #0]
 80166f6:	b29a      	uxth	r2, r3
 80166f8:	2062      	movs	r0, #98	@ 0x62
 80166fa:	183b      	adds	r3, r7, r0
 80166fc:	491f      	ldr	r1, [pc, #124]	@ (801677c <USB_EPStartXfer+0x754>)
 80166fe:	400a      	ands	r2, r1
 8016700:	801a      	strh	r2, [r3, #0]
 8016702:	687a      	ldr	r2, [r7, #4]
 8016704:	683b      	ldr	r3, [r7, #0]
 8016706:	781b      	ldrb	r3, [r3, #0]
 8016708:	009b      	lsls	r3, r3, #2
 801670a:	18d3      	adds	r3, r2, r3
 801670c:	183a      	adds	r2, r7, r0
 801670e:	8812      	ldrh	r2, [r2, #0]
 8016710:	491b      	ldr	r1, [pc, #108]	@ (8016780 <USB_EPStartXfer+0x758>)
 8016712:	430a      	orrs	r2, r1
 8016714:	b292      	uxth	r2, r2
 8016716:	801a      	strh	r2, [r3, #0]

          /* Set Tx count with nbre of byte to be transmitted */
          PCD_SET_EP_TX_CNT(USBx, ep->num, len);
 8016718:	687b      	ldr	r3, [r7, #4]
 801671a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801671c:	687b      	ldr	r3, [r7, #4]
 801671e:	2250      	movs	r2, #80	@ 0x50
 8016720:	5a9b      	ldrh	r3, [r3, r2]
 8016722:	b29b      	uxth	r3, r3
 8016724:	001a      	movs	r2, r3
 8016726:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8016728:	189b      	adds	r3, r3, r2
 801672a:	65fb      	str	r3, [r7, #92]	@ 0x5c
 801672c:	683b      	ldr	r3, [r7, #0]
 801672e:	781b      	ldrb	r3, [r3, #0]
 8016730:	00da      	lsls	r2, r3, #3
 8016732:	6dfb      	ldr	r3, [r7, #92]	@ 0x5c
 8016734:	18d3      	adds	r3, r2, r3
 8016736:	4a0e      	ldr	r2, [pc, #56]	@ (8016770 <USB_EPStartXfer+0x748>)
 8016738:	4694      	mov	ip, r2
 801673a:	4463      	add	r3, ip
 801673c:	65bb      	str	r3, [r7, #88]	@ 0x58
 801673e:	1d7b      	adds	r3, r7, #5
 8016740:	33ff      	adds	r3, #255	@ 0xff
 8016742:	681b      	ldr	r3, [r3, #0]
 8016744:	b29a      	uxth	r2, r3
 8016746:	6dbb      	ldr	r3, [r7, #88]	@ 0x58
 8016748:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 801674a:	2076      	movs	r0, #118	@ 0x76
 801674c:	183b      	adds	r3, r7, r0
 801674e:	683a      	ldr	r2, [r7, #0]
 8016750:	8912      	ldrh	r2, [r2, #8]
 8016752:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8016754:	683b      	ldr	r3, [r7, #0]
 8016756:	6959      	ldr	r1, [r3, #20]
 8016758:	1d7b      	adds	r3, r7, #5
 801675a:	33ff      	adds	r3, #255	@ 0xff
 801675c:	681b      	ldr	r3, [r3, #0]
 801675e:	b29c      	uxth	r4, r3
 8016760:	183b      	adds	r3, r7, r0
 8016762:	881a      	ldrh	r2, [r3, #0]
 8016764:	6878      	ldr	r0, [r7, #4]
 8016766:	0023      	movs	r3, r4
 8016768:	f000 fed0 	bl	801750c <USB_WritePMA>
 801676c:	e16f      	b.n	8016a4e <USB_EPStartXfer+0xa26>
 801676e:	46c0      	nop			@ (mov r8, r8)
 8016770:	00000402 	.word	0x00000402
 8016774:	ffff8000 	.word	0xffff8000
 8016778:	00000406 	.word	0x00000406
 801677c:	ffff8e8f 	.word	0xffff8e8f
 8016780:	ffff8080 	.word	0xffff8080
        }
      }
      else /* manage isochronous double buffer IN mode */
      {
        /* each Time to write in PMA xfer_len_db will */
        ep->xfer_len_db -= len;
 8016784:	683b      	ldr	r3, [r7, #0]
 8016786:	6a1a      	ldr	r2, [r3, #32]
 8016788:	1d7b      	adds	r3, r7, #5
 801678a:	33ff      	adds	r3, #255	@ 0xff
 801678c:	681b      	ldr	r3, [r3, #0]
 801678e:	1ad2      	subs	r2, r2, r3
 8016790:	683b      	ldr	r3, [r7, #0]
 8016792:	621a      	str	r2, [r3, #32]

        /* Fill the data buffer */
        if ((PCD_GET_ENDPOINT(USBx, ep->num) & USB_EP_DTOG_TX) != 0U)
 8016794:	687a      	ldr	r2, [r7, #4]
 8016796:	683b      	ldr	r3, [r7, #0]
 8016798:	781b      	ldrb	r3, [r3, #0]
 801679a:	009b      	lsls	r3, r3, #2
 801679c:	18d3      	adds	r3, r2, r3
 801679e:	881b      	ldrh	r3, [r3, #0]
 80167a0:	b29b      	uxth	r3, r3
 80167a2:	001a      	movs	r2, r3
 80167a4:	2340      	movs	r3, #64	@ 0x40
 80167a6:	4013      	ands	r3, r2
 80167a8:	d100      	bne.n	80167ac <USB_EPStartXfer+0x784>
 80167aa:	e0a4      	b.n	80168f6 <USB_EPStartXfer+0x8ce>
        {
          /* Set the Double buffer counter for pmabuffer1 */
          PCD_SET_EP_DBUF1_CNT(USBx, ep->num, ep->is_in, len);
 80167ac:	687b      	ldr	r3, [r7, #4]
 80167ae:	673b      	str	r3, [r7, #112]	@ 0x70
 80167b0:	683b      	ldr	r3, [r7, #0]
 80167b2:	785b      	ldrb	r3, [r3, #1]
 80167b4:	2b00      	cmp	r3, #0
 80167b6:	d000      	beq.n	80167ba <USB_EPStartXfer+0x792>
 80167b8:	e070      	b.n	801689c <USB_EPStartXfer+0x874>
 80167ba:	687b      	ldr	r3, [r7, #4]
 80167bc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80167be:	687b      	ldr	r3, [r7, #4]
 80167c0:	2250      	movs	r2, #80	@ 0x50
 80167c2:	5a9b      	ldrh	r3, [r3, r2]
 80167c4:	b29b      	uxth	r3, r3
 80167c6:	001a      	movs	r2, r3
 80167c8:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80167ca:	189b      	adds	r3, r3, r2
 80167cc:	66bb      	str	r3, [r7, #104]	@ 0x68
 80167ce:	683b      	ldr	r3, [r7, #0]
 80167d0:	781b      	ldrb	r3, [r3, #0]
 80167d2:	00da      	lsls	r2, r3, #3
 80167d4:	6ebb      	ldr	r3, [r7, #104]	@ 0x68
 80167d6:	18d3      	adds	r3, r2, r3
 80167d8:	4abc      	ldr	r2, [pc, #752]	@ (8016acc <USB_EPStartXfer+0xaa4>)
 80167da:	4694      	mov	ip, r2
 80167dc:	4463      	add	r3, ip
 80167de:	667b      	str	r3, [r7, #100]	@ 0x64
 80167e0:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80167e2:	881b      	ldrh	r3, [r3, #0]
 80167e4:	b29b      	uxth	r3, r3
 80167e6:	059b      	lsls	r3, r3, #22
 80167e8:	0d9b      	lsrs	r3, r3, #22
 80167ea:	b29a      	uxth	r2, r3
 80167ec:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 80167ee:	801a      	strh	r2, [r3, #0]
 80167f0:	1d7b      	adds	r3, r7, #5
 80167f2:	33ff      	adds	r3, #255	@ 0xff
 80167f4:	681b      	ldr	r3, [r3, #0]
 80167f6:	2b3e      	cmp	r3, #62	@ 0x3e
 80167f8:	d922      	bls.n	8016840 <USB_EPStartXfer+0x818>
 80167fa:	1d7b      	adds	r3, r7, #5
 80167fc:	33ff      	adds	r3, #255	@ 0xff
 80167fe:	681b      	ldr	r3, [r3, #0]
 8016800:	095b      	lsrs	r3, r3, #5
 8016802:	21f0      	movs	r1, #240	@ 0xf0
 8016804:	187a      	adds	r2, r7, r1
 8016806:	6013      	str	r3, [r2, #0]
 8016808:	1d7b      	adds	r3, r7, #5
 801680a:	33ff      	adds	r3, #255	@ 0xff
 801680c:	681b      	ldr	r3, [r3, #0]
 801680e:	221f      	movs	r2, #31
 8016810:	4013      	ands	r3, r2
 8016812:	d104      	bne.n	801681e <USB_EPStartXfer+0x7f6>
 8016814:	187b      	adds	r3, r7, r1
 8016816:	681b      	ldr	r3, [r3, #0]
 8016818:	3b01      	subs	r3, #1
 801681a:	187a      	adds	r2, r7, r1
 801681c:	6013      	str	r3, [r2, #0]
 801681e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8016820:	881b      	ldrh	r3, [r3, #0]
 8016822:	b29a      	uxth	r2, r3
 8016824:	23f0      	movs	r3, #240	@ 0xf0
 8016826:	18fb      	adds	r3, r7, r3
 8016828:	681b      	ldr	r3, [r3, #0]
 801682a:	b29b      	uxth	r3, r3
 801682c:	029b      	lsls	r3, r3, #10
 801682e:	b29b      	uxth	r3, r3
 8016830:	4313      	orrs	r3, r2
 8016832:	b29b      	uxth	r3, r3
 8016834:	4aa6      	ldr	r2, [pc, #664]	@ (8016ad0 <USB_EPStartXfer+0xaa8>)
 8016836:	4313      	orrs	r3, r2
 8016838:	b29a      	uxth	r2, r3
 801683a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801683c:	801a      	strh	r2, [r3, #0]
 801683e:	e048      	b.n	80168d2 <USB_EPStartXfer+0x8aa>
 8016840:	1d7b      	adds	r3, r7, #5
 8016842:	33ff      	adds	r3, #255	@ 0xff
 8016844:	681b      	ldr	r3, [r3, #0]
 8016846:	2b00      	cmp	r3, #0
 8016848:	d108      	bne.n	801685c <USB_EPStartXfer+0x834>
 801684a:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801684c:	881b      	ldrh	r3, [r3, #0]
 801684e:	b29b      	uxth	r3, r3
 8016850:	4a9f      	ldr	r2, [pc, #636]	@ (8016ad0 <USB_EPStartXfer+0xaa8>)
 8016852:	4313      	orrs	r3, r2
 8016854:	b29a      	uxth	r2, r3
 8016856:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8016858:	801a      	strh	r2, [r3, #0]
 801685a:	e03a      	b.n	80168d2 <USB_EPStartXfer+0x8aa>
 801685c:	1d7b      	adds	r3, r7, #5
 801685e:	33ff      	adds	r3, #255	@ 0xff
 8016860:	681b      	ldr	r3, [r3, #0]
 8016862:	085b      	lsrs	r3, r3, #1
 8016864:	21f0      	movs	r1, #240	@ 0xf0
 8016866:	187a      	adds	r2, r7, r1
 8016868:	6013      	str	r3, [r2, #0]
 801686a:	1d7b      	adds	r3, r7, #5
 801686c:	33ff      	adds	r3, #255	@ 0xff
 801686e:	681b      	ldr	r3, [r3, #0]
 8016870:	2201      	movs	r2, #1
 8016872:	4013      	ands	r3, r2
 8016874:	d004      	beq.n	8016880 <USB_EPStartXfer+0x858>
 8016876:	187b      	adds	r3, r7, r1
 8016878:	681b      	ldr	r3, [r3, #0]
 801687a:	3301      	adds	r3, #1
 801687c:	187a      	adds	r2, r7, r1
 801687e:	6013      	str	r3, [r2, #0]
 8016880:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8016882:	881b      	ldrh	r3, [r3, #0]
 8016884:	b29a      	uxth	r2, r3
 8016886:	23f0      	movs	r3, #240	@ 0xf0
 8016888:	18fb      	adds	r3, r7, r3
 801688a:	681b      	ldr	r3, [r3, #0]
 801688c:	b29b      	uxth	r3, r3
 801688e:	029b      	lsls	r3, r3, #10
 8016890:	b29b      	uxth	r3, r3
 8016892:	4313      	orrs	r3, r2
 8016894:	b29a      	uxth	r2, r3
 8016896:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 8016898:	801a      	strh	r2, [r3, #0]
 801689a:	e01a      	b.n	80168d2 <USB_EPStartXfer+0x8aa>
 801689c:	683b      	ldr	r3, [r7, #0]
 801689e:	785b      	ldrb	r3, [r3, #1]
 80168a0:	2b01      	cmp	r3, #1
 80168a2:	d116      	bne.n	80168d2 <USB_EPStartXfer+0x8aa>
 80168a4:	687b      	ldr	r3, [r7, #4]
 80168a6:	2250      	movs	r2, #80	@ 0x50
 80168a8:	5a9b      	ldrh	r3, [r3, r2]
 80168aa:	b29b      	uxth	r3, r3
 80168ac:	001a      	movs	r2, r3
 80168ae:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80168b0:	189b      	adds	r3, r3, r2
 80168b2:	673b      	str	r3, [r7, #112]	@ 0x70
 80168b4:	683b      	ldr	r3, [r7, #0]
 80168b6:	781b      	ldrb	r3, [r3, #0]
 80168b8:	00da      	lsls	r2, r3, #3
 80168ba:	6f3b      	ldr	r3, [r7, #112]	@ 0x70
 80168bc:	18d3      	adds	r3, r2, r3
 80168be:	4a83      	ldr	r2, [pc, #524]	@ (8016acc <USB_EPStartXfer+0xaa4>)
 80168c0:	4694      	mov	ip, r2
 80168c2:	4463      	add	r3, ip
 80168c4:	66fb      	str	r3, [r7, #108]	@ 0x6c
 80168c6:	1d7b      	adds	r3, r7, #5
 80168c8:	33ff      	adds	r3, #255	@ 0xff
 80168ca:	681b      	ldr	r3, [r3, #0]
 80168cc:	b29a      	uxth	r2, r3
 80168ce:	6efb      	ldr	r3, [r7, #108]	@ 0x6c
 80168d0:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr1;
 80168d2:	2076      	movs	r0, #118	@ 0x76
 80168d4:	183b      	adds	r3, r7, r0
 80168d6:	683a      	ldr	r2, [r7, #0]
 80168d8:	8952      	ldrh	r2, [r2, #10]
 80168da:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 80168dc:	683b      	ldr	r3, [r7, #0]
 80168de:	6959      	ldr	r1, [r3, #20]
 80168e0:	1d7b      	adds	r3, r7, #5
 80168e2:	33ff      	adds	r3, #255	@ 0xff
 80168e4:	681b      	ldr	r3, [r3, #0]
 80168e6:	b29c      	uxth	r4, r3
 80168e8:	183b      	adds	r3, r7, r0
 80168ea:	881a      	ldrh	r2, [r3, #0]
 80168ec:	6878      	ldr	r0, [r7, #4]
 80168ee:	0023      	movs	r3, r4
 80168f0:	f000 fe0c 	bl	801750c <USB_WritePMA>
 80168f4:	e0ab      	b.n	8016a4e <USB_EPStartXfer+0xa26>
        }
        else
        {
          /* Set the Double buffer counter for pmabuffer0 */
          PCD_SET_EP_DBUF0_CNT(USBx, ep->num, ep->is_in, len);
 80168f6:	683b      	ldr	r3, [r7, #0]
 80168f8:	785b      	ldrb	r3, [r3, #1]
 80168fa:	2b00      	cmp	r3, #0
 80168fc:	d000      	beq.n	8016900 <USB_EPStartXfer+0x8d8>
 80168fe:	e070      	b.n	80169e2 <USB_EPStartXfer+0x9ba>
 8016900:	687b      	ldr	r3, [r7, #4]
 8016902:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8016904:	687b      	ldr	r3, [r7, #4]
 8016906:	2250      	movs	r2, #80	@ 0x50
 8016908:	5a9b      	ldrh	r3, [r3, r2]
 801690a:	b29b      	uxth	r3, r3
 801690c:	001a      	movs	r2, r3
 801690e:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 8016910:	189b      	adds	r3, r3, r2
 8016912:	67fb      	str	r3, [r7, #124]	@ 0x7c
 8016914:	683b      	ldr	r3, [r7, #0]
 8016916:	781b      	ldrb	r3, [r3, #0]
 8016918:	00da      	lsls	r2, r3, #3
 801691a:	6ffb      	ldr	r3, [r7, #124]	@ 0x7c
 801691c:	18d3      	adds	r3, r2, r3
 801691e:	4a6d      	ldr	r2, [pc, #436]	@ (8016ad4 <USB_EPStartXfer+0xaac>)
 8016920:	4694      	mov	ip, r2
 8016922:	4463      	add	r3, ip
 8016924:	67bb      	str	r3, [r7, #120]	@ 0x78
 8016926:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8016928:	881b      	ldrh	r3, [r3, #0]
 801692a:	b29b      	uxth	r3, r3
 801692c:	059b      	lsls	r3, r3, #22
 801692e:	0d9b      	lsrs	r3, r3, #22
 8016930:	b29a      	uxth	r2, r3
 8016932:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8016934:	801a      	strh	r2, [r3, #0]
 8016936:	1d7b      	adds	r3, r7, #5
 8016938:	33ff      	adds	r3, #255	@ 0xff
 801693a:	681b      	ldr	r3, [r3, #0]
 801693c:	2b3e      	cmp	r3, #62	@ 0x3e
 801693e:	d922      	bls.n	8016986 <USB_EPStartXfer+0x95e>
 8016940:	1d7b      	adds	r3, r7, #5
 8016942:	33ff      	adds	r3, #255	@ 0xff
 8016944:	681b      	ldr	r3, [r3, #0]
 8016946:	095b      	lsrs	r3, r3, #5
 8016948:	21ec      	movs	r1, #236	@ 0xec
 801694a:	187a      	adds	r2, r7, r1
 801694c:	6013      	str	r3, [r2, #0]
 801694e:	1d7b      	adds	r3, r7, #5
 8016950:	33ff      	adds	r3, #255	@ 0xff
 8016952:	681b      	ldr	r3, [r3, #0]
 8016954:	221f      	movs	r2, #31
 8016956:	4013      	ands	r3, r2
 8016958:	d104      	bne.n	8016964 <USB_EPStartXfer+0x93c>
 801695a:	187b      	adds	r3, r7, r1
 801695c:	681b      	ldr	r3, [r3, #0]
 801695e:	3b01      	subs	r3, #1
 8016960:	187a      	adds	r2, r7, r1
 8016962:	6013      	str	r3, [r2, #0]
 8016964:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8016966:	881b      	ldrh	r3, [r3, #0]
 8016968:	b29a      	uxth	r2, r3
 801696a:	23ec      	movs	r3, #236	@ 0xec
 801696c:	18fb      	adds	r3, r7, r3
 801696e:	681b      	ldr	r3, [r3, #0]
 8016970:	b29b      	uxth	r3, r3
 8016972:	029b      	lsls	r3, r3, #10
 8016974:	b29b      	uxth	r3, r3
 8016976:	4313      	orrs	r3, r2
 8016978:	b29b      	uxth	r3, r3
 801697a:	4a55      	ldr	r2, [pc, #340]	@ (8016ad0 <USB_EPStartXfer+0xaa8>)
 801697c:	4313      	orrs	r3, r2
 801697e:	b29a      	uxth	r2, r3
 8016980:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8016982:	801a      	strh	r2, [r3, #0]
 8016984:	e052      	b.n	8016a2c <USB_EPStartXfer+0xa04>
 8016986:	1d7b      	adds	r3, r7, #5
 8016988:	33ff      	adds	r3, #255	@ 0xff
 801698a:	681b      	ldr	r3, [r3, #0]
 801698c:	2b00      	cmp	r3, #0
 801698e:	d108      	bne.n	80169a2 <USB_EPStartXfer+0x97a>
 8016990:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 8016992:	881b      	ldrh	r3, [r3, #0]
 8016994:	b29b      	uxth	r3, r3
 8016996:	4a4e      	ldr	r2, [pc, #312]	@ (8016ad0 <USB_EPStartXfer+0xaa8>)
 8016998:	4313      	orrs	r3, r2
 801699a:	b29a      	uxth	r2, r3
 801699c:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 801699e:	801a      	strh	r2, [r3, #0]
 80169a0:	e044      	b.n	8016a2c <USB_EPStartXfer+0xa04>
 80169a2:	1d7b      	adds	r3, r7, #5
 80169a4:	33ff      	adds	r3, #255	@ 0xff
 80169a6:	681b      	ldr	r3, [r3, #0]
 80169a8:	085b      	lsrs	r3, r3, #1
 80169aa:	21ec      	movs	r1, #236	@ 0xec
 80169ac:	187a      	adds	r2, r7, r1
 80169ae:	6013      	str	r3, [r2, #0]
 80169b0:	1d7b      	adds	r3, r7, #5
 80169b2:	33ff      	adds	r3, #255	@ 0xff
 80169b4:	681b      	ldr	r3, [r3, #0]
 80169b6:	2201      	movs	r2, #1
 80169b8:	4013      	ands	r3, r2
 80169ba:	d004      	beq.n	80169c6 <USB_EPStartXfer+0x99e>
 80169bc:	187b      	adds	r3, r7, r1
 80169be:	681b      	ldr	r3, [r3, #0]
 80169c0:	3301      	adds	r3, #1
 80169c2:	187a      	adds	r2, r7, r1
 80169c4:	6013      	str	r3, [r2, #0]
 80169c6:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80169c8:	881b      	ldrh	r3, [r3, #0]
 80169ca:	b29a      	uxth	r2, r3
 80169cc:	23ec      	movs	r3, #236	@ 0xec
 80169ce:	18fb      	adds	r3, r7, r3
 80169d0:	681b      	ldr	r3, [r3, #0]
 80169d2:	b29b      	uxth	r3, r3
 80169d4:	029b      	lsls	r3, r3, #10
 80169d6:	b29b      	uxth	r3, r3
 80169d8:	4313      	orrs	r3, r2
 80169da:	b29a      	uxth	r2, r3
 80169dc:	6fbb      	ldr	r3, [r7, #120]	@ 0x78
 80169de:	801a      	strh	r2, [r3, #0]
 80169e0:	e024      	b.n	8016a2c <USB_EPStartXfer+0xa04>
 80169e2:	683b      	ldr	r3, [r7, #0]
 80169e4:	785b      	ldrb	r3, [r3, #1]
 80169e6:	2b01      	cmp	r3, #1
 80169e8:	d120      	bne.n	8016a2c <USB_EPStartXfer+0xa04>
 80169ea:	687b      	ldr	r3, [r7, #4]
 80169ec:	2184      	movs	r1, #132	@ 0x84
 80169ee:	187a      	adds	r2, r7, r1
 80169f0:	6013      	str	r3, [r2, #0]
 80169f2:	687b      	ldr	r3, [r7, #4]
 80169f4:	2250      	movs	r2, #80	@ 0x50
 80169f6:	5a9b      	ldrh	r3, [r3, r2]
 80169f8:	b29b      	uxth	r3, r3
 80169fa:	001a      	movs	r2, r3
 80169fc:	187b      	adds	r3, r7, r1
 80169fe:	681b      	ldr	r3, [r3, #0]
 8016a00:	189b      	adds	r3, r3, r2
 8016a02:	187a      	adds	r2, r7, r1
 8016a04:	6013      	str	r3, [r2, #0]
 8016a06:	683b      	ldr	r3, [r7, #0]
 8016a08:	781b      	ldrb	r3, [r3, #0]
 8016a0a:	00da      	lsls	r2, r3, #3
 8016a0c:	187b      	adds	r3, r7, r1
 8016a0e:	681b      	ldr	r3, [r3, #0]
 8016a10:	18d3      	adds	r3, r2, r3
 8016a12:	4a30      	ldr	r2, [pc, #192]	@ (8016ad4 <USB_EPStartXfer+0xaac>)
 8016a14:	4694      	mov	ip, r2
 8016a16:	4463      	add	r3, ip
 8016a18:	2180      	movs	r1, #128	@ 0x80
 8016a1a:	187a      	adds	r2, r7, r1
 8016a1c:	6013      	str	r3, [r2, #0]
 8016a1e:	1d7b      	adds	r3, r7, #5
 8016a20:	33ff      	adds	r3, #255	@ 0xff
 8016a22:	681b      	ldr	r3, [r3, #0]
 8016a24:	b29a      	uxth	r2, r3
 8016a26:	187b      	adds	r3, r7, r1
 8016a28:	681b      	ldr	r3, [r3, #0]
 8016a2a:	801a      	strh	r2, [r3, #0]
          pmabuffer = ep->pmaaddr0;
 8016a2c:	2076      	movs	r0, #118	@ 0x76
 8016a2e:	183b      	adds	r3, r7, r0
 8016a30:	683a      	ldr	r2, [r7, #0]
 8016a32:	8912      	ldrh	r2, [r2, #8]
 8016a34:	801a      	strh	r2, [r3, #0]

          /* Write the user buffer to USB PMA */
          USB_WritePMA(USBx, ep->xfer_buff, pmabuffer, (uint16_t)len);
 8016a36:	683b      	ldr	r3, [r7, #0]
 8016a38:	6959      	ldr	r1, [r3, #20]
 8016a3a:	1d7b      	adds	r3, r7, #5
 8016a3c:	33ff      	adds	r3, #255	@ 0xff
 8016a3e:	681b      	ldr	r3, [r3, #0]
 8016a40:	b29c      	uxth	r4, r3
 8016a42:	183b      	adds	r3, r7, r0
 8016a44:	881a      	ldrh	r2, [r3, #0]
 8016a46:	6878      	ldr	r0, [r7, #4]
 8016a48:	0023      	movs	r3, r4
 8016a4a:	f000 fd5f 	bl	801750c <USB_WritePMA>
        }
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_VALID);
 8016a4e:	687a      	ldr	r2, [r7, #4]
 8016a50:	683b      	ldr	r3, [r7, #0]
 8016a52:	781b      	ldrb	r3, [r3, #0]
 8016a54:	009b      	lsls	r3, r3, #2
 8016a56:	18d3      	adds	r3, r2, r3
 8016a58:	881b      	ldrh	r3, [r3, #0]
 8016a5a:	b29a      	uxth	r2, r3
 8016a5c:	200a      	movs	r0, #10
 8016a5e:	183b      	adds	r3, r7, r0
 8016a60:	491d      	ldr	r1, [pc, #116]	@ (8016ad8 <USB_EPStartXfer+0xab0>)
 8016a62:	400a      	ands	r2, r1
 8016a64:	801a      	strh	r2, [r3, #0]
 8016a66:	183b      	adds	r3, r7, r0
 8016a68:	183a      	adds	r2, r7, r0
 8016a6a:	8812      	ldrh	r2, [r2, #0]
 8016a6c:	2110      	movs	r1, #16
 8016a6e:	404a      	eors	r2, r1
 8016a70:	801a      	strh	r2, [r3, #0]
 8016a72:	183b      	adds	r3, r7, r0
 8016a74:	183a      	adds	r2, r7, r0
 8016a76:	8812      	ldrh	r2, [r2, #0]
 8016a78:	2120      	movs	r1, #32
 8016a7a:	404a      	eors	r2, r1
 8016a7c:	801a      	strh	r2, [r3, #0]
 8016a7e:	687a      	ldr	r2, [r7, #4]
 8016a80:	683b      	ldr	r3, [r7, #0]
 8016a82:	781b      	ldrb	r3, [r3, #0]
 8016a84:	009b      	lsls	r3, r3, #2
 8016a86:	18d3      	adds	r3, r2, r3
 8016a88:	183a      	adds	r2, r7, r0
 8016a8a:	8812      	ldrh	r2, [r2, #0]
 8016a8c:	4913      	ldr	r1, [pc, #76]	@ (8016adc <USB_EPStartXfer+0xab4>)
 8016a8e:	430a      	orrs	r2, r1
 8016a90:	b292      	uxth	r2, r2
 8016a92:	801a      	strh	r2, [r3, #0]
 8016a94:	f000 fbf4 	bl	8017280 <USB_EPStartXfer+0x1258>
  }
  else /* OUT endpoint */
  {
    if (ep->doublebuffer == 0U)
 8016a98:	683b      	ldr	r3, [r7, #0]
 8016a9a:	7b1b      	ldrb	r3, [r3, #12]
 8016a9c:	2b00      	cmp	r3, #0
 8016a9e:	d000      	beq.n	8016aa2 <USB_EPStartXfer+0xa7a>
 8016aa0:	e0a9      	b.n	8016bf6 <USB_EPStartXfer+0xbce>
    {
      /* Multi packet transfer */
      if (ep->xfer_len > ep->maxpacket)
 8016aa2:	683b      	ldr	r3, [r7, #0]
 8016aa4:	699a      	ldr	r2, [r3, #24]
 8016aa6:	683b      	ldr	r3, [r7, #0]
 8016aa8:	691b      	ldr	r3, [r3, #16]
 8016aaa:	429a      	cmp	r2, r3
 8016aac:	d918      	bls.n	8016ae0 <USB_EPStartXfer+0xab8>
      {
        len = ep->maxpacket;
 8016aae:	683b      	ldr	r3, [r7, #0]
 8016ab0:	691b      	ldr	r3, [r3, #16]
 8016ab2:	1d7a      	adds	r2, r7, #5
 8016ab4:	32ff      	adds	r2, #255	@ 0xff
 8016ab6:	6013      	str	r3, [r2, #0]
        ep->xfer_len -= len;
 8016ab8:	683b      	ldr	r3, [r7, #0]
 8016aba:	699a      	ldr	r2, [r3, #24]
 8016abc:	1d7b      	adds	r3, r7, #5
 8016abe:	33ff      	adds	r3, #255	@ 0xff
 8016ac0:	681b      	ldr	r3, [r3, #0]
 8016ac2:	1ad2      	subs	r2, r2, r3
 8016ac4:	683b      	ldr	r3, [r7, #0]
 8016ac6:	619a      	str	r2, [r3, #24]
 8016ac8:	e012      	b.n	8016af0 <USB_EPStartXfer+0xac8>
 8016aca:	46c0      	nop			@ (mov r8, r8)
 8016acc:	00000406 	.word	0x00000406
 8016ad0:	ffff8000 	.word	0xffff8000
 8016ad4:	00000402 	.word	0x00000402
 8016ad8:	ffff8fbf 	.word	0xffff8fbf
 8016adc:	ffff8080 	.word	0xffff8080
      }
      else
      {
        len = ep->xfer_len;
 8016ae0:	683b      	ldr	r3, [r7, #0]
 8016ae2:	699b      	ldr	r3, [r3, #24]
 8016ae4:	1d7a      	adds	r2, r7, #5
 8016ae6:	32ff      	adds	r2, #255	@ 0xff
 8016ae8:	6013      	str	r3, [r2, #0]
        ep->xfer_len = 0U;
 8016aea:	683b      	ldr	r3, [r7, #0]
 8016aec:	2200      	movs	r2, #0
 8016aee:	619a      	str	r2, [r3, #24]
      }
      /* configure and validate Rx endpoint */
      PCD_SET_EP_RX_CNT(USBx, ep->num, len);
 8016af0:	687b      	ldr	r3, [r7, #4]
 8016af2:	2190      	movs	r1, #144	@ 0x90
 8016af4:	187a      	adds	r2, r7, r1
 8016af6:	6013      	str	r3, [r2, #0]
 8016af8:	687b      	ldr	r3, [r7, #4]
 8016afa:	2250      	movs	r2, #80	@ 0x50
 8016afc:	5a9b      	ldrh	r3, [r3, r2]
 8016afe:	b29b      	uxth	r3, r3
 8016b00:	001a      	movs	r2, r3
 8016b02:	187b      	adds	r3, r7, r1
 8016b04:	681b      	ldr	r3, [r3, #0]
 8016b06:	189b      	adds	r3, r3, r2
 8016b08:	187a      	adds	r2, r7, r1
 8016b0a:	6013      	str	r3, [r2, #0]
 8016b0c:	683b      	ldr	r3, [r7, #0]
 8016b0e:	781b      	ldrb	r3, [r3, #0]
 8016b10:	00da      	lsls	r2, r3, #3
 8016b12:	187b      	adds	r3, r7, r1
 8016b14:	681b      	ldr	r3, [r3, #0]
 8016b16:	18d3      	adds	r3, r2, r3
 8016b18:	4acf      	ldr	r2, [pc, #828]	@ (8016e58 <USB_EPStartXfer+0xe30>)
 8016b1a:	4694      	mov	ip, r2
 8016b1c:	4463      	add	r3, ip
 8016b1e:	218c      	movs	r1, #140	@ 0x8c
 8016b20:	187a      	adds	r2, r7, r1
 8016b22:	6013      	str	r3, [r2, #0]
 8016b24:	187b      	adds	r3, r7, r1
 8016b26:	681b      	ldr	r3, [r3, #0]
 8016b28:	881b      	ldrh	r3, [r3, #0]
 8016b2a:	b29b      	uxth	r3, r3
 8016b2c:	059b      	lsls	r3, r3, #22
 8016b2e:	0d9b      	lsrs	r3, r3, #22
 8016b30:	b29a      	uxth	r2, r3
 8016b32:	187b      	adds	r3, r7, r1
 8016b34:	681b      	ldr	r3, [r3, #0]
 8016b36:	801a      	strh	r2, [r3, #0]
 8016b38:	1d7b      	adds	r3, r7, #5
 8016b3a:	33ff      	adds	r3, #255	@ 0xff
 8016b3c:	681b      	ldr	r3, [r3, #0]
 8016b3e:	2b3e      	cmp	r3, #62	@ 0x3e
 8016b40:	d925      	bls.n	8016b8e <USB_EPStartXfer+0xb66>
 8016b42:	1d7b      	adds	r3, r7, #5
 8016b44:	33ff      	adds	r3, #255	@ 0xff
 8016b46:	681b      	ldr	r3, [r3, #0]
 8016b48:	095b      	lsrs	r3, r3, #5
 8016b4a:	21e8      	movs	r1, #232	@ 0xe8
 8016b4c:	187a      	adds	r2, r7, r1
 8016b4e:	6013      	str	r3, [r2, #0]
 8016b50:	1d7b      	adds	r3, r7, #5
 8016b52:	33ff      	adds	r3, #255	@ 0xff
 8016b54:	681b      	ldr	r3, [r3, #0]
 8016b56:	221f      	movs	r2, #31
 8016b58:	4013      	ands	r3, r2
 8016b5a:	d104      	bne.n	8016b66 <USB_EPStartXfer+0xb3e>
 8016b5c:	187b      	adds	r3, r7, r1
 8016b5e:	681b      	ldr	r3, [r3, #0]
 8016b60:	3b01      	subs	r3, #1
 8016b62:	187a      	adds	r2, r7, r1
 8016b64:	6013      	str	r3, [r2, #0]
 8016b66:	218c      	movs	r1, #140	@ 0x8c
 8016b68:	187b      	adds	r3, r7, r1
 8016b6a:	681b      	ldr	r3, [r3, #0]
 8016b6c:	881b      	ldrh	r3, [r3, #0]
 8016b6e:	b29a      	uxth	r2, r3
 8016b70:	23e8      	movs	r3, #232	@ 0xe8
 8016b72:	18fb      	adds	r3, r7, r3
 8016b74:	681b      	ldr	r3, [r3, #0]
 8016b76:	b29b      	uxth	r3, r3
 8016b78:	029b      	lsls	r3, r3, #10
 8016b7a:	b29b      	uxth	r3, r3
 8016b7c:	4313      	orrs	r3, r2
 8016b7e:	b29b      	uxth	r3, r3
 8016b80:	4ab6      	ldr	r2, [pc, #728]	@ (8016e5c <USB_EPStartXfer+0xe34>)
 8016b82:	4313      	orrs	r3, r2
 8016b84:	b29a      	uxth	r2, r3
 8016b86:	187b      	adds	r3, r7, r1
 8016b88:	681b      	ldr	r3, [r3, #0]
 8016b8a:	801a      	strh	r2, [r3, #0]
 8016b8c:	e353      	b.n	8017236 <USB_EPStartXfer+0x120e>
 8016b8e:	1d7b      	adds	r3, r7, #5
 8016b90:	33ff      	adds	r3, #255	@ 0xff
 8016b92:	681b      	ldr	r3, [r3, #0]
 8016b94:	2b00      	cmp	r3, #0
 8016b96:	d10b      	bne.n	8016bb0 <USB_EPStartXfer+0xb88>
 8016b98:	218c      	movs	r1, #140	@ 0x8c
 8016b9a:	187b      	adds	r3, r7, r1
 8016b9c:	681b      	ldr	r3, [r3, #0]
 8016b9e:	881b      	ldrh	r3, [r3, #0]
 8016ba0:	b29b      	uxth	r3, r3
 8016ba2:	4aae      	ldr	r2, [pc, #696]	@ (8016e5c <USB_EPStartXfer+0xe34>)
 8016ba4:	4313      	orrs	r3, r2
 8016ba6:	b29a      	uxth	r2, r3
 8016ba8:	187b      	adds	r3, r7, r1
 8016baa:	681b      	ldr	r3, [r3, #0]
 8016bac:	801a      	strh	r2, [r3, #0]
 8016bae:	e342      	b.n	8017236 <USB_EPStartXfer+0x120e>
 8016bb0:	1d7b      	adds	r3, r7, #5
 8016bb2:	33ff      	adds	r3, #255	@ 0xff
 8016bb4:	681b      	ldr	r3, [r3, #0]
 8016bb6:	085b      	lsrs	r3, r3, #1
 8016bb8:	21e8      	movs	r1, #232	@ 0xe8
 8016bba:	187a      	adds	r2, r7, r1
 8016bbc:	6013      	str	r3, [r2, #0]
 8016bbe:	1d7b      	adds	r3, r7, #5
 8016bc0:	33ff      	adds	r3, #255	@ 0xff
 8016bc2:	681b      	ldr	r3, [r3, #0]
 8016bc4:	2201      	movs	r2, #1
 8016bc6:	4013      	ands	r3, r2
 8016bc8:	d004      	beq.n	8016bd4 <USB_EPStartXfer+0xbac>
 8016bca:	187b      	adds	r3, r7, r1
 8016bcc:	681b      	ldr	r3, [r3, #0]
 8016bce:	3301      	adds	r3, #1
 8016bd0:	187a      	adds	r2, r7, r1
 8016bd2:	6013      	str	r3, [r2, #0]
 8016bd4:	218c      	movs	r1, #140	@ 0x8c
 8016bd6:	187b      	adds	r3, r7, r1
 8016bd8:	681b      	ldr	r3, [r3, #0]
 8016bda:	881b      	ldrh	r3, [r3, #0]
 8016bdc:	b29a      	uxth	r2, r3
 8016bde:	23e8      	movs	r3, #232	@ 0xe8
 8016be0:	18fb      	adds	r3, r7, r3
 8016be2:	681b      	ldr	r3, [r3, #0]
 8016be4:	b29b      	uxth	r3, r3
 8016be6:	029b      	lsls	r3, r3, #10
 8016be8:	b29b      	uxth	r3, r3
 8016bea:	4313      	orrs	r3, r2
 8016bec:	b29a      	uxth	r2, r3
 8016bee:	187b      	adds	r3, r7, r1
 8016bf0:	681b      	ldr	r3, [r3, #0]
 8016bf2:	801a      	strh	r2, [r3, #0]
 8016bf4:	e31f      	b.n	8017236 <USB_EPStartXfer+0x120e>
#if (USE_USB_DOUBLE_BUFFER == 1U)
    else
    {
      /* First Transfer Coming From HAL_PCD_EP_Receive & From ISR */
      /* Set the Double buffer counter */
      if (ep->type == EP_TYPE_BULK)
 8016bf6:	683b      	ldr	r3, [r7, #0]
 8016bf8:	78db      	ldrb	r3, [r3, #3]
 8016bfa:	2b02      	cmp	r3, #2
 8016bfc:	d000      	beq.n	8016c00 <USB_EPStartXfer+0xbd8>
 8016bfe:	e191      	b.n	8016f24 <USB_EPStartXfer+0xefc>
      {
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, ep->maxpacket);
 8016c00:	683b      	ldr	r3, [r7, #0]
 8016c02:	785b      	ldrb	r3, [r3, #1]
 8016c04:	2b00      	cmp	r3, #0
 8016c06:	d000      	beq.n	8016c0a <USB_EPStartXfer+0xbe2>
 8016c08:	e07c      	b.n	8016d04 <USB_EPStartXfer+0xcdc>
 8016c0a:	687b      	ldr	r3, [r7, #4]
 8016c0c:	21ac      	movs	r1, #172	@ 0xac
 8016c0e:	187a      	adds	r2, r7, r1
 8016c10:	6013      	str	r3, [r2, #0]
 8016c12:	687b      	ldr	r3, [r7, #4]
 8016c14:	2250      	movs	r2, #80	@ 0x50
 8016c16:	5a9b      	ldrh	r3, [r3, r2]
 8016c18:	b29b      	uxth	r3, r3
 8016c1a:	001a      	movs	r2, r3
 8016c1c:	187b      	adds	r3, r7, r1
 8016c1e:	681b      	ldr	r3, [r3, #0]
 8016c20:	189b      	adds	r3, r3, r2
 8016c22:	187a      	adds	r2, r7, r1
 8016c24:	6013      	str	r3, [r2, #0]
 8016c26:	683b      	ldr	r3, [r7, #0]
 8016c28:	781b      	ldrb	r3, [r3, #0]
 8016c2a:	00da      	lsls	r2, r3, #3
 8016c2c:	187b      	adds	r3, r7, r1
 8016c2e:	681b      	ldr	r3, [r3, #0]
 8016c30:	18d3      	adds	r3, r2, r3
 8016c32:	4a8b      	ldr	r2, [pc, #556]	@ (8016e60 <USB_EPStartXfer+0xe38>)
 8016c34:	4694      	mov	ip, r2
 8016c36:	4463      	add	r3, ip
 8016c38:	21a8      	movs	r1, #168	@ 0xa8
 8016c3a:	187a      	adds	r2, r7, r1
 8016c3c:	6013      	str	r3, [r2, #0]
 8016c3e:	187b      	adds	r3, r7, r1
 8016c40:	681b      	ldr	r3, [r3, #0]
 8016c42:	881b      	ldrh	r3, [r3, #0]
 8016c44:	b29b      	uxth	r3, r3
 8016c46:	059b      	lsls	r3, r3, #22
 8016c48:	0d9b      	lsrs	r3, r3, #22
 8016c4a:	b29a      	uxth	r2, r3
 8016c4c:	187b      	adds	r3, r7, r1
 8016c4e:	681b      	ldr	r3, [r3, #0]
 8016c50:	801a      	strh	r2, [r3, #0]
 8016c52:	683b      	ldr	r3, [r7, #0]
 8016c54:	691b      	ldr	r3, [r3, #16]
 8016c56:	2b3e      	cmp	r3, #62	@ 0x3e
 8016c58:	d923      	bls.n	8016ca2 <USB_EPStartXfer+0xc7a>
 8016c5a:	683b      	ldr	r3, [r7, #0]
 8016c5c:	691b      	ldr	r3, [r3, #16]
 8016c5e:	095b      	lsrs	r3, r3, #5
 8016c60:	21e4      	movs	r1, #228	@ 0xe4
 8016c62:	187a      	adds	r2, r7, r1
 8016c64:	6013      	str	r3, [r2, #0]
 8016c66:	683b      	ldr	r3, [r7, #0]
 8016c68:	691b      	ldr	r3, [r3, #16]
 8016c6a:	221f      	movs	r2, #31
 8016c6c:	4013      	ands	r3, r2
 8016c6e:	d104      	bne.n	8016c7a <USB_EPStartXfer+0xc52>
 8016c70:	187b      	adds	r3, r7, r1
 8016c72:	681b      	ldr	r3, [r3, #0]
 8016c74:	3b01      	subs	r3, #1
 8016c76:	187a      	adds	r2, r7, r1
 8016c78:	6013      	str	r3, [r2, #0]
 8016c7a:	21a8      	movs	r1, #168	@ 0xa8
 8016c7c:	187b      	adds	r3, r7, r1
 8016c7e:	681b      	ldr	r3, [r3, #0]
 8016c80:	881b      	ldrh	r3, [r3, #0]
 8016c82:	b29a      	uxth	r2, r3
 8016c84:	23e4      	movs	r3, #228	@ 0xe4
 8016c86:	18fb      	adds	r3, r7, r3
 8016c88:	681b      	ldr	r3, [r3, #0]
 8016c8a:	b29b      	uxth	r3, r3
 8016c8c:	029b      	lsls	r3, r3, #10
 8016c8e:	b29b      	uxth	r3, r3
 8016c90:	4313      	orrs	r3, r2
 8016c92:	b29b      	uxth	r3, r3
 8016c94:	4a71      	ldr	r2, [pc, #452]	@ (8016e5c <USB_EPStartXfer+0xe34>)
 8016c96:	4313      	orrs	r3, r2
 8016c98:	b29a      	uxth	r2, r3
 8016c9a:	187b      	adds	r3, r7, r1
 8016c9c:	681b      	ldr	r3, [r3, #0]
 8016c9e:	801a      	strh	r2, [r3, #0]
 8016ca0:	e054      	b.n	8016d4c <USB_EPStartXfer+0xd24>
 8016ca2:	683b      	ldr	r3, [r7, #0]
 8016ca4:	691b      	ldr	r3, [r3, #16]
 8016ca6:	2b00      	cmp	r3, #0
 8016ca8:	d10b      	bne.n	8016cc2 <USB_EPStartXfer+0xc9a>
 8016caa:	21a8      	movs	r1, #168	@ 0xa8
 8016cac:	187b      	adds	r3, r7, r1
 8016cae:	681b      	ldr	r3, [r3, #0]
 8016cb0:	881b      	ldrh	r3, [r3, #0]
 8016cb2:	b29b      	uxth	r3, r3
 8016cb4:	4a69      	ldr	r2, [pc, #420]	@ (8016e5c <USB_EPStartXfer+0xe34>)
 8016cb6:	4313      	orrs	r3, r2
 8016cb8:	b29a      	uxth	r2, r3
 8016cba:	187b      	adds	r3, r7, r1
 8016cbc:	681b      	ldr	r3, [r3, #0]
 8016cbe:	801a      	strh	r2, [r3, #0]
 8016cc0:	e044      	b.n	8016d4c <USB_EPStartXfer+0xd24>
 8016cc2:	683b      	ldr	r3, [r7, #0]
 8016cc4:	691b      	ldr	r3, [r3, #16]
 8016cc6:	085b      	lsrs	r3, r3, #1
 8016cc8:	21e4      	movs	r1, #228	@ 0xe4
 8016cca:	187a      	adds	r2, r7, r1
 8016ccc:	6013      	str	r3, [r2, #0]
 8016cce:	683b      	ldr	r3, [r7, #0]
 8016cd0:	691b      	ldr	r3, [r3, #16]
 8016cd2:	2201      	movs	r2, #1
 8016cd4:	4013      	ands	r3, r2
 8016cd6:	d004      	beq.n	8016ce2 <USB_EPStartXfer+0xcba>
 8016cd8:	187b      	adds	r3, r7, r1
 8016cda:	681b      	ldr	r3, [r3, #0]
 8016cdc:	3301      	adds	r3, #1
 8016cde:	187a      	adds	r2, r7, r1
 8016ce0:	6013      	str	r3, [r2, #0]
 8016ce2:	21a8      	movs	r1, #168	@ 0xa8
 8016ce4:	187b      	adds	r3, r7, r1
 8016ce6:	681b      	ldr	r3, [r3, #0]
 8016ce8:	881b      	ldrh	r3, [r3, #0]
 8016cea:	b29a      	uxth	r2, r3
 8016cec:	23e4      	movs	r3, #228	@ 0xe4
 8016cee:	18fb      	adds	r3, r7, r3
 8016cf0:	681b      	ldr	r3, [r3, #0]
 8016cf2:	b29b      	uxth	r3, r3
 8016cf4:	029b      	lsls	r3, r3, #10
 8016cf6:	b29b      	uxth	r3, r3
 8016cf8:	4313      	orrs	r3, r2
 8016cfa:	b29a      	uxth	r2, r3
 8016cfc:	187b      	adds	r3, r7, r1
 8016cfe:	681b      	ldr	r3, [r3, #0]
 8016d00:	801a      	strh	r2, [r3, #0]
 8016d02:	e023      	b.n	8016d4c <USB_EPStartXfer+0xd24>
 8016d04:	683b      	ldr	r3, [r7, #0]
 8016d06:	785b      	ldrb	r3, [r3, #1]
 8016d08:	2b01      	cmp	r3, #1
 8016d0a:	d11f      	bne.n	8016d4c <USB_EPStartXfer+0xd24>
 8016d0c:	687b      	ldr	r3, [r7, #4]
 8016d0e:	21b4      	movs	r1, #180	@ 0xb4
 8016d10:	187a      	adds	r2, r7, r1
 8016d12:	6013      	str	r3, [r2, #0]
 8016d14:	687b      	ldr	r3, [r7, #4]
 8016d16:	2250      	movs	r2, #80	@ 0x50
 8016d18:	5a9b      	ldrh	r3, [r3, r2]
 8016d1a:	b29b      	uxth	r3, r3
 8016d1c:	001a      	movs	r2, r3
 8016d1e:	187b      	adds	r3, r7, r1
 8016d20:	681b      	ldr	r3, [r3, #0]
 8016d22:	189b      	adds	r3, r3, r2
 8016d24:	187a      	adds	r2, r7, r1
 8016d26:	6013      	str	r3, [r2, #0]
 8016d28:	683b      	ldr	r3, [r7, #0]
 8016d2a:	781b      	ldrb	r3, [r3, #0]
 8016d2c:	00da      	lsls	r2, r3, #3
 8016d2e:	187b      	adds	r3, r7, r1
 8016d30:	681b      	ldr	r3, [r3, #0]
 8016d32:	18d3      	adds	r3, r2, r3
 8016d34:	4a4a      	ldr	r2, [pc, #296]	@ (8016e60 <USB_EPStartXfer+0xe38>)
 8016d36:	4694      	mov	ip, r2
 8016d38:	4463      	add	r3, ip
 8016d3a:	21b0      	movs	r1, #176	@ 0xb0
 8016d3c:	187a      	adds	r2, r7, r1
 8016d3e:	6013      	str	r3, [r2, #0]
 8016d40:	683b      	ldr	r3, [r7, #0]
 8016d42:	691b      	ldr	r3, [r3, #16]
 8016d44:	b29a      	uxth	r2, r3
 8016d46:	187b      	adds	r3, r7, r1
 8016d48:	681b      	ldr	r3, [r3, #0]
 8016d4a:	801a      	strh	r2, [r3, #0]
 8016d4c:	687b      	ldr	r3, [r7, #4]
 8016d4e:	22a4      	movs	r2, #164	@ 0xa4
 8016d50:	18ba      	adds	r2, r7, r2
 8016d52:	6013      	str	r3, [r2, #0]
 8016d54:	683b      	ldr	r3, [r7, #0]
 8016d56:	785b      	ldrb	r3, [r3, #1]
 8016d58:	2b00      	cmp	r3, #0
 8016d5a:	d000      	beq.n	8016d5e <USB_EPStartXfer+0xd36>
 8016d5c:	e082      	b.n	8016e64 <USB_EPStartXfer+0xe3c>
 8016d5e:	687b      	ldr	r3, [r7, #4]
 8016d60:	219c      	movs	r1, #156	@ 0x9c
 8016d62:	187a      	adds	r2, r7, r1
 8016d64:	6013      	str	r3, [r2, #0]
 8016d66:	687b      	ldr	r3, [r7, #4]
 8016d68:	2250      	movs	r2, #80	@ 0x50
 8016d6a:	5a9b      	ldrh	r3, [r3, r2]
 8016d6c:	b29b      	uxth	r3, r3
 8016d6e:	001a      	movs	r2, r3
 8016d70:	187b      	adds	r3, r7, r1
 8016d72:	681b      	ldr	r3, [r3, #0]
 8016d74:	189b      	adds	r3, r3, r2
 8016d76:	187a      	adds	r2, r7, r1
 8016d78:	6013      	str	r3, [r2, #0]
 8016d7a:	683b      	ldr	r3, [r7, #0]
 8016d7c:	781b      	ldrb	r3, [r3, #0]
 8016d7e:	00da      	lsls	r2, r3, #3
 8016d80:	187b      	adds	r3, r7, r1
 8016d82:	681b      	ldr	r3, [r3, #0]
 8016d84:	18d3      	adds	r3, r2, r3
 8016d86:	4a34      	ldr	r2, [pc, #208]	@ (8016e58 <USB_EPStartXfer+0xe30>)
 8016d88:	4694      	mov	ip, r2
 8016d8a:	4463      	add	r3, ip
 8016d8c:	2198      	movs	r1, #152	@ 0x98
 8016d8e:	187a      	adds	r2, r7, r1
 8016d90:	6013      	str	r3, [r2, #0]
 8016d92:	187b      	adds	r3, r7, r1
 8016d94:	681b      	ldr	r3, [r3, #0]
 8016d96:	881b      	ldrh	r3, [r3, #0]
 8016d98:	b29b      	uxth	r3, r3
 8016d9a:	059b      	lsls	r3, r3, #22
 8016d9c:	0d9b      	lsrs	r3, r3, #22
 8016d9e:	b29a      	uxth	r2, r3
 8016da0:	187b      	adds	r3, r7, r1
 8016da2:	681b      	ldr	r3, [r3, #0]
 8016da4:	801a      	strh	r2, [r3, #0]
 8016da6:	683b      	ldr	r3, [r7, #0]
 8016da8:	691b      	ldr	r3, [r3, #16]
 8016daa:	2b3e      	cmp	r3, #62	@ 0x3e
 8016dac:	d923      	bls.n	8016df6 <USB_EPStartXfer+0xdce>
 8016dae:	683b      	ldr	r3, [r7, #0]
 8016db0:	691b      	ldr	r3, [r3, #16]
 8016db2:	095b      	lsrs	r3, r3, #5
 8016db4:	21e0      	movs	r1, #224	@ 0xe0
 8016db6:	187a      	adds	r2, r7, r1
 8016db8:	6013      	str	r3, [r2, #0]
 8016dba:	683b      	ldr	r3, [r7, #0]
 8016dbc:	691b      	ldr	r3, [r3, #16]
 8016dbe:	221f      	movs	r2, #31
 8016dc0:	4013      	ands	r3, r2
 8016dc2:	d104      	bne.n	8016dce <USB_EPStartXfer+0xda6>
 8016dc4:	187b      	adds	r3, r7, r1
 8016dc6:	681b      	ldr	r3, [r3, #0]
 8016dc8:	3b01      	subs	r3, #1
 8016dca:	187a      	adds	r2, r7, r1
 8016dcc:	6013      	str	r3, [r2, #0]
 8016dce:	2198      	movs	r1, #152	@ 0x98
 8016dd0:	187b      	adds	r3, r7, r1
 8016dd2:	681b      	ldr	r3, [r3, #0]
 8016dd4:	881b      	ldrh	r3, [r3, #0]
 8016dd6:	b29a      	uxth	r2, r3
 8016dd8:	23e0      	movs	r3, #224	@ 0xe0
 8016dda:	18fb      	adds	r3, r7, r3
 8016ddc:	681b      	ldr	r3, [r3, #0]
 8016dde:	b29b      	uxth	r3, r3
 8016de0:	029b      	lsls	r3, r3, #10
 8016de2:	b29b      	uxth	r3, r3
 8016de4:	4313      	orrs	r3, r2
 8016de6:	b29b      	uxth	r3, r3
 8016de8:	4a1c      	ldr	r2, [pc, #112]	@ (8016e5c <USB_EPStartXfer+0xe34>)
 8016dea:	4313      	orrs	r3, r2
 8016dec:	b29a      	uxth	r2, r3
 8016dee:	187b      	adds	r3, r7, r1
 8016df0:	681b      	ldr	r3, [r3, #0]
 8016df2:	801a      	strh	r2, [r3, #0]
 8016df4:	e057      	b.n	8016ea6 <USB_EPStartXfer+0xe7e>
 8016df6:	683b      	ldr	r3, [r7, #0]
 8016df8:	691b      	ldr	r3, [r3, #16]
 8016dfa:	2b00      	cmp	r3, #0
 8016dfc:	d10b      	bne.n	8016e16 <USB_EPStartXfer+0xdee>
 8016dfe:	2198      	movs	r1, #152	@ 0x98
 8016e00:	187b      	adds	r3, r7, r1
 8016e02:	681b      	ldr	r3, [r3, #0]
 8016e04:	881b      	ldrh	r3, [r3, #0]
 8016e06:	b29b      	uxth	r3, r3
 8016e08:	4a14      	ldr	r2, [pc, #80]	@ (8016e5c <USB_EPStartXfer+0xe34>)
 8016e0a:	4313      	orrs	r3, r2
 8016e0c:	b29a      	uxth	r2, r3
 8016e0e:	187b      	adds	r3, r7, r1
 8016e10:	681b      	ldr	r3, [r3, #0]
 8016e12:	801a      	strh	r2, [r3, #0]
 8016e14:	e047      	b.n	8016ea6 <USB_EPStartXfer+0xe7e>
 8016e16:	683b      	ldr	r3, [r7, #0]
 8016e18:	691b      	ldr	r3, [r3, #16]
 8016e1a:	085b      	lsrs	r3, r3, #1
 8016e1c:	21e0      	movs	r1, #224	@ 0xe0
 8016e1e:	187a      	adds	r2, r7, r1
 8016e20:	6013      	str	r3, [r2, #0]
 8016e22:	683b      	ldr	r3, [r7, #0]
 8016e24:	691b      	ldr	r3, [r3, #16]
 8016e26:	2201      	movs	r2, #1
 8016e28:	4013      	ands	r3, r2
 8016e2a:	d004      	beq.n	8016e36 <USB_EPStartXfer+0xe0e>
 8016e2c:	187b      	adds	r3, r7, r1
 8016e2e:	681b      	ldr	r3, [r3, #0]
 8016e30:	3301      	adds	r3, #1
 8016e32:	187a      	adds	r2, r7, r1
 8016e34:	6013      	str	r3, [r2, #0]
 8016e36:	2198      	movs	r1, #152	@ 0x98
 8016e38:	187b      	adds	r3, r7, r1
 8016e3a:	681b      	ldr	r3, [r3, #0]
 8016e3c:	881b      	ldrh	r3, [r3, #0]
 8016e3e:	b29a      	uxth	r2, r3
 8016e40:	23e0      	movs	r3, #224	@ 0xe0
 8016e42:	18fb      	adds	r3, r7, r3
 8016e44:	681b      	ldr	r3, [r3, #0]
 8016e46:	b29b      	uxth	r3, r3
 8016e48:	029b      	lsls	r3, r3, #10
 8016e4a:	b29b      	uxth	r3, r3
 8016e4c:	4313      	orrs	r3, r2
 8016e4e:	b29a      	uxth	r2, r3
 8016e50:	187b      	adds	r3, r7, r1
 8016e52:	681b      	ldr	r3, [r3, #0]
 8016e54:	801a      	strh	r2, [r3, #0]
 8016e56:	e026      	b.n	8016ea6 <USB_EPStartXfer+0xe7e>
 8016e58:	00000406 	.word	0x00000406
 8016e5c:	ffff8000 	.word	0xffff8000
 8016e60:	00000402 	.word	0x00000402
 8016e64:	683b      	ldr	r3, [r7, #0]
 8016e66:	785b      	ldrb	r3, [r3, #1]
 8016e68:	2b01      	cmp	r3, #1
 8016e6a:	d11c      	bne.n	8016ea6 <USB_EPStartXfer+0xe7e>
 8016e6c:	687b      	ldr	r3, [r7, #4]
 8016e6e:	2250      	movs	r2, #80	@ 0x50
 8016e70:	5a9b      	ldrh	r3, [r3, r2]
 8016e72:	b29b      	uxth	r3, r3
 8016e74:	001a      	movs	r2, r3
 8016e76:	21a4      	movs	r1, #164	@ 0xa4
 8016e78:	187b      	adds	r3, r7, r1
 8016e7a:	681b      	ldr	r3, [r3, #0]
 8016e7c:	189b      	adds	r3, r3, r2
 8016e7e:	187a      	adds	r2, r7, r1
 8016e80:	6013      	str	r3, [r2, #0]
 8016e82:	683b      	ldr	r3, [r7, #0]
 8016e84:	781b      	ldrb	r3, [r3, #0]
 8016e86:	00da      	lsls	r2, r3, #3
 8016e88:	187b      	adds	r3, r7, r1
 8016e8a:	681b      	ldr	r3, [r3, #0]
 8016e8c:	18d3      	adds	r3, r2, r3
 8016e8e:	4ad2      	ldr	r2, [pc, #840]	@ (80171d8 <USB_EPStartXfer+0x11b0>)
 8016e90:	4694      	mov	ip, r2
 8016e92:	4463      	add	r3, ip
 8016e94:	21a0      	movs	r1, #160	@ 0xa0
 8016e96:	187a      	adds	r2, r7, r1
 8016e98:	6013      	str	r3, [r2, #0]
 8016e9a:	683b      	ldr	r3, [r7, #0]
 8016e9c:	691b      	ldr	r3, [r3, #16]
 8016e9e:	b29a      	uxth	r2, r3
 8016ea0:	187b      	adds	r3, r7, r1
 8016ea2:	681b      	ldr	r3, [r3, #0]
 8016ea4:	801a      	strh	r2, [r3, #0]

        /* Coming from ISR */
        if (ep->xfer_count != 0U)
 8016ea6:	683b      	ldr	r3, [r7, #0]
 8016ea8:	69db      	ldr	r3, [r3, #28]
 8016eaa:	2b00      	cmp	r3, #0
 8016eac:	d100      	bne.n	8016eb0 <USB_EPStartXfer+0xe88>
 8016eae:	e1c2      	b.n	8017236 <USB_EPStartXfer+0x120e>
        {
          /* update last value to check if there is blocking state */
          wEPVal = PCD_GET_ENDPOINT(USBx, ep->num);
 8016eb0:	687a      	ldr	r2, [r7, #4]
 8016eb2:	683b      	ldr	r3, [r7, #0]
 8016eb4:	781b      	ldrb	r3, [r3, #0]
 8016eb6:	009b      	lsls	r3, r3, #2
 8016eb8:	18d2      	adds	r2, r2, r3
 8016eba:	2196      	movs	r1, #150	@ 0x96
 8016ebc:	187b      	adds	r3, r7, r1
 8016ebe:	8812      	ldrh	r2, [r2, #0]
 8016ec0:	801a      	strh	r2, [r3, #0]

          /*Blocking State */
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8016ec2:	187b      	adds	r3, r7, r1
 8016ec4:	881a      	ldrh	r2, [r3, #0]
 8016ec6:	2380      	movs	r3, #128	@ 0x80
 8016ec8:	01db      	lsls	r3, r3, #7
 8016eca:	4013      	ands	r3, r2
 8016ecc:	d004      	beq.n	8016ed8 <USB_EPStartXfer+0xeb0>
 8016ece:	187b      	adds	r3, r7, r1
 8016ed0:	881b      	ldrh	r3, [r3, #0]
 8016ed2:	2240      	movs	r2, #64	@ 0x40
 8016ed4:	4013      	ands	r3, r2
 8016ed6:	d10d      	bne.n	8016ef4 <USB_EPStartXfer+0xecc>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8016ed8:	2196      	movs	r1, #150	@ 0x96
 8016eda:	187b      	adds	r3, r7, r1
 8016edc:	881a      	ldrh	r2, [r3, #0]
 8016ede:	2380      	movs	r3, #128	@ 0x80
 8016ee0:	01db      	lsls	r3, r3, #7
 8016ee2:	4013      	ands	r3, r2
          if ((((wEPVal & USB_EP_DTOG_RX) != 0U) && ((wEPVal & USB_EP_DTOG_TX) != 0U)) ||
 8016ee4:	d000      	beq.n	8016ee8 <USB_EPStartXfer+0xec0>
 8016ee6:	e1a6      	b.n	8017236 <USB_EPStartXfer+0x120e>
              (((wEPVal & USB_EP_DTOG_RX) == 0U) && ((wEPVal & USB_EP_DTOG_TX) == 0U)))
 8016ee8:	187b      	adds	r3, r7, r1
 8016eea:	881b      	ldrh	r3, [r3, #0]
 8016eec:	2240      	movs	r2, #64	@ 0x40
 8016eee:	4013      	ands	r3, r2
 8016ef0:	d000      	beq.n	8016ef4 <USB_EPStartXfer+0xecc>
 8016ef2:	e1a0      	b.n	8017236 <USB_EPStartXfer+0x120e>
          {
            PCD_FREE_USER_BUFFER(USBx, ep->num, 0U);
 8016ef4:	687a      	ldr	r2, [r7, #4]
 8016ef6:	683b      	ldr	r3, [r7, #0]
 8016ef8:	781b      	ldrb	r3, [r3, #0]
 8016efa:	009b      	lsls	r3, r3, #2
 8016efc:	18d3      	adds	r3, r2, r3
 8016efe:	881b      	ldrh	r3, [r3, #0]
 8016f00:	b29a      	uxth	r2, r3
 8016f02:	2094      	movs	r0, #148	@ 0x94
 8016f04:	183b      	adds	r3, r7, r0
 8016f06:	49b5      	ldr	r1, [pc, #724]	@ (80171dc <USB_EPStartXfer+0x11b4>)
 8016f08:	400a      	ands	r2, r1
 8016f0a:	801a      	strh	r2, [r3, #0]
 8016f0c:	687a      	ldr	r2, [r7, #4]
 8016f0e:	683b      	ldr	r3, [r7, #0]
 8016f10:	781b      	ldrb	r3, [r3, #0]
 8016f12:	009b      	lsls	r3, r3, #2
 8016f14:	18d3      	adds	r3, r2, r3
 8016f16:	183a      	adds	r2, r7, r0
 8016f18:	8812      	ldrh	r2, [r2, #0]
 8016f1a:	49b1      	ldr	r1, [pc, #708]	@ (80171e0 <USB_EPStartXfer+0x11b8>)
 8016f1c:	430a      	orrs	r2, r1
 8016f1e:	b292      	uxth	r2, r2
 8016f20:	801a      	strh	r2, [r3, #0]
 8016f22:	e188      	b.n	8017236 <USB_EPStartXfer+0x120e>
          }
        }
      }
      /* iso out double */
      else if (ep->type == EP_TYPE_ISOC)
 8016f24:	683b      	ldr	r3, [r7, #0]
 8016f26:	78db      	ldrb	r3, [r3, #3]
 8016f28:	2b01      	cmp	r3, #1
 8016f2a:	d000      	beq.n	8016f2e <USB_EPStartXfer+0xf06>
 8016f2c:	e181      	b.n	8017232 <USB_EPStartXfer+0x120a>
      {
        /* Multi packet transfer */
        if (ep->xfer_len > ep->maxpacket)
 8016f2e:	683b      	ldr	r3, [r7, #0]
 8016f30:	699a      	ldr	r2, [r3, #24]
 8016f32:	683b      	ldr	r3, [r7, #0]
 8016f34:	691b      	ldr	r3, [r3, #16]
 8016f36:	429a      	cmp	r2, r3
 8016f38:	d90d      	bls.n	8016f56 <USB_EPStartXfer+0xf2e>
        {
          len = ep->maxpacket;
 8016f3a:	683b      	ldr	r3, [r7, #0]
 8016f3c:	691b      	ldr	r3, [r3, #16]
 8016f3e:	1d7a      	adds	r2, r7, #5
 8016f40:	32ff      	adds	r2, #255	@ 0xff
 8016f42:	6013      	str	r3, [r2, #0]
          ep->xfer_len -= len;
 8016f44:	683b      	ldr	r3, [r7, #0]
 8016f46:	699a      	ldr	r2, [r3, #24]
 8016f48:	1d7b      	adds	r3, r7, #5
 8016f4a:	33ff      	adds	r3, #255	@ 0xff
 8016f4c:	681b      	ldr	r3, [r3, #0]
 8016f4e:	1ad2      	subs	r2, r2, r3
 8016f50:	683b      	ldr	r3, [r7, #0]
 8016f52:	619a      	str	r2, [r3, #24]
 8016f54:	e007      	b.n	8016f66 <USB_EPStartXfer+0xf3e>
        }
        else
        {
          len = ep->xfer_len;
 8016f56:	683b      	ldr	r3, [r7, #0]
 8016f58:	699b      	ldr	r3, [r3, #24]
 8016f5a:	1d7a      	adds	r2, r7, #5
 8016f5c:	32ff      	adds	r2, #255	@ 0xff
 8016f5e:	6013      	str	r3, [r2, #0]
          ep->xfer_len = 0U;
 8016f60:	683b      	ldr	r3, [r7, #0]
 8016f62:	2200      	movs	r2, #0
 8016f64:	619a      	str	r2, [r3, #24]
        }
        PCD_SET_EP_DBUF_CNT(USBx, ep->num, ep->is_in, len);
 8016f66:	683b      	ldr	r3, [r7, #0]
 8016f68:	785b      	ldrb	r3, [r3, #1]
 8016f6a:	2b00      	cmp	r3, #0
 8016f6c:	d000      	beq.n	8016f70 <USB_EPStartXfer+0xf48>
 8016f6e:	e082      	b.n	8017076 <USB_EPStartXfer+0x104e>
 8016f70:	687b      	ldr	r3, [r7, #4]
 8016f72:	21cc      	movs	r1, #204	@ 0xcc
 8016f74:	187a      	adds	r2, r7, r1
 8016f76:	6013      	str	r3, [r2, #0]
 8016f78:	687b      	ldr	r3, [r7, #4]
 8016f7a:	2250      	movs	r2, #80	@ 0x50
 8016f7c:	5a9b      	ldrh	r3, [r3, r2]
 8016f7e:	b29b      	uxth	r3, r3
 8016f80:	001a      	movs	r2, r3
 8016f82:	187b      	adds	r3, r7, r1
 8016f84:	681b      	ldr	r3, [r3, #0]
 8016f86:	189b      	adds	r3, r3, r2
 8016f88:	187a      	adds	r2, r7, r1
 8016f8a:	6013      	str	r3, [r2, #0]
 8016f8c:	683b      	ldr	r3, [r7, #0]
 8016f8e:	781b      	ldrb	r3, [r3, #0]
 8016f90:	00da      	lsls	r2, r3, #3
 8016f92:	187b      	adds	r3, r7, r1
 8016f94:	681b      	ldr	r3, [r3, #0]
 8016f96:	18d3      	adds	r3, r2, r3
 8016f98:	4a92      	ldr	r2, [pc, #584]	@ (80171e4 <USB_EPStartXfer+0x11bc>)
 8016f9a:	4694      	mov	ip, r2
 8016f9c:	4463      	add	r3, ip
 8016f9e:	21c8      	movs	r1, #200	@ 0xc8
 8016fa0:	187a      	adds	r2, r7, r1
 8016fa2:	6013      	str	r3, [r2, #0]
 8016fa4:	187b      	adds	r3, r7, r1
 8016fa6:	681b      	ldr	r3, [r3, #0]
 8016fa8:	881b      	ldrh	r3, [r3, #0]
 8016faa:	b29b      	uxth	r3, r3
 8016fac:	059b      	lsls	r3, r3, #22
 8016fae:	0d9b      	lsrs	r3, r3, #22
 8016fb0:	b29a      	uxth	r2, r3
 8016fb2:	187b      	adds	r3, r7, r1
 8016fb4:	681b      	ldr	r3, [r3, #0]
 8016fb6:	801a      	strh	r2, [r3, #0]
 8016fb8:	1d7b      	adds	r3, r7, #5
 8016fba:	33ff      	adds	r3, #255	@ 0xff
 8016fbc:	681b      	ldr	r3, [r3, #0]
 8016fbe:	2b3e      	cmp	r3, #62	@ 0x3e
 8016fc0:	d925      	bls.n	801700e <USB_EPStartXfer+0xfe6>
 8016fc2:	1d7b      	adds	r3, r7, #5
 8016fc4:	33ff      	adds	r3, #255	@ 0xff
 8016fc6:	681b      	ldr	r3, [r3, #0]
 8016fc8:	095b      	lsrs	r3, r3, #5
 8016fca:	21dc      	movs	r1, #220	@ 0xdc
 8016fcc:	187a      	adds	r2, r7, r1
 8016fce:	6013      	str	r3, [r2, #0]
 8016fd0:	1d7b      	adds	r3, r7, #5
 8016fd2:	33ff      	adds	r3, #255	@ 0xff
 8016fd4:	681b      	ldr	r3, [r3, #0]
 8016fd6:	221f      	movs	r2, #31
 8016fd8:	4013      	ands	r3, r2
 8016fda:	d104      	bne.n	8016fe6 <USB_EPStartXfer+0xfbe>
 8016fdc:	187b      	adds	r3, r7, r1
 8016fde:	681b      	ldr	r3, [r3, #0]
 8016fe0:	3b01      	subs	r3, #1
 8016fe2:	187a      	adds	r2, r7, r1
 8016fe4:	6013      	str	r3, [r2, #0]
 8016fe6:	21c8      	movs	r1, #200	@ 0xc8
 8016fe8:	187b      	adds	r3, r7, r1
 8016fea:	681b      	ldr	r3, [r3, #0]
 8016fec:	881b      	ldrh	r3, [r3, #0]
 8016fee:	b29a      	uxth	r2, r3
 8016ff0:	23dc      	movs	r3, #220	@ 0xdc
 8016ff2:	18fb      	adds	r3, r7, r3
 8016ff4:	681b      	ldr	r3, [r3, #0]
 8016ff6:	b29b      	uxth	r3, r3
 8016ff8:	029b      	lsls	r3, r3, #10
 8016ffa:	b29b      	uxth	r3, r3
 8016ffc:	4313      	orrs	r3, r2
 8016ffe:	b29b      	uxth	r3, r3
 8017000:	4a79      	ldr	r2, [pc, #484]	@ (80171e8 <USB_EPStartXfer+0x11c0>)
 8017002:	4313      	orrs	r3, r2
 8017004:	b29a      	uxth	r2, r3
 8017006:	187b      	adds	r3, r7, r1
 8017008:	681b      	ldr	r3, [r3, #0]
 801700a:	801a      	strh	r2, [r3, #0]
 801700c:	e058      	b.n	80170c0 <USB_EPStartXfer+0x1098>
 801700e:	1d7b      	adds	r3, r7, #5
 8017010:	33ff      	adds	r3, #255	@ 0xff
 8017012:	681b      	ldr	r3, [r3, #0]
 8017014:	2b00      	cmp	r3, #0
 8017016:	d10b      	bne.n	8017030 <USB_EPStartXfer+0x1008>
 8017018:	21c8      	movs	r1, #200	@ 0xc8
 801701a:	187b      	adds	r3, r7, r1
 801701c:	681b      	ldr	r3, [r3, #0]
 801701e:	881b      	ldrh	r3, [r3, #0]
 8017020:	b29b      	uxth	r3, r3
 8017022:	4a71      	ldr	r2, [pc, #452]	@ (80171e8 <USB_EPStartXfer+0x11c0>)
 8017024:	4313      	orrs	r3, r2
 8017026:	b29a      	uxth	r2, r3
 8017028:	187b      	adds	r3, r7, r1
 801702a:	681b      	ldr	r3, [r3, #0]
 801702c:	801a      	strh	r2, [r3, #0]
 801702e:	e047      	b.n	80170c0 <USB_EPStartXfer+0x1098>
 8017030:	1d7b      	adds	r3, r7, #5
 8017032:	33ff      	adds	r3, #255	@ 0xff
 8017034:	681b      	ldr	r3, [r3, #0]
 8017036:	085b      	lsrs	r3, r3, #1
 8017038:	21dc      	movs	r1, #220	@ 0xdc
 801703a:	187a      	adds	r2, r7, r1
 801703c:	6013      	str	r3, [r2, #0]
 801703e:	1d7b      	adds	r3, r7, #5
 8017040:	33ff      	adds	r3, #255	@ 0xff
 8017042:	681b      	ldr	r3, [r3, #0]
 8017044:	2201      	movs	r2, #1
 8017046:	4013      	ands	r3, r2
 8017048:	d004      	beq.n	8017054 <USB_EPStartXfer+0x102c>
 801704a:	187b      	adds	r3, r7, r1
 801704c:	681b      	ldr	r3, [r3, #0]
 801704e:	3301      	adds	r3, #1
 8017050:	187a      	adds	r2, r7, r1
 8017052:	6013      	str	r3, [r2, #0]
 8017054:	21c8      	movs	r1, #200	@ 0xc8
 8017056:	187b      	adds	r3, r7, r1
 8017058:	681b      	ldr	r3, [r3, #0]
 801705a:	881b      	ldrh	r3, [r3, #0]
 801705c:	b29a      	uxth	r2, r3
 801705e:	23dc      	movs	r3, #220	@ 0xdc
 8017060:	18fb      	adds	r3, r7, r3
 8017062:	681b      	ldr	r3, [r3, #0]
 8017064:	b29b      	uxth	r3, r3
 8017066:	029b      	lsls	r3, r3, #10
 8017068:	b29b      	uxth	r3, r3
 801706a:	4313      	orrs	r3, r2
 801706c:	b29a      	uxth	r2, r3
 801706e:	187b      	adds	r3, r7, r1
 8017070:	681b      	ldr	r3, [r3, #0]
 8017072:	801a      	strh	r2, [r3, #0]
 8017074:	e024      	b.n	80170c0 <USB_EPStartXfer+0x1098>
 8017076:	683b      	ldr	r3, [r7, #0]
 8017078:	785b      	ldrb	r3, [r3, #1]
 801707a:	2b01      	cmp	r3, #1
 801707c:	d120      	bne.n	80170c0 <USB_EPStartXfer+0x1098>
 801707e:	687b      	ldr	r3, [r7, #4]
 8017080:	21d4      	movs	r1, #212	@ 0xd4
 8017082:	187a      	adds	r2, r7, r1
 8017084:	6013      	str	r3, [r2, #0]
 8017086:	687b      	ldr	r3, [r7, #4]
 8017088:	2250      	movs	r2, #80	@ 0x50
 801708a:	5a9b      	ldrh	r3, [r3, r2]
 801708c:	b29b      	uxth	r3, r3
 801708e:	001a      	movs	r2, r3
 8017090:	187b      	adds	r3, r7, r1
 8017092:	681b      	ldr	r3, [r3, #0]
 8017094:	189b      	adds	r3, r3, r2
 8017096:	187a      	adds	r2, r7, r1
 8017098:	6013      	str	r3, [r2, #0]
 801709a:	683b      	ldr	r3, [r7, #0]
 801709c:	781b      	ldrb	r3, [r3, #0]
 801709e:	00da      	lsls	r2, r3, #3
 80170a0:	187b      	adds	r3, r7, r1
 80170a2:	681b      	ldr	r3, [r3, #0]
 80170a4:	18d3      	adds	r3, r2, r3
 80170a6:	4a4f      	ldr	r2, [pc, #316]	@ (80171e4 <USB_EPStartXfer+0x11bc>)
 80170a8:	4694      	mov	ip, r2
 80170aa:	4463      	add	r3, ip
 80170ac:	21d0      	movs	r1, #208	@ 0xd0
 80170ae:	187a      	adds	r2, r7, r1
 80170b0:	6013      	str	r3, [r2, #0]
 80170b2:	1d7b      	adds	r3, r7, #5
 80170b4:	33ff      	adds	r3, #255	@ 0xff
 80170b6:	681b      	ldr	r3, [r3, #0]
 80170b8:	b29a      	uxth	r2, r3
 80170ba:	187b      	adds	r3, r7, r1
 80170bc:	681b      	ldr	r3, [r3, #0]
 80170be:	801a      	strh	r2, [r3, #0]
 80170c0:	687b      	ldr	r3, [r7, #4]
 80170c2:	22c4      	movs	r2, #196	@ 0xc4
 80170c4:	18ba      	adds	r2, r7, r2
 80170c6:	6013      	str	r3, [r2, #0]
 80170c8:	683b      	ldr	r3, [r7, #0]
 80170ca:	785b      	ldrb	r3, [r3, #1]
 80170cc:	2b00      	cmp	r3, #0
 80170ce:	d000      	beq.n	80170d2 <USB_EPStartXfer+0x10aa>
 80170d0:	e08c      	b.n	80171ec <USB_EPStartXfer+0x11c4>
 80170d2:	687b      	ldr	r3, [r7, #4]
 80170d4:	21bc      	movs	r1, #188	@ 0xbc
 80170d6:	187a      	adds	r2, r7, r1
 80170d8:	6013      	str	r3, [r2, #0]
 80170da:	687b      	ldr	r3, [r7, #4]
 80170dc:	2250      	movs	r2, #80	@ 0x50
 80170de:	5a9b      	ldrh	r3, [r3, r2]
 80170e0:	b29b      	uxth	r3, r3
 80170e2:	001a      	movs	r2, r3
 80170e4:	187b      	adds	r3, r7, r1
 80170e6:	681b      	ldr	r3, [r3, #0]
 80170e8:	189b      	adds	r3, r3, r2
 80170ea:	187a      	adds	r2, r7, r1
 80170ec:	6013      	str	r3, [r2, #0]
 80170ee:	683b      	ldr	r3, [r7, #0]
 80170f0:	781b      	ldrb	r3, [r3, #0]
 80170f2:	00da      	lsls	r2, r3, #3
 80170f4:	187b      	adds	r3, r7, r1
 80170f6:	681b      	ldr	r3, [r3, #0]
 80170f8:	18d3      	adds	r3, r2, r3
 80170fa:	4a37      	ldr	r2, [pc, #220]	@ (80171d8 <USB_EPStartXfer+0x11b0>)
 80170fc:	4694      	mov	ip, r2
 80170fe:	4463      	add	r3, ip
 8017100:	21b8      	movs	r1, #184	@ 0xb8
 8017102:	187a      	adds	r2, r7, r1
 8017104:	6013      	str	r3, [r2, #0]
 8017106:	187b      	adds	r3, r7, r1
 8017108:	681b      	ldr	r3, [r3, #0]
 801710a:	881b      	ldrh	r3, [r3, #0]
 801710c:	b29b      	uxth	r3, r3
 801710e:	059b      	lsls	r3, r3, #22
 8017110:	0d9b      	lsrs	r3, r3, #22
 8017112:	b29a      	uxth	r2, r3
 8017114:	187b      	adds	r3, r7, r1
 8017116:	681b      	ldr	r3, [r3, #0]
 8017118:	801a      	strh	r2, [r3, #0]
 801711a:	1d7b      	adds	r3, r7, #5
 801711c:	33ff      	adds	r3, #255	@ 0xff
 801711e:	681b      	ldr	r3, [r3, #0]
 8017120:	2b3e      	cmp	r3, #62	@ 0x3e
 8017122:	d925      	bls.n	8017170 <USB_EPStartXfer+0x1148>
 8017124:	1d7b      	adds	r3, r7, #5
 8017126:	33ff      	adds	r3, #255	@ 0xff
 8017128:	681b      	ldr	r3, [r3, #0]
 801712a:	095b      	lsrs	r3, r3, #5
 801712c:	21d8      	movs	r1, #216	@ 0xd8
 801712e:	187a      	adds	r2, r7, r1
 8017130:	6013      	str	r3, [r2, #0]
 8017132:	1d7b      	adds	r3, r7, #5
 8017134:	33ff      	adds	r3, #255	@ 0xff
 8017136:	681b      	ldr	r3, [r3, #0]
 8017138:	221f      	movs	r2, #31
 801713a:	4013      	ands	r3, r2
 801713c:	d104      	bne.n	8017148 <USB_EPStartXfer+0x1120>
 801713e:	187b      	adds	r3, r7, r1
 8017140:	681b      	ldr	r3, [r3, #0]
 8017142:	3b01      	subs	r3, #1
 8017144:	187a      	adds	r2, r7, r1
 8017146:	6013      	str	r3, [r2, #0]
 8017148:	21b8      	movs	r1, #184	@ 0xb8
 801714a:	187b      	adds	r3, r7, r1
 801714c:	681b      	ldr	r3, [r3, #0]
 801714e:	881b      	ldrh	r3, [r3, #0]
 8017150:	b29a      	uxth	r2, r3
 8017152:	23d8      	movs	r3, #216	@ 0xd8
 8017154:	18fb      	adds	r3, r7, r3
 8017156:	681b      	ldr	r3, [r3, #0]
 8017158:	b29b      	uxth	r3, r3
 801715a:	029b      	lsls	r3, r3, #10
 801715c:	b29b      	uxth	r3, r3
 801715e:	4313      	orrs	r3, r2
 8017160:	b29b      	uxth	r3, r3
 8017162:	4a21      	ldr	r2, [pc, #132]	@ (80171e8 <USB_EPStartXfer+0x11c0>)
 8017164:	4313      	orrs	r3, r2
 8017166:	b29a      	uxth	r2, r3
 8017168:	187b      	adds	r3, r7, r1
 801716a:	681b      	ldr	r3, [r3, #0]
 801716c:	801a      	strh	r2, [r3, #0]
 801716e:	e062      	b.n	8017236 <USB_EPStartXfer+0x120e>
 8017170:	1d7b      	adds	r3, r7, #5
 8017172:	33ff      	adds	r3, #255	@ 0xff
 8017174:	681b      	ldr	r3, [r3, #0]
 8017176:	2b00      	cmp	r3, #0
 8017178:	d10b      	bne.n	8017192 <USB_EPStartXfer+0x116a>
 801717a:	21b8      	movs	r1, #184	@ 0xb8
 801717c:	187b      	adds	r3, r7, r1
 801717e:	681b      	ldr	r3, [r3, #0]
 8017180:	881b      	ldrh	r3, [r3, #0]
 8017182:	b29b      	uxth	r3, r3
 8017184:	4a18      	ldr	r2, [pc, #96]	@ (80171e8 <USB_EPStartXfer+0x11c0>)
 8017186:	4313      	orrs	r3, r2
 8017188:	b29a      	uxth	r2, r3
 801718a:	187b      	adds	r3, r7, r1
 801718c:	681b      	ldr	r3, [r3, #0]
 801718e:	801a      	strh	r2, [r3, #0]
 8017190:	e051      	b.n	8017236 <USB_EPStartXfer+0x120e>
 8017192:	1d7b      	adds	r3, r7, #5
 8017194:	33ff      	adds	r3, #255	@ 0xff
 8017196:	681b      	ldr	r3, [r3, #0]
 8017198:	085b      	lsrs	r3, r3, #1
 801719a:	21d8      	movs	r1, #216	@ 0xd8
 801719c:	187a      	adds	r2, r7, r1
 801719e:	6013      	str	r3, [r2, #0]
 80171a0:	1d7b      	adds	r3, r7, #5
 80171a2:	33ff      	adds	r3, #255	@ 0xff
 80171a4:	681b      	ldr	r3, [r3, #0]
 80171a6:	2201      	movs	r2, #1
 80171a8:	4013      	ands	r3, r2
 80171aa:	d004      	beq.n	80171b6 <USB_EPStartXfer+0x118e>
 80171ac:	187b      	adds	r3, r7, r1
 80171ae:	681b      	ldr	r3, [r3, #0]
 80171b0:	3301      	adds	r3, #1
 80171b2:	187a      	adds	r2, r7, r1
 80171b4:	6013      	str	r3, [r2, #0]
 80171b6:	21b8      	movs	r1, #184	@ 0xb8
 80171b8:	187b      	adds	r3, r7, r1
 80171ba:	681b      	ldr	r3, [r3, #0]
 80171bc:	881b      	ldrh	r3, [r3, #0]
 80171be:	b29a      	uxth	r2, r3
 80171c0:	23d8      	movs	r3, #216	@ 0xd8
 80171c2:	18fb      	adds	r3, r7, r3
 80171c4:	681b      	ldr	r3, [r3, #0]
 80171c6:	b29b      	uxth	r3, r3
 80171c8:	029b      	lsls	r3, r3, #10
 80171ca:	b29b      	uxth	r3, r3
 80171cc:	4313      	orrs	r3, r2
 80171ce:	b29a      	uxth	r2, r3
 80171d0:	187b      	adds	r3, r7, r1
 80171d2:	681b      	ldr	r3, [r3, #0]
 80171d4:	801a      	strh	r2, [r3, #0]
 80171d6:	e02e      	b.n	8017236 <USB_EPStartXfer+0x120e>
 80171d8:	00000406 	.word	0x00000406
 80171dc:	ffff8f8f 	.word	0xffff8f8f
 80171e0:	ffff80c0 	.word	0xffff80c0
 80171e4:	00000402 	.word	0x00000402
 80171e8:	ffff8000 	.word	0xffff8000
 80171ec:	683b      	ldr	r3, [r7, #0]
 80171ee:	785b      	ldrb	r3, [r3, #1]
 80171f0:	2b01      	cmp	r3, #1
 80171f2:	d120      	bne.n	8017236 <USB_EPStartXfer+0x120e>
 80171f4:	687b      	ldr	r3, [r7, #4]
 80171f6:	2250      	movs	r2, #80	@ 0x50
 80171f8:	5a9b      	ldrh	r3, [r3, r2]
 80171fa:	b29b      	uxth	r3, r3
 80171fc:	001a      	movs	r2, r3
 80171fe:	21c4      	movs	r1, #196	@ 0xc4
 8017200:	187b      	adds	r3, r7, r1
 8017202:	681b      	ldr	r3, [r3, #0]
 8017204:	189b      	adds	r3, r3, r2
 8017206:	187a      	adds	r2, r7, r1
 8017208:	6013      	str	r3, [r2, #0]
 801720a:	683b      	ldr	r3, [r7, #0]
 801720c:	781b      	ldrb	r3, [r3, #0]
 801720e:	00da      	lsls	r2, r3, #3
 8017210:	187b      	adds	r3, r7, r1
 8017212:	681b      	ldr	r3, [r3, #0]
 8017214:	18d3      	adds	r3, r2, r3
 8017216:	4a1d      	ldr	r2, [pc, #116]	@ (801728c <USB_EPStartXfer+0x1264>)
 8017218:	4694      	mov	ip, r2
 801721a:	4463      	add	r3, ip
 801721c:	21c0      	movs	r1, #192	@ 0xc0
 801721e:	187a      	adds	r2, r7, r1
 8017220:	6013      	str	r3, [r2, #0]
 8017222:	1d7b      	adds	r3, r7, #5
 8017224:	33ff      	adds	r3, #255	@ 0xff
 8017226:	681b      	ldr	r3, [r3, #0]
 8017228:	b29a      	uxth	r2, r3
 801722a:	187b      	adds	r3, r7, r1
 801722c:	681b      	ldr	r3, [r3, #0]
 801722e:	801a      	strh	r2, [r3, #0]
 8017230:	e001      	b.n	8017236 <USB_EPStartXfer+0x120e>
      }
      else
      {
        return HAL_ERROR;
 8017232:	2301      	movs	r3, #1
 8017234:	e025      	b.n	8017282 <USB_EPStartXfer+0x125a>
      }
    }
#endif /* (USE_USB_DOUBLE_BUFFER == 1U) */

    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 8017236:	687a      	ldr	r2, [r7, #4]
 8017238:	683b      	ldr	r3, [r7, #0]
 801723a:	781b      	ldrb	r3, [r3, #0]
 801723c:	009b      	lsls	r3, r3, #2
 801723e:	18d3      	adds	r3, r2, r3
 8017240:	881b      	ldrh	r3, [r3, #0]
 8017242:	b29a      	uxth	r2, r3
 8017244:	208a      	movs	r0, #138	@ 0x8a
 8017246:	183b      	adds	r3, r7, r0
 8017248:	4911      	ldr	r1, [pc, #68]	@ (8017290 <USB_EPStartXfer+0x1268>)
 801724a:	400a      	ands	r2, r1
 801724c:	801a      	strh	r2, [r3, #0]
 801724e:	183b      	adds	r3, r7, r0
 8017250:	183a      	adds	r2, r7, r0
 8017252:	8812      	ldrh	r2, [r2, #0]
 8017254:	2180      	movs	r1, #128	@ 0x80
 8017256:	0149      	lsls	r1, r1, #5
 8017258:	404a      	eors	r2, r1
 801725a:	801a      	strh	r2, [r3, #0]
 801725c:	183b      	adds	r3, r7, r0
 801725e:	183a      	adds	r2, r7, r0
 8017260:	8812      	ldrh	r2, [r2, #0]
 8017262:	2180      	movs	r1, #128	@ 0x80
 8017264:	0189      	lsls	r1, r1, #6
 8017266:	404a      	eors	r2, r1
 8017268:	801a      	strh	r2, [r3, #0]
 801726a:	687a      	ldr	r2, [r7, #4]
 801726c:	683b      	ldr	r3, [r7, #0]
 801726e:	781b      	ldrb	r3, [r3, #0]
 8017270:	009b      	lsls	r3, r3, #2
 8017272:	18d3      	adds	r3, r2, r3
 8017274:	183a      	adds	r2, r7, r0
 8017276:	8812      	ldrh	r2, [r2, #0]
 8017278:	4906      	ldr	r1, [pc, #24]	@ (8017294 <USB_EPStartXfer+0x126c>)
 801727a:	430a      	orrs	r2, r1
 801727c:	b292      	uxth	r2, r2
 801727e:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8017280:	2300      	movs	r3, #0
}
 8017282:	0018      	movs	r0, r3
 8017284:	46bd      	mov	sp, r7
 8017286:	b043      	add	sp, #268	@ 0x10c
 8017288:	bd90      	pop	{r4, r7, pc}
 801728a:	46c0      	nop			@ (mov r8, r8)
 801728c:	00000406 	.word	0x00000406
 8017290:	ffffbf8f 	.word	0xffffbf8f
 8017294:	ffff8080 	.word	0xffff8080

08017298 <USB_EPSetStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPSetStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8017298:	b580      	push	{r7, lr}
 801729a:	b084      	sub	sp, #16
 801729c:	af00      	add	r7, sp, #0
 801729e:	6078      	str	r0, [r7, #4]
 80172a0:	6039      	str	r1, [r7, #0]
  if (ep->is_in != 0U)
 80172a2:	683b      	ldr	r3, [r7, #0]
 80172a4:	785b      	ldrb	r3, [r3, #1]
 80172a6:	2b00      	cmp	r3, #0
 80172a8:	d01d      	beq.n	80172e6 <USB_EPSetStall+0x4e>
  {
    PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_STALL);
 80172aa:	687a      	ldr	r2, [r7, #4]
 80172ac:	683b      	ldr	r3, [r7, #0]
 80172ae:	781b      	ldrb	r3, [r3, #0]
 80172b0:	009b      	lsls	r3, r3, #2
 80172b2:	18d3      	adds	r3, r2, r3
 80172b4:	881b      	ldrh	r3, [r3, #0]
 80172b6:	b29a      	uxth	r2, r3
 80172b8:	200c      	movs	r0, #12
 80172ba:	183b      	adds	r3, r7, r0
 80172bc:	491b      	ldr	r1, [pc, #108]	@ (801732c <USB_EPSetStall+0x94>)
 80172be:	400a      	ands	r2, r1
 80172c0:	801a      	strh	r2, [r3, #0]
 80172c2:	183b      	adds	r3, r7, r0
 80172c4:	183a      	adds	r2, r7, r0
 80172c6:	8812      	ldrh	r2, [r2, #0]
 80172c8:	2110      	movs	r1, #16
 80172ca:	404a      	eors	r2, r1
 80172cc:	801a      	strh	r2, [r3, #0]
 80172ce:	687a      	ldr	r2, [r7, #4]
 80172d0:	683b      	ldr	r3, [r7, #0]
 80172d2:	781b      	ldrb	r3, [r3, #0]
 80172d4:	009b      	lsls	r3, r3, #2
 80172d6:	18d3      	adds	r3, r2, r3
 80172d8:	183a      	adds	r2, r7, r0
 80172da:	8812      	ldrh	r2, [r2, #0]
 80172dc:	4914      	ldr	r1, [pc, #80]	@ (8017330 <USB_EPSetStall+0x98>)
 80172de:	430a      	orrs	r2, r1
 80172e0:	b292      	uxth	r2, r2
 80172e2:	801a      	strh	r2, [r3, #0]
 80172e4:	e01d      	b.n	8017322 <USB_EPSetStall+0x8a>
  }
  else
  {
    PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_STALL);
 80172e6:	687a      	ldr	r2, [r7, #4]
 80172e8:	683b      	ldr	r3, [r7, #0]
 80172ea:	781b      	ldrb	r3, [r3, #0]
 80172ec:	009b      	lsls	r3, r3, #2
 80172ee:	18d3      	adds	r3, r2, r3
 80172f0:	881b      	ldrh	r3, [r3, #0]
 80172f2:	b29a      	uxth	r2, r3
 80172f4:	200e      	movs	r0, #14
 80172f6:	183b      	adds	r3, r7, r0
 80172f8:	490e      	ldr	r1, [pc, #56]	@ (8017334 <USB_EPSetStall+0x9c>)
 80172fa:	400a      	ands	r2, r1
 80172fc:	801a      	strh	r2, [r3, #0]
 80172fe:	183b      	adds	r3, r7, r0
 8017300:	183a      	adds	r2, r7, r0
 8017302:	8812      	ldrh	r2, [r2, #0]
 8017304:	2180      	movs	r1, #128	@ 0x80
 8017306:	0149      	lsls	r1, r1, #5
 8017308:	404a      	eors	r2, r1
 801730a:	801a      	strh	r2, [r3, #0]
 801730c:	687a      	ldr	r2, [r7, #4]
 801730e:	683b      	ldr	r3, [r7, #0]
 8017310:	781b      	ldrb	r3, [r3, #0]
 8017312:	009b      	lsls	r3, r3, #2
 8017314:	18d3      	adds	r3, r2, r3
 8017316:	183a      	adds	r2, r7, r0
 8017318:	8812      	ldrh	r2, [r2, #0]
 801731a:	4905      	ldr	r1, [pc, #20]	@ (8017330 <USB_EPSetStall+0x98>)
 801731c:	430a      	orrs	r2, r1
 801731e:	b292      	uxth	r2, r2
 8017320:	801a      	strh	r2, [r3, #0]
  }

  return HAL_OK;
 8017322:	2300      	movs	r3, #0
}
 8017324:	0018      	movs	r0, r3
 8017326:	46bd      	mov	sp, r7
 8017328:	b004      	add	sp, #16
 801732a:	bd80      	pop	{r7, pc}
 801732c:	ffff8fbf 	.word	0xffff8fbf
 8017330:	ffff8080 	.word	0xffff8080
 8017334:	ffffbf8f 	.word	0xffffbf8f

08017338 <USB_EPClearStall>:
  * @param  USBx Selected device
  * @param  ep pointer to endpoint structure
  * @retval HAL status
  */
HAL_StatusTypeDef USB_EPClearStall(USB_TypeDef *USBx, USB_EPTypeDef *ep)
{
 8017338:	b580      	push	{r7, lr}
 801733a:	b086      	sub	sp, #24
 801733c:	af00      	add	r7, sp, #0
 801733e:	6078      	str	r0, [r7, #4]
 8017340:	6039      	str	r1, [r7, #0]
  if (ep->doublebuffer == 0U)
 8017342:	683b      	ldr	r3, [r7, #0]
 8017344:	7b1b      	ldrb	r3, [r3, #12]
 8017346:	2b00      	cmp	r3, #0
 8017348:	d000      	beq.n	801734c <USB_EPClearStall+0x14>
 801734a:	e095      	b.n	8017478 <USB_EPClearStall+0x140>
  {
    if (ep->is_in != 0U)
 801734c:	683b      	ldr	r3, [r7, #0]
 801734e:	785b      	ldrb	r3, [r3, #1]
 8017350:	2b00      	cmp	r3, #0
 8017352:	d046      	beq.n	80173e2 <USB_EPClearStall+0xaa>
    {
      PCD_CLEAR_TX_DTOG(USBx, ep->num);
 8017354:	687a      	ldr	r2, [r7, #4]
 8017356:	683b      	ldr	r3, [r7, #0]
 8017358:	781b      	ldrb	r3, [r3, #0]
 801735a:	009b      	lsls	r3, r3, #2
 801735c:	18d2      	adds	r2, r2, r3
 801735e:	2110      	movs	r1, #16
 8017360:	187b      	adds	r3, r7, r1
 8017362:	8812      	ldrh	r2, [r2, #0]
 8017364:	801a      	strh	r2, [r3, #0]
 8017366:	187b      	adds	r3, r7, r1
 8017368:	881b      	ldrh	r3, [r3, #0]
 801736a:	2240      	movs	r2, #64	@ 0x40
 801736c:	4013      	ands	r3, r2
 801736e:	d016      	beq.n	801739e <USB_EPClearStall+0x66>
 8017370:	687a      	ldr	r2, [r7, #4]
 8017372:	683b      	ldr	r3, [r7, #0]
 8017374:	781b      	ldrb	r3, [r3, #0]
 8017376:	009b      	lsls	r3, r3, #2
 8017378:	18d3      	adds	r3, r2, r3
 801737a:	881b      	ldrh	r3, [r3, #0]
 801737c:	b29a      	uxth	r2, r3
 801737e:	200e      	movs	r0, #14
 8017380:	183b      	adds	r3, r7, r0
 8017382:	4940      	ldr	r1, [pc, #256]	@ (8017484 <USB_EPClearStall+0x14c>)
 8017384:	400a      	ands	r2, r1
 8017386:	801a      	strh	r2, [r3, #0]
 8017388:	687a      	ldr	r2, [r7, #4]
 801738a:	683b      	ldr	r3, [r7, #0]
 801738c:	781b      	ldrb	r3, [r3, #0]
 801738e:	009b      	lsls	r3, r3, #2
 8017390:	18d3      	adds	r3, r2, r3
 8017392:	183a      	adds	r2, r7, r0
 8017394:	8812      	ldrh	r2, [r2, #0]
 8017396:	493c      	ldr	r1, [pc, #240]	@ (8017488 <USB_EPClearStall+0x150>)
 8017398:	430a      	orrs	r2, r1
 801739a:	b292      	uxth	r2, r2
 801739c:	801a      	strh	r2, [r3, #0]

      if (ep->type != EP_TYPE_ISOC)
 801739e:	683b      	ldr	r3, [r7, #0]
 80173a0:	78db      	ldrb	r3, [r3, #3]
 80173a2:	2b01      	cmp	r3, #1
 80173a4:	d068      	beq.n	8017478 <USB_EPClearStall+0x140>
      {
        /* Configure NAK status for the Endpoint */
        PCD_SET_EP_TX_STATUS(USBx, ep->num, USB_EP_TX_NAK);
 80173a6:	687a      	ldr	r2, [r7, #4]
 80173a8:	683b      	ldr	r3, [r7, #0]
 80173aa:	781b      	ldrb	r3, [r3, #0]
 80173ac:	009b      	lsls	r3, r3, #2
 80173ae:	18d3      	adds	r3, r2, r3
 80173b0:	881b      	ldrh	r3, [r3, #0]
 80173b2:	b29a      	uxth	r2, r3
 80173b4:	200c      	movs	r0, #12
 80173b6:	183b      	adds	r3, r7, r0
 80173b8:	4934      	ldr	r1, [pc, #208]	@ (801748c <USB_EPClearStall+0x154>)
 80173ba:	400a      	ands	r2, r1
 80173bc:	801a      	strh	r2, [r3, #0]
 80173be:	183b      	adds	r3, r7, r0
 80173c0:	183a      	adds	r2, r7, r0
 80173c2:	8812      	ldrh	r2, [r2, #0]
 80173c4:	2120      	movs	r1, #32
 80173c6:	404a      	eors	r2, r1
 80173c8:	801a      	strh	r2, [r3, #0]
 80173ca:	687a      	ldr	r2, [r7, #4]
 80173cc:	683b      	ldr	r3, [r7, #0]
 80173ce:	781b      	ldrb	r3, [r3, #0]
 80173d0:	009b      	lsls	r3, r3, #2
 80173d2:	18d3      	adds	r3, r2, r3
 80173d4:	183a      	adds	r2, r7, r0
 80173d6:	8812      	ldrh	r2, [r2, #0]
 80173d8:	492d      	ldr	r1, [pc, #180]	@ (8017490 <USB_EPClearStall+0x158>)
 80173da:	430a      	orrs	r2, r1
 80173dc:	b292      	uxth	r2, r2
 80173de:	801a      	strh	r2, [r3, #0]
 80173e0:	e04a      	b.n	8017478 <USB_EPClearStall+0x140>
      }
    }
    else
    {
      PCD_CLEAR_RX_DTOG(USBx, ep->num);
 80173e2:	687a      	ldr	r2, [r7, #4]
 80173e4:	683b      	ldr	r3, [r7, #0]
 80173e6:	781b      	ldrb	r3, [r3, #0]
 80173e8:	009b      	lsls	r3, r3, #2
 80173ea:	18d2      	adds	r2, r2, r3
 80173ec:	2116      	movs	r1, #22
 80173ee:	187b      	adds	r3, r7, r1
 80173f0:	8812      	ldrh	r2, [r2, #0]
 80173f2:	801a      	strh	r2, [r3, #0]
 80173f4:	187b      	adds	r3, r7, r1
 80173f6:	881a      	ldrh	r2, [r3, #0]
 80173f8:	2380      	movs	r3, #128	@ 0x80
 80173fa:	01db      	lsls	r3, r3, #7
 80173fc:	4013      	ands	r3, r2
 80173fe:	d016      	beq.n	801742e <USB_EPClearStall+0xf6>
 8017400:	687a      	ldr	r2, [r7, #4]
 8017402:	683b      	ldr	r3, [r7, #0]
 8017404:	781b      	ldrb	r3, [r3, #0]
 8017406:	009b      	lsls	r3, r3, #2
 8017408:	18d3      	adds	r3, r2, r3
 801740a:	881b      	ldrh	r3, [r3, #0]
 801740c:	b29a      	uxth	r2, r3
 801740e:	2014      	movs	r0, #20
 8017410:	183b      	adds	r3, r7, r0
 8017412:	491c      	ldr	r1, [pc, #112]	@ (8017484 <USB_EPClearStall+0x14c>)
 8017414:	400a      	ands	r2, r1
 8017416:	801a      	strh	r2, [r3, #0]
 8017418:	687a      	ldr	r2, [r7, #4]
 801741a:	683b      	ldr	r3, [r7, #0]
 801741c:	781b      	ldrb	r3, [r3, #0]
 801741e:	009b      	lsls	r3, r3, #2
 8017420:	18d3      	adds	r3, r2, r3
 8017422:	183a      	adds	r2, r7, r0
 8017424:	8812      	ldrh	r2, [r2, #0]
 8017426:	491b      	ldr	r1, [pc, #108]	@ (8017494 <USB_EPClearStall+0x15c>)
 8017428:	430a      	orrs	r2, r1
 801742a:	b292      	uxth	r2, r2
 801742c:	801a      	strh	r2, [r3, #0]

      /* Configure VALID status for the Endpoint */
      PCD_SET_EP_RX_STATUS(USBx, ep->num, USB_EP_RX_VALID);
 801742e:	687a      	ldr	r2, [r7, #4]
 8017430:	683b      	ldr	r3, [r7, #0]
 8017432:	781b      	ldrb	r3, [r3, #0]
 8017434:	009b      	lsls	r3, r3, #2
 8017436:	18d3      	adds	r3, r2, r3
 8017438:	881b      	ldrh	r3, [r3, #0]
 801743a:	b29a      	uxth	r2, r3
 801743c:	2012      	movs	r0, #18
 801743e:	183b      	adds	r3, r7, r0
 8017440:	4915      	ldr	r1, [pc, #84]	@ (8017498 <USB_EPClearStall+0x160>)
 8017442:	400a      	ands	r2, r1
 8017444:	801a      	strh	r2, [r3, #0]
 8017446:	183b      	adds	r3, r7, r0
 8017448:	183a      	adds	r2, r7, r0
 801744a:	8812      	ldrh	r2, [r2, #0]
 801744c:	2180      	movs	r1, #128	@ 0x80
 801744e:	0149      	lsls	r1, r1, #5
 8017450:	404a      	eors	r2, r1
 8017452:	801a      	strh	r2, [r3, #0]
 8017454:	183b      	adds	r3, r7, r0
 8017456:	183a      	adds	r2, r7, r0
 8017458:	8812      	ldrh	r2, [r2, #0]
 801745a:	2180      	movs	r1, #128	@ 0x80
 801745c:	0189      	lsls	r1, r1, #6
 801745e:	404a      	eors	r2, r1
 8017460:	801a      	strh	r2, [r3, #0]
 8017462:	687a      	ldr	r2, [r7, #4]
 8017464:	683b      	ldr	r3, [r7, #0]
 8017466:	781b      	ldrb	r3, [r3, #0]
 8017468:	009b      	lsls	r3, r3, #2
 801746a:	18d3      	adds	r3, r2, r3
 801746c:	183a      	adds	r2, r7, r0
 801746e:	8812      	ldrh	r2, [r2, #0]
 8017470:	4907      	ldr	r1, [pc, #28]	@ (8017490 <USB_EPClearStall+0x158>)
 8017472:	430a      	orrs	r2, r1
 8017474:	b292      	uxth	r2, r2
 8017476:	801a      	strh	r2, [r3, #0]
    }
  }

  return HAL_OK;
 8017478:	2300      	movs	r3, #0
}
 801747a:	0018      	movs	r0, r3
 801747c:	46bd      	mov	sp, r7
 801747e:	b006      	add	sp, #24
 8017480:	bd80      	pop	{r7, pc}
 8017482:	46c0      	nop			@ (mov r8, r8)
 8017484:	ffff8f8f 	.word	0xffff8f8f
 8017488:	ffff80c0 	.word	0xffff80c0
 801748c:	ffff8fbf 	.word	0xffff8fbf
 8017490:	ffff8080 	.word	0xffff8080
 8017494:	ffffc080 	.word	0xffffc080
 8017498:	ffffbf8f 	.word	0xffffbf8f

0801749c <USB_SetDevAddress>:
  * @param  address new device address to be assigned
  *          This parameter can be a value from 0 to 255
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_SetDevAddress(USB_TypeDef *USBx, uint8_t address)
{
 801749c:	b580      	push	{r7, lr}
 801749e:	b082      	sub	sp, #8
 80174a0:	af00      	add	r7, sp, #0
 80174a2:	6078      	str	r0, [r7, #4]
 80174a4:	000a      	movs	r2, r1
 80174a6:	1cfb      	adds	r3, r7, #3
 80174a8:	701a      	strb	r2, [r3, #0]
  if (address == 0U)
 80174aa:	1cfb      	adds	r3, r7, #3
 80174ac:	781b      	ldrb	r3, [r3, #0]
 80174ae:	2b00      	cmp	r3, #0
 80174b0:	d103      	bne.n	80174ba <USB_SetDevAddress+0x1e>
  {
    /* set device address and enable function */
    USBx->DADDR = (uint16_t)USB_DADDR_EF;
 80174b2:	687b      	ldr	r3, [r7, #4]
 80174b4:	224c      	movs	r2, #76	@ 0x4c
 80174b6:	2180      	movs	r1, #128	@ 0x80
 80174b8:	5299      	strh	r1, [r3, r2]
  }

  return HAL_OK;
 80174ba:	2300      	movs	r3, #0
}
 80174bc:	0018      	movs	r0, r3
 80174be:	46bd      	mov	sp, r7
 80174c0:	b002      	add	sp, #8
 80174c2:	bd80      	pop	{r7, pc}

080174c4 <USB_DevConnect>:
  * @brief  USB_DevConnect Connect the USB device by enabling the pull-up/pull-down
  * @param  USBx Selected device
  * @retval HAL status
  */
HAL_StatusTypeDef  USB_DevConnect(USB_TypeDef *USBx)
{
 80174c4:	b580      	push	{r7, lr}
 80174c6:	b082      	sub	sp, #8
 80174c8:	af00      	add	r7, sp, #0
 80174ca:	6078      	str	r0, [r7, #4]
  /* Enabling DP Pull-UP bit to Connect internal PU resistor on USB DP line */
  USBx->BCDR |= (uint16_t)USB_BCDR_DPPU;
 80174cc:	687b      	ldr	r3, [r7, #4]
 80174ce:	2258      	movs	r2, #88	@ 0x58
 80174d0:	5a9b      	ldrh	r3, [r3, r2]
 80174d2:	b29b      	uxth	r3, r3
 80174d4:	4a05      	ldr	r2, [pc, #20]	@ (80174ec <USB_DevConnect+0x28>)
 80174d6:	4313      	orrs	r3, r2
 80174d8:	b299      	uxth	r1, r3
 80174da:	687b      	ldr	r3, [r7, #4]
 80174dc:	2258      	movs	r2, #88	@ 0x58
 80174de:	5299      	strh	r1, [r3, r2]

  return HAL_OK;
 80174e0:	2300      	movs	r3, #0
}
 80174e2:	0018      	movs	r0, r3
 80174e4:	46bd      	mov	sp, r7
 80174e6:	b002      	add	sp, #8
 80174e8:	bd80      	pop	{r7, pc}
 80174ea:	46c0      	nop			@ (mov r8, r8)
 80174ec:	ffff8000 	.word	0xffff8000

080174f0 <USB_ReadInterrupts>:
  * @brief  USB_ReadInterrupts return the global USB interrupt status
  * @param  USBx Selected device
  * @retval USB Global Interrupt status
  */
uint32_t USB_ReadInterrupts(USB_TypeDef *USBx)
{
 80174f0:	b580      	push	{r7, lr}
 80174f2:	b084      	sub	sp, #16
 80174f4:	af00      	add	r7, sp, #0
 80174f6:	6078      	str	r0, [r7, #4]
  uint32_t tmpreg;

  tmpreg = USBx->ISTR;
 80174f8:	687b      	ldr	r3, [r7, #4]
 80174fa:	2244      	movs	r2, #68	@ 0x44
 80174fc:	5a9b      	ldrh	r3, [r3, r2]
 80174fe:	b29b      	uxth	r3, r3
 8017500:	60fb      	str	r3, [r7, #12]
  return tmpreg;
 8017502:	68fb      	ldr	r3, [r7, #12]
}
 8017504:	0018      	movs	r0, r3
 8017506:	46bd      	mov	sp, r7
 8017508:	b004      	add	sp, #16
 801750a:	bd80      	pop	{r7, pc}

0801750c <USB_WritePMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_WritePMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801750c:	b580      	push	{r7, lr}
 801750e:	b08a      	sub	sp, #40	@ 0x28
 8017510:	af00      	add	r7, sp, #0
 8017512:	60f8      	str	r0, [r7, #12]
 8017514:	60b9      	str	r1, [r7, #8]
 8017516:	0019      	movs	r1, r3
 8017518:	1dbb      	adds	r3, r7, #6
 801751a:	801a      	strh	r2, [r3, #0]
 801751c:	1d3b      	adds	r3, r7, #4
 801751e:	1c0a      	adds	r2, r1, #0
 8017520:	801a      	strh	r2, [r3, #0]
  uint32_t n = ((uint32_t)wNBytes + 1U) >> 1;
 8017522:	1d3b      	adds	r3, r7, #4
 8017524:	881b      	ldrh	r3, [r3, #0]
 8017526:	3301      	adds	r3, #1
 8017528:	085b      	lsrs	r3, r3, #1
 801752a:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 801752c:	68fb      	ldr	r3, [r7, #12]
 801752e:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint16_t WrVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 8017530:	68bb      	ldr	r3, [r7, #8]
 8017532:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 8017534:	1dbb      	adds	r3, r7, #6
 8017536:	881a      	ldrh	r2, [r3, #0]
 8017538:	697b      	ldr	r3, [r7, #20]
 801753a:	18d3      	adds	r3, r2, r3
 801753c:	2280      	movs	r2, #128	@ 0x80
 801753e:	00d2      	lsls	r2, r2, #3
 8017540:	4694      	mov	ip, r2
 8017542:	4463      	add	r3, ip
 8017544:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 8017546:	69bb      	ldr	r3, [r7, #24]
 8017548:	627b      	str	r3, [r7, #36]	@ 0x24
 801754a:	e020      	b.n	801758e <USB_WritePMA+0x82>
  {
    WrVal = pBuf[0];
 801754c:	69fb      	ldr	r3, [r7, #28]
 801754e:	781a      	ldrb	r2, [r3, #0]
 8017550:	2112      	movs	r1, #18
 8017552:	187b      	adds	r3, r7, r1
 8017554:	801a      	strh	r2, [r3, #0]
    WrVal |= (uint16_t)pBuf[1] << 8;
 8017556:	69fb      	ldr	r3, [r7, #28]
 8017558:	3301      	adds	r3, #1
 801755a:	781b      	ldrb	r3, [r3, #0]
 801755c:	021b      	lsls	r3, r3, #8
 801755e:	b21a      	sxth	r2, r3
 8017560:	187b      	adds	r3, r7, r1
 8017562:	2000      	movs	r0, #0
 8017564:	5e1b      	ldrsh	r3, [r3, r0]
 8017566:	4313      	orrs	r3, r2
 8017568:	b21a      	sxth	r2, r3
 801756a:	187b      	adds	r3, r7, r1
 801756c:	801a      	strh	r2, [r3, #0]
    *pdwVal = (WrVal & 0xFFFFU);
 801756e:	6a3b      	ldr	r3, [r7, #32]
 8017570:	187a      	adds	r2, r7, r1
 8017572:	8812      	ldrh	r2, [r2, #0]
 8017574:	801a      	strh	r2, [r3, #0]
    pdwVal++;
 8017576:	6a3b      	ldr	r3, [r7, #32]
 8017578:	3302      	adds	r3, #2
 801757a:	623b      	str	r3, [r7, #32]

#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */

    pBuf++;
 801757c:	69fb      	ldr	r3, [r7, #28]
 801757e:	3301      	adds	r3, #1
 8017580:	61fb      	str	r3, [r7, #28]
    pBuf++;
 8017582:	69fb      	ldr	r3, [r7, #28]
 8017584:	3301      	adds	r3, #1
 8017586:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 8017588:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801758a:	3b01      	subs	r3, #1
 801758c:	627b      	str	r3, [r7, #36]	@ 0x24
 801758e:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017590:	2b00      	cmp	r3, #0
 8017592:	d1db      	bne.n	801754c <USB_WritePMA+0x40>
  }
}
 8017594:	46c0      	nop			@ (mov r8, r8)
 8017596:	46c0      	nop			@ (mov r8, r8)
 8017598:	46bd      	mov	sp, r7
 801759a:	b00a      	add	sp, #40	@ 0x28
 801759c:	bd80      	pop	{r7, pc}

0801759e <USB_ReadPMA>:
  * @param   wPMABufAddr address into PMA.
  * @param   wNBytes no. of bytes to be copied.
  * @retval None
  */
void USB_ReadPMA(USB_TypeDef *USBx, uint8_t *pbUsrBuf, uint16_t wPMABufAddr, uint16_t wNBytes)
{
 801759e:	b580      	push	{r7, lr}
 80175a0:	b08a      	sub	sp, #40	@ 0x28
 80175a2:	af00      	add	r7, sp, #0
 80175a4:	60f8      	str	r0, [r7, #12]
 80175a6:	60b9      	str	r1, [r7, #8]
 80175a8:	0019      	movs	r1, r3
 80175aa:	1dbb      	adds	r3, r7, #6
 80175ac:	801a      	strh	r2, [r3, #0]
 80175ae:	1d3b      	adds	r3, r7, #4
 80175b0:	1c0a      	adds	r2, r1, #0
 80175b2:	801a      	strh	r2, [r3, #0]
  uint32_t n = (uint32_t)wNBytes >> 1;
 80175b4:	1d3b      	adds	r3, r7, #4
 80175b6:	881b      	ldrh	r3, [r3, #0]
 80175b8:	085b      	lsrs	r3, r3, #1
 80175ba:	b29b      	uxth	r3, r3
 80175bc:	61bb      	str	r3, [r7, #24]
  uint32_t BaseAddr = (uint32_t)USBx;
 80175be:	68fb      	ldr	r3, [r7, #12]
 80175c0:	617b      	str	r3, [r7, #20]
  uint32_t count;
  uint32_t RdVal;
  __IO uint16_t *pdwVal;
  uint8_t *pBuf = pbUsrBuf;
 80175c2:	68bb      	ldr	r3, [r7, #8]
 80175c4:	61fb      	str	r3, [r7, #28]

  pdwVal = (__IO uint16_t *)(BaseAddr + 0x400U + ((uint32_t)wPMABufAddr * PMA_ACCESS));
 80175c6:	1dbb      	adds	r3, r7, #6
 80175c8:	881a      	ldrh	r2, [r3, #0]
 80175ca:	697b      	ldr	r3, [r7, #20]
 80175cc:	18d3      	adds	r3, r2, r3
 80175ce:	2280      	movs	r2, #128	@ 0x80
 80175d0:	00d2      	lsls	r2, r2, #3
 80175d2:	4694      	mov	ip, r2
 80175d4:	4463      	add	r3, ip
 80175d6:	623b      	str	r3, [r7, #32]

  for (count = n; count != 0U; count--)
 80175d8:	69bb      	ldr	r3, [r7, #24]
 80175da:	627b      	str	r3, [r7, #36]	@ 0x24
 80175dc:	e018      	b.n	8017610 <USB_ReadPMA+0x72>
  {
    RdVal = *(__IO uint16_t *)pdwVal;
 80175de:	6a3b      	ldr	r3, [r7, #32]
 80175e0:	881b      	ldrh	r3, [r3, #0]
 80175e2:	b29b      	uxth	r3, r3
 80175e4:	613b      	str	r3, [r7, #16]
    pdwVal++;
 80175e6:	6a3b      	ldr	r3, [r7, #32]
 80175e8:	3302      	adds	r3, #2
 80175ea:	623b      	str	r3, [r7, #32]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 80175ec:	693b      	ldr	r3, [r7, #16]
 80175ee:	b2da      	uxtb	r2, r3
 80175f0:	69fb      	ldr	r3, [r7, #28]
 80175f2:	701a      	strb	r2, [r3, #0]
    pBuf++;
 80175f4:	69fb      	ldr	r3, [r7, #28]
 80175f6:	3301      	adds	r3, #1
 80175f8:	61fb      	str	r3, [r7, #28]
    *pBuf = (uint8_t)((RdVal >> 8) & 0xFFU);
 80175fa:	693b      	ldr	r3, [r7, #16]
 80175fc:	0a1b      	lsrs	r3, r3, #8
 80175fe:	b2da      	uxtb	r2, r3
 8017600:	69fb      	ldr	r3, [r7, #28]
 8017602:	701a      	strb	r2, [r3, #0]
    pBuf++;
 8017604:	69fb      	ldr	r3, [r7, #28]
 8017606:	3301      	adds	r3, #1
 8017608:	61fb      	str	r3, [r7, #28]
  for (count = n; count != 0U; count--)
 801760a:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 801760c:	3b01      	subs	r3, #1
 801760e:	627b      	str	r3, [r7, #36]	@ 0x24
 8017610:	6a7b      	ldr	r3, [r7, #36]	@ 0x24
 8017612:	2b00      	cmp	r3, #0
 8017614:	d1e3      	bne.n	80175de <USB_ReadPMA+0x40>
#if PMA_ACCESS > 1U
    pdwVal++;
#endif /* PMA_ACCESS */
  }

  if ((wNBytes % 2U) != 0U)
 8017616:	1d3b      	adds	r3, r7, #4
 8017618:	881b      	ldrh	r3, [r3, #0]
 801761a:	2201      	movs	r2, #1
 801761c:	4013      	ands	r3, r2
 801761e:	b29b      	uxth	r3, r3
 8017620:	2b00      	cmp	r3, #0
 8017622:	d007      	beq.n	8017634 <USB_ReadPMA+0x96>
  {
    RdVal = *pdwVal;
 8017624:	6a3b      	ldr	r3, [r7, #32]
 8017626:	881b      	ldrh	r3, [r3, #0]
 8017628:	b29b      	uxth	r3, r3
 801762a:	613b      	str	r3, [r7, #16]
    *pBuf = (uint8_t)((RdVal >> 0) & 0xFFU);
 801762c:	693b      	ldr	r3, [r7, #16]
 801762e:	b2da      	uxtb	r2, r3
 8017630:	69fb      	ldr	r3, [r7, #28]
 8017632:	701a      	strb	r2, [r3, #0]
  }
}
 8017634:	46c0      	nop			@ (mov r8, r8)
 8017636:	46bd      	mov	sp, r7
 8017638:	b00a      	add	sp, #40	@ 0x28
 801763a:	bd80      	pop	{r7, pc}

0801763c <USBD_CDC_Init>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_Init(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 801763c:	b580      	push	{r7, lr}
 801763e:	b084      	sub	sp, #16
 8017640:	af00      	add	r7, sp, #0
 8017642:	6078      	str	r0, [r7, #4]
 8017644:	000a      	movs	r2, r1
 8017646:	1cfb      	adds	r3, r7, #3
 8017648:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 801764a:	230f      	movs	r3, #15
 801764c:	18fb      	adds	r3, r7, r3
 801764e:	2200      	movs	r2, #0
 8017650:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc;

  if (pdev->dev_speed == USBD_SPEED_HIGH)
 8017652:	687b      	ldr	r3, [r7, #4]
 8017654:	7c1b      	ldrb	r3, [r3, #16]
 8017656:	2b00      	cmp	r3, #0
 8017658:	d116      	bne.n	8017688 <USBD_CDC_Init+0x4c>
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 801765a:	2380      	movs	r3, #128	@ 0x80
 801765c:	009b      	lsls	r3, r3, #2
 801765e:	6878      	ldr	r0, [r7, #4]
 8017660:	2202      	movs	r2, #2
 8017662:	2181      	movs	r1, #129	@ 0x81
 8017664:	f002 f8eb 	bl	801983e <USBD_LL_OpenEP>
                   CDC_DATA_HS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8017668:	687b      	ldr	r3, [r7, #4]
 801766a:	2201      	movs	r2, #1
 801766c:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801766e:	2380      	movs	r3, #128	@ 0x80
 8017670:	009b      	lsls	r3, r3, #2
 8017672:	6878      	ldr	r0, [r7, #4]
 8017674:	2202      	movs	r2, #2
 8017676:	2101      	movs	r1, #1
 8017678:	f002 f8e1 	bl	801983e <USBD_LL_OpenEP>
                   CDC_DATA_HS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 801767c:	687a      	ldr	r2, [r7, #4]
 801767e:	23b6      	movs	r3, #182	@ 0xb6
 8017680:	005b      	lsls	r3, r3, #1
 8017682:	2101      	movs	r1, #1
 8017684:	50d1      	str	r1, [r2, r3]
 8017686:	e013      	b.n	80176b0 <USBD_CDC_Init+0x74>

  }
  else
  {
    /* Open EP IN */
    USBD_LL_OpenEP(pdev, CDC_IN_EP, USBD_EP_TYPE_BULK,
 8017688:	6878      	ldr	r0, [r7, #4]
 801768a:	2340      	movs	r3, #64	@ 0x40
 801768c:	2202      	movs	r2, #2
 801768e:	2181      	movs	r1, #129	@ 0x81
 8017690:	f002 f8d5 	bl	801983e <USBD_LL_OpenEP>
                   CDC_DATA_FS_IN_PACKET_SIZE);

    pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 1U;
 8017694:	687b      	ldr	r3, [r7, #4]
 8017696:	2201      	movs	r2, #1
 8017698:	62da      	str	r2, [r3, #44]	@ 0x2c

    /* Open EP OUT */
    USBD_LL_OpenEP(pdev, CDC_OUT_EP, USBD_EP_TYPE_BULK,
 801769a:	6878      	ldr	r0, [r7, #4]
 801769c:	2340      	movs	r3, #64	@ 0x40
 801769e:	2202      	movs	r2, #2
 80176a0:	2101      	movs	r1, #1
 80176a2:	f002 f8cc 	bl	801983e <USBD_LL_OpenEP>
                   CDC_DATA_FS_OUT_PACKET_SIZE);

    pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 1U;
 80176a6:	687a      	ldr	r2, [r7, #4]
 80176a8:	23b6      	movs	r3, #182	@ 0xb6
 80176aa:	005b      	lsls	r3, r3, #1
 80176ac:	2101      	movs	r1, #1
 80176ae:	50d1      	str	r1, [r2, r3]
  }
  /* Open Command IN EP */
  USBD_LL_OpenEP(pdev, CDC_CMD_EP, USBD_EP_TYPE_INTR, CDC_CMD_PACKET_SIZE);
 80176b0:	6878      	ldr	r0, [r7, #4]
 80176b2:	2308      	movs	r3, #8
 80176b4:	2203      	movs	r2, #3
 80176b6:	2182      	movs	r1, #130	@ 0x82
 80176b8:	f002 f8c1 	bl	801983e <USBD_LL_OpenEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 1U;
 80176bc:	687b      	ldr	r3, [r7, #4]
 80176be:	2201      	movs	r2, #1
 80176c0:	641a      	str	r2, [r3, #64]	@ 0x40

  pdev->pClassData = USBD_malloc(sizeof(USBD_CDC_HandleTypeDef));
 80176c2:	2387      	movs	r3, #135	@ 0x87
 80176c4:	009b      	lsls	r3, r3, #2
 80176c6:	0018      	movs	r0, r3
 80176c8:	f002 fa52 	bl	8019b70 <USBD_static_malloc>
 80176cc:	0001      	movs	r1, r0
 80176ce:	687a      	ldr	r2, [r7, #4]
 80176d0:	23ae      	movs	r3, #174	@ 0xae
 80176d2:	009b      	lsls	r3, r3, #2
 80176d4:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData == NULL)
 80176d6:	687a      	ldr	r2, [r7, #4]
 80176d8:	23ae      	movs	r3, #174	@ 0xae
 80176da:	009b      	lsls	r3, r3, #2
 80176dc:	58d3      	ldr	r3, [r2, r3]
 80176de:	2b00      	cmp	r3, #0
 80176e0:	d104      	bne.n	80176ec <USBD_CDC_Init+0xb0>
  {
    ret = 1U;
 80176e2:	230f      	movs	r3, #15
 80176e4:	18fb      	adds	r3, r7, r3
 80176e6:	2201      	movs	r2, #1
 80176e8:	701a      	strb	r2, [r3, #0]
 80176ea:	e02c      	b.n	8017746 <USBD_CDC_Init+0x10a>
  }
  else
  {
    hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80176ec:	687a      	ldr	r2, [r7, #4]
 80176ee:	23ae      	movs	r3, #174	@ 0xae
 80176f0:	009b      	lsls	r3, r3, #2
 80176f2:	58d3      	ldr	r3, [r2, r3]
 80176f4:	60bb      	str	r3, [r7, #8]

    /* Init  physical Interface components */
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Init();
 80176f6:	687a      	ldr	r2, [r7, #4]
 80176f8:	23af      	movs	r3, #175	@ 0xaf
 80176fa:	009b      	lsls	r3, r3, #2
 80176fc:	58d3      	ldr	r3, [r2, r3]
 80176fe:	681b      	ldr	r3, [r3, #0]
 8017700:	4798      	blx	r3

    /* Init Xfer states */
    hcdc->TxState = 0U;
 8017702:	68ba      	ldr	r2, [r7, #8]
 8017704:	2385      	movs	r3, #133	@ 0x85
 8017706:	009b      	lsls	r3, r3, #2
 8017708:	2100      	movs	r1, #0
 801770a:	50d1      	str	r1, [r2, r3]
    hcdc->RxState = 0U;
 801770c:	68ba      	ldr	r2, [r7, #8]
 801770e:	2386      	movs	r3, #134	@ 0x86
 8017710:	009b      	lsls	r3, r3, #2
 8017712:	2100      	movs	r1, #0
 8017714:	50d1      	str	r1, [r2, r3]

    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8017716:	687b      	ldr	r3, [r7, #4]
 8017718:	7c1b      	ldrb	r3, [r3, #16]
 801771a:	2b00      	cmp	r3, #0
 801771c:	d10a      	bne.n	8017734 <USBD_CDC_Init+0xf8>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 801771e:	68ba      	ldr	r2, [r7, #8]
 8017720:	2381      	movs	r3, #129	@ 0x81
 8017722:	009b      	lsls	r3, r3, #2
 8017724:	58d2      	ldr	r2, [r2, r3]
 8017726:	2380      	movs	r3, #128	@ 0x80
 8017728:	009b      	lsls	r3, r3, #2
 801772a:	6878      	ldr	r0, [r7, #4]
 801772c:	2101      	movs	r1, #1
 801772e:	f002 f9d1 	bl	8019ad4 <USBD_LL_PrepareReceive>
 8017732:	e008      	b.n	8017746 <USBD_CDC_Init+0x10a>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev, CDC_OUT_EP, hcdc->RxBuffer,
 8017734:	68ba      	ldr	r2, [r7, #8]
 8017736:	2381      	movs	r3, #129	@ 0x81
 8017738:	009b      	lsls	r3, r3, #2
 801773a:	58d2      	ldr	r2, [r2, r3]
 801773c:	6878      	ldr	r0, [r7, #4]
 801773e:	2340      	movs	r3, #64	@ 0x40
 8017740:	2101      	movs	r1, #1
 8017742:	f002 f9c7 	bl	8019ad4 <USBD_LL_PrepareReceive>
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
  }
  return ret;
 8017746:	230f      	movs	r3, #15
 8017748:	18fb      	adds	r3, r7, r3
 801774a:	781b      	ldrb	r3, [r3, #0]
}
 801774c:	0018      	movs	r0, r3
 801774e:	46bd      	mov	sp, r7
 8017750:	b004      	add	sp, #16
 8017752:	bd80      	pop	{r7, pc}

08017754 <USBD_CDC_DeInit>:
  * @param  pdev: device instance
  * @param  cfgidx: Configuration index
  * @retval status
  */
static uint8_t  USBD_CDC_DeInit(USBD_HandleTypeDef *pdev, uint8_t cfgidx)
{
 8017754:	b580      	push	{r7, lr}
 8017756:	b084      	sub	sp, #16
 8017758:	af00      	add	r7, sp, #0
 801775a:	6078      	str	r0, [r7, #4]
 801775c:	000a      	movs	r2, r1
 801775e:	1cfb      	adds	r3, r7, #3
 8017760:	701a      	strb	r2, [r3, #0]
  uint8_t ret = 0U;
 8017762:	230f      	movs	r3, #15
 8017764:	18fb      	adds	r3, r7, r3
 8017766:	2200      	movs	r2, #0
 8017768:	701a      	strb	r2, [r3, #0]

  /* Close EP IN */
  USBD_LL_CloseEP(pdev, CDC_IN_EP);
 801776a:	687b      	ldr	r3, [r7, #4]
 801776c:	2181      	movs	r1, #129	@ 0x81
 801776e:	0018      	movs	r0, r3
 8017770:	f002 f89c 	bl	80198ac <USBD_LL_CloseEP>
  pdev->ep_in[CDC_IN_EP & 0xFU].is_used = 0U;
 8017774:	687b      	ldr	r3, [r7, #4]
 8017776:	2200      	movs	r2, #0
 8017778:	62da      	str	r2, [r3, #44]	@ 0x2c

  /* Close EP OUT */
  USBD_LL_CloseEP(pdev, CDC_OUT_EP);
 801777a:	687b      	ldr	r3, [r7, #4]
 801777c:	2101      	movs	r1, #1
 801777e:	0018      	movs	r0, r3
 8017780:	f002 f894 	bl	80198ac <USBD_LL_CloseEP>
  pdev->ep_out[CDC_OUT_EP & 0xFU].is_used = 0U;
 8017784:	687a      	ldr	r2, [r7, #4]
 8017786:	23b6      	movs	r3, #182	@ 0xb6
 8017788:	005b      	lsls	r3, r3, #1
 801778a:	2100      	movs	r1, #0
 801778c:	50d1      	str	r1, [r2, r3]

  /* Close Command IN EP */
  USBD_LL_CloseEP(pdev, CDC_CMD_EP);
 801778e:	687b      	ldr	r3, [r7, #4]
 8017790:	2182      	movs	r1, #130	@ 0x82
 8017792:	0018      	movs	r0, r3
 8017794:	f002 f88a 	bl	80198ac <USBD_LL_CloseEP>
  pdev->ep_in[CDC_CMD_EP & 0xFU].is_used = 0U;
 8017798:	687b      	ldr	r3, [r7, #4]
 801779a:	2200      	movs	r2, #0
 801779c:	641a      	str	r2, [r3, #64]	@ 0x40

  /* DeInit  physical Interface components */
  if (pdev->pClassData != NULL)
 801779e:	687a      	ldr	r2, [r7, #4]
 80177a0:	23ae      	movs	r3, #174	@ 0xae
 80177a2:	009b      	lsls	r3, r3, #2
 80177a4:	58d3      	ldr	r3, [r2, r3]
 80177a6:	2b00      	cmp	r3, #0
 80177a8:	d011      	beq.n	80177ce <USBD_CDC_DeInit+0x7a>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->DeInit();
 80177aa:	687a      	ldr	r2, [r7, #4]
 80177ac:	23af      	movs	r3, #175	@ 0xaf
 80177ae:	009b      	lsls	r3, r3, #2
 80177b0:	58d3      	ldr	r3, [r2, r3]
 80177b2:	685b      	ldr	r3, [r3, #4]
 80177b4:	4798      	blx	r3
    USBD_free(pdev->pClassData);
 80177b6:	687a      	ldr	r2, [r7, #4]
 80177b8:	23ae      	movs	r3, #174	@ 0xae
 80177ba:	009b      	lsls	r3, r3, #2
 80177bc:	58d3      	ldr	r3, [r2, r3]
 80177be:	0018      	movs	r0, r3
 80177c0:	f002 f9e2 	bl	8019b88 <USBD_static_free>
    pdev->pClassData = NULL;
 80177c4:	687a      	ldr	r2, [r7, #4]
 80177c6:	23ae      	movs	r3, #174	@ 0xae
 80177c8:	009b      	lsls	r3, r3, #2
 80177ca:	2100      	movs	r1, #0
 80177cc:	50d1      	str	r1, [r2, r3]
  }

  return ret;
 80177ce:	230f      	movs	r3, #15
 80177d0:	18fb      	adds	r3, r7, r3
 80177d2:	781b      	ldrb	r3, [r3, #0]
}
 80177d4:	0018      	movs	r0, r3
 80177d6:	46bd      	mov	sp, r7
 80177d8:	b004      	add	sp, #16
 80177da:	bd80      	pop	{r7, pc}

080177dc <USBD_CDC_Setup>:
  * @param  req: usb requests
  * @retval status
  */
static uint8_t  USBD_CDC_Setup(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 80177dc:	b580      	push	{r7, lr}
 80177de:	b086      	sub	sp, #24
 80177e0:	af00      	add	r7, sp, #0
 80177e2:	6078      	str	r0, [r7, #4]
 80177e4:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 80177e6:	687a      	ldr	r2, [r7, #4]
 80177e8:	23ae      	movs	r3, #174	@ 0xae
 80177ea:	009b      	lsls	r3, r3, #2
 80177ec:	58d3      	ldr	r3, [r2, r3]
 80177ee:	613b      	str	r3, [r7, #16]
  uint8_t ifalt = 0U;
 80177f0:	230f      	movs	r3, #15
 80177f2:	18fb      	adds	r3, r7, r3
 80177f4:	2200      	movs	r2, #0
 80177f6:	701a      	strb	r2, [r3, #0]
  uint16_t status_info = 0U;
 80177f8:	230c      	movs	r3, #12
 80177fa:	18fb      	adds	r3, r7, r3
 80177fc:	2200      	movs	r2, #0
 80177fe:	801a      	strh	r2, [r3, #0]
  uint8_t ret = USBD_OK;
 8017800:	2317      	movs	r3, #23
 8017802:	18fb      	adds	r3, r7, r3
 8017804:	2200      	movs	r2, #0
 8017806:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8017808:	683b      	ldr	r3, [r7, #0]
 801780a:	781b      	ldrb	r3, [r3, #0]
 801780c:	001a      	movs	r2, r3
 801780e:	2360      	movs	r3, #96	@ 0x60
 8017810:	4013      	ands	r3, r2
 8017812:	d03d      	beq.n	8017890 <USBD_CDC_Setup+0xb4>
 8017814:	2b20      	cmp	r3, #32
 8017816:	d000      	beq.n	801781a <USBD_CDC_Setup+0x3e>
 8017818:	e094      	b.n	8017944 <USBD_CDC_Setup+0x168>
  {
    case USB_REQ_TYPE_CLASS :
      if (req->wLength)
 801781a:	683b      	ldr	r3, [r7, #0]
 801781c:	88db      	ldrh	r3, [r3, #6]
 801781e:	2b00      	cmp	r3, #0
 8017820:	d02b      	beq.n	801787a <USBD_CDC_Setup+0x9e>
      {
        if (req->bmRequest & 0x80U)
 8017822:	683b      	ldr	r3, [r7, #0]
 8017824:	781b      	ldrb	r3, [r3, #0]
 8017826:	b25b      	sxtb	r3, r3
 8017828:	2b00      	cmp	r3, #0
 801782a:	da12      	bge.n	8017852 <USBD_CDC_Setup+0x76>
        {
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801782c:	687a      	ldr	r2, [r7, #4]
 801782e:	23af      	movs	r3, #175	@ 0xaf
 8017830:	009b      	lsls	r3, r3, #2
 8017832:	58d3      	ldr	r3, [r2, r3]
 8017834:	689b      	ldr	r3, [r3, #8]
 8017836:	683a      	ldr	r2, [r7, #0]
 8017838:	7850      	ldrb	r0, [r2, #1]
                                                            (uint8_t *)(void *)hcdc->data,
 801783a:	6939      	ldr	r1, [r7, #16]
          ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801783c:	683a      	ldr	r2, [r7, #0]
 801783e:	88d2      	ldrh	r2, [r2, #6]
 8017840:	4798      	blx	r3
                                                            req->wLength);

          USBD_CtlSendData(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 8017842:	6939      	ldr	r1, [r7, #16]
 8017844:	683b      	ldr	r3, [r7, #0]
 8017846:	88da      	ldrh	r2, [r3, #6]
 8017848:	687b      	ldr	r3, [r7, #4]
 801784a:	0018      	movs	r0, r3
 801784c:	f001 fbaf 	bl	8018fae <USBD_CtlSendData>
      else
      {
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
                                                          (uint8_t *)(void *)req, 0U);
      }
      break;
 8017850:	e083      	b.n	801795a <USBD_CDC_Setup+0x17e>
          hcdc->CmdOpCode = req->bRequest;
 8017852:	683b      	ldr	r3, [r7, #0]
 8017854:	7859      	ldrb	r1, [r3, #1]
 8017856:	693a      	ldr	r2, [r7, #16]
 8017858:	2380      	movs	r3, #128	@ 0x80
 801785a:	009b      	lsls	r3, r3, #2
 801785c:	54d1      	strb	r1, [r2, r3]
          hcdc->CmdLength = (uint8_t)req->wLength;
 801785e:	683b      	ldr	r3, [r7, #0]
 8017860:	88db      	ldrh	r3, [r3, #6]
 8017862:	b2d9      	uxtb	r1, r3
 8017864:	693b      	ldr	r3, [r7, #16]
 8017866:	4a40      	ldr	r2, [pc, #256]	@ (8017968 <USBD_CDC_Setup+0x18c>)
 8017868:	5499      	strb	r1, [r3, r2]
          USBD_CtlPrepareRx(pdev, (uint8_t *)(void *)hcdc->data, req->wLength);
 801786a:	6939      	ldr	r1, [r7, #16]
 801786c:	683b      	ldr	r3, [r7, #0]
 801786e:	88da      	ldrh	r2, [r3, #6]
 8017870:	687b      	ldr	r3, [r7, #4]
 8017872:	0018      	movs	r0, r3
 8017874:	f001 fbce 	bl	8019014 <USBD_CtlPrepareRx>
      break;
 8017878:	e06f      	b.n	801795a <USBD_CDC_Setup+0x17e>
        ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(req->bRequest,
 801787a:	687a      	ldr	r2, [r7, #4]
 801787c:	23af      	movs	r3, #175	@ 0xaf
 801787e:	009b      	lsls	r3, r3, #2
 8017880:	58d3      	ldr	r3, [r2, r3]
 8017882:	689b      	ldr	r3, [r3, #8]
 8017884:	683a      	ldr	r2, [r7, #0]
 8017886:	7850      	ldrb	r0, [r2, #1]
 8017888:	6839      	ldr	r1, [r7, #0]
 801788a:	2200      	movs	r2, #0
 801788c:	4798      	blx	r3
      break;
 801788e:	e064      	b.n	801795a <USBD_CDC_Setup+0x17e>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 8017890:	683b      	ldr	r3, [r7, #0]
 8017892:	785b      	ldrb	r3, [r3, #1]
 8017894:	2b0b      	cmp	r3, #11
 8017896:	d037      	beq.n	8017908 <USBD_CDC_Setup+0x12c>
 8017898:	dc47      	bgt.n	801792a <USBD_CDC_Setup+0x14e>
 801789a:	2b00      	cmp	r3, #0
 801789c:	d002      	beq.n	80178a4 <USBD_CDC_Setup+0xc8>
 801789e:	2b0a      	cmp	r3, #10
 80178a0:	d019      	beq.n	80178d6 <USBD_CDC_Setup+0xfa>
 80178a2:	e042      	b.n	801792a <USBD_CDC_Setup+0x14e>
      {
        case USB_REQ_GET_STATUS:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80178a4:	687a      	ldr	r2, [r7, #4]
 80178a6:	23a7      	movs	r3, #167	@ 0xa7
 80178a8:	009b      	lsls	r3, r3, #2
 80178aa:	5cd3      	ldrb	r3, [r2, r3]
 80178ac:	2b03      	cmp	r3, #3
 80178ae:	d107      	bne.n	80178c0 <USBD_CDC_Setup+0xe4>
          {
            USBD_CtlSendData(pdev, (uint8_t *)(void *)&status_info, 2U);
 80178b0:	230c      	movs	r3, #12
 80178b2:	18f9      	adds	r1, r7, r3
 80178b4:	687b      	ldr	r3, [r7, #4]
 80178b6:	2202      	movs	r2, #2
 80178b8:	0018      	movs	r0, r3
 80178ba:	f001 fb78 	bl	8018fae <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80178be:	e040      	b.n	8017942 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 80178c0:	683a      	ldr	r2, [r7, #0]
 80178c2:	687b      	ldr	r3, [r7, #4]
 80178c4:	0011      	movs	r1, r2
 80178c6:	0018      	movs	r0, r3
 80178c8:	f001 faf3 	bl	8018eb2 <USBD_CtlError>
            ret = USBD_FAIL;
 80178cc:	2317      	movs	r3, #23
 80178ce:	18fb      	adds	r3, r7, r3
 80178d0:	2202      	movs	r2, #2
 80178d2:	701a      	strb	r2, [r3, #0]
          break;
 80178d4:	e035      	b.n	8017942 <USBD_CDC_Setup+0x166>

        case USB_REQ_GET_INTERFACE:
          if (pdev->dev_state == USBD_STATE_CONFIGURED)
 80178d6:	687a      	ldr	r2, [r7, #4]
 80178d8:	23a7      	movs	r3, #167	@ 0xa7
 80178da:	009b      	lsls	r3, r3, #2
 80178dc:	5cd3      	ldrb	r3, [r2, r3]
 80178de:	2b03      	cmp	r3, #3
 80178e0:	d107      	bne.n	80178f2 <USBD_CDC_Setup+0x116>
          {
            USBD_CtlSendData(pdev, &ifalt, 1U);
 80178e2:	230f      	movs	r3, #15
 80178e4:	18f9      	adds	r1, r7, r3
 80178e6:	687b      	ldr	r3, [r7, #4]
 80178e8:	2201      	movs	r2, #1
 80178ea:	0018      	movs	r0, r3
 80178ec:	f001 fb5f 	bl	8018fae <USBD_CtlSendData>
          else
          {
            USBD_CtlError(pdev, req);
            ret = USBD_FAIL;
          }
          break;
 80178f0:	e027      	b.n	8017942 <USBD_CDC_Setup+0x166>
            USBD_CtlError(pdev, req);
 80178f2:	683a      	ldr	r2, [r7, #0]
 80178f4:	687b      	ldr	r3, [r7, #4]
 80178f6:	0011      	movs	r1, r2
 80178f8:	0018      	movs	r0, r3
 80178fa:	f001 fada 	bl	8018eb2 <USBD_CtlError>
            ret = USBD_FAIL;
 80178fe:	2317      	movs	r3, #23
 8017900:	18fb      	adds	r3, r7, r3
 8017902:	2202      	movs	r2, #2
 8017904:	701a      	strb	r2, [r3, #0]
          break;
 8017906:	e01c      	b.n	8017942 <USBD_CDC_Setup+0x166>

        case USB_REQ_SET_INTERFACE:
          if (pdev->dev_state != USBD_STATE_CONFIGURED)
 8017908:	687a      	ldr	r2, [r7, #4]
 801790a:	23a7      	movs	r3, #167	@ 0xa7
 801790c:	009b      	lsls	r3, r3, #2
 801790e:	5cd3      	ldrb	r3, [r2, r3]
 8017910:	2b03      	cmp	r3, #3
 8017912:	d015      	beq.n	8017940 <USBD_CDC_Setup+0x164>
          {
            USBD_CtlError(pdev, req);
 8017914:	683a      	ldr	r2, [r7, #0]
 8017916:	687b      	ldr	r3, [r7, #4]
 8017918:	0011      	movs	r1, r2
 801791a:	0018      	movs	r0, r3
 801791c:	f001 fac9 	bl	8018eb2 <USBD_CtlError>
            ret = USBD_FAIL;
 8017920:	2317      	movs	r3, #23
 8017922:	18fb      	adds	r3, r7, r3
 8017924:	2202      	movs	r2, #2
 8017926:	701a      	strb	r2, [r3, #0]
          }
          break;
 8017928:	e00a      	b.n	8017940 <USBD_CDC_Setup+0x164>

        default:
          USBD_CtlError(pdev, req);
 801792a:	683a      	ldr	r2, [r7, #0]
 801792c:	687b      	ldr	r3, [r7, #4]
 801792e:	0011      	movs	r1, r2
 8017930:	0018      	movs	r0, r3
 8017932:	f001 fabe 	bl	8018eb2 <USBD_CtlError>
          ret = USBD_FAIL;
 8017936:	2317      	movs	r3, #23
 8017938:	18fb      	adds	r3, r7, r3
 801793a:	2202      	movs	r2, #2
 801793c:	701a      	strb	r2, [r3, #0]
          break;
 801793e:	e000      	b.n	8017942 <USBD_CDC_Setup+0x166>
          break;
 8017940:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8017942:	e00a      	b.n	801795a <USBD_CDC_Setup+0x17e>

    default:
      USBD_CtlError(pdev, req);
 8017944:	683a      	ldr	r2, [r7, #0]
 8017946:	687b      	ldr	r3, [r7, #4]
 8017948:	0011      	movs	r1, r2
 801794a:	0018      	movs	r0, r3
 801794c:	f001 fab1 	bl	8018eb2 <USBD_CtlError>
      ret = USBD_FAIL;
 8017950:	2317      	movs	r3, #23
 8017952:	18fb      	adds	r3, r7, r3
 8017954:	2202      	movs	r2, #2
 8017956:	701a      	strb	r2, [r3, #0]
      break;
 8017958:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801795a:	2317      	movs	r3, #23
 801795c:	18fb      	adds	r3, r7, r3
 801795e:	781b      	ldrb	r3, [r3, #0]
}
 8017960:	0018      	movs	r0, r3
 8017962:	46bd      	mov	sp, r7
 8017964:	b006      	add	sp, #24
 8017966:	bd80      	pop	{r7, pc}
 8017968:	00000201 	.word	0x00000201

0801796c <USBD_CDC_DataIn>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataIn(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 801796c:	b580      	push	{r7, lr}
 801796e:	b084      	sub	sp, #16
 8017970:	af00      	add	r7, sp, #0
 8017972:	6078      	str	r0, [r7, #4]
 8017974:	000a      	movs	r2, r1
 8017976:	1cfb      	adds	r3, r7, #3
 8017978:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef *)pdev->pClassData;
 801797a:	687a      	ldr	r2, [r7, #4]
 801797c:	23ae      	movs	r3, #174	@ 0xae
 801797e:	009b      	lsls	r3, r3, #2
 8017980:	58d3      	ldr	r3, [r2, r3]
 8017982:	60fb      	str	r3, [r7, #12]
  PCD_HandleTypeDef *hpcd = pdev->pData;
 8017984:	687a      	ldr	r2, [r7, #4]
 8017986:	23b0      	movs	r3, #176	@ 0xb0
 8017988:	009b      	lsls	r3, r3, #2
 801798a:	58d3      	ldr	r3, [r2, r3]
 801798c:	60bb      	str	r3, [r7, #8]

  if (pdev->pClassData != NULL)
 801798e:	687a      	ldr	r2, [r7, #4]
 8017990:	23ae      	movs	r3, #174	@ 0xae
 8017992:	009b      	lsls	r3, r3, #2
 8017994:	58d3      	ldr	r3, [r2, r3]
 8017996:	2b00      	cmp	r3, #0
 8017998:	d03e      	beq.n	8017a18 <USBD_CDC_DataIn+0xac>
  {
    if ((pdev->ep_in[epnum].total_length > 0U) && ((pdev->ep_in[epnum].total_length % hpcd->IN_ep[epnum].maxpacket) == 0U))
 801799a:	1cfb      	adds	r3, r7, #3
 801799c:	781a      	ldrb	r2, [r3, #0]
 801799e:	6879      	ldr	r1, [r7, #4]
 80179a0:	0013      	movs	r3, r2
 80179a2:	009b      	lsls	r3, r3, #2
 80179a4:	189b      	adds	r3, r3, r2
 80179a6:	009b      	lsls	r3, r3, #2
 80179a8:	18cb      	adds	r3, r1, r3
 80179aa:	331c      	adds	r3, #28
 80179ac:	681b      	ldr	r3, [r3, #0]
 80179ae:	2b00      	cmp	r3, #0
 80179b0:	d02b      	beq.n	8017a0a <USBD_CDC_DataIn+0x9e>
 80179b2:	1cfb      	adds	r3, r7, #3
 80179b4:	781a      	ldrb	r2, [r3, #0]
 80179b6:	6879      	ldr	r1, [r7, #4]
 80179b8:	0013      	movs	r3, r2
 80179ba:	009b      	lsls	r3, r3, #2
 80179bc:	189b      	adds	r3, r3, r2
 80179be:	009b      	lsls	r3, r3, #2
 80179c0:	18cb      	adds	r3, r1, r3
 80179c2:	331c      	adds	r3, #28
 80179c4:	6818      	ldr	r0, [r3, #0]
 80179c6:	1cfb      	adds	r3, r7, #3
 80179c8:	781a      	ldrb	r2, [r3, #0]
 80179ca:	68b9      	ldr	r1, [r7, #8]
 80179cc:	0013      	movs	r3, r2
 80179ce:	009b      	lsls	r3, r3, #2
 80179d0:	189b      	adds	r3, r3, r2
 80179d2:	00db      	lsls	r3, r3, #3
 80179d4:	18cb      	adds	r3, r1, r3
 80179d6:	3338      	adds	r3, #56	@ 0x38
 80179d8:	681b      	ldr	r3, [r3, #0]
 80179da:	0019      	movs	r1, r3
 80179dc:	f7e8 fc68 	bl	80002b0 <__aeabi_uidivmod>
 80179e0:	1e0b      	subs	r3, r1, #0
 80179e2:	d112      	bne.n	8017a0a <USBD_CDC_DataIn+0x9e>
    {
      /* Update the packet total length */
      pdev->ep_in[epnum].total_length = 0U;
 80179e4:	1cfb      	adds	r3, r7, #3
 80179e6:	781a      	ldrb	r2, [r3, #0]
 80179e8:	6879      	ldr	r1, [r7, #4]
 80179ea:	0013      	movs	r3, r2
 80179ec:	009b      	lsls	r3, r3, #2
 80179ee:	189b      	adds	r3, r3, r2
 80179f0:	009b      	lsls	r3, r3, #2
 80179f2:	18cb      	adds	r3, r1, r3
 80179f4:	331c      	adds	r3, #28
 80179f6:	2200      	movs	r2, #0
 80179f8:	601a      	str	r2, [r3, #0]

      /* Send ZLP */
      USBD_LL_Transmit(pdev, epnum, NULL, 0U);
 80179fa:	1cfb      	adds	r3, r7, #3
 80179fc:	7819      	ldrb	r1, [r3, #0]
 80179fe:	6878      	ldr	r0, [r7, #4]
 8017a00:	2300      	movs	r3, #0
 8017a02:	2200      	movs	r2, #0
 8017a04:	f002 f82f 	bl	8019a66 <USBD_LL_Transmit>
 8017a08:	e004      	b.n	8017a14 <USBD_CDC_DataIn+0xa8>
    }
    else
    {
      hcdc->TxState = 0U;
 8017a0a:	68fa      	ldr	r2, [r7, #12]
 8017a0c:	2385      	movs	r3, #133	@ 0x85
 8017a0e:	009b      	lsls	r3, r3, #2
 8017a10:	2100      	movs	r1, #0
 8017a12:	50d1      	str	r1, [r2, r3]
    }
    return USBD_OK;
 8017a14:	2300      	movs	r3, #0
 8017a16:	e000      	b.n	8017a1a <USBD_CDC_DataIn+0xae>
  }
  else
  {
    return USBD_FAIL;
 8017a18:	2302      	movs	r3, #2
  }
}
 8017a1a:	0018      	movs	r0, r3
 8017a1c:	46bd      	mov	sp, r7
 8017a1e:	b004      	add	sp, #16
 8017a20:	bd80      	pop	{r7, pc}

08017a22 <USBD_CDC_DataOut>:
  * @param  pdev: device instance
  * @param  epnum: endpoint number
  * @retval status
  */
static uint8_t  USBD_CDC_DataOut(USBD_HandleTypeDef *pdev, uint8_t epnum)
{
 8017a22:	b580      	push	{r7, lr}
 8017a24:	b084      	sub	sp, #16
 8017a26:	af00      	add	r7, sp, #0
 8017a28:	6078      	str	r0, [r7, #4]
 8017a2a:	000a      	movs	r2, r1
 8017a2c:	1cfb      	adds	r3, r7, #3
 8017a2e:	701a      	strb	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8017a30:	687a      	ldr	r2, [r7, #4]
 8017a32:	23ae      	movs	r3, #174	@ 0xae
 8017a34:	009b      	lsls	r3, r3, #2
 8017a36:	58d3      	ldr	r3, [r2, r3]
 8017a38:	60fb      	str	r3, [r7, #12]

  /* Get the received data length */
  hcdc->RxLength = USBD_LL_GetRxDataSize(pdev, epnum);
 8017a3a:	1cfb      	adds	r3, r7, #3
 8017a3c:	781a      	ldrb	r2, [r3, #0]
 8017a3e:	687b      	ldr	r3, [r7, #4]
 8017a40:	0011      	movs	r1, r2
 8017a42:	0018      	movs	r0, r3
 8017a44:	f002 f87d 	bl	8019b42 <USBD_LL_GetRxDataSize>
 8017a48:	0001      	movs	r1, r0
 8017a4a:	68fa      	ldr	r2, [r7, #12]
 8017a4c:	2383      	movs	r3, #131	@ 0x83
 8017a4e:	009b      	lsls	r3, r3, #2
 8017a50:	50d1      	str	r1, [r2, r3]

  /* USB data will be immediately processed, this allow next USB traffic being
  NAKed till the end of the application Xfer */
  if (pdev->pClassData != NULL)
 8017a52:	687a      	ldr	r2, [r7, #4]
 8017a54:	23ae      	movs	r3, #174	@ 0xae
 8017a56:	009b      	lsls	r3, r3, #2
 8017a58:	58d3      	ldr	r3, [r2, r3]
 8017a5a:	2b00      	cmp	r3, #0
 8017a5c:	d011      	beq.n	8017a82 <USBD_CDC_DataOut+0x60>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Receive(hcdc->RxBuffer, &hcdc->RxLength);
 8017a5e:	687a      	ldr	r2, [r7, #4]
 8017a60:	23af      	movs	r3, #175	@ 0xaf
 8017a62:	009b      	lsls	r3, r3, #2
 8017a64:	58d3      	ldr	r3, [r2, r3]
 8017a66:	68da      	ldr	r2, [r3, #12]
 8017a68:	68f9      	ldr	r1, [r7, #12]
 8017a6a:	2381      	movs	r3, #129	@ 0x81
 8017a6c:	009b      	lsls	r3, r3, #2
 8017a6e:	58c8      	ldr	r0, [r1, r3]
 8017a70:	68fb      	ldr	r3, [r7, #12]
 8017a72:	2183      	movs	r1, #131	@ 0x83
 8017a74:	0089      	lsls	r1, r1, #2
 8017a76:	468c      	mov	ip, r1
 8017a78:	4463      	add	r3, ip
 8017a7a:	0019      	movs	r1, r3
 8017a7c:	4790      	blx	r2

    return USBD_OK;
 8017a7e:	2300      	movs	r3, #0
 8017a80:	e000      	b.n	8017a84 <USBD_CDC_DataOut+0x62>
  }
  else
  {
    return USBD_FAIL;
 8017a82:	2302      	movs	r3, #2
  }
}
 8017a84:	0018      	movs	r0, r3
 8017a86:	46bd      	mov	sp, r7
 8017a88:	b004      	add	sp, #16
 8017a8a:	bd80      	pop	{r7, pc}

08017a8c <USBD_CDC_EP0_RxReady>:
  *         Handle EP0 Rx Ready event
  * @param  pdev: device instance
  * @retval status
  */
static uint8_t  USBD_CDC_EP0_RxReady(USBD_HandleTypeDef *pdev)
{
 8017a8c:	b590      	push	{r4, r7, lr}
 8017a8e:	b085      	sub	sp, #20
 8017a90:	af00      	add	r7, sp, #0
 8017a92:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8017a94:	687a      	ldr	r2, [r7, #4]
 8017a96:	23ae      	movs	r3, #174	@ 0xae
 8017a98:	009b      	lsls	r3, r3, #2
 8017a9a:	58d3      	ldr	r3, [r2, r3]
 8017a9c:	60fb      	str	r3, [r7, #12]

  if ((pdev->pUserData != NULL) && (hcdc->CmdOpCode != 0xFFU))
 8017a9e:	687a      	ldr	r2, [r7, #4]
 8017aa0:	23af      	movs	r3, #175	@ 0xaf
 8017aa2:	009b      	lsls	r3, r3, #2
 8017aa4:	58d3      	ldr	r3, [r2, r3]
 8017aa6:	2b00      	cmp	r3, #0
 8017aa8:	d018      	beq.n	8017adc <USBD_CDC_EP0_RxReady+0x50>
 8017aaa:	68fa      	ldr	r2, [r7, #12]
 8017aac:	2380      	movs	r3, #128	@ 0x80
 8017aae:	009b      	lsls	r3, r3, #2
 8017ab0:	5cd3      	ldrb	r3, [r2, r3]
 8017ab2:	2bff      	cmp	r3, #255	@ 0xff
 8017ab4:	d012      	beq.n	8017adc <USBD_CDC_EP0_RxReady+0x50>
  {
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8017ab6:	687a      	ldr	r2, [r7, #4]
 8017ab8:	23af      	movs	r3, #175	@ 0xaf
 8017aba:	009b      	lsls	r3, r3, #2
 8017abc:	58d3      	ldr	r3, [r2, r3]
 8017abe:	689b      	ldr	r3, [r3, #8]
 8017ac0:	68f9      	ldr	r1, [r7, #12]
 8017ac2:	2280      	movs	r2, #128	@ 0x80
 8017ac4:	0092      	lsls	r2, r2, #2
 8017ac6:	5c88      	ldrb	r0, [r1, r2]
                                                      (uint8_t *)(void *)hcdc->data,
 8017ac8:	68f9      	ldr	r1, [r7, #12]
                                                      (uint16_t)hcdc->CmdLength);
 8017aca:	68fa      	ldr	r2, [r7, #12]
 8017acc:	4c06      	ldr	r4, [pc, #24]	@ (8017ae8 <USBD_CDC_EP0_RxReady+0x5c>)
 8017ace:	5d12      	ldrb	r2, [r2, r4]
    ((USBD_CDC_ItfTypeDef *)pdev->pUserData)->Control(hcdc->CmdOpCode,
 8017ad0:	4798      	blx	r3
    hcdc->CmdOpCode = 0xFFU;
 8017ad2:	68fa      	ldr	r2, [r7, #12]
 8017ad4:	2380      	movs	r3, #128	@ 0x80
 8017ad6:	009b      	lsls	r3, r3, #2
 8017ad8:	21ff      	movs	r1, #255	@ 0xff
 8017ada:	54d1      	strb	r1, [r2, r3]

  }
  return USBD_OK;
 8017adc:	2300      	movs	r3, #0
}
 8017ade:	0018      	movs	r0, r3
 8017ae0:	46bd      	mov	sp, r7
 8017ae2:	b005      	add	sp, #20
 8017ae4:	bd90      	pop	{r4, r7, pc}
 8017ae6:	46c0      	nop			@ (mov r8, r8)
 8017ae8:	00000201 	.word	0x00000201

08017aec <USBD_CDC_GetFSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetFSCfgDesc(uint16_t *length)
{
 8017aec:	b580      	push	{r7, lr}
 8017aee:	b082      	sub	sp, #8
 8017af0:	af00      	add	r7, sp, #0
 8017af2:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgFSDesc);
 8017af4:	687b      	ldr	r3, [r7, #4]
 8017af6:	2243      	movs	r2, #67	@ 0x43
 8017af8:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgFSDesc;
 8017afa:	4b02      	ldr	r3, [pc, #8]	@ (8017b04 <USBD_CDC_GetFSCfgDesc+0x18>)
}
 8017afc:	0018      	movs	r0, r3
 8017afe:	46bd      	mov	sp, r7
 8017b00:	b002      	add	sp, #8
 8017b02:	bd80      	pop	{r7, pc}
 8017b04:	20000168 	.word	0x20000168

08017b08 <USBD_CDC_GetHSCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetHSCfgDesc(uint16_t *length)
{
 8017b08:	b580      	push	{r7, lr}
 8017b0a:	b082      	sub	sp, #8
 8017b0c:	af00      	add	r7, sp, #0
 8017b0e:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_CfgHSDesc);
 8017b10:	687b      	ldr	r3, [r7, #4]
 8017b12:	2243      	movs	r2, #67	@ 0x43
 8017b14:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_CfgHSDesc;
 8017b16:	4b02      	ldr	r3, [pc, #8]	@ (8017b20 <USBD_CDC_GetHSCfgDesc+0x18>)
}
 8017b18:	0018      	movs	r0, r3
 8017b1a:	46bd      	mov	sp, r7
 8017b1c:	b002      	add	sp, #8
 8017b1e:	bd80      	pop	{r7, pc}
 8017b20:	20000124 	.word	0x20000124

08017b24 <USBD_CDC_GetOtherSpeedCfgDesc>:
  * @param  speed : current device speed
  * @param  length : pointer data length
  * @retval pointer to descriptor buffer
  */
static uint8_t  *USBD_CDC_GetOtherSpeedCfgDesc(uint16_t *length)
{
 8017b24:	b580      	push	{r7, lr}
 8017b26:	b082      	sub	sp, #8
 8017b28:	af00      	add	r7, sp, #0
 8017b2a:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_OtherSpeedCfgDesc);
 8017b2c:	687b      	ldr	r3, [r7, #4]
 8017b2e:	2243      	movs	r2, #67	@ 0x43
 8017b30:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_OtherSpeedCfgDesc;
 8017b32:	4b02      	ldr	r3, [pc, #8]	@ (8017b3c <USBD_CDC_GetOtherSpeedCfgDesc+0x18>)
}
 8017b34:	0018      	movs	r0, r3
 8017b36:	46bd      	mov	sp, r7
 8017b38:	b002      	add	sp, #8
 8017b3a:	bd80      	pop	{r7, pc}
 8017b3c:	200001ac 	.word	0x200001ac

08017b40 <USBD_CDC_GetDeviceQualifierDescriptor>:
*         return Device Qualifier descriptor
* @param  length : pointer data length
* @retval pointer to descriptor buffer
*/
uint8_t  *USBD_CDC_GetDeviceQualifierDescriptor(uint16_t *length)
{
 8017b40:	b580      	push	{r7, lr}
 8017b42:	b082      	sub	sp, #8
 8017b44:	af00      	add	r7, sp, #0
 8017b46:	6078      	str	r0, [r7, #4]
  *length = sizeof(USBD_CDC_DeviceQualifierDesc);
 8017b48:	687b      	ldr	r3, [r7, #4]
 8017b4a:	220a      	movs	r2, #10
 8017b4c:	801a      	strh	r2, [r3, #0]
  return USBD_CDC_DeviceQualifierDesc;
 8017b4e:	4b02      	ldr	r3, [pc, #8]	@ (8017b58 <USBD_CDC_GetDeviceQualifierDescriptor+0x18>)
}
 8017b50:	0018      	movs	r0, r3
 8017b52:	46bd      	mov	sp, r7
 8017b54:	b002      	add	sp, #8
 8017b56:	bd80      	pop	{r7, pc}
 8017b58:	200000e0 	.word	0x200000e0

08017b5c <USBD_CDC_RegisterInterface>:
  * @param  fops: CD  Interface callback
  * @retval status
  */
uint8_t  USBD_CDC_RegisterInterface(USBD_HandleTypeDef   *pdev,
                                    USBD_CDC_ItfTypeDef *fops)
{
 8017b5c:	b580      	push	{r7, lr}
 8017b5e:	b084      	sub	sp, #16
 8017b60:	af00      	add	r7, sp, #0
 8017b62:	6078      	str	r0, [r7, #4]
 8017b64:	6039      	str	r1, [r7, #0]
  uint8_t  ret = USBD_FAIL;
 8017b66:	200f      	movs	r0, #15
 8017b68:	183b      	adds	r3, r7, r0
 8017b6a:	2202      	movs	r2, #2
 8017b6c:	701a      	strb	r2, [r3, #0]

  if (fops != NULL)
 8017b6e:	683b      	ldr	r3, [r7, #0]
 8017b70:	2b00      	cmp	r3, #0
 8017b72:	d007      	beq.n	8017b84 <USBD_CDC_RegisterInterface+0x28>
  {
    pdev->pUserData = fops;
 8017b74:	687a      	ldr	r2, [r7, #4]
 8017b76:	23af      	movs	r3, #175	@ 0xaf
 8017b78:	009b      	lsls	r3, r3, #2
 8017b7a:	6839      	ldr	r1, [r7, #0]
 8017b7c:	50d1      	str	r1, [r2, r3]
    ret = USBD_OK;
 8017b7e:	183b      	adds	r3, r7, r0
 8017b80:	2200      	movs	r2, #0
 8017b82:	701a      	strb	r2, [r3, #0]
  }

  return ret;
 8017b84:	230f      	movs	r3, #15
 8017b86:	18fb      	adds	r3, r7, r3
 8017b88:	781b      	ldrb	r3, [r3, #0]
}
 8017b8a:	0018      	movs	r0, r3
 8017b8c:	46bd      	mov	sp, r7
 8017b8e:	b004      	add	sp, #16
 8017b90:	bd80      	pop	{r7, pc}

08017b92 <USBD_CDC_SetTxBuffer>:
  * @retval status
  */
uint8_t  USBD_CDC_SetTxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff,
                              uint16_t length)
{
 8017b92:	b580      	push	{r7, lr}
 8017b94:	b086      	sub	sp, #24
 8017b96:	af00      	add	r7, sp, #0
 8017b98:	60f8      	str	r0, [r7, #12]
 8017b9a:	60b9      	str	r1, [r7, #8]
 8017b9c:	1dbb      	adds	r3, r7, #6
 8017b9e:	801a      	strh	r2, [r3, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8017ba0:	68fa      	ldr	r2, [r7, #12]
 8017ba2:	23ae      	movs	r3, #174	@ 0xae
 8017ba4:	009b      	lsls	r3, r3, #2
 8017ba6:	58d3      	ldr	r3, [r2, r3]
 8017ba8:	617b      	str	r3, [r7, #20]

  hcdc->TxBuffer = pbuff;
 8017baa:	697a      	ldr	r2, [r7, #20]
 8017bac:	2382      	movs	r3, #130	@ 0x82
 8017bae:	009b      	lsls	r3, r3, #2
 8017bb0:	68b9      	ldr	r1, [r7, #8]
 8017bb2:	50d1      	str	r1, [r2, r3]
  hcdc->TxLength = length;
 8017bb4:	1dbb      	adds	r3, r7, #6
 8017bb6:	8819      	ldrh	r1, [r3, #0]
 8017bb8:	697a      	ldr	r2, [r7, #20]
 8017bba:	2384      	movs	r3, #132	@ 0x84
 8017bbc:	009b      	lsls	r3, r3, #2
 8017bbe:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8017bc0:	2300      	movs	r3, #0
}
 8017bc2:	0018      	movs	r0, r3
 8017bc4:	46bd      	mov	sp, r7
 8017bc6:	b006      	add	sp, #24
 8017bc8:	bd80      	pop	{r7, pc}

08017bca <USBD_CDC_SetRxBuffer>:
  * @param  pbuff: Rx Buffer
  * @retval status
  */
uint8_t  USBD_CDC_SetRxBuffer(USBD_HandleTypeDef   *pdev,
                              uint8_t  *pbuff)
{
 8017bca:	b580      	push	{r7, lr}
 8017bcc:	b084      	sub	sp, #16
 8017bce:	af00      	add	r7, sp, #0
 8017bd0:	6078      	str	r0, [r7, #4]
 8017bd2:	6039      	str	r1, [r7, #0]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8017bd4:	687a      	ldr	r2, [r7, #4]
 8017bd6:	23ae      	movs	r3, #174	@ 0xae
 8017bd8:	009b      	lsls	r3, r3, #2
 8017bda:	58d3      	ldr	r3, [r2, r3]
 8017bdc:	60fb      	str	r3, [r7, #12]

  hcdc->RxBuffer = pbuff;
 8017bde:	68fa      	ldr	r2, [r7, #12]
 8017be0:	2381      	movs	r3, #129	@ 0x81
 8017be2:	009b      	lsls	r3, r3, #2
 8017be4:	6839      	ldr	r1, [r7, #0]
 8017be6:	50d1      	str	r1, [r2, r3]

  return USBD_OK;
 8017be8:	2300      	movs	r3, #0
}
 8017bea:	0018      	movs	r0, r3
 8017bec:	46bd      	mov	sp, r7
 8017bee:	b004      	add	sp, #16
 8017bf0:	bd80      	pop	{r7, pc}

08017bf2 <USBD_CDC_TransmitPacket>:
  *         Transmit packet on IN endpoint
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_TransmitPacket(USBD_HandleTypeDef *pdev)
{
 8017bf2:	b580      	push	{r7, lr}
 8017bf4:	b084      	sub	sp, #16
 8017bf6:	af00      	add	r7, sp, #0
 8017bf8:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8017bfa:	687a      	ldr	r2, [r7, #4]
 8017bfc:	23ae      	movs	r3, #174	@ 0xae
 8017bfe:	009b      	lsls	r3, r3, #2
 8017c00:	58d3      	ldr	r3, [r2, r3]
 8017c02:	60fb      	str	r3, [r7, #12]

  if (pdev->pClassData != NULL)
 8017c04:	687a      	ldr	r2, [r7, #4]
 8017c06:	23ae      	movs	r3, #174	@ 0xae
 8017c08:	009b      	lsls	r3, r3, #2
 8017c0a:	58d3      	ldr	r3, [r2, r3]
 8017c0c:	2b00      	cmp	r3, #0
 8017c0e:	d022      	beq.n	8017c56 <USBD_CDC_TransmitPacket+0x64>
  {
    if (hcdc->TxState == 0U)
 8017c10:	68fa      	ldr	r2, [r7, #12]
 8017c12:	2385      	movs	r3, #133	@ 0x85
 8017c14:	009b      	lsls	r3, r3, #2
 8017c16:	58d3      	ldr	r3, [r2, r3]
 8017c18:	2b00      	cmp	r3, #0
 8017c1a:	d11a      	bne.n	8017c52 <USBD_CDC_TransmitPacket+0x60>
    {
      /* Tx Transfer in progress */
      hcdc->TxState = 1U;
 8017c1c:	68fa      	ldr	r2, [r7, #12]
 8017c1e:	2385      	movs	r3, #133	@ 0x85
 8017c20:	009b      	lsls	r3, r3, #2
 8017c22:	2101      	movs	r1, #1
 8017c24:	50d1      	str	r1, [r2, r3]

      /* Update the packet total length */
      pdev->ep_in[CDC_IN_EP & 0xFU].total_length = hcdc->TxLength;
 8017c26:	68fa      	ldr	r2, [r7, #12]
 8017c28:	2384      	movs	r3, #132	@ 0x84
 8017c2a:	009b      	lsls	r3, r3, #2
 8017c2c:	58d2      	ldr	r2, [r2, r3]
 8017c2e:	687b      	ldr	r3, [r7, #4]
 8017c30:	631a      	str	r2, [r3, #48]	@ 0x30

      /* Transmit next packet */
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8017c32:	68fa      	ldr	r2, [r7, #12]
 8017c34:	2382      	movs	r3, #130	@ 0x82
 8017c36:	009b      	lsls	r3, r3, #2
 8017c38:	58d1      	ldr	r1, [r2, r3]
                       (uint16_t)hcdc->TxLength);
 8017c3a:	68fa      	ldr	r2, [r7, #12]
 8017c3c:	2384      	movs	r3, #132	@ 0x84
 8017c3e:	009b      	lsls	r3, r3, #2
 8017c40:	58d3      	ldr	r3, [r2, r3]
      USBD_LL_Transmit(pdev, CDC_IN_EP, hcdc->TxBuffer,
 8017c42:	b29b      	uxth	r3, r3
 8017c44:	6878      	ldr	r0, [r7, #4]
 8017c46:	000a      	movs	r2, r1
 8017c48:	2181      	movs	r1, #129	@ 0x81
 8017c4a:	f001 ff0c 	bl	8019a66 <USBD_LL_Transmit>

      return USBD_OK;
 8017c4e:	2300      	movs	r3, #0
 8017c50:	e002      	b.n	8017c58 <USBD_CDC_TransmitPacket+0x66>
    }
    else
    {
      return USBD_BUSY;
 8017c52:	2301      	movs	r3, #1
 8017c54:	e000      	b.n	8017c58 <USBD_CDC_TransmitPacket+0x66>
    }
  }
  else
  {
    return USBD_FAIL;
 8017c56:	2302      	movs	r3, #2
  }
}
 8017c58:	0018      	movs	r0, r3
 8017c5a:	46bd      	mov	sp, r7
 8017c5c:	b004      	add	sp, #16
 8017c5e:	bd80      	pop	{r7, pc}

08017c60 <USBD_CDC_ReceivePacket>:
  *         prepare OUT Endpoint for reception
  * @param  pdev: device instance
  * @retval status
  */
uint8_t  USBD_CDC_ReceivePacket(USBD_HandleTypeDef *pdev)
{
 8017c60:	b580      	push	{r7, lr}
 8017c62:	b084      	sub	sp, #16
 8017c64:	af00      	add	r7, sp, #0
 8017c66:	6078      	str	r0, [r7, #4]
  USBD_CDC_HandleTypeDef   *hcdc = (USBD_CDC_HandleTypeDef *) pdev->pClassData;
 8017c68:	687a      	ldr	r2, [r7, #4]
 8017c6a:	23ae      	movs	r3, #174	@ 0xae
 8017c6c:	009b      	lsls	r3, r3, #2
 8017c6e:	58d3      	ldr	r3, [r2, r3]
 8017c70:	60fb      	str	r3, [r7, #12]

  /* Suspend or Resume USB Out process */
  if (pdev->pClassData != NULL)
 8017c72:	687a      	ldr	r2, [r7, #4]
 8017c74:	23ae      	movs	r3, #174	@ 0xae
 8017c76:	009b      	lsls	r3, r3, #2
 8017c78:	58d3      	ldr	r3, [r2, r3]
 8017c7a:	2b00      	cmp	r3, #0
 8017c7c:	d019      	beq.n	8017cb2 <USBD_CDC_ReceivePacket+0x52>
  {
    if (pdev->dev_speed == USBD_SPEED_HIGH)
 8017c7e:	687b      	ldr	r3, [r7, #4]
 8017c80:	7c1b      	ldrb	r3, [r3, #16]
 8017c82:	2b00      	cmp	r3, #0
 8017c84:	d10a      	bne.n	8017c9c <USBD_CDC_ReceivePacket+0x3c>
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8017c86:	68fa      	ldr	r2, [r7, #12]
 8017c88:	2381      	movs	r3, #129	@ 0x81
 8017c8a:	009b      	lsls	r3, r3, #2
 8017c8c:	58d2      	ldr	r2, [r2, r3]
 8017c8e:	2380      	movs	r3, #128	@ 0x80
 8017c90:	009b      	lsls	r3, r3, #2
 8017c92:	6878      	ldr	r0, [r7, #4]
 8017c94:	2101      	movs	r1, #1
 8017c96:	f001 ff1d 	bl	8019ad4 <USBD_LL_PrepareReceive>
 8017c9a:	e008      	b.n	8017cae <USBD_CDC_ReceivePacket+0x4e>
                             CDC_DATA_HS_OUT_PACKET_SIZE);
    }
    else
    {
      /* Prepare Out endpoint to receive next packet */
      USBD_LL_PrepareReceive(pdev,
 8017c9c:	68fa      	ldr	r2, [r7, #12]
 8017c9e:	2381      	movs	r3, #129	@ 0x81
 8017ca0:	009b      	lsls	r3, r3, #2
 8017ca2:	58d2      	ldr	r2, [r2, r3]
 8017ca4:	6878      	ldr	r0, [r7, #4]
 8017ca6:	2340      	movs	r3, #64	@ 0x40
 8017ca8:	2101      	movs	r1, #1
 8017caa:	f001 ff13 	bl	8019ad4 <USBD_LL_PrepareReceive>
                             CDC_OUT_EP,
                             hcdc->RxBuffer,
                             CDC_DATA_FS_OUT_PACKET_SIZE);
    }
    return USBD_OK;
 8017cae:	2300      	movs	r3, #0
 8017cb0:	e000      	b.n	8017cb4 <USBD_CDC_ReceivePacket+0x54>
  }
  else
  {
    return USBD_FAIL;
 8017cb2:	2302      	movs	r3, #2
  }
}
 8017cb4:	0018      	movs	r0, r3
 8017cb6:	46bd      	mov	sp, r7
 8017cb8:	b004      	add	sp, #16
 8017cba:	bd80      	pop	{r7, pc}

08017cbc <USBD_Init>:
* @param  id: Low level core index
* @retval None
*/
USBD_StatusTypeDef USBD_Init(USBD_HandleTypeDef *pdev,
                             USBD_DescriptorsTypeDef *pdesc, uint8_t id)
{
 8017cbc:	b580      	push	{r7, lr}
 8017cbe:	b084      	sub	sp, #16
 8017cc0:	af00      	add	r7, sp, #0
 8017cc2:	60f8      	str	r0, [r7, #12]
 8017cc4:	60b9      	str	r1, [r7, #8]
 8017cc6:	1dfb      	adds	r3, r7, #7
 8017cc8:	701a      	strb	r2, [r3, #0]
  /* Check whether the USB Host handle is valid */
  if (pdev == NULL)
 8017cca:	68fb      	ldr	r3, [r7, #12]
 8017ccc:	2b00      	cmp	r3, #0
 8017cce:	d101      	bne.n	8017cd4 <USBD_Init+0x18>
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Device handle");
#endif
    return USBD_FAIL;
 8017cd0:	2302      	movs	r3, #2
 8017cd2:	e020      	b.n	8017d16 <USBD_Init+0x5a>
  }

  /* Unlink previous class*/
  if (pdev->pClass != NULL)
 8017cd4:	68fa      	ldr	r2, [r7, #12]
 8017cd6:	23ad      	movs	r3, #173	@ 0xad
 8017cd8:	009b      	lsls	r3, r3, #2
 8017cda:	58d3      	ldr	r3, [r2, r3]
 8017cdc:	2b00      	cmp	r3, #0
 8017cde:	d004      	beq.n	8017cea <USBD_Init+0x2e>
  {
    pdev->pClass = NULL;
 8017ce0:	68fa      	ldr	r2, [r7, #12]
 8017ce2:	23ad      	movs	r3, #173	@ 0xad
 8017ce4:	009b      	lsls	r3, r3, #2
 8017ce6:	2100      	movs	r1, #0
 8017ce8:	50d1      	str	r1, [r2, r3]
  }

  /* Assign USBD Descriptors */
  if (pdesc != NULL)
 8017cea:	68bb      	ldr	r3, [r7, #8]
 8017cec:	2b00      	cmp	r3, #0
 8017cee:	d004      	beq.n	8017cfa <USBD_Init+0x3e>
  {
    pdev->pDesc = pdesc;
 8017cf0:	68fa      	ldr	r2, [r7, #12]
 8017cf2:	23ac      	movs	r3, #172	@ 0xac
 8017cf4:	009b      	lsls	r3, r3, #2
 8017cf6:	68b9      	ldr	r1, [r7, #8]
 8017cf8:	50d1      	str	r1, [r2, r3]
  }

  /* Set Device initial State */
  pdev->dev_state = USBD_STATE_DEFAULT;
 8017cfa:	68fa      	ldr	r2, [r7, #12]
 8017cfc:	23a7      	movs	r3, #167	@ 0xa7
 8017cfe:	009b      	lsls	r3, r3, #2
 8017d00:	2101      	movs	r1, #1
 8017d02:	54d1      	strb	r1, [r2, r3]
  pdev->id = id;
 8017d04:	68fb      	ldr	r3, [r7, #12]
 8017d06:	1dfa      	adds	r2, r7, #7
 8017d08:	7812      	ldrb	r2, [r2, #0]
 8017d0a:	701a      	strb	r2, [r3, #0]
  /* Initialize low level driver */
  USBD_LL_Init(pdev);
 8017d0c:	68fb      	ldr	r3, [r7, #12]
 8017d0e:	0018      	movs	r0, r3
 8017d10:	f001 fd0c 	bl	801972c <USBD_LL_Init>

  return USBD_OK;
 8017d14:	2300      	movs	r3, #0
}
 8017d16:	0018      	movs	r0, r3
 8017d18:	46bd      	mov	sp, r7
 8017d1a:	b004      	add	sp, #16
 8017d1c:	bd80      	pop	{r7, pc}

08017d1e <USBD_RegisterClass>:
  * @param  pDevice : Device Handle
  * @param  pclass: Class handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_RegisterClass(USBD_HandleTypeDef *pdev, USBD_ClassTypeDef *pclass)
{
 8017d1e:	b580      	push	{r7, lr}
 8017d20:	b084      	sub	sp, #16
 8017d22:	af00      	add	r7, sp, #0
 8017d24:	6078      	str	r0, [r7, #4]
 8017d26:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef status = USBD_OK;
 8017d28:	200f      	movs	r0, #15
 8017d2a:	183b      	adds	r3, r7, r0
 8017d2c:	2200      	movs	r2, #0
 8017d2e:	701a      	strb	r2, [r3, #0]
  if (pclass != NULL)
 8017d30:	683b      	ldr	r3, [r7, #0]
 8017d32:	2b00      	cmp	r3, #0
 8017d34:	d008      	beq.n	8017d48 <USBD_RegisterClass+0x2a>
  {
    /* link the class to the USB Device handle */
    pdev->pClass = pclass;
 8017d36:	687a      	ldr	r2, [r7, #4]
 8017d38:	23ad      	movs	r3, #173	@ 0xad
 8017d3a:	009b      	lsls	r3, r3, #2
 8017d3c:	6839      	ldr	r1, [r7, #0]
 8017d3e:	50d1      	str	r1, [r2, r3]
    status = USBD_OK;
 8017d40:	183b      	adds	r3, r7, r0
 8017d42:	2200      	movs	r2, #0
 8017d44:	701a      	strb	r2, [r3, #0]
 8017d46:	e003      	b.n	8017d50 <USBD_RegisterClass+0x32>
  else
  {
#if (USBD_DEBUG_LEVEL > 1U)
    USBD_ErrLog("Invalid Class handle");
#endif
    status = USBD_FAIL;
 8017d48:	230f      	movs	r3, #15
 8017d4a:	18fb      	adds	r3, r7, r3
 8017d4c:	2202      	movs	r2, #2
 8017d4e:	701a      	strb	r2, [r3, #0]
  }

  return status;
 8017d50:	230f      	movs	r3, #15
 8017d52:	18fb      	adds	r3, r7, r3
 8017d54:	781b      	ldrb	r3, [r3, #0]
}
 8017d56:	0018      	movs	r0, r3
 8017d58:	46bd      	mov	sp, r7
 8017d5a:	b004      	add	sp, #16
 8017d5c:	bd80      	pop	{r7, pc}

08017d5e <USBD_Start>:
  *         Start the USB Device Core.
  * @param  pdev: Device Handle
  * @retval USBD Status
  */
USBD_StatusTypeDef  USBD_Start(USBD_HandleTypeDef *pdev)
{
 8017d5e:	b580      	push	{r7, lr}
 8017d60:	b082      	sub	sp, #8
 8017d62:	af00      	add	r7, sp, #0
 8017d64:	6078      	str	r0, [r7, #4]
  /* Start the low level driver  */
  USBD_LL_Start(pdev);
 8017d66:	687b      	ldr	r3, [r7, #4]
 8017d68:	0018      	movs	r0, r3
 8017d6a:	f001 fd43 	bl	80197f4 <USBD_LL_Start>

  return USBD_OK;
 8017d6e:	2300      	movs	r3, #0
}
 8017d70:	0018      	movs	r0, r3
 8017d72:	46bd      	mov	sp, r7
 8017d74:	b002      	add	sp, #8
 8017d76:	bd80      	pop	{r7, pc}

08017d78 <USBD_RunTestMode>:
*         Launch test mode process
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef  USBD_RunTestMode(USBD_HandleTypeDef  *pdev)
{
 8017d78:	b580      	push	{r7, lr}
 8017d7a:	b082      	sub	sp, #8
 8017d7c:	af00      	add	r7, sp, #0
 8017d7e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument compilation warning */
  UNUSED(pdev);

  return USBD_OK;
 8017d80:	2300      	movs	r3, #0
}
 8017d82:	0018      	movs	r0, r3
 8017d84:	46bd      	mov	sp, r7
 8017d86:	b002      	add	sp, #8
 8017d88:	bd80      	pop	{r7, pc}

08017d8a <USBD_SetClassConfig>:
* @param  cfgidx: configuration index
* @retval status
*/

USBD_StatusTypeDef USBD_SetClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8017d8a:	b590      	push	{r4, r7, lr}
 8017d8c:	b085      	sub	sp, #20
 8017d8e:	af00      	add	r7, sp, #0
 8017d90:	6078      	str	r0, [r7, #4]
 8017d92:	000a      	movs	r2, r1
 8017d94:	1cfb      	adds	r3, r7, #3
 8017d96:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef ret = USBD_FAIL;
 8017d98:	240f      	movs	r4, #15
 8017d9a:	193b      	adds	r3, r7, r4
 8017d9c:	2202      	movs	r2, #2
 8017d9e:	701a      	strb	r2, [r3, #0]

  if (pdev->pClass != NULL)
 8017da0:	687a      	ldr	r2, [r7, #4]
 8017da2:	23ad      	movs	r3, #173	@ 0xad
 8017da4:	009b      	lsls	r3, r3, #2
 8017da6:	58d3      	ldr	r3, [r2, r3]
 8017da8:	2b00      	cmp	r3, #0
 8017daa:	d00e      	beq.n	8017dca <USBD_SetClassConfig+0x40>
  {
    /* Set configuration  and Start the Class*/
    if (pdev->pClass->Init(pdev, cfgidx) == 0U)
 8017dac:	687a      	ldr	r2, [r7, #4]
 8017dae:	23ad      	movs	r3, #173	@ 0xad
 8017db0:	009b      	lsls	r3, r3, #2
 8017db2:	58d3      	ldr	r3, [r2, r3]
 8017db4:	681b      	ldr	r3, [r3, #0]
 8017db6:	1cfa      	adds	r2, r7, #3
 8017db8:	7811      	ldrb	r1, [r2, #0]
 8017dba:	687a      	ldr	r2, [r7, #4]
 8017dbc:	0010      	movs	r0, r2
 8017dbe:	4798      	blx	r3
 8017dc0:	1e03      	subs	r3, r0, #0
 8017dc2:	d102      	bne.n	8017dca <USBD_SetClassConfig+0x40>
    {
      ret = USBD_OK;
 8017dc4:	193b      	adds	r3, r7, r4
 8017dc6:	2200      	movs	r2, #0
 8017dc8:	701a      	strb	r2, [r3, #0]
    }
  }

  return ret;
 8017dca:	230f      	movs	r3, #15
 8017dcc:	18fb      	adds	r3, r7, r3
 8017dce:	781b      	ldrb	r3, [r3, #0]
}
 8017dd0:	0018      	movs	r0, r3
 8017dd2:	46bd      	mov	sp, r7
 8017dd4:	b005      	add	sp, #20
 8017dd6:	bd90      	pop	{r4, r7, pc}

08017dd8 <USBD_ClrClassConfig>:
* @param  pdev: device instance
* @param  cfgidx: configuration index
* @retval status: USBD_StatusTypeDef
*/
USBD_StatusTypeDef USBD_ClrClassConfig(USBD_HandleTypeDef  *pdev, uint8_t cfgidx)
{
 8017dd8:	b580      	push	{r7, lr}
 8017dda:	b082      	sub	sp, #8
 8017ddc:	af00      	add	r7, sp, #0
 8017dde:	6078      	str	r0, [r7, #4]
 8017de0:	000a      	movs	r2, r1
 8017de2:	1cfb      	adds	r3, r7, #3
 8017de4:	701a      	strb	r2, [r3, #0]
  /* Clear configuration  and De-initialize the Class process*/
  pdev->pClass->DeInit(pdev, cfgidx);
 8017de6:	687a      	ldr	r2, [r7, #4]
 8017de8:	23ad      	movs	r3, #173	@ 0xad
 8017dea:	009b      	lsls	r3, r3, #2
 8017dec:	58d3      	ldr	r3, [r2, r3]
 8017dee:	685b      	ldr	r3, [r3, #4]
 8017df0:	1cfa      	adds	r2, r7, #3
 8017df2:	7811      	ldrb	r1, [r2, #0]
 8017df4:	687a      	ldr	r2, [r7, #4]
 8017df6:	0010      	movs	r0, r2
 8017df8:	4798      	blx	r3

  return USBD_OK;
 8017dfa:	2300      	movs	r3, #0
}
 8017dfc:	0018      	movs	r0, r3
 8017dfe:	46bd      	mov	sp, r7
 8017e00:	b002      	add	sp, #8
 8017e02:	bd80      	pop	{r7, pc}

08017e04 <USBD_LL_SetupStage>:
*         Handle the setup stage
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetupStage(USBD_HandleTypeDef *pdev, uint8_t *psetup)
{
 8017e04:	b580      	push	{r7, lr}
 8017e06:	b082      	sub	sp, #8
 8017e08:	af00      	add	r7, sp, #0
 8017e0a:	6078      	str	r0, [r7, #4]
 8017e0c:	6039      	str	r1, [r7, #0]
  USBD_ParseSetupRequest(&pdev->request, psetup);
 8017e0e:	687b      	ldr	r3, [r7, #4]
 8017e10:	22aa      	movs	r2, #170	@ 0xaa
 8017e12:	0092      	lsls	r2, r2, #2
 8017e14:	4694      	mov	ip, r2
 8017e16:	4463      	add	r3, ip
 8017e18:	683a      	ldr	r2, [r7, #0]
 8017e1a:	0011      	movs	r1, r2
 8017e1c:	0018      	movs	r0, r3
 8017e1e:	f001 f810 	bl	8018e42 <USBD_ParseSetupRequest>

  pdev->ep0_state = USBD_EP0_SETUP;
 8017e22:	687a      	ldr	r2, [r7, #4]
 8017e24:	23a5      	movs	r3, #165	@ 0xa5
 8017e26:	009b      	lsls	r3, r3, #2
 8017e28:	2101      	movs	r1, #1
 8017e2a:	50d1      	str	r1, [r2, r3]

  pdev->ep0_data_len = pdev->request.wLength;
 8017e2c:	687b      	ldr	r3, [r7, #4]
 8017e2e:	4a23      	ldr	r2, [pc, #140]	@ (8017ebc <USBD_LL_SetupStage+0xb8>)
 8017e30:	5a9b      	ldrh	r3, [r3, r2]
 8017e32:	0019      	movs	r1, r3
 8017e34:	687a      	ldr	r2, [r7, #4]
 8017e36:	23a6      	movs	r3, #166	@ 0xa6
 8017e38:	009b      	lsls	r3, r3, #2
 8017e3a:	50d1      	str	r1, [r2, r3]

  switch (pdev->request.bmRequest & 0x1FU)
 8017e3c:	687a      	ldr	r2, [r7, #4]
 8017e3e:	23aa      	movs	r3, #170	@ 0xaa
 8017e40:	009b      	lsls	r3, r3, #2
 8017e42:	5cd3      	ldrb	r3, [r2, r3]
 8017e44:	001a      	movs	r2, r3
 8017e46:	231f      	movs	r3, #31
 8017e48:	4013      	ands	r3, r2
 8017e4a:	2b02      	cmp	r3, #2
 8017e4c:	d019      	beq.n	8017e82 <USBD_LL_SetupStage+0x7e>
 8017e4e:	d822      	bhi.n	8017e96 <USBD_LL_SetupStage+0x92>
 8017e50:	2b00      	cmp	r3, #0
 8017e52:	d002      	beq.n	8017e5a <USBD_LL_SetupStage+0x56>
 8017e54:	2b01      	cmp	r3, #1
 8017e56:	d00a      	beq.n	8017e6e <USBD_LL_SetupStage+0x6a>
 8017e58:	e01d      	b.n	8017e96 <USBD_LL_SetupStage+0x92>
  {
    case USB_REQ_RECIPIENT_DEVICE:
      USBD_StdDevReq(pdev, &pdev->request);
 8017e5a:	687b      	ldr	r3, [r7, #4]
 8017e5c:	22aa      	movs	r2, #170	@ 0xaa
 8017e5e:	0092      	lsls	r2, r2, #2
 8017e60:	189a      	adds	r2, r3, r2
 8017e62:	687b      	ldr	r3, [r7, #4]
 8017e64:	0011      	movs	r1, r2
 8017e66:	0018      	movs	r0, r3
 8017e68:	f000 fa10 	bl	801828c <USBD_StdDevReq>
      break;
 8017e6c:	e020      	b.n	8017eb0 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_INTERFACE:
      USBD_StdItfReq(pdev, &pdev->request);
 8017e6e:	687b      	ldr	r3, [r7, #4]
 8017e70:	22aa      	movs	r2, #170	@ 0xaa
 8017e72:	0092      	lsls	r2, r2, #2
 8017e74:	189a      	adds	r2, r3, r2
 8017e76:	687b      	ldr	r3, [r7, #4]
 8017e78:	0011      	movs	r1, r2
 8017e7a:	0018      	movs	r0, r3
 8017e7c:	f000 fa78 	bl	8018370 <USBD_StdItfReq>
      break;
 8017e80:	e016      	b.n	8017eb0 <USBD_LL_SetupStage+0xac>

    case USB_REQ_RECIPIENT_ENDPOINT:
      USBD_StdEPReq(pdev, &pdev->request);
 8017e82:	687b      	ldr	r3, [r7, #4]
 8017e84:	22aa      	movs	r2, #170	@ 0xaa
 8017e86:	0092      	lsls	r2, r2, #2
 8017e88:	189a      	adds	r2, r3, r2
 8017e8a:	687b      	ldr	r3, [r7, #4]
 8017e8c:	0011      	movs	r1, r2
 8017e8e:	0018      	movs	r0, r3
 8017e90:	f000 fac5 	bl	801841e <USBD_StdEPReq>
      break;
 8017e94:	e00c      	b.n	8017eb0 <USBD_LL_SetupStage+0xac>

    default:
      USBD_LL_StallEP(pdev, (pdev->request.bmRequest & 0x80U));
 8017e96:	687a      	ldr	r2, [r7, #4]
 8017e98:	23aa      	movs	r3, #170	@ 0xaa
 8017e9a:	009b      	lsls	r3, r3, #2
 8017e9c:	5cd3      	ldrb	r3, [r2, r3]
 8017e9e:	227f      	movs	r2, #127	@ 0x7f
 8017ea0:	4393      	bics	r3, r2
 8017ea2:	b2da      	uxtb	r2, r3
 8017ea4:	687b      	ldr	r3, [r7, #4]
 8017ea6:	0011      	movs	r1, r2
 8017ea8:	0018      	movs	r0, r3
 8017eaa:	f001 fd2a 	bl	8019902 <USBD_LL_StallEP>
      break;
 8017eae:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 8017eb0:	2300      	movs	r3, #0
}
 8017eb2:	0018      	movs	r0, r3
 8017eb4:	46bd      	mov	sp, r7
 8017eb6:	b002      	add	sp, #8
 8017eb8:	bd80      	pop	{r7, pc}
 8017eba:	46c0      	nop			@ (mov r8, r8)
 8017ebc:	000002ae 	.word	0x000002ae

08017ec0 <USBD_LL_DataOutStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataOutStage(USBD_HandleTypeDef *pdev,
                                        uint8_t epnum, uint8_t *pdata)
{
 8017ec0:	b580      	push	{r7, lr}
 8017ec2:	b086      	sub	sp, #24
 8017ec4:	af00      	add	r7, sp, #0
 8017ec6:	60f8      	str	r0, [r7, #12]
 8017ec8:	607a      	str	r2, [r7, #4]
 8017eca:	200b      	movs	r0, #11
 8017ecc:	183b      	adds	r3, r7, r0
 8017ece:	1c0a      	adds	r2, r1, #0
 8017ed0:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8017ed2:	183b      	adds	r3, r7, r0
 8017ed4:	781b      	ldrb	r3, [r3, #0]
 8017ed6:	2b00      	cmp	r3, #0
 8017ed8:	d154      	bne.n	8017f84 <USBD_LL_DataOutStage+0xc4>
  {
    pep = &pdev->ep_out[0];
 8017eda:	68fb      	ldr	r3, [r7, #12]
 8017edc:	3355      	adds	r3, #85	@ 0x55
 8017ede:	33ff      	adds	r3, #255	@ 0xff
 8017ee0:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_OUT)
 8017ee2:	68fa      	ldr	r2, [r7, #12]
 8017ee4:	23a5      	movs	r3, #165	@ 0xa5
 8017ee6:	009b      	lsls	r3, r3, #2
 8017ee8:	58d3      	ldr	r3, [r2, r3]
 8017eea:	2b03      	cmp	r3, #3
 8017eec:	d139      	bne.n	8017f62 <USBD_LL_DataOutStage+0xa2>
    {
      if (pep->rem_length > pep->maxpacket)
 8017eee:	697b      	ldr	r3, [r7, #20]
 8017ef0:	68da      	ldr	r2, [r3, #12]
 8017ef2:	697b      	ldr	r3, [r7, #20]
 8017ef4:	691b      	ldr	r3, [r3, #16]
 8017ef6:	429a      	cmp	r2, r3
 8017ef8:	d919      	bls.n	8017f2e <USBD_LL_DataOutStage+0x6e>
      {
        pep->rem_length -= pep->maxpacket;
 8017efa:	697b      	ldr	r3, [r7, #20]
 8017efc:	68da      	ldr	r2, [r3, #12]
 8017efe:	697b      	ldr	r3, [r7, #20]
 8017f00:	691b      	ldr	r3, [r3, #16]
 8017f02:	1ad2      	subs	r2, r2, r3
 8017f04:	697b      	ldr	r3, [r7, #20]
 8017f06:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueRx(pdev, pdata,
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8017f08:	697b      	ldr	r3, [r7, #20]
 8017f0a:	68da      	ldr	r2, [r3, #12]
 8017f0c:	697b      	ldr	r3, [r7, #20]
 8017f0e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8017f10:	429a      	cmp	r2, r3
 8017f12:	d203      	bcs.n	8017f1c <USBD_LL_DataOutStage+0x5c>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8017f14:	697b      	ldr	r3, [r7, #20]
 8017f16:	68db      	ldr	r3, [r3, #12]
        USBD_CtlContinueRx(pdev, pdata,
 8017f18:	b29b      	uxth	r3, r3
 8017f1a:	e002      	b.n	8017f22 <USBD_LL_DataOutStage+0x62>
                           (uint16_t)MIN(pep->rem_length, pep->maxpacket));
 8017f1c:	697b      	ldr	r3, [r7, #20]
 8017f1e:	691b      	ldr	r3, [r3, #16]
        USBD_CtlContinueRx(pdev, pdata,
 8017f20:	b29b      	uxth	r3, r3
 8017f22:	6879      	ldr	r1, [r7, #4]
 8017f24:	68f8      	ldr	r0, [r7, #12]
 8017f26:	001a      	movs	r2, r3
 8017f28:	f001 f898 	bl	801905c <USBD_CtlContinueRx>
 8017f2c:	e045      	b.n	8017fba <USBD_LL_DataOutStage+0xfa>
      }
      else
      {
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8017f2e:	68fa      	ldr	r2, [r7, #12]
 8017f30:	23ad      	movs	r3, #173	@ 0xad
 8017f32:	009b      	lsls	r3, r3, #2
 8017f34:	58d3      	ldr	r3, [r2, r3]
 8017f36:	691b      	ldr	r3, [r3, #16]
 8017f38:	2b00      	cmp	r3, #0
 8017f3a:	d00d      	beq.n	8017f58 <USBD_LL_DataOutStage+0x98>
            (pdev->dev_state == USBD_STATE_CONFIGURED))
 8017f3c:	68fa      	ldr	r2, [r7, #12]
 8017f3e:	23a7      	movs	r3, #167	@ 0xa7
 8017f40:	009b      	lsls	r3, r3, #2
 8017f42:	5cd3      	ldrb	r3, [r2, r3]
        if ((pdev->pClass->EP0_RxReady != NULL) &&
 8017f44:	2b03      	cmp	r3, #3
 8017f46:	d107      	bne.n	8017f58 <USBD_LL_DataOutStage+0x98>
        {
          pdev->pClass->EP0_RxReady(pdev);
 8017f48:	68fa      	ldr	r2, [r7, #12]
 8017f4a:	23ad      	movs	r3, #173	@ 0xad
 8017f4c:	009b      	lsls	r3, r3, #2
 8017f4e:	58d3      	ldr	r3, [r2, r3]
 8017f50:	691b      	ldr	r3, [r3, #16]
 8017f52:	68fa      	ldr	r2, [r7, #12]
 8017f54:	0010      	movs	r0, r2
 8017f56:	4798      	blx	r3
        }
        USBD_CtlSendStatus(pdev);
 8017f58:	68fb      	ldr	r3, [r7, #12]
 8017f5a:	0018      	movs	r0, r3
 8017f5c:	f001 f891 	bl	8019082 <USBD_CtlSendStatus>
 8017f60:	e02b      	b.n	8017fba <USBD_LL_DataOutStage+0xfa>
      }
    }
    else
    {
      if (pdev->ep0_state == USBD_EP0_STATUS_OUT)
 8017f62:	68fa      	ldr	r2, [r7, #12]
 8017f64:	23a5      	movs	r3, #165	@ 0xa5
 8017f66:	009b      	lsls	r3, r3, #2
 8017f68:	58d3      	ldr	r3, [r2, r3]
 8017f6a:	2b05      	cmp	r3, #5
 8017f6c:	d125      	bne.n	8017fba <USBD_LL_DataOutStage+0xfa>
      {
        /*
         * STATUS PHASE completed, update ep0_state to idle
         */
        pdev->ep0_state = USBD_EP0_IDLE;
 8017f6e:	68fa      	ldr	r2, [r7, #12]
 8017f70:	23a5      	movs	r3, #165	@ 0xa5
 8017f72:	009b      	lsls	r3, r3, #2
 8017f74:	2100      	movs	r1, #0
 8017f76:	50d1      	str	r1, [r2, r3]
        USBD_LL_StallEP(pdev, 0U);
 8017f78:	68fb      	ldr	r3, [r7, #12]
 8017f7a:	2100      	movs	r1, #0
 8017f7c:	0018      	movs	r0, r3
 8017f7e:	f001 fcc0 	bl	8019902 <USBD_LL_StallEP>
 8017f82:	e01a      	b.n	8017fba <USBD_LL_DataOutStage+0xfa>
      }
    }
  }
  else if ((pdev->pClass->DataOut != NULL) &&
 8017f84:	68fa      	ldr	r2, [r7, #12]
 8017f86:	23ad      	movs	r3, #173	@ 0xad
 8017f88:	009b      	lsls	r3, r3, #2
 8017f8a:	58d3      	ldr	r3, [r2, r3]
 8017f8c:	699b      	ldr	r3, [r3, #24]
 8017f8e:	2b00      	cmp	r3, #0
 8017f90:	d011      	beq.n	8017fb6 <USBD_LL_DataOutStage+0xf6>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 8017f92:	68fa      	ldr	r2, [r7, #12]
 8017f94:	23a7      	movs	r3, #167	@ 0xa7
 8017f96:	009b      	lsls	r3, r3, #2
 8017f98:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataOut != NULL) &&
 8017f9a:	2b03      	cmp	r3, #3
 8017f9c:	d10b      	bne.n	8017fb6 <USBD_LL_DataOutStage+0xf6>
  {
    pdev->pClass->DataOut(pdev, epnum);
 8017f9e:	68fa      	ldr	r2, [r7, #12]
 8017fa0:	23ad      	movs	r3, #173	@ 0xad
 8017fa2:	009b      	lsls	r3, r3, #2
 8017fa4:	58d3      	ldr	r3, [r2, r3]
 8017fa6:	699b      	ldr	r3, [r3, #24]
 8017fa8:	220b      	movs	r2, #11
 8017faa:	18ba      	adds	r2, r7, r2
 8017fac:	7811      	ldrb	r1, [r2, #0]
 8017fae:	68fa      	ldr	r2, [r7, #12]
 8017fb0:	0010      	movs	r0, r2
 8017fb2:	4798      	blx	r3
 8017fb4:	e001      	b.n	8017fba <USBD_LL_DataOutStage+0xfa>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8017fb6:	2302      	movs	r3, #2
 8017fb8:	e000      	b.n	8017fbc <USBD_LL_DataOutStage+0xfc>
  }

  return USBD_OK;
 8017fba:	2300      	movs	r3, #0
}
 8017fbc:	0018      	movs	r0, r3
 8017fbe:	46bd      	mov	sp, r7
 8017fc0:	b006      	add	sp, #24
 8017fc2:	bd80      	pop	{r7, pc}

08017fc4 <USBD_LL_DataInStage>:
* @param  epnum: endpoint index
* @retval status
*/
USBD_StatusTypeDef USBD_LL_DataInStage(USBD_HandleTypeDef *pdev,
                                       uint8_t epnum, uint8_t *pdata)
{
 8017fc4:	b580      	push	{r7, lr}
 8017fc6:	b086      	sub	sp, #24
 8017fc8:	af00      	add	r7, sp, #0
 8017fca:	60f8      	str	r0, [r7, #12]
 8017fcc:	607a      	str	r2, [r7, #4]
 8017fce:	200b      	movs	r0, #11
 8017fd0:	183b      	adds	r3, r7, r0
 8017fd2:	1c0a      	adds	r2, r1, #0
 8017fd4:	701a      	strb	r2, [r3, #0]
  USBD_EndpointTypeDef *pep;

  if (epnum == 0U)
 8017fd6:	183b      	adds	r3, r7, r0
 8017fd8:	781b      	ldrb	r3, [r3, #0]
 8017fda:	2b00      	cmp	r3, #0
 8017fdc:	d000      	beq.n	8017fe0 <USBD_LL_DataInStage+0x1c>
 8017fde:	e08e      	b.n	80180fe <USBD_LL_DataInStage+0x13a>
  {
    pep = &pdev->ep_in[0];
 8017fe0:	68fb      	ldr	r3, [r7, #12]
 8017fe2:	3314      	adds	r3, #20
 8017fe4:	617b      	str	r3, [r7, #20]

    if (pdev->ep0_state == USBD_EP0_DATA_IN)
 8017fe6:	68fa      	ldr	r2, [r7, #12]
 8017fe8:	23a5      	movs	r3, #165	@ 0xa5
 8017fea:	009b      	lsls	r3, r3, #2
 8017fec:	58d3      	ldr	r3, [r2, r3]
 8017fee:	2b02      	cmp	r3, #2
 8017ff0:	d164      	bne.n	80180bc <USBD_LL_DataInStage+0xf8>
    {
      if (pep->rem_length > pep->maxpacket)
 8017ff2:	697b      	ldr	r3, [r7, #20]
 8017ff4:	68da      	ldr	r2, [r3, #12]
 8017ff6:	697b      	ldr	r3, [r7, #20]
 8017ff8:	691b      	ldr	r3, [r3, #16]
 8017ffa:	429a      	cmp	r2, r3
 8017ffc:	d915      	bls.n	801802a <USBD_LL_DataInStage+0x66>
      {
        pep->rem_length -= pep->maxpacket;
 8017ffe:	697b      	ldr	r3, [r7, #20]
 8018000:	68da      	ldr	r2, [r3, #12]
 8018002:	697b      	ldr	r3, [r7, #20]
 8018004:	691b      	ldr	r3, [r3, #16]
 8018006:	1ad2      	subs	r2, r2, r3
 8018008:	697b      	ldr	r3, [r7, #20]
 801800a:	60da      	str	r2, [r3, #12]

        USBD_CtlContinueSendData(pdev, pdata, (uint16_t)pep->rem_length);
 801800c:	697b      	ldr	r3, [r7, #20]
 801800e:	68db      	ldr	r3, [r3, #12]
 8018010:	b29a      	uxth	r2, r3
 8018012:	6879      	ldr	r1, [r7, #4]
 8018014:	68fb      	ldr	r3, [r7, #12]
 8018016:	0018      	movs	r0, r3
 8018018:	f000 ffe9 	bl	8018fee <USBD_CtlContinueSendData>

        /* Prepare endpoint for premature end of transfer */
        USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 801801c:	68f8      	ldr	r0, [r7, #12]
 801801e:	2300      	movs	r3, #0
 8018020:	2200      	movs	r2, #0
 8018022:	2100      	movs	r1, #0
 8018024:	f001 fd56 	bl	8019ad4 <USBD_LL_PrepareReceive>
 8018028:	e059      	b.n	80180de <USBD_LL_DataInStage+0x11a>
      }
      else
      {
        /* last packet is MPS multiple, so send ZLP packet */
        if ((pep->total_length % pep->maxpacket == 0U) &&
 801802a:	697b      	ldr	r3, [r7, #20]
 801802c:	689a      	ldr	r2, [r3, #8]
 801802e:	697b      	ldr	r3, [r7, #20]
 8018030:	691b      	ldr	r3, [r3, #16]
 8018032:	0019      	movs	r1, r3
 8018034:	0010      	movs	r0, r2
 8018036:	f7e8 f93b 	bl	80002b0 <__aeabi_uidivmod>
 801803a:	1e0b      	subs	r3, r1, #0
 801803c:	d11f      	bne.n	801807e <USBD_LL_DataInStage+0xba>
            (pep->total_length >= pep->maxpacket) &&
 801803e:	697b      	ldr	r3, [r7, #20]
 8018040:	689a      	ldr	r2, [r3, #8]
 8018042:	697b      	ldr	r3, [r7, #20]
 8018044:	691b      	ldr	r3, [r3, #16]
        if ((pep->total_length % pep->maxpacket == 0U) &&
 8018046:	429a      	cmp	r2, r3
 8018048:	d319      	bcc.n	801807e <USBD_LL_DataInStage+0xba>
            (pep->total_length < pdev->ep0_data_len))
 801804a:	697b      	ldr	r3, [r7, #20]
 801804c:	689a      	ldr	r2, [r3, #8]
 801804e:	68f9      	ldr	r1, [r7, #12]
 8018050:	23a6      	movs	r3, #166	@ 0xa6
 8018052:	009b      	lsls	r3, r3, #2
 8018054:	58cb      	ldr	r3, [r1, r3]
            (pep->total_length >= pep->maxpacket) &&
 8018056:	429a      	cmp	r2, r3
 8018058:	d211      	bcs.n	801807e <USBD_LL_DataInStage+0xba>
        {
          USBD_CtlContinueSendData(pdev, NULL, 0U);
 801805a:	68fb      	ldr	r3, [r7, #12]
 801805c:	2200      	movs	r2, #0
 801805e:	2100      	movs	r1, #0
 8018060:	0018      	movs	r0, r3
 8018062:	f000 ffc4 	bl	8018fee <USBD_CtlContinueSendData>
          pdev->ep0_data_len = 0U;
 8018066:	68fa      	ldr	r2, [r7, #12]
 8018068:	23a6      	movs	r3, #166	@ 0xa6
 801806a:	009b      	lsls	r3, r3, #2
 801806c:	2100      	movs	r1, #0
 801806e:	50d1      	str	r1, [r2, r3]

          /* Prepare endpoint for premature end of transfer */
          USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 8018070:	68f8      	ldr	r0, [r7, #12]
 8018072:	2300      	movs	r3, #0
 8018074:	2200      	movs	r2, #0
 8018076:	2100      	movs	r1, #0
 8018078:	f001 fd2c 	bl	8019ad4 <USBD_LL_PrepareReceive>
 801807c:	e02f      	b.n	80180de <USBD_LL_DataInStage+0x11a>
        }
        else
        {
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 801807e:	68fa      	ldr	r2, [r7, #12]
 8018080:	23ad      	movs	r3, #173	@ 0xad
 8018082:	009b      	lsls	r3, r3, #2
 8018084:	58d3      	ldr	r3, [r2, r3]
 8018086:	68db      	ldr	r3, [r3, #12]
 8018088:	2b00      	cmp	r3, #0
 801808a:	d00d      	beq.n	80180a8 <USBD_LL_DataInStage+0xe4>
              (pdev->dev_state == USBD_STATE_CONFIGURED))
 801808c:	68fa      	ldr	r2, [r7, #12]
 801808e:	23a7      	movs	r3, #167	@ 0xa7
 8018090:	009b      	lsls	r3, r3, #2
 8018092:	5cd3      	ldrb	r3, [r2, r3]
          if ((pdev->pClass->EP0_TxSent != NULL) &&
 8018094:	2b03      	cmp	r3, #3
 8018096:	d107      	bne.n	80180a8 <USBD_LL_DataInStage+0xe4>
          {
            pdev->pClass->EP0_TxSent(pdev);
 8018098:	68fa      	ldr	r2, [r7, #12]
 801809a:	23ad      	movs	r3, #173	@ 0xad
 801809c:	009b      	lsls	r3, r3, #2
 801809e:	58d3      	ldr	r3, [r2, r3]
 80180a0:	68db      	ldr	r3, [r3, #12]
 80180a2:	68fa      	ldr	r2, [r7, #12]
 80180a4:	0010      	movs	r0, r2
 80180a6:	4798      	blx	r3
          }
          USBD_LL_StallEP(pdev, 0x80U);
 80180a8:	68fb      	ldr	r3, [r7, #12]
 80180aa:	2180      	movs	r1, #128	@ 0x80
 80180ac:	0018      	movs	r0, r3
 80180ae:	f001 fc28 	bl	8019902 <USBD_LL_StallEP>
          USBD_CtlReceiveStatus(pdev);
 80180b2:	68fb      	ldr	r3, [r7, #12]
 80180b4:	0018      	movs	r0, r3
 80180b6:	f000 fff8 	bl	80190aa <USBD_CtlReceiveStatus>
 80180ba:	e010      	b.n	80180de <USBD_LL_DataInStage+0x11a>
        }
      }
    }
    else
    {
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80180bc:	68fa      	ldr	r2, [r7, #12]
 80180be:	23a5      	movs	r3, #165	@ 0xa5
 80180c0:	009b      	lsls	r3, r3, #2
 80180c2:	58d3      	ldr	r3, [r2, r3]
 80180c4:	2b04      	cmp	r3, #4
 80180c6:	d005      	beq.n	80180d4 <USBD_LL_DataInStage+0x110>
          (pdev->ep0_state == USBD_EP0_IDLE))
 80180c8:	68fa      	ldr	r2, [r7, #12]
 80180ca:	23a5      	movs	r3, #165	@ 0xa5
 80180cc:	009b      	lsls	r3, r3, #2
 80180ce:	58d3      	ldr	r3, [r2, r3]
      if ((pdev->ep0_state == USBD_EP0_STATUS_IN) ||
 80180d0:	2b00      	cmp	r3, #0
 80180d2:	d104      	bne.n	80180de <USBD_LL_DataInStage+0x11a>
      {
        USBD_LL_StallEP(pdev, 0x80U);
 80180d4:	68fb      	ldr	r3, [r7, #12]
 80180d6:	2180      	movs	r1, #128	@ 0x80
 80180d8:	0018      	movs	r0, r3
 80180da:	f001 fc12 	bl	8019902 <USBD_LL_StallEP>
      }
    }

    if (pdev->dev_test_mode == 1U)
 80180de:	68fa      	ldr	r2, [r7, #12]
 80180e0:	23a8      	movs	r3, #168	@ 0xa8
 80180e2:	009b      	lsls	r3, r3, #2
 80180e4:	5cd3      	ldrb	r3, [r2, r3]
 80180e6:	2b01      	cmp	r3, #1
 80180e8:	d124      	bne.n	8018134 <USBD_LL_DataInStage+0x170>
    {
      USBD_RunTestMode(pdev);
 80180ea:	68fb      	ldr	r3, [r7, #12]
 80180ec:	0018      	movs	r0, r3
 80180ee:	f7ff fe43 	bl	8017d78 <USBD_RunTestMode>
      pdev->dev_test_mode = 0U;
 80180f2:	68fa      	ldr	r2, [r7, #12]
 80180f4:	23a8      	movs	r3, #168	@ 0xa8
 80180f6:	009b      	lsls	r3, r3, #2
 80180f8:	2100      	movs	r1, #0
 80180fa:	54d1      	strb	r1, [r2, r3]
 80180fc:	e01a      	b.n	8018134 <USBD_LL_DataInStage+0x170>
    }
  }
  else if ((pdev->pClass->DataIn != NULL) &&
 80180fe:	68fa      	ldr	r2, [r7, #12]
 8018100:	23ad      	movs	r3, #173	@ 0xad
 8018102:	009b      	lsls	r3, r3, #2
 8018104:	58d3      	ldr	r3, [r2, r3]
 8018106:	695b      	ldr	r3, [r3, #20]
 8018108:	2b00      	cmp	r3, #0
 801810a:	d011      	beq.n	8018130 <USBD_LL_DataInStage+0x16c>
           (pdev->dev_state == USBD_STATE_CONFIGURED))
 801810c:	68fa      	ldr	r2, [r7, #12]
 801810e:	23a7      	movs	r3, #167	@ 0xa7
 8018110:	009b      	lsls	r3, r3, #2
 8018112:	5cd3      	ldrb	r3, [r2, r3]
  else if ((pdev->pClass->DataIn != NULL) &&
 8018114:	2b03      	cmp	r3, #3
 8018116:	d10b      	bne.n	8018130 <USBD_LL_DataInStage+0x16c>
  {
    pdev->pClass->DataIn(pdev, epnum);
 8018118:	68fa      	ldr	r2, [r7, #12]
 801811a:	23ad      	movs	r3, #173	@ 0xad
 801811c:	009b      	lsls	r3, r3, #2
 801811e:	58d3      	ldr	r3, [r2, r3]
 8018120:	695b      	ldr	r3, [r3, #20]
 8018122:	220b      	movs	r2, #11
 8018124:	18ba      	adds	r2, r7, r2
 8018126:	7811      	ldrb	r1, [r2, #0]
 8018128:	68fa      	ldr	r2, [r7, #12]
 801812a:	0010      	movs	r0, r2
 801812c:	4798      	blx	r3
 801812e:	e001      	b.n	8018134 <USBD_LL_DataInStage+0x170>
  }
  else
  {
    /* should never be in this condition */
    return USBD_FAIL;
 8018130:	2302      	movs	r3, #2
 8018132:	e000      	b.n	8018136 <USBD_LL_DataInStage+0x172>
  }

  return USBD_OK;
 8018134:	2300      	movs	r3, #0
}
 8018136:	0018      	movs	r0, r3
 8018138:	46bd      	mov	sp, r7
 801813a:	b006      	add	sp, #24
 801813c:	bd80      	pop	{r7, pc}

0801813e <USBD_LL_Reset>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Reset(USBD_HandleTypeDef *pdev)
{
 801813e:	b580      	push	{r7, lr}
 8018140:	b082      	sub	sp, #8
 8018142:	af00      	add	r7, sp, #0
 8018144:	6078      	str	r0, [r7, #4]
  /* Open EP0 OUT */
  USBD_LL_OpenEP(pdev, 0x00U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8018146:	6878      	ldr	r0, [r7, #4]
 8018148:	2340      	movs	r3, #64	@ 0x40
 801814a:	2200      	movs	r2, #0
 801814c:	2100      	movs	r1, #0
 801814e:	f001 fb76 	bl	801983e <USBD_LL_OpenEP>
  pdev->ep_out[0x00U & 0xFU].is_used = 1U;
 8018152:	687a      	ldr	r2, [r7, #4]
 8018154:	23ac      	movs	r3, #172	@ 0xac
 8018156:	005b      	lsls	r3, r3, #1
 8018158:	2101      	movs	r1, #1
 801815a:	50d1      	str	r1, [r2, r3]

  pdev->ep_out[0].maxpacket = USB_MAX_EP0_SIZE;
 801815c:	687a      	ldr	r2, [r7, #4]
 801815e:	23b2      	movs	r3, #178	@ 0xb2
 8018160:	005b      	lsls	r3, r3, #1
 8018162:	2140      	movs	r1, #64	@ 0x40
 8018164:	50d1      	str	r1, [r2, r3]

  /* Open EP0 IN */
  USBD_LL_OpenEP(pdev, 0x80U, USBD_EP_TYPE_CTRL, USB_MAX_EP0_SIZE);
 8018166:	6878      	ldr	r0, [r7, #4]
 8018168:	2340      	movs	r3, #64	@ 0x40
 801816a:	2200      	movs	r2, #0
 801816c:	2180      	movs	r1, #128	@ 0x80
 801816e:	f001 fb66 	bl	801983e <USBD_LL_OpenEP>
  pdev->ep_in[0x80U & 0xFU].is_used = 1U;
 8018172:	687b      	ldr	r3, [r7, #4]
 8018174:	2201      	movs	r2, #1
 8018176:	619a      	str	r2, [r3, #24]

  pdev->ep_in[0].maxpacket = USB_MAX_EP0_SIZE;
 8018178:	687b      	ldr	r3, [r7, #4]
 801817a:	2240      	movs	r2, #64	@ 0x40
 801817c:	625a      	str	r2, [r3, #36]	@ 0x24

  /* Upon Reset call user call back */
  pdev->dev_state = USBD_STATE_DEFAULT;
 801817e:	687a      	ldr	r2, [r7, #4]
 8018180:	23a7      	movs	r3, #167	@ 0xa7
 8018182:	009b      	lsls	r3, r3, #2
 8018184:	2101      	movs	r1, #1
 8018186:	54d1      	strb	r1, [r2, r3]
  pdev->ep0_state = USBD_EP0_IDLE;
 8018188:	687a      	ldr	r2, [r7, #4]
 801818a:	23a5      	movs	r3, #165	@ 0xa5
 801818c:	009b      	lsls	r3, r3, #2
 801818e:	2100      	movs	r1, #0
 8018190:	50d1      	str	r1, [r2, r3]
  pdev->dev_config = 0U;
 8018192:	687b      	ldr	r3, [r7, #4]
 8018194:	2200      	movs	r2, #0
 8018196:	605a      	str	r2, [r3, #4]
  pdev->dev_remote_wakeup = 0U;
 8018198:	687a      	ldr	r2, [r7, #4]
 801819a:	23a9      	movs	r3, #169	@ 0xa9
 801819c:	009b      	lsls	r3, r3, #2
 801819e:	2100      	movs	r1, #0
 80181a0:	50d1      	str	r1, [r2, r3]

  if (pdev->pClassData)
 80181a2:	687a      	ldr	r2, [r7, #4]
 80181a4:	23ae      	movs	r3, #174	@ 0xae
 80181a6:	009b      	lsls	r3, r3, #2
 80181a8:	58d3      	ldr	r3, [r2, r3]
 80181aa:	2b00      	cmp	r3, #0
 80181ac:	d00a      	beq.n	80181c4 <USBD_LL_Reset+0x86>
  {
    pdev->pClass->DeInit(pdev, (uint8_t)pdev->dev_config);
 80181ae:	687a      	ldr	r2, [r7, #4]
 80181b0:	23ad      	movs	r3, #173	@ 0xad
 80181b2:	009b      	lsls	r3, r3, #2
 80181b4:	58d3      	ldr	r3, [r2, r3]
 80181b6:	685a      	ldr	r2, [r3, #4]
 80181b8:	687b      	ldr	r3, [r7, #4]
 80181ba:	685b      	ldr	r3, [r3, #4]
 80181bc:	b2d9      	uxtb	r1, r3
 80181be:	687b      	ldr	r3, [r7, #4]
 80181c0:	0018      	movs	r0, r3
 80181c2:	4790      	blx	r2
  }

  return USBD_OK;
 80181c4:	2300      	movs	r3, #0
}
 80181c6:	0018      	movs	r0, r3
 80181c8:	46bd      	mov	sp, r7
 80181ca:	b002      	add	sp, #8
 80181cc:	bd80      	pop	{r7, pc}

080181ce <USBD_LL_SetSpeed>:
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_LL_SetSpeed(USBD_HandleTypeDef *pdev,
                                    USBD_SpeedTypeDef speed)
{
 80181ce:	b580      	push	{r7, lr}
 80181d0:	b082      	sub	sp, #8
 80181d2:	af00      	add	r7, sp, #0
 80181d4:	6078      	str	r0, [r7, #4]
 80181d6:	000a      	movs	r2, r1
 80181d8:	1cfb      	adds	r3, r7, #3
 80181da:	701a      	strb	r2, [r3, #0]
  pdev->dev_speed = speed;
 80181dc:	687b      	ldr	r3, [r7, #4]
 80181de:	1cfa      	adds	r2, r7, #3
 80181e0:	7812      	ldrb	r2, [r2, #0]
 80181e2:	741a      	strb	r2, [r3, #16]

  return USBD_OK;
 80181e4:	2300      	movs	r3, #0
}
 80181e6:	0018      	movs	r0, r3
 80181e8:	46bd      	mov	sp, r7
 80181ea:	b002      	add	sp, #8
 80181ec:	bd80      	pop	{r7, pc}
	...

080181f0 <USBD_LL_Suspend>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Suspend(USBD_HandleTypeDef *pdev)
{
 80181f0:	b580      	push	{r7, lr}
 80181f2:	b082      	sub	sp, #8
 80181f4:	af00      	add	r7, sp, #0
 80181f6:	6078      	str	r0, [r7, #4]
  pdev->dev_old_state =  pdev->dev_state;
 80181f8:	687a      	ldr	r2, [r7, #4]
 80181fa:	23a7      	movs	r3, #167	@ 0xa7
 80181fc:	009b      	lsls	r3, r3, #2
 80181fe:	5cd1      	ldrb	r1, [r2, r3]
 8018200:	687b      	ldr	r3, [r7, #4]
 8018202:	4a06      	ldr	r2, [pc, #24]	@ (801821c <USBD_LL_Suspend+0x2c>)
 8018204:	5499      	strb	r1, [r3, r2]
  pdev->dev_state  = USBD_STATE_SUSPENDED;
 8018206:	687a      	ldr	r2, [r7, #4]
 8018208:	23a7      	movs	r3, #167	@ 0xa7
 801820a:	009b      	lsls	r3, r3, #2
 801820c:	2104      	movs	r1, #4
 801820e:	54d1      	strb	r1, [r2, r3]

  return USBD_OK;
 8018210:	2300      	movs	r3, #0
}
 8018212:	0018      	movs	r0, r3
 8018214:	46bd      	mov	sp, r7
 8018216:	b002      	add	sp, #8
 8018218:	bd80      	pop	{r7, pc}
 801821a:	46c0      	nop			@ (mov r8, r8)
 801821c:	0000029d 	.word	0x0000029d

08018220 <USBD_LL_Resume>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_Resume(USBD_HandleTypeDef *pdev)
{
 8018220:	b580      	push	{r7, lr}
 8018222:	b082      	sub	sp, #8
 8018224:	af00      	add	r7, sp, #0
 8018226:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_SUSPENDED)
 8018228:	687a      	ldr	r2, [r7, #4]
 801822a:	23a7      	movs	r3, #167	@ 0xa7
 801822c:	009b      	lsls	r3, r3, #2
 801822e:	5cd3      	ldrb	r3, [r2, r3]
 8018230:	2b04      	cmp	r3, #4
 8018232:	d106      	bne.n	8018242 <USBD_LL_Resume+0x22>
  {
    pdev->dev_state = pdev->dev_old_state;
 8018234:	687b      	ldr	r3, [r7, #4]
 8018236:	4a05      	ldr	r2, [pc, #20]	@ (801824c <USBD_LL_Resume+0x2c>)
 8018238:	5c99      	ldrb	r1, [r3, r2]
 801823a:	687a      	ldr	r2, [r7, #4]
 801823c:	23a7      	movs	r3, #167	@ 0xa7
 801823e:	009b      	lsls	r3, r3, #2
 8018240:	54d1      	strb	r1, [r2, r3]
  }

  return USBD_OK;
 8018242:	2300      	movs	r3, #0
}
 8018244:	0018      	movs	r0, r3
 8018246:	46bd      	mov	sp, r7
 8018248:	b002      	add	sp, #8
 801824a:	bd80      	pop	{r7, pc}
 801824c:	0000029d 	.word	0x0000029d

08018250 <USBD_LL_SOF>:
* @param  pdev: device instance
* @retval status
*/

USBD_StatusTypeDef USBD_LL_SOF(USBD_HandleTypeDef *pdev)
{
 8018250:	b580      	push	{r7, lr}
 8018252:	b082      	sub	sp, #8
 8018254:	af00      	add	r7, sp, #0
 8018256:	6078      	str	r0, [r7, #4]
  if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018258:	687a      	ldr	r2, [r7, #4]
 801825a:	23a7      	movs	r3, #167	@ 0xa7
 801825c:	009b      	lsls	r3, r3, #2
 801825e:	5cd3      	ldrb	r3, [r2, r3]
 8018260:	2b03      	cmp	r3, #3
 8018262:	d10e      	bne.n	8018282 <USBD_LL_SOF+0x32>
  {
    if (pdev->pClass->SOF != NULL)
 8018264:	687a      	ldr	r2, [r7, #4]
 8018266:	23ad      	movs	r3, #173	@ 0xad
 8018268:	009b      	lsls	r3, r3, #2
 801826a:	58d3      	ldr	r3, [r2, r3]
 801826c:	69db      	ldr	r3, [r3, #28]
 801826e:	2b00      	cmp	r3, #0
 8018270:	d007      	beq.n	8018282 <USBD_LL_SOF+0x32>
    {
      pdev->pClass->SOF(pdev);
 8018272:	687a      	ldr	r2, [r7, #4]
 8018274:	23ad      	movs	r3, #173	@ 0xad
 8018276:	009b      	lsls	r3, r3, #2
 8018278:	58d3      	ldr	r3, [r2, r3]
 801827a:	69db      	ldr	r3, [r3, #28]
 801827c:	687a      	ldr	r2, [r7, #4]
 801827e:	0010      	movs	r0, r2
 8018280:	4798      	blx	r3
    }
  }

  return USBD_OK;
 8018282:	2300      	movs	r3, #0
}
 8018284:	0018      	movs	r0, r3
 8018286:	46bd      	mov	sp, r7
 8018288:	b002      	add	sp, #8
 801828a:	bd80      	pop	{r7, pc}

0801828c <USBD_StdDevReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdDevReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef *req)
{
 801828c:	b580      	push	{r7, lr}
 801828e:	b084      	sub	sp, #16
 8018290:	af00      	add	r7, sp, #0
 8018292:	6078      	str	r0, [r7, #4]
 8018294:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 8018296:	230f      	movs	r3, #15
 8018298:	18fb      	adds	r3, r7, r3
 801829a:	2200      	movs	r2, #0
 801829c:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801829e:	683b      	ldr	r3, [r7, #0]
 80182a0:	781b      	ldrb	r3, [r3, #0]
 80182a2:	001a      	movs	r2, r3
 80182a4:	2360      	movs	r3, #96	@ 0x60
 80182a6:	4013      	ands	r3, r2
 80182a8:	2b40      	cmp	r3, #64	@ 0x40
 80182aa:	d004      	beq.n	80182b6 <USBD_StdDevReq+0x2a>
 80182ac:	d84f      	bhi.n	801834e <USBD_StdDevReq+0xc2>
 80182ae:	2b00      	cmp	r3, #0
 80182b0:	d00b      	beq.n	80182ca <USBD_StdDevReq+0x3e>
 80182b2:	2b20      	cmp	r3, #32
 80182b4:	d14b      	bne.n	801834e <USBD_StdDevReq+0xc2>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 80182b6:	687a      	ldr	r2, [r7, #4]
 80182b8:	23ad      	movs	r3, #173	@ 0xad
 80182ba:	009b      	lsls	r3, r3, #2
 80182bc:	58d3      	ldr	r3, [r2, r3]
 80182be:	689b      	ldr	r3, [r3, #8]
 80182c0:	6839      	ldr	r1, [r7, #0]
 80182c2:	687a      	ldr	r2, [r7, #4]
 80182c4:	0010      	movs	r0, r2
 80182c6:	4798      	blx	r3
      break;
 80182c8:	e048      	b.n	801835c <USBD_StdDevReq+0xd0>

    case USB_REQ_TYPE_STANDARD:
      switch (req->bRequest)
 80182ca:	683b      	ldr	r3, [r7, #0]
 80182cc:	785b      	ldrb	r3, [r3, #1]
 80182ce:	2b09      	cmp	r3, #9
 80182d0:	d835      	bhi.n	801833e <USBD_StdDevReq+0xb2>
 80182d2:	009a      	lsls	r2, r3, #2
 80182d4:	4b25      	ldr	r3, [pc, #148]	@ (801836c <USBD_StdDevReq+0xe0>)
 80182d6:	18d3      	adds	r3, r2, r3
 80182d8:	681b      	ldr	r3, [r3, #0]
 80182da:	469f      	mov	pc, r3
      {
        case USB_REQ_GET_DESCRIPTOR:
          USBD_GetDescriptor(pdev, req);
 80182dc:	683a      	ldr	r2, [r7, #0]
 80182de:	687b      	ldr	r3, [r7, #4]
 80182e0:	0011      	movs	r1, r2
 80182e2:	0018      	movs	r0, r3
 80182e4:	f000 fa52 	bl	801878c <USBD_GetDescriptor>
          break;
 80182e8:	e030      	b.n	801834c <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_ADDRESS:
          USBD_SetAddress(pdev, req);
 80182ea:	683a      	ldr	r2, [r7, #0]
 80182ec:	687b      	ldr	r3, [r7, #4]
 80182ee:	0011      	movs	r1, r2
 80182f0:	0018      	movs	r0, r3
 80182f2:	f000 fbfd 	bl	8018af0 <USBD_SetAddress>
          break;
 80182f6:	e029      	b.n	801834c <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_CONFIGURATION:
          USBD_SetConfig(pdev, req);
 80182f8:	683a      	ldr	r2, [r7, #0]
 80182fa:	687b      	ldr	r3, [r7, #4]
 80182fc:	0011      	movs	r1, r2
 80182fe:	0018      	movs	r0, r3
 8018300:	f000 fc4a 	bl	8018b98 <USBD_SetConfig>
          break;
 8018304:	e022      	b.n	801834c <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_CONFIGURATION:
          USBD_GetConfig(pdev, req);
 8018306:	683a      	ldr	r2, [r7, #0]
 8018308:	687b      	ldr	r3, [r7, #4]
 801830a:	0011      	movs	r1, r2
 801830c:	0018      	movs	r0, r3
 801830e:	f000 fce7 	bl	8018ce0 <USBD_GetConfig>
          break;
 8018312:	e01b      	b.n	801834c <USBD_StdDevReq+0xc0>

        case USB_REQ_GET_STATUS:
          USBD_GetStatus(pdev, req);
 8018314:	683a      	ldr	r2, [r7, #0]
 8018316:	687b      	ldr	r3, [r7, #4]
 8018318:	0011      	movs	r1, r2
 801831a:	0018      	movs	r0, r3
 801831c:	f000 fd1b 	bl	8018d56 <USBD_GetStatus>
          break;
 8018320:	e014      	b.n	801834c <USBD_StdDevReq+0xc0>

        case USB_REQ_SET_FEATURE:
          USBD_SetFeature(pdev, req);
 8018322:	683a      	ldr	r2, [r7, #0]
 8018324:	687b      	ldr	r3, [r7, #4]
 8018326:	0011      	movs	r1, r2
 8018328:	0018      	movs	r0, r3
 801832a:	f000 fd4e 	bl	8018dca <USBD_SetFeature>
          break;
 801832e:	e00d      	b.n	801834c <USBD_StdDevReq+0xc0>

        case USB_REQ_CLEAR_FEATURE:
          USBD_ClrFeature(pdev, req);
 8018330:	683a      	ldr	r2, [r7, #0]
 8018332:	687b      	ldr	r3, [r7, #4]
 8018334:	0011      	movs	r1, r2
 8018336:	0018      	movs	r0, r3
 8018338:	f000 fd5d 	bl	8018df6 <USBD_ClrFeature>
          break;
 801833c:	e006      	b.n	801834c <USBD_StdDevReq+0xc0>

        default:
          USBD_CtlError(pdev, req);
 801833e:	683a      	ldr	r2, [r7, #0]
 8018340:	687b      	ldr	r3, [r7, #4]
 8018342:	0011      	movs	r1, r2
 8018344:	0018      	movs	r0, r3
 8018346:	f000 fdb4 	bl	8018eb2 <USBD_CtlError>
          break;
 801834a:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801834c:	e006      	b.n	801835c <USBD_StdDevReq+0xd0>

    default:
      USBD_CtlError(pdev, req);
 801834e:	683a      	ldr	r2, [r7, #0]
 8018350:	687b      	ldr	r3, [r7, #4]
 8018352:	0011      	movs	r1, r2
 8018354:	0018      	movs	r0, r3
 8018356:	f000 fdac 	bl	8018eb2 <USBD_CtlError>
      break;
 801835a:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801835c:	230f      	movs	r3, #15
 801835e:	18fb      	adds	r3, r7, r3
 8018360:	781b      	ldrb	r3, [r3, #0]
}
 8018362:	0018      	movs	r0, r3
 8018364:	46bd      	mov	sp, r7
 8018366:	b004      	add	sp, #16
 8018368:	bd80      	pop	{r7, pc}
 801836a:	46c0      	nop			@ (mov r8, r8)
 801836c:	08020a70 	.word	0x08020a70

08018370 <USBD_StdItfReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdItfReq(USBD_HandleTypeDef *pdev,
                                   USBD_SetupReqTypedef  *req)
{
 8018370:	b5b0      	push	{r4, r5, r7, lr}
 8018372:	b084      	sub	sp, #16
 8018374:	af00      	add	r7, sp, #0
 8018376:	6078      	str	r0, [r7, #4]
 8018378:	6039      	str	r1, [r7, #0]
  USBD_StatusTypeDef ret = USBD_OK;
 801837a:	230f      	movs	r3, #15
 801837c:	18fb      	adds	r3, r7, r3
 801837e:	2200      	movs	r2, #0
 8018380:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 8018382:	683b      	ldr	r3, [r7, #0]
 8018384:	781b      	ldrb	r3, [r3, #0]
 8018386:	001a      	movs	r2, r3
 8018388:	2360      	movs	r3, #96	@ 0x60
 801838a:	4013      	ands	r3, r2
 801838c:	2b40      	cmp	r3, #64	@ 0x40
 801838e:	d004      	beq.n	801839a <USBD_StdItfReq+0x2a>
 8018390:	d839      	bhi.n	8018406 <USBD_StdItfReq+0x96>
 8018392:	2b00      	cmp	r3, #0
 8018394:	d001      	beq.n	801839a <USBD_StdItfReq+0x2a>
 8018396:	2b20      	cmp	r3, #32
 8018398:	d135      	bne.n	8018406 <USBD_StdItfReq+0x96>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
    case USB_REQ_TYPE_STANDARD:
      switch (pdev->dev_state)
 801839a:	687a      	ldr	r2, [r7, #4]
 801839c:	23a7      	movs	r3, #167	@ 0xa7
 801839e:	009b      	lsls	r3, r3, #2
 80183a0:	5cd3      	ldrb	r3, [r2, r3]
 80183a2:	3b01      	subs	r3, #1
 80183a4:	2b02      	cmp	r3, #2
 80183a6:	d825      	bhi.n	80183f4 <USBD_StdItfReq+0x84>
      {
        case USBD_STATE_DEFAULT:
        case USBD_STATE_ADDRESSED:
        case USBD_STATE_CONFIGURED:

          if (LOBYTE(req->wIndex) <= USBD_MAX_NUM_INTERFACES)
 80183a8:	683b      	ldr	r3, [r7, #0]
 80183aa:	889b      	ldrh	r3, [r3, #4]
 80183ac:	b2db      	uxtb	r3, r3
 80183ae:	2b01      	cmp	r3, #1
 80183b0:	d819      	bhi.n	80183e6 <USBD_StdItfReq+0x76>
          {
            ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 80183b2:	687a      	ldr	r2, [r7, #4]
 80183b4:	23ad      	movs	r3, #173	@ 0xad
 80183b6:	009b      	lsls	r3, r3, #2
 80183b8:	58d3      	ldr	r3, [r2, r3]
 80183ba:	689b      	ldr	r3, [r3, #8]
 80183bc:	250f      	movs	r5, #15
 80183be:	197c      	adds	r4, r7, r5
 80183c0:	6839      	ldr	r1, [r7, #0]
 80183c2:	687a      	ldr	r2, [r7, #4]
 80183c4:	0010      	movs	r0, r2
 80183c6:	4798      	blx	r3
 80183c8:	0003      	movs	r3, r0
 80183ca:	7023      	strb	r3, [r4, #0]

            if ((req->wLength == 0U) && (ret == USBD_OK))
 80183cc:	683b      	ldr	r3, [r7, #0]
 80183ce:	88db      	ldrh	r3, [r3, #6]
 80183d0:	2b00      	cmp	r3, #0
 80183d2:	d116      	bne.n	8018402 <USBD_StdItfReq+0x92>
 80183d4:	197b      	adds	r3, r7, r5
 80183d6:	781b      	ldrb	r3, [r3, #0]
 80183d8:	2b00      	cmp	r3, #0
 80183da:	d112      	bne.n	8018402 <USBD_StdItfReq+0x92>
            {
              USBD_CtlSendStatus(pdev);
 80183dc:	687b      	ldr	r3, [r7, #4]
 80183de:	0018      	movs	r0, r3
 80183e0:	f000 fe4f 	bl	8019082 <USBD_CtlSendStatus>
          }
          else
          {
            USBD_CtlError(pdev, req);
          }
          break;
 80183e4:	e00d      	b.n	8018402 <USBD_StdItfReq+0x92>
            USBD_CtlError(pdev, req);
 80183e6:	683a      	ldr	r2, [r7, #0]
 80183e8:	687b      	ldr	r3, [r7, #4]
 80183ea:	0011      	movs	r1, r2
 80183ec:	0018      	movs	r0, r3
 80183ee:	f000 fd60 	bl	8018eb2 <USBD_CtlError>
          break;
 80183f2:	e006      	b.n	8018402 <USBD_StdItfReq+0x92>

        default:
          USBD_CtlError(pdev, req);
 80183f4:	683a      	ldr	r2, [r7, #0]
 80183f6:	687b      	ldr	r3, [r7, #4]
 80183f8:	0011      	movs	r1, r2
 80183fa:	0018      	movs	r0, r3
 80183fc:	f000 fd59 	bl	8018eb2 <USBD_CtlError>
          break;
 8018400:	e000      	b.n	8018404 <USBD_StdItfReq+0x94>
          break;
 8018402:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 8018404:	e006      	b.n	8018414 <USBD_StdItfReq+0xa4>

    default:
      USBD_CtlError(pdev, req);
 8018406:	683a      	ldr	r2, [r7, #0]
 8018408:	687b      	ldr	r3, [r7, #4]
 801840a:	0011      	movs	r1, r2
 801840c:	0018      	movs	r0, r3
 801840e:	f000 fd50 	bl	8018eb2 <USBD_CtlError>
      break;
 8018412:	46c0      	nop			@ (mov r8, r8)
  }

  return USBD_OK;
 8018414:	2300      	movs	r3, #0
}
 8018416:	0018      	movs	r0, r3
 8018418:	46bd      	mov	sp, r7
 801841a:	b004      	add	sp, #16
 801841c:	bdb0      	pop	{r4, r5, r7, pc}

0801841e <USBD_StdEPReq>:
* @param  req: usb request
* @retval status
*/
USBD_StatusTypeDef  USBD_StdEPReq(USBD_HandleTypeDef *pdev,
                                  USBD_SetupReqTypedef  *req)
{
 801841e:	b5b0      	push	{r4, r5, r7, lr}
 8018420:	b084      	sub	sp, #16
 8018422:	af00      	add	r7, sp, #0
 8018424:	6078      	str	r0, [r7, #4]
 8018426:	6039      	str	r1, [r7, #0]
  USBD_EndpointTypeDef *pep;
  uint8_t   ep_addr;
  USBD_StatusTypeDef ret = USBD_OK;
 8018428:	230f      	movs	r3, #15
 801842a:	18fb      	adds	r3, r7, r3
 801842c:	2200      	movs	r2, #0
 801842e:	701a      	strb	r2, [r3, #0]
  ep_addr  = LOBYTE(req->wIndex);
 8018430:	683b      	ldr	r3, [r7, #0]
 8018432:	889a      	ldrh	r2, [r3, #4]
 8018434:	230e      	movs	r3, #14
 8018436:	18fb      	adds	r3, r7, r3
 8018438:	701a      	strb	r2, [r3, #0]

  switch (req->bmRequest & USB_REQ_TYPE_MASK)
 801843a:	683b      	ldr	r3, [r7, #0]
 801843c:	781b      	ldrb	r3, [r3, #0]
 801843e:	001a      	movs	r2, r3
 8018440:	2360      	movs	r3, #96	@ 0x60
 8018442:	4013      	ands	r3, r2
 8018444:	2b40      	cmp	r3, #64	@ 0x40
 8018446:	d006      	beq.n	8018456 <USBD_StdEPReq+0x38>
 8018448:	d900      	bls.n	801844c <USBD_StdEPReq+0x2e>
 801844a:	e190      	b.n	801876e <USBD_StdEPReq+0x350>
 801844c:	2b00      	cmp	r3, #0
 801844e:	d00c      	beq.n	801846a <USBD_StdEPReq+0x4c>
 8018450:	2b20      	cmp	r3, #32
 8018452:	d000      	beq.n	8018456 <USBD_StdEPReq+0x38>
 8018454:	e18b      	b.n	801876e <USBD_StdEPReq+0x350>
  {
    case USB_REQ_TYPE_CLASS:
    case USB_REQ_TYPE_VENDOR:
      pdev->pClass->Setup(pdev, req);
 8018456:	687a      	ldr	r2, [r7, #4]
 8018458:	23ad      	movs	r3, #173	@ 0xad
 801845a:	009b      	lsls	r3, r3, #2
 801845c:	58d3      	ldr	r3, [r2, r3]
 801845e:	689b      	ldr	r3, [r3, #8]
 8018460:	6839      	ldr	r1, [r7, #0]
 8018462:	687a      	ldr	r2, [r7, #4]
 8018464:	0010      	movs	r0, r2
 8018466:	4798      	blx	r3
      break;
 8018468:	e188      	b.n	801877c <USBD_StdEPReq+0x35e>

    case USB_REQ_TYPE_STANDARD:
      /* Check if it is a class request */
      if ((req->bmRequest & 0x60U) == 0x20U)
 801846a:	683b      	ldr	r3, [r7, #0]
 801846c:	781b      	ldrb	r3, [r3, #0]
 801846e:	001a      	movs	r2, r3
 8018470:	2360      	movs	r3, #96	@ 0x60
 8018472:	4013      	ands	r3, r2
 8018474:	2b20      	cmp	r3, #32
 8018476:	d10f      	bne.n	8018498 <USBD_StdEPReq+0x7a>
      {
        ret = (USBD_StatusTypeDef)pdev->pClass->Setup(pdev, req);
 8018478:	687a      	ldr	r2, [r7, #4]
 801847a:	23ad      	movs	r3, #173	@ 0xad
 801847c:	009b      	lsls	r3, r3, #2
 801847e:	58d3      	ldr	r3, [r2, r3]
 8018480:	689b      	ldr	r3, [r3, #8]
 8018482:	250f      	movs	r5, #15
 8018484:	197c      	adds	r4, r7, r5
 8018486:	6839      	ldr	r1, [r7, #0]
 8018488:	687a      	ldr	r2, [r7, #4]
 801848a:	0010      	movs	r0, r2
 801848c:	4798      	blx	r3
 801848e:	0003      	movs	r3, r0
 8018490:	7023      	strb	r3, [r4, #0]

        return ret;
 8018492:	197b      	adds	r3, r7, r5
 8018494:	781b      	ldrb	r3, [r3, #0]
 8018496:	e174      	b.n	8018782 <USBD_StdEPReq+0x364>
      }

      switch (req->bRequest)
 8018498:	683b      	ldr	r3, [r7, #0]
 801849a:	785b      	ldrb	r3, [r3, #1]
 801849c:	2b03      	cmp	r3, #3
 801849e:	d007      	beq.n	80184b0 <USBD_StdEPReq+0x92>
 80184a0:	dd00      	ble.n	80184a4 <USBD_StdEPReq+0x86>
 80184a2:	e15c      	b.n	801875e <USBD_StdEPReq+0x340>
 80184a4:	2b00      	cmp	r3, #0
 80184a6:	d100      	bne.n	80184aa <USBD_StdEPReq+0x8c>
 80184a8:	e092      	b.n	80185d0 <USBD_StdEPReq+0x1b2>
 80184aa:	2b01      	cmp	r3, #1
 80184ac:	d04b      	beq.n	8018546 <USBD_StdEPReq+0x128>
 80184ae:	e156      	b.n	801875e <USBD_StdEPReq+0x340>
      {
        case USB_REQ_SET_FEATURE:
          switch (pdev->dev_state)
 80184b0:	687a      	ldr	r2, [r7, #4]
 80184b2:	23a7      	movs	r3, #167	@ 0xa7
 80184b4:	009b      	lsls	r3, r3, #2
 80184b6:	5cd3      	ldrb	r3, [r2, r3]
 80184b8:	2b02      	cmp	r3, #2
 80184ba:	d002      	beq.n	80184c2 <USBD_StdEPReq+0xa4>
 80184bc:	2b03      	cmp	r3, #3
 80184be:	d01d      	beq.n	80184fc <USBD_StdEPReq+0xde>
 80184c0:	e039      	b.n	8018536 <USBD_StdEPReq+0x118>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80184c2:	220e      	movs	r2, #14
 80184c4:	18bb      	adds	r3, r7, r2
 80184c6:	781b      	ldrb	r3, [r3, #0]
 80184c8:	2b00      	cmp	r3, #0
 80184ca:	d010      	beq.n	80184ee <USBD_StdEPReq+0xd0>
 80184cc:	18bb      	adds	r3, r7, r2
 80184ce:	781b      	ldrb	r3, [r3, #0]
 80184d0:	2b80      	cmp	r3, #128	@ 0x80
 80184d2:	d00c      	beq.n	80184ee <USBD_StdEPReq+0xd0>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 80184d4:	18bb      	adds	r3, r7, r2
 80184d6:	781a      	ldrb	r2, [r3, #0]
 80184d8:	687b      	ldr	r3, [r7, #4]
 80184da:	0011      	movs	r1, r2
 80184dc:	0018      	movs	r0, r3
 80184de:	f001 fa10 	bl	8019902 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 80184e2:	687b      	ldr	r3, [r7, #4]
 80184e4:	2180      	movs	r1, #128	@ 0x80
 80184e6:	0018      	movs	r0, r3
 80184e8:	f001 fa0b 	bl	8019902 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 80184ec:	e02a      	b.n	8018544 <USBD_StdEPReq+0x126>
                USBD_CtlError(pdev, req);
 80184ee:	683a      	ldr	r2, [r7, #0]
 80184f0:	687b      	ldr	r3, [r7, #4]
 80184f2:	0011      	movs	r1, r2
 80184f4:	0018      	movs	r0, r3
 80184f6:	f000 fcdc 	bl	8018eb2 <USBD_CtlError>
              break;
 80184fa:	e023      	b.n	8018544 <USBD_StdEPReq+0x126>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 80184fc:	683b      	ldr	r3, [r7, #0]
 80184fe:	885b      	ldrh	r3, [r3, #2]
 8018500:	2b00      	cmp	r3, #0
 8018502:	d113      	bne.n	801852c <USBD_StdEPReq+0x10e>
              {
                if ((ep_addr != 0x00U) &&
 8018504:	220e      	movs	r2, #14
 8018506:	18bb      	adds	r3, r7, r2
 8018508:	781b      	ldrb	r3, [r3, #0]
 801850a:	2b00      	cmp	r3, #0
 801850c:	d00e      	beq.n	801852c <USBD_StdEPReq+0x10e>
 801850e:	18bb      	adds	r3, r7, r2
 8018510:	781b      	ldrb	r3, [r3, #0]
 8018512:	2b80      	cmp	r3, #128	@ 0x80
 8018514:	d00a      	beq.n	801852c <USBD_StdEPReq+0x10e>
                    (ep_addr != 0x80U) && (req->wLength == 0x00U))
 8018516:	683b      	ldr	r3, [r7, #0]
 8018518:	88db      	ldrh	r3, [r3, #6]
 801851a:	2b00      	cmp	r3, #0
 801851c:	d106      	bne.n	801852c <USBD_StdEPReq+0x10e>
                {
                  USBD_LL_StallEP(pdev, ep_addr);
 801851e:	18bb      	adds	r3, r7, r2
 8018520:	781a      	ldrb	r2, [r3, #0]
 8018522:	687b      	ldr	r3, [r7, #4]
 8018524:	0011      	movs	r1, r2
 8018526:	0018      	movs	r0, r3
 8018528:	f001 f9eb 	bl	8019902 <USBD_LL_StallEP>
                }
              }
              USBD_CtlSendStatus(pdev);
 801852c:	687b      	ldr	r3, [r7, #4]
 801852e:	0018      	movs	r0, r3
 8018530:	f000 fda7 	bl	8019082 <USBD_CtlSendStatus>

              break;
 8018534:	e006      	b.n	8018544 <USBD_StdEPReq+0x126>

            default:
              USBD_CtlError(pdev, req);
 8018536:	683a      	ldr	r2, [r7, #0]
 8018538:	687b      	ldr	r3, [r7, #4]
 801853a:	0011      	movs	r1, r2
 801853c:	0018      	movs	r0, r3
 801853e:	f000 fcb8 	bl	8018eb2 <USBD_CtlError>
              break;
 8018542:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 8018544:	e112      	b.n	801876c <USBD_StdEPReq+0x34e>

        case USB_REQ_CLEAR_FEATURE:

          switch (pdev->dev_state)
 8018546:	687a      	ldr	r2, [r7, #4]
 8018548:	23a7      	movs	r3, #167	@ 0xa7
 801854a:	009b      	lsls	r3, r3, #2
 801854c:	5cd3      	ldrb	r3, [r2, r3]
 801854e:	2b02      	cmp	r3, #2
 8018550:	d002      	beq.n	8018558 <USBD_StdEPReq+0x13a>
 8018552:	2b03      	cmp	r3, #3
 8018554:	d01d      	beq.n	8018592 <USBD_StdEPReq+0x174>
 8018556:	e032      	b.n	80185be <USBD_StdEPReq+0x1a0>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 8018558:	220e      	movs	r2, #14
 801855a:	18bb      	adds	r3, r7, r2
 801855c:	781b      	ldrb	r3, [r3, #0]
 801855e:	2b00      	cmp	r3, #0
 8018560:	d010      	beq.n	8018584 <USBD_StdEPReq+0x166>
 8018562:	18bb      	adds	r3, r7, r2
 8018564:	781b      	ldrb	r3, [r3, #0]
 8018566:	2b80      	cmp	r3, #128	@ 0x80
 8018568:	d00c      	beq.n	8018584 <USBD_StdEPReq+0x166>
              {
                USBD_LL_StallEP(pdev, ep_addr);
 801856a:	18bb      	adds	r3, r7, r2
 801856c:	781a      	ldrb	r2, [r3, #0]
 801856e:	687b      	ldr	r3, [r7, #4]
 8018570:	0011      	movs	r1, r2
 8018572:	0018      	movs	r0, r3
 8018574:	f001 f9c5 	bl	8019902 <USBD_LL_StallEP>
                USBD_LL_StallEP(pdev, 0x80U);
 8018578:	687b      	ldr	r3, [r7, #4]
 801857a:	2180      	movs	r1, #128	@ 0x80
 801857c:	0018      	movs	r0, r3
 801857e:	f001 f9c0 	bl	8019902 <USBD_LL_StallEP>
              }
              else
              {
                USBD_CtlError(pdev, req);
              }
              break;
 8018582:	e024      	b.n	80185ce <USBD_StdEPReq+0x1b0>
                USBD_CtlError(pdev, req);
 8018584:	683a      	ldr	r2, [r7, #0]
 8018586:	687b      	ldr	r3, [r7, #4]
 8018588:	0011      	movs	r1, r2
 801858a:	0018      	movs	r0, r3
 801858c:	f000 fc91 	bl	8018eb2 <USBD_CtlError>
              break;
 8018590:	e01d      	b.n	80185ce <USBD_StdEPReq+0x1b0>

            case USBD_STATE_CONFIGURED:
              if (req->wValue == USB_FEATURE_EP_HALT)
 8018592:	683b      	ldr	r3, [r7, #0]
 8018594:	885b      	ldrh	r3, [r3, #2]
 8018596:	2b00      	cmp	r3, #0
 8018598:	d118      	bne.n	80185cc <USBD_StdEPReq+0x1ae>
              {
                if ((ep_addr & 0x7FU) != 0x00U)
 801859a:	210e      	movs	r1, #14
 801859c:	187b      	adds	r3, r7, r1
 801859e:	781b      	ldrb	r3, [r3, #0]
 80185a0:	227f      	movs	r2, #127	@ 0x7f
 80185a2:	4013      	ands	r3, r2
 80185a4:	d006      	beq.n	80185b4 <USBD_StdEPReq+0x196>
                {
                  USBD_LL_ClearStallEP(pdev, ep_addr);
 80185a6:	187b      	adds	r3, r7, r1
 80185a8:	781a      	ldrb	r2, [r3, #0]
 80185aa:	687b      	ldr	r3, [r7, #4]
 80185ac:	0011      	movs	r1, r2
 80185ae:	0018      	movs	r0, r3
 80185b0:	f001 f9d2 	bl	8019958 <USBD_LL_ClearStallEP>
                }
                USBD_CtlSendStatus(pdev);
 80185b4:	687b      	ldr	r3, [r7, #4]
 80185b6:	0018      	movs	r0, r3
 80185b8:	f000 fd63 	bl	8019082 <USBD_CtlSendStatus>
              }
              break;
 80185bc:	e006      	b.n	80185cc <USBD_StdEPReq+0x1ae>

            default:
              USBD_CtlError(pdev, req);
 80185be:	683a      	ldr	r2, [r7, #0]
 80185c0:	687b      	ldr	r3, [r7, #4]
 80185c2:	0011      	movs	r1, r2
 80185c4:	0018      	movs	r0, r3
 80185c6:	f000 fc74 	bl	8018eb2 <USBD_CtlError>
              break;
 80185ca:	e000      	b.n	80185ce <USBD_StdEPReq+0x1b0>
              break;
 80185cc:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 80185ce:	e0cd      	b.n	801876c <USBD_StdEPReq+0x34e>

        case USB_REQ_GET_STATUS:
          switch (pdev->dev_state)
 80185d0:	687a      	ldr	r2, [r7, #4]
 80185d2:	23a7      	movs	r3, #167	@ 0xa7
 80185d4:	009b      	lsls	r3, r3, #2
 80185d6:	5cd3      	ldrb	r3, [r2, r3]
 80185d8:	2b02      	cmp	r3, #2
 80185da:	d002      	beq.n	80185e2 <USBD_StdEPReq+0x1c4>
 80185dc:	2b03      	cmp	r3, #3
 80185de:	d03c      	beq.n	801865a <USBD_StdEPReq+0x23c>
 80185e0:	e0b5      	b.n	801874e <USBD_StdEPReq+0x330>
          {
            case USBD_STATE_ADDRESSED:
              if ((ep_addr != 0x00U) && (ep_addr != 0x80U))
 80185e2:	220e      	movs	r2, #14
 80185e4:	18bb      	adds	r3, r7, r2
 80185e6:	781b      	ldrb	r3, [r3, #0]
 80185e8:	2b00      	cmp	r3, #0
 80185ea:	d00a      	beq.n	8018602 <USBD_StdEPReq+0x1e4>
 80185ec:	18bb      	adds	r3, r7, r2
 80185ee:	781b      	ldrb	r3, [r3, #0]
 80185f0:	2b80      	cmp	r3, #128	@ 0x80
 80185f2:	d006      	beq.n	8018602 <USBD_StdEPReq+0x1e4>
              {
                USBD_CtlError(pdev, req);
 80185f4:	683a      	ldr	r2, [r7, #0]
 80185f6:	687b      	ldr	r3, [r7, #4]
 80185f8:	0011      	movs	r1, r2
 80185fa:	0018      	movs	r0, r3
 80185fc:	f000 fc59 	bl	8018eb2 <USBD_CtlError>
                break;
 8018600:	e0ac      	b.n	801875c <USBD_StdEPReq+0x33e>
              }
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8018602:	220e      	movs	r2, #14
 8018604:	18bb      	adds	r3, r7, r2
 8018606:	781b      	ldrb	r3, [r3, #0]
 8018608:	b25b      	sxtb	r3, r3
 801860a:	2b00      	cmp	r3, #0
 801860c:	da0c      	bge.n	8018628 <USBD_StdEPReq+0x20a>
 801860e:	18bb      	adds	r3, r7, r2
 8018610:	781b      	ldrb	r3, [r3, #0]
 8018612:	227f      	movs	r2, #127	@ 0x7f
 8018614:	401a      	ands	r2, r3
 8018616:	0013      	movs	r3, r2
 8018618:	009b      	lsls	r3, r3, #2
 801861a:	189b      	adds	r3, r3, r2
 801861c:	009b      	lsls	r3, r3, #2
 801861e:	3310      	adds	r3, #16
 8018620:	687a      	ldr	r2, [r7, #4]
 8018622:	18d3      	adds	r3, r2, r3
 8018624:	3304      	adds	r3, #4
 8018626:	e00d      	b.n	8018644 <USBD_StdEPReq+0x226>
                    &pdev->ep_out[ep_addr & 0x7FU];
 8018628:	230e      	movs	r3, #14
 801862a:	18fb      	adds	r3, r7, r3
 801862c:	781b      	ldrb	r3, [r3, #0]
 801862e:	227f      	movs	r2, #127	@ 0x7f
 8018630:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 8018632:	0013      	movs	r3, r2
 8018634:	009b      	lsls	r3, r3, #2
 8018636:	189b      	adds	r3, r3, r2
 8018638:	009b      	lsls	r3, r3, #2
 801863a:	3351      	adds	r3, #81	@ 0x51
 801863c:	33ff      	adds	r3, #255	@ 0xff
 801863e:	687a      	ldr	r2, [r7, #4]
 8018640:	18d3      	adds	r3, r2, r3
 8018642:	3304      	adds	r3, #4
 8018644:	60bb      	str	r3, [r7, #8]

              pep->status = 0x0000U;
 8018646:	68bb      	ldr	r3, [r7, #8]
 8018648:	2200      	movs	r2, #0
 801864a:	601a      	str	r2, [r3, #0]

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 801864c:	68b9      	ldr	r1, [r7, #8]
 801864e:	687b      	ldr	r3, [r7, #4]
 8018650:	2202      	movs	r2, #2
 8018652:	0018      	movs	r0, r3
 8018654:	f000 fcab 	bl	8018fae <USBD_CtlSendData>
              break;
 8018658:	e080      	b.n	801875c <USBD_StdEPReq+0x33e>

            case USBD_STATE_CONFIGURED:
              if ((ep_addr & 0x80U) == 0x80U)
 801865a:	220e      	movs	r2, #14
 801865c:	18bb      	adds	r3, r7, r2
 801865e:	781b      	ldrb	r3, [r3, #0]
 8018660:	b25b      	sxtb	r3, r3
 8018662:	2b00      	cmp	r3, #0
 8018664:	da14      	bge.n	8018690 <USBD_StdEPReq+0x272>
              {
                if (pdev->ep_in[ep_addr & 0xFU].is_used == 0U)
 8018666:	18bb      	adds	r3, r7, r2
 8018668:	781b      	ldrb	r3, [r3, #0]
 801866a:	220f      	movs	r2, #15
 801866c:	401a      	ands	r2, r3
 801866e:	6879      	ldr	r1, [r7, #4]
 8018670:	0013      	movs	r3, r2
 8018672:	009b      	lsls	r3, r3, #2
 8018674:	189b      	adds	r3, r3, r2
 8018676:	009b      	lsls	r3, r3, #2
 8018678:	18cb      	adds	r3, r1, r3
 801867a:	3318      	adds	r3, #24
 801867c:	681b      	ldr	r3, [r3, #0]
 801867e:	2b00      	cmp	r3, #0
 8018680:	d11e      	bne.n	80186c0 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 8018682:	683a      	ldr	r2, [r7, #0]
 8018684:	687b      	ldr	r3, [r7, #4]
 8018686:	0011      	movs	r1, r2
 8018688:	0018      	movs	r0, r3
 801868a:	f000 fc12 	bl	8018eb2 <USBD_CtlError>
                  break;
 801868e:	e065      	b.n	801875c <USBD_StdEPReq+0x33e>
                }
              }
              else
              {
                if (pdev->ep_out[ep_addr & 0xFU].is_used == 0U)
 8018690:	230e      	movs	r3, #14
 8018692:	18fb      	adds	r3, r7, r3
 8018694:	781b      	ldrb	r3, [r3, #0]
 8018696:	220f      	movs	r2, #15
 8018698:	401a      	ands	r2, r3
 801869a:	6878      	ldr	r0, [r7, #4]
 801869c:	23ac      	movs	r3, #172	@ 0xac
 801869e:	0059      	lsls	r1, r3, #1
 80186a0:	0013      	movs	r3, r2
 80186a2:	009b      	lsls	r3, r3, #2
 80186a4:	189b      	adds	r3, r3, r2
 80186a6:	009b      	lsls	r3, r3, #2
 80186a8:	18c3      	adds	r3, r0, r3
 80186aa:	185b      	adds	r3, r3, r1
 80186ac:	681b      	ldr	r3, [r3, #0]
 80186ae:	2b00      	cmp	r3, #0
 80186b0:	d106      	bne.n	80186c0 <USBD_StdEPReq+0x2a2>
                {
                  USBD_CtlError(pdev, req);
 80186b2:	683a      	ldr	r2, [r7, #0]
 80186b4:	687b      	ldr	r3, [r7, #4]
 80186b6:	0011      	movs	r1, r2
 80186b8:	0018      	movs	r0, r3
 80186ba:	f000 fbfa 	bl	8018eb2 <USBD_CtlError>
                  break;
 80186be:	e04d      	b.n	801875c <USBD_StdEPReq+0x33e>
                }
              }

              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80186c0:	220e      	movs	r2, #14
 80186c2:	18bb      	adds	r3, r7, r2
 80186c4:	781b      	ldrb	r3, [r3, #0]
 80186c6:	b25b      	sxtb	r3, r3
 80186c8:	2b00      	cmp	r3, #0
 80186ca:	da0c      	bge.n	80186e6 <USBD_StdEPReq+0x2c8>
 80186cc:	18bb      	adds	r3, r7, r2
 80186ce:	781b      	ldrb	r3, [r3, #0]
 80186d0:	227f      	movs	r2, #127	@ 0x7f
 80186d2:	401a      	ands	r2, r3
 80186d4:	0013      	movs	r3, r2
 80186d6:	009b      	lsls	r3, r3, #2
 80186d8:	189b      	adds	r3, r3, r2
 80186da:	009b      	lsls	r3, r3, #2
 80186dc:	3310      	adds	r3, #16
 80186de:	687a      	ldr	r2, [r7, #4]
 80186e0:	18d3      	adds	r3, r2, r3
 80186e2:	3304      	adds	r3, #4
 80186e4:	e00d      	b.n	8018702 <USBD_StdEPReq+0x2e4>
                    &pdev->ep_out[ep_addr & 0x7FU];
 80186e6:	230e      	movs	r3, #14
 80186e8:	18fb      	adds	r3, r7, r3
 80186ea:	781b      	ldrb	r3, [r3, #0]
 80186ec:	227f      	movs	r2, #127	@ 0x7f
 80186ee:	401a      	ands	r2, r3
              pep = ((ep_addr & 0x80U) == 0x80U) ? &pdev->ep_in[ep_addr & 0x7FU] : \
 80186f0:	0013      	movs	r3, r2
 80186f2:	009b      	lsls	r3, r3, #2
 80186f4:	189b      	adds	r3, r3, r2
 80186f6:	009b      	lsls	r3, r3, #2
 80186f8:	3351      	adds	r3, #81	@ 0x51
 80186fa:	33ff      	adds	r3, #255	@ 0xff
 80186fc:	687a      	ldr	r2, [r7, #4]
 80186fe:	18d3      	adds	r3, r2, r3
 8018700:	3304      	adds	r3, #4
 8018702:	60bb      	str	r3, [r7, #8]

              if ((ep_addr == 0x00U) || (ep_addr == 0x80U))
 8018704:	220e      	movs	r2, #14
 8018706:	18bb      	adds	r3, r7, r2
 8018708:	781b      	ldrb	r3, [r3, #0]
 801870a:	2b00      	cmp	r3, #0
 801870c:	d003      	beq.n	8018716 <USBD_StdEPReq+0x2f8>
 801870e:	18bb      	adds	r3, r7, r2
 8018710:	781b      	ldrb	r3, [r3, #0]
 8018712:	2b80      	cmp	r3, #128	@ 0x80
 8018714:	d103      	bne.n	801871e <USBD_StdEPReq+0x300>
              {
                pep->status = 0x0000U;
 8018716:	68bb      	ldr	r3, [r7, #8]
 8018718:	2200      	movs	r2, #0
 801871a:	601a      	str	r2, [r3, #0]
 801871c:	e010      	b.n	8018740 <USBD_StdEPReq+0x322>
              }
              else if (USBD_LL_IsStallEP(pdev, ep_addr))
 801871e:	230e      	movs	r3, #14
 8018720:	18fb      	adds	r3, r7, r3
 8018722:	781a      	ldrb	r2, [r3, #0]
 8018724:	687b      	ldr	r3, [r7, #4]
 8018726:	0011      	movs	r1, r2
 8018728:	0018      	movs	r0, r3
 801872a:	f001 f940 	bl	80199ae <USBD_LL_IsStallEP>
 801872e:	1e03      	subs	r3, r0, #0
 8018730:	d003      	beq.n	801873a <USBD_StdEPReq+0x31c>
              {
                pep->status = 0x0001U;
 8018732:	68bb      	ldr	r3, [r7, #8]
 8018734:	2201      	movs	r2, #1
 8018736:	601a      	str	r2, [r3, #0]
 8018738:	e002      	b.n	8018740 <USBD_StdEPReq+0x322>
              }
              else
              {
                pep->status = 0x0000U;
 801873a:	68bb      	ldr	r3, [r7, #8]
 801873c:	2200      	movs	r2, #0
 801873e:	601a      	str	r2, [r3, #0]
              }

              USBD_CtlSendData(pdev, (uint8_t *)(void *)&pep->status, 2U);
 8018740:	68b9      	ldr	r1, [r7, #8]
 8018742:	687b      	ldr	r3, [r7, #4]
 8018744:	2202      	movs	r2, #2
 8018746:	0018      	movs	r0, r3
 8018748:	f000 fc31 	bl	8018fae <USBD_CtlSendData>
              break;
 801874c:	e006      	b.n	801875c <USBD_StdEPReq+0x33e>

            default:
              USBD_CtlError(pdev, req);
 801874e:	683a      	ldr	r2, [r7, #0]
 8018750:	687b      	ldr	r3, [r7, #4]
 8018752:	0011      	movs	r1, r2
 8018754:	0018      	movs	r0, r3
 8018756:	f000 fbac 	bl	8018eb2 <USBD_CtlError>
              break;
 801875a:	46c0      	nop			@ (mov r8, r8)
          }
          break;
 801875c:	e006      	b.n	801876c <USBD_StdEPReq+0x34e>

        default:
          USBD_CtlError(pdev, req);
 801875e:	683a      	ldr	r2, [r7, #0]
 8018760:	687b      	ldr	r3, [r7, #4]
 8018762:	0011      	movs	r1, r2
 8018764:	0018      	movs	r0, r3
 8018766:	f000 fba4 	bl	8018eb2 <USBD_CtlError>
          break;
 801876a:	46c0      	nop			@ (mov r8, r8)
      }
      break;
 801876c:	e006      	b.n	801877c <USBD_StdEPReq+0x35e>

    default:
      USBD_CtlError(pdev, req);
 801876e:	683a      	ldr	r2, [r7, #0]
 8018770:	687b      	ldr	r3, [r7, #4]
 8018772:	0011      	movs	r1, r2
 8018774:	0018      	movs	r0, r3
 8018776:	f000 fb9c 	bl	8018eb2 <USBD_CtlError>
      break;
 801877a:	46c0      	nop			@ (mov r8, r8)
  }

  return ret;
 801877c:	230f      	movs	r3, #15
 801877e:	18fb      	adds	r3, r7, r3
 8018780:	781b      	ldrb	r3, [r3, #0]
}
 8018782:	0018      	movs	r0, r3
 8018784:	46bd      	mov	sp, r7
 8018786:	b004      	add	sp, #16
 8018788:	bdb0      	pop	{r4, r5, r7, pc}
	...

0801878c <USBD_GetDescriptor>:
* @param  req: usb request
* @retval status
*/
static void USBD_GetDescriptor(USBD_HandleTypeDef *pdev,
                               USBD_SetupReqTypedef *req)
{
 801878c:	b580      	push	{r7, lr}
 801878e:	b084      	sub	sp, #16
 8018790:	af00      	add	r7, sp, #0
 8018792:	6078      	str	r0, [r7, #4]
 8018794:	6039      	str	r1, [r7, #0]
  uint16_t len = 0U;
 8018796:	2308      	movs	r3, #8
 8018798:	18fb      	adds	r3, r7, r3
 801879a:	2200      	movs	r2, #0
 801879c:	801a      	strh	r2, [r3, #0]
  uint8_t *pbuf = NULL;
 801879e:	2300      	movs	r3, #0
 80187a0:	60fb      	str	r3, [r7, #12]
  uint8_t err = 0U;
 80187a2:	230b      	movs	r3, #11
 80187a4:	18fb      	adds	r3, r7, r3
 80187a6:	2200      	movs	r2, #0
 80187a8:	701a      	strb	r2, [r3, #0]

  switch (req->wValue >> 8)
 80187aa:	683b      	ldr	r3, [r7, #0]
 80187ac:	885b      	ldrh	r3, [r3, #2]
 80187ae:	0a1b      	lsrs	r3, r3, #8
 80187b0:	b29b      	uxth	r3, r3
 80187b2:	2b07      	cmp	r3, #7
 80187b4:	d900      	bls.n	80187b8 <USBD_GetDescriptor+0x2c>
 80187b6:	e159      	b.n	8018a6c <USBD_GetDescriptor+0x2e0>
 80187b8:	009a      	lsls	r2, r3, #2
 80187ba:	4bcb      	ldr	r3, [pc, #812]	@ (8018ae8 <USBD_GetDescriptor+0x35c>)
 80187bc:	18d3      	adds	r3, r2, r3
 80187be:	681b      	ldr	r3, [r3, #0]
 80187c0:	469f      	mov	pc, r3
        err++;
      }
      break;
#endif
    case USB_DESC_TYPE_DEVICE:
      pbuf = pdev->pDesc->GetDeviceDescriptor(pdev->dev_speed, &len);
 80187c2:	687a      	ldr	r2, [r7, #4]
 80187c4:	23ac      	movs	r3, #172	@ 0xac
 80187c6:	009b      	lsls	r3, r3, #2
 80187c8:	58d3      	ldr	r3, [r2, r3]
 80187ca:	681b      	ldr	r3, [r3, #0]
 80187cc:	687a      	ldr	r2, [r7, #4]
 80187ce:	7c12      	ldrb	r2, [r2, #16]
 80187d0:	2108      	movs	r1, #8
 80187d2:	1879      	adds	r1, r7, r1
 80187d4:	0010      	movs	r0, r2
 80187d6:	4798      	blx	r3
 80187d8:	0003      	movs	r3, r0
 80187da:	60fb      	str	r3, [r7, #12]
      break;
 80187dc:	e153      	b.n	8018a86 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80187de:	687b      	ldr	r3, [r7, #4]
 80187e0:	7c1b      	ldrb	r3, [r3, #16]
 80187e2:	2b00      	cmp	r3, #0
 80187e4:	d10f      	bne.n	8018806 <USBD_GetDescriptor+0x7a>
      {
        pbuf = pdev->pClass->GetHSConfigDescriptor(&len);
 80187e6:	687a      	ldr	r2, [r7, #4]
 80187e8:	23ad      	movs	r3, #173	@ 0xad
 80187ea:	009b      	lsls	r3, r3, #2
 80187ec:	58d3      	ldr	r3, [r2, r3]
 80187ee:	6a9b      	ldr	r3, [r3, #40]	@ 0x28
 80187f0:	2208      	movs	r2, #8
 80187f2:	18ba      	adds	r2, r7, r2
 80187f4:	0010      	movs	r0, r2
 80187f6:	4798      	blx	r3
 80187f8:	0003      	movs	r3, r0
 80187fa:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 80187fc:	68fb      	ldr	r3, [r7, #12]
 80187fe:	3301      	adds	r3, #1
 8018800:	2202      	movs	r2, #2
 8018802:	701a      	strb	r2, [r3, #0]
      else
      {
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
      }
      break;
 8018804:	e13f      	b.n	8018a86 <USBD_GetDescriptor+0x2fa>
        pbuf = pdev->pClass->GetFSConfigDescriptor(&len);
 8018806:	687a      	ldr	r2, [r7, #4]
 8018808:	23ad      	movs	r3, #173	@ 0xad
 801880a:	009b      	lsls	r3, r3, #2
 801880c:	58d3      	ldr	r3, [r2, r3]
 801880e:	6adb      	ldr	r3, [r3, #44]	@ 0x2c
 8018810:	2208      	movs	r2, #8
 8018812:	18ba      	adds	r2, r7, r2
 8018814:	0010      	movs	r0, r2
 8018816:	4798      	blx	r3
 8018818:	0003      	movs	r3, r0
 801881a:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_CONFIGURATION;
 801881c:	68fb      	ldr	r3, [r7, #12]
 801881e:	3301      	adds	r3, #1
 8018820:	2202      	movs	r2, #2
 8018822:	701a      	strb	r2, [r3, #0]
      break;
 8018824:	e12f      	b.n	8018a86 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_STRING:
      switch ((uint8_t)(req->wValue))
 8018826:	683b      	ldr	r3, [r7, #0]
 8018828:	885b      	ldrh	r3, [r3, #2]
 801882a:	b2db      	uxtb	r3, r3
 801882c:	2b05      	cmp	r3, #5
 801882e:	d900      	bls.n	8018832 <USBD_GetDescriptor+0xa6>
 8018830:	e0d0      	b.n	80189d4 <USBD_GetDescriptor+0x248>
 8018832:	009a      	lsls	r2, r3, #2
 8018834:	4bad      	ldr	r3, [pc, #692]	@ (8018aec <USBD_GetDescriptor+0x360>)
 8018836:	18d3      	adds	r3, r2, r3
 8018838:	681b      	ldr	r3, [r3, #0]
 801883a:	469f      	mov	pc, r3
      {
        case USBD_IDX_LANGID_STR:
          if (pdev->pDesc->GetLangIDStrDescriptor != NULL)
 801883c:	687a      	ldr	r2, [r7, #4]
 801883e:	23ac      	movs	r3, #172	@ 0xac
 8018840:	009b      	lsls	r3, r3, #2
 8018842:	58d3      	ldr	r3, [r2, r3]
 8018844:	685b      	ldr	r3, [r3, #4]
 8018846:	2b00      	cmp	r3, #0
 8018848:	d00d      	beq.n	8018866 <USBD_GetDescriptor+0xda>
          {
            pbuf = pdev->pDesc->GetLangIDStrDescriptor(pdev->dev_speed, &len);
 801884a:	687a      	ldr	r2, [r7, #4]
 801884c:	23ac      	movs	r3, #172	@ 0xac
 801884e:	009b      	lsls	r3, r3, #2
 8018850:	58d3      	ldr	r3, [r2, r3]
 8018852:	685b      	ldr	r3, [r3, #4]
 8018854:	687a      	ldr	r2, [r7, #4]
 8018856:	7c12      	ldrb	r2, [r2, #16]
 8018858:	2108      	movs	r1, #8
 801885a:	1879      	adds	r1, r7, r1
 801885c:	0010      	movs	r0, r2
 801885e:	4798      	blx	r3
 8018860:	0003      	movs	r3, r0
 8018862:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8018864:	e0c3      	b.n	80189ee <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8018866:	683a      	ldr	r2, [r7, #0]
 8018868:	687b      	ldr	r3, [r7, #4]
 801886a:	0011      	movs	r1, r2
 801886c:	0018      	movs	r0, r3
 801886e:	f000 fb20 	bl	8018eb2 <USBD_CtlError>
            err++;
 8018872:	210b      	movs	r1, #11
 8018874:	187b      	adds	r3, r7, r1
 8018876:	781a      	ldrb	r2, [r3, #0]
 8018878:	187b      	adds	r3, r7, r1
 801887a:	3201      	adds	r2, #1
 801887c:	701a      	strb	r2, [r3, #0]
          break;
 801887e:	e0b6      	b.n	80189ee <USBD_GetDescriptor+0x262>

        case USBD_IDX_MFC_STR:
          if (pdev->pDesc->GetManufacturerStrDescriptor != NULL)
 8018880:	687a      	ldr	r2, [r7, #4]
 8018882:	23ac      	movs	r3, #172	@ 0xac
 8018884:	009b      	lsls	r3, r3, #2
 8018886:	58d3      	ldr	r3, [r2, r3]
 8018888:	689b      	ldr	r3, [r3, #8]
 801888a:	2b00      	cmp	r3, #0
 801888c:	d00d      	beq.n	80188aa <USBD_GetDescriptor+0x11e>
          {
            pbuf = pdev->pDesc->GetManufacturerStrDescriptor(pdev->dev_speed, &len);
 801888e:	687a      	ldr	r2, [r7, #4]
 8018890:	23ac      	movs	r3, #172	@ 0xac
 8018892:	009b      	lsls	r3, r3, #2
 8018894:	58d3      	ldr	r3, [r2, r3]
 8018896:	689b      	ldr	r3, [r3, #8]
 8018898:	687a      	ldr	r2, [r7, #4]
 801889a:	7c12      	ldrb	r2, [r2, #16]
 801889c:	2108      	movs	r1, #8
 801889e:	1879      	adds	r1, r7, r1
 80188a0:	0010      	movs	r0, r2
 80188a2:	4798      	blx	r3
 80188a4:	0003      	movs	r3, r0
 80188a6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80188a8:	e0a1      	b.n	80189ee <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80188aa:	683a      	ldr	r2, [r7, #0]
 80188ac:	687b      	ldr	r3, [r7, #4]
 80188ae:	0011      	movs	r1, r2
 80188b0:	0018      	movs	r0, r3
 80188b2:	f000 fafe 	bl	8018eb2 <USBD_CtlError>
            err++;
 80188b6:	210b      	movs	r1, #11
 80188b8:	187b      	adds	r3, r7, r1
 80188ba:	781a      	ldrb	r2, [r3, #0]
 80188bc:	187b      	adds	r3, r7, r1
 80188be:	3201      	adds	r2, #1
 80188c0:	701a      	strb	r2, [r3, #0]
          break;
 80188c2:	e094      	b.n	80189ee <USBD_GetDescriptor+0x262>

        case USBD_IDX_PRODUCT_STR:
          if (pdev->pDesc->GetProductStrDescriptor != NULL)
 80188c4:	687a      	ldr	r2, [r7, #4]
 80188c6:	23ac      	movs	r3, #172	@ 0xac
 80188c8:	009b      	lsls	r3, r3, #2
 80188ca:	58d3      	ldr	r3, [r2, r3]
 80188cc:	68db      	ldr	r3, [r3, #12]
 80188ce:	2b00      	cmp	r3, #0
 80188d0:	d00d      	beq.n	80188ee <USBD_GetDescriptor+0x162>
          {
            pbuf = pdev->pDesc->GetProductStrDescriptor(pdev->dev_speed, &len);
 80188d2:	687a      	ldr	r2, [r7, #4]
 80188d4:	23ac      	movs	r3, #172	@ 0xac
 80188d6:	009b      	lsls	r3, r3, #2
 80188d8:	58d3      	ldr	r3, [r2, r3]
 80188da:	68db      	ldr	r3, [r3, #12]
 80188dc:	687a      	ldr	r2, [r7, #4]
 80188de:	7c12      	ldrb	r2, [r2, #16]
 80188e0:	2108      	movs	r1, #8
 80188e2:	1879      	adds	r1, r7, r1
 80188e4:	0010      	movs	r0, r2
 80188e6:	4798      	blx	r3
 80188e8:	0003      	movs	r3, r0
 80188ea:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80188ec:	e07f      	b.n	80189ee <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80188ee:	683a      	ldr	r2, [r7, #0]
 80188f0:	687b      	ldr	r3, [r7, #4]
 80188f2:	0011      	movs	r1, r2
 80188f4:	0018      	movs	r0, r3
 80188f6:	f000 fadc 	bl	8018eb2 <USBD_CtlError>
            err++;
 80188fa:	210b      	movs	r1, #11
 80188fc:	187b      	adds	r3, r7, r1
 80188fe:	781a      	ldrb	r2, [r3, #0]
 8018900:	187b      	adds	r3, r7, r1
 8018902:	3201      	adds	r2, #1
 8018904:	701a      	strb	r2, [r3, #0]
          break;
 8018906:	e072      	b.n	80189ee <USBD_GetDescriptor+0x262>

        case USBD_IDX_SERIAL_STR:
          if (pdev->pDesc->GetSerialStrDescriptor != NULL)
 8018908:	687a      	ldr	r2, [r7, #4]
 801890a:	23ac      	movs	r3, #172	@ 0xac
 801890c:	009b      	lsls	r3, r3, #2
 801890e:	58d3      	ldr	r3, [r2, r3]
 8018910:	691b      	ldr	r3, [r3, #16]
 8018912:	2b00      	cmp	r3, #0
 8018914:	d00d      	beq.n	8018932 <USBD_GetDescriptor+0x1a6>
          {
            pbuf = pdev->pDesc->GetSerialStrDescriptor(pdev->dev_speed, &len);
 8018916:	687a      	ldr	r2, [r7, #4]
 8018918:	23ac      	movs	r3, #172	@ 0xac
 801891a:	009b      	lsls	r3, r3, #2
 801891c:	58d3      	ldr	r3, [r2, r3]
 801891e:	691b      	ldr	r3, [r3, #16]
 8018920:	687a      	ldr	r2, [r7, #4]
 8018922:	7c12      	ldrb	r2, [r2, #16]
 8018924:	2108      	movs	r1, #8
 8018926:	1879      	adds	r1, r7, r1
 8018928:	0010      	movs	r0, r2
 801892a:	4798      	blx	r3
 801892c:	0003      	movs	r3, r0
 801892e:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8018930:	e05d      	b.n	80189ee <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8018932:	683a      	ldr	r2, [r7, #0]
 8018934:	687b      	ldr	r3, [r7, #4]
 8018936:	0011      	movs	r1, r2
 8018938:	0018      	movs	r0, r3
 801893a:	f000 faba 	bl	8018eb2 <USBD_CtlError>
            err++;
 801893e:	210b      	movs	r1, #11
 8018940:	187b      	adds	r3, r7, r1
 8018942:	781a      	ldrb	r2, [r3, #0]
 8018944:	187b      	adds	r3, r7, r1
 8018946:	3201      	adds	r2, #1
 8018948:	701a      	strb	r2, [r3, #0]
          break;
 801894a:	e050      	b.n	80189ee <USBD_GetDescriptor+0x262>

        case USBD_IDX_CONFIG_STR:
          if (pdev->pDesc->GetConfigurationStrDescriptor != NULL)
 801894c:	687a      	ldr	r2, [r7, #4]
 801894e:	23ac      	movs	r3, #172	@ 0xac
 8018950:	009b      	lsls	r3, r3, #2
 8018952:	58d3      	ldr	r3, [r2, r3]
 8018954:	695b      	ldr	r3, [r3, #20]
 8018956:	2b00      	cmp	r3, #0
 8018958:	d00d      	beq.n	8018976 <USBD_GetDescriptor+0x1ea>
          {
            pbuf = pdev->pDesc->GetConfigurationStrDescriptor(pdev->dev_speed, &len);
 801895a:	687a      	ldr	r2, [r7, #4]
 801895c:	23ac      	movs	r3, #172	@ 0xac
 801895e:	009b      	lsls	r3, r3, #2
 8018960:	58d3      	ldr	r3, [r2, r3]
 8018962:	695b      	ldr	r3, [r3, #20]
 8018964:	687a      	ldr	r2, [r7, #4]
 8018966:	7c12      	ldrb	r2, [r2, #16]
 8018968:	2108      	movs	r1, #8
 801896a:	1879      	adds	r1, r7, r1
 801896c:	0010      	movs	r0, r2
 801896e:	4798      	blx	r3
 8018970:	0003      	movs	r3, r0
 8018972:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 8018974:	e03b      	b.n	80189ee <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 8018976:	683a      	ldr	r2, [r7, #0]
 8018978:	687b      	ldr	r3, [r7, #4]
 801897a:	0011      	movs	r1, r2
 801897c:	0018      	movs	r0, r3
 801897e:	f000 fa98 	bl	8018eb2 <USBD_CtlError>
            err++;
 8018982:	210b      	movs	r1, #11
 8018984:	187b      	adds	r3, r7, r1
 8018986:	781a      	ldrb	r2, [r3, #0]
 8018988:	187b      	adds	r3, r7, r1
 801898a:	3201      	adds	r2, #1
 801898c:	701a      	strb	r2, [r3, #0]
          break;
 801898e:	e02e      	b.n	80189ee <USBD_GetDescriptor+0x262>

        case USBD_IDX_INTERFACE_STR:
          if (pdev->pDesc->GetInterfaceStrDescriptor != NULL)
 8018990:	687a      	ldr	r2, [r7, #4]
 8018992:	23ac      	movs	r3, #172	@ 0xac
 8018994:	009b      	lsls	r3, r3, #2
 8018996:	58d3      	ldr	r3, [r2, r3]
 8018998:	699b      	ldr	r3, [r3, #24]
 801899a:	2b00      	cmp	r3, #0
 801899c:	d00d      	beq.n	80189ba <USBD_GetDescriptor+0x22e>
          {
            pbuf = pdev->pDesc->GetInterfaceStrDescriptor(pdev->dev_speed, &len);
 801899e:	687a      	ldr	r2, [r7, #4]
 80189a0:	23ac      	movs	r3, #172	@ 0xac
 80189a2:	009b      	lsls	r3, r3, #2
 80189a4:	58d3      	ldr	r3, [r2, r3]
 80189a6:	699b      	ldr	r3, [r3, #24]
 80189a8:	687a      	ldr	r2, [r7, #4]
 80189aa:	7c12      	ldrb	r2, [r2, #16]
 80189ac:	2108      	movs	r1, #8
 80189ae:	1879      	adds	r1, r7, r1
 80189b0:	0010      	movs	r0, r2
 80189b2:	4798      	blx	r3
 80189b4:	0003      	movs	r3, r0
 80189b6:	60fb      	str	r3, [r7, #12]
          else
          {
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
 80189b8:	e019      	b.n	80189ee <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
 80189ba:	683a      	ldr	r2, [r7, #0]
 80189bc:	687b      	ldr	r3, [r7, #4]
 80189be:	0011      	movs	r1, r2
 80189c0:	0018      	movs	r0, r3
 80189c2:	f000 fa76 	bl	8018eb2 <USBD_CtlError>
            err++;
 80189c6:	210b      	movs	r1, #11
 80189c8:	187b      	adds	r3, r7, r1
 80189ca:	781a      	ldrb	r2, [r3, #0]
 80189cc:	187b      	adds	r3, r7, r1
 80189ce:	3201      	adds	r2, #1
 80189d0:	701a      	strb	r2, [r3, #0]
          break;
 80189d2:	e00c      	b.n	80189ee <USBD_GetDescriptor+0x262>
            USBD_CtlError(pdev, req);
            err++;
          }
          break;
#else
          USBD_CtlError(pdev, req);
 80189d4:	683a      	ldr	r2, [r7, #0]
 80189d6:	687b      	ldr	r3, [r7, #4]
 80189d8:	0011      	movs	r1, r2
 80189da:	0018      	movs	r0, r3
 80189dc:	f000 fa69 	bl	8018eb2 <USBD_CtlError>
          err++;
 80189e0:	210b      	movs	r1, #11
 80189e2:	187b      	adds	r3, r7, r1
 80189e4:	781a      	ldrb	r2, [r3, #0]
 80189e6:	187b      	adds	r3, r7, r1
 80189e8:	3201      	adds	r2, #1
 80189ea:	701a      	strb	r2, [r3, #0]
#endif
      }
      break;
 80189ec:	e04b      	b.n	8018a86 <USBD_GetDescriptor+0x2fa>
 80189ee:	e04a      	b.n	8018a86 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_DEVICE_QUALIFIER:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 80189f0:	687b      	ldr	r3, [r7, #4]
 80189f2:	7c1b      	ldrb	r3, [r3, #16]
 80189f4:	2b00      	cmp	r3, #0
 80189f6:	d10b      	bne.n	8018a10 <USBD_GetDescriptor+0x284>
      {
        pbuf = pdev->pClass->GetDeviceQualifierDescriptor(&len);
 80189f8:	687a      	ldr	r2, [r7, #4]
 80189fa:	23ad      	movs	r3, #173	@ 0xad
 80189fc:	009b      	lsls	r3, r3, #2
 80189fe:	58d3      	ldr	r3, [r2, r3]
 8018a00:	6b5b      	ldr	r3, [r3, #52]	@ 0x34
 8018a02:	2208      	movs	r2, #8
 8018a04:	18ba      	adds	r2, r7, r2
 8018a06:	0010      	movs	r0, r2
 8018a08:	4798      	blx	r3
 8018a0a:	0003      	movs	r3, r0
 8018a0c:	60fb      	str	r3, [r7, #12]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8018a0e:	e03a      	b.n	8018a86 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8018a10:	683a      	ldr	r2, [r7, #0]
 8018a12:	687b      	ldr	r3, [r7, #4]
 8018a14:	0011      	movs	r1, r2
 8018a16:	0018      	movs	r0, r3
 8018a18:	f000 fa4b 	bl	8018eb2 <USBD_CtlError>
        err++;
 8018a1c:	210b      	movs	r1, #11
 8018a1e:	187b      	adds	r3, r7, r1
 8018a20:	781a      	ldrb	r2, [r3, #0]
 8018a22:	187b      	adds	r3, r7, r1
 8018a24:	3201      	adds	r2, #1
 8018a26:	701a      	strb	r2, [r3, #0]
      break;
 8018a28:	e02d      	b.n	8018a86 <USBD_GetDescriptor+0x2fa>

    case USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION:
      if (pdev->dev_speed == USBD_SPEED_HIGH)
 8018a2a:	687b      	ldr	r3, [r7, #4]
 8018a2c:	7c1b      	ldrb	r3, [r3, #16]
 8018a2e:	2b00      	cmp	r3, #0
 8018a30:	d10f      	bne.n	8018a52 <USBD_GetDescriptor+0x2c6>
      {
        pbuf = pdev->pClass->GetOtherSpeedConfigDescriptor(&len);
 8018a32:	687a      	ldr	r2, [r7, #4]
 8018a34:	23ad      	movs	r3, #173	@ 0xad
 8018a36:	009b      	lsls	r3, r3, #2
 8018a38:	58d3      	ldr	r3, [r2, r3]
 8018a3a:	6b1b      	ldr	r3, [r3, #48]	@ 0x30
 8018a3c:	2208      	movs	r2, #8
 8018a3e:	18ba      	adds	r2, r7, r2
 8018a40:	0010      	movs	r0, r2
 8018a42:	4798      	blx	r3
 8018a44:	0003      	movs	r3, r0
 8018a46:	60fb      	str	r3, [r7, #12]
        pbuf[1] = USB_DESC_TYPE_OTHER_SPEED_CONFIGURATION;
 8018a48:	68fb      	ldr	r3, [r7, #12]
 8018a4a:	3301      	adds	r3, #1
 8018a4c:	2207      	movs	r2, #7
 8018a4e:	701a      	strb	r2, [r3, #0]
      else
      {
        USBD_CtlError(pdev, req);
        err++;
      }
      break;
 8018a50:	e019      	b.n	8018a86 <USBD_GetDescriptor+0x2fa>
        USBD_CtlError(pdev, req);
 8018a52:	683a      	ldr	r2, [r7, #0]
 8018a54:	687b      	ldr	r3, [r7, #4]
 8018a56:	0011      	movs	r1, r2
 8018a58:	0018      	movs	r0, r3
 8018a5a:	f000 fa2a 	bl	8018eb2 <USBD_CtlError>
        err++;
 8018a5e:	210b      	movs	r1, #11
 8018a60:	187b      	adds	r3, r7, r1
 8018a62:	781a      	ldrb	r2, [r3, #0]
 8018a64:	187b      	adds	r3, r7, r1
 8018a66:	3201      	adds	r2, #1
 8018a68:	701a      	strb	r2, [r3, #0]
      break;
 8018a6a:	e00c      	b.n	8018a86 <USBD_GetDescriptor+0x2fa>

    default:
      USBD_CtlError(pdev, req);
 8018a6c:	683a      	ldr	r2, [r7, #0]
 8018a6e:	687b      	ldr	r3, [r7, #4]
 8018a70:	0011      	movs	r1, r2
 8018a72:	0018      	movs	r0, r3
 8018a74:	f000 fa1d 	bl	8018eb2 <USBD_CtlError>
      err++;
 8018a78:	210b      	movs	r1, #11
 8018a7a:	187b      	adds	r3, r7, r1
 8018a7c:	781a      	ldrb	r2, [r3, #0]
 8018a7e:	187b      	adds	r3, r7, r1
 8018a80:	3201      	adds	r2, #1
 8018a82:	701a      	strb	r2, [r3, #0]
      break;
 8018a84:	46c0      	nop			@ (mov r8, r8)
  }

  if (err != 0U)
 8018a86:	230b      	movs	r3, #11
 8018a88:	18fb      	adds	r3, r7, r3
 8018a8a:	781b      	ldrb	r3, [r3, #0]
 8018a8c:	2b00      	cmp	r3, #0
 8018a8e:	d127      	bne.n	8018ae0 <USBD_GetDescriptor+0x354>
  {
    return;
  }
  else
  {
    if ((len != 0U) && (req->wLength != 0U))
 8018a90:	2108      	movs	r1, #8
 8018a92:	187b      	adds	r3, r7, r1
 8018a94:	881b      	ldrh	r3, [r3, #0]
 8018a96:	2b00      	cmp	r3, #0
 8018a98:	d019      	beq.n	8018ace <USBD_GetDescriptor+0x342>
 8018a9a:	683b      	ldr	r3, [r7, #0]
 8018a9c:	88db      	ldrh	r3, [r3, #6]
 8018a9e:	2b00      	cmp	r3, #0
 8018aa0:	d015      	beq.n	8018ace <USBD_GetDescriptor+0x342>
    {
      len = MIN(len, req->wLength);
 8018aa2:	683b      	ldr	r3, [r7, #0]
 8018aa4:	88da      	ldrh	r2, [r3, #6]
 8018aa6:	187b      	adds	r3, r7, r1
 8018aa8:	881b      	ldrh	r3, [r3, #0]
 8018aaa:	1c18      	adds	r0, r3, #0
 8018aac:	1c11      	adds	r1, r2, #0
 8018aae:	b28a      	uxth	r2, r1
 8018ab0:	b283      	uxth	r3, r0
 8018ab2:	429a      	cmp	r2, r3
 8018ab4:	d900      	bls.n	8018ab8 <USBD_GetDescriptor+0x32c>
 8018ab6:	1c01      	adds	r1, r0, #0
 8018ab8:	b28a      	uxth	r2, r1
 8018aba:	2108      	movs	r1, #8
 8018abc:	187b      	adds	r3, r7, r1
 8018abe:	801a      	strh	r2, [r3, #0]
      (void)USBD_CtlSendData(pdev, pbuf, len);
 8018ac0:	187b      	adds	r3, r7, r1
 8018ac2:	881a      	ldrh	r2, [r3, #0]
 8018ac4:	68f9      	ldr	r1, [r7, #12]
 8018ac6:	687b      	ldr	r3, [r7, #4]
 8018ac8:	0018      	movs	r0, r3
 8018aca:	f000 fa70 	bl	8018fae <USBD_CtlSendData>
    }

    if (req->wLength == 0U)
 8018ace:	683b      	ldr	r3, [r7, #0]
 8018ad0:	88db      	ldrh	r3, [r3, #6]
 8018ad2:	2b00      	cmp	r3, #0
 8018ad4:	d105      	bne.n	8018ae2 <USBD_GetDescriptor+0x356>
    {
      (void)USBD_CtlSendStatus(pdev);
 8018ad6:	687b      	ldr	r3, [r7, #4]
 8018ad8:	0018      	movs	r0, r3
 8018ada:	f000 fad2 	bl	8019082 <USBD_CtlSendStatus>
 8018ade:	e000      	b.n	8018ae2 <USBD_GetDescriptor+0x356>
    return;
 8018ae0:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8018ae2:	46bd      	mov	sp, r7
 8018ae4:	b004      	add	sp, #16
 8018ae6:	bd80      	pop	{r7, pc}
 8018ae8:	08020a98 	.word	0x08020a98
 8018aec:	08020ab8 	.word	0x08020ab8

08018af0 <USBD_SetAddress>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetAddress(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8018af0:	b590      	push	{r4, r7, lr}
 8018af2:	b085      	sub	sp, #20
 8018af4:	af00      	add	r7, sp, #0
 8018af6:	6078      	str	r0, [r7, #4]
 8018af8:	6039      	str	r1, [r7, #0]
  uint8_t  dev_addr;

  if ((req->wIndex == 0U) && (req->wLength == 0U) && (req->wValue < 128U))
 8018afa:	683b      	ldr	r3, [r7, #0]
 8018afc:	889b      	ldrh	r3, [r3, #4]
 8018afe:	2b00      	cmp	r3, #0
 8018b00:	d13d      	bne.n	8018b7e <USBD_SetAddress+0x8e>
 8018b02:	683b      	ldr	r3, [r7, #0]
 8018b04:	88db      	ldrh	r3, [r3, #6]
 8018b06:	2b00      	cmp	r3, #0
 8018b08:	d139      	bne.n	8018b7e <USBD_SetAddress+0x8e>
 8018b0a:	683b      	ldr	r3, [r7, #0]
 8018b0c:	885b      	ldrh	r3, [r3, #2]
 8018b0e:	2b7f      	cmp	r3, #127	@ 0x7f
 8018b10:	d835      	bhi.n	8018b7e <USBD_SetAddress+0x8e>
  {
    dev_addr = (uint8_t)(req->wValue) & 0x7FU;
 8018b12:	683b      	ldr	r3, [r7, #0]
 8018b14:	885b      	ldrh	r3, [r3, #2]
 8018b16:	b2da      	uxtb	r2, r3
 8018b18:	230f      	movs	r3, #15
 8018b1a:	18fb      	adds	r3, r7, r3
 8018b1c:	217f      	movs	r1, #127	@ 0x7f
 8018b1e:	400a      	ands	r2, r1
 8018b20:	701a      	strb	r2, [r3, #0]

    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018b22:	687a      	ldr	r2, [r7, #4]
 8018b24:	23a7      	movs	r3, #167	@ 0xa7
 8018b26:	009b      	lsls	r3, r3, #2
 8018b28:	5cd3      	ldrb	r3, [r2, r3]
 8018b2a:	2b03      	cmp	r3, #3
 8018b2c:	d106      	bne.n	8018b3c <USBD_SetAddress+0x4c>
    {
      USBD_CtlError(pdev, req);
 8018b2e:	683a      	ldr	r2, [r7, #0]
 8018b30:	687b      	ldr	r3, [r7, #4]
 8018b32:	0011      	movs	r1, r2
 8018b34:	0018      	movs	r0, r3
 8018b36:	f000 f9bc 	bl	8018eb2 <USBD_CtlError>
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018b3a:	e027      	b.n	8018b8c <USBD_SetAddress+0x9c>
    }
    else
    {
      pdev->dev_address = dev_addr;
 8018b3c:	687b      	ldr	r3, [r7, #4]
 8018b3e:	240f      	movs	r4, #15
 8018b40:	193a      	adds	r2, r7, r4
 8018b42:	4914      	ldr	r1, [pc, #80]	@ (8018b94 <USBD_SetAddress+0xa4>)
 8018b44:	7812      	ldrb	r2, [r2, #0]
 8018b46:	545a      	strb	r2, [r3, r1]
      USBD_LL_SetUSBAddress(pdev, dev_addr);
 8018b48:	193b      	adds	r3, r7, r4
 8018b4a:	781a      	ldrb	r2, [r3, #0]
 8018b4c:	687b      	ldr	r3, [r7, #4]
 8018b4e:	0011      	movs	r1, r2
 8018b50:	0018      	movs	r0, r3
 8018b52:	f000 ff5d 	bl	8019a10 <USBD_LL_SetUSBAddress>
      USBD_CtlSendStatus(pdev);
 8018b56:	687b      	ldr	r3, [r7, #4]
 8018b58:	0018      	movs	r0, r3
 8018b5a:	f000 fa92 	bl	8019082 <USBD_CtlSendStatus>

      if (dev_addr != 0U)
 8018b5e:	193b      	adds	r3, r7, r4
 8018b60:	781b      	ldrb	r3, [r3, #0]
 8018b62:	2b00      	cmp	r3, #0
 8018b64:	d005      	beq.n	8018b72 <USBD_SetAddress+0x82>
      {
        pdev->dev_state = USBD_STATE_ADDRESSED;
 8018b66:	687a      	ldr	r2, [r7, #4]
 8018b68:	23a7      	movs	r3, #167	@ 0xa7
 8018b6a:	009b      	lsls	r3, r3, #2
 8018b6c:	2102      	movs	r1, #2
 8018b6e:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018b70:	e00c      	b.n	8018b8c <USBD_SetAddress+0x9c>
      }
      else
      {
        pdev->dev_state = USBD_STATE_DEFAULT;
 8018b72:	687a      	ldr	r2, [r7, #4]
 8018b74:	23a7      	movs	r3, #167	@ 0xa7
 8018b76:	009b      	lsls	r3, r3, #2
 8018b78:	2101      	movs	r1, #1
 8018b7a:	54d1      	strb	r1, [r2, r3]
    if (pdev->dev_state == USBD_STATE_CONFIGURED)
 8018b7c:	e006      	b.n	8018b8c <USBD_SetAddress+0x9c>
      }
    }
  }
  else
  {
    USBD_CtlError(pdev, req);
 8018b7e:	683a      	ldr	r2, [r7, #0]
 8018b80:	687b      	ldr	r3, [r7, #4]
 8018b82:	0011      	movs	r1, r2
 8018b84:	0018      	movs	r0, r3
 8018b86:	f000 f994 	bl	8018eb2 <USBD_CtlError>
  }
}
 8018b8a:	46c0      	nop			@ (mov r8, r8)
 8018b8c:	46c0      	nop			@ (mov r8, r8)
 8018b8e:	46bd      	mov	sp, r7
 8018b90:	b005      	add	sp, #20
 8018b92:	bd90      	pop	{r4, r7, pc}
 8018b94:	0000029e 	.word	0x0000029e

08018b98 <USBD_SetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_SetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018b98:	b580      	push	{r7, lr}
 8018b9a:	b082      	sub	sp, #8
 8018b9c:	af00      	add	r7, sp, #0
 8018b9e:	6078      	str	r0, [r7, #4]
 8018ba0:	6039      	str	r1, [r7, #0]
  static uint8_t cfgidx;

  cfgidx = (uint8_t)(req->wValue);
 8018ba2:	683b      	ldr	r3, [r7, #0]
 8018ba4:	885b      	ldrh	r3, [r3, #2]
 8018ba6:	b2da      	uxtb	r2, r3
 8018ba8:	4b4c      	ldr	r3, [pc, #304]	@ (8018cdc <USBD_SetConfig+0x144>)
 8018baa:	701a      	strb	r2, [r3, #0]

  if (cfgidx > USBD_MAX_NUM_CONFIGURATION)
 8018bac:	4b4b      	ldr	r3, [pc, #300]	@ (8018cdc <USBD_SetConfig+0x144>)
 8018bae:	781b      	ldrb	r3, [r3, #0]
 8018bb0:	2b01      	cmp	r3, #1
 8018bb2:	d906      	bls.n	8018bc2 <USBD_SetConfig+0x2a>
  {
    USBD_CtlError(pdev, req);
 8018bb4:	683a      	ldr	r2, [r7, #0]
 8018bb6:	687b      	ldr	r3, [r7, #4]
 8018bb8:	0011      	movs	r1, r2
 8018bba:	0018      	movs	r0, r3
 8018bbc:	f000 f979 	bl	8018eb2 <USBD_CtlError>
 8018bc0:	e088      	b.n	8018cd4 <USBD_SetConfig+0x13c>
  }
  else
  {
    switch (pdev->dev_state)
 8018bc2:	687a      	ldr	r2, [r7, #4]
 8018bc4:	23a7      	movs	r3, #167	@ 0xa7
 8018bc6:	009b      	lsls	r3, r3, #2
 8018bc8:	5cd3      	ldrb	r3, [r2, r3]
 8018bca:	2b02      	cmp	r3, #2
 8018bcc:	d002      	beq.n	8018bd4 <USBD_SetConfig+0x3c>
 8018bce:	2b03      	cmp	r3, #3
 8018bd0:	d029      	beq.n	8018c26 <USBD_SetConfig+0x8e>
 8018bd2:	e071      	b.n	8018cb8 <USBD_SetConfig+0x120>
    {
      case USBD_STATE_ADDRESSED:
        if (cfgidx)
 8018bd4:	4b41      	ldr	r3, [pc, #260]	@ (8018cdc <USBD_SetConfig+0x144>)
 8018bd6:	781b      	ldrb	r3, [r3, #0]
 8018bd8:	2b00      	cmp	r3, #0
 8018bda:	d01f      	beq.n	8018c1c <USBD_SetConfig+0x84>
        {
          pdev->dev_config = cfgidx;
 8018bdc:	4b3f      	ldr	r3, [pc, #252]	@ (8018cdc <USBD_SetConfig+0x144>)
 8018bde:	781b      	ldrb	r3, [r3, #0]
 8018be0:	001a      	movs	r2, r3
 8018be2:	687b      	ldr	r3, [r7, #4]
 8018be4:	605a      	str	r2, [r3, #4]
          pdev->dev_state = USBD_STATE_CONFIGURED;
 8018be6:	687a      	ldr	r2, [r7, #4]
 8018be8:	23a7      	movs	r3, #167	@ 0xa7
 8018bea:	009b      	lsls	r3, r3, #2
 8018bec:	2103      	movs	r1, #3
 8018bee:	54d1      	strb	r1, [r2, r3]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8018bf0:	4b3a      	ldr	r3, [pc, #232]	@ (8018cdc <USBD_SetConfig+0x144>)
 8018bf2:	781a      	ldrb	r2, [r3, #0]
 8018bf4:	687b      	ldr	r3, [r7, #4]
 8018bf6:	0011      	movs	r1, r2
 8018bf8:	0018      	movs	r0, r3
 8018bfa:	f7ff f8c6 	bl	8017d8a <USBD_SetClassConfig>
 8018bfe:	0003      	movs	r3, r0
 8018c00:	2b02      	cmp	r3, #2
 8018c02:	d106      	bne.n	8018c12 <USBD_SetConfig+0x7a>
          {
            USBD_CtlError(pdev, req);
 8018c04:	683a      	ldr	r2, [r7, #0]
 8018c06:	687b      	ldr	r3, [r7, #4]
 8018c08:	0011      	movs	r1, r2
 8018c0a:	0018      	movs	r0, r3
 8018c0c:	f000 f951 	bl	8018eb2 <USBD_CtlError>
            return;
 8018c10:	e060      	b.n	8018cd4 <USBD_SetConfig+0x13c>
          }
          USBD_CtlSendStatus(pdev);
 8018c12:	687b      	ldr	r3, [r7, #4]
 8018c14:	0018      	movs	r0, r3
 8018c16:	f000 fa34 	bl	8019082 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8018c1a:	e05b      	b.n	8018cd4 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8018c1c:	687b      	ldr	r3, [r7, #4]
 8018c1e:	0018      	movs	r0, r3
 8018c20:	f000 fa2f 	bl	8019082 <USBD_CtlSendStatus>
        break;
 8018c24:	e056      	b.n	8018cd4 <USBD_SetConfig+0x13c>

      case USBD_STATE_CONFIGURED:
        if (cfgidx == 0U)
 8018c26:	4b2d      	ldr	r3, [pc, #180]	@ (8018cdc <USBD_SetConfig+0x144>)
 8018c28:	781b      	ldrb	r3, [r3, #0]
 8018c2a:	2b00      	cmp	r3, #0
 8018c2c:	d115      	bne.n	8018c5a <USBD_SetConfig+0xc2>
        {
          pdev->dev_state = USBD_STATE_ADDRESSED;
 8018c2e:	687a      	ldr	r2, [r7, #4]
 8018c30:	23a7      	movs	r3, #167	@ 0xa7
 8018c32:	009b      	lsls	r3, r3, #2
 8018c34:	2102      	movs	r1, #2
 8018c36:	54d1      	strb	r1, [r2, r3]
          pdev->dev_config = cfgidx;
 8018c38:	4b28      	ldr	r3, [pc, #160]	@ (8018cdc <USBD_SetConfig+0x144>)
 8018c3a:	781b      	ldrb	r3, [r3, #0]
 8018c3c:	001a      	movs	r2, r3
 8018c3e:	687b      	ldr	r3, [r7, #4]
 8018c40:	605a      	str	r2, [r3, #4]
          USBD_ClrClassConfig(pdev, cfgidx);
 8018c42:	4b26      	ldr	r3, [pc, #152]	@ (8018cdc <USBD_SetConfig+0x144>)
 8018c44:	781a      	ldrb	r2, [r3, #0]
 8018c46:	687b      	ldr	r3, [r7, #4]
 8018c48:	0011      	movs	r1, r2
 8018c4a:	0018      	movs	r0, r3
 8018c4c:	f7ff f8c4 	bl	8017dd8 <USBD_ClrClassConfig>
          USBD_CtlSendStatus(pdev);
 8018c50:	687b      	ldr	r3, [r7, #4]
 8018c52:	0018      	movs	r0, r3
 8018c54:	f000 fa15 	bl	8019082 <USBD_CtlSendStatus>
        }
        else
        {
          USBD_CtlSendStatus(pdev);
        }
        break;
 8018c58:	e03c      	b.n	8018cd4 <USBD_SetConfig+0x13c>
        else if (cfgidx != pdev->dev_config)
 8018c5a:	4b20      	ldr	r3, [pc, #128]	@ (8018cdc <USBD_SetConfig+0x144>)
 8018c5c:	781b      	ldrb	r3, [r3, #0]
 8018c5e:	001a      	movs	r2, r3
 8018c60:	687b      	ldr	r3, [r7, #4]
 8018c62:	685b      	ldr	r3, [r3, #4]
 8018c64:	429a      	cmp	r2, r3
 8018c66:	d022      	beq.n	8018cae <USBD_SetConfig+0x116>
          USBD_ClrClassConfig(pdev, (uint8_t)pdev->dev_config);
 8018c68:	687b      	ldr	r3, [r7, #4]
 8018c6a:	685b      	ldr	r3, [r3, #4]
 8018c6c:	b2da      	uxtb	r2, r3
 8018c6e:	687b      	ldr	r3, [r7, #4]
 8018c70:	0011      	movs	r1, r2
 8018c72:	0018      	movs	r0, r3
 8018c74:	f7ff f8b0 	bl	8017dd8 <USBD_ClrClassConfig>
          pdev->dev_config = cfgidx;
 8018c78:	4b18      	ldr	r3, [pc, #96]	@ (8018cdc <USBD_SetConfig+0x144>)
 8018c7a:	781b      	ldrb	r3, [r3, #0]
 8018c7c:	001a      	movs	r2, r3
 8018c7e:	687b      	ldr	r3, [r7, #4]
 8018c80:	605a      	str	r2, [r3, #4]
          if (USBD_SetClassConfig(pdev, cfgidx) == USBD_FAIL)
 8018c82:	4b16      	ldr	r3, [pc, #88]	@ (8018cdc <USBD_SetConfig+0x144>)
 8018c84:	781a      	ldrb	r2, [r3, #0]
 8018c86:	687b      	ldr	r3, [r7, #4]
 8018c88:	0011      	movs	r1, r2
 8018c8a:	0018      	movs	r0, r3
 8018c8c:	f7ff f87d 	bl	8017d8a <USBD_SetClassConfig>
 8018c90:	0003      	movs	r3, r0
 8018c92:	2b02      	cmp	r3, #2
 8018c94:	d106      	bne.n	8018ca4 <USBD_SetConfig+0x10c>
            USBD_CtlError(pdev, req);
 8018c96:	683a      	ldr	r2, [r7, #0]
 8018c98:	687b      	ldr	r3, [r7, #4]
 8018c9a:	0011      	movs	r1, r2
 8018c9c:	0018      	movs	r0, r3
 8018c9e:	f000 f908 	bl	8018eb2 <USBD_CtlError>
            return;
 8018ca2:	e017      	b.n	8018cd4 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8018ca4:	687b      	ldr	r3, [r7, #4]
 8018ca6:	0018      	movs	r0, r3
 8018ca8:	f000 f9eb 	bl	8019082 <USBD_CtlSendStatus>
        break;
 8018cac:	e012      	b.n	8018cd4 <USBD_SetConfig+0x13c>
          USBD_CtlSendStatus(pdev);
 8018cae:	687b      	ldr	r3, [r7, #4]
 8018cb0:	0018      	movs	r0, r3
 8018cb2:	f000 f9e6 	bl	8019082 <USBD_CtlSendStatus>
        break;
 8018cb6:	e00d      	b.n	8018cd4 <USBD_SetConfig+0x13c>

      default:
        USBD_CtlError(pdev, req);
 8018cb8:	683a      	ldr	r2, [r7, #0]
 8018cba:	687b      	ldr	r3, [r7, #4]
 8018cbc:	0011      	movs	r1, r2
 8018cbe:	0018      	movs	r0, r3
 8018cc0:	f000 f8f7 	bl	8018eb2 <USBD_CtlError>
        USBD_ClrClassConfig(pdev, cfgidx);
 8018cc4:	4b05      	ldr	r3, [pc, #20]	@ (8018cdc <USBD_SetConfig+0x144>)
 8018cc6:	781a      	ldrb	r2, [r3, #0]
 8018cc8:	687b      	ldr	r3, [r7, #4]
 8018cca:	0011      	movs	r1, r2
 8018ccc:	0018      	movs	r0, r3
 8018cce:	f7ff f883 	bl	8017dd8 <USBD_ClrClassConfig>
        break;
 8018cd2:	46c0      	nop			@ (mov r8, r8)
    }
  }
}
 8018cd4:	46bd      	mov	sp, r7
 8018cd6:	b002      	add	sp, #8
 8018cd8:	bd80      	pop	{r7, pc}
 8018cda:	46c0      	nop			@ (mov r8, r8)
 8018cdc:	200024d8 	.word	0x200024d8

08018ce0 <USBD_GetConfig>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetConfig(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018ce0:	b580      	push	{r7, lr}
 8018ce2:	b082      	sub	sp, #8
 8018ce4:	af00      	add	r7, sp, #0
 8018ce6:	6078      	str	r0, [r7, #4]
 8018ce8:	6039      	str	r1, [r7, #0]
  if (req->wLength != 1U)
 8018cea:	683b      	ldr	r3, [r7, #0]
 8018cec:	88db      	ldrh	r3, [r3, #6]
 8018cee:	2b01      	cmp	r3, #1
 8018cf0:	d006      	beq.n	8018d00 <USBD_GetConfig+0x20>
  {
    USBD_CtlError(pdev, req);
 8018cf2:	683a      	ldr	r2, [r7, #0]
 8018cf4:	687b      	ldr	r3, [r7, #4]
 8018cf6:	0011      	movs	r1, r2
 8018cf8:	0018      	movs	r0, r3
 8018cfa:	f000 f8da 	bl	8018eb2 <USBD_CtlError>
      default:
        USBD_CtlError(pdev, req);
        break;
    }
  }
}
 8018cfe:	e026      	b.n	8018d4e <USBD_GetConfig+0x6e>
    switch (pdev->dev_state)
 8018d00:	687a      	ldr	r2, [r7, #4]
 8018d02:	23a7      	movs	r3, #167	@ 0xa7
 8018d04:	009b      	lsls	r3, r3, #2
 8018d06:	5cd3      	ldrb	r3, [r2, r3]
 8018d08:	2b02      	cmp	r3, #2
 8018d0a:	dc02      	bgt.n	8018d12 <USBD_GetConfig+0x32>
 8018d0c:	2b00      	cmp	r3, #0
 8018d0e:	dc03      	bgt.n	8018d18 <USBD_GetConfig+0x38>
 8018d10:	e016      	b.n	8018d40 <USBD_GetConfig+0x60>
 8018d12:	2b03      	cmp	r3, #3
 8018d14:	d00c      	beq.n	8018d30 <USBD_GetConfig+0x50>
 8018d16:	e013      	b.n	8018d40 <USBD_GetConfig+0x60>
        pdev->dev_default_config = 0U;
 8018d18:	687b      	ldr	r3, [r7, #4]
 8018d1a:	2200      	movs	r2, #0
 8018d1c:	609a      	str	r2, [r3, #8]
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_default_config, 1U);
 8018d1e:	687b      	ldr	r3, [r7, #4]
 8018d20:	3308      	adds	r3, #8
 8018d22:	0019      	movs	r1, r3
 8018d24:	687b      	ldr	r3, [r7, #4]
 8018d26:	2201      	movs	r2, #1
 8018d28:	0018      	movs	r0, r3
 8018d2a:	f000 f940 	bl	8018fae <USBD_CtlSendData>
        break;
 8018d2e:	e00e      	b.n	8018d4e <USBD_GetConfig+0x6e>
        USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config, 1U);
 8018d30:	687b      	ldr	r3, [r7, #4]
 8018d32:	1d19      	adds	r1, r3, #4
 8018d34:	687b      	ldr	r3, [r7, #4]
 8018d36:	2201      	movs	r2, #1
 8018d38:	0018      	movs	r0, r3
 8018d3a:	f000 f938 	bl	8018fae <USBD_CtlSendData>
        break;
 8018d3e:	e006      	b.n	8018d4e <USBD_GetConfig+0x6e>
        USBD_CtlError(pdev, req);
 8018d40:	683a      	ldr	r2, [r7, #0]
 8018d42:	687b      	ldr	r3, [r7, #4]
 8018d44:	0011      	movs	r1, r2
 8018d46:	0018      	movs	r0, r3
 8018d48:	f000 f8b3 	bl	8018eb2 <USBD_CtlError>
        break;
 8018d4c:	46c0      	nop			@ (mov r8, r8)
}
 8018d4e:	46c0      	nop			@ (mov r8, r8)
 8018d50:	46bd      	mov	sp, r7
 8018d52:	b002      	add	sp, #8
 8018d54:	bd80      	pop	{r7, pc}

08018d56 <USBD_GetStatus>:
* @param  pdev: device instance
* @param  req: usb request
* @retval status
*/
static void USBD_GetStatus(USBD_HandleTypeDef *pdev, USBD_SetupReqTypedef *req)
{
 8018d56:	b580      	push	{r7, lr}
 8018d58:	b082      	sub	sp, #8
 8018d5a:	af00      	add	r7, sp, #0
 8018d5c:	6078      	str	r0, [r7, #4]
 8018d5e:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8018d60:	687a      	ldr	r2, [r7, #4]
 8018d62:	23a7      	movs	r3, #167	@ 0xa7
 8018d64:	009b      	lsls	r3, r3, #2
 8018d66:	5cd3      	ldrb	r3, [r2, r3]
 8018d68:	3b01      	subs	r3, #1
 8018d6a:	2b02      	cmp	r3, #2
 8018d6c:	d822      	bhi.n	8018db4 <USBD_GetStatus+0x5e>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wLength != 0x2U)
 8018d6e:	683b      	ldr	r3, [r7, #0]
 8018d70:	88db      	ldrh	r3, [r3, #6]
 8018d72:	2b02      	cmp	r3, #2
 8018d74:	d006      	beq.n	8018d84 <USBD_GetStatus+0x2e>
      {
        USBD_CtlError(pdev, req);
 8018d76:	683a      	ldr	r2, [r7, #0]
 8018d78:	687b      	ldr	r3, [r7, #4]
 8018d7a:	0011      	movs	r1, r2
 8018d7c:	0018      	movs	r0, r3
 8018d7e:	f000 f898 	bl	8018eb2 <USBD_CtlError>
        break;
 8018d82:	e01e      	b.n	8018dc2 <USBD_GetStatus+0x6c>
      }

#if (USBD_SELF_POWERED == 1U)
      pdev->dev_config_status = USB_CONFIG_SELF_POWERED;
 8018d84:	687b      	ldr	r3, [r7, #4]
 8018d86:	2201      	movs	r2, #1
 8018d88:	60da      	str	r2, [r3, #12]
#else
      pdev->dev_config_status = 0U;
#endif

      if (pdev->dev_remote_wakeup)
 8018d8a:	687a      	ldr	r2, [r7, #4]
 8018d8c:	23a9      	movs	r3, #169	@ 0xa9
 8018d8e:	009b      	lsls	r3, r3, #2
 8018d90:	58d3      	ldr	r3, [r2, r3]
 8018d92:	2b00      	cmp	r3, #0
 8018d94:	d005      	beq.n	8018da2 <USBD_GetStatus+0x4c>
      {
        pdev->dev_config_status |= USB_CONFIG_REMOTE_WAKEUP;
 8018d96:	687b      	ldr	r3, [r7, #4]
 8018d98:	68db      	ldr	r3, [r3, #12]
 8018d9a:	2202      	movs	r2, #2
 8018d9c:	431a      	orrs	r2, r3
 8018d9e:	687b      	ldr	r3, [r7, #4]
 8018da0:	60da      	str	r2, [r3, #12]
      }

      USBD_CtlSendData(pdev, (uint8_t *)(void *)&pdev->dev_config_status, 2U);
 8018da2:	687b      	ldr	r3, [r7, #4]
 8018da4:	330c      	adds	r3, #12
 8018da6:	0019      	movs	r1, r3
 8018da8:	687b      	ldr	r3, [r7, #4]
 8018daa:	2202      	movs	r2, #2
 8018dac:	0018      	movs	r0, r3
 8018dae:	f000 f8fe 	bl	8018fae <USBD_CtlSendData>
      break;
 8018db2:	e006      	b.n	8018dc2 <USBD_GetStatus+0x6c>

    default:
      USBD_CtlError(pdev, req);
 8018db4:	683a      	ldr	r2, [r7, #0]
 8018db6:	687b      	ldr	r3, [r7, #4]
 8018db8:	0011      	movs	r1, r2
 8018dba:	0018      	movs	r0, r3
 8018dbc:	f000 f879 	bl	8018eb2 <USBD_CtlError>
      break;
 8018dc0:	46c0      	nop			@ (mov r8, r8)
  }
}
 8018dc2:	46c0      	nop			@ (mov r8, r8)
 8018dc4:	46bd      	mov	sp, r7
 8018dc6:	b002      	add	sp, #8
 8018dc8:	bd80      	pop	{r7, pc}

08018dca <USBD_SetFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_SetFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8018dca:	b580      	push	{r7, lr}
 8018dcc:	b082      	sub	sp, #8
 8018dce:	af00      	add	r7, sp, #0
 8018dd0:	6078      	str	r0, [r7, #4]
 8018dd2:	6039      	str	r1, [r7, #0]
  if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8018dd4:	683b      	ldr	r3, [r7, #0]
 8018dd6:	885b      	ldrh	r3, [r3, #2]
 8018dd8:	2b01      	cmp	r3, #1
 8018dda:	d108      	bne.n	8018dee <USBD_SetFeature+0x24>
  {
    pdev->dev_remote_wakeup = 1U;
 8018ddc:	687a      	ldr	r2, [r7, #4]
 8018dde:	23a9      	movs	r3, #169	@ 0xa9
 8018de0:	009b      	lsls	r3, r3, #2
 8018de2:	2101      	movs	r1, #1
 8018de4:	50d1      	str	r1, [r2, r3]
    USBD_CtlSendStatus(pdev);
 8018de6:	687b      	ldr	r3, [r7, #4]
 8018de8:	0018      	movs	r0, r3
 8018dea:	f000 f94a 	bl	8019082 <USBD_CtlSendStatus>
  }
}
 8018dee:	46c0      	nop			@ (mov r8, r8)
 8018df0:	46bd      	mov	sp, r7
 8018df2:	b002      	add	sp, #8
 8018df4:	bd80      	pop	{r7, pc}

08018df6 <USBD_ClrFeature>:
* @param  req: usb request
* @retval status
*/
static void USBD_ClrFeature(USBD_HandleTypeDef *pdev,
                            USBD_SetupReqTypedef *req)
{
 8018df6:	b580      	push	{r7, lr}
 8018df8:	b082      	sub	sp, #8
 8018dfa:	af00      	add	r7, sp, #0
 8018dfc:	6078      	str	r0, [r7, #4]
 8018dfe:	6039      	str	r1, [r7, #0]
  switch (pdev->dev_state)
 8018e00:	687a      	ldr	r2, [r7, #4]
 8018e02:	23a7      	movs	r3, #167	@ 0xa7
 8018e04:	009b      	lsls	r3, r3, #2
 8018e06:	5cd3      	ldrb	r3, [r2, r3]
 8018e08:	3b01      	subs	r3, #1
 8018e0a:	2b02      	cmp	r3, #2
 8018e0c:	d80d      	bhi.n	8018e2a <USBD_ClrFeature+0x34>
  {
    case USBD_STATE_DEFAULT:
    case USBD_STATE_ADDRESSED:
    case USBD_STATE_CONFIGURED:
      if (req->wValue == USB_FEATURE_REMOTE_WAKEUP)
 8018e0e:	683b      	ldr	r3, [r7, #0]
 8018e10:	885b      	ldrh	r3, [r3, #2]
 8018e12:	2b01      	cmp	r3, #1
 8018e14:	d110      	bne.n	8018e38 <USBD_ClrFeature+0x42>
      {
        pdev->dev_remote_wakeup = 0U;
 8018e16:	687a      	ldr	r2, [r7, #4]
 8018e18:	23a9      	movs	r3, #169	@ 0xa9
 8018e1a:	009b      	lsls	r3, r3, #2
 8018e1c:	2100      	movs	r1, #0
 8018e1e:	50d1      	str	r1, [r2, r3]
        USBD_CtlSendStatus(pdev);
 8018e20:	687b      	ldr	r3, [r7, #4]
 8018e22:	0018      	movs	r0, r3
 8018e24:	f000 f92d 	bl	8019082 <USBD_CtlSendStatus>
      }
      break;
 8018e28:	e006      	b.n	8018e38 <USBD_ClrFeature+0x42>

    default:
      USBD_CtlError(pdev, req);
 8018e2a:	683a      	ldr	r2, [r7, #0]
 8018e2c:	687b      	ldr	r3, [r7, #4]
 8018e2e:	0011      	movs	r1, r2
 8018e30:	0018      	movs	r0, r3
 8018e32:	f000 f83e 	bl	8018eb2 <USBD_CtlError>
      break;
 8018e36:	e000      	b.n	8018e3a <USBD_ClrFeature+0x44>
      break;
 8018e38:	46c0      	nop			@ (mov r8, r8)
  }
}
 8018e3a:	46c0      	nop			@ (mov r8, r8)
 8018e3c:	46bd      	mov	sp, r7
 8018e3e:	b002      	add	sp, #8
 8018e40:	bd80      	pop	{r7, pc}

08018e42 <USBD_ParseSetupRequest>:
* @param  req: usb request
* @retval None
*/

void USBD_ParseSetupRequest(USBD_SetupReqTypedef *req, uint8_t *pdata)
{
 8018e42:	b580      	push	{r7, lr}
 8018e44:	b082      	sub	sp, #8
 8018e46:	af00      	add	r7, sp, #0
 8018e48:	6078      	str	r0, [r7, #4]
 8018e4a:	6039      	str	r1, [r7, #0]
  req->bmRequest = *(uint8_t *)(pdata);
 8018e4c:	683b      	ldr	r3, [r7, #0]
 8018e4e:	781a      	ldrb	r2, [r3, #0]
 8018e50:	687b      	ldr	r3, [r7, #4]
 8018e52:	701a      	strb	r2, [r3, #0]
  req->bRequest = *(uint8_t *)(pdata + 1U);
 8018e54:	683b      	ldr	r3, [r7, #0]
 8018e56:	785a      	ldrb	r2, [r3, #1]
 8018e58:	687b      	ldr	r3, [r7, #4]
 8018e5a:	705a      	strb	r2, [r3, #1]
  req->wValue = SWAPBYTE(pdata + 2U);
 8018e5c:	683b      	ldr	r3, [r7, #0]
 8018e5e:	3302      	adds	r3, #2
 8018e60:	781b      	ldrb	r3, [r3, #0]
 8018e62:	001a      	movs	r2, r3
 8018e64:	683b      	ldr	r3, [r7, #0]
 8018e66:	3303      	adds	r3, #3
 8018e68:	781b      	ldrb	r3, [r3, #0]
 8018e6a:	021b      	lsls	r3, r3, #8
 8018e6c:	b29b      	uxth	r3, r3
 8018e6e:	18d3      	adds	r3, r2, r3
 8018e70:	b29a      	uxth	r2, r3
 8018e72:	687b      	ldr	r3, [r7, #4]
 8018e74:	805a      	strh	r2, [r3, #2]
  req->wIndex = SWAPBYTE(pdata + 4U);
 8018e76:	683b      	ldr	r3, [r7, #0]
 8018e78:	3304      	adds	r3, #4
 8018e7a:	781b      	ldrb	r3, [r3, #0]
 8018e7c:	001a      	movs	r2, r3
 8018e7e:	683b      	ldr	r3, [r7, #0]
 8018e80:	3305      	adds	r3, #5
 8018e82:	781b      	ldrb	r3, [r3, #0]
 8018e84:	021b      	lsls	r3, r3, #8
 8018e86:	b29b      	uxth	r3, r3
 8018e88:	18d3      	adds	r3, r2, r3
 8018e8a:	b29a      	uxth	r2, r3
 8018e8c:	687b      	ldr	r3, [r7, #4]
 8018e8e:	809a      	strh	r2, [r3, #4]
  req->wLength = SWAPBYTE(pdata + 6U);
 8018e90:	683b      	ldr	r3, [r7, #0]
 8018e92:	3306      	adds	r3, #6
 8018e94:	781b      	ldrb	r3, [r3, #0]
 8018e96:	001a      	movs	r2, r3
 8018e98:	683b      	ldr	r3, [r7, #0]
 8018e9a:	3307      	adds	r3, #7
 8018e9c:	781b      	ldrb	r3, [r3, #0]
 8018e9e:	021b      	lsls	r3, r3, #8
 8018ea0:	b29b      	uxth	r3, r3
 8018ea2:	18d3      	adds	r3, r2, r3
 8018ea4:	b29a      	uxth	r2, r3
 8018ea6:	687b      	ldr	r3, [r7, #4]
 8018ea8:	80da      	strh	r2, [r3, #6]

}
 8018eaa:	46c0      	nop			@ (mov r8, r8)
 8018eac:	46bd      	mov	sp, r7
 8018eae:	b002      	add	sp, #8
 8018eb0:	bd80      	pop	{r7, pc}

08018eb2 <USBD_CtlError>:
* @retval None
*/

void USBD_CtlError(USBD_HandleTypeDef *pdev,
                   USBD_SetupReqTypedef *req)
{
 8018eb2:	b580      	push	{r7, lr}
 8018eb4:	b082      	sub	sp, #8
 8018eb6:	af00      	add	r7, sp, #0
 8018eb8:	6078      	str	r0, [r7, #4]
 8018eba:	6039      	str	r1, [r7, #0]
  USBD_LL_StallEP(pdev, 0x80U);
 8018ebc:	687b      	ldr	r3, [r7, #4]
 8018ebe:	2180      	movs	r1, #128	@ 0x80
 8018ec0:	0018      	movs	r0, r3
 8018ec2:	f000 fd1e 	bl	8019902 <USBD_LL_StallEP>
  USBD_LL_StallEP(pdev, 0U);
 8018ec6:	687b      	ldr	r3, [r7, #4]
 8018ec8:	2100      	movs	r1, #0
 8018eca:	0018      	movs	r0, r3
 8018ecc:	f000 fd19 	bl	8019902 <USBD_LL_StallEP>
}
 8018ed0:	46c0      	nop			@ (mov r8, r8)
 8018ed2:	46bd      	mov	sp, r7
 8018ed4:	b002      	add	sp, #8
 8018ed6:	bd80      	pop	{r7, pc}

08018ed8 <USBD_GetString>:
  * @param  unicode : Formatted string buffer (unicode)
  * @param  len : descriptor length
  * @retval None
  */
void USBD_GetString(uint8_t *desc, uint8_t *unicode, uint16_t *len)
{
 8018ed8:	b590      	push	{r4, r7, lr}
 8018eda:	b087      	sub	sp, #28
 8018edc:	af00      	add	r7, sp, #0
 8018ede:	60f8      	str	r0, [r7, #12]
 8018ee0:	60b9      	str	r1, [r7, #8]
 8018ee2:	607a      	str	r2, [r7, #4]
  uint8_t idx = 0U;
 8018ee4:	2417      	movs	r4, #23
 8018ee6:	193b      	adds	r3, r7, r4
 8018ee8:	2200      	movs	r2, #0
 8018eea:	701a      	strb	r2, [r3, #0]

  if (desc != NULL)
 8018eec:	68fb      	ldr	r3, [r7, #12]
 8018eee:	2b00      	cmp	r3, #0
 8018ef0:	d03c      	beq.n	8018f6c <USBD_GetString+0x94>
  {
    *len = (uint16_t)USBD_GetLen(desc) * 2U + 2U;
 8018ef2:	68fb      	ldr	r3, [r7, #12]
 8018ef4:	0018      	movs	r0, r3
 8018ef6:	f000 f83d 	bl	8018f74 <USBD_GetLen>
 8018efa:	0003      	movs	r3, r0
 8018efc:	3301      	adds	r3, #1
 8018efe:	b29b      	uxth	r3, r3
 8018f00:	18db      	adds	r3, r3, r3
 8018f02:	b29a      	uxth	r2, r3
 8018f04:	687b      	ldr	r3, [r7, #4]
 8018f06:	801a      	strh	r2, [r3, #0]
    unicode[idx++] = *(uint8_t *)(void *)len;
 8018f08:	193b      	adds	r3, r7, r4
 8018f0a:	781b      	ldrb	r3, [r3, #0]
 8018f0c:	193a      	adds	r2, r7, r4
 8018f0e:	1c59      	adds	r1, r3, #1
 8018f10:	7011      	strb	r1, [r2, #0]
 8018f12:	001a      	movs	r2, r3
 8018f14:	68bb      	ldr	r3, [r7, #8]
 8018f16:	189b      	adds	r3, r3, r2
 8018f18:	687a      	ldr	r2, [r7, #4]
 8018f1a:	7812      	ldrb	r2, [r2, #0]
 8018f1c:	701a      	strb	r2, [r3, #0]
    unicode[idx++] = USB_DESC_TYPE_STRING;
 8018f1e:	193b      	adds	r3, r7, r4
 8018f20:	781b      	ldrb	r3, [r3, #0]
 8018f22:	193a      	adds	r2, r7, r4
 8018f24:	1c59      	adds	r1, r3, #1
 8018f26:	7011      	strb	r1, [r2, #0]
 8018f28:	001a      	movs	r2, r3
 8018f2a:	68bb      	ldr	r3, [r7, #8]
 8018f2c:	189b      	adds	r3, r3, r2
 8018f2e:	2203      	movs	r2, #3
 8018f30:	701a      	strb	r2, [r3, #0]

    while (*desc != '\0')
 8018f32:	e017      	b.n	8018f64 <USBD_GetString+0x8c>
    {
      unicode[idx++] = *desc++;
 8018f34:	68fb      	ldr	r3, [r7, #12]
 8018f36:	1c5a      	adds	r2, r3, #1
 8018f38:	60fa      	str	r2, [r7, #12]
 8018f3a:	2417      	movs	r4, #23
 8018f3c:	193a      	adds	r2, r7, r4
 8018f3e:	7812      	ldrb	r2, [r2, #0]
 8018f40:	1939      	adds	r1, r7, r4
 8018f42:	1c50      	adds	r0, r2, #1
 8018f44:	7008      	strb	r0, [r1, #0]
 8018f46:	0011      	movs	r1, r2
 8018f48:	68ba      	ldr	r2, [r7, #8]
 8018f4a:	1852      	adds	r2, r2, r1
 8018f4c:	781b      	ldrb	r3, [r3, #0]
 8018f4e:	7013      	strb	r3, [r2, #0]
      unicode[idx++] =  0U;
 8018f50:	193b      	adds	r3, r7, r4
 8018f52:	781b      	ldrb	r3, [r3, #0]
 8018f54:	193a      	adds	r2, r7, r4
 8018f56:	1c59      	adds	r1, r3, #1
 8018f58:	7011      	strb	r1, [r2, #0]
 8018f5a:	001a      	movs	r2, r3
 8018f5c:	68bb      	ldr	r3, [r7, #8]
 8018f5e:	189b      	adds	r3, r3, r2
 8018f60:	2200      	movs	r2, #0
 8018f62:	701a      	strb	r2, [r3, #0]
    while (*desc != '\0')
 8018f64:	68fb      	ldr	r3, [r7, #12]
 8018f66:	781b      	ldrb	r3, [r3, #0]
 8018f68:	2b00      	cmp	r3, #0
 8018f6a:	d1e3      	bne.n	8018f34 <USBD_GetString+0x5c>
    }
  }
}
 8018f6c:	46c0      	nop			@ (mov r8, r8)
 8018f6e:	46bd      	mov	sp, r7
 8018f70:	b007      	add	sp, #28
 8018f72:	bd90      	pop	{r4, r7, pc}

08018f74 <USBD_GetLen>:
  *         return the string length
   * @param  buf : pointer to the ascii string buffer
  * @retval string length
  */
static uint8_t USBD_GetLen(uint8_t *buf)
{
 8018f74:	b580      	push	{r7, lr}
 8018f76:	b084      	sub	sp, #16
 8018f78:	af00      	add	r7, sp, #0
 8018f7a:	6078      	str	r0, [r7, #4]
  uint8_t  len = 0U;
 8018f7c:	230f      	movs	r3, #15
 8018f7e:	18fb      	adds	r3, r7, r3
 8018f80:	2200      	movs	r2, #0
 8018f82:	701a      	strb	r2, [r3, #0]

  while (*buf != '\0')
 8018f84:	e008      	b.n	8018f98 <USBD_GetLen+0x24>
  {
    len++;
 8018f86:	210f      	movs	r1, #15
 8018f88:	187b      	adds	r3, r7, r1
 8018f8a:	781a      	ldrb	r2, [r3, #0]
 8018f8c:	187b      	adds	r3, r7, r1
 8018f8e:	3201      	adds	r2, #1
 8018f90:	701a      	strb	r2, [r3, #0]
    buf++;
 8018f92:	687b      	ldr	r3, [r7, #4]
 8018f94:	3301      	adds	r3, #1
 8018f96:	607b      	str	r3, [r7, #4]
  while (*buf != '\0')
 8018f98:	687b      	ldr	r3, [r7, #4]
 8018f9a:	781b      	ldrb	r3, [r3, #0]
 8018f9c:	2b00      	cmp	r3, #0
 8018f9e:	d1f2      	bne.n	8018f86 <USBD_GetLen+0x12>
  }

  return len;
 8018fa0:	230f      	movs	r3, #15
 8018fa2:	18fb      	adds	r3, r7, r3
 8018fa4:	781b      	ldrb	r3, [r3, #0]
}
 8018fa6:	0018      	movs	r0, r3
 8018fa8:	46bd      	mov	sp, r7
 8018faa:	b004      	add	sp, #16
 8018fac:	bd80      	pop	{r7, pc}

08018fae <USBD_CtlSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendData(USBD_HandleTypeDef *pdev,
                                    uint8_t *pbuf, uint16_t len)
{
 8018fae:	b580      	push	{r7, lr}
 8018fb0:	b084      	sub	sp, #16
 8018fb2:	af00      	add	r7, sp, #0
 8018fb4:	60f8      	str	r0, [r7, #12]
 8018fb6:	60b9      	str	r1, [r7, #8]
 8018fb8:	1dbb      	adds	r3, r7, #6
 8018fba:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_IN;
 8018fbc:	68fa      	ldr	r2, [r7, #12]
 8018fbe:	23a5      	movs	r3, #165	@ 0xa5
 8018fc0:	009b      	lsls	r3, r3, #2
 8018fc2:	2102      	movs	r1, #2
 8018fc4:	50d1      	str	r1, [r2, r3]
  pdev->ep_in[0].total_length = len;
 8018fc6:	1dbb      	adds	r3, r7, #6
 8018fc8:	881a      	ldrh	r2, [r3, #0]
 8018fca:	68fb      	ldr	r3, [r7, #12]
 8018fcc:	61da      	str	r2, [r3, #28]
  pdev->ep_in[0].rem_length   = len;
 8018fce:	1dbb      	adds	r3, r7, #6
 8018fd0:	881a      	ldrh	r2, [r3, #0]
 8018fd2:	68fb      	ldr	r3, [r7, #12]
 8018fd4:	621a      	str	r2, [r3, #32]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8018fd6:	1dbb      	adds	r3, r7, #6
 8018fd8:	881b      	ldrh	r3, [r3, #0]
 8018fda:	68ba      	ldr	r2, [r7, #8]
 8018fdc:	68f8      	ldr	r0, [r7, #12]
 8018fde:	2100      	movs	r1, #0
 8018fe0:	f000 fd41 	bl	8019a66 <USBD_LL_Transmit>

  return USBD_OK;
 8018fe4:	2300      	movs	r3, #0
}
 8018fe6:	0018      	movs	r0, r3
 8018fe8:	46bd      	mov	sp, r7
 8018fea:	b004      	add	sp, #16
 8018fec:	bd80      	pop	{r7, pc}

08018fee <USBD_CtlContinueSendData>:
* @param  len: length of data to be sent
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueSendData(USBD_HandleTypeDef *pdev,
                                            uint8_t *pbuf, uint16_t len)
{
 8018fee:	b580      	push	{r7, lr}
 8018ff0:	b084      	sub	sp, #16
 8018ff2:	af00      	add	r7, sp, #0
 8018ff4:	60f8      	str	r0, [r7, #12]
 8018ff6:	60b9      	str	r1, [r7, #8]
 8018ff8:	1dbb      	adds	r3, r7, #6
 8018ffa:	801a      	strh	r2, [r3, #0]
  /* Start the next transfer */
  USBD_LL_Transmit(pdev, 0x00U, pbuf, len);
 8018ffc:	1dbb      	adds	r3, r7, #6
 8018ffe:	881b      	ldrh	r3, [r3, #0]
 8019000:	68ba      	ldr	r2, [r7, #8]
 8019002:	68f8      	ldr	r0, [r7, #12]
 8019004:	2100      	movs	r1, #0
 8019006:	f000 fd2e 	bl	8019a66 <USBD_LL_Transmit>

  return USBD_OK;
 801900a:	2300      	movs	r3, #0
}
 801900c:	0018      	movs	r0, r3
 801900e:	46bd      	mov	sp, r7
 8019010:	b004      	add	sp, #16
 8019012:	bd80      	pop	{r7, pc}

08019014 <USBD_CtlPrepareRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlPrepareRx(USBD_HandleTypeDef *pdev,
                                     uint8_t *pbuf, uint16_t len)
{
 8019014:	b580      	push	{r7, lr}
 8019016:	b084      	sub	sp, #16
 8019018:	af00      	add	r7, sp, #0
 801901a:	60f8      	str	r0, [r7, #12]
 801901c:	60b9      	str	r1, [r7, #8]
 801901e:	1dbb      	adds	r3, r7, #6
 8019020:	801a      	strh	r2, [r3, #0]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_DATA_OUT;
 8019022:	68fa      	ldr	r2, [r7, #12]
 8019024:	23a5      	movs	r3, #165	@ 0xa5
 8019026:	009b      	lsls	r3, r3, #2
 8019028:	2103      	movs	r1, #3
 801902a:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].total_length = len;
 801902c:	1dbb      	adds	r3, r7, #6
 801902e:	8819      	ldrh	r1, [r3, #0]
 8019030:	68fa      	ldr	r2, [r7, #12]
 8019032:	23ae      	movs	r3, #174	@ 0xae
 8019034:	005b      	lsls	r3, r3, #1
 8019036:	50d1      	str	r1, [r2, r3]
  pdev->ep_out[0].rem_length   = len;
 8019038:	1dbb      	adds	r3, r7, #6
 801903a:	8819      	ldrh	r1, [r3, #0]
 801903c:	68fa      	ldr	r2, [r7, #12]
 801903e:	23b0      	movs	r3, #176	@ 0xb0
 8019040:	005b      	lsls	r3, r3, #1
 8019042:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 8019044:	1dbb      	adds	r3, r7, #6
 8019046:	881b      	ldrh	r3, [r3, #0]
 8019048:	68ba      	ldr	r2, [r7, #8]
 801904a:	68f8      	ldr	r0, [r7, #12]
 801904c:	2100      	movs	r1, #0
 801904e:	f000 fd41 	bl	8019ad4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8019052:	2300      	movs	r3, #0
}
 8019054:	0018      	movs	r0, r3
 8019056:	46bd      	mov	sp, r7
 8019058:	b004      	add	sp, #16
 801905a:	bd80      	pop	{r7, pc}

0801905c <USBD_CtlContinueRx>:
* @param  len: length of data to be received
* @retval status
*/
USBD_StatusTypeDef USBD_CtlContinueRx(USBD_HandleTypeDef *pdev,
                                      uint8_t *pbuf, uint16_t len)
{
 801905c:	b580      	push	{r7, lr}
 801905e:	b084      	sub	sp, #16
 8019060:	af00      	add	r7, sp, #0
 8019062:	60f8      	str	r0, [r7, #12]
 8019064:	60b9      	str	r1, [r7, #8]
 8019066:	1dbb      	adds	r3, r7, #6
 8019068:	801a      	strh	r2, [r3, #0]
  USBD_LL_PrepareReceive(pdev, 0U, pbuf, len);
 801906a:	1dbb      	adds	r3, r7, #6
 801906c:	881b      	ldrh	r3, [r3, #0]
 801906e:	68ba      	ldr	r2, [r7, #8]
 8019070:	68f8      	ldr	r0, [r7, #12]
 8019072:	2100      	movs	r1, #0
 8019074:	f000 fd2e 	bl	8019ad4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 8019078:	2300      	movs	r3, #0
}
 801907a:	0018      	movs	r0, r3
 801907c:	46bd      	mov	sp, r7
 801907e:	b004      	add	sp, #16
 8019080:	bd80      	pop	{r7, pc}

08019082 <USBD_CtlSendStatus>:
*         send zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlSendStatus(USBD_HandleTypeDef *pdev)
{
 8019082:	b580      	push	{r7, lr}
 8019084:	b082      	sub	sp, #8
 8019086:	af00      	add	r7, sp, #0
 8019088:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_IN;
 801908a:	687a      	ldr	r2, [r7, #4]
 801908c:	23a5      	movs	r3, #165	@ 0xa5
 801908e:	009b      	lsls	r3, r3, #2
 8019090:	2104      	movs	r1, #4
 8019092:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_Transmit(pdev, 0x00U, NULL, 0U);
 8019094:	6878      	ldr	r0, [r7, #4]
 8019096:	2300      	movs	r3, #0
 8019098:	2200      	movs	r2, #0
 801909a:	2100      	movs	r1, #0
 801909c:	f000 fce3 	bl	8019a66 <USBD_LL_Transmit>

  return USBD_OK;
 80190a0:	2300      	movs	r3, #0
}
 80190a2:	0018      	movs	r0, r3
 80190a4:	46bd      	mov	sp, r7
 80190a6:	b002      	add	sp, #8
 80190a8:	bd80      	pop	{r7, pc}

080190aa <USBD_CtlReceiveStatus>:
*         receive zero lzngth packet on the ctl pipe
* @param  pdev: device instance
* @retval status
*/
USBD_StatusTypeDef USBD_CtlReceiveStatus(USBD_HandleTypeDef *pdev)
{
 80190aa:	b580      	push	{r7, lr}
 80190ac:	b082      	sub	sp, #8
 80190ae:	af00      	add	r7, sp, #0
 80190b0:	6078      	str	r0, [r7, #4]
  /* Set EP0 State */
  pdev->ep0_state = USBD_EP0_STATUS_OUT;
 80190b2:	687a      	ldr	r2, [r7, #4]
 80190b4:	23a5      	movs	r3, #165	@ 0xa5
 80190b6:	009b      	lsls	r3, r3, #2
 80190b8:	2105      	movs	r1, #5
 80190ba:	50d1      	str	r1, [r2, r3]

  /* Start the transfer */
  USBD_LL_PrepareReceive(pdev, 0U, NULL, 0U);
 80190bc:	6878      	ldr	r0, [r7, #4]
 80190be:	2300      	movs	r3, #0
 80190c0:	2200      	movs	r2, #0
 80190c2:	2100      	movs	r1, #0
 80190c4:	f000 fd06 	bl	8019ad4 <USBD_LL_PrepareReceive>

  return USBD_OK;
 80190c8:	2300      	movs	r3, #0
}
 80190ca:	0018      	movs	r0, r3
 80190cc:	46bd      	mov	sp, r7
 80190ce:	b002      	add	sp, #8
 80190d0:	bd80      	pop	{r7, pc}
	...

080190d4 <MX_USB_DEVICE_Init>:
/**
  * Init USB device Library, add supported class and start the library
  * @retval None
  */
void MX_USB_DEVICE_Init(void)
{
 80190d4:	b580      	push	{r7, lr}
 80190d6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USB_DEVICE_Init_PreTreatment */

  /* USER CODE END USB_DEVICE_Init_PreTreatment */

  /* Init Device Library, add supported class and start the library. */
  if (USBD_Init(&hUsbDeviceFS, &FS_Desc, DEVICE_FS) != USBD_OK)
 80190d8:	4914      	ldr	r1, [pc, #80]	@ (801912c <MX_USB_DEVICE_Init+0x58>)
 80190da:	4b15      	ldr	r3, [pc, #84]	@ (8019130 <MX_USB_DEVICE_Init+0x5c>)
 80190dc:	2200      	movs	r2, #0
 80190de:	0018      	movs	r0, r3
 80190e0:	f7fe fdec 	bl	8017cbc <USBD_Init>
 80190e4:	1e03      	subs	r3, r0, #0
 80190e6:	d001      	beq.n	80190ec <MX_USB_DEVICE_Init+0x18>
  {
    Error_Handler();
 80190e8:	f7ee f99c 	bl	8007424 <Error_Handler>
  }
  if (USBD_RegisterClass(&hUsbDeviceFS, &USBD_CDC) != USBD_OK)
 80190ec:	4a11      	ldr	r2, [pc, #68]	@ (8019134 <MX_USB_DEVICE_Init+0x60>)
 80190ee:	4b10      	ldr	r3, [pc, #64]	@ (8019130 <MX_USB_DEVICE_Init+0x5c>)
 80190f0:	0011      	movs	r1, r2
 80190f2:	0018      	movs	r0, r3
 80190f4:	f7fe fe13 	bl	8017d1e <USBD_RegisterClass>
 80190f8:	1e03      	subs	r3, r0, #0
 80190fa:	d001      	beq.n	8019100 <MX_USB_DEVICE_Init+0x2c>
  {
    Error_Handler();
 80190fc:	f7ee f992 	bl	8007424 <Error_Handler>
  }
  if (USBD_CDC_RegisterInterface(&hUsbDeviceFS, &USBD_Interface_fops_FS) != USBD_OK)
 8019100:	4a0d      	ldr	r2, [pc, #52]	@ (8019138 <MX_USB_DEVICE_Init+0x64>)
 8019102:	4b0b      	ldr	r3, [pc, #44]	@ (8019130 <MX_USB_DEVICE_Init+0x5c>)
 8019104:	0011      	movs	r1, r2
 8019106:	0018      	movs	r0, r3
 8019108:	f7fe fd28 	bl	8017b5c <USBD_CDC_RegisterInterface>
 801910c:	1e03      	subs	r3, r0, #0
 801910e:	d001      	beq.n	8019114 <MX_USB_DEVICE_Init+0x40>
  {
    Error_Handler();
 8019110:	f7ee f988 	bl	8007424 <Error_Handler>
  }
  if (USBD_Start(&hUsbDeviceFS) != USBD_OK)
 8019114:	4b06      	ldr	r3, [pc, #24]	@ (8019130 <MX_USB_DEVICE_Init+0x5c>)
 8019116:	0018      	movs	r0, r3
 8019118:	f7fe fe21 	bl	8017d5e <USBD_Start>
 801911c:	1e03      	subs	r3, r0, #0
 801911e:	d001      	beq.n	8019124 <MX_USB_DEVICE_Init+0x50>
  {
    Error_Handler();
 8019120:	f7ee f980 	bl	8007424 <Error_Handler>
  }

  /* USER CODE BEGIN USB_DEVICE_Init_PostTreatment */

  /* USER CODE END USB_DEVICE_Init_PostTreatment */
}
 8019124:	46c0      	nop			@ (mov r8, r8)
 8019126:	46bd      	mov	sp, r7
 8019128:	bd80      	pop	{r7, pc}
 801912a:	46c0      	nop			@ (mov r8, r8)
 801912c:	20000200 	.word	0x20000200
 8019130:	200024dc 	.word	0x200024dc
 8019134:	200000ec 	.word	0x200000ec
 8019138:	200001f0 	.word	0x200001f0

0801913c <CDC_Init_FS>:
/**
  * @brief  Initializes the CDC media low layer over the FS USB IP
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Init_FS(void)
{
 801913c:	b580      	push	{r7, lr}
 801913e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 3 */
  /* Set Application Buffers */
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, UserTxBufferFS, 0);
 8019140:	4907      	ldr	r1, [pc, #28]	@ (8019160 <CDC_Init_FS+0x24>)
 8019142:	4b08      	ldr	r3, [pc, #32]	@ (8019164 <CDC_Init_FS+0x28>)
 8019144:	2200      	movs	r2, #0
 8019146:	0018      	movs	r0, r3
 8019148:	f7fe fd23 	bl	8017b92 <USBD_CDC_SetTxBuffer>
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, UserRxBufferFS);
 801914c:	4a06      	ldr	r2, [pc, #24]	@ (8019168 <CDC_Init_FS+0x2c>)
 801914e:	4b05      	ldr	r3, [pc, #20]	@ (8019164 <CDC_Init_FS+0x28>)
 8019150:	0011      	movs	r1, r2
 8019152:	0018      	movs	r0, r3
 8019154:	f7fe fd39 	bl	8017bca <USBD_CDC_SetRxBuffer>
  return (USBD_OK);
 8019158:	2300      	movs	r3, #0
  /* USER CODE END 3 */
}
 801915a:	0018      	movs	r0, r3
 801915c:	46bd      	mov	sp, r7
 801915e:	bd80      	pop	{r7, pc}
 8019160:	20002c60 	.word	0x20002c60
 8019164:	200024dc 	.word	0x200024dc
 8019168:	20002860 	.word	0x20002860

0801916c <CDC_DeInit_FS>:
/**
  * @brief  DeInitializes the CDC media low layer
  * @retval USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_DeInit_FS(void)
{
 801916c:	b580      	push	{r7, lr}
 801916e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN 4 */
  return (USBD_OK);
 8019170:	2300      	movs	r3, #0
  /* USER CODE END 4 */
}
 8019172:	0018      	movs	r0, r3
 8019174:	46bd      	mov	sp, r7
 8019176:	bd80      	pop	{r7, pc}

08019178 <CDC_Control_FS>:
  * @param  pbuf: Buffer containing command data (request parameters)
  * @param  length: Number of data to be sent (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Control_FS(uint8_t cmd, uint8_t* pbuf, uint16_t length)
{
 8019178:	b580      	push	{r7, lr}
 801917a:	b082      	sub	sp, #8
 801917c:	af00      	add	r7, sp, #0
 801917e:	6039      	str	r1, [r7, #0]
 8019180:	0011      	movs	r1, r2
 8019182:	1dfb      	adds	r3, r7, #7
 8019184:	1c02      	adds	r2, r0, #0
 8019186:	701a      	strb	r2, [r3, #0]
 8019188:	1d3b      	adds	r3, r7, #4
 801918a:	1c0a      	adds	r2, r1, #0
 801918c:	801a      	strh	r2, [r3, #0]
  /* USER CODE BEGIN 5 */
  switch(cmd)
 801918e:	1dfb      	adds	r3, r7, #7
 8019190:	781b      	ldrb	r3, [r3, #0]
 8019192:	2b23      	cmp	r3, #35	@ 0x23
 8019194:	d804      	bhi.n	80191a0 <CDC_Control_FS+0x28>
 8019196:	009a      	lsls	r2, r3, #2
 8019198:	4b04      	ldr	r3, [pc, #16]	@ (80191ac <CDC_Control_FS+0x34>)
 801919a:	18d3      	adds	r3, r2, r3
 801919c:	681b      	ldr	r3, [r3, #0]
 801919e:	469f      	mov	pc, r3
    case CDC_SEND_BREAK:

    break;

  default:
    break;
 80191a0:	46c0      	nop			@ (mov r8, r8)
  }

  return (USBD_OK);
 80191a2:	2300      	movs	r3, #0
  /* USER CODE END 5 */
}
 80191a4:	0018      	movs	r0, r3
 80191a6:	46bd      	mov	sp, r7
 80191a8:	b002      	add	sp, #8
 80191aa:	bd80      	pop	{r7, pc}
 80191ac:	08020ad0 	.word	0x08020ad0

080191b0 <CDC_Receive_FS>:
  * @param  Buf: Buffer of data to be received
  * @param  Len: Number of data received (in bytes)
  * @retval Result of the operation: USBD_OK if all operations are OK else USBD_FAIL
  */
static int8_t CDC_Receive_FS(uint8_t* Buf, uint32_t *Len)
{
 80191b0:	b580      	push	{r7, lr}
 80191b2:	b082      	sub	sp, #8
 80191b4:	af00      	add	r7, sp, #0
 80191b6:	6078      	str	r0, [r7, #4]
 80191b8:	6039      	str	r1, [r7, #0]
  /* USER CODE BEGIN 6 */
  if (ESPProg)
 80191ba:	4b12      	ldr	r3, [pc, #72]	@ (8019204 <CDC_Receive_FS+0x54>)
 80191bc:	781b      	ldrb	r3, [r3, #0]
 80191be:	2b00      	cmp	r3, #0
 80191c0:	d013      	beq.n	80191ea <CDC_Receive_FS+0x3a>
  {
    HAL_UART_Transmit(&UsedUart, Buf, *Len, HAL_MAX_DELAY);
 80191c2:	683b      	ldr	r3, [r7, #0]
 80191c4:	681b      	ldr	r3, [r3, #0]
 80191c6:	b29a      	uxth	r2, r3
 80191c8:	2301      	movs	r3, #1
 80191ca:	425b      	negs	r3, r3
 80191cc:	6879      	ldr	r1, [r7, #4]
 80191ce:	480e      	ldr	r0, [pc, #56]	@ (8019208 <CDC_Receive_FS+0x58>)
 80191d0:	f7fa fa46 	bl	8013660 <HAL_UART_Transmit>
    USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &Buf[0]);
 80191d4:	687a      	ldr	r2, [r7, #4]
 80191d6:	4b0d      	ldr	r3, [pc, #52]	@ (801920c <CDC_Receive_FS+0x5c>)
 80191d8:	0011      	movs	r1, r2
 80191da:	0018      	movs	r0, r3
 80191dc:	f7fe fcf5 	bl	8017bca <USBD_CDC_SetRxBuffer>
    USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80191e0:	4b0a      	ldr	r3, [pc, #40]	@ (801920c <CDC_Receive_FS+0x5c>)
 80191e2:	0018      	movs	r0, r3
 80191e4:	f7fe fd3c 	bl	8017c60 <USBD_CDC_ReceivePacket>
 80191e8:	e006      	b.n	80191f8 <CDC_Receive_FS+0x48>
  }
  else
   {
     UsbRxDataSize += *Len;
 80191ea:	683b      	ldr	r3, [r7, #0]
 80191ec:	681a      	ldr	r2, [r3, #0]
 80191ee:	4b08      	ldr	r3, [pc, #32]	@ (8019210 <CDC_Receive_FS+0x60>)
 80191f0:	681b      	ldr	r3, [r3, #0]
 80191f2:	18d2      	adds	r2, r2, r3
 80191f4:	4b06      	ldr	r3, [pc, #24]	@ (8019210 <CDC_Receive_FS+0x60>)
 80191f6:	601a      	str	r2, [r3, #0]
   }
   return (USBD_OK);
 80191f8:	2300      	movs	r3, #0
  /* USER CODE END 6 */
}
 80191fa:	0018      	movs	r0, r3
 80191fc:	46bd      	mov	sp, r7
 80191fe:	b002      	add	sp, #8
 8019200:	bd80      	pop	{r7, pc}
 8019202:	46c0      	nop			@ (mov r8, r8)
 8019204:	200027a0 	.word	0x200027a0
 8019208:	200027a4 	.word	0x200027a4
 801920c:	200024dc 	.word	0x200024dc
 8019210:	2000285c 	.word	0x2000285c

08019214 <CDC_Transmit_FS>:
  * @param  Buf: Buffer of data to be sent
  * @param  Len: Number of data to be sent (in bytes)
  * @retval USBD_OK if all operations are OK else USBD_FAIL or USBD_BUSY
  */
uint8_t CDC_Transmit_FS(uint8_t* Buf, uint16_t Len)
{
 8019214:	b5b0      	push	{r4, r5, r7, lr}
 8019216:	b084      	sub	sp, #16
 8019218:	af00      	add	r7, sp, #0
 801921a:	6078      	str	r0, [r7, #4]
 801921c:	000a      	movs	r2, r1
 801921e:	1cbb      	adds	r3, r7, #2
 8019220:	801a      	strh	r2, [r3, #0]
  uint8_t result = USBD_OK;
 8019222:	230f      	movs	r3, #15
 8019224:	18fb      	adds	r3, r7, r3
 8019226:	2200      	movs	r2, #0
 8019228:	701a      	strb	r2, [r3, #0]
  /* USER CODE BEGIN 7 */
  USBD_CDC_HandleTypeDef *hcdc = (USBD_CDC_HandleTypeDef*)hUsbDeviceFS.pClassData;
 801922a:	4a11      	ldr	r2, [pc, #68]	@ (8019270 <CDC_Transmit_FS+0x5c>)
 801922c:	23ae      	movs	r3, #174	@ 0xae
 801922e:	009b      	lsls	r3, r3, #2
 8019230:	58d3      	ldr	r3, [r2, r3]
 8019232:	60bb      	str	r3, [r7, #8]
  if (hcdc->TxState != 0){
 8019234:	68ba      	ldr	r2, [r7, #8]
 8019236:	2385      	movs	r3, #133	@ 0x85
 8019238:	009b      	lsls	r3, r3, #2
 801923a:	58d3      	ldr	r3, [r2, r3]
 801923c:	2b00      	cmp	r3, #0
 801923e:	d001      	beq.n	8019244 <CDC_Transmit_FS+0x30>
    return USBD_BUSY;
 8019240:	2301      	movs	r3, #1
 8019242:	e010      	b.n	8019266 <CDC_Transmit_FS+0x52>
  }
  USBD_CDC_SetTxBuffer(&hUsbDeviceFS, Buf, Len);
 8019244:	1cbb      	adds	r3, r7, #2
 8019246:	881a      	ldrh	r2, [r3, #0]
 8019248:	6879      	ldr	r1, [r7, #4]
 801924a:	4b09      	ldr	r3, [pc, #36]	@ (8019270 <CDC_Transmit_FS+0x5c>)
 801924c:	0018      	movs	r0, r3
 801924e:	f7fe fca0 	bl	8017b92 <USBD_CDC_SetTxBuffer>
  result = USBD_CDC_TransmitPacket(&hUsbDeviceFS);
 8019252:	250f      	movs	r5, #15
 8019254:	197c      	adds	r4, r7, r5
 8019256:	4b06      	ldr	r3, [pc, #24]	@ (8019270 <CDC_Transmit_FS+0x5c>)
 8019258:	0018      	movs	r0, r3
 801925a:	f7fe fcca 	bl	8017bf2 <USBD_CDC_TransmitPacket>
 801925e:	0003      	movs	r3, r0
 8019260:	7023      	strb	r3, [r4, #0]
  /* USER CODE END 7 */
  return result;
 8019262:	197b      	adds	r3, r7, r5
 8019264:	781b      	ldrb	r3, [r3, #0]
}
 8019266:	0018      	movs	r0, r3
 8019268:	46bd      	mov	sp, r7
 801926a:	b004      	add	sp, #16
 801926c:	bdb0      	pop	{r4, r5, r7, pc}
 801926e:	46c0      	nop			@ (mov r8, r8)
 8019270:	200024dc 	.word	0x200024dc

08019274 <EnableESPProg>:

/* USER CODE BEGIN PRIVATE_FUNCTIONS_IMPLEMENTATION */
void EnableESPProg(){
 8019274:	b580      	push	{r7, lr}
 8019276:	af00      	add	r7, sp, #0
  ESPProg = true;
 8019278:	4b02      	ldr	r3, [pc, #8]	@ (8019284 <EnableESPProg+0x10>)
 801927a:	2201      	movs	r2, #1
 801927c:	701a      	strb	r2, [r3, #0]
}
 801927e:	46c0      	nop			@ (mov r8, r8)
 8019280:	46bd      	mov	sp, r7
 8019282:	bd80      	pop	{r7, pc}
 8019284:	200027a0 	.word	0x200027a0

08019288 <GetUsbRxPointer>:
{
  UsedUart = *uart;
}

uint8_t* GetUsbRxPointer(void)
{
 8019288:	b580      	push	{r7, lr}
 801928a:	af00      	add	r7, sp, #0
  return UserRxBufferFS;
 801928c:	4b01      	ldr	r3, [pc, #4]	@ (8019294 <GetUsbRxPointer+0xc>)
}
 801928e:	0018      	movs	r0, r3
 8019290:	46bd      	mov	sp, r7
 8019292:	bd80      	pop	{r7, pc}
 8019294:	20002860 	.word	0x20002860

08019298 <ResetUsbRxDataSize>:

void ResetUsbRxDataSize(void)
{
 8019298:	b580      	push	{r7, lr}
 801929a:	af00      	add	r7, sp, #0
  UsbRxDataSize = 0;
 801929c:	4b07      	ldr	r3, [pc, #28]	@ (80192bc <ResetUsbRxDataSize+0x24>)
 801929e:	2200      	movs	r2, #0
 80192a0:	601a      	str	r2, [r3, #0]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[0]);
 80192a2:	4a07      	ldr	r2, [pc, #28]	@ (80192c0 <ResetUsbRxDataSize+0x28>)
 80192a4:	4b07      	ldr	r3, [pc, #28]	@ (80192c4 <ResetUsbRxDataSize+0x2c>)
 80192a6:	0011      	movs	r1, r2
 80192a8:	0018      	movs	r0, r3
 80192aa:	f7fe fc8e 	bl	8017bca <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80192ae:	4b05      	ldr	r3, [pc, #20]	@ (80192c4 <ResetUsbRxDataSize+0x2c>)
 80192b0:	0018      	movs	r0, r3
 80192b2:	f7fe fcd5 	bl	8017c60 <USBD_CDC_ReceivePacket>
}
 80192b6:	46c0      	nop			@ (mov r8, r8)
 80192b8:	46bd      	mov	sp, r7
 80192ba:	bd80      	pop	{r7, pc}
 80192bc:	2000285c 	.word	0x2000285c
 80192c0:	20002860 	.word	0x20002860
 80192c4:	200024dc 	.word	0x200024dc

080192c8 <GetUsbRxDataSize>:

uint32_t GetUsbRxDataSize()
{
 80192c8:	b580      	push	{r7, lr}
 80192ca:	af00      	add	r7, sp, #0
  return UsbRxDataSize;
 80192cc:	4b02      	ldr	r3, [pc, #8]	@ (80192d8 <GetUsbRxDataSize+0x10>)
 80192ce:	681b      	ldr	r3, [r3, #0]
}
 80192d0:	0018      	movs	r0, r3
 80192d2:	46bd      	mov	sp, r7
 80192d4:	bd80      	pop	{r7, pc}
 80192d6:	46c0      	nop			@ (mov r8, r8)
 80192d8:	2000285c 	.word	0x2000285c

080192dc <GetUsbRxNextChunk>:

void GetUsbRxNextChunk(uint32_t writePointer)
{
 80192dc:	b580      	push	{r7, lr}
 80192de:	b082      	sub	sp, #8
 80192e0:	af00      	add	r7, sp, #0
 80192e2:	6078      	str	r0, [r7, #4]
  USBD_CDC_SetRxBuffer(&hUsbDeviceFS, &UserRxBufferFS[writePointer]);
 80192e4:	687a      	ldr	r2, [r7, #4]
 80192e6:	4b07      	ldr	r3, [pc, #28]	@ (8019304 <GetUsbRxNextChunk+0x28>)
 80192e8:	18d2      	adds	r2, r2, r3
 80192ea:	4b07      	ldr	r3, [pc, #28]	@ (8019308 <GetUsbRxNextChunk+0x2c>)
 80192ec:	0011      	movs	r1, r2
 80192ee:	0018      	movs	r0, r3
 80192f0:	f7fe fc6b 	bl	8017bca <USBD_CDC_SetRxBuffer>
  USBD_CDC_ReceivePacket(&hUsbDeviceFS);
 80192f4:	4b04      	ldr	r3, [pc, #16]	@ (8019308 <GetUsbRxNextChunk+0x2c>)
 80192f6:	0018      	movs	r0, r3
 80192f8:	f7fe fcb2 	bl	8017c60 <USBD_CDC_ReceivePacket>
}
 80192fc:	46c0      	nop			@ (mov r8, r8)
 80192fe:	46bd      	mov	sp, r7
 8019300:	b002      	add	sp, #8
 8019302:	bd80      	pop	{r7, pc}
 8019304:	20002860 	.word	0x20002860
 8019308:	200024dc 	.word	0x200024dc

0801930c <USBD_FS_DeviceDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_DeviceDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 801930c:	b580      	push	{r7, lr}
 801930e:	b082      	sub	sp, #8
 8019310:	af00      	add	r7, sp, #0
 8019312:	0002      	movs	r2, r0
 8019314:	6039      	str	r1, [r7, #0]
 8019316:	1dfb      	adds	r3, r7, #7
 8019318:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_FS_DeviceDesc);
 801931a:	683b      	ldr	r3, [r7, #0]
 801931c:	2212      	movs	r2, #18
 801931e:	801a      	strh	r2, [r3, #0]
  return USBD_FS_DeviceDesc;
 8019320:	4b02      	ldr	r3, [pc, #8]	@ (801932c <USBD_FS_DeviceDescriptor+0x20>)
}
 8019322:	0018      	movs	r0, r3
 8019324:	46bd      	mov	sp, r7
 8019326:	b002      	add	sp, #8
 8019328:	bd80      	pop	{r7, pc}
 801932a:	46c0      	nop			@ (mov r8, r8)
 801932c:	2000021c 	.word	0x2000021c

08019330 <USBD_FS_LangIDStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_LangIDStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019330:	b580      	push	{r7, lr}
 8019332:	b082      	sub	sp, #8
 8019334:	af00      	add	r7, sp, #0
 8019336:	0002      	movs	r2, r0
 8019338:	6039      	str	r1, [r7, #0]
 801933a:	1dfb      	adds	r3, r7, #7
 801933c:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = sizeof(USBD_LangIDDesc);
 801933e:	683b      	ldr	r3, [r7, #0]
 8019340:	2204      	movs	r2, #4
 8019342:	801a      	strh	r2, [r3, #0]
  return USBD_LangIDDesc;
 8019344:	4b02      	ldr	r3, [pc, #8]	@ (8019350 <USBD_FS_LangIDStrDescriptor+0x20>)
}
 8019346:	0018      	movs	r0, r3
 8019348:	46bd      	mov	sp, r7
 801934a:	b002      	add	sp, #8
 801934c:	bd80      	pop	{r7, pc}
 801934e:	46c0      	nop			@ (mov r8, r8)
 8019350:	20000230 	.word	0x20000230

08019354 <USBD_FS_ProductStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ProductStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019354:	b580      	push	{r7, lr}
 8019356:	b082      	sub	sp, #8
 8019358:	af00      	add	r7, sp, #0
 801935a:	0002      	movs	r2, r0
 801935c:	6039      	str	r1, [r7, #0]
 801935e:	1dfb      	adds	r3, r7, #7
 8019360:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 8019362:	1dfb      	adds	r3, r7, #7
 8019364:	781b      	ldrb	r3, [r3, #0]
 8019366:	2b00      	cmp	r3, #0
 8019368:	d106      	bne.n	8019378 <USBD_FS_ProductStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 801936a:	683a      	ldr	r2, [r7, #0]
 801936c:	4908      	ldr	r1, [pc, #32]	@ (8019390 <USBD_FS_ProductStrDescriptor+0x3c>)
 801936e:	4b09      	ldr	r3, [pc, #36]	@ (8019394 <USBD_FS_ProductStrDescriptor+0x40>)
 8019370:	0018      	movs	r0, r3
 8019372:	f7ff fdb1 	bl	8018ed8 <USBD_GetString>
 8019376:	e005      	b.n	8019384 <USBD_FS_ProductStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_PRODUCT_STRING_FS, USBD_StrDesc, length);
 8019378:	683a      	ldr	r2, [r7, #0]
 801937a:	4905      	ldr	r1, [pc, #20]	@ (8019390 <USBD_FS_ProductStrDescriptor+0x3c>)
 801937c:	4b05      	ldr	r3, [pc, #20]	@ (8019394 <USBD_FS_ProductStrDescriptor+0x40>)
 801937e:	0018      	movs	r0, r3
 8019380:	f7ff fdaa 	bl	8018ed8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8019384:	4b02      	ldr	r3, [pc, #8]	@ (8019390 <USBD_FS_ProductStrDescriptor+0x3c>)
}
 8019386:	0018      	movs	r0, r3
 8019388:	46bd      	mov	sp, r7
 801938a:	b002      	add	sp, #8
 801938c:	bd80      	pop	{r7, pc}
 801938e:	46c0      	nop			@ (mov r8, r8)
 8019390:	20003060 	.word	0x20003060
 8019394:	080205f0 	.word	0x080205f0

08019398 <USBD_FS_ManufacturerStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ManufacturerStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019398:	b580      	push	{r7, lr}
 801939a:	b082      	sub	sp, #8
 801939c:	af00      	add	r7, sp, #0
 801939e:	0002      	movs	r2, r0
 80193a0:	6039      	str	r1, [r7, #0]
 80193a2:	1dfb      	adds	r3, r7, #7
 80193a4:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  USBD_GetString((uint8_t *)USBD_MANUFACTURER_STRING, USBD_StrDesc, length);
 80193a6:	683a      	ldr	r2, [r7, #0]
 80193a8:	4904      	ldr	r1, [pc, #16]	@ (80193bc <USBD_FS_ManufacturerStrDescriptor+0x24>)
 80193aa:	4b05      	ldr	r3, [pc, #20]	@ (80193c0 <USBD_FS_ManufacturerStrDescriptor+0x28>)
 80193ac:	0018      	movs	r0, r3
 80193ae:	f7ff fd93 	bl	8018ed8 <USBD_GetString>
  return USBD_StrDesc;
 80193b2:	4b02      	ldr	r3, [pc, #8]	@ (80193bc <USBD_FS_ManufacturerStrDescriptor+0x24>)
}
 80193b4:	0018      	movs	r0, r3
 80193b6:	46bd      	mov	sp, r7
 80193b8:	b002      	add	sp, #8
 80193ba:	bd80      	pop	{r7, pc}
 80193bc:	20003060 	.word	0x20003060
 80193c0:	08020608 	.word	0x08020608

080193c4 <USBD_FS_SerialStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_SerialStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80193c4:	b580      	push	{r7, lr}
 80193c6:	b082      	sub	sp, #8
 80193c8:	af00      	add	r7, sp, #0
 80193ca:	0002      	movs	r2, r0
 80193cc:	6039      	str	r1, [r7, #0]
 80193ce:	1dfb      	adds	r3, r7, #7
 80193d0:	701a      	strb	r2, [r3, #0]
  UNUSED(speed);
  *length = USB_SIZ_STRING_SERIAL;
 80193d2:	683b      	ldr	r3, [r7, #0]
 80193d4:	221a      	movs	r2, #26
 80193d6:	801a      	strh	r2, [r3, #0]

  /* Update the serial number string descriptor with the data from the unique
   * ID */
  Get_SerialNum();
 80193d8:	f000 f84c 	bl	8019474 <Get_SerialNum>
  /* USER CODE BEGIN USBD_FS_SerialStrDescriptor */

  /* USER CODE END USBD_FS_SerialStrDescriptor */
  return (uint8_t *) USBD_StringSerial;
 80193dc:	4b02      	ldr	r3, [pc, #8]	@ (80193e8 <USBD_FS_SerialStrDescriptor+0x24>)
}
 80193de:	0018      	movs	r0, r3
 80193e0:	46bd      	mov	sp, r7
 80193e2:	b002      	add	sp, #8
 80193e4:	bd80      	pop	{r7, pc}
 80193e6:	46c0      	nop			@ (mov r8, r8)
 80193e8:	20000234 	.word	0x20000234

080193ec <USBD_FS_ConfigStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_ConfigStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 80193ec:	b580      	push	{r7, lr}
 80193ee:	b082      	sub	sp, #8
 80193f0:	af00      	add	r7, sp, #0
 80193f2:	0002      	movs	r2, r0
 80193f4:	6039      	str	r1, [r7, #0]
 80193f6:	1dfb      	adds	r3, r7, #7
 80193f8:	701a      	strb	r2, [r3, #0]
  if(speed == USBD_SPEED_HIGH)
 80193fa:	1dfb      	adds	r3, r7, #7
 80193fc:	781b      	ldrb	r3, [r3, #0]
 80193fe:	2b00      	cmp	r3, #0
 8019400:	d106      	bne.n	8019410 <USBD_FS_ConfigStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8019402:	683a      	ldr	r2, [r7, #0]
 8019404:	4908      	ldr	r1, [pc, #32]	@ (8019428 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8019406:	4b09      	ldr	r3, [pc, #36]	@ (801942c <USBD_FS_ConfigStrDescriptor+0x40>)
 8019408:	0018      	movs	r0, r3
 801940a:	f7ff fd65 	bl	8018ed8 <USBD_GetString>
 801940e:	e005      	b.n	801941c <USBD_FS_ConfigStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_CONFIGURATION_STRING_FS, USBD_StrDesc, length);
 8019410:	683a      	ldr	r2, [r7, #0]
 8019412:	4905      	ldr	r1, [pc, #20]	@ (8019428 <USBD_FS_ConfigStrDescriptor+0x3c>)
 8019414:	4b05      	ldr	r3, [pc, #20]	@ (801942c <USBD_FS_ConfigStrDescriptor+0x40>)
 8019416:	0018      	movs	r0, r3
 8019418:	f7ff fd5e 	bl	8018ed8 <USBD_GetString>
  }
  return USBD_StrDesc;
 801941c:	4b02      	ldr	r3, [pc, #8]	@ (8019428 <USBD_FS_ConfigStrDescriptor+0x3c>)
}
 801941e:	0018      	movs	r0, r3
 8019420:	46bd      	mov	sp, r7
 8019422:	b002      	add	sp, #8
 8019424:	bd80      	pop	{r7, pc}
 8019426:	46c0      	nop			@ (mov r8, r8)
 8019428:	20003060 	.word	0x20003060
 801942c:	0802061c 	.word	0x0802061c

08019430 <USBD_FS_InterfaceStrDescriptor>:
  * @param  speed : Current device speed
  * @param  length : Pointer to data length variable
  * @retval Pointer to descriptor buffer
  */
uint8_t * USBD_FS_InterfaceStrDescriptor(USBD_SpeedTypeDef speed, uint16_t *length)
{
 8019430:	b580      	push	{r7, lr}
 8019432:	b082      	sub	sp, #8
 8019434:	af00      	add	r7, sp, #0
 8019436:	0002      	movs	r2, r0
 8019438:	6039      	str	r1, [r7, #0]
 801943a:	1dfb      	adds	r3, r7, #7
 801943c:	701a      	strb	r2, [r3, #0]
  if(speed == 0)
 801943e:	1dfb      	adds	r3, r7, #7
 8019440:	781b      	ldrb	r3, [r3, #0]
 8019442:	2b00      	cmp	r3, #0
 8019444:	d106      	bne.n	8019454 <USBD_FS_InterfaceStrDescriptor+0x24>
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8019446:	683a      	ldr	r2, [r7, #0]
 8019448:	4908      	ldr	r1, [pc, #32]	@ (801946c <USBD_FS_InterfaceStrDescriptor+0x3c>)
 801944a:	4b09      	ldr	r3, [pc, #36]	@ (8019470 <USBD_FS_InterfaceStrDescriptor+0x40>)
 801944c:	0018      	movs	r0, r3
 801944e:	f7ff fd43 	bl	8018ed8 <USBD_GetString>
 8019452:	e005      	b.n	8019460 <USBD_FS_InterfaceStrDescriptor+0x30>
  }
  else
  {
    USBD_GetString((uint8_t *)USBD_INTERFACE_STRING_FS, USBD_StrDesc, length);
 8019454:	683a      	ldr	r2, [r7, #0]
 8019456:	4905      	ldr	r1, [pc, #20]	@ (801946c <USBD_FS_InterfaceStrDescriptor+0x3c>)
 8019458:	4b05      	ldr	r3, [pc, #20]	@ (8019470 <USBD_FS_InterfaceStrDescriptor+0x40>)
 801945a:	0018      	movs	r0, r3
 801945c:	f7ff fd3c 	bl	8018ed8 <USBD_GetString>
  }
  return USBD_StrDesc;
 8019460:	4b02      	ldr	r3, [pc, #8]	@ (801946c <USBD_FS_InterfaceStrDescriptor+0x3c>)
}
 8019462:	0018      	movs	r0, r3
 8019464:	46bd      	mov	sp, r7
 8019466:	b002      	add	sp, #8
 8019468:	bd80      	pop	{r7, pc}
 801946a:	46c0      	nop			@ (mov r8, r8)
 801946c:	20003060 	.word	0x20003060
 8019470:	08020628 	.word	0x08020628

08019474 <Get_SerialNum>:
  * @brief  Create the serial number string descriptor
  * @param  None
  * @retval None
  */
static void Get_SerialNum(void)
{
 8019474:	b580      	push	{r7, lr}
 8019476:	b084      	sub	sp, #16
 8019478:	af00      	add	r7, sp, #0
  uint32_t deviceserial0;
  uint32_t deviceserial1;
  uint32_t deviceserial2;

  deviceserial0 = *(uint32_t *) DEVICE_ID1;
 801947a:	4b10      	ldr	r3, [pc, #64]	@ (80194bc <Get_SerialNum+0x48>)
 801947c:	681b      	ldr	r3, [r3, #0]
 801947e:	60fb      	str	r3, [r7, #12]
  deviceserial1 = *(uint32_t *) DEVICE_ID2;
 8019480:	4b0f      	ldr	r3, [pc, #60]	@ (80194c0 <Get_SerialNum+0x4c>)
 8019482:	681b      	ldr	r3, [r3, #0]
 8019484:	60bb      	str	r3, [r7, #8]
  deviceserial2 = *(uint32_t *) DEVICE_ID3;
 8019486:	4b0f      	ldr	r3, [pc, #60]	@ (80194c4 <Get_SerialNum+0x50>)
 8019488:	681b      	ldr	r3, [r3, #0]
 801948a:	607b      	str	r3, [r7, #4]

  deviceserial0 += deviceserial2;
 801948c:	68fa      	ldr	r2, [r7, #12]
 801948e:	687b      	ldr	r3, [r7, #4]
 8019490:	18d3      	adds	r3, r2, r3
 8019492:	60fb      	str	r3, [r7, #12]

  if (deviceserial0 != 0)
 8019494:	68fb      	ldr	r3, [r7, #12]
 8019496:	2b00      	cmp	r3, #0
 8019498:	d00b      	beq.n	80194b2 <Get_SerialNum+0x3e>
  {
    IntToUnicode(deviceserial0, &USBD_StringSerial[2], 8);
 801949a:	490b      	ldr	r1, [pc, #44]	@ (80194c8 <Get_SerialNum+0x54>)
 801949c:	68fb      	ldr	r3, [r7, #12]
 801949e:	2208      	movs	r2, #8
 80194a0:	0018      	movs	r0, r3
 80194a2:	f000 f815 	bl	80194d0 <IntToUnicode>
    IntToUnicode(deviceserial1, &USBD_StringSerial[18], 4);
 80194a6:	4909      	ldr	r1, [pc, #36]	@ (80194cc <Get_SerialNum+0x58>)
 80194a8:	68bb      	ldr	r3, [r7, #8]
 80194aa:	2204      	movs	r2, #4
 80194ac:	0018      	movs	r0, r3
 80194ae:	f000 f80f 	bl	80194d0 <IntToUnicode>
  }
}
 80194b2:	46c0      	nop			@ (mov r8, r8)
 80194b4:	46bd      	mov	sp, r7
 80194b6:	b004      	add	sp, #16
 80194b8:	bd80      	pop	{r7, pc}
 80194ba:	46c0      	nop			@ (mov r8, r8)
 80194bc:	1ff80050 	.word	0x1ff80050
 80194c0:	1ff80054 	.word	0x1ff80054
 80194c4:	1ff80058 	.word	0x1ff80058
 80194c8:	20000236 	.word	0x20000236
 80194cc:	20000246 	.word	0x20000246

080194d0 <IntToUnicode>:
  * @param  pbuf: pointer to the buffer
  * @param  len: buffer length
  * @retval None
  */
static void IntToUnicode(uint32_t value, uint8_t * pbuf, uint8_t len)
{
 80194d0:	b580      	push	{r7, lr}
 80194d2:	b086      	sub	sp, #24
 80194d4:	af00      	add	r7, sp, #0
 80194d6:	60f8      	str	r0, [r7, #12]
 80194d8:	60b9      	str	r1, [r7, #8]
 80194da:	1dfb      	adds	r3, r7, #7
 80194dc:	701a      	strb	r2, [r3, #0]
  uint8_t idx = 0;
 80194de:	2117      	movs	r1, #23
 80194e0:	187b      	adds	r3, r7, r1
 80194e2:	2200      	movs	r2, #0
 80194e4:	701a      	strb	r2, [r3, #0]

  for (idx = 0; idx < len; idx++)
 80194e6:	187b      	adds	r3, r7, r1
 80194e8:	2200      	movs	r2, #0
 80194ea:	701a      	strb	r2, [r3, #0]
 80194ec:	e02f      	b.n	801954e <IntToUnicode+0x7e>
  {
    if (((value >> 28)) < 0xA)
 80194ee:	68fb      	ldr	r3, [r7, #12]
 80194f0:	0f1b      	lsrs	r3, r3, #28
 80194f2:	2b09      	cmp	r3, #9
 80194f4:	d80d      	bhi.n	8019512 <IntToUnicode+0x42>
    {
      pbuf[2 * idx] = (value >> 28) + '0';
 80194f6:	68fb      	ldr	r3, [r7, #12]
 80194f8:	0f1b      	lsrs	r3, r3, #28
 80194fa:	b2da      	uxtb	r2, r3
 80194fc:	2317      	movs	r3, #23
 80194fe:	18fb      	adds	r3, r7, r3
 8019500:	781b      	ldrb	r3, [r3, #0]
 8019502:	005b      	lsls	r3, r3, #1
 8019504:	0019      	movs	r1, r3
 8019506:	68bb      	ldr	r3, [r7, #8]
 8019508:	185b      	adds	r3, r3, r1
 801950a:	3230      	adds	r2, #48	@ 0x30
 801950c:	b2d2      	uxtb	r2, r2
 801950e:	701a      	strb	r2, [r3, #0]
 8019510:	e00c      	b.n	801952c <IntToUnicode+0x5c>
    }
    else
    {
      pbuf[2 * idx] = (value >> 28) + 'A' - 10;
 8019512:	68fb      	ldr	r3, [r7, #12]
 8019514:	0f1b      	lsrs	r3, r3, #28
 8019516:	b2da      	uxtb	r2, r3
 8019518:	2317      	movs	r3, #23
 801951a:	18fb      	adds	r3, r7, r3
 801951c:	781b      	ldrb	r3, [r3, #0]
 801951e:	005b      	lsls	r3, r3, #1
 8019520:	0019      	movs	r1, r3
 8019522:	68bb      	ldr	r3, [r7, #8]
 8019524:	185b      	adds	r3, r3, r1
 8019526:	3237      	adds	r2, #55	@ 0x37
 8019528:	b2d2      	uxtb	r2, r2
 801952a:	701a      	strb	r2, [r3, #0]
    }

    value = value << 4;
 801952c:	68fb      	ldr	r3, [r7, #12]
 801952e:	011b      	lsls	r3, r3, #4
 8019530:	60fb      	str	r3, [r7, #12]

    pbuf[2 * idx + 1] = 0;
 8019532:	2117      	movs	r1, #23
 8019534:	187b      	adds	r3, r7, r1
 8019536:	781b      	ldrb	r3, [r3, #0]
 8019538:	005b      	lsls	r3, r3, #1
 801953a:	3301      	adds	r3, #1
 801953c:	68ba      	ldr	r2, [r7, #8]
 801953e:	18d3      	adds	r3, r2, r3
 8019540:	2200      	movs	r2, #0
 8019542:	701a      	strb	r2, [r3, #0]
  for (idx = 0; idx < len; idx++)
 8019544:	187b      	adds	r3, r7, r1
 8019546:	781a      	ldrb	r2, [r3, #0]
 8019548:	187b      	adds	r3, r7, r1
 801954a:	3201      	adds	r2, #1
 801954c:	701a      	strb	r2, [r3, #0]
 801954e:	2317      	movs	r3, #23
 8019550:	18fa      	adds	r2, r7, r3
 8019552:	1dfb      	adds	r3, r7, #7
 8019554:	7812      	ldrb	r2, [r2, #0]
 8019556:	781b      	ldrb	r3, [r3, #0]
 8019558:	429a      	cmp	r2, r3
 801955a:	d3c8      	bcc.n	80194ee <IntToUnicode+0x1e>
  }
}
 801955c:	46c0      	nop			@ (mov r8, r8)
 801955e:	46c0      	nop			@ (mov r8, r8)
 8019560:	46bd      	mov	sp, r7
 8019562:	b006      	add	sp, #24
 8019564:	bd80      	pop	{r7, pc}
	...

08019568 <HAL_PCD_MspInit>:
                       LL Driver Callbacks (PCD -> USB Device Library)
*******************************************************************************/
/* MSP Init */

void HAL_PCD_MspInit(PCD_HandleTypeDef* pcdHandle)
{
 8019568:	b580      	push	{r7, lr}
 801956a:	b082      	sub	sp, #8
 801956c:	af00      	add	r7, sp, #0
 801956e:	6078      	str	r0, [r7, #4]
  if(pcdHandle->Instance==USB)
 8019570:	687b      	ldr	r3, [r7, #4]
 8019572:	681b      	ldr	r3, [r3, #0]
 8019574:	4a0a      	ldr	r2, [pc, #40]	@ (80195a0 <HAL_PCD_MspInit+0x38>)
 8019576:	4293      	cmp	r3, r2
 8019578:	d10e      	bne.n	8019598 <HAL_PCD_MspInit+0x30>
  {
  /* USER CODE BEGIN USB_MspInit 0 */

  /* USER CODE END USB_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USB_CLK_ENABLE();
 801957a:	4b0a      	ldr	r3, [pc, #40]	@ (80195a4 <HAL_PCD_MspInit+0x3c>)
 801957c:	6b9a      	ldr	r2, [r3, #56]	@ 0x38
 801957e:	4b09      	ldr	r3, [pc, #36]	@ (80195a4 <HAL_PCD_MspInit+0x3c>)
 8019580:	2180      	movs	r1, #128	@ 0x80
 8019582:	0409      	lsls	r1, r1, #16
 8019584:	430a      	orrs	r2, r1
 8019586:	639a      	str	r2, [r3, #56]	@ 0x38

    /* Peripheral interrupt init */
    HAL_NVIC_SetPriority(USB_IRQn, 0, 0);
 8019588:	2200      	movs	r2, #0
 801958a:	2100      	movs	r1, #0
 801958c:	201f      	movs	r0, #31
 801958e:	f7f3 f8d7 	bl	800c740 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USB_IRQn);
 8019592:	201f      	movs	r0, #31
 8019594:	f7f3 f8e9 	bl	800c76a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USB_MspInit 1 */

  /* USER CODE END USB_MspInit 1 */
  }
}
 8019598:	46c0      	nop			@ (mov r8, r8)
 801959a:	46bd      	mov	sp, r7
 801959c:	b002      	add	sp, #8
 801959e:	bd80      	pop	{r7, pc}
 80195a0:	40005c00 	.word	0x40005c00
 80195a4:	40021000 	.word	0x40021000

080195a8 <HAL_PCD_SetupStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SetupStageCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80195a8:	b580      	push	{r7, lr}
 80195aa:	b082      	sub	sp, #8
 80195ac:	af00      	add	r7, sp, #0
 80195ae:	6078      	str	r0, [r7, #4]
  USBD_LL_SetupStage((USBD_HandleTypeDef*)hpcd->pData, (uint8_t *)hpcd->Setup);
 80195b0:	687a      	ldr	r2, [r7, #4]
 80195b2:	23bc      	movs	r3, #188	@ 0xbc
 80195b4:	009b      	lsls	r3, r3, #2
 80195b6:	58d2      	ldr	r2, [r2, r3]
 80195b8:	687b      	ldr	r3, [r7, #4]
 80195ba:	21ac      	movs	r1, #172	@ 0xac
 80195bc:	0089      	lsls	r1, r1, #2
 80195be:	468c      	mov	ip, r1
 80195c0:	4463      	add	r3, ip
 80195c2:	0019      	movs	r1, r3
 80195c4:	0010      	movs	r0, r2
 80195c6:	f7fe fc1d 	bl	8017e04 <USBD_LL_SetupStage>
}
 80195ca:	46c0      	nop			@ (mov r8, r8)
 80195cc:	46bd      	mov	sp, r7
 80195ce:	b002      	add	sp, #8
 80195d0:	bd80      	pop	{r7, pc}

080195d2 <HAL_PCD_DataOutStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataOutStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80195d2:	b590      	push	{r4, r7, lr}
 80195d4:	b083      	sub	sp, #12
 80195d6:	af00      	add	r7, sp, #0
 80195d8:	6078      	str	r0, [r7, #4]
 80195da:	000a      	movs	r2, r1
 80195dc:	1cfb      	adds	r3, r7, #3
 80195de:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataOutStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->OUT_ep[epnum].xfer_buff);
 80195e0:	687a      	ldr	r2, [r7, #4]
 80195e2:	23bc      	movs	r3, #188	@ 0xbc
 80195e4:	009b      	lsls	r3, r3, #2
 80195e6:	58d4      	ldr	r4, [r2, r3]
 80195e8:	1cfb      	adds	r3, r7, #3
 80195ea:	781a      	ldrb	r2, [r3, #0]
 80195ec:	6878      	ldr	r0, [r7, #4]
 80195ee:	23be      	movs	r3, #190	@ 0xbe
 80195f0:	0059      	lsls	r1, r3, #1
 80195f2:	0013      	movs	r3, r2
 80195f4:	009b      	lsls	r3, r3, #2
 80195f6:	189b      	adds	r3, r3, r2
 80195f8:	00db      	lsls	r3, r3, #3
 80195fa:	18c3      	adds	r3, r0, r3
 80195fc:	185b      	adds	r3, r3, r1
 80195fe:	681a      	ldr	r2, [r3, #0]
 8019600:	1cfb      	adds	r3, r7, #3
 8019602:	781b      	ldrb	r3, [r3, #0]
 8019604:	0019      	movs	r1, r3
 8019606:	0020      	movs	r0, r4
 8019608:	f7fe fc5a 	bl	8017ec0 <USBD_LL_DataOutStage>
}
 801960c:	46c0      	nop			@ (mov r8, r8)
 801960e:	46bd      	mov	sp, r7
 8019610:	b003      	add	sp, #12
 8019612:	bd90      	pop	{r4, r7, pc}

08019614 <HAL_PCD_DataInStageCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#else
void HAL_PCD_DataInStageCallback(PCD_HandleTypeDef *hpcd, uint8_t epnum)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019614:	b580      	push	{r7, lr}
 8019616:	b082      	sub	sp, #8
 8019618:	af00      	add	r7, sp, #0
 801961a:	6078      	str	r0, [r7, #4]
 801961c:	000a      	movs	r2, r1
 801961e:	1cfb      	adds	r3, r7, #3
 8019620:	701a      	strb	r2, [r3, #0]
  USBD_LL_DataInStage((USBD_HandleTypeDef*)hpcd->pData, epnum, hpcd->IN_ep[epnum].xfer_buff);
 8019622:	687a      	ldr	r2, [r7, #4]
 8019624:	23bc      	movs	r3, #188	@ 0xbc
 8019626:	009b      	lsls	r3, r3, #2
 8019628:	58d0      	ldr	r0, [r2, r3]
 801962a:	1cfb      	adds	r3, r7, #3
 801962c:	781a      	ldrb	r2, [r3, #0]
 801962e:	6879      	ldr	r1, [r7, #4]
 8019630:	0013      	movs	r3, r2
 8019632:	009b      	lsls	r3, r3, #2
 8019634:	189b      	adds	r3, r3, r2
 8019636:	00db      	lsls	r3, r3, #3
 8019638:	18cb      	adds	r3, r1, r3
 801963a:	333c      	adds	r3, #60	@ 0x3c
 801963c:	681a      	ldr	r2, [r3, #0]
 801963e:	1cfb      	adds	r3, r7, #3
 8019640:	781b      	ldrb	r3, [r3, #0]
 8019642:	0019      	movs	r1, r3
 8019644:	f7fe fcbe 	bl	8017fc4 <USBD_LL_DataInStage>
}
 8019648:	46c0      	nop			@ (mov r8, r8)
 801964a:	46bd      	mov	sp, r7
 801964c:	b002      	add	sp, #8
 801964e:	bd80      	pop	{r7, pc}

08019650 <HAL_PCD_SOFCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SOFCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 8019650:	b580      	push	{r7, lr}
 8019652:	b082      	sub	sp, #8
 8019654:	af00      	add	r7, sp, #0
 8019656:	6078      	str	r0, [r7, #4]
  USBD_LL_SOF((USBD_HandleTypeDef*)hpcd->pData);
 8019658:	687a      	ldr	r2, [r7, #4]
 801965a:	23bc      	movs	r3, #188	@ 0xbc
 801965c:	009b      	lsls	r3, r3, #2
 801965e:	58d3      	ldr	r3, [r2, r3]
 8019660:	0018      	movs	r0, r3
 8019662:	f7fe fdf5 	bl	8018250 <USBD_LL_SOF>
}
 8019666:	46c0      	nop			@ (mov r8, r8)
 8019668:	46bd      	mov	sp, r7
 801966a:	b002      	add	sp, #8
 801966c:	bd80      	pop	{r7, pc}

0801966e <HAL_PCD_ResetCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResetCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 801966e:	b580      	push	{r7, lr}
 8019670:	b084      	sub	sp, #16
 8019672:	af00      	add	r7, sp, #0
 8019674:	6078      	str	r0, [r7, #4]
  USBD_SpeedTypeDef speed = USBD_SPEED_FULL;
 8019676:	230f      	movs	r3, #15
 8019678:	18fb      	adds	r3, r7, r3
 801967a:	2201      	movs	r2, #1
 801967c:	701a      	strb	r2, [r3, #0]

  if ( hpcd->Init.speed != PCD_SPEED_FULL)
 801967e:	687b      	ldr	r3, [r7, #4]
 8019680:	689b      	ldr	r3, [r3, #8]
 8019682:	2b02      	cmp	r3, #2
 8019684:	d001      	beq.n	801968a <HAL_PCD_ResetCallback+0x1c>
  {
    Error_Handler();
 8019686:	f7ed fecd 	bl	8007424 <Error_Handler>
  }
    /* Set Speed. */
  USBD_LL_SetSpeed((USBD_HandleTypeDef*)hpcd->pData, speed);
 801968a:	687a      	ldr	r2, [r7, #4]
 801968c:	23bc      	movs	r3, #188	@ 0xbc
 801968e:	009b      	lsls	r3, r3, #2
 8019690:	58d2      	ldr	r2, [r2, r3]
 8019692:	230f      	movs	r3, #15
 8019694:	18fb      	adds	r3, r7, r3
 8019696:	781b      	ldrb	r3, [r3, #0]
 8019698:	0019      	movs	r1, r3
 801969a:	0010      	movs	r0, r2
 801969c:	f7fe fd97 	bl	80181ce <USBD_LL_SetSpeed>

  /* Reset Device. */
  USBD_LL_Reset((USBD_HandleTypeDef*)hpcd->pData);
 80196a0:	687a      	ldr	r2, [r7, #4]
 80196a2:	23bc      	movs	r3, #188	@ 0xbc
 80196a4:	009b      	lsls	r3, r3, #2
 80196a6:	58d3      	ldr	r3, [r2, r3]
 80196a8:	0018      	movs	r0, r3
 80196aa:	f7fe fd48 	bl	801813e <USBD_LL_Reset>
}
 80196ae:	46c0      	nop			@ (mov r8, r8)
 80196b0:	46bd      	mov	sp, r7
 80196b2:	b004      	add	sp, #16
 80196b4:	bd80      	pop	{r7, pc}
	...

080196b8 <HAL_PCD_SuspendCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_SuspendCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80196b8:	b580      	push	{r7, lr}
 80196ba:	b082      	sub	sp, #8
 80196bc:	af00      	add	r7, sp, #0
 80196be:	6078      	str	r0, [r7, #4]
  /* Inform USB library that core enters in suspend Mode. */
  USBD_LL_Suspend((USBD_HandleTypeDef*)hpcd->pData);
 80196c0:	687a      	ldr	r2, [r7, #4]
 80196c2:	23bc      	movs	r3, #188	@ 0xbc
 80196c4:	009b      	lsls	r3, r3, #2
 80196c6:	58d3      	ldr	r3, [r2, r3]
 80196c8:	0018      	movs	r0, r3
 80196ca:	f7fe fd91 	bl	80181f0 <USBD_LL_Suspend>
  /* Enter in STOP mode. */
  /* USER CODE BEGIN 2 */
  if (hpcd->Init.low_power_enable)
 80196ce:	687b      	ldr	r3, [r7, #4]
 80196d0:	699b      	ldr	r3, [r3, #24]
 80196d2:	2b00      	cmp	r3, #0
 80196d4:	d005      	beq.n	80196e2 <HAL_PCD_SuspendCallback+0x2a>
  {
    /* Set SLEEPDEEP bit and SleepOnExit of Cortex System Control Register. */
    SCB->SCR |= (uint32_t)((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 80196d6:	4b05      	ldr	r3, [pc, #20]	@ (80196ec <HAL_PCD_SuspendCallback+0x34>)
 80196d8:	691a      	ldr	r2, [r3, #16]
 80196da:	4b04      	ldr	r3, [pc, #16]	@ (80196ec <HAL_PCD_SuspendCallback+0x34>)
 80196dc:	2106      	movs	r1, #6
 80196de:	430a      	orrs	r2, r1
 80196e0:	611a      	str	r2, [r3, #16]
  }
  /* USER CODE END 2 */
}
 80196e2:	46c0      	nop			@ (mov r8, r8)
 80196e4:	46bd      	mov	sp, r7
 80196e6:	b002      	add	sp, #8
 80196e8:	bd80      	pop	{r7, pc}
 80196ea:	46c0      	nop			@ (mov r8, r8)
 80196ec:	e000ed00 	.word	0xe000ed00

080196f0 <HAL_PCD_ResumeCallback>:
#if (USE_HAL_PCD_REGISTER_CALLBACKS == 1U)
static void PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#else
void HAL_PCD_ResumeCallback(PCD_HandleTypeDef *hpcd)
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
{
 80196f0:	b580      	push	{r7, lr}
 80196f2:	b082      	sub	sp, #8
 80196f4:	af00      	add	r7, sp, #0
 80196f6:	6078      	str	r0, [r7, #4]
  /* USER CODE BEGIN 3 */
  if (hpcd->Init.low_power_enable)
 80196f8:	687b      	ldr	r3, [r7, #4]
 80196fa:	699b      	ldr	r3, [r3, #24]
 80196fc:	2b00      	cmp	r3, #0
 80196fe:	d007      	beq.n	8019710 <HAL_PCD_ResumeCallback+0x20>
  {
    /* Reset SLEEPDEEP bit of Cortex System Control Register. */
    SCB->SCR &= (uint32_t)~((uint32_t)(SCB_SCR_SLEEPDEEP_Msk | SCB_SCR_SLEEPONEXIT_Msk));
 8019700:	4b09      	ldr	r3, [pc, #36]	@ (8019728 <HAL_PCD_ResumeCallback+0x38>)
 8019702:	691a      	ldr	r2, [r3, #16]
 8019704:	4b08      	ldr	r3, [pc, #32]	@ (8019728 <HAL_PCD_ResumeCallback+0x38>)
 8019706:	2106      	movs	r1, #6
 8019708:	438a      	bics	r2, r1
 801970a:	611a      	str	r2, [r3, #16]
    SystemClockConfig_Resume();
 801970c:	f000 fa44 	bl	8019b98 <SystemClockConfig_Resume>
  }
  /* USER CODE END 3 */
  USBD_LL_Resume((USBD_HandleTypeDef*)hpcd->pData);
 8019710:	687a      	ldr	r2, [r7, #4]
 8019712:	23bc      	movs	r3, #188	@ 0xbc
 8019714:	009b      	lsls	r3, r3, #2
 8019716:	58d3      	ldr	r3, [r2, r3]
 8019718:	0018      	movs	r0, r3
 801971a:	f7fe fd81 	bl	8018220 <USBD_LL_Resume>
}
 801971e:	46c0      	nop			@ (mov r8, r8)
 8019720:	46bd      	mov	sp, r7
 8019722:	b002      	add	sp, #8
 8019724:	bd80      	pop	{r7, pc}
 8019726:	46c0      	nop			@ (mov r8, r8)
 8019728:	e000ed00 	.word	0xe000ed00

0801972c <USBD_LL_Init>:
  * @brief  Initializes the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Init(USBD_HandleTypeDef *pdev)
{
 801972c:	b580      	push	{r7, lr}
 801972e:	b082      	sub	sp, #8
 8019730:	af00      	add	r7, sp, #0
 8019732:	6078      	str	r0, [r7, #4]
  /* Init USB Ip. */
  /* Link the driver to the stack. */
  hpcd_USB_FS.pData = pdev;
 8019734:	4a2d      	ldr	r2, [pc, #180]	@ (80197ec <USBD_LL_Init+0xc0>)
 8019736:	23bc      	movs	r3, #188	@ 0xbc
 8019738:	009b      	lsls	r3, r3, #2
 801973a:	6879      	ldr	r1, [r7, #4]
 801973c:	50d1      	str	r1, [r2, r3]
  pdev->pData = &hpcd_USB_FS;
 801973e:	687a      	ldr	r2, [r7, #4]
 8019740:	23b0      	movs	r3, #176	@ 0xb0
 8019742:	009b      	lsls	r3, r3, #2
 8019744:	4929      	ldr	r1, [pc, #164]	@ (80197ec <USBD_LL_Init+0xc0>)
 8019746:	50d1      	str	r1, [r2, r3]

  hpcd_USB_FS.Instance = USB;
 8019748:	4b28      	ldr	r3, [pc, #160]	@ (80197ec <USBD_LL_Init+0xc0>)
 801974a:	4a29      	ldr	r2, [pc, #164]	@ (80197f0 <USBD_LL_Init+0xc4>)
 801974c:	601a      	str	r2, [r3, #0]
  hpcd_USB_FS.Init.dev_endpoints = 8;
 801974e:	4b27      	ldr	r3, [pc, #156]	@ (80197ec <USBD_LL_Init+0xc0>)
 8019750:	2208      	movs	r2, #8
 8019752:	605a      	str	r2, [r3, #4]
  hpcd_USB_FS.Init.speed = PCD_SPEED_FULL;
 8019754:	4b25      	ldr	r3, [pc, #148]	@ (80197ec <USBD_LL_Init+0xc0>)
 8019756:	2202      	movs	r2, #2
 8019758:	609a      	str	r2, [r3, #8]
  hpcd_USB_FS.Init.phy_itface = PCD_PHY_EMBEDDED;
 801975a:	4b24      	ldr	r3, [pc, #144]	@ (80197ec <USBD_LL_Init+0xc0>)
 801975c:	2202      	movs	r2, #2
 801975e:	611a      	str	r2, [r3, #16]
  hpcd_USB_FS.Init.low_power_enable = DISABLE;
 8019760:	4b22      	ldr	r3, [pc, #136]	@ (80197ec <USBD_LL_Init+0xc0>)
 8019762:	2200      	movs	r2, #0
 8019764:	619a      	str	r2, [r3, #24]
  hpcd_USB_FS.Init.lpm_enable = DISABLE;
 8019766:	4b21      	ldr	r3, [pc, #132]	@ (80197ec <USBD_LL_Init+0xc0>)
 8019768:	2200      	movs	r2, #0
 801976a:	61da      	str	r2, [r3, #28]
  hpcd_USB_FS.Init.battery_charging_enable = DISABLE;
 801976c:	4b1f      	ldr	r3, [pc, #124]	@ (80197ec <USBD_LL_Init+0xc0>)
 801976e:	2200      	movs	r2, #0
 8019770:	621a      	str	r2, [r3, #32]
  if (HAL_PCD_Init(&hpcd_USB_FS) != HAL_OK)
 8019772:	4b1e      	ldr	r3, [pc, #120]	@ (80197ec <USBD_LL_Init+0xc0>)
 8019774:	0018      	movs	r0, r3
 8019776:	f7f6 f90b 	bl	800f990 <HAL_PCD_Init>
 801977a:	1e03      	subs	r3, r0, #0
 801977c:	d001      	beq.n	8019782 <USBD_LL_Init+0x56>
  {
    Error_Handler( );
 801977e:	f7ed fe51 	bl	8007424 <Error_Handler>
  HAL_PCD_RegisterDataInStageCallback(&hpcd_USB_FS, PCD_DataInStageCallback);
  HAL_PCD_RegisterIsoOutIncpltCallback(&hpcd_USB_FS, PCD_ISOOUTIncompleteCallback);
  HAL_PCD_RegisterIsoInIncpltCallback(&hpcd_USB_FS, PCD_ISOINIncompleteCallback);
#endif /* USE_HAL_PCD_REGISTER_CALLBACKS */
  /* USER CODE BEGIN EndPoint_Configuration */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x00 , PCD_SNG_BUF, 0x18);
 8019782:	687a      	ldr	r2, [r7, #4]
 8019784:	23b0      	movs	r3, #176	@ 0xb0
 8019786:	009b      	lsls	r3, r3, #2
 8019788:	58d0      	ldr	r0, [r2, r3]
 801978a:	2318      	movs	r3, #24
 801978c:	2200      	movs	r2, #0
 801978e:	2100      	movs	r1, #0
 8019790:	f7f7 fecc 	bl	801152c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x80 , PCD_SNG_BUF, 0x58);
 8019794:	687a      	ldr	r2, [r7, #4]
 8019796:	23b0      	movs	r3, #176	@ 0xb0
 8019798:	009b      	lsls	r3, r3, #2
 801979a:	58d0      	ldr	r0, [r2, r3]
 801979c:	2358      	movs	r3, #88	@ 0x58
 801979e:	2200      	movs	r2, #0
 80197a0:	2180      	movs	r1, #128	@ 0x80
 80197a2:	f7f7 fec3 	bl	801152c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration */
  /* USER CODE BEGIN EndPoint_Configuration_CDC */
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x81 , PCD_SNG_BUF, 0xC0);
 80197a6:	687a      	ldr	r2, [r7, #4]
 80197a8:	23b0      	movs	r3, #176	@ 0xb0
 80197aa:	009b      	lsls	r3, r3, #2
 80197ac:	58d0      	ldr	r0, [r2, r3]
 80197ae:	23c0      	movs	r3, #192	@ 0xc0
 80197b0:	2200      	movs	r2, #0
 80197b2:	2181      	movs	r1, #129	@ 0x81
 80197b4:	f7f7 feba 	bl	801152c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x01 , PCD_SNG_BUF, 0x110);
 80197b8:	687a      	ldr	r2, [r7, #4]
 80197ba:	23b0      	movs	r3, #176	@ 0xb0
 80197bc:	009b      	lsls	r3, r3, #2
 80197be:	58d0      	ldr	r0, [r2, r3]
 80197c0:	2388      	movs	r3, #136	@ 0x88
 80197c2:	005b      	lsls	r3, r3, #1
 80197c4:	2200      	movs	r2, #0
 80197c6:	2101      	movs	r1, #1
 80197c8:	f7f7 feb0 	bl	801152c <HAL_PCDEx_PMAConfig>
  HAL_PCDEx_PMAConfig((PCD_HandleTypeDef*)pdev->pData , 0x82 , PCD_SNG_BUF, 0x100);
 80197cc:	687a      	ldr	r2, [r7, #4]
 80197ce:	23b0      	movs	r3, #176	@ 0xb0
 80197d0:	009b      	lsls	r3, r3, #2
 80197d2:	58d0      	ldr	r0, [r2, r3]
 80197d4:	2380      	movs	r3, #128	@ 0x80
 80197d6:	005b      	lsls	r3, r3, #1
 80197d8:	2200      	movs	r2, #0
 80197da:	2182      	movs	r1, #130	@ 0x82
 80197dc:	f7f7 fea6 	bl	801152c <HAL_PCDEx_PMAConfig>
  /* USER CODE END EndPoint_Configuration_CDC */
  return USBD_OK;
 80197e0:	2300      	movs	r3, #0
}
 80197e2:	0018      	movs	r0, r3
 80197e4:	46bd      	mov	sp, r7
 80197e6:	b002      	add	sp, #8
 80197e8:	bd80      	pop	{r7, pc}
 80197ea:	46c0      	nop			@ (mov r8, r8)
 80197ec:	20003260 	.word	0x20003260
 80197f0:	40005c00 	.word	0x40005c00

080197f4 <USBD_LL_Start>:
  * @brief  Starts the low level portion of the device driver.
  * @param  pdev: Device handle
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Start(USBD_HandleTypeDef *pdev)
{
 80197f4:	b5f0      	push	{r4, r5, r6, r7, lr}
 80197f6:	b085      	sub	sp, #20
 80197f8:	af00      	add	r7, sp, #0
 80197fa:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80197fc:	210f      	movs	r1, #15
 80197fe:	187b      	adds	r3, r7, r1
 8019800:	2200      	movs	r2, #0
 8019802:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019804:	260e      	movs	r6, #14
 8019806:	19bb      	adds	r3, r7, r6
 8019808:	2200      	movs	r2, #0
 801980a:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_Start(pdev->pData);
 801980c:	687a      	ldr	r2, [r7, #4]
 801980e:	23b0      	movs	r3, #176	@ 0xb0
 8019810:	009b      	lsls	r3, r3, #2
 8019812:	58d3      	ldr	r3, [r2, r3]
 8019814:	000d      	movs	r5, r1
 8019816:	187c      	adds	r4, r7, r1
 8019818:	0018      	movs	r0, r3
 801981a:	f7f6 f9b9 	bl	800fb90 <HAL_PCD_Start>
 801981e:	0003      	movs	r3, r0
 8019820:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019822:	19bc      	adds	r4, r7, r6
 8019824:	197b      	adds	r3, r7, r5
 8019826:	781b      	ldrb	r3, [r3, #0]
 8019828:	0018      	movs	r0, r3
 801982a:	f000 f9bc 	bl	8019ba6 <USBD_Get_USB_Status>
 801982e:	0003      	movs	r3, r0
 8019830:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8019832:	19bb      	adds	r3, r7, r6
 8019834:	781b      	ldrb	r3, [r3, #0]
}
 8019836:	0018      	movs	r0, r3
 8019838:	46bd      	mov	sp, r7
 801983a:	b005      	add	sp, #20
 801983c:	bdf0      	pop	{r4, r5, r6, r7, pc}

0801983e <USBD_LL_OpenEP>:
  * @param  ep_type: Endpoint type
  * @param  ep_mps: Endpoint max packet size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_OpenEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t ep_type, uint16_t ep_mps)
{
 801983e:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019840:	b085      	sub	sp, #20
 8019842:	af00      	add	r7, sp, #0
 8019844:	6078      	str	r0, [r7, #4]
 8019846:	000c      	movs	r4, r1
 8019848:	0010      	movs	r0, r2
 801984a:	0019      	movs	r1, r3
 801984c:	1cfb      	adds	r3, r7, #3
 801984e:	1c22      	adds	r2, r4, #0
 8019850:	701a      	strb	r2, [r3, #0]
 8019852:	1cbb      	adds	r3, r7, #2
 8019854:	1c02      	adds	r2, r0, #0
 8019856:	701a      	strb	r2, [r3, #0]
 8019858:	003b      	movs	r3, r7
 801985a:	1c0a      	adds	r2, r1, #0
 801985c:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 801985e:	260f      	movs	r6, #15
 8019860:	19bb      	adds	r3, r7, r6
 8019862:	2200      	movs	r2, #0
 8019864:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019866:	250e      	movs	r5, #14
 8019868:	197b      	adds	r3, r7, r5
 801986a:	2200      	movs	r2, #0
 801986c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Open(pdev->pData, ep_addr, ep_mps, ep_type);
 801986e:	687a      	ldr	r2, [r7, #4]
 8019870:	23b0      	movs	r3, #176	@ 0xb0
 8019872:	009b      	lsls	r3, r3, #2
 8019874:	58d0      	ldr	r0, [r2, r3]
 8019876:	19bc      	adds	r4, r7, r6
 8019878:	1cbb      	adds	r3, r7, #2
 801987a:	781d      	ldrb	r5, [r3, #0]
 801987c:	003b      	movs	r3, r7
 801987e:	881a      	ldrh	r2, [r3, #0]
 8019880:	1cfb      	adds	r3, r7, #3
 8019882:	7819      	ldrb	r1, [r3, #0]
 8019884:	002b      	movs	r3, r5
 8019886:	f7f6 fb18 	bl	800feba <HAL_PCD_EP_Open>
 801988a:	0003      	movs	r3, r0
 801988c:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801988e:	250e      	movs	r5, #14
 8019890:	197c      	adds	r4, r7, r5
 8019892:	19bb      	adds	r3, r7, r6
 8019894:	781b      	ldrb	r3, [r3, #0]
 8019896:	0018      	movs	r0, r3
 8019898:	f000 f985 	bl	8019ba6 <USBD_Get_USB_Status>
 801989c:	0003      	movs	r3, r0
 801989e:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80198a0:	197b      	adds	r3, r7, r5
 80198a2:	781b      	ldrb	r3, [r3, #0]
}
 80198a4:	0018      	movs	r0, r3
 80198a6:	46bd      	mov	sp, r7
 80198a8:	b005      	add	sp, #20
 80198aa:	bdf0      	pop	{r4, r5, r6, r7, pc}

080198ac <USBD_LL_CloseEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_CloseEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80198ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 80198ae:	b085      	sub	sp, #20
 80198b0:	af00      	add	r7, sp, #0
 80198b2:	6078      	str	r0, [r7, #4]
 80198b4:	000a      	movs	r2, r1
 80198b6:	1cfb      	adds	r3, r7, #3
 80198b8:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 80198ba:	210f      	movs	r1, #15
 80198bc:	187b      	adds	r3, r7, r1
 80198be:	2200      	movs	r2, #0
 80198c0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 80198c2:	260e      	movs	r6, #14
 80198c4:	19bb      	adds	r3, r7, r6
 80198c6:	2200      	movs	r2, #0
 80198c8:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Close(pdev->pData, ep_addr);
 80198ca:	687a      	ldr	r2, [r7, #4]
 80198cc:	23b0      	movs	r3, #176	@ 0xb0
 80198ce:	009b      	lsls	r3, r3, #2
 80198d0:	58d2      	ldr	r2, [r2, r3]
 80198d2:	000d      	movs	r5, r1
 80198d4:	187c      	adds	r4, r7, r1
 80198d6:	1cfb      	adds	r3, r7, #3
 80198d8:	781b      	ldrb	r3, [r3, #0]
 80198da:	0019      	movs	r1, r3
 80198dc:	0010      	movs	r0, r2
 80198de:	f7f6 fb5b 	bl	800ff98 <HAL_PCD_EP_Close>
 80198e2:	0003      	movs	r3, r0
 80198e4:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 80198e6:	19bc      	adds	r4, r7, r6
 80198e8:	197b      	adds	r3, r7, r5
 80198ea:	781b      	ldrb	r3, [r3, #0]
 80198ec:	0018      	movs	r0, r3
 80198ee:	f000 f95a 	bl	8019ba6 <USBD_Get_USB_Status>
 80198f2:	0003      	movs	r3, r0
 80198f4:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80198f6:	19bb      	adds	r3, r7, r6
 80198f8:	781b      	ldrb	r3, [r3, #0]
}
 80198fa:	0018      	movs	r0, r3
 80198fc:	46bd      	mov	sp, r7
 80198fe:	b005      	add	sp, #20
 8019900:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019902 <USBD_LL_StallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_StallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019902:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019904:	b085      	sub	sp, #20
 8019906:	af00      	add	r7, sp, #0
 8019908:	6078      	str	r0, [r7, #4]
 801990a:	000a      	movs	r2, r1
 801990c:	1cfb      	adds	r3, r7, #3
 801990e:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019910:	210f      	movs	r1, #15
 8019912:	187b      	adds	r3, r7, r1
 8019914:	2200      	movs	r2, #0
 8019916:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019918:	260e      	movs	r6, #14
 801991a:	19bb      	adds	r3, r7, r6
 801991c:	2200      	movs	r2, #0
 801991e:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_SetStall(pdev->pData, ep_addr);
 8019920:	687a      	ldr	r2, [r7, #4]
 8019922:	23b0      	movs	r3, #176	@ 0xb0
 8019924:	009b      	lsls	r3, r3, #2
 8019926:	58d2      	ldr	r2, [r2, r3]
 8019928:	000d      	movs	r5, r1
 801992a:	187c      	adds	r4, r7, r1
 801992c:	1cfb      	adds	r3, r7, #3
 801992e:	781b      	ldrb	r3, [r3, #0]
 8019930:	0019      	movs	r1, r3
 8019932:	0010      	movs	r0, r2
 8019934:	f7f6 fc0d 	bl	8010152 <HAL_PCD_EP_SetStall>
 8019938:	0003      	movs	r3, r0
 801993a:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 801993c:	19bc      	adds	r4, r7, r6
 801993e:	197b      	adds	r3, r7, r5
 8019940:	781b      	ldrb	r3, [r3, #0]
 8019942:	0018      	movs	r0, r3
 8019944:	f000 f92f 	bl	8019ba6 <USBD_Get_USB_Status>
 8019948:	0003      	movs	r3, r0
 801994a:	7023      	strb	r3, [r4, #0]

  return usb_status;
 801994c:	19bb      	adds	r3, r7, r6
 801994e:	781b      	ldrb	r3, [r3, #0]
}
 8019950:	0018      	movs	r0, r3
 8019952:	46bd      	mov	sp, r7
 8019954:	b005      	add	sp, #20
 8019956:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019958 <USBD_LL_ClearStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_ClearStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019958:	b5f0      	push	{r4, r5, r6, r7, lr}
 801995a:	b085      	sub	sp, #20
 801995c:	af00      	add	r7, sp, #0
 801995e:	6078      	str	r0, [r7, #4]
 8019960:	000a      	movs	r2, r1
 8019962:	1cfb      	adds	r3, r7, #3
 8019964:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019966:	210f      	movs	r1, #15
 8019968:	187b      	adds	r3, r7, r1
 801996a:	2200      	movs	r2, #0
 801996c:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 801996e:	260e      	movs	r6, #14
 8019970:	19bb      	adds	r3, r7, r6
 8019972:	2200      	movs	r2, #0
 8019974:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_ClrStall(pdev->pData, ep_addr);
 8019976:	687a      	ldr	r2, [r7, #4]
 8019978:	23b0      	movs	r3, #176	@ 0xb0
 801997a:	009b      	lsls	r3, r3, #2
 801997c:	58d2      	ldr	r2, [r2, r3]
 801997e:	000d      	movs	r5, r1
 8019980:	187c      	adds	r4, r7, r1
 8019982:	1cfb      	adds	r3, r7, #3
 8019984:	781b      	ldrb	r3, [r3, #0]
 8019986:	0019      	movs	r1, r3
 8019988:	0010      	movs	r0, r2
 801998a:	f7f6 fc3e 	bl	801020a <HAL_PCD_EP_ClrStall>
 801998e:	0003      	movs	r3, r0
 8019990:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019992:	19bc      	adds	r4, r7, r6
 8019994:	197b      	adds	r3, r7, r5
 8019996:	781b      	ldrb	r3, [r3, #0]
 8019998:	0018      	movs	r0, r3
 801999a:	f000 f904 	bl	8019ba6 <USBD_Get_USB_Status>
 801999e:	0003      	movs	r3, r0
 80199a0:	7023      	strb	r3, [r4, #0]

  return usb_status;
 80199a2:	19bb      	adds	r3, r7, r6
 80199a4:	781b      	ldrb	r3, [r3, #0]
}
 80199a6:	0018      	movs	r0, r3
 80199a8:	46bd      	mov	sp, r7
 80199aa:	b005      	add	sp, #20
 80199ac:	bdf0      	pop	{r4, r5, r6, r7, pc}

080199ae <USBD_LL_IsStallEP>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Stall (1: Yes, 0: No)
  */
uint8_t USBD_LL_IsStallEP(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 80199ae:	b580      	push	{r7, lr}
 80199b0:	b084      	sub	sp, #16
 80199b2:	af00      	add	r7, sp, #0
 80199b4:	6078      	str	r0, [r7, #4]
 80199b6:	000a      	movs	r2, r1
 80199b8:	1cfb      	adds	r3, r7, #3
 80199ba:	701a      	strb	r2, [r3, #0]
  PCD_HandleTypeDef *hpcd = (PCD_HandleTypeDef*) pdev->pData;
 80199bc:	687a      	ldr	r2, [r7, #4]
 80199be:	23b0      	movs	r3, #176	@ 0xb0
 80199c0:	009b      	lsls	r3, r3, #2
 80199c2:	58d3      	ldr	r3, [r2, r3]
 80199c4:	60fb      	str	r3, [r7, #12]

  if((ep_addr & 0x80) == 0x80)
 80199c6:	1cfb      	adds	r3, r7, #3
 80199c8:	781b      	ldrb	r3, [r3, #0]
 80199ca:	b25b      	sxtb	r3, r3
 80199cc:	2b00      	cmp	r3, #0
 80199ce:	da0d      	bge.n	80199ec <USBD_LL_IsStallEP+0x3e>
  {
    return hpcd->IN_ep[ep_addr & 0x7F].is_stall;
 80199d0:	1cfb      	adds	r3, r7, #3
 80199d2:	781b      	ldrb	r3, [r3, #0]
 80199d4:	227f      	movs	r2, #127	@ 0x7f
 80199d6:	4013      	ands	r3, r2
 80199d8:	68f9      	ldr	r1, [r7, #12]
 80199da:	1c5a      	adds	r2, r3, #1
 80199dc:	0013      	movs	r3, r2
 80199de:	009b      	lsls	r3, r3, #2
 80199e0:	189b      	adds	r3, r3, r2
 80199e2:	00db      	lsls	r3, r3, #3
 80199e4:	18cb      	adds	r3, r1, r3
 80199e6:	3302      	adds	r3, #2
 80199e8:	781b      	ldrb	r3, [r3, #0]
 80199ea:	e00d      	b.n	8019a08 <USBD_LL_IsStallEP+0x5a>
  }
  else
  {
    return hpcd->OUT_ep[ep_addr & 0x7F].is_stall;
 80199ec:	1cfb      	adds	r3, r7, #3
 80199ee:	781b      	ldrb	r3, [r3, #0]
 80199f0:	227f      	movs	r2, #127	@ 0x7f
 80199f2:	401a      	ands	r2, r3
 80199f4:	68f8      	ldr	r0, [r7, #12]
 80199f6:	23b5      	movs	r3, #181	@ 0xb5
 80199f8:	0059      	lsls	r1, r3, #1
 80199fa:	0013      	movs	r3, r2
 80199fc:	009b      	lsls	r3, r3, #2
 80199fe:	189b      	adds	r3, r3, r2
 8019a00:	00db      	lsls	r3, r3, #3
 8019a02:	18c3      	adds	r3, r0, r3
 8019a04:	185b      	adds	r3, r3, r1
 8019a06:	781b      	ldrb	r3, [r3, #0]
  }
}
 8019a08:	0018      	movs	r0, r3
 8019a0a:	46bd      	mov	sp, r7
 8019a0c:	b004      	add	sp, #16
 8019a0e:	bd80      	pop	{r7, pc}

08019a10 <USBD_LL_SetUSBAddress>:
  * @param  pdev: Device handle
  * @param  dev_addr: Device address
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_SetUSBAddress(USBD_HandleTypeDef *pdev, uint8_t dev_addr)
{
 8019a10:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019a12:	b085      	sub	sp, #20
 8019a14:	af00      	add	r7, sp, #0
 8019a16:	6078      	str	r0, [r7, #4]
 8019a18:	000a      	movs	r2, r1
 8019a1a:	1cfb      	adds	r3, r7, #3
 8019a1c:	701a      	strb	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019a1e:	210f      	movs	r1, #15
 8019a20:	187b      	adds	r3, r7, r1
 8019a22:	2200      	movs	r2, #0
 8019a24:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019a26:	260e      	movs	r6, #14
 8019a28:	19bb      	adds	r3, r7, r6
 8019a2a:	2200      	movs	r2, #0
 8019a2c:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_SetAddress(pdev->pData, dev_addr);
 8019a2e:	687a      	ldr	r2, [r7, #4]
 8019a30:	23b0      	movs	r3, #176	@ 0xb0
 8019a32:	009b      	lsls	r3, r3, #2
 8019a34:	58d2      	ldr	r2, [r2, r3]
 8019a36:	000d      	movs	r5, r1
 8019a38:	187c      	adds	r4, r7, r1
 8019a3a:	1cfb      	adds	r3, r7, #3
 8019a3c:	781b      	ldrb	r3, [r3, #0]
 8019a3e:	0019      	movs	r1, r3
 8019a40:	0010      	movs	r0, r2
 8019a42:	f7f6 fa0f 	bl	800fe64 <HAL_PCD_SetAddress>
 8019a46:	0003      	movs	r3, r0
 8019a48:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019a4a:	19bc      	adds	r4, r7, r6
 8019a4c:	197b      	adds	r3, r7, r5
 8019a4e:	781b      	ldrb	r3, [r3, #0]
 8019a50:	0018      	movs	r0, r3
 8019a52:	f000 f8a8 	bl	8019ba6 <USBD_Get_USB_Status>
 8019a56:	0003      	movs	r3, r0
 8019a58:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8019a5a:	19bb      	adds	r3, r7, r6
 8019a5c:	781b      	ldrb	r3, [r3, #0]
}
 8019a5e:	0018      	movs	r0, r3
 8019a60:	46bd      	mov	sp, r7
 8019a62:	b005      	add	sp, #20
 8019a64:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019a66 <USBD_LL_Transmit>:
  * @param  pbuf: Pointer to data to be sent
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_Transmit(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8019a66:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019a68:	b087      	sub	sp, #28
 8019a6a:	af00      	add	r7, sp, #0
 8019a6c:	60f8      	str	r0, [r7, #12]
 8019a6e:	0008      	movs	r0, r1
 8019a70:	607a      	str	r2, [r7, #4]
 8019a72:	0019      	movs	r1, r3
 8019a74:	230b      	movs	r3, #11
 8019a76:	18fb      	adds	r3, r7, r3
 8019a78:	1c02      	adds	r2, r0, #0
 8019a7a:	701a      	strb	r2, [r3, #0]
 8019a7c:	2408      	movs	r4, #8
 8019a7e:	193b      	adds	r3, r7, r4
 8019a80:	1c0a      	adds	r2, r1, #0
 8019a82:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019a84:	2117      	movs	r1, #23
 8019a86:	187b      	adds	r3, r7, r1
 8019a88:	2200      	movs	r2, #0
 8019a8a:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019a8c:	2516      	movs	r5, #22
 8019a8e:	197b      	adds	r3, r7, r5
 8019a90:	2200      	movs	r2, #0
 8019a92:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Transmit(pdev->pData, ep_addr, pbuf, size);
 8019a94:	68fa      	ldr	r2, [r7, #12]
 8019a96:	23b0      	movs	r3, #176	@ 0xb0
 8019a98:	009b      	lsls	r3, r3, #2
 8019a9a:	58d0      	ldr	r0, [r2, r3]
 8019a9c:	193b      	adds	r3, r7, r4
 8019a9e:	881d      	ldrh	r5, [r3, #0]
 8019aa0:	000e      	movs	r6, r1
 8019aa2:	187c      	adds	r4, r7, r1
 8019aa4:	687a      	ldr	r2, [r7, #4]
 8019aa6:	230b      	movs	r3, #11
 8019aa8:	18fb      	adds	r3, r7, r3
 8019aaa:	7819      	ldrb	r1, [r3, #0]
 8019aac:	002b      	movs	r3, r5
 8019aae:	f7f6 fb14 	bl	80100da <HAL_PCD_EP_Transmit>
 8019ab2:	0003      	movs	r3, r0
 8019ab4:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019ab6:	2516      	movs	r5, #22
 8019ab8:	197c      	adds	r4, r7, r5
 8019aba:	19bb      	adds	r3, r7, r6
 8019abc:	781b      	ldrb	r3, [r3, #0]
 8019abe:	0018      	movs	r0, r3
 8019ac0:	f000 f871 	bl	8019ba6 <USBD_Get_USB_Status>
 8019ac4:	0003      	movs	r3, r0
 8019ac6:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8019ac8:	197b      	adds	r3, r7, r5
 8019aca:	781b      	ldrb	r3, [r3, #0]
}
 8019acc:	0018      	movs	r0, r3
 8019ace:	46bd      	mov	sp, r7
 8019ad0:	b007      	add	sp, #28
 8019ad2:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019ad4 <USBD_LL_PrepareReceive>:
  * @param  pbuf: Pointer to data to be received
  * @param  size: Data size
  * @retval USBD status
  */
USBD_StatusTypeDef USBD_LL_PrepareReceive(USBD_HandleTypeDef *pdev, uint8_t ep_addr, uint8_t *pbuf, uint16_t size)
{
 8019ad4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019ad6:	b087      	sub	sp, #28
 8019ad8:	af00      	add	r7, sp, #0
 8019ada:	60f8      	str	r0, [r7, #12]
 8019adc:	0008      	movs	r0, r1
 8019ade:	607a      	str	r2, [r7, #4]
 8019ae0:	0019      	movs	r1, r3
 8019ae2:	230b      	movs	r3, #11
 8019ae4:	18fb      	adds	r3, r7, r3
 8019ae6:	1c02      	adds	r2, r0, #0
 8019ae8:	701a      	strb	r2, [r3, #0]
 8019aea:	2408      	movs	r4, #8
 8019aec:	193b      	adds	r3, r7, r4
 8019aee:	1c0a      	adds	r2, r1, #0
 8019af0:	801a      	strh	r2, [r3, #0]
  HAL_StatusTypeDef hal_status = HAL_OK;
 8019af2:	2117      	movs	r1, #23
 8019af4:	187b      	adds	r3, r7, r1
 8019af6:	2200      	movs	r2, #0
 8019af8:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019afa:	2516      	movs	r5, #22
 8019afc:	197b      	adds	r3, r7, r5
 8019afe:	2200      	movs	r2, #0
 8019b00:	701a      	strb	r2, [r3, #0]

  hal_status = HAL_PCD_EP_Receive(pdev->pData, ep_addr, pbuf, size);
 8019b02:	68fa      	ldr	r2, [r7, #12]
 8019b04:	23b0      	movs	r3, #176	@ 0xb0
 8019b06:	009b      	lsls	r3, r3, #2
 8019b08:	58d0      	ldr	r0, [r2, r3]
 8019b0a:	193b      	adds	r3, r7, r4
 8019b0c:	881d      	ldrh	r5, [r3, #0]
 8019b0e:	000e      	movs	r6, r1
 8019b10:	187c      	adds	r4, r7, r1
 8019b12:	687a      	ldr	r2, [r7, #4]
 8019b14:	230b      	movs	r3, #11
 8019b16:	18fb      	adds	r3, r7, r3
 8019b18:	7819      	ldrb	r1, [r3, #0]
 8019b1a:	002b      	movs	r3, r5
 8019b1c:	f7f6 fa8d 	bl	801003a <HAL_PCD_EP_Receive>
 8019b20:	0003      	movs	r3, r0
 8019b22:	7023      	strb	r3, [r4, #0]

  usb_status =  USBD_Get_USB_Status(hal_status);
 8019b24:	2516      	movs	r5, #22
 8019b26:	197c      	adds	r4, r7, r5
 8019b28:	19bb      	adds	r3, r7, r6
 8019b2a:	781b      	ldrb	r3, [r3, #0]
 8019b2c:	0018      	movs	r0, r3
 8019b2e:	f000 f83a 	bl	8019ba6 <USBD_Get_USB_Status>
 8019b32:	0003      	movs	r3, r0
 8019b34:	7023      	strb	r3, [r4, #0]

  return usb_status;
 8019b36:	197b      	adds	r3, r7, r5
 8019b38:	781b      	ldrb	r3, [r3, #0]
}
 8019b3a:	0018      	movs	r0, r3
 8019b3c:	46bd      	mov	sp, r7
 8019b3e:	b007      	add	sp, #28
 8019b40:	bdf0      	pop	{r4, r5, r6, r7, pc}

08019b42 <USBD_LL_GetRxDataSize>:
  * @param  pdev: Device handle
  * @param  ep_addr: Endpoint number
  * @retval Received Data Size
  */
uint32_t USBD_LL_GetRxDataSize(USBD_HandleTypeDef *pdev, uint8_t ep_addr)
{
 8019b42:	b580      	push	{r7, lr}
 8019b44:	b082      	sub	sp, #8
 8019b46:	af00      	add	r7, sp, #0
 8019b48:	6078      	str	r0, [r7, #4]
 8019b4a:	000a      	movs	r2, r1
 8019b4c:	1cfb      	adds	r3, r7, #3
 8019b4e:	701a      	strb	r2, [r3, #0]
  return HAL_PCD_EP_GetRxCount((PCD_HandleTypeDef*) pdev->pData, ep_addr);
 8019b50:	687a      	ldr	r2, [r7, #4]
 8019b52:	23b0      	movs	r3, #176	@ 0xb0
 8019b54:	009b      	lsls	r3, r3, #2
 8019b56:	58d2      	ldr	r2, [r2, r3]
 8019b58:	1cfb      	adds	r3, r7, #3
 8019b5a:	781b      	ldrb	r3, [r3, #0]
 8019b5c:	0019      	movs	r1, r3
 8019b5e:	0010      	movs	r0, r2
 8019b60:	f7f6 faa2 	bl	80100a8 <HAL_PCD_EP_GetRxCount>
 8019b64:	0003      	movs	r3, r0
}
 8019b66:	0018      	movs	r0, r3
 8019b68:	46bd      	mov	sp, r7
 8019b6a:	b002      	add	sp, #8
 8019b6c:	bd80      	pop	{r7, pc}
	...

08019b70 <USBD_static_malloc>:
  * @brief  Static single allocation.
  * @param  size: Size of allocated memory
  * @retval None
  */
void *USBD_static_malloc(uint32_t size)
{
 8019b70:	b580      	push	{r7, lr}
 8019b72:	b082      	sub	sp, #8
 8019b74:	af00      	add	r7, sp, #0
 8019b76:	6078      	str	r0, [r7, #4]
  static uint32_t mem[(sizeof(USBD_CDC_HandleTypeDef)/4)+1];/* On 32-bit boundary */
  return mem;
 8019b78:	4b02      	ldr	r3, [pc, #8]	@ (8019b84 <USBD_static_malloc+0x14>)
}
 8019b7a:	0018      	movs	r0, r3
 8019b7c:	46bd      	mov	sp, r7
 8019b7e:	b002      	add	sp, #8
 8019b80:	bd80      	pop	{r7, pc}
 8019b82:	46c0      	nop			@ (mov r8, r8)
 8019b84:	20003554 	.word	0x20003554

08019b88 <USBD_static_free>:
  * @brief  Dummy memory free
  * @param  p: Pointer to allocated  memory address
  * @retval None
  */
void USBD_static_free(void *p)
{
 8019b88:	b580      	push	{r7, lr}
 8019b8a:	b082      	sub	sp, #8
 8019b8c:	af00      	add	r7, sp, #0
 8019b8e:	6078      	str	r0, [r7, #4]

}
 8019b90:	46c0      	nop			@ (mov r8, r8)
 8019b92:	46bd      	mov	sp, r7
 8019b94:	b002      	add	sp, #8
 8019b96:	bd80      	pop	{r7, pc}

08019b98 <SystemClockConfig_Resume>:
  * @brief  Configures system clock after wake-up from USB resume callBack:
  *         enable HSI, PLL and select PLL as system clock source.
  * @retval None
  */
static void SystemClockConfig_Resume(void)
{
 8019b98:	b580      	push	{r7, lr}
 8019b9a:	af00      	add	r7, sp, #0
  SystemClock_Config();
 8019b9c:	f7ed fb70 	bl	8007280 <SystemClock_Config>
}
 8019ba0:	46c0      	nop			@ (mov r8, r8)
 8019ba2:	46bd      	mov	sp, r7
 8019ba4:	bd80      	pop	{r7, pc}

08019ba6 <USBD_Get_USB_Status>:
  * @brief  Returns the USB status depending on the HAL status:
  * @param  hal_status: HAL status
  * @retval USB status
  */
USBD_StatusTypeDef USBD_Get_USB_Status(HAL_StatusTypeDef hal_status)
{
 8019ba6:	b580      	push	{r7, lr}
 8019ba8:	b084      	sub	sp, #16
 8019baa:	af00      	add	r7, sp, #0
 8019bac:	0002      	movs	r2, r0
 8019bae:	1dfb      	adds	r3, r7, #7
 8019bb0:	701a      	strb	r2, [r3, #0]
  USBD_StatusTypeDef usb_status = USBD_OK;
 8019bb2:	230f      	movs	r3, #15
 8019bb4:	18fb      	adds	r3, r7, r3
 8019bb6:	2200      	movs	r2, #0
 8019bb8:	701a      	strb	r2, [r3, #0]

  switch (hal_status)
 8019bba:	1dfb      	adds	r3, r7, #7
 8019bbc:	781b      	ldrb	r3, [r3, #0]
 8019bbe:	2b03      	cmp	r3, #3
 8019bc0:	d017      	beq.n	8019bf2 <USBD_Get_USB_Status+0x4c>
 8019bc2:	dc1b      	bgt.n	8019bfc <USBD_Get_USB_Status+0x56>
 8019bc4:	2b02      	cmp	r3, #2
 8019bc6:	d00f      	beq.n	8019be8 <USBD_Get_USB_Status+0x42>
 8019bc8:	dc18      	bgt.n	8019bfc <USBD_Get_USB_Status+0x56>
 8019bca:	2b00      	cmp	r3, #0
 8019bcc:	d002      	beq.n	8019bd4 <USBD_Get_USB_Status+0x2e>
 8019bce:	2b01      	cmp	r3, #1
 8019bd0:	d005      	beq.n	8019bde <USBD_Get_USB_Status+0x38>
 8019bd2:	e013      	b.n	8019bfc <USBD_Get_USB_Status+0x56>
  {
    case HAL_OK :
      usb_status = USBD_OK;
 8019bd4:	230f      	movs	r3, #15
 8019bd6:	18fb      	adds	r3, r7, r3
 8019bd8:	2200      	movs	r2, #0
 8019bda:	701a      	strb	r2, [r3, #0]
    break;
 8019bdc:	e013      	b.n	8019c06 <USBD_Get_USB_Status+0x60>
    case HAL_ERROR :
      usb_status = USBD_FAIL;
 8019bde:	230f      	movs	r3, #15
 8019be0:	18fb      	adds	r3, r7, r3
 8019be2:	2202      	movs	r2, #2
 8019be4:	701a      	strb	r2, [r3, #0]
    break;
 8019be6:	e00e      	b.n	8019c06 <USBD_Get_USB_Status+0x60>
    case HAL_BUSY :
      usb_status = USBD_BUSY;
 8019be8:	230f      	movs	r3, #15
 8019bea:	18fb      	adds	r3, r7, r3
 8019bec:	2201      	movs	r2, #1
 8019bee:	701a      	strb	r2, [r3, #0]
    break;
 8019bf0:	e009      	b.n	8019c06 <USBD_Get_USB_Status+0x60>
    case HAL_TIMEOUT :
      usb_status = USBD_FAIL;
 8019bf2:	230f      	movs	r3, #15
 8019bf4:	18fb      	adds	r3, r7, r3
 8019bf6:	2202      	movs	r2, #2
 8019bf8:	701a      	strb	r2, [r3, #0]
    break;
 8019bfa:	e004      	b.n	8019c06 <USBD_Get_USB_Status+0x60>
    default :
      usb_status = USBD_FAIL;
 8019bfc:	230f      	movs	r3, #15
 8019bfe:	18fb      	adds	r3, r7, r3
 8019c00:	2202      	movs	r2, #2
 8019c02:	701a      	strb	r2, [r3, #0]
    break;
 8019c04:	46c0      	nop			@ (mov r8, r8)
  }
  return usb_status;
 8019c06:	230f      	movs	r3, #15
 8019c08:	18fb      	adds	r3, r7, r3
 8019c0a:	781b      	ldrb	r3, [r3, #0]
}
 8019c0c:	0018      	movs	r0, r3
 8019c0e:	46bd      	mov	sp, r7
 8019c10:	b004      	add	sp, #16
 8019c12:	bd80      	pop	{r7, pc}

08019c14 <arm_cfft_radix4by2_q31>:
 8019c14:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019c16:	465f      	mov	r7, fp
 8019c18:	4656      	mov	r6, sl
 8019c1a:	464d      	mov	r5, r9
 8019c1c:	4644      	mov	r4, r8
 8019c1e:	000b      	movs	r3, r1
 8019c20:	b4f0      	push	{r4, r5, r6, r7}
 8019c22:	085b      	lsrs	r3, r3, #1
 8019c24:	b08f      	sub	sp, #60	@ 0x3c
 8019c26:	910a      	str	r1, [sp, #40]	@ 0x28
 8019c28:	0007      	movs	r7, r0
 8019c2a:	9009      	str	r0, [sp, #36]	@ 0x24
 8019c2c:	0011      	movs	r1, r2
 8019c2e:	920b      	str	r2, [sp, #44]	@ 0x2c
 8019c30:	930c      	str	r3, [sp, #48]	@ 0x30
 8019c32:	2b00      	cmp	r3, #0
 8019c34:	d100      	bne.n	8019c38 <arm_cfft_radix4by2_q31+0x24>
 8019c36:	e0a0      	b.n	8019d7a <arm_cfft_radix4by2_q31+0x166>
 8019c38:	0002      	movs	r2, r0
 8019c3a:	00db      	lsls	r3, r3, #3
 8019c3c:	3204      	adds	r2, #4
 8019c3e:	4691      	mov	r9, r2
 8019c40:	4698      	mov	r8, r3
 8019c42:	000a      	movs	r2, r1
 8019c44:	464e      	mov	r6, r9
 8019c46:	4442      	add	r2, r8
 8019c48:	4699      	mov	r9, r3
 8019c4a:	4688      	mov	r8, r1
 8019c4c:	9208      	str	r2, [sp, #32]
 8019c4e:	900d      	str	r0, [sp, #52]	@ 0x34
 8019c50:	4643      	mov	r3, r8
 8019c52:	681b      	ldr	r3, [r3, #0]
 8019c54:	469b      	mov	fp, r3
 8019c56:	4643      	mov	r3, r8
 8019c58:	685b      	ldr	r3, [r3, #4]
 8019c5a:	469a      	mov	sl, r3
 8019c5c:	683b      	ldr	r3, [r7, #0]
 8019c5e:	109c      	asrs	r4, r3, #2
 8019c60:	464b      	mov	r3, r9
 8019c62:	58fb      	ldr	r3, [r7, r3]
 8019c64:	109a      	asrs	r2, r3, #2
 8019c66:	18a3      	adds	r3, r4, r2
 8019c68:	603b      	str	r3, [r7, #0]
 8019c6a:	6833      	ldr	r3, [r6, #0]
 8019c6c:	1aa4      	subs	r4, r4, r2
 8019c6e:	109d      	asrs	r5, r3, #2
 8019c70:	464b      	mov	r3, r9
 8019c72:	58f3      	ldr	r3, [r6, r3]
 8019c74:	17e2      	asrs	r2, r4, #31
 8019c76:	109b      	asrs	r3, r3, #2
 8019c78:	18e9      	adds	r1, r5, r3
 8019c7a:	6031      	str	r1, [r6, #0]
 8019c7c:	0011      	movs	r1, r2
 8019c7e:	465a      	mov	r2, fp
 8019c80:	17d2      	asrs	r2, r2, #31
 8019c82:	0010      	movs	r0, r2
 8019c84:	4652      	mov	r2, sl
 8019c86:	1aed      	subs	r5, r5, r3
 8019c88:	17eb      	asrs	r3, r5, #31
 8019c8a:	17d2      	asrs	r2, r2, #31
 8019c8c:	9307      	str	r3, [sp, #28]
 8019c8e:	9204      	str	r2, [sp, #16]
 8019c90:	0003      	movs	r3, r0
 8019c92:	465a      	mov	r2, fp
 8019c94:	9006      	str	r0, [sp, #24]
 8019c96:	0020      	movs	r0, r4
 8019c98:	9105      	str	r1, [sp, #20]
 8019c9a:	f7e6 fc91 	bl	80005c0 <__aeabi_lmul>
 8019c9e:	2280      	movs	r2, #128	@ 0x80
 8019ca0:	2300      	movs	r3, #0
 8019ca2:	0612      	lsls	r2, r2, #24
 8019ca4:	1880      	adds	r0, r0, r2
 8019ca6:	4159      	adcs	r1, r3
 8019ca8:	2300      	movs	r3, #0
 8019caa:	9101      	str	r1, [sp, #4]
 8019cac:	9300      	str	r3, [sp, #0]
 8019cae:	4652      	mov	r2, sl
 8019cb0:	9b04      	ldr	r3, [sp, #16]
 8019cb2:	0028      	movs	r0, r5
 8019cb4:	17e9      	asrs	r1, r5, #31
 8019cb6:	f7e6 fc83 	bl	80005c0 <__aeabi_lmul>
 8019cba:	9a00      	ldr	r2, [sp, #0]
 8019cbc:	9b01      	ldr	r3, [sp, #4]
 8019cbe:	1880      	adds	r0, r0, r2
 8019cc0:	4159      	adcs	r1, r3
 8019cc2:	2280      	movs	r2, #128	@ 0x80
 8019cc4:	2300      	movs	r3, #0
 8019cc6:	0612      	lsls	r2, r2, #24
 8019cc8:	1880      	adds	r0, r0, r2
 8019cca:	4159      	adcs	r1, r3
 8019ccc:	464a      	mov	r2, r9
 8019cce:	004b      	lsls	r3, r1, #1
 8019cd0:	50bb      	str	r3, [r7, r2]
 8019cd2:	4658      	mov	r0, fp
 8019cd4:	002a      	movs	r2, r5
 8019cd6:	9b07      	ldr	r3, [sp, #28]
 8019cd8:	9906      	ldr	r1, [sp, #24]
 8019cda:	f7e6 fc71 	bl	80005c0 <__aeabi_lmul>
 8019cde:	2280      	movs	r2, #128	@ 0x80
 8019ce0:	2300      	movs	r3, #0
 8019ce2:	0612      	lsls	r2, r2, #24
 8019ce4:	1880      	adds	r0, r0, r2
 8019ce6:	4159      	adcs	r1, r3
 8019ce8:	2000      	movs	r0, #0
 8019cea:	9103      	str	r1, [sp, #12]
 8019cec:	9002      	str	r0, [sp, #8]
 8019cee:	4652      	mov	r2, sl
 8019cf0:	9b04      	ldr	r3, [sp, #16]
 8019cf2:	0020      	movs	r0, r4
 8019cf4:	9905      	ldr	r1, [sp, #20]
 8019cf6:	f7e6 fc63 	bl	80005c0 <__aeabi_lmul>
 8019cfa:	9a02      	ldr	r2, [sp, #8]
 8019cfc:	9b03      	ldr	r3, [sp, #12]
 8019cfe:	1a12      	subs	r2, r2, r0
 8019d00:	418b      	sbcs	r3, r1
 8019d02:	2080      	movs	r0, #128	@ 0x80
 8019d04:	2100      	movs	r1, #0
 8019d06:	0600      	lsls	r0, r0, #24
 8019d08:	1812      	adds	r2, r2, r0
 8019d0a:	414b      	adcs	r3, r1
 8019d0c:	464a      	mov	r2, r9
 8019d0e:	005b      	lsls	r3, r3, #1
 8019d10:	50b3      	str	r3, [r6, r2]
 8019d12:	2308      	movs	r3, #8
 8019d14:	469c      	mov	ip, r3
 8019d16:	9b08      	ldr	r3, [sp, #32]
 8019d18:	44e0      	add	r8, ip
 8019d1a:	3708      	adds	r7, #8
 8019d1c:	3608      	adds	r6, #8
 8019d1e:	4598      	cmp	r8, r3
 8019d20:	d196      	bne.n	8019c50 <arm_cfft_radix4by2_q31+0x3c>
 8019d22:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8019d24:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8019d26:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8019d28:	2302      	movs	r3, #2
 8019d2a:	003a      	movs	r2, r7
 8019d2c:	0029      	movs	r1, r5
 8019d2e:	0020      	movs	r0, r4
 8019d30:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 8019d32:	f000 f957 	bl	8019fe4 <arm_radix4_butterfly_q31>
 8019d36:	46a4      	mov	ip, r4
 8019d38:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8019d3a:	2302      	movs	r3, #2
 8019d3c:	0088      	lsls	r0, r1, #2
 8019d3e:	4460      	add	r0, ip
 8019d40:	003a      	movs	r2, r7
 8019d42:	0029      	movs	r1, r5
 8019d44:	f000 f94e 	bl	8019fe4 <arm_radix4_butterfly_q31>
 8019d48:	46a4      	mov	ip, r4
 8019d4a:	0128      	lsls	r0, r5, #4
 8019d4c:	4460      	add	r0, ip
 8019d4e:	6833      	ldr	r3, [r6, #0]
 8019d50:	005b      	lsls	r3, r3, #1
 8019d52:	6033      	str	r3, [r6, #0]
 8019d54:	6873      	ldr	r3, [r6, #4]
 8019d56:	005b      	lsls	r3, r3, #1
 8019d58:	6073      	str	r3, [r6, #4]
 8019d5a:	68b3      	ldr	r3, [r6, #8]
 8019d5c:	005b      	lsls	r3, r3, #1
 8019d5e:	60b3      	str	r3, [r6, #8]
 8019d60:	68f3      	ldr	r3, [r6, #12]
 8019d62:	005b      	lsls	r3, r3, #1
 8019d64:	60f3      	str	r3, [r6, #12]
 8019d66:	3610      	adds	r6, #16
 8019d68:	42b0      	cmp	r0, r6
 8019d6a:	d1f0      	bne.n	8019d4e <arm_cfft_radix4by2_q31+0x13a>
 8019d6c:	b00f      	add	sp, #60	@ 0x3c
 8019d6e:	bc3c      	pop	{r2, r3, r4, r5}
 8019d70:	4690      	mov	r8, r2
 8019d72:	4699      	mov	r9, r3
 8019d74:	46a2      	mov	sl, r4
 8019d76:	46ab      	mov	fp, r5
 8019d78:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019d7a:	2302      	movs	r3, #2
 8019d7c:	2100      	movs	r1, #0
 8019d7e:	0015      	movs	r5, r2
 8019d80:	f000 f930 	bl	8019fe4 <arm_radix4_butterfly_q31>
 8019d84:	46bc      	mov	ip, r7
 8019d86:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019d88:	002a      	movs	r2, r5
 8019d8a:	0098      	lsls	r0, r3, #2
 8019d8c:	4460      	add	r0, ip
 8019d8e:	2302      	movs	r3, #2
 8019d90:	2100      	movs	r1, #0
 8019d92:	f000 f927 	bl	8019fe4 <arm_radix4_butterfly_q31>
 8019d96:	e7e9      	b.n	8019d6c <arm_cfft_radix4by2_q31+0x158>

08019d98 <arm_cfft_radix4by2_inverse_q31>:
 8019d98:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019d9a:	465f      	mov	r7, fp
 8019d9c:	4656      	mov	r6, sl
 8019d9e:	464d      	mov	r5, r9
 8019da0:	4644      	mov	r4, r8
 8019da2:	000b      	movs	r3, r1
 8019da4:	b4f0      	push	{r4, r5, r6, r7}
 8019da6:	085b      	lsrs	r3, r3, #1
 8019da8:	b08f      	sub	sp, #60	@ 0x3c
 8019daa:	910a      	str	r1, [sp, #40]	@ 0x28
 8019dac:	0007      	movs	r7, r0
 8019dae:	9009      	str	r0, [sp, #36]	@ 0x24
 8019db0:	0011      	movs	r1, r2
 8019db2:	920b      	str	r2, [sp, #44]	@ 0x2c
 8019db4:	930c      	str	r3, [sp, #48]	@ 0x30
 8019db6:	2b00      	cmp	r3, #0
 8019db8:	d100      	bne.n	8019dbc <arm_cfft_radix4by2_inverse_q31+0x24>
 8019dba:	e0a0      	b.n	8019efe <arm_cfft_radix4by2_inverse_q31+0x166>
 8019dbc:	0002      	movs	r2, r0
 8019dbe:	00db      	lsls	r3, r3, #3
 8019dc0:	3204      	adds	r2, #4
 8019dc2:	4691      	mov	r9, r2
 8019dc4:	4698      	mov	r8, r3
 8019dc6:	000a      	movs	r2, r1
 8019dc8:	464e      	mov	r6, r9
 8019dca:	4442      	add	r2, r8
 8019dcc:	4699      	mov	r9, r3
 8019dce:	4688      	mov	r8, r1
 8019dd0:	9208      	str	r2, [sp, #32]
 8019dd2:	900d      	str	r0, [sp, #52]	@ 0x34
 8019dd4:	4643      	mov	r3, r8
 8019dd6:	681b      	ldr	r3, [r3, #0]
 8019dd8:	469b      	mov	fp, r3
 8019dda:	4643      	mov	r3, r8
 8019ddc:	685b      	ldr	r3, [r3, #4]
 8019dde:	469a      	mov	sl, r3
 8019de0:	683b      	ldr	r3, [r7, #0]
 8019de2:	109c      	asrs	r4, r3, #2
 8019de4:	464b      	mov	r3, r9
 8019de6:	58fb      	ldr	r3, [r7, r3]
 8019de8:	109a      	asrs	r2, r3, #2
 8019dea:	18a3      	adds	r3, r4, r2
 8019dec:	603b      	str	r3, [r7, #0]
 8019dee:	6833      	ldr	r3, [r6, #0]
 8019df0:	1aa4      	subs	r4, r4, r2
 8019df2:	109d      	asrs	r5, r3, #2
 8019df4:	464b      	mov	r3, r9
 8019df6:	58f3      	ldr	r3, [r6, r3]
 8019df8:	17e2      	asrs	r2, r4, #31
 8019dfa:	109b      	asrs	r3, r3, #2
 8019dfc:	18e9      	adds	r1, r5, r3
 8019dfe:	6031      	str	r1, [r6, #0]
 8019e00:	0011      	movs	r1, r2
 8019e02:	465a      	mov	r2, fp
 8019e04:	17d2      	asrs	r2, r2, #31
 8019e06:	0010      	movs	r0, r2
 8019e08:	4652      	mov	r2, sl
 8019e0a:	1aed      	subs	r5, r5, r3
 8019e0c:	17eb      	asrs	r3, r5, #31
 8019e0e:	17d2      	asrs	r2, r2, #31
 8019e10:	9307      	str	r3, [sp, #28]
 8019e12:	9204      	str	r2, [sp, #16]
 8019e14:	0003      	movs	r3, r0
 8019e16:	465a      	mov	r2, fp
 8019e18:	9006      	str	r0, [sp, #24]
 8019e1a:	0020      	movs	r0, r4
 8019e1c:	9105      	str	r1, [sp, #20]
 8019e1e:	f7e6 fbcf 	bl	80005c0 <__aeabi_lmul>
 8019e22:	2280      	movs	r2, #128	@ 0x80
 8019e24:	2300      	movs	r3, #0
 8019e26:	0612      	lsls	r2, r2, #24
 8019e28:	1880      	adds	r0, r0, r2
 8019e2a:	4159      	adcs	r1, r3
 8019e2c:	2300      	movs	r3, #0
 8019e2e:	9101      	str	r1, [sp, #4]
 8019e30:	9300      	str	r3, [sp, #0]
 8019e32:	4652      	mov	r2, sl
 8019e34:	9b04      	ldr	r3, [sp, #16]
 8019e36:	0028      	movs	r0, r5
 8019e38:	17e9      	asrs	r1, r5, #31
 8019e3a:	f7e6 fbc1 	bl	80005c0 <__aeabi_lmul>
 8019e3e:	9a00      	ldr	r2, [sp, #0]
 8019e40:	9b01      	ldr	r3, [sp, #4]
 8019e42:	1a12      	subs	r2, r2, r0
 8019e44:	418b      	sbcs	r3, r1
 8019e46:	2080      	movs	r0, #128	@ 0x80
 8019e48:	2100      	movs	r1, #0
 8019e4a:	0600      	lsls	r0, r0, #24
 8019e4c:	1812      	adds	r2, r2, r0
 8019e4e:	414b      	adcs	r3, r1
 8019e50:	464a      	mov	r2, r9
 8019e52:	005b      	lsls	r3, r3, #1
 8019e54:	50bb      	str	r3, [r7, r2]
 8019e56:	4658      	mov	r0, fp
 8019e58:	002a      	movs	r2, r5
 8019e5a:	9b07      	ldr	r3, [sp, #28]
 8019e5c:	9906      	ldr	r1, [sp, #24]
 8019e5e:	f7e6 fbaf 	bl	80005c0 <__aeabi_lmul>
 8019e62:	2280      	movs	r2, #128	@ 0x80
 8019e64:	2300      	movs	r3, #0
 8019e66:	0612      	lsls	r2, r2, #24
 8019e68:	1880      	adds	r0, r0, r2
 8019e6a:	4159      	adcs	r1, r3
 8019e6c:	2000      	movs	r0, #0
 8019e6e:	9103      	str	r1, [sp, #12]
 8019e70:	9002      	str	r0, [sp, #8]
 8019e72:	4652      	mov	r2, sl
 8019e74:	9b04      	ldr	r3, [sp, #16]
 8019e76:	0020      	movs	r0, r4
 8019e78:	9905      	ldr	r1, [sp, #20]
 8019e7a:	f7e6 fba1 	bl	80005c0 <__aeabi_lmul>
 8019e7e:	9b02      	ldr	r3, [sp, #8]
 8019e80:	9c03      	ldr	r4, [sp, #12]
 8019e82:	18c0      	adds	r0, r0, r3
 8019e84:	4161      	adcs	r1, r4
 8019e86:	2380      	movs	r3, #128	@ 0x80
 8019e88:	2400      	movs	r4, #0
 8019e8a:	061b      	lsls	r3, r3, #24
 8019e8c:	18c0      	adds	r0, r0, r3
 8019e8e:	4161      	adcs	r1, r4
 8019e90:	464a      	mov	r2, r9
 8019e92:	004b      	lsls	r3, r1, #1
 8019e94:	50b3      	str	r3, [r6, r2]
 8019e96:	2308      	movs	r3, #8
 8019e98:	469c      	mov	ip, r3
 8019e9a:	9b08      	ldr	r3, [sp, #32]
 8019e9c:	44e0      	add	r8, ip
 8019e9e:	3708      	adds	r7, #8
 8019ea0:	3608      	adds	r6, #8
 8019ea2:	4598      	cmp	r8, r3
 8019ea4:	d196      	bne.n	8019dd4 <arm_cfft_radix4by2_inverse_q31+0x3c>
 8019ea6:	9d0c      	ldr	r5, [sp, #48]	@ 0x30
 8019ea8:	9c09      	ldr	r4, [sp, #36]	@ 0x24
 8019eaa:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 8019eac:	2302      	movs	r3, #2
 8019eae:	003a      	movs	r2, r7
 8019eb0:	0029      	movs	r1, r5
 8019eb2:	0020      	movs	r0, r4
 8019eb4:	9e0d      	ldr	r6, [sp, #52]	@ 0x34
 8019eb6:	f000 fb3b 	bl	801a530 <arm_radix4_butterfly_inverse_q31>
 8019eba:	46a4      	mov	ip, r4
 8019ebc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 8019ebe:	2302      	movs	r3, #2
 8019ec0:	0088      	lsls	r0, r1, #2
 8019ec2:	4460      	add	r0, ip
 8019ec4:	003a      	movs	r2, r7
 8019ec6:	0029      	movs	r1, r5
 8019ec8:	f000 fb32 	bl	801a530 <arm_radix4_butterfly_inverse_q31>
 8019ecc:	46a4      	mov	ip, r4
 8019ece:	0128      	lsls	r0, r5, #4
 8019ed0:	4460      	add	r0, ip
 8019ed2:	6833      	ldr	r3, [r6, #0]
 8019ed4:	005b      	lsls	r3, r3, #1
 8019ed6:	6033      	str	r3, [r6, #0]
 8019ed8:	6873      	ldr	r3, [r6, #4]
 8019eda:	005b      	lsls	r3, r3, #1
 8019edc:	6073      	str	r3, [r6, #4]
 8019ede:	68b3      	ldr	r3, [r6, #8]
 8019ee0:	005b      	lsls	r3, r3, #1
 8019ee2:	60b3      	str	r3, [r6, #8]
 8019ee4:	68f3      	ldr	r3, [r6, #12]
 8019ee6:	005b      	lsls	r3, r3, #1
 8019ee8:	60f3      	str	r3, [r6, #12]
 8019eea:	3610      	adds	r6, #16
 8019eec:	42b0      	cmp	r0, r6
 8019eee:	d1f0      	bne.n	8019ed2 <arm_cfft_radix4by2_inverse_q31+0x13a>
 8019ef0:	b00f      	add	sp, #60	@ 0x3c
 8019ef2:	bc3c      	pop	{r2, r3, r4, r5}
 8019ef4:	4690      	mov	r8, r2
 8019ef6:	4699      	mov	r9, r3
 8019ef8:	46a2      	mov	sl, r4
 8019efa:	46ab      	mov	fp, r5
 8019efc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8019efe:	2302      	movs	r3, #2
 8019f00:	2100      	movs	r1, #0
 8019f02:	0015      	movs	r5, r2
 8019f04:	f000 fb14 	bl	801a530 <arm_radix4_butterfly_inverse_q31>
 8019f08:	46bc      	mov	ip, r7
 8019f0a:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 8019f0c:	002a      	movs	r2, r5
 8019f0e:	0098      	lsls	r0, r3, #2
 8019f10:	4460      	add	r0, ip
 8019f12:	2302      	movs	r3, #2
 8019f14:	2100      	movs	r1, #0
 8019f16:	f000 fb0b 	bl	801a530 <arm_radix4_butterfly_inverse_q31>
 8019f1a:	e7e9      	b.n	8019ef0 <arm_cfft_radix4by2_inverse_q31+0x158>

08019f1c <arm_cfft_q31>:
 8019f1c:	b570      	push	{r4, r5, r6, lr}
 8019f1e:	001e      	movs	r6, r3
 8019f20:	2380      	movs	r3, #128	@ 0x80
 8019f22:	000d      	movs	r5, r1
 8019f24:	0004      	movs	r4, r0
 8019f26:	8801      	ldrh	r1, [r0, #0]
 8019f28:	005b      	lsls	r3, r3, #1
 8019f2a:	2a01      	cmp	r2, #1
 8019f2c:	d028      	beq.n	8019f80 <arm_cfft_q31+0x64>
 8019f2e:	4299      	cmp	r1, r3
 8019f30:	d020      	beq.n	8019f74 <arm_cfft_q31+0x58>
 8019f32:	d812      	bhi.n	8019f5a <arm_cfft_q31+0x3e>
 8019f34:	2920      	cmp	r1, #32
 8019f36:	d004      	beq.n	8019f42 <arm_cfft_q31+0x26>
 8019f38:	d949      	bls.n	8019fce <arm_cfft_q31+0xb2>
 8019f3a:	2940      	cmp	r1, #64	@ 0x40
 8019f3c:	d01a      	beq.n	8019f74 <arm_cfft_q31+0x58>
 8019f3e:	2980      	cmp	r1, #128	@ 0x80
 8019f40:	d103      	bne.n	8019f4a <arm_cfft_q31+0x2e>
 8019f42:	6862      	ldr	r2, [r4, #4]
 8019f44:	0028      	movs	r0, r5
 8019f46:	f7ff fe65 	bl	8019c14 <arm_cfft_radix4by2_q31>
 8019f4a:	2e00      	cmp	r6, #0
 8019f4c:	d004      	beq.n	8019f58 <arm_cfft_q31+0x3c>
 8019f4e:	68a2      	ldr	r2, [r4, #8]
 8019f50:	89a1      	ldrh	r1, [r4, #12]
 8019f52:	0028      	movs	r0, r5
 8019f54:	f7e6 f8d8 	bl	8000108 <arm_bitreversal_32>
 8019f58:	bd70      	pop	{r4, r5, r6, pc}
 8019f5a:	2380      	movs	r3, #128	@ 0x80
 8019f5c:	00db      	lsls	r3, r3, #3
 8019f5e:	4299      	cmp	r1, r3
 8019f60:	d008      	beq.n	8019f74 <arm_cfft_q31+0x58>
 8019f62:	d92f      	bls.n	8019fc4 <arm_cfft_q31+0xa8>
 8019f64:	2380      	movs	r3, #128	@ 0x80
 8019f66:	011b      	lsls	r3, r3, #4
 8019f68:	4299      	cmp	r1, r3
 8019f6a:	d0ea      	beq.n	8019f42 <arm_cfft_q31+0x26>
 8019f6c:	2380      	movs	r3, #128	@ 0x80
 8019f6e:	015b      	lsls	r3, r3, #5
 8019f70:	4299      	cmp	r1, r3
 8019f72:	d1ea      	bne.n	8019f4a <arm_cfft_q31+0x2e>
 8019f74:	2301      	movs	r3, #1
 8019f76:	6862      	ldr	r2, [r4, #4]
 8019f78:	0028      	movs	r0, r5
 8019f7a:	f000 f833 	bl	8019fe4 <arm_radix4_butterfly_q31>
 8019f7e:	e7e4      	b.n	8019f4a <arm_cfft_q31+0x2e>
 8019f80:	4299      	cmp	r1, r3
 8019f82:	d019      	beq.n	8019fb8 <arm_cfft_q31+0x9c>
 8019f84:	d80b      	bhi.n	8019f9e <arm_cfft_q31+0x82>
 8019f86:	2920      	cmp	r1, #32
 8019f88:	d004      	beq.n	8019f94 <arm_cfft_q31+0x78>
 8019f8a:	d928      	bls.n	8019fde <arm_cfft_q31+0xc2>
 8019f8c:	2940      	cmp	r1, #64	@ 0x40
 8019f8e:	d013      	beq.n	8019fb8 <arm_cfft_q31+0x9c>
 8019f90:	2980      	cmp	r1, #128	@ 0x80
 8019f92:	d1da      	bne.n	8019f4a <arm_cfft_q31+0x2e>
 8019f94:	6862      	ldr	r2, [r4, #4]
 8019f96:	0028      	movs	r0, r5
 8019f98:	f7ff fefe 	bl	8019d98 <arm_cfft_radix4by2_inverse_q31>
 8019f9c:	e7d5      	b.n	8019f4a <arm_cfft_q31+0x2e>
 8019f9e:	2380      	movs	r3, #128	@ 0x80
 8019fa0:	00db      	lsls	r3, r3, #3
 8019fa2:	4299      	cmp	r1, r3
 8019fa4:	d008      	beq.n	8019fb8 <arm_cfft_q31+0x9c>
 8019fa6:	d915      	bls.n	8019fd4 <arm_cfft_q31+0xb8>
 8019fa8:	2380      	movs	r3, #128	@ 0x80
 8019faa:	011b      	lsls	r3, r3, #4
 8019fac:	4299      	cmp	r1, r3
 8019fae:	d0f1      	beq.n	8019f94 <arm_cfft_q31+0x78>
 8019fb0:	2380      	movs	r3, #128	@ 0x80
 8019fb2:	015b      	lsls	r3, r3, #5
 8019fb4:	4299      	cmp	r1, r3
 8019fb6:	d1c8      	bne.n	8019f4a <arm_cfft_q31+0x2e>
 8019fb8:	2301      	movs	r3, #1
 8019fba:	6862      	ldr	r2, [r4, #4]
 8019fbc:	0028      	movs	r0, r5
 8019fbe:	f000 fab7 	bl	801a530 <arm_radix4_butterfly_inverse_q31>
 8019fc2:	e7c2      	b.n	8019f4a <arm_cfft_q31+0x2e>
 8019fc4:	2380      	movs	r3, #128	@ 0x80
 8019fc6:	009b      	lsls	r3, r3, #2
 8019fc8:	4299      	cmp	r1, r3
 8019fca:	d0ba      	beq.n	8019f42 <arm_cfft_q31+0x26>
 8019fcc:	e7bd      	b.n	8019f4a <arm_cfft_q31+0x2e>
 8019fce:	2910      	cmp	r1, #16
 8019fd0:	d1bb      	bne.n	8019f4a <arm_cfft_q31+0x2e>
 8019fd2:	e7cf      	b.n	8019f74 <arm_cfft_q31+0x58>
 8019fd4:	2380      	movs	r3, #128	@ 0x80
 8019fd6:	009b      	lsls	r3, r3, #2
 8019fd8:	4299      	cmp	r1, r3
 8019fda:	d0db      	beq.n	8019f94 <arm_cfft_q31+0x78>
 8019fdc:	e7b5      	b.n	8019f4a <arm_cfft_q31+0x2e>
 8019fde:	2910      	cmp	r1, #16
 8019fe0:	d1b3      	bne.n	8019f4a <arm_cfft_q31+0x2e>
 8019fe2:	e7e9      	b.n	8019fb8 <arm_cfft_q31+0x9c>

08019fe4 <arm_radix4_butterfly_q31>:
 8019fe4:	b5f0      	push	{r4, r5, r6, r7, lr}
 8019fe6:	464d      	mov	r5, r9
 8019fe8:	4644      	mov	r4, r8
 8019fea:	465f      	mov	r7, fp
 8019fec:	4656      	mov	r6, sl
 8019fee:	469c      	mov	ip, r3
 8019ff0:	b4f0      	push	{r4, r5, r6, r7}
 8019ff2:	b0a7      	sub	sp, #156	@ 0x9c
 8019ff4:	9114      	str	r1, [sp, #80]	@ 0x50
 8019ff6:	0889      	lsrs	r1, r1, #2
 8019ff8:	9310      	str	r3, [sp, #64]	@ 0x40
 8019ffa:	00cb      	lsls	r3, r1, #3
 8019ffc:	0015      	movs	r5, r2
 8019ffe:	9223      	str	r2, [sp, #140]	@ 0x8c
 801a000:	18c2      	adds	r2, r0, r3
 801a002:	000c      	movs	r4, r1
 801a004:	469a      	mov	sl, r3
 801a006:	9124      	str	r1, [sp, #144]	@ 0x90
 801a008:	18d1      	adds	r1, r2, r3
 801a00a:	4663      	mov	r3, ip
 801a00c:	468b      	mov	fp, r1
 801a00e:	0119      	lsls	r1, r3, #4
 801a010:	910d      	str	r1, [sp, #52]	@ 0x34
 801a012:	00d9      	lsls	r1, r3, #3
 801a014:	005b      	lsls	r3, r3, #1
 801a016:	4463      	add	r3, ip
 801a018:	910e      	str	r1, [sp, #56]	@ 0x38
 801a01a:	00d9      	lsls	r1, r3, #3
 801a01c:	465b      	mov	r3, fp
 801a01e:	44da      	add	sl, fp
 801a020:	4690      	mov	r8, r2
 801a022:	4683      	mov	fp, r0
 801a024:	4699      	mov	r9, r3
 801a026:	9022      	str	r0, [sp, #136]	@ 0x88
 801a028:	9025      	str	r0, [sp, #148]	@ 0x94
 801a02a:	910f      	str	r1, [sp, #60]	@ 0x3c
 801a02c:	9502      	str	r5, [sp, #8]
 801a02e:	9500      	str	r5, [sp, #0]
 801a030:	9501      	str	r5, [sp, #4]
 801a032:	9407      	str	r4, [sp, #28]
 801a034:	465b      	mov	r3, fp
 801a036:	681b      	ldr	r3, [r3, #0]
 801a038:	4642      	mov	r2, r8
 801a03a:	111c      	asrs	r4, r3, #4
 801a03c:	464b      	mov	r3, r9
 801a03e:	4658      	mov	r0, fp
 801a040:	681b      	ldr	r3, [r3, #0]
 801a042:	6812      	ldr	r2, [r2, #0]
 801a044:	111b      	asrs	r3, r3, #4
 801a046:	18e7      	adds	r7, r4, r3
 801a048:	1ae3      	subs	r3, r4, r3
 801a04a:	1114      	asrs	r4, r2, #4
 801a04c:	4652      	mov	r2, sl
 801a04e:	6840      	ldr	r0, [r0, #4]
 801a050:	6812      	ldr	r2, [r2, #0]
 801a052:	1105      	asrs	r5, r0, #4
 801a054:	4648      	mov	r0, r9
 801a056:	9303      	str	r3, [sp, #12]
 801a058:	1113      	asrs	r3, r2, #4
 801a05a:	18e2      	adds	r2, r4, r3
 801a05c:	465c      	mov	r4, fp
 801a05e:	6840      	ldr	r0, [r0, #4]
 801a060:	1103      	asrs	r3, r0, #4
 801a062:	18ee      	adds	r6, r5, r3
 801a064:	1ae8      	subs	r0, r5, r3
 801a066:	18bb      	adds	r3, r7, r2
 801a068:	6023      	str	r3, [r4, #0]
 801a06a:	4644      	mov	r4, r8
 801a06c:	6864      	ldr	r4, [r4, #4]
 801a06e:	9004      	str	r0, [sp, #16]
 801a070:	1125      	asrs	r5, r4, #4
 801a072:	4654      	mov	r4, sl
 801a074:	6864      	ldr	r4, [r4, #4]
 801a076:	1123      	asrs	r3, r4, #4
 801a078:	465c      	mov	r4, fp
 801a07a:	18eb      	adds	r3, r5, r3
 801a07c:	18f1      	adds	r1, r6, r3
 801a07e:	6061      	str	r1, [r4, #4]
 801a080:	4655      	mov	r5, sl
 801a082:	4644      	mov	r4, r8
 801a084:	686d      	ldr	r5, [r5, #4]
 801a086:	6864      	ldr	r4, [r4, #4]
 801a088:	1129      	asrs	r1, r5, #4
 801a08a:	1124      	asrs	r4, r4, #4
 801a08c:	1a64      	subs	r4, r4, r1
 801a08e:	4641      	mov	r1, r8
 801a090:	6809      	ldr	r1, [r1, #0]
 801a092:	9405      	str	r4, [sp, #20]
 801a094:	1108      	asrs	r0, r1, #4
 801a096:	4651      	mov	r1, sl
 801a098:	6809      	ldr	r1, [r1, #0]
 801a09a:	1abc      	subs	r4, r7, r2
 801a09c:	1109      	asrs	r1, r1, #4
 801a09e:	1a41      	subs	r1, r0, r1
 801a0a0:	17e2      	asrs	r2, r4, #31
 801a0a2:	9106      	str	r1, [sp, #24]
 801a0a4:	0011      	movs	r1, r2
 801a0a6:	9a01      	ldr	r2, [sp, #4]
 801a0a8:	9108      	str	r1, [sp, #32]
 801a0aa:	6817      	ldr	r7, [r2, #0]
 801a0ac:	17fd      	asrs	r5, r7, #31
 801a0ae:	0028      	movs	r0, r5
 801a0b0:	1af5      	subs	r5, r6, r3
 801a0b2:	17ee      	asrs	r6, r5, #31
 801a0b4:	960a      	str	r6, [sp, #40]	@ 0x28
 801a0b6:	6856      	ldr	r6, [r2, #4]
 801a0b8:	9009      	str	r0, [sp, #36]	@ 0x24
 801a0ba:	17f3      	asrs	r3, r6, #31
 801a0bc:	003a      	movs	r2, r7
 801a0be:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a0c0:	0003      	movs	r3, r0
 801a0c2:	0020      	movs	r0, r4
 801a0c4:	f7e6 fa7c 	bl	80005c0 <__aeabi_lmul>
 801a0c8:	0032      	movs	r2, r6
 801a0ca:	17f3      	asrs	r3, r6, #31
 801a0cc:	910c      	str	r1, [sp, #48]	@ 0x30
 801a0ce:	0028      	movs	r0, r5
 801a0d0:	17e9      	asrs	r1, r5, #31
 801a0d2:	f7e6 fa75 	bl	80005c0 <__aeabi_lmul>
 801a0d6:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801a0d8:	002a      	movs	r2, r5
 801a0da:	4684      	mov	ip, r0
 801a0dc:	4640      	mov	r0, r8
 801a0de:	4461      	add	r1, ip
 801a0e0:	0049      	lsls	r1, r1, #1
 801a0e2:	6001      	str	r1, [r0, #0]
 801a0e4:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a0e6:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801a0e8:	0038      	movs	r0, r7
 801a0ea:	f7e6 fa69 	bl	80005c0 <__aeabi_lmul>
 801a0ee:	0032      	movs	r2, r6
 801a0f0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a0f2:	000d      	movs	r5, r1
 801a0f4:	0020      	movs	r0, r4
 801a0f6:	9908      	ldr	r1, [sp, #32]
 801a0f8:	f7e6 fa62 	bl	80005c0 <__aeabi_lmul>
 801a0fc:	4646      	mov	r6, r8
 801a0fe:	1a6d      	subs	r5, r5, r1
 801a100:	006d      	lsls	r5, r5, #1
 801a102:	6075      	str	r5, [r6, #4]
 801a104:	9903      	ldr	r1, [sp, #12]
 801a106:	9d05      	ldr	r5, [sp, #20]
 801a108:	000c      	movs	r4, r1
 801a10a:	46ac      	mov	ip, r5
 801a10c:	4464      	add	r4, ip
 801a10e:	17e6      	asrs	r6, r4, #31
 801a110:	0031      	movs	r1, r6
 801a112:	9b00      	ldr	r3, [sp, #0]
 801a114:	9804      	ldr	r0, [sp, #16]
 801a116:	681e      	ldr	r6, [r3, #0]
 801a118:	17f7      	asrs	r7, r6, #31
 801a11a:	9709      	str	r7, [sp, #36]	@ 0x24
 801a11c:	9f06      	ldr	r7, [sp, #24]
 801a11e:	0032      	movs	r2, r6
 801a120:	1bc7      	subs	r7, r0, r7
 801a122:	17fd      	asrs	r5, r7, #31
 801a124:	950a      	str	r5, [sp, #40]	@ 0x28
 801a126:	685d      	ldr	r5, [r3, #4]
 801a128:	17f3      	asrs	r3, r6, #31
 801a12a:	17e8      	asrs	r0, r5, #31
 801a12c:	900b      	str	r0, [sp, #44]	@ 0x2c
 801a12e:	0020      	movs	r0, r4
 801a130:	9108      	str	r1, [sp, #32]
 801a132:	f7e6 fa45 	bl	80005c0 <__aeabi_lmul>
 801a136:	002a      	movs	r2, r5
 801a138:	17eb      	asrs	r3, r5, #31
 801a13a:	910c      	str	r1, [sp, #48]	@ 0x30
 801a13c:	0038      	movs	r0, r7
 801a13e:	17f9      	asrs	r1, r7, #31
 801a140:	f7e6 fa3e 	bl	80005c0 <__aeabi_lmul>
 801a144:	980c      	ldr	r0, [sp, #48]	@ 0x30
 801a146:	003a      	movs	r2, r7
 801a148:	4684      	mov	ip, r0
 801a14a:	4648      	mov	r0, r9
 801a14c:	4461      	add	r1, ip
 801a14e:	0049      	lsls	r1, r1, #1
 801a150:	6001      	str	r1, [r0, #0]
 801a152:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a154:	0030      	movs	r0, r6
 801a156:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801a158:	f7e6 fa32 	bl	80005c0 <__aeabi_lmul>
 801a15c:	002a      	movs	r2, r5
 801a15e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a160:	000e      	movs	r6, r1
 801a162:	0020      	movs	r0, r4
 801a164:	9908      	ldr	r1, [sp, #32]
 801a166:	f7e6 fa2b 	bl	80005c0 <__aeabi_lmul>
 801a16a:	464c      	mov	r4, r9
 801a16c:	9d05      	ldr	r5, [sp, #20]
 801a16e:	1a76      	subs	r6, r6, r1
 801a170:	9903      	ldr	r1, [sp, #12]
 801a172:	0076      	lsls	r6, r6, #1
 801a174:	6066      	str	r6, [r4, #4]
 801a176:	1b4c      	subs	r4, r1, r5
 801a178:	9e06      	ldr	r6, [sp, #24]
 801a17a:	17e1      	asrs	r1, r4, #31
 801a17c:	9103      	str	r1, [sp, #12]
 801a17e:	9902      	ldr	r1, [sp, #8]
 801a180:	46b4      	mov	ip, r6
 801a182:	680f      	ldr	r7, [r1, #0]
 801a184:	9804      	ldr	r0, [sp, #16]
 801a186:	17fd      	asrs	r5, r7, #31
 801a188:	002b      	movs	r3, r5
 801a18a:	684e      	ldr	r6, [r1, #4]
 801a18c:	4460      	add	r0, ip
 801a18e:	0005      	movs	r5, r0
 801a190:	17c0      	asrs	r0, r0, #31
 801a192:	9005      	str	r0, [sp, #20]
 801a194:	17f0      	asrs	r0, r6, #31
 801a196:	9006      	str	r0, [sp, #24]
 801a198:	003a      	movs	r2, r7
 801a19a:	0020      	movs	r0, r4
 801a19c:	17e1      	asrs	r1, r4, #31
 801a19e:	9304      	str	r3, [sp, #16]
 801a1a0:	f7e6 fa0e 	bl	80005c0 <__aeabi_lmul>
 801a1a4:	0032      	movs	r2, r6
 801a1a6:	9108      	str	r1, [sp, #32]
 801a1a8:	17f3      	asrs	r3, r6, #31
 801a1aa:	0028      	movs	r0, r5
 801a1ac:	17e9      	asrs	r1, r5, #31
 801a1ae:	f7e6 fa07 	bl	80005c0 <__aeabi_lmul>
 801a1b2:	9808      	ldr	r0, [sp, #32]
 801a1b4:	002a      	movs	r2, r5
 801a1b6:	4684      	mov	ip, r0
 801a1b8:	4650      	mov	r0, sl
 801a1ba:	4461      	add	r1, ip
 801a1bc:	0049      	lsls	r1, r1, #1
 801a1be:	6001      	str	r1, [r0, #0]
 801a1c0:	9b05      	ldr	r3, [sp, #20]
 801a1c2:	9904      	ldr	r1, [sp, #16]
 801a1c4:	0038      	movs	r0, r7
 801a1c6:	f7e6 f9fb 	bl	80005c0 <__aeabi_lmul>
 801a1ca:	0020      	movs	r0, r4
 801a1cc:	2408      	movs	r4, #8
 801a1ce:	000d      	movs	r5, r1
 801a1d0:	0032      	movs	r2, r6
 801a1d2:	9b06      	ldr	r3, [sp, #24]
 801a1d4:	9903      	ldr	r1, [sp, #12]
 801a1d6:	f7e6 f9f3 	bl	80005c0 <__aeabi_lmul>
 801a1da:	46a4      	mov	ip, r4
 801a1dc:	4650      	mov	r0, sl
 801a1de:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801a1e0:	44e3      	add	fp, ip
 801a1e2:	44e0      	add	r8, ip
 801a1e4:	44e1      	add	r9, ip
 801a1e6:	44e2      	add	sl, ip
 801a1e8:	46a4      	mov	ip, r4
 801a1ea:	1a6d      	subs	r5, r5, r1
 801a1ec:	006d      	lsls	r5, r5, #1
 801a1ee:	9a01      	ldr	r2, [sp, #4]
 801a1f0:	6045      	str	r5, [r0, #4]
 801a1f2:	9807      	ldr	r0, [sp, #28]
 801a1f4:	4462      	add	r2, ip
 801a1f6:	3801      	subs	r0, #1
 801a1f8:	9201      	str	r2, [sp, #4]
 801a1fa:	9007      	str	r0, [sp, #28]
 801a1fc:	9b00      	ldr	r3, [sp, #0]
 801a1fe:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801a200:	9902      	ldr	r1, [sp, #8]
 801a202:	4694      	mov	ip, r2
 801a204:	4463      	add	r3, ip
 801a206:	9300      	str	r3, [sp, #0]
 801a208:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a20a:	469c      	mov	ip, r3
 801a20c:	4461      	add	r1, ip
 801a20e:	9102      	str	r1, [sp, #8]
 801a210:	2800      	cmp	r0, #0
 801a212:	d000      	beq.n	801a216 <arm_radix4_butterfly_q31+0x232>
 801a214:	e70e      	b.n	801a034 <arm_radix4_butterfly_q31+0x50>
 801a216:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801a218:	009b      	lsls	r3, r3, #2
 801a21a:	931f      	str	r3, [sp, #124]	@ 0x7c
 801a21c:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801a21e:	9320      	str	r3, [sp, #128]	@ 0x80
 801a220:	9313      	str	r3, [sp, #76]	@ 0x4c
 801a222:	2b04      	cmp	r3, #4
 801a224:	d800      	bhi.n	801a228 <arm_radix4_butterfly_q31+0x244>
 801a226:	e180      	b.n	801a52a <arm_radix4_butterfly_q31+0x546>
 801a228:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801a22a:	0893      	lsrs	r3, r2, #2
 801a22c:	1e59      	subs	r1, r3, #1
 801a22e:	9321      	str	r3, [sp, #132]	@ 0x84
 801a230:	00db      	lsls	r3, r3, #3
 801a232:	931b      	str	r3, [sp, #108]	@ 0x6c
 801a234:	00d3      	lsls	r3, r2, #3
 801a236:	9300      	str	r3, [sp, #0]
 801a238:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801a23a:	911a      	str	r1, [sp, #104]	@ 0x68
 801a23c:	00da      	lsls	r2, r3, #3
 801a23e:	921e      	str	r2, [sp, #120]	@ 0x78
 801a240:	011a      	lsls	r2, r3, #4
 801a242:	921d      	str	r2, [sp, #116]	@ 0x74
 801a244:	001a      	movs	r2, r3
 801a246:	4694      	mov	ip, r2
 801a248:	005b      	lsls	r3, r3, #1
 801a24a:	4463      	add	r3, ip
 801a24c:	00db      	lsls	r3, r3, #3
 801a24e:	931c      	str	r3, [sp, #112]	@ 0x70
 801a250:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801a252:	9317      	str	r3, [sp, #92]	@ 0x5c
 801a254:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801a256:	9318      	str	r3, [sp, #96]	@ 0x60
 801a258:	9319      	str	r3, [sp, #100]	@ 0x64
 801a25a:	9316      	str	r3, [sp, #88]	@ 0x58
 801a25c:	2300      	movs	r3, #0
 801a25e:	9315      	str	r3, [sp, #84]	@ 0x54
 801a260:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801a262:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801a264:	681a      	ldr	r2, [r3, #0]
 801a266:	685b      	ldr	r3, [r3, #4]
 801a268:	9205      	str	r2, [sp, #20]
 801a26a:	9306      	str	r3, [sp, #24]
 801a26c:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801a26e:	468c      	mov	ip, r1
 801a270:	681a      	ldr	r2, [r3, #0]
 801a272:	685b      	ldr	r3, [r3, #4]
 801a274:	9207      	str	r2, [sp, #28]
 801a276:	9308      	str	r3, [sp, #32]
 801a278:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801a27a:	681a      	ldr	r2, [r3, #0]
 801a27c:	685b      	ldr	r3, [r3, #4]
 801a27e:	9209      	str	r2, [sp, #36]	@ 0x24
 801a280:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801a282:	930a      	str	r3, [sp, #40]	@ 0x28
 801a284:	0013      	movs	r3, r2
 801a286:	4463      	add	r3, ip
 801a288:	4698      	mov	r8, r3
 801a28a:	0013      	movs	r3, r2
 801a28c:	4442      	add	r2, r8
 801a28e:	4691      	mov	r9, r2
 801a290:	001a      	movs	r2, r3
 801a292:	444a      	add	r2, r9
 801a294:	4692      	mov	sl, r2
 801a296:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801a298:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801a29a:	4293      	cmp	r3, r2
 801a29c:	d800      	bhi.n	801a2a0 <arm_radix4_butterfly_q31+0x2bc>
 801a29e:	e0dd      	b.n	801a45c <arm_radix4_butterfly_q31+0x478>
 801a2a0:	4694      	mov	ip, r2
 801a2a2:	468b      	mov	fp, r1
 801a2a4:	4644      	mov	r4, r8
 801a2a6:	4655      	mov	r5, sl
 801a2a8:	9b07      	ldr	r3, [sp, #28]
 801a2aa:	17db      	asrs	r3, r3, #31
 801a2ac:	930c      	str	r3, [sp, #48]	@ 0x30
 801a2ae:	9b08      	ldr	r3, [sp, #32]
 801a2b0:	17db      	asrs	r3, r3, #31
 801a2b2:	930d      	str	r3, [sp, #52]	@ 0x34
 801a2b4:	9b05      	ldr	r3, [sp, #20]
 801a2b6:	17db      	asrs	r3, r3, #31
 801a2b8:	930e      	str	r3, [sp, #56]	@ 0x38
 801a2ba:	9b06      	ldr	r3, [sp, #24]
 801a2bc:	17db      	asrs	r3, r3, #31
 801a2be:	930f      	str	r3, [sp, #60]	@ 0x3c
 801a2c0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a2c2:	17db      	asrs	r3, r3, #31
 801a2c4:	9310      	str	r3, [sp, #64]	@ 0x40
 801a2c6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a2c8:	17db      	asrs	r3, r3, #31
 801a2ca:	9311      	str	r3, [sp, #68]	@ 0x44
 801a2cc:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801a2ce:	4463      	add	r3, ip
 801a2d0:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a2d2:	465b      	mov	r3, fp
 801a2d4:	4659      	mov	r1, fp
 801a2d6:	681a      	ldr	r2, [r3, #0]
 801a2d8:	464b      	mov	r3, r9
 801a2da:	684f      	ldr	r7, [r1, #4]
 801a2dc:	4649      	mov	r1, r9
 801a2de:	681b      	ldr	r3, [r3, #0]
 801a2e0:	18d6      	adds	r6, r2, r3
 801a2e2:	1ad3      	subs	r3, r2, r3
 801a2e4:	9301      	str	r3, [sp, #4]
 801a2e6:	684b      	ldr	r3, [r1, #4]
 801a2e8:	18f8      	adds	r0, r7, r3
 801a2ea:	1af9      	subs	r1, r7, r3
 801a2ec:	6827      	ldr	r7, [r4, #0]
 801a2ee:	9102      	str	r1, [sp, #8]
 801a2f0:	003a      	movs	r2, r7
 801a2f2:	682f      	ldr	r7, [r5, #0]
 801a2f4:	46bc      	mov	ip, r7
 801a2f6:	465f      	mov	r7, fp
 801a2f8:	4462      	add	r2, ip
 801a2fa:	18b3      	adds	r3, r6, r2
 801a2fc:	109b      	asrs	r3, r3, #2
 801a2fe:	603b      	str	r3, [r7, #0]
 801a300:	6867      	ldr	r7, [r4, #4]
 801a302:	1ab6      	subs	r6, r6, r2
 801a304:	46b8      	mov	r8, r7
 801a306:	686f      	ldr	r7, [r5, #4]
 801a308:	17f2      	asrs	r2, r6, #31
 801a30a:	46bc      	mov	ip, r7
 801a30c:	44e0      	add	r8, ip
 801a30e:	4643      	mov	r3, r8
 801a310:	465f      	mov	r7, fp
 801a312:	18c1      	adds	r1, r0, r3
 801a314:	1089      	asrs	r1, r1, #2
 801a316:	6079      	str	r1, [r7, #4]
 801a318:	9900      	ldr	r1, [sp, #0]
 801a31a:	4690      	mov	r8, r2
 801a31c:	468c      	mov	ip, r1
 801a31e:	6867      	ldr	r7, [r4, #4]
 801a320:	6869      	ldr	r1, [r5, #4]
 801a322:	44e3      	add	fp, ip
 801a324:	1a7f      	subs	r7, r7, r1
 801a326:	9703      	str	r7, [sp, #12]
 801a328:	6829      	ldr	r1, [r5, #0]
 801a32a:	6827      	ldr	r7, [r4, #0]
 801a32c:	1a7f      	subs	r7, r7, r1
 801a32e:	9704      	str	r7, [sp, #16]
 801a330:	1ac7      	subs	r7, r0, r3
 801a332:	17fa      	asrs	r2, r7, #31
 801a334:	4692      	mov	sl, r2
 801a336:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a338:	9a07      	ldr	r2, [sp, #28]
 801a33a:	0030      	movs	r0, r6
 801a33c:	4641      	mov	r1, r8
 801a33e:	f7e6 f93f 	bl	80005c0 <__aeabi_lmul>
 801a342:	9a08      	ldr	r2, [sp, #32]
 801a344:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a346:	9112      	str	r1, [sp, #72]	@ 0x48
 801a348:	0038      	movs	r0, r7
 801a34a:	4651      	mov	r1, sl
 801a34c:	f7e6 f938 	bl	80005c0 <__aeabi_lmul>
 801a350:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801a352:	9a07      	ldr	r2, [sp, #28]
 801a354:	4684      	mov	ip, r0
 801a356:	4461      	add	r1, ip
 801a358:	1049      	asrs	r1, r1, #1
 801a35a:	6021      	str	r1, [r4, #0]
 801a35c:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a35e:	0038      	movs	r0, r7
 801a360:	4651      	mov	r1, sl
 801a362:	f7e6 f92d 	bl	80005c0 <__aeabi_lmul>
 801a366:	9a08      	ldr	r2, [sp, #32]
 801a368:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a36a:	000f      	movs	r7, r1
 801a36c:	0030      	movs	r0, r6
 801a36e:	4641      	mov	r1, r8
 801a370:	f7e6 f926 	bl	80005c0 <__aeabi_lmul>
 801a374:	9b00      	ldr	r3, [sp, #0]
 801a376:	9a01      	ldr	r2, [sp, #4]
 801a378:	469c      	mov	ip, r3
 801a37a:	9803      	ldr	r0, [sp, #12]
 801a37c:	1a7f      	subs	r7, r7, r1
 801a37e:	107f      	asrs	r7, r7, #1
 801a380:	6067      	str	r7, [r4, #4]
 801a382:	0016      	movs	r6, r2
 801a384:	4464      	add	r4, ip
 801a386:	4684      	mov	ip, r0
 801a388:	4466      	add	r6, ip
 801a38a:	17f2      	asrs	r2, r6, #31
 801a38c:	4690      	mov	r8, r2
 801a38e:	9902      	ldr	r1, [sp, #8]
 801a390:	9f04      	ldr	r7, [sp, #16]
 801a392:	0030      	movs	r0, r6
 801a394:	1bcf      	subs	r7, r1, r7
 801a396:	17fa      	asrs	r2, r7, #31
 801a398:	4692      	mov	sl, r2
 801a39a:	4641      	mov	r1, r8
 801a39c:	9a05      	ldr	r2, [sp, #20]
 801a39e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a3a0:	f7e6 f90e 	bl	80005c0 <__aeabi_lmul>
 801a3a4:	9a06      	ldr	r2, [sp, #24]
 801a3a6:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a3a8:	9112      	str	r1, [sp, #72]	@ 0x48
 801a3aa:	0038      	movs	r0, r7
 801a3ac:	4651      	mov	r1, sl
 801a3ae:	f7e6 f907 	bl	80005c0 <__aeabi_lmul>
 801a3b2:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801a3b4:	9a05      	ldr	r2, [sp, #20]
 801a3b6:	4684      	mov	ip, r0
 801a3b8:	4648      	mov	r0, r9
 801a3ba:	4461      	add	r1, ip
 801a3bc:	1049      	asrs	r1, r1, #1
 801a3be:	6001      	str	r1, [r0, #0]
 801a3c0:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a3c2:	0038      	movs	r0, r7
 801a3c4:	4651      	mov	r1, sl
 801a3c6:	f7e6 f8fb 	bl	80005c0 <__aeabi_lmul>
 801a3ca:	9a06      	ldr	r2, [sp, #24]
 801a3cc:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a3ce:	000f      	movs	r7, r1
 801a3d0:	0030      	movs	r0, r6
 801a3d2:	4641      	mov	r1, r8
 801a3d4:	f7e6 f8f4 	bl	80005c0 <__aeabi_lmul>
 801a3d8:	464e      	mov	r6, r9
 801a3da:	9a00      	ldr	r2, [sp, #0]
 801a3dc:	9b01      	ldr	r3, [sp, #4]
 801a3de:	4694      	mov	ip, r2
 801a3e0:	9803      	ldr	r0, [sp, #12]
 801a3e2:	1a7f      	subs	r7, r7, r1
 801a3e4:	107f      	asrs	r7, r7, #1
 801a3e6:	6077      	str	r7, [r6, #4]
 801a3e8:	1a1e      	subs	r6, r3, r0
 801a3ea:	9b04      	ldr	r3, [sp, #16]
 801a3ec:	44e1      	add	r9, ip
 801a3ee:	469c      	mov	ip, r3
 801a3f0:	17f0      	asrs	r0, r6, #31
 801a3f2:	4680      	mov	r8, r0
 801a3f4:	9902      	ldr	r1, [sp, #8]
 801a3f6:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a3f8:	4461      	add	r1, ip
 801a3fa:	17cb      	asrs	r3, r1, #31
 801a3fc:	000f      	movs	r7, r1
 801a3fe:	469a      	mov	sl, r3
 801a400:	0030      	movs	r0, r6
 801a402:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801a404:	4641      	mov	r1, r8
 801a406:	f7e6 f8db 	bl	80005c0 <__aeabi_lmul>
 801a40a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801a40c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801a40e:	9101      	str	r1, [sp, #4]
 801a410:	0038      	movs	r0, r7
 801a412:	4651      	mov	r1, sl
 801a414:	f7e6 f8d4 	bl	80005c0 <__aeabi_lmul>
 801a418:	9801      	ldr	r0, [sp, #4]
 801a41a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a41c:	4684      	mov	ip, r0
 801a41e:	4461      	add	r1, ip
 801a420:	1049      	asrs	r1, r1, #1
 801a422:	6029      	str	r1, [r5, #0]
 801a424:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801a426:	0038      	movs	r0, r7
 801a428:	4651      	mov	r1, sl
 801a42a:	f7e6 f8c9 	bl	80005c0 <__aeabi_lmul>
 801a42e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801a430:	000f      	movs	r7, r1
 801a432:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801a434:	0030      	movs	r0, r6
 801a436:	4641      	mov	r1, r8
 801a438:	f7e6 f8c2 	bl	80005c0 <__aeabi_lmul>
 801a43c:	1a7f      	subs	r7, r7, r1
 801a43e:	107f      	asrs	r7, r7, #1
 801a440:	606f      	str	r7, [r5, #4]
 801a442:	9a00      	ldr	r2, [sp, #0]
 801a444:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801a446:	4694      	mov	ip, r2
 801a448:	4465      	add	r5, ip
 801a44a:	468c      	mov	ip, r1
 801a44c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801a44e:	0013      	movs	r3, r2
 801a450:	4462      	add	r2, ip
 801a452:	920b      	str	r2, [sp, #44]	@ 0x2c
 801a454:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801a456:	429a      	cmp	r2, r3
 801a458:	d900      	bls.n	801a45c <arm_radix4_butterfly_q31+0x478>
 801a45a:	e73a      	b.n	801a2d2 <arm_radix4_butterfly_q31+0x2ee>
 801a45c:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801a45e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801a460:	468c      	mov	ip, r1
 801a462:	991d      	ldr	r1, [sp, #116]	@ 0x74
 801a464:	4462      	add	r2, ip
 801a466:	468c      	mov	ip, r1
 801a468:	9216      	str	r2, [sp, #88]	@ 0x58
 801a46a:	991c      	ldr	r1, [sp, #112]	@ 0x70
 801a46c:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801a46e:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801a470:	4462      	add	r2, ip
 801a472:	468c      	mov	ip, r1
 801a474:	9219      	str	r2, [sp, #100]	@ 0x64
 801a476:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801a478:	3301      	adds	r3, #1
 801a47a:	4462      	add	r2, ip
 801a47c:	9218      	str	r2, [sp, #96]	@ 0x60
 801a47e:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801a480:	9315      	str	r3, [sp, #84]	@ 0x54
 801a482:	3208      	adds	r2, #8
 801a484:	9217      	str	r2, [sp, #92]	@ 0x5c
 801a486:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801a488:	4293      	cmp	r3, r2
 801a48a:	d800      	bhi.n	801a48e <arm_radix4_butterfly_q31+0x4aa>
 801a48c:	e6e8      	b.n	801a260 <arm_radix4_butterfly_q31+0x27c>
 801a48e:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801a490:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801a492:	009b      	lsls	r3, r3, #2
 801a494:	931f      	str	r3, [sp, #124]	@ 0x7c
 801a496:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801a498:	9213      	str	r2, [sp, #76]	@ 0x4c
 801a49a:	089b      	lsrs	r3, r3, #2
 801a49c:	9320      	str	r3, [sp, #128]	@ 0x80
 801a49e:	2b04      	cmp	r3, #4
 801a4a0:	d900      	bls.n	801a4a4 <arm_radix4_butterfly_q31+0x4c0>
 801a4a2:	e6c1      	b.n	801a228 <arm_radix4_butterfly_q31+0x244>
 801a4a4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801a4a6:	469a      	mov	sl, r3
 801a4a8:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801a4aa:	691c      	ldr	r4, [r3, #16]
 801a4ac:	685a      	ldr	r2, [r3, #4]
 801a4ae:	46a1      	mov	r9, r4
 801a4b0:	4690      	mov	r8, r2
 801a4b2:	6819      	ldr	r1, [r3, #0]
 801a4b4:	689a      	ldr	r2, [r3, #8]
 801a4b6:	699f      	ldr	r7, [r3, #24]
 801a4b8:	188d      	adds	r5, r1, r2
 801a4ba:	444d      	add	r5, r9
 801a4bc:	19ed      	adds	r5, r5, r7
 801a4be:	69de      	ldr	r6, [r3, #28]
 801a4c0:	601d      	str	r5, [r3, #0]
 801a4c2:	4645      	mov	r5, r8
 801a4c4:	46b4      	mov	ip, r6
 801a4c6:	68d8      	ldr	r0, [r3, #12]
 801a4c8:	695c      	ldr	r4, [r3, #20]
 801a4ca:	182d      	adds	r5, r5, r0
 801a4cc:	192d      	adds	r5, r5, r4
 801a4ce:	4465      	add	r5, ip
 801a4d0:	605d      	str	r5, [r3, #4]
 801a4d2:	1a8d      	subs	r5, r1, r2
 801a4d4:	444d      	add	r5, r9
 801a4d6:	1bed      	subs	r5, r5, r7
 801a4d8:	609d      	str	r5, [r3, #8]
 801a4da:	4645      	mov	r5, r8
 801a4dc:	1a2d      	subs	r5, r5, r0
 801a4de:	192d      	adds	r5, r5, r4
 801a4e0:	1bad      	subs	r5, r5, r6
 801a4e2:	464e      	mov	r6, r9
 801a4e4:	60dd      	str	r5, [r3, #12]
 801a4e6:	180d      	adds	r5, r1, r0
 801a4e8:	1bad      	subs	r5, r5, r6
 801a4ea:	4666      	mov	r6, ip
 801a4ec:	1bad      	subs	r5, r5, r6
 801a4ee:	611d      	str	r5, [r3, #16]
 801a4f0:	4645      	mov	r5, r8
 801a4f2:	1aad      	subs	r5, r5, r2
 801a4f4:	4442      	add	r2, r8
 801a4f6:	1b12      	subs	r2, r2, r4
 801a4f8:	1bd2      	subs	r2, r2, r7
 801a4fa:	1a08      	subs	r0, r1, r0
 801a4fc:	61da      	str	r2, [r3, #28]
 801a4fe:	4649      	mov	r1, r9
 801a500:	2201      	movs	r2, #1
 801a502:	1a41      	subs	r1, r0, r1
 801a504:	4252      	negs	r2, r2
 801a506:	4461      	add	r1, ip
 801a508:	4694      	mov	ip, r2
 801a50a:	44e2      	add	sl, ip
 801a50c:	4652      	mov	r2, sl
 801a50e:	1b2d      	subs	r5, r5, r4
 801a510:	19ed      	adds	r5, r5, r7
 801a512:	615d      	str	r5, [r3, #20]
 801a514:	6199      	str	r1, [r3, #24]
 801a516:	3320      	adds	r3, #32
 801a518:	2a00      	cmp	r2, #0
 801a51a:	d1c6      	bne.n	801a4aa <arm_radix4_butterfly_q31+0x4c6>
 801a51c:	b027      	add	sp, #156	@ 0x9c
 801a51e:	bc3c      	pop	{r2, r3, r4, r5}
 801a520:	4690      	mov	r8, r2
 801a522:	4699      	mov	r9, r3
 801a524:	46a2      	mov	sl, r4
 801a526:	46ab      	mov	fp, r5
 801a528:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801a52a:	469a      	mov	sl, r3
 801a52c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801a52e:	e7bc      	b.n	801a4aa <arm_radix4_butterfly_q31+0x4c6>

0801a530 <arm_radix4_butterfly_inverse_q31>:
 801a530:	b5f0      	push	{r4, r5, r6, r7, lr}
 801a532:	464d      	mov	r5, r9
 801a534:	4644      	mov	r4, r8
 801a536:	465f      	mov	r7, fp
 801a538:	4656      	mov	r6, sl
 801a53a:	b4f0      	push	{r4, r5, r6, r7}
 801a53c:	b0a7      	sub	sp, #156	@ 0x9c
 801a53e:	469c      	mov	ip, r3
 801a540:	9114      	str	r1, [sp, #80]	@ 0x50
 801a542:	0889      	lsrs	r1, r1, #2
 801a544:	9310      	str	r3, [sp, #64]	@ 0x40
 801a546:	00cb      	lsls	r3, r1, #3
 801a548:	0015      	movs	r5, r2
 801a54a:	9223      	str	r2, [sp, #140]	@ 0x8c
 801a54c:	18c2      	adds	r2, r0, r3
 801a54e:	000c      	movs	r4, r1
 801a550:	9124      	str	r1, [sp, #144]	@ 0x90
 801a552:	18d1      	adds	r1, r2, r3
 801a554:	468b      	mov	fp, r1
 801a556:	469a      	mov	sl, r3
 801a558:	4663      	mov	r3, ip
 801a55a:	44da      	add	sl, fp
 801a55c:	46d0      	mov	r8, sl
 801a55e:	4681      	mov	r9, r0
 801a560:	4692      	mov	sl, r2
 801a562:	0119      	lsls	r1, r3, #4
 801a564:	910d      	str	r1, [sp, #52]	@ 0x34
 801a566:	00d9      	lsls	r1, r3, #3
 801a568:	005b      	lsls	r3, r3, #1
 801a56a:	4463      	add	r3, ip
 801a56c:	910e      	str	r1, [sp, #56]	@ 0x38
 801a56e:	00d9      	lsls	r1, r3, #3
 801a570:	9022      	str	r0, [sp, #136]	@ 0x88
 801a572:	9025      	str	r0, [sp, #148]	@ 0x94
 801a574:	910f      	str	r1, [sp, #60]	@ 0x3c
 801a576:	9502      	str	r5, [sp, #8]
 801a578:	9500      	str	r5, [sp, #0]
 801a57a:	9501      	str	r5, [sp, #4]
 801a57c:	9409      	str	r4, [sp, #36]	@ 0x24
 801a57e:	464b      	mov	r3, r9
 801a580:	681b      	ldr	r3, [r3, #0]
 801a582:	4652      	mov	r2, sl
 801a584:	111c      	asrs	r4, r3, #4
 801a586:	465b      	mov	r3, fp
 801a588:	4648      	mov	r0, r9
 801a58a:	681b      	ldr	r3, [r3, #0]
 801a58c:	6812      	ldr	r2, [r2, #0]
 801a58e:	6840      	ldr	r0, [r0, #4]
 801a590:	111b      	asrs	r3, r3, #4
 801a592:	18e7      	adds	r7, r4, r3
 801a594:	1ae3      	subs	r3, r4, r3
 801a596:	1114      	asrs	r4, r2, #4
 801a598:	4642      	mov	r2, r8
 801a59a:	1105      	asrs	r5, r0, #4
 801a59c:	4658      	mov	r0, fp
 801a59e:	6812      	ldr	r2, [r2, #0]
 801a5a0:	6840      	ldr	r0, [r0, #4]
 801a5a2:	9303      	str	r3, [sp, #12]
 801a5a4:	1113      	asrs	r3, r2, #4
 801a5a6:	18e2      	adds	r2, r4, r3
 801a5a8:	1103      	asrs	r3, r0, #4
 801a5aa:	18ee      	adds	r6, r5, r3
 801a5ac:	1ae8      	subs	r0, r5, r3
 801a5ae:	464d      	mov	r5, r9
 801a5b0:	18bb      	adds	r3, r7, r2
 801a5b2:	602b      	str	r3, [r5, #0]
 801a5b4:	4641      	mov	r1, r8
 801a5b6:	4655      	mov	r5, sl
 801a5b8:	6849      	ldr	r1, [r1, #4]
 801a5ba:	686d      	ldr	r5, [r5, #4]
 801a5bc:	110b      	asrs	r3, r1, #4
 801a5be:	112d      	asrs	r5, r5, #4
 801a5c0:	18eb      	adds	r3, r5, r3
 801a5c2:	464d      	mov	r5, r9
 801a5c4:	18f1      	adds	r1, r6, r3
 801a5c6:	6069      	str	r1, [r5, #4]
 801a5c8:	4655      	mov	r5, sl
 801a5ca:	686d      	ldr	r5, [r5, #4]
 801a5cc:	9004      	str	r0, [sp, #16]
 801a5ce:	112c      	asrs	r4, r5, #4
 801a5d0:	4645      	mov	r5, r8
 801a5d2:	686d      	ldr	r5, [r5, #4]
 801a5d4:	1129      	asrs	r1, r5, #4
 801a5d6:	1a65      	subs	r5, r4, r1
 801a5d8:	4651      	mov	r1, sl
 801a5da:	6809      	ldr	r1, [r1, #0]
 801a5dc:	1abc      	subs	r4, r7, r2
 801a5de:	1108      	asrs	r0, r1, #4
 801a5e0:	4641      	mov	r1, r8
 801a5e2:	17e2      	asrs	r2, r4, #31
 801a5e4:	6809      	ldr	r1, [r1, #0]
 801a5e6:	9207      	str	r2, [sp, #28]
 801a5e8:	9a01      	ldr	r2, [sp, #4]
 801a5ea:	1109      	asrs	r1, r1, #4
 801a5ec:	6817      	ldr	r7, [r2, #0]
 801a5ee:	1a41      	subs	r1, r0, r1
 801a5f0:	9106      	str	r1, [sp, #24]
 801a5f2:	0039      	movs	r1, r7
 801a5f4:	17ff      	asrs	r7, r7, #31
 801a5f6:	0038      	movs	r0, r7
 801a5f8:	9505      	str	r5, [sp, #20]
 801a5fa:	1af5      	subs	r5, r6, r3
 801a5fc:	17ef      	asrs	r7, r5, #31
 801a5fe:	970b      	str	r7, [sp, #44]	@ 0x2c
 801a600:	6857      	ldr	r7, [r2, #4]
 801a602:	0003      	movs	r3, r0
 801a604:	17fe      	asrs	r6, r7, #31
 801a606:	000a      	movs	r2, r1
 801a608:	9108      	str	r1, [sp, #32]
 801a60a:	900a      	str	r0, [sp, #40]	@ 0x28
 801a60c:	17e1      	asrs	r1, r4, #31
 801a60e:	0020      	movs	r0, r4
 801a610:	960c      	str	r6, [sp, #48]	@ 0x30
 801a612:	f7e5 ffd5 	bl	80005c0 <__aeabi_lmul>
 801a616:	003a      	movs	r2, r7
 801a618:	17fb      	asrs	r3, r7, #31
 801a61a:	000e      	movs	r6, r1
 801a61c:	0028      	movs	r0, r5
 801a61e:	17e9      	asrs	r1, r5, #31
 801a620:	f7e5 ffce 	bl	80005c0 <__aeabi_lmul>
 801a624:	4653      	mov	r3, sl
 801a626:	1a76      	subs	r6, r6, r1
 801a628:	0076      	lsls	r6, r6, #1
 801a62a:	601e      	str	r6, [r3, #0]
 801a62c:	002a      	movs	r2, r5
 801a62e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801a630:	9808      	ldr	r0, [sp, #32]
 801a632:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801a634:	f7e5 ffc4 	bl	80005c0 <__aeabi_lmul>
 801a638:	003a      	movs	r2, r7
 801a63a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a63c:	000d      	movs	r5, r1
 801a63e:	0020      	movs	r0, r4
 801a640:	9907      	ldr	r1, [sp, #28]
 801a642:	f7e5 ffbd 	bl	80005c0 <__aeabi_lmul>
 801a646:	4657      	mov	r7, sl
 801a648:	186d      	adds	r5, r5, r1
 801a64a:	006d      	lsls	r5, r5, #1
 801a64c:	607d      	str	r5, [r7, #4]
 801a64e:	9b03      	ldr	r3, [sp, #12]
 801a650:	9e06      	ldr	r6, [sp, #24]
 801a652:	9d05      	ldr	r5, [sp, #20]
 801a654:	46b4      	mov	ip, r6
 801a656:	1b5d      	subs	r5, r3, r5
 801a658:	9b00      	ldr	r3, [sp, #0]
 801a65a:	17ef      	asrs	r7, r5, #31
 801a65c:	0039      	movs	r1, r7
 801a65e:	681f      	ldr	r7, [r3, #0]
 801a660:	17fc      	asrs	r4, r7, #31
 801a662:	0020      	movs	r0, r4
 801a664:	9c04      	ldr	r4, [sp, #16]
 801a666:	4464      	add	r4, ip
 801a668:	17e6      	asrs	r6, r4, #31
 801a66a:	9407      	str	r4, [sp, #28]
 801a66c:	9608      	str	r6, [sp, #32]
 801a66e:	685e      	ldr	r6, [r3, #4]
 801a670:	900b      	str	r0, [sp, #44]	@ 0x2c
 801a672:	17f2      	asrs	r2, r6, #31
 801a674:	0003      	movs	r3, r0
 801a676:	920c      	str	r2, [sp, #48]	@ 0x30
 801a678:	0028      	movs	r0, r5
 801a67a:	003a      	movs	r2, r7
 801a67c:	910a      	str	r1, [sp, #40]	@ 0x28
 801a67e:	f7e5 ff9f 	bl	80005c0 <__aeabi_lmul>
 801a682:	0032      	movs	r2, r6
 801a684:	17f3      	asrs	r3, r6, #31
 801a686:	9807      	ldr	r0, [sp, #28]
 801a688:	000c      	movs	r4, r1
 801a68a:	9908      	ldr	r1, [sp, #32]
 801a68c:	f7e5 ff98 	bl	80005c0 <__aeabi_lmul>
 801a690:	4658      	mov	r0, fp
 801a692:	1a64      	subs	r4, r4, r1
 801a694:	0064      	lsls	r4, r4, #1
 801a696:	9a07      	ldr	r2, [sp, #28]
 801a698:	6004      	str	r4, [r0, #0]
 801a69a:	9b08      	ldr	r3, [sp, #32]
 801a69c:	0038      	movs	r0, r7
 801a69e:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801a6a0:	f7e5 ff8e 	bl	80005c0 <__aeabi_lmul>
 801a6a4:	0032      	movs	r2, r6
 801a6a6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a6a8:	000c      	movs	r4, r1
 801a6aa:	0028      	movs	r0, r5
 801a6ac:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801a6ae:	f7e5 ff87 	bl	80005c0 <__aeabi_lmul>
 801a6b2:	9d05      	ldr	r5, [sp, #20]
 801a6b4:	465f      	mov	r7, fp
 801a6b6:	46ac      	mov	ip, r5
 801a6b8:	1864      	adds	r4, r4, r1
 801a6ba:	9903      	ldr	r1, [sp, #12]
 801a6bc:	0064      	lsls	r4, r4, #1
 801a6be:	4461      	add	r1, ip
 801a6c0:	607c      	str	r4, [r7, #4]
 801a6c2:	000c      	movs	r4, r1
 801a6c4:	17c9      	asrs	r1, r1, #31
 801a6c6:	9105      	str	r1, [sp, #20]
 801a6c8:	9902      	ldr	r1, [sp, #8]
 801a6ca:	9804      	ldr	r0, [sp, #16]
 801a6cc:	680d      	ldr	r5, [r1, #0]
 801a6ce:	9e06      	ldr	r6, [sp, #24]
 801a6d0:	002b      	movs	r3, r5
 801a6d2:	17ed      	asrs	r5, r5, #31
 801a6d4:	684f      	ldr	r7, [r1, #4]
 801a6d6:	9503      	str	r5, [sp, #12]
 801a6d8:	1b85      	subs	r5, r0, r6
 801a6da:	17e8      	asrs	r0, r5, #31
 801a6dc:	001a      	movs	r2, r3
 801a6de:	9006      	str	r0, [sp, #24]
 801a6e0:	17fe      	asrs	r6, r7, #31
 801a6e2:	9304      	str	r3, [sp, #16]
 801a6e4:	0020      	movs	r0, r4
 801a6e6:	9b03      	ldr	r3, [sp, #12]
 801a6e8:	17e1      	asrs	r1, r4, #31
 801a6ea:	9607      	str	r6, [sp, #28]
 801a6ec:	f7e5 ff68 	bl	80005c0 <__aeabi_lmul>
 801a6f0:	003a      	movs	r2, r7
 801a6f2:	000e      	movs	r6, r1
 801a6f4:	17fb      	asrs	r3, r7, #31
 801a6f6:	0028      	movs	r0, r5
 801a6f8:	17e9      	asrs	r1, r5, #31
 801a6fa:	f7e5 ff61 	bl	80005c0 <__aeabi_lmul>
 801a6fe:	4640      	mov	r0, r8
 801a700:	1a76      	subs	r6, r6, r1
 801a702:	0076      	lsls	r6, r6, #1
 801a704:	002a      	movs	r2, r5
 801a706:	9b06      	ldr	r3, [sp, #24]
 801a708:	6006      	str	r6, [r0, #0]
 801a70a:	9903      	ldr	r1, [sp, #12]
 801a70c:	9804      	ldr	r0, [sp, #16]
 801a70e:	f7e5 ff57 	bl	80005c0 <__aeabi_lmul>
 801a712:	0020      	movs	r0, r4
 801a714:	2408      	movs	r4, #8
 801a716:	9b07      	ldr	r3, [sp, #28]
 801a718:	000d      	movs	r5, r1
 801a71a:	003a      	movs	r2, r7
 801a71c:	9905      	ldr	r1, [sp, #20]
 801a71e:	f7e5 ff4f 	bl	80005c0 <__aeabi_lmul>
 801a722:	4640      	mov	r0, r8
 801a724:	46a4      	mov	ip, r4
 801a726:	186d      	adds	r5, r5, r1
 801a728:	006d      	lsls	r5, r5, #1
 801a72a:	6045      	str	r5, [r0, #4]
 801a72c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801a72e:	44e1      	add	r9, ip
 801a730:	3801      	subs	r0, #1
 801a732:	9009      	str	r0, [sp, #36]	@ 0x24
 801a734:	9a01      	ldr	r2, [sp, #4]
 801a736:	9c0d      	ldr	r4, [sp, #52]	@ 0x34
 801a738:	44e2      	add	sl, ip
 801a73a:	44e3      	add	fp, ip
 801a73c:	44e0      	add	r8, ip
 801a73e:	46a4      	mov	ip, r4
 801a740:	4462      	add	r2, ip
 801a742:	9201      	str	r2, [sp, #4]
 801a744:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801a746:	9b00      	ldr	r3, [sp, #0]
 801a748:	4694      	mov	ip, r2
 801a74a:	4463      	add	r3, ip
 801a74c:	9300      	str	r3, [sp, #0]
 801a74e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a750:	9902      	ldr	r1, [sp, #8]
 801a752:	469c      	mov	ip, r3
 801a754:	4461      	add	r1, ip
 801a756:	9102      	str	r1, [sp, #8]
 801a758:	2800      	cmp	r0, #0
 801a75a:	d000      	beq.n	801a75e <arm_radix4_butterfly_inverse_q31+0x22e>
 801a75c:	e70f      	b.n	801a57e <arm_radix4_butterfly_inverse_q31+0x4e>
 801a75e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801a760:	009b      	lsls	r3, r3, #2
 801a762:	931f      	str	r3, [sp, #124]	@ 0x7c
 801a764:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801a766:	9320      	str	r3, [sp, #128]	@ 0x80
 801a768:	9313      	str	r3, [sp, #76]	@ 0x4c
 801a76a:	2b04      	cmp	r3, #4
 801a76c:	d800      	bhi.n	801a770 <arm_radix4_butterfly_inverse_q31+0x240>
 801a76e:	e17c      	b.n	801aa6a <arm_radix4_butterfly_inverse_q31+0x53a>
 801a770:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801a772:	0893      	lsrs	r3, r2, #2
 801a774:	1e59      	subs	r1, r3, #1
 801a776:	9321      	str	r3, [sp, #132]	@ 0x84
 801a778:	00db      	lsls	r3, r3, #3
 801a77a:	931b      	str	r3, [sp, #108]	@ 0x6c
 801a77c:	00d3      	lsls	r3, r2, #3
 801a77e:	9300      	str	r3, [sp, #0]
 801a780:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801a782:	911a      	str	r1, [sp, #104]	@ 0x68
 801a784:	00da      	lsls	r2, r3, #3
 801a786:	921e      	str	r2, [sp, #120]	@ 0x78
 801a788:	011a      	lsls	r2, r3, #4
 801a78a:	921d      	str	r2, [sp, #116]	@ 0x74
 801a78c:	001a      	movs	r2, r3
 801a78e:	4694      	mov	ip, r2
 801a790:	005b      	lsls	r3, r3, #1
 801a792:	4463      	add	r3, ip
 801a794:	00db      	lsls	r3, r3, #3
 801a796:	931c      	str	r3, [sp, #112]	@ 0x70
 801a798:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801a79a:	9317      	str	r3, [sp, #92]	@ 0x5c
 801a79c:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801a79e:	9318      	str	r3, [sp, #96]	@ 0x60
 801a7a0:	9319      	str	r3, [sp, #100]	@ 0x64
 801a7a2:	9316      	str	r3, [sp, #88]	@ 0x58
 801a7a4:	2300      	movs	r3, #0
 801a7a6:	9315      	str	r3, [sp, #84]	@ 0x54
 801a7a8:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801a7aa:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801a7ac:	681a      	ldr	r2, [r3, #0]
 801a7ae:	685b      	ldr	r3, [r3, #4]
 801a7b0:	9205      	str	r2, [sp, #20]
 801a7b2:	9306      	str	r3, [sp, #24]
 801a7b4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801a7b6:	468c      	mov	ip, r1
 801a7b8:	681a      	ldr	r2, [r3, #0]
 801a7ba:	685b      	ldr	r3, [r3, #4]
 801a7bc:	9207      	str	r2, [sp, #28]
 801a7be:	9308      	str	r3, [sp, #32]
 801a7c0:	9b18      	ldr	r3, [sp, #96]	@ 0x60
 801a7c2:	681a      	ldr	r2, [r3, #0]
 801a7c4:	685b      	ldr	r3, [r3, #4]
 801a7c6:	9209      	str	r2, [sp, #36]	@ 0x24
 801a7c8:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801a7ca:	930a      	str	r3, [sp, #40]	@ 0x28
 801a7cc:	0013      	movs	r3, r2
 801a7ce:	4463      	add	r3, ip
 801a7d0:	4698      	mov	r8, r3
 801a7d2:	0013      	movs	r3, r2
 801a7d4:	4442      	add	r2, r8
 801a7d6:	4691      	mov	r9, r2
 801a7d8:	001a      	movs	r2, r3
 801a7da:	444a      	add	r2, r9
 801a7dc:	4692      	mov	sl, r2
 801a7de:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801a7e0:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801a7e2:	4293      	cmp	r3, r2
 801a7e4:	d800      	bhi.n	801a7e8 <arm_radix4_butterfly_inverse_q31+0x2b8>
 801a7e6:	e0d9      	b.n	801a99c <arm_radix4_butterfly_inverse_q31+0x46c>
 801a7e8:	4694      	mov	ip, r2
 801a7ea:	4644      	mov	r4, r8
 801a7ec:	4655      	mov	r5, sl
 801a7ee:	4688      	mov	r8, r1
 801a7f0:	9b07      	ldr	r3, [sp, #28]
 801a7f2:	17db      	asrs	r3, r3, #31
 801a7f4:	930c      	str	r3, [sp, #48]	@ 0x30
 801a7f6:	9b08      	ldr	r3, [sp, #32]
 801a7f8:	17db      	asrs	r3, r3, #31
 801a7fa:	930d      	str	r3, [sp, #52]	@ 0x34
 801a7fc:	9b05      	ldr	r3, [sp, #20]
 801a7fe:	17db      	asrs	r3, r3, #31
 801a800:	930e      	str	r3, [sp, #56]	@ 0x38
 801a802:	9b06      	ldr	r3, [sp, #24]
 801a804:	17db      	asrs	r3, r3, #31
 801a806:	930f      	str	r3, [sp, #60]	@ 0x3c
 801a808:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801a80a:	17db      	asrs	r3, r3, #31
 801a80c:	9310      	str	r3, [sp, #64]	@ 0x40
 801a80e:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801a810:	17db      	asrs	r3, r3, #31
 801a812:	9311      	str	r3, [sp, #68]	@ 0x44
 801a814:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801a816:	4463      	add	r3, ip
 801a818:	930b      	str	r3, [sp, #44]	@ 0x2c
 801a81a:	4643      	mov	r3, r8
 801a81c:	4641      	mov	r1, r8
 801a81e:	681a      	ldr	r2, [r3, #0]
 801a820:	464b      	mov	r3, r9
 801a822:	684f      	ldr	r7, [r1, #4]
 801a824:	4649      	mov	r1, r9
 801a826:	681b      	ldr	r3, [r3, #0]
 801a828:	18d6      	adds	r6, r2, r3
 801a82a:	1ad3      	subs	r3, r2, r3
 801a82c:	9301      	str	r3, [sp, #4]
 801a82e:	684b      	ldr	r3, [r1, #4]
 801a830:	1af9      	subs	r1, r7, r3
 801a832:	9102      	str	r1, [sp, #8]
 801a834:	6829      	ldr	r1, [r5, #0]
 801a836:	18f8      	adds	r0, r7, r3
 801a838:	468c      	mov	ip, r1
 801a83a:	6827      	ldr	r7, [r4, #0]
 801a83c:	4467      	add	r7, ip
 801a83e:	003a      	movs	r2, r7
 801a840:	19f3      	adds	r3, r6, r7
 801a842:	4647      	mov	r7, r8
 801a844:	109b      	asrs	r3, r3, #2
 801a846:	603b      	str	r3, [r7, #0]
 801a848:	6869      	ldr	r1, [r5, #4]
 801a84a:	6867      	ldr	r7, [r4, #4]
 801a84c:	468c      	mov	ip, r1
 801a84e:	4467      	add	r7, ip
 801a850:	003b      	movs	r3, r7
 801a852:	19c1      	adds	r1, r0, r7
 801a854:	4647      	mov	r7, r8
 801a856:	1ab6      	subs	r6, r6, r2
 801a858:	1089      	asrs	r1, r1, #2
 801a85a:	6079      	str	r1, [r7, #4]
 801a85c:	17f2      	asrs	r2, r6, #31
 801a85e:	9900      	ldr	r1, [sp, #0]
 801a860:	4692      	mov	sl, r2
 801a862:	468c      	mov	ip, r1
 801a864:	6867      	ldr	r7, [r4, #4]
 801a866:	6869      	ldr	r1, [r5, #4]
 801a868:	44e0      	add	r8, ip
 801a86a:	1a7f      	subs	r7, r7, r1
 801a86c:	9703      	str	r7, [sp, #12]
 801a86e:	6821      	ldr	r1, [r4, #0]
 801a870:	682f      	ldr	r7, [r5, #0]
 801a872:	1bc9      	subs	r1, r1, r7
 801a874:	1ac7      	subs	r7, r0, r3
 801a876:	17fa      	asrs	r2, r7, #31
 801a878:	4693      	mov	fp, r2
 801a87a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a87c:	9a07      	ldr	r2, [sp, #28]
 801a87e:	9104      	str	r1, [sp, #16]
 801a880:	0030      	movs	r0, r6
 801a882:	4651      	mov	r1, sl
 801a884:	f7e5 fe9c 	bl	80005c0 <__aeabi_lmul>
 801a888:	9a08      	ldr	r2, [sp, #32]
 801a88a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a88c:	9112      	str	r1, [sp, #72]	@ 0x48
 801a88e:	0038      	movs	r0, r7
 801a890:	4659      	mov	r1, fp
 801a892:	f7e5 fe95 	bl	80005c0 <__aeabi_lmul>
 801a896:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801a898:	9a07      	ldr	r2, [sp, #28]
 801a89a:	1a41      	subs	r1, r0, r1
 801a89c:	1049      	asrs	r1, r1, #1
 801a89e:	6021      	str	r1, [r4, #0]
 801a8a0:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801a8a2:	0038      	movs	r0, r7
 801a8a4:	4659      	mov	r1, fp
 801a8a6:	f7e5 fe8b 	bl	80005c0 <__aeabi_lmul>
 801a8aa:	9a08      	ldr	r2, [sp, #32]
 801a8ac:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801a8ae:	000f      	movs	r7, r1
 801a8b0:	0030      	movs	r0, r6
 801a8b2:	4651      	mov	r1, sl
 801a8b4:	f7e5 fe84 	bl	80005c0 <__aeabi_lmul>
 801a8b8:	9b00      	ldr	r3, [sp, #0]
 801a8ba:	187f      	adds	r7, r7, r1
 801a8bc:	469c      	mov	ip, r3
 801a8be:	107f      	asrs	r7, r7, #1
 801a8c0:	6067      	str	r7, [r4, #4]
 801a8c2:	9a01      	ldr	r2, [sp, #4]
 801a8c4:	9f03      	ldr	r7, [sp, #12]
 801a8c6:	9802      	ldr	r0, [sp, #8]
 801a8c8:	1bd7      	subs	r7, r2, r7
 801a8ca:	17fe      	asrs	r6, r7, #31
 801a8cc:	0031      	movs	r1, r6
 801a8ce:	9e04      	ldr	r6, [sp, #16]
 801a8d0:	4682      	mov	sl, r0
 801a8d2:	4464      	add	r4, ip
 801a8d4:	46b4      	mov	ip, r6
 801a8d6:	44e2      	add	sl, ip
 801a8d8:	4652      	mov	r2, sl
 801a8da:	17d2      	asrs	r2, r2, #31
 801a8dc:	4693      	mov	fp, r2
 801a8de:	0038      	movs	r0, r7
 801a8e0:	9a05      	ldr	r2, [sp, #20]
 801a8e2:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a8e4:	9112      	str	r1, [sp, #72]	@ 0x48
 801a8e6:	f7e5 fe6b 	bl	80005c0 <__aeabi_lmul>
 801a8ea:	9a06      	ldr	r2, [sp, #24]
 801a8ec:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a8ee:	000e      	movs	r6, r1
 801a8f0:	4650      	mov	r0, sl
 801a8f2:	4659      	mov	r1, fp
 801a8f4:	f7e5 fe64 	bl	80005c0 <__aeabi_lmul>
 801a8f8:	4648      	mov	r0, r9
 801a8fa:	1a76      	subs	r6, r6, r1
 801a8fc:	1076      	asrs	r6, r6, #1
 801a8fe:	6006      	str	r6, [r0, #0]
 801a900:	9a05      	ldr	r2, [sp, #20]
 801a902:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801a904:	4650      	mov	r0, sl
 801a906:	4659      	mov	r1, fp
 801a908:	f7e5 fe5a 	bl	80005c0 <__aeabi_lmul>
 801a90c:	9a06      	ldr	r2, [sp, #24]
 801a90e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801a910:	000e      	movs	r6, r1
 801a912:	0038      	movs	r0, r7
 801a914:	9912      	ldr	r1, [sp, #72]	@ 0x48
 801a916:	f7e5 fe53 	bl	80005c0 <__aeabi_lmul>
 801a91a:	9a00      	ldr	r2, [sp, #0]
 801a91c:	9f03      	ldr	r7, [sp, #12]
 801a91e:	4694      	mov	ip, r2
 801a920:	1876      	adds	r6, r6, r1
 801a922:	4649      	mov	r1, r9
 801a924:	44e1      	add	r9, ip
 801a926:	46bc      	mov	ip, r7
 801a928:	9b01      	ldr	r3, [sp, #4]
 801a92a:	1076      	asrs	r6, r6, #1
 801a92c:	4463      	add	r3, ip
 801a92e:	17df      	asrs	r7, r3, #31
 801a930:	604e      	str	r6, [r1, #4]
 801a932:	46ba      	mov	sl, r7
 801a934:	001e      	movs	r6, r3
 801a936:	9802      	ldr	r0, [sp, #8]
 801a938:	9b04      	ldr	r3, [sp, #16]
 801a93a:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a93c:	1ac7      	subs	r7, r0, r3
 801a93e:	17fb      	asrs	r3, r7, #31
 801a940:	469b      	mov	fp, r3
 801a942:	0030      	movs	r0, r6
 801a944:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801a946:	4651      	mov	r1, sl
 801a948:	f7e5 fe3a 	bl	80005c0 <__aeabi_lmul>
 801a94c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801a94e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801a950:	9101      	str	r1, [sp, #4]
 801a952:	0038      	movs	r0, r7
 801a954:	4659      	mov	r1, fp
 801a956:	f7e5 fe33 	bl	80005c0 <__aeabi_lmul>
 801a95a:	9801      	ldr	r0, [sp, #4]
 801a95c:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801a95e:	1a41      	subs	r1, r0, r1
 801a960:	1049      	asrs	r1, r1, #1
 801a962:	6029      	str	r1, [r5, #0]
 801a964:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801a966:	0038      	movs	r0, r7
 801a968:	4659      	mov	r1, fp
 801a96a:	f7e5 fe29 	bl	80005c0 <__aeabi_lmul>
 801a96e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801a970:	000f      	movs	r7, r1
 801a972:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801a974:	0030      	movs	r0, r6
 801a976:	4651      	mov	r1, sl
 801a978:	f7e5 fe22 	bl	80005c0 <__aeabi_lmul>
 801a97c:	187f      	adds	r7, r7, r1
 801a97e:	107f      	asrs	r7, r7, #1
 801a980:	606f      	str	r7, [r5, #4]
 801a982:	9a00      	ldr	r2, [sp, #0]
 801a984:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801a986:	4694      	mov	ip, r2
 801a988:	4465      	add	r5, ip
 801a98a:	468c      	mov	ip, r1
 801a98c:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801a98e:	0013      	movs	r3, r2
 801a990:	4462      	add	r2, ip
 801a992:	920b      	str	r2, [sp, #44]	@ 0x2c
 801a994:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801a996:	429a      	cmp	r2, r3
 801a998:	d900      	bls.n	801a99c <arm_radix4_butterfly_inverse_q31+0x46c>
 801a99a:	e73e      	b.n	801a81a <arm_radix4_butterfly_inverse_q31+0x2ea>
 801a99c:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801a99e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801a9a0:	468c      	mov	ip, r1
 801a9a2:	991d      	ldr	r1, [sp, #116]	@ 0x74
 801a9a4:	4462      	add	r2, ip
 801a9a6:	468c      	mov	ip, r1
 801a9a8:	9216      	str	r2, [sp, #88]	@ 0x58
 801a9aa:	991c      	ldr	r1, [sp, #112]	@ 0x70
 801a9ac:	9a19      	ldr	r2, [sp, #100]	@ 0x64
 801a9ae:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801a9b0:	4462      	add	r2, ip
 801a9b2:	468c      	mov	ip, r1
 801a9b4:	9219      	str	r2, [sp, #100]	@ 0x64
 801a9b6:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801a9b8:	3301      	adds	r3, #1
 801a9ba:	4462      	add	r2, ip
 801a9bc:	9218      	str	r2, [sp, #96]	@ 0x60
 801a9be:	9a17      	ldr	r2, [sp, #92]	@ 0x5c
 801a9c0:	9315      	str	r3, [sp, #84]	@ 0x54
 801a9c2:	3208      	adds	r2, #8
 801a9c4:	9217      	str	r2, [sp, #92]	@ 0x5c
 801a9c6:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801a9c8:	4293      	cmp	r3, r2
 801a9ca:	d800      	bhi.n	801a9ce <arm_radix4_butterfly_inverse_q31+0x49e>
 801a9cc:	e6ec      	b.n	801a7a8 <arm_radix4_butterfly_inverse_q31+0x278>
 801a9ce:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801a9d0:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801a9d2:	009b      	lsls	r3, r3, #2
 801a9d4:	931f      	str	r3, [sp, #124]	@ 0x7c
 801a9d6:	9b20      	ldr	r3, [sp, #128]	@ 0x80
 801a9d8:	9213      	str	r2, [sp, #76]	@ 0x4c
 801a9da:	089b      	lsrs	r3, r3, #2
 801a9dc:	9320      	str	r3, [sp, #128]	@ 0x80
 801a9de:	2b04      	cmp	r3, #4
 801a9e0:	d900      	bls.n	801a9e4 <arm_radix4_butterfly_inverse_q31+0x4b4>
 801a9e2:	e6c5      	b.n	801a770 <arm_radix4_butterfly_inverse_q31+0x240>
 801a9e4:	9b24      	ldr	r3, [sp, #144]	@ 0x90
 801a9e6:	469a      	mov	sl, r3
 801a9e8:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801a9ea:	681a      	ldr	r2, [r3, #0]
 801a9ec:	6918      	ldr	r0, [r3, #16]
 801a9ee:	4691      	mov	r9, r2
 801a9f0:	464c      	mov	r4, r9
 801a9f2:	4680      	mov	r8, r0
 801a9f4:	69de      	ldr	r6, [r3, #28]
 801a9f6:	689d      	ldr	r5, [r3, #8]
 801a9f8:	46b4      	mov	ip, r6
 801a9fa:	6998      	ldr	r0, [r3, #24]
 801a9fc:	1964      	adds	r4, r4, r5
 801a9fe:	6859      	ldr	r1, [r3, #4]
 801aa00:	68da      	ldr	r2, [r3, #12]
 801aa02:	4444      	add	r4, r8
 801aa04:	695f      	ldr	r7, [r3, #20]
 801aa06:	1824      	adds	r4, r4, r0
 801aa08:	601c      	str	r4, [r3, #0]
 801aa0a:	188c      	adds	r4, r1, r2
 801aa0c:	19e4      	adds	r4, r4, r7
 801aa0e:	4464      	add	r4, ip
 801aa10:	605c      	str	r4, [r3, #4]
 801aa12:	464c      	mov	r4, r9
 801aa14:	1b64      	subs	r4, r4, r5
 801aa16:	4444      	add	r4, r8
 801aa18:	1a24      	subs	r4, r4, r0
 801aa1a:	609c      	str	r4, [r3, #8]
 801aa1c:	1a8c      	subs	r4, r1, r2
 801aa1e:	19e4      	adds	r4, r4, r7
 801aa20:	1ba4      	subs	r4, r4, r6
 801aa22:	60dc      	str	r4, [r3, #12]
 801aa24:	464c      	mov	r4, r9
 801aa26:	4646      	mov	r6, r8
 801aa28:	1aa4      	subs	r4, r4, r2
 801aa2a:	1ba4      	subs	r4, r4, r6
 801aa2c:	4464      	add	r4, ip
 801aa2e:	611c      	str	r4, [r3, #16]
 801aa30:	194c      	adds	r4, r1, r5
 801aa32:	1be4      	subs	r4, r4, r7
 801aa34:	1a24      	subs	r4, r4, r0
 801aa36:	615c      	str	r4, [r3, #20]
 801aa38:	4644      	mov	r4, r8
 801aa3a:	4666      	mov	r6, ip
 801aa3c:	444a      	add	r2, r9
 801aa3e:	1b12      	subs	r2, r2, r4
 801aa40:	1b92      	subs	r2, r2, r6
 801aa42:	619a      	str	r2, [r3, #24]
 801aa44:	1b4a      	subs	r2, r1, r5
 801aa46:	1bd1      	subs	r1, r2, r7
 801aa48:	2201      	movs	r2, #1
 801aa4a:	4252      	negs	r2, r2
 801aa4c:	4694      	mov	ip, r2
 801aa4e:	44e2      	add	sl, ip
 801aa50:	4652      	mov	r2, sl
 801aa52:	1809      	adds	r1, r1, r0
 801aa54:	61d9      	str	r1, [r3, #28]
 801aa56:	3320      	adds	r3, #32
 801aa58:	2a00      	cmp	r2, #0
 801aa5a:	d1c6      	bne.n	801a9ea <arm_radix4_butterfly_inverse_q31+0x4ba>
 801aa5c:	b027      	add	sp, #156	@ 0x9c
 801aa5e:	bc3c      	pop	{r2, r3, r4, r5}
 801aa60:	4690      	mov	r8, r2
 801aa62:	4699      	mov	r9, r3
 801aa64:	46a2      	mov	sl, r4
 801aa66:	46ab      	mov	fp, r5
 801aa68:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801aa6a:	469a      	mov	sl, r3
 801aa6c:	9b25      	ldr	r3, [sp, #148]	@ 0x94
 801aa6e:	e7bc      	b.n	801a9ea <arm_radix4_butterfly_inverse_q31+0x4ba>

0801aa70 <arm_cmplx_mag_squared_q31>:
 801aa70:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aa72:	464f      	mov	r7, r9
 801aa74:	4646      	mov	r6, r8
 801aa76:	0004      	movs	r4, r0
 801aa78:	b4c0      	push	{r6, r7}
 801aa7a:	0016      	movs	r6, r2
 801aa7c:	000f      	movs	r7, r1
 801aa7e:	2a00      	cmp	r2, #0
 801aa80:	d018      	beq.n	801aab4 <arm_cmplx_mag_squared_q31+0x44>
 801aa82:	6823      	ldr	r3, [r4, #0]
 801aa84:	6822      	ldr	r2, [r4, #0]
 801aa86:	17d9      	asrs	r1, r3, #31
 801aa88:	6863      	ldr	r3, [r4, #4]
 801aa8a:	0010      	movs	r0, r2
 801aa8c:	4698      	mov	r8, r3
 801aa8e:	17db      	asrs	r3, r3, #31
 801aa90:	4699      	mov	r9, r3
 801aa92:	000b      	movs	r3, r1
 801aa94:	f7e5 fd94 	bl	80005c0 <__aeabi_lmul>
 801aa98:	4642      	mov	r2, r8
 801aa9a:	104d      	asrs	r5, r1, #1
 801aa9c:	464b      	mov	r3, r9
 801aa9e:	4640      	mov	r0, r8
 801aaa0:	4649      	mov	r1, r9
 801aaa2:	f7e5 fd8d 	bl	80005c0 <__aeabi_lmul>
 801aaa6:	1049      	asrs	r1, r1, #1
 801aaa8:	1869      	adds	r1, r5, r1
 801aaaa:	3e01      	subs	r6, #1
 801aaac:	c702      	stmia	r7!, {r1}
 801aaae:	3408      	adds	r4, #8
 801aab0:	2e00      	cmp	r6, #0
 801aab2:	d1e6      	bne.n	801aa82 <arm_cmplx_mag_squared_q31+0x12>
 801aab4:	bc0c      	pop	{r2, r3}
 801aab6:	4690      	mov	r8, r2
 801aab8:	4699      	mov	r9, r3
 801aaba:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}

0801aabc <arm_mult_q31>:
 801aabc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801aabe:	4646      	mov	r6, r8
 801aac0:	464f      	mov	r7, r9
 801aac2:	4690      	mov	r8, r2
 801aac4:	b4c0      	push	{r6, r7}
 801aac6:	001d      	movs	r5, r3
 801aac8:	0006      	movs	r6, r0
 801aaca:	000f      	movs	r7, r1
 801aacc:	2400      	movs	r4, #0
 801aace:	2b00      	cmp	r3, #0
 801aad0:	d020      	beq.n	801ab14 <arm_mult_q31+0x58>
 801aad2:	4b12      	ldr	r3, [pc, #72]	@ (801ab1c <arm_mult_q31+0x60>)
 801aad4:	4699      	mov	r9, r3
 801aad6:	e007      	b.n	801aae8 <arm_mult_q31+0x2c>
 801aad8:	464b      	mov	r3, r9
 801aada:	4059      	eors	r1, r3
 801aadc:	4643      	mov	r3, r8
 801aade:	3d01      	subs	r5, #1
 801aae0:	5119      	str	r1, [r3, r4]
 801aae2:	3404      	adds	r4, #4
 801aae4:	2d00      	cmp	r5, #0
 801aae6:	d015      	beq.n	801ab14 <arm_mult_q31+0x58>
 801aae8:	5933      	ldr	r3, [r6, r4]
 801aaea:	593a      	ldr	r2, [r7, r4]
 801aaec:	17d9      	asrs	r1, r3, #31
 801aaee:	593b      	ldr	r3, [r7, r4]
 801aaf0:	5930      	ldr	r0, [r6, r4]
 801aaf2:	17db      	asrs	r3, r3, #31
 801aaf4:	f7e5 fd64 	bl	80005c0 <__aeabi_lmul>
 801aaf8:	004b      	lsls	r3, r1, #1
 801aafa:	0fc0      	lsrs	r0, r0, #31
 801aafc:	4318      	orrs	r0, r3
 801aafe:	17c9      	asrs	r1, r1, #31
 801ab00:	17c3      	asrs	r3, r0, #31
 801ab02:	428b      	cmp	r3, r1
 801ab04:	d1e8      	bne.n	801aad8 <arm_mult_q31+0x1c>
 801ab06:	0001      	movs	r1, r0
 801ab08:	4643      	mov	r3, r8
 801ab0a:	3d01      	subs	r5, #1
 801ab0c:	5119      	str	r1, [r3, r4]
 801ab0e:	3404      	adds	r4, #4
 801ab10:	2d00      	cmp	r5, #0
 801ab12:	d1e9      	bne.n	801aae8 <arm_mult_q31+0x2c>
 801ab14:	bc0c      	pop	{r2, r3}
 801ab16:	4690      	mov	r8, r2
 801ab18:	4699      	mov	r9, r3
 801ab1a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ab1c:	7fffffff 	.word	0x7fffffff

0801ab20 <arm_add_q31>:
 801ab20:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ab22:	465f      	mov	r7, fp
 801ab24:	4656      	mov	r6, sl
 801ab26:	464d      	mov	r5, r9
 801ab28:	4644      	mov	r4, r8
 801ab2a:	b4f0      	push	{r4, r5, r6, r7}
 801ab2c:	4693      	mov	fp, r2
 801ab2e:	b083      	sub	sp, #12
 801ab30:	4681      	mov	r9, r0
 801ab32:	468a      	mov	sl, r1
 801ab34:	4698      	mov	r8, r3
 801ab36:	2200      	movs	r2, #0
 801ab38:	2b00      	cmp	r3, #0
 801ab3a:	d020      	beq.n	801ab7e <arm_add_q31+0x5e>
 801ab3c:	4649      	mov	r1, r9
 801ab3e:	4653      	mov	r3, sl
 801ab40:	588e      	ldr	r6, [r1, r2]
 801ab42:	589b      	ldr	r3, [r3, r2]
 801ab44:	17f7      	asrs	r7, r6, #31
 801ab46:	001c      	movs	r4, r3
 801ab48:	0030      	movs	r0, r6
 801ab4a:	0039      	movs	r1, r7
 801ab4c:	17dd      	asrs	r5, r3, #31
 801ab4e:	46b4      	mov	ip, r6
 801ab50:	1900      	adds	r0, r0, r4
 801ab52:	4169      	adcs	r1, r5
 801ab54:	4463      	add	r3, ip
 801ab56:	9000      	str	r0, [sp, #0]
 801ab58:	9101      	str	r1, [sp, #4]
 801ab5a:	17d9      	asrs	r1, r3, #31
 801ab5c:	468c      	mov	ip, r1
 801ab5e:	9901      	ldr	r1, [sp, #4]
 801ab60:	458c      	cmp	ip, r1
 801ab62:	d002      	beq.n	801ab6a <arm_add_q31+0x4a>
 801ab64:	17cb      	asrs	r3, r1, #31
 801ab66:	4909      	ldr	r1, [pc, #36]	@ (801ab8c <arm_add_q31+0x6c>)
 801ab68:	404b      	eors	r3, r1
 801ab6a:	4659      	mov	r1, fp
 801ab6c:	508b      	str	r3, [r1, r2]
 801ab6e:	2301      	movs	r3, #1
 801ab70:	425b      	negs	r3, r3
 801ab72:	469c      	mov	ip, r3
 801ab74:	44e0      	add	r8, ip
 801ab76:	4643      	mov	r3, r8
 801ab78:	3204      	adds	r2, #4
 801ab7a:	2b00      	cmp	r3, #0
 801ab7c:	d1de      	bne.n	801ab3c <arm_add_q31+0x1c>
 801ab7e:	b003      	add	sp, #12
 801ab80:	bc3c      	pop	{r2, r3, r4, r5}
 801ab82:	4690      	mov	r8, r2
 801ab84:	4699      	mov	r9, r3
 801ab86:	46a2      	mov	sl, r4
 801ab88:	46ab      	mov	fp, r5
 801ab8a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ab8c:	7fffffff 	.word	0x7fffffff

0801ab90 <atof>:
 801ab90:	b510      	push	{r4, lr}
 801ab92:	2100      	movs	r1, #0
 801ab94:	f000 fe12 	bl	801b7bc <strtod>
 801ab98:	bd10      	pop	{r4, pc}

0801ab9a <atoi>:
 801ab9a:	b510      	push	{r4, lr}
 801ab9c:	220a      	movs	r2, #10
 801ab9e:	2100      	movs	r1, #0
 801aba0:	f000 fea4 	bl	801b8ec <strtol>
 801aba4:	bd10      	pop	{r4, pc}
	...

0801aba8 <sulp>:
 801aba8:	b570      	push	{r4, r5, r6, lr}
 801abaa:	0016      	movs	r6, r2
 801abac:	000d      	movs	r5, r1
 801abae:	f003 fbf3 	bl	801e398 <__ulp>
 801abb2:	2e00      	cmp	r6, #0
 801abb4:	d00d      	beq.n	801abd2 <sulp+0x2a>
 801abb6:	236b      	movs	r3, #107	@ 0x6b
 801abb8:	006a      	lsls	r2, r5, #1
 801abba:	0d52      	lsrs	r2, r2, #21
 801abbc:	1a9b      	subs	r3, r3, r2
 801abbe:	2b00      	cmp	r3, #0
 801abc0:	dd07      	ble.n	801abd2 <sulp+0x2a>
 801abc2:	2400      	movs	r4, #0
 801abc4:	4a03      	ldr	r2, [pc, #12]	@ (801abd4 <sulp+0x2c>)
 801abc6:	051b      	lsls	r3, r3, #20
 801abc8:	189d      	adds	r5, r3, r2
 801abca:	002b      	movs	r3, r5
 801abcc:	0022      	movs	r2, r4
 801abce:	f7e7 fd35 	bl	800263c <__aeabi_dmul>
 801abd2:	bd70      	pop	{r4, r5, r6, pc}
 801abd4:	3ff00000 	.word	0x3ff00000

0801abd8 <_strtod_l>:
 801abd8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801abda:	b0a3      	sub	sp, #140	@ 0x8c
 801abdc:	921b      	str	r2, [sp, #108]	@ 0x6c
 801abde:	2200      	movs	r2, #0
 801abe0:	2600      	movs	r6, #0
 801abe2:	2700      	movs	r7, #0
 801abe4:	9005      	str	r0, [sp, #20]
 801abe6:	9109      	str	r1, [sp, #36]	@ 0x24
 801abe8:	921e      	str	r2, [sp, #120]	@ 0x78
 801abea:	911d      	str	r1, [sp, #116]	@ 0x74
 801abec:	780a      	ldrb	r2, [r1, #0]
 801abee:	2a2b      	cmp	r2, #43	@ 0x2b
 801abf0:	d053      	beq.n	801ac9a <_strtod_l+0xc2>
 801abf2:	d83f      	bhi.n	801ac74 <_strtod_l+0x9c>
 801abf4:	2a0d      	cmp	r2, #13
 801abf6:	d839      	bhi.n	801ac6c <_strtod_l+0x94>
 801abf8:	2a08      	cmp	r2, #8
 801abfa:	d839      	bhi.n	801ac70 <_strtod_l+0x98>
 801abfc:	2a00      	cmp	r2, #0
 801abfe:	d042      	beq.n	801ac86 <_strtod_l+0xae>
 801ac00:	2200      	movs	r2, #0
 801ac02:	9212      	str	r2, [sp, #72]	@ 0x48
 801ac04:	2100      	movs	r1, #0
 801ac06:	9d1d      	ldr	r5, [sp, #116]	@ 0x74
 801ac08:	910c      	str	r1, [sp, #48]	@ 0x30
 801ac0a:	782a      	ldrb	r2, [r5, #0]
 801ac0c:	2a30      	cmp	r2, #48	@ 0x30
 801ac0e:	d000      	beq.n	801ac12 <_strtod_l+0x3a>
 801ac10:	e083      	b.n	801ad1a <_strtod_l+0x142>
 801ac12:	786a      	ldrb	r2, [r5, #1]
 801ac14:	3120      	adds	r1, #32
 801ac16:	438a      	bics	r2, r1
 801ac18:	2a58      	cmp	r2, #88	@ 0x58
 801ac1a:	d000      	beq.n	801ac1e <_strtod_l+0x46>
 801ac1c:	e073      	b.n	801ad06 <_strtod_l+0x12e>
 801ac1e:	9302      	str	r3, [sp, #8]
 801ac20:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801ac22:	4a95      	ldr	r2, [pc, #596]	@ (801ae78 <_strtod_l+0x2a0>)
 801ac24:	9301      	str	r3, [sp, #4]
 801ac26:	ab1e      	add	r3, sp, #120	@ 0x78
 801ac28:	9300      	str	r3, [sp, #0]
 801ac2a:	9805      	ldr	r0, [sp, #20]
 801ac2c:	ab1f      	add	r3, sp, #124	@ 0x7c
 801ac2e:	a91d      	add	r1, sp, #116	@ 0x74
 801ac30:	f002 fc62 	bl	801d4f8 <__gethex>
 801ac34:	230f      	movs	r3, #15
 801ac36:	0002      	movs	r2, r0
 801ac38:	401a      	ands	r2, r3
 801ac3a:	0004      	movs	r4, r0
 801ac3c:	9206      	str	r2, [sp, #24]
 801ac3e:	4218      	tst	r0, r3
 801ac40:	d005      	beq.n	801ac4e <_strtod_l+0x76>
 801ac42:	2a06      	cmp	r2, #6
 801ac44:	d12b      	bne.n	801ac9e <_strtod_l+0xc6>
 801ac46:	2300      	movs	r3, #0
 801ac48:	3501      	adds	r5, #1
 801ac4a:	951d      	str	r5, [sp, #116]	@ 0x74
 801ac4c:	9312      	str	r3, [sp, #72]	@ 0x48
 801ac4e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801ac50:	2b00      	cmp	r3, #0
 801ac52:	d002      	beq.n	801ac5a <_strtod_l+0x82>
 801ac54:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ac56:	9a1b      	ldr	r2, [sp, #108]	@ 0x6c
 801ac58:	6013      	str	r3, [r2, #0]
 801ac5a:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801ac5c:	2b00      	cmp	r3, #0
 801ac5e:	d019      	beq.n	801ac94 <_strtod_l+0xbc>
 801ac60:	2380      	movs	r3, #128	@ 0x80
 801ac62:	0030      	movs	r0, r6
 801ac64:	061b      	lsls	r3, r3, #24
 801ac66:	18f9      	adds	r1, r7, r3
 801ac68:	b023      	add	sp, #140	@ 0x8c
 801ac6a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ac6c:	2a20      	cmp	r2, #32
 801ac6e:	d1c7      	bne.n	801ac00 <_strtod_l+0x28>
 801ac70:	3101      	adds	r1, #1
 801ac72:	e7ba      	b.n	801abea <_strtod_l+0x12>
 801ac74:	2a2d      	cmp	r2, #45	@ 0x2d
 801ac76:	d1c3      	bne.n	801ac00 <_strtod_l+0x28>
 801ac78:	3a2c      	subs	r2, #44	@ 0x2c
 801ac7a:	9212      	str	r2, [sp, #72]	@ 0x48
 801ac7c:	1c4a      	adds	r2, r1, #1
 801ac7e:	921d      	str	r2, [sp, #116]	@ 0x74
 801ac80:	784a      	ldrb	r2, [r1, #1]
 801ac82:	2a00      	cmp	r2, #0
 801ac84:	d1be      	bne.n	801ac04 <_strtod_l+0x2c>
 801ac86:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ac88:	931d      	str	r3, [sp, #116]	@ 0x74
 801ac8a:	2300      	movs	r3, #0
 801ac8c:	9312      	str	r3, [sp, #72]	@ 0x48
 801ac8e:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801ac90:	2b00      	cmp	r3, #0
 801ac92:	d1df      	bne.n	801ac54 <_strtod_l+0x7c>
 801ac94:	0030      	movs	r0, r6
 801ac96:	0039      	movs	r1, r7
 801ac98:	e7e6      	b.n	801ac68 <_strtod_l+0x90>
 801ac9a:	2200      	movs	r2, #0
 801ac9c:	e7ed      	b.n	801ac7a <_strtod_l+0xa2>
 801ac9e:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801aca0:	2a00      	cmp	r2, #0
 801aca2:	d007      	beq.n	801acb4 <_strtod_l+0xdc>
 801aca4:	2135      	movs	r1, #53	@ 0x35
 801aca6:	a820      	add	r0, sp, #128	@ 0x80
 801aca8:	f003 fc6c 	bl	801e584 <__copybits>
 801acac:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801acae:	9805      	ldr	r0, [sp, #20]
 801acb0:	f003 f826 	bl	801dd00 <_Bfree>
 801acb4:	9806      	ldr	r0, [sp, #24]
 801acb6:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801acb8:	3801      	subs	r0, #1
 801acba:	2804      	cmp	r0, #4
 801acbc:	d806      	bhi.n	801accc <_strtod_l+0xf4>
 801acbe:	f7e5 fa5d 	bl	800017c <__gnu_thumb1_case_uqi>
 801acc2:	0312      	.short	0x0312
 801acc4:	1e1c      	.short	0x1e1c
 801acc6:	12          	.byte	0x12
 801acc7:	00          	.byte	0x00
 801acc8:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801acca:	9f21      	ldr	r7, [sp, #132]	@ 0x84
 801accc:	05e4      	lsls	r4, r4, #23
 801acce:	d502      	bpl.n	801acd6 <_strtod_l+0xfe>
 801acd0:	2380      	movs	r3, #128	@ 0x80
 801acd2:	061b      	lsls	r3, r3, #24
 801acd4:	431f      	orrs	r7, r3
 801acd6:	4b69      	ldr	r3, [pc, #420]	@ (801ae7c <_strtod_l+0x2a4>)
 801acd8:	423b      	tst	r3, r7
 801acda:	d1b8      	bne.n	801ac4e <_strtod_l+0x76>
 801acdc:	f001 fc90 	bl	801c600 <__errno>
 801ace0:	2322      	movs	r3, #34	@ 0x22
 801ace2:	6003      	str	r3, [r0, #0]
 801ace4:	e7b3      	b.n	801ac4e <_strtod_l+0x76>
 801ace6:	4966      	ldr	r1, [pc, #408]	@ (801ae80 <_strtod_l+0x2a8>)
 801ace8:	9a21      	ldr	r2, [sp, #132]	@ 0x84
 801acea:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801acec:	400a      	ands	r2, r1
 801acee:	4965      	ldr	r1, [pc, #404]	@ (801ae84 <_strtod_l+0x2ac>)
 801acf0:	185b      	adds	r3, r3, r1
 801acf2:	051b      	lsls	r3, r3, #20
 801acf4:	431a      	orrs	r2, r3
 801acf6:	0017      	movs	r7, r2
 801acf8:	e7e8      	b.n	801accc <_strtod_l+0xf4>
 801acfa:	4f60      	ldr	r7, [pc, #384]	@ (801ae7c <_strtod_l+0x2a4>)
 801acfc:	e7e6      	b.n	801accc <_strtod_l+0xf4>
 801acfe:	2601      	movs	r6, #1
 801ad00:	4f61      	ldr	r7, [pc, #388]	@ (801ae88 <_strtod_l+0x2b0>)
 801ad02:	4276      	negs	r6, r6
 801ad04:	e7e2      	b.n	801accc <_strtod_l+0xf4>
 801ad06:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ad08:	1c5a      	adds	r2, r3, #1
 801ad0a:	921d      	str	r2, [sp, #116]	@ 0x74
 801ad0c:	785b      	ldrb	r3, [r3, #1]
 801ad0e:	2b30      	cmp	r3, #48	@ 0x30
 801ad10:	d0f9      	beq.n	801ad06 <_strtod_l+0x12e>
 801ad12:	2b00      	cmp	r3, #0
 801ad14:	d09b      	beq.n	801ac4e <_strtod_l+0x76>
 801ad16:	2301      	movs	r3, #1
 801ad18:	930c      	str	r3, [sp, #48]	@ 0x30
 801ad1a:	2500      	movs	r5, #0
 801ad1c:	220a      	movs	r2, #10
 801ad1e:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ad20:	950d      	str	r5, [sp, #52]	@ 0x34
 801ad22:	9313      	str	r3, [sp, #76]	@ 0x4c
 801ad24:	9508      	str	r5, [sp, #32]
 801ad26:	981d      	ldr	r0, [sp, #116]	@ 0x74
 801ad28:	7804      	ldrb	r4, [r0, #0]
 801ad2a:	0023      	movs	r3, r4
 801ad2c:	3b30      	subs	r3, #48	@ 0x30
 801ad2e:	b2d9      	uxtb	r1, r3
 801ad30:	2909      	cmp	r1, #9
 801ad32:	d927      	bls.n	801ad84 <_strtod_l+0x1ac>
 801ad34:	2201      	movs	r2, #1
 801ad36:	4955      	ldr	r1, [pc, #340]	@ (801ae8c <_strtod_l+0x2b4>)
 801ad38:	f001 fbd4 	bl	801c4e4 <strncmp>
 801ad3c:	2800      	cmp	r0, #0
 801ad3e:	d031      	beq.n	801ada4 <_strtod_l+0x1cc>
 801ad40:	2000      	movs	r0, #0
 801ad42:	0023      	movs	r3, r4
 801ad44:	4684      	mov	ip, r0
 801ad46:	9a08      	ldr	r2, [sp, #32]
 801ad48:	900e      	str	r0, [sp, #56]	@ 0x38
 801ad4a:	9206      	str	r2, [sp, #24]
 801ad4c:	2220      	movs	r2, #32
 801ad4e:	0019      	movs	r1, r3
 801ad50:	4391      	bics	r1, r2
 801ad52:	000a      	movs	r2, r1
 801ad54:	2100      	movs	r1, #0
 801ad56:	9107      	str	r1, [sp, #28]
 801ad58:	2a45      	cmp	r2, #69	@ 0x45
 801ad5a:	d000      	beq.n	801ad5e <_strtod_l+0x186>
 801ad5c:	e0c0      	b.n	801aee0 <_strtod_l+0x308>
 801ad5e:	9b06      	ldr	r3, [sp, #24]
 801ad60:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801ad62:	4303      	orrs	r3, r0
 801ad64:	4313      	orrs	r3, r2
 801ad66:	428b      	cmp	r3, r1
 801ad68:	d08d      	beq.n	801ac86 <_strtod_l+0xae>
 801ad6a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ad6c:	9309      	str	r3, [sp, #36]	@ 0x24
 801ad6e:	3301      	adds	r3, #1
 801ad70:	931d      	str	r3, [sp, #116]	@ 0x74
 801ad72:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ad74:	785b      	ldrb	r3, [r3, #1]
 801ad76:	2b2b      	cmp	r3, #43	@ 0x2b
 801ad78:	d070      	beq.n	801ae5c <_strtod_l+0x284>
 801ad7a:	000c      	movs	r4, r1
 801ad7c:	2b2d      	cmp	r3, #45	@ 0x2d
 801ad7e:	d173      	bne.n	801ae68 <_strtod_l+0x290>
 801ad80:	2401      	movs	r4, #1
 801ad82:	e06c      	b.n	801ae5e <_strtod_l+0x286>
 801ad84:	9908      	ldr	r1, [sp, #32]
 801ad86:	2908      	cmp	r1, #8
 801ad88:	dc09      	bgt.n	801ad9e <_strtod_l+0x1c6>
 801ad8a:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801ad8c:	4351      	muls	r1, r2
 801ad8e:	185b      	adds	r3, r3, r1
 801ad90:	930d      	str	r3, [sp, #52]	@ 0x34
 801ad92:	9b08      	ldr	r3, [sp, #32]
 801ad94:	3001      	adds	r0, #1
 801ad96:	3301      	adds	r3, #1
 801ad98:	9308      	str	r3, [sp, #32]
 801ad9a:	901d      	str	r0, [sp, #116]	@ 0x74
 801ad9c:	e7c3      	b.n	801ad26 <_strtod_l+0x14e>
 801ad9e:	4355      	muls	r5, r2
 801ada0:	195d      	adds	r5, r3, r5
 801ada2:	e7f6      	b.n	801ad92 <_strtod_l+0x1ba>
 801ada4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ada6:	1c5a      	adds	r2, r3, #1
 801ada8:	921d      	str	r2, [sp, #116]	@ 0x74
 801adaa:	9a08      	ldr	r2, [sp, #32]
 801adac:	785b      	ldrb	r3, [r3, #1]
 801adae:	2a00      	cmp	r2, #0
 801adb0:	d03a      	beq.n	801ae28 <_strtod_l+0x250>
 801adb2:	900e      	str	r0, [sp, #56]	@ 0x38
 801adb4:	9206      	str	r2, [sp, #24]
 801adb6:	001a      	movs	r2, r3
 801adb8:	3a30      	subs	r2, #48	@ 0x30
 801adba:	2a09      	cmp	r2, #9
 801adbc:	d912      	bls.n	801ade4 <_strtod_l+0x20c>
 801adbe:	2201      	movs	r2, #1
 801adc0:	4694      	mov	ip, r2
 801adc2:	e7c3      	b.n	801ad4c <_strtod_l+0x174>
 801adc4:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801adc6:	3001      	adds	r0, #1
 801adc8:	1c5a      	adds	r2, r3, #1
 801adca:	921d      	str	r2, [sp, #116]	@ 0x74
 801adcc:	785b      	ldrb	r3, [r3, #1]
 801adce:	2b30      	cmp	r3, #48	@ 0x30
 801add0:	d0f8      	beq.n	801adc4 <_strtod_l+0x1ec>
 801add2:	001a      	movs	r2, r3
 801add4:	3a31      	subs	r2, #49	@ 0x31
 801add6:	2a08      	cmp	r2, #8
 801add8:	d83b      	bhi.n	801ae52 <_strtod_l+0x27a>
 801adda:	900e      	str	r0, [sp, #56]	@ 0x38
 801addc:	2000      	movs	r0, #0
 801adde:	9a1d      	ldr	r2, [sp, #116]	@ 0x74
 801ade0:	9006      	str	r0, [sp, #24]
 801ade2:	9213      	str	r2, [sp, #76]	@ 0x4c
 801ade4:	001a      	movs	r2, r3
 801ade6:	1c41      	adds	r1, r0, #1
 801ade8:	3a30      	subs	r2, #48	@ 0x30
 801adea:	2b30      	cmp	r3, #48	@ 0x30
 801adec:	d016      	beq.n	801ae1c <_strtod_l+0x244>
 801adee:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801adf0:	185b      	adds	r3, r3, r1
 801adf2:	930e      	str	r3, [sp, #56]	@ 0x38
 801adf4:	9b06      	ldr	r3, [sp, #24]
 801adf6:	210a      	movs	r1, #10
 801adf8:	469c      	mov	ip, r3
 801adfa:	4484      	add	ip, r0
 801adfc:	459c      	cmp	ip, r3
 801adfe:	d115      	bne.n	801ae2c <_strtod_l+0x254>
 801ae00:	9906      	ldr	r1, [sp, #24]
 801ae02:	9b06      	ldr	r3, [sp, #24]
 801ae04:	3101      	adds	r1, #1
 801ae06:	1809      	adds	r1, r1, r0
 801ae08:	181b      	adds	r3, r3, r0
 801ae0a:	9106      	str	r1, [sp, #24]
 801ae0c:	2b08      	cmp	r3, #8
 801ae0e:	dc19      	bgt.n	801ae44 <_strtod_l+0x26c>
 801ae10:	230a      	movs	r3, #10
 801ae12:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801ae14:	434b      	muls	r3, r1
 801ae16:	2100      	movs	r1, #0
 801ae18:	18d3      	adds	r3, r2, r3
 801ae1a:	930d      	str	r3, [sp, #52]	@ 0x34
 801ae1c:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ae1e:	0008      	movs	r0, r1
 801ae20:	1c5a      	adds	r2, r3, #1
 801ae22:	921d      	str	r2, [sp, #116]	@ 0x74
 801ae24:	785b      	ldrb	r3, [r3, #1]
 801ae26:	e7c6      	b.n	801adb6 <_strtod_l+0x1de>
 801ae28:	9808      	ldr	r0, [sp, #32]
 801ae2a:	e7d0      	b.n	801adce <_strtod_l+0x1f6>
 801ae2c:	1c5c      	adds	r4, r3, #1
 801ae2e:	2b08      	cmp	r3, #8
 801ae30:	dc04      	bgt.n	801ae3c <_strtod_l+0x264>
 801ae32:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801ae34:	434b      	muls	r3, r1
 801ae36:	930d      	str	r3, [sp, #52]	@ 0x34
 801ae38:	0023      	movs	r3, r4
 801ae3a:	e7df      	b.n	801adfc <_strtod_l+0x224>
 801ae3c:	2c10      	cmp	r4, #16
 801ae3e:	dcfb      	bgt.n	801ae38 <_strtod_l+0x260>
 801ae40:	434d      	muls	r5, r1
 801ae42:	e7f9      	b.n	801ae38 <_strtod_l+0x260>
 801ae44:	2100      	movs	r1, #0
 801ae46:	2b0f      	cmp	r3, #15
 801ae48:	dce8      	bgt.n	801ae1c <_strtod_l+0x244>
 801ae4a:	230a      	movs	r3, #10
 801ae4c:	435d      	muls	r5, r3
 801ae4e:	1955      	adds	r5, r2, r5
 801ae50:	e7e4      	b.n	801ae1c <_strtod_l+0x244>
 801ae52:	2200      	movs	r2, #0
 801ae54:	920e      	str	r2, [sp, #56]	@ 0x38
 801ae56:	9206      	str	r2, [sp, #24]
 801ae58:	3201      	adds	r2, #1
 801ae5a:	e7b1      	b.n	801adc0 <_strtod_l+0x1e8>
 801ae5c:	2400      	movs	r4, #0
 801ae5e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ae60:	3302      	adds	r3, #2
 801ae62:	931d      	str	r3, [sp, #116]	@ 0x74
 801ae64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ae66:	789b      	ldrb	r3, [r3, #2]
 801ae68:	001a      	movs	r2, r3
 801ae6a:	3a30      	subs	r2, #48	@ 0x30
 801ae6c:	2a09      	cmp	r2, #9
 801ae6e:	d913      	bls.n	801ae98 <_strtod_l+0x2c0>
 801ae70:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801ae72:	921d      	str	r2, [sp, #116]	@ 0x74
 801ae74:	2200      	movs	r2, #0
 801ae76:	e032      	b.n	801aede <_strtod_l+0x306>
 801ae78:	08020f68 	.word	0x08020f68
 801ae7c:	7ff00000 	.word	0x7ff00000
 801ae80:	ffefffff 	.word	0xffefffff
 801ae84:	00000433 	.word	0x00000433
 801ae88:	7fffffff 	.word	0x7fffffff
 801ae8c:	08020f50 	.word	0x08020f50
 801ae90:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801ae92:	1c5a      	adds	r2, r3, #1
 801ae94:	921d      	str	r2, [sp, #116]	@ 0x74
 801ae96:	785b      	ldrb	r3, [r3, #1]
 801ae98:	2b30      	cmp	r3, #48	@ 0x30
 801ae9a:	d0f9      	beq.n	801ae90 <_strtod_l+0x2b8>
 801ae9c:	2200      	movs	r2, #0
 801ae9e:	9207      	str	r2, [sp, #28]
 801aea0:	001a      	movs	r2, r3
 801aea2:	3a31      	subs	r2, #49	@ 0x31
 801aea4:	2a08      	cmp	r2, #8
 801aea6:	d81b      	bhi.n	801aee0 <_strtod_l+0x308>
 801aea8:	3b30      	subs	r3, #48	@ 0x30
 801aeaa:	9310      	str	r3, [sp, #64]	@ 0x40
 801aeac:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801aeae:	9307      	str	r3, [sp, #28]
 801aeb0:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801aeb2:	1c59      	adds	r1, r3, #1
 801aeb4:	911d      	str	r1, [sp, #116]	@ 0x74
 801aeb6:	785b      	ldrb	r3, [r3, #1]
 801aeb8:	001a      	movs	r2, r3
 801aeba:	3a30      	subs	r2, #48	@ 0x30
 801aebc:	2a09      	cmp	r2, #9
 801aebe:	d93a      	bls.n	801af36 <_strtod_l+0x35e>
 801aec0:	9a07      	ldr	r2, [sp, #28]
 801aec2:	1a8a      	subs	r2, r1, r2
 801aec4:	49b4      	ldr	r1, [pc, #720]	@ (801b198 <_strtod_l+0x5c0>)
 801aec6:	9107      	str	r1, [sp, #28]
 801aec8:	2a08      	cmp	r2, #8
 801aeca:	dc04      	bgt.n	801aed6 <_strtod_l+0x2fe>
 801aecc:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801aece:	9207      	str	r2, [sp, #28]
 801aed0:	428a      	cmp	r2, r1
 801aed2:	dd00      	ble.n	801aed6 <_strtod_l+0x2fe>
 801aed4:	9107      	str	r1, [sp, #28]
 801aed6:	2c00      	cmp	r4, #0
 801aed8:	d002      	beq.n	801aee0 <_strtod_l+0x308>
 801aeda:	9a07      	ldr	r2, [sp, #28]
 801aedc:	4252      	negs	r2, r2
 801aede:	9207      	str	r2, [sp, #28]
 801aee0:	9a06      	ldr	r2, [sp, #24]
 801aee2:	2a00      	cmp	r2, #0
 801aee4:	d14d      	bne.n	801af82 <_strtod_l+0x3aa>
 801aee6:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801aee8:	4310      	orrs	r0, r2
 801aeea:	d000      	beq.n	801aeee <_strtod_l+0x316>
 801aeec:	e6af      	b.n	801ac4e <_strtod_l+0x76>
 801aeee:	4662      	mov	r2, ip
 801aef0:	2a00      	cmp	r2, #0
 801aef2:	d000      	beq.n	801aef6 <_strtod_l+0x31e>
 801aef4:	e6c7      	b.n	801ac86 <_strtod_l+0xae>
 801aef6:	2b69      	cmp	r3, #105	@ 0x69
 801aef8:	d027      	beq.n	801af4a <_strtod_l+0x372>
 801aefa:	dc23      	bgt.n	801af44 <_strtod_l+0x36c>
 801aefc:	2b49      	cmp	r3, #73	@ 0x49
 801aefe:	d024      	beq.n	801af4a <_strtod_l+0x372>
 801af00:	2b4e      	cmp	r3, #78	@ 0x4e
 801af02:	d000      	beq.n	801af06 <_strtod_l+0x32e>
 801af04:	e6bf      	b.n	801ac86 <_strtod_l+0xae>
 801af06:	49a5      	ldr	r1, [pc, #660]	@ (801b19c <_strtod_l+0x5c4>)
 801af08:	a81d      	add	r0, sp, #116	@ 0x74
 801af0a:	f002 fd2b 	bl	801d964 <__match>
 801af0e:	2800      	cmp	r0, #0
 801af10:	d100      	bne.n	801af14 <_strtod_l+0x33c>
 801af12:	e6b8      	b.n	801ac86 <_strtod_l+0xae>
 801af14:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801af16:	781b      	ldrb	r3, [r3, #0]
 801af18:	2b28      	cmp	r3, #40	@ 0x28
 801af1a:	d12c      	bne.n	801af76 <_strtod_l+0x39e>
 801af1c:	49a0      	ldr	r1, [pc, #640]	@ (801b1a0 <_strtod_l+0x5c8>)
 801af1e:	aa20      	add	r2, sp, #128	@ 0x80
 801af20:	a81d      	add	r0, sp, #116	@ 0x74
 801af22:	f002 fd33 	bl	801d98c <__hexnan>
 801af26:	2805      	cmp	r0, #5
 801af28:	d125      	bne.n	801af76 <_strtod_l+0x39e>
 801af2a:	9b21      	ldr	r3, [sp, #132]	@ 0x84
 801af2c:	4a9d      	ldr	r2, [pc, #628]	@ (801b1a4 <_strtod_l+0x5cc>)
 801af2e:	9e20      	ldr	r6, [sp, #128]	@ 0x80
 801af30:	431a      	orrs	r2, r3
 801af32:	0017      	movs	r7, r2
 801af34:	e68b      	b.n	801ac4e <_strtod_l+0x76>
 801af36:	220a      	movs	r2, #10
 801af38:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801af3a:	434a      	muls	r2, r1
 801af3c:	18d2      	adds	r2, r2, r3
 801af3e:	3a30      	subs	r2, #48	@ 0x30
 801af40:	9210      	str	r2, [sp, #64]	@ 0x40
 801af42:	e7b5      	b.n	801aeb0 <_strtod_l+0x2d8>
 801af44:	2b6e      	cmp	r3, #110	@ 0x6e
 801af46:	d0de      	beq.n	801af06 <_strtod_l+0x32e>
 801af48:	e69d      	b.n	801ac86 <_strtod_l+0xae>
 801af4a:	4997      	ldr	r1, [pc, #604]	@ (801b1a8 <_strtod_l+0x5d0>)
 801af4c:	a81d      	add	r0, sp, #116	@ 0x74
 801af4e:	f002 fd09 	bl	801d964 <__match>
 801af52:	2800      	cmp	r0, #0
 801af54:	d100      	bne.n	801af58 <_strtod_l+0x380>
 801af56:	e696      	b.n	801ac86 <_strtod_l+0xae>
 801af58:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801af5a:	4994      	ldr	r1, [pc, #592]	@ (801b1ac <_strtod_l+0x5d4>)
 801af5c:	3b01      	subs	r3, #1
 801af5e:	a81d      	add	r0, sp, #116	@ 0x74
 801af60:	931d      	str	r3, [sp, #116]	@ 0x74
 801af62:	f002 fcff 	bl	801d964 <__match>
 801af66:	2800      	cmp	r0, #0
 801af68:	d102      	bne.n	801af70 <_strtod_l+0x398>
 801af6a:	9b1d      	ldr	r3, [sp, #116]	@ 0x74
 801af6c:	3301      	adds	r3, #1
 801af6e:	931d      	str	r3, [sp, #116]	@ 0x74
 801af70:	2600      	movs	r6, #0
 801af72:	4f8c      	ldr	r7, [pc, #560]	@ (801b1a4 <_strtod_l+0x5cc>)
 801af74:	e66b      	b.n	801ac4e <_strtod_l+0x76>
 801af76:	488e      	ldr	r0, [pc, #568]	@ (801b1b0 <_strtod_l+0x5d8>)
 801af78:	f001 fb84 	bl	801c684 <nan>
 801af7c:	0006      	movs	r6, r0
 801af7e:	000f      	movs	r7, r1
 801af80:	e665      	b.n	801ac4e <_strtod_l+0x76>
 801af82:	9b07      	ldr	r3, [sp, #28]
 801af84:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801af86:	1a9b      	subs	r3, r3, r2
 801af88:	930c      	str	r3, [sp, #48]	@ 0x30
 801af8a:	9b08      	ldr	r3, [sp, #32]
 801af8c:	2b00      	cmp	r3, #0
 801af8e:	d101      	bne.n	801af94 <_strtod_l+0x3bc>
 801af90:	9b06      	ldr	r3, [sp, #24]
 801af92:	9308      	str	r3, [sp, #32]
 801af94:	9c06      	ldr	r4, [sp, #24]
 801af96:	2c10      	cmp	r4, #16
 801af98:	dd00      	ble.n	801af9c <_strtod_l+0x3c4>
 801af9a:	2410      	movs	r4, #16
 801af9c:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801af9e:	f7e8 fa3d 	bl	800341c <__aeabi_ui2d>
 801afa2:	9b06      	ldr	r3, [sp, #24]
 801afa4:	0006      	movs	r6, r0
 801afa6:	000f      	movs	r7, r1
 801afa8:	2b09      	cmp	r3, #9
 801afaa:	dc13      	bgt.n	801afd4 <_strtod_l+0x3fc>
 801afac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801afae:	2b00      	cmp	r3, #0
 801afb0:	d100      	bne.n	801afb4 <_strtod_l+0x3dc>
 801afb2:	e64c      	b.n	801ac4e <_strtod_l+0x76>
 801afb4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801afb6:	2b00      	cmp	r3, #0
 801afb8:	dc00      	bgt.n	801afbc <_strtod_l+0x3e4>
 801afba:	e07e      	b.n	801b0ba <_strtod_l+0x4e2>
 801afbc:	2b16      	cmp	r3, #22
 801afbe:	dc63      	bgt.n	801b088 <_strtod_l+0x4b0>
 801afc0:	497c      	ldr	r1, [pc, #496]	@ (801b1b4 <_strtod_l+0x5dc>)
 801afc2:	00db      	lsls	r3, r3, #3
 801afc4:	18c9      	adds	r1, r1, r3
 801afc6:	0032      	movs	r2, r6
 801afc8:	6808      	ldr	r0, [r1, #0]
 801afca:	6849      	ldr	r1, [r1, #4]
 801afcc:	003b      	movs	r3, r7
 801afce:	f7e7 fb35 	bl	800263c <__aeabi_dmul>
 801afd2:	e7d3      	b.n	801af7c <_strtod_l+0x3a4>
 801afd4:	0022      	movs	r2, r4
 801afd6:	4b77      	ldr	r3, [pc, #476]	@ (801b1b4 <_strtod_l+0x5dc>)
 801afd8:	3a09      	subs	r2, #9
 801afda:	00d2      	lsls	r2, r2, #3
 801afdc:	189b      	adds	r3, r3, r2
 801afde:	681a      	ldr	r2, [r3, #0]
 801afe0:	685b      	ldr	r3, [r3, #4]
 801afe2:	f7e7 fb2b 	bl	800263c <__aeabi_dmul>
 801afe6:	0006      	movs	r6, r0
 801afe8:	0028      	movs	r0, r5
 801afea:	000f      	movs	r7, r1
 801afec:	f7e8 fa16 	bl	800341c <__aeabi_ui2d>
 801aff0:	000b      	movs	r3, r1
 801aff2:	0002      	movs	r2, r0
 801aff4:	0039      	movs	r1, r7
 801aff6:	0030      	movs	r0, r6
 801aff8:	f7e6 fb78 	bl	80016ec <__aeabi_dadd>
 801affc:	9b06      	ldr	r3, [sp, #24]
 801affe:	0006      	movs	r6, r0
 801b000:	000f      	movs	r7, r1
 801b002:	2b0f      	cmp	r3, #15
 801b004:	ddd2      	ble.n	801afac <_strtod_l+0x3d4>
 801b006:	9b06      	ldr	r3, [sp, #24]
 801b008:	1b1c      	subs	r4, r3, r4
 801b00a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b00c:	18e4      	adds	r4, r4, r3
 801b00e:	2c00      	cmp	r4, #0
 801b010:	dc00      	bgt.n	801b014 <_strtod_l+0x43c>
 801b012:	e09b      	b.n	801b14c <_strtod_l+0x574>
 801b014:	220f      	movs	r2, #15
 801b016:	0023      	movs	r3, r4
 801b018:	4013      	ands	r3, r2
 801b01a:	4214      	tst	r4, r2
 801b01c:	d00a      	beq.n	801b034 <_strtod_l+0x45c>
 801b01e:	4965      	ldr	r1, [pc, #404]	@ (801b1b4 <_strtod_l+0x5dc>)
 801b020:	00db      	lsls	r3, r3, #3
 801b022:	18c9      	adds	r1, r1, r3
 801b024:	0032      	movs	r2, r6
 801b026:	6808      	ldr	r0, [r1, #0]
 801b028:	6849      	ldr	r1, [r1, #4]
 801b02a:	003b      	movs	r3, r7
 801b02c:	f7e7 fb06 	bl	800263c <__aeabi_dmul>
 801b030:	0006      	movs	r6, r0
 801b032:	000f      	movs	r7, r1
 801b034:	230f      	movs	r3, #15
 801b036:	439c      	bics	r4, r3
 801b038:	d073      	beq.n	801b122 <_strtod_l+0x54a>
 801b03a:	3326      	adds	r3, #38	@ 0x26
 801b03c:	33ff      	adds	r3, #255	@ 0xff
 801b03e:	429c      	cmp	r4, r3
 801b040:	dd4b      	ble.n	801b0da <_strtod_l+0x502>
 801b042:	2300      	movs	r3, #0
 801b044:	9306      	str	r3, [sp, #24]
 801b046:	9307      	str	r3, [sp, #28]
 801b048:	930d      	str	r3, [sp, #52]	@ 0x34
 801b04a:	9308      	str	r3, [sp, #32]
 801b04c:	2322      	movs	r3, #34	@ 0x22
 801b04e:	2600      	movs	r6, #0
 801b050:	9a05      	ldr	r2, [sp, #20]
 801b052:	4f54      	ldr	r7, [pc, #336]	@ (801b1a4 <_strtod_l+0x5cc>)
 801b054:	6013      	str	r3, [r2, #0]
 801b056:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b058:	42b3      	cmp	r3, r6
 801b05a:	d100      	bne.n	801b05e <_strtod_l+0x486>
 801b05c:	e5f7      	b.n	801ac4e <_strtod_l+0x76>
 801b05e:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801b060:	9805      	ldr	r0, [sp, #20]
 801b062:	f002 fe4d 	bl	801dd00 <_Bfree>
 801b066:	9908      	ldr	r1, [sp, #32]
 801b068:	9805      	ldr	r0, [sp, #20]
 801b06a:	f002 fe49 	bl	801dd00 <_Bfree>
 801b06e:	9907      	ldr	r1, [sp, #28]
 801b070:	9805      	ldr	r0, [sp, #20]
 801b072:	f002 fe45 	bl	801dd00 <_Bfree>
 801b076:	990d      	ldr	r1, [sp, #52]	@ 0x34
 801b078:	9805      	ldr	r0, [sp, #20]
 801b07a:	f002 fe41 	bl	801dd00 <_Bfree>
 801b07e:	9906      	ldr	r1, [sp, #24]
 801b080:	9805      	ldr	r0, [sp, #20]
 801b082:	f002 fe3d 	bl	801dd00 <_Bfree>
 801b086:	e5e2      	b.n	801ac4e <_strtod_l+0x76>
 801b088:	2325      	movs	r3, #37	@ 0x25
 801b08a:	9a06      	ldr	r2, [sp, #24]
 801b08c:	1a9b      	subs	r3, r3, r2
 801b08e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801b090:	4293      	cmp	r3, r2
 801b092:	dbb8      	blt.n	801b006 <_strtod_l+0x42e>
 801b094:	240f      	movs	r4, #15
 801b096:	9b06      	ldr	r3, [sp, #24]
 801b098:	4d46      	ldr	r5, [pc, #280]	@ (801b1b4 <_strtod_l+0x5dc>)
 801b09a:	1ae4      	subs	r4, r4, r3
 801b09c:	00e1      	lsls	r1, r4, #3
 801b09e:	1869      	adds	r1, r5, r1
 801b0a0:	0032      	movs	r2, r6
 801b0a2:	6808      	ldr	r0, [r1, #0]
 801b0a4:	6849      	ldr	r1, [r1, #4]
 801b0a6:	003b      	movs	r3, r7
 801b0a8:	f7e7 fac8 	bl	800263c <__aeabi_dmul>
 801b0ac:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b0ae:	1b1c      	subs	r4, r3, r4
 801b0b0:	00e4      	lsls	r4, r4, #3
 801b0b2:	192d      	adds	r5, r5, r4
 801b0b4:	682a      	ldr	r2, [r5, #0]
 801b0b6:	686b      	ldr	r3, [r5, #4]
 801b0b8:	e789      	b.n	801afce <_strtod_l+0x3f6>
 801b0ba:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b0bc:	3316      	adds	r3, #22
 801b0be:	dba2      	blt.n	801b006 <_strtod_l+0x42e>
 801b0c0:	9907      	ldr	r1, [sp, #28]
 801b0c2:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801b0c4:	4b3b      	ldr	r3, [pc, #236]	@ (801b1b4 <_strtod_l+0x5dc>)
 801b0c6:	1a52      	subs	r2, r2, r1
 801b0c8:	00d2      	lsls	r2, r2, #3
 801b0ca:	189b      	adds	r3, r3, r2
 801b0cc:	0030      	movs	r0, r6
 801b0ce:	681a      	ldr	r2, [r3, #0]
 801b0d0:	685b      	ldr	r3, [r3, #4]
 801b0d2:	0039      	movs	r1, r7
 801b0d4:	f7e6 fe6e 	bl	8001db4 <__aeabi_ddiv>
 801b0d8:	e750      	b.n	801af7c <_strtod_l+0x3a4>
 801b0da:	2300      	movs	r3, #0
 801b0dc:	0030      	movs	r0, r6
 801b0de:	0039      	movs	r1, r7
 801b0e0:	4d35      	ldr	r5, [pc, #212]	@ (801b1b8 <_strtod_l+0x5e0>)
 801b0e2:	1124      	asrs	r4, r4, #4
 801b0e4:	9309      	str	r3, [sp, #36]	@ 0x24
 801b0e6:	2c01      	cmp	r4, #1
 801b0e8:	dc1e      	bgt.n	801b128 <_strtod_l+0x550>
 801b0ea:	2b00      	cmp	r3, #0
 801b0ec:	d001      	beq.n	801b0f2 <_strtod_l+0x51a>
 801b0ee:	0006      	movs	r6, r0
 801b0f0:	000f      	movs	r7, r1
 801b0f2:	4b32      	ldr	r3, [pc, #200]	@ (801b1bc <_strtod_l+0x5e4>)
 801b0f4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b0f6:	18ff      	adds	r7, r7, r3
 801b0f8:	4b2f      	ldr	r3, [pc, #188]	@ (801b1b8 <_strtod_l+0x5e0>)
 801b0fa:	00d5      	lsls	r5, r2, #3
 801b0fc:	195d      	adds	r5, r3, r5
 801b0fe:	0032      	movs	r2, r6
 801b100:	6828      	ldr	r0, [r5, #0]
 801b102:	6869      	ldr	r1, [r5, #4]
 801b104:	003b      	movs	r3, r7
 801b106:	f7e7 fa99 	bl	800263c <__aeabi_dmul>
 801b10a:	4b26      	ldr	r3, [pc, #152]	@ (801b1a4 <_strtod_l+0x5cc>)
 801b10c:	4a2c      	ldr	r2, [pc, #176]	@ (801b1c0 <_strtod_l+0x5e8>)
 801b10e:	0006      	movs	r6, r0
 801b110:	400b      	ands	r3, r1
 801b112:	4293      	cmp	r3, r2
 801b114:	d895      	bhi.n	801b042 <_strtod_l+0x46a>
 801b116:	4a2b      	ldr	r2, [pc, #172]	@ (801b1c4 <_strtod_l+0x5ec>)
 801b118:	4293      	cmp	r3, r2
 801b11a:	d913      	bls.n	801b144 <_strtod_l+0x56c>
 801b11c:	2601      	movs	r6, #1
 801b11e:	4f2a      	ldr	r7, [pc, #168]	@ (801b1c8 <_strtod_l+0x5f0>)
 801b120:	4276      	negs	r6, r6
 801b122:	2300      	movs	r3, #0
 801b124:	9309      	str	r3, [sp, #36]	@ 0x24
 801b126:	e086      	b.n	801b236 <_strtod_l+0x65e>
 801b128:	2201      	movs	r2, #1
 801b12a:	4214      	tst	r4, r2
 801b12c:	d004      	beq.n	801b138 <_strtod_l+0x560>
 801b12e:	682a      	ldr	r2, [r5, #0]
 801b130:	686b      	ldr	r3, [r5, #4]
 801b132:	f7e7 fa83 	bl	800263c <__aeabi_dmul>
 801b136:	2301      	movs	r3, #1
 801b138:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b13a:	1064      	asrs	r4, r4, #1
 801b13c:	3201      	adds	r2, #1
 801b13e:	9209      	str	r2, [sp, #36]	@ 0x24
 801b140:	3508      	adds	r5, #8
 801b142:	e7d0      	b.n	801b0e6 <_strtod_l+0x50e>
 801b144:	23d4      	movs	r3, #212	@ 0xd4
 801b146:	049b      	lsls	r3, r3, #18
 801b148:	18cf      	adds	r7, r1, r3
 801b14a:	e7ea      	b.n	801b122 <_strtod_l+0x54a>
 801b14c:	2c00      	cmp	r4, #0
 801b14e:	d0e8      	beq.n	801b122 <_strtod_l+0x54a>
 801b150:	4264      	negs	r4, r4
 801b152:	230f      	movs	r3, #15
 801b154:	0022      	movs	r2, r4
 801b156:	401a      	ands	r2, r3
 801b158:	421c      	tst	r4, r3
 801b15a:	d00a      	beq.n	801b172 <_strtod_l+0x59a>
 801b15c:	4b15      	ldr	r3, [pc, #84]	@ (801b1b4 <_strtod_l+0x5dc>)
 801b15e:	00d2      	lsls	r2, r2, #3
 801b160:	189b      	adds	r3, r3, r2
 801b162:	0030      	movs	r0, r6
 801b164:	681a      	ldr	r2, [r3, #0]
 801b166:	685b      	ldr	r3, [r3, #4]
 801b168:	0039      	movs	r1, r7
 801b16a:	f7e6 fe23 	bl	8001db4 <__aeabi_ddiv>
 801b16e:	0006      	movs	r6, r0
 801b170:	000f      	movs	r7, r1
 801b172:	1124      	asrs	r4, r4, #4
 801b174:	d0d5      	beq.n	801b122 <_strtod_l+0x54a>
 801b176:	2c1f      	cmp	r4, #31
 801b178:	dd28      	ble.n	801b1cc <_strtod_l+0x5f4>
 801b17a:	2300      	movs	r3, #0
 801b17c:	9306      	str	r3, [sp, #24]
 801b17e:	9307      	str	r3, [sp, #28]
 801b180:	930d      	str	r3, [sp, #52]	@ 0x34
 801b182:	9308      	str	r3, [sp, #32]
 801b184:	2322      	movs	r3, #34	@ 0x22
 801b186:	9a05      	ldr	r2, [sp, #20]
 801b188:	2600      	movs	r6, #0
 801b18a:	6013      	str	r3, [r2, #0]
 801b18c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b18e:	2700      	movs	r7, #0
 801b190:	2b00      	cmp	r3, #0
 801b192:	d000      	beq.n	801b196 <_strtod_l+0x5be>
 801b194:	e763      	b.n	801b05e <_strtod_l+0x486>
 801b196:	e55a      	b.n	801ac4e <_strtod_l+0x76>
 801b198:	00004e1f 	.word	0x00004e1f
 801b19c:	080210b6 	.word	0x080210b6
 801b1a0:	08020f54 	.word	0x08020f54
 801b1a4:	7ff00000 	.word	0x7ff00000
 801b1a8:	080210ae 	.word	0x080210ae
 801b1ac:	080210e8 	.word	0x080210e8
 801b1b0:	08021374 	.word	0x08021374
 801b1b4:	08021260 	.word	0x08021260
 801b1b8:	08021238 	.word	0x08021238
 801b1bc:	fcb00000 	.word	0xfcb00000
 801b1c0:	7ca00000 	.word	0x7ca00000
 801b1c4:	7c900000 	.word	0x7c900000
 801b1c8:	7fefffff 	.word	0x7fefffff
 801b1cc:	2310      	movs	r3, #16
 801b1ce:	0022      	movs	r2, r4
 801b1d0:	401a      	ands	r2, r3
 801b1d2:	9209      	str	r2, [sp, #36]	@ 0x24
 801b1d4:	421c      	tst	r4, r3
 801b1d6:	d001      	beq.n	801b1dc <_strtod_l+0x604>
 801b1d8:	335a      	adds	r3, #90	@ 0x5a
 801b1da:	9309      	str	r3, [sp, #36]	@ 0x24
 801b1dc:	0030      	movs	r0, r6
 801b1de:	0039      	movs	r1, r7
 801b1e0:	2300      	movs	r3, #0
 801b1e2:	4dbf      	ldr	r5, [pc, #764]	@ (801b4e0 <_strtod_l+0x908>)
 801b1e4:	2201      	movs	r2, #1
 801b1e6:	4214      	tst	r4, r2
 801b1e8:	d004      	beq.n	801b1f4 <_strtod_l+0x61c>
 801b1ea:	682a      	ldr	r2, [r5, #0]
 801b1ec:	686b      	ldr	r3, [r5, #4]
 801b1ee:	f7e7 fa25 	bl	800263c <__aeabi_dmul>
 801b1f2:	2301      	movs	r3, #1
 801b1f4:	1064      	asrs	r4, r4, #1
 801b1f6:	3508      	adds	r5, #8
 801b1f8:	2c00      	cmp	r4, #0
 801b1fa:	d1f3      	bne.n	801b1e4 <_strtod_l+0x60c>
 801b1fc:	2b00      	cmp	r3, #0
 801b1fe:	d001      	beq.n	801b204 <_strtod_l+0x62c>
 801b200:	0006      	movs	r6, r0
 801b202:	000f      	movs	r7, r1
 801b204:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b206:	2b00      	cmp	r3, #0
 801b208:	d00d      	beq.n	801b226 <_strtod_l+0x64e>
 801b20a:	236b      	movs	r3, #107	@ 0x6b
 801b20c:	007a      	lsls	r2, r7, #1
 801b20e:	0d52      	lsrs	r2, r2, #21
 801b210:	0039      	movs	r1, r7
 801b212:	1a9b      	subs	r3, r3, r2
 801b214:	2b00      	cmp	r3, #0
 801b216:	dd06      	ble.n	801b226 <_strtod_l+0x64e>
 801b218:	2b1f      	cmp	r3, #31
 801b21a:	dd5a      	ble.n	801b2d2 <_strtod_l+0x6fa>
 801b21c:	2600      	movs	r6, #0
 801b21e:	2b34      	cmp	r3, #52	@ 0x34
 801b220:	dd50      	ble.n	801b2c4 <_strtod_l+0x6ec>
 801b222:	27dc      	movs	r7, #220	@ 0xdc
 801b224:	04bf      	lsls	r7, r7, #18
 801b226:	2200      	movs	r2, #0
 801b228:	2300      	movs	r3, #0
 801b22a:	0030      	movs	r0, r6
 801b22c:	0039      	movs	r1, r7
 801b22e:	f7e5 f93f 	bl	80004b0 <__aeabi_dcmpeq>
 801b232:	2800      	cmp	r0, #0
 801b234:	d1a1      	bne.n	801b17a <_strtod_l+0x5a2>
 801b236:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b238:	9a08      	ldr	r2, [sp, #32]
 801b23a:	9300      	str	r3, [sp, #0]
 801b23c:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801b23e:	9b06      	ldr	r3, [sp, #24]
 801b240:	9805      	ldr	r0, [sp, #20]
 801b242:	f002 fdc5 	bl	801ddd0 <__s2b>
 801b246:	900d      	str	r0, [sp, #52]	@ 0x34
 801b248:	2800      	cmp	r0, #0
 801b24a:	d100      	bne.n	801b24e <_strtod_l+0x676>
 801b24c:	e6f9      	b.n	801b042 <_strtod_l+0x46a>
 801b24e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b250:	9907      	ldr	r1, [sp, #28]
 801b252:	17da      	asrs	r2, r3, #31
 801b254:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b256:	1a5b      	subs	r3, r3, r1
 801b258:	401a      	ands	r2, r3
 801b25a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b25c:	9217      	str	r2, [sp, #92]	@ 0x5c
 801b25e:	43db      	mvns	r3, r3
 801b260:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801b262:	17db      	asrs	r3, r3, #31
 801b264:	401a      	ands	r2, r3
 801b266:	2300      	movs	r3, #0
 801b268:	921a      	str	r2, [sp, #104]	@ 0x68
 801b26a:	9306      	str	r3, [sp, #24]
 801b26c:	9307      	str	r3, [sp, #28]
 801b26e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b270:	9805      	ldr	r0, [sp, #20]
 801b272:	6859      	ldr	r1, [r3, #4]
 801b274:	f002 fd00 	bl	801dc78 <_Balloc>
 801b278:	9008      	str	r0, [sp, #32]
 801b27a:	2800      	cmp	r0, #0
 801b27c:	d100      	bne.n	801b280 <_strtod_l+0x6a8>
 801b27e:	e6e5      	b.n	801b04c <_strtod_l+0x474>
 801b280:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801b282:	300c      	adds	r0, #12
 801b284:	0019      	movs	r1, r3
 801b286:	691a      	ldr	r2, [r3, #16]
 801b288:	310c      	adds	r1, #12
 801b28a:	3202      	adds	r2, #2
 801b28c:	0092      	lsls	r2, r2, #2
 801b28e:	f001 f9ef 	bl	801c670 <memcpy>
 801b292:	ab20      	add	r3, sp, #128	@ 0x80
 801b294:	9301      	str	r3, [sp, #4]
 801b296:	ab1f      	add	r3, sp, #124	@ 0x7c
 801b298:	9300      	str	r3, [sp, #0]
 801b29a:	0032      	movs	r2, r6
 801b29c:	003b      	movs	r3, r7
 801b29e:	9805      	ldr	r0, [sp, #20]
 801b2a0:	9610      	str	r6, [sp, #64]	@ 0x40
 801b2a2:	9711      	str	r7, [sp, #68]	@ 0x44
 801b2a4:	f003 f8e4 	bl	801e470 <__d2b>
 801b2a8:	901e      	str	r0, [sp, #120]	@ 0x78
 801b2aa:	2800      	cmp	r0, #0
 801b2ac:	d100      	bne.n	801b2b0 <_strtod_l+0x6d8>
 801b2ae:	e6cd      	b.n	801b04c <_strtod_l+0x474>
 801b2b0:	2101      	movs	r1, #1
 801b2b2:	9805      	ldr	r0, [sp, #20]
 801b2b4:	f002 fe28 	bl	801df08 <__i2b>
 801b2b8:	9007      	str	r0, [sp, #28]
 801b2ba:	2800      	cmp	r0, #0
 801b2bc:	d10e      	bne.n	801b2dc <_strtod_l+0x704>
 801b2be:	2300      	movs	r3, #0
 801b2c0:	9307      	str	r3, [sp, #28]
 801b2c2:	e6c3      	b.n	801b04c <_strtod_l+0x474>
 801b2c4:	234b      	movs	r3, #75	@ 0x4b
 801b2c6:	1a9a      	subs	r2, r3, r2
 801b2c8:	3b4c      	subs	r3, #76	@ 0x4c
 801b2ca:	4093      	lsls	r3, r2
 801b2cc:	4019      	ands	r1, r3
 801b2ce:	000f      	movs	r7, r1
 801b2d0:	e7a9      	b.n	801b226 <_strtod_l+0x64e>
 801b2d2:	2201      	movs	r2, #1
 801b2d4:	4252      	negs	r2, r2
 801b2d6:	409a      	lsls	r2, r3
 801b2d8:	4016      	ands	r6, r2
 801b2da:	e7a4      	b.n	801b226 <_strtod_l+0x64e>
 801b2dc:	9b1f      	ldr	r3, [sp, #124]	@ 0x7c
 801b2de:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801b2e0:	9d17      	ldr	r5, [sp, #92]	@ 0x5c
 801b2e2:	1ad4      	subs	r4, r2, r3
 801b2e4:	2b00      	cmp	r3, #0
 801b2e6:	db01      	blt.n	801b2ec <_strtod_l+0x714>
 801b2e8:	9c1a      	ldr	r4, [sp, #104]	@ 0x68
 801b2ea:	195d      	adds	r5, r3, r5
 801b2ec:	9909      	ldr	r1, [sp, #36]	@ 0x24
 801b2ee:	9a20      	ldr	r2, [sp, #128]	@ 0x80
 801b2f0:	1a5b      	subs	r3, r3, r1
 801b2f2:	2136      	movs	r1, #54	@ 0x36
 801b2f4:	189b      	adds	r3, r3, r2
 801b2f6:	1a8a      	subs	r2, r1, r2
 801b2f8:	497a      	ldr	r1, [pc, #488]	@ (801b4e4 <_strtod_l+0x90c>)
 801b2fa:	2001      	movs	r0, #1
 801b2fc:	468c      	mov	ip, r1
 801b2fe:	2100      	movs	r1, #0
 801b300:	3b01      	subs	r3, #1
 801b302:	9116      	str	r1, [sp, #88]	@ 0x58
 801b304:	9014      	str	r0, [sp, #80]	@ 0x50
 801b306:	4563      	cmp	r3, ip
 801b308:	da06      	bge.n	801b318 <_strtod_l+0x740>
 801b30a:	4661      	mov	r1, ip
 801b30c:	1ac9      	subs	r1, r1, r3
 801b30e:	1a52      	subs	r2, r2, r1
 801b310:	291f      	cmp	r1, #31
 801b312:	dc3f      	bgt.n	801b394 <_strtod_l+0x7bc>
 801b314:	4088      	lsls	r0, r1
 801b316:	9014      	str	r0, [sp, #80]	@ 0x50
 801b318:	18ab      	adds	r3, r5, r2
 801b31a:	930e      	str	r3, [sp, #56]	@ 0x38
 801b31c:	18a4      	adds	r4, r4, r2
 801b31e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b320:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801b322:	191c      	adds	r4, r3, r4
 801b324:	002b      	movs	r3, r5
 801b326:	4295      	cmp	r5, r2
 801b328:	dd00      	ble.n	801b32c <_strtod_l+0x754>
 801b32a:	0013      	movs	r3, r2
 801b32c:	42a3      	cmp	r3, r4
 801b32e:	dd00      	ble.n	801b332 <_strtod_l+0x75a>
 801b330:	0023      	movs	r3, r4
 801b332:	2b00      	cmp	r3, #0
 801b334:	dd04      	ble.n	801b340 <_strtod_l+0x768>
 801b336:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801b338:	1ae4      	subs	r4, r4, r3
 801b33a:	1ad2      	subs	r2, r2, r3
 801b33c:	920e      	str	r2, [sp, #56]	@ 0x38
 801b33e:	1aed      	subs	r5, r5, r3
 801b340:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801b342:	2b00      	cmp	r3, #0
 801b344:	dd16      	ble.n	801b374 <_strtod_l+0x79c>
 801b346:	001a      	movs	r2, r3
 801b348:	9907      	ldr	r1, [sp, #28]
 801b34a:	9805      	ldr	r0, [sp, #20]
 801b34c:	f002 fea6 	bl	801e09c <__pow5mult>
 801b350:	9007      	str	r0, [sp, #28]
 801b352:	2800      	cmp	r0, #0
 801b354:	d0b3      	beq.n	801b2be <_strtod_l+0x6e6>
 801b356:	0001      	movs	r1, r0
 801b358:	9a1e      	ldr	r2, [sp, #120]	@ 0x78
 801b35a:	9805      	ldr	r0, [sp, #20]
 801b35c:	f002 fdec 	bl	801df38 <__multiply>
 801b360:	9013      	str	r0, [sp, #76]	@ 0x4c
 801b362:	2800      	cmp	r0, #0
 801b364:	d100      	bne.n	801b368 <_strtod_l+0x790>
 801b366:	e671      	b.n	801b04c <_strtod_l+0x474>
 801b368:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801b36a:	9805      	ldr	r0, [sp, #20]
 801b36c:	f002 fcc8 	bl	801dd00 <_Bfree>
 801b370:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801b372:	931e      	str	r3, [sp, #120]	@ 0x78
 801b374:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b376:	2b00      	cmp	r3, #0
 801b378:	dc12      	bgt.n	801b3a0 <_strtod_l+0x7c8>
 801b37a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801b37c:	2b00      	cmp	r3, #0
 801b37e:	dd18      	ble.n	801b3b2 <_strtod_l+0x7da>
 801b380:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801b382:	9908      	ldr	r1, [sp, #32]
 801b384:	9805      	ldr	r0, [sp, #20]
 801b386:	f002 fe89 	bl	801e09c <__pow5mult>
 801b38a:	9008      	str	r0, [sp, #32]
 801b38c:	2800      	cmp	r0, #0
 801b38e:	d110      	bne.n	801b3b2 <_strtod_l+0x7da>
 801b390:	2300      	movs	r3, #0
 801b392:	e65a      	b.n	801b04a <_strtod_l+0x472>
 801b394:	4954      	ldr	r1, [pc, #336]	@ (801b4e8 <_strtod_l+0x910>)
 801b396:	1acb      	subs	r3, r1, r3
 801b398:	0001      	movs	r1, r0
 801b39a:	4099      	lsls	r1, r3
 801b39c:	9116      	str	r1, [sp, #88]	@ 0x58
 801b39e:	e7ba      	b.n	801b316 <_strtod_l+0x73e>
 801b3a0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801b3a2:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801b3a4:	9805      	ldr	r0, [sp, #20]
 801b3a6:	f002 fed5 	bl	801e154 <__lshift>
 801b3aa:	901e      	str	r0, [sp, #120]	@ 0x78
 801b3ac:	2800      	cmp	r0, #0
 801b3ae:	d1e4      	bne.n	801b37a <_strtod_l+0x7a2>
 801b3b0:	e64c      	b.n	801b04c <_strtod_l+0x474>
 801b3b2:	2c00      	cmp	r4, #0
 801b3b4:	dd07      	ble.n	801b3c6 <_strtod_l+0x7ee>
 801b3b6:	0022      	movs	r2, r4
 801b3b8:	9908      	ldr	r1, [sp, #32]
 801b3ba:	9805      	ldr	r0, [sp, #20]
 801b3bc:	f002 feca 	bl	801e154 <__lshift>
 801b3c0:	9008      	str	r0, [sp, #32]
 801b3c2:	2800      	cmp	r0, #0
 801b3c4:	d0e4      	beq.n	801b390 <_strtod_l+0x7b8>
 801b3c6:	2d00      	cmp	r5, #0
 801b3c8:	dd08      	ble.n	801b3dc <_strtod_l+0x804>
 801b3ca:	002a      	movs	r2, r5
 801b3cc:	9907      	ldr	r1, [sp, #28]
 801b3ce:	9805      	ldr	r0, [sp, #20]
 801b3d0:	f002 fec0 	bl	801e154 <__lshift>
 801b3d4:	9007      	str	r0, [sp, #28]
 801b3d6:	2800      	cmp	r0, #0
 801b3d8:	d100      	bne.n	801b3dc <_strtod_l+0x804>
 801b3da:	e637      	b.n	801b04c <_strtod_l+0x474>
 801b3dc:	9a08      	ldr	r2, [sp, #32]
 801b3de:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801b3e0:	9805      	ldr	r0, [sp, #20]
 801b3e2:	f002 ff3f 	bl	801e264 <__mdiff>
 801b3e6:	9006      	str	r0, [sp, #24]
 801b3e8:	2800      	cmp	r0, #0
 801b3ea:	d100      	bne.n	801b3ee <_strtod_l+0x816>
 801b3ec:	e62e      	b.n	801b04c <_strtod_l+0x474>
 801b3ee:	68c3      	ldr	r3, [r0, #12]
 801b3f0:	9907      	ldr	r1, [sp, #28]
 801b3f2:	9313      	str	r3, [sp, #76]	@ 0x4c
 801b3f4:	2300      	movs	r3, #0
 801b3f6:	60c3      	str	r3, [r0, #12]
 801b3f8:	f002 ff18 	bl	801e22c <__mcmp>
 801b3fc:	2800      	cmp	r0, #0
 801b3fe:	da3b      	bge.n	801b478 <_strtod_l+0x8a0>
 801b400:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801b402:	4333      	orrs	r3, r6
 801b404:	d167      	bne.n	801b4d6 <_strtod_l+0x8fe>
 801b406:	033b      	lsls	r3, r7, #12
 801b408:	d165      	bne.n	801b4d6 <_strtod_l+0x8fe>
 801b40a:	22d6      	movs	r2, #214	@ 0xd6
 801b40c:	4b37      	ldr	r3, [pc, #220]	@ (801b4ec <_strtod_l+0x914>)
 801b40e:	04d2      	lsls	r2, r2, #19
 801b410:	403b      	ands	r3, r7
 801b412:	4293      	cmp	r3, r2
 801b414:	d95f      	bls.n	801b4d6 <_strtod_l+0x8fe>
 801b416:	9b06      	ldr	r3, [sp, #24]
 801b418:	695b      	ldr	r3, [r3, #20]
 801b41a:	2b00      	cmp	r3, #0
 801b41c:	d103      	bne.n	801b426 <_strtod_l+0x84e>
 801b41e:	9b06      	ldr	r3, [sp, #24]
 801b420:	691b      	ldr	r3, [r3, #16]
 801b422:	2b01      	cmp	r3, #1
 801b424:	dd57      	ble.n	801b4d6 <_strtod_l+0x8fe>
 801b426:	9906      	ldr	r1, [sp, #24]
 801b428:	2201      	movs	r2, #1
 801b42a:	9805      	ldr	r0, [sp, #20]
 801b42c:	f002 fe92 	bl	801e154 <__lshift>
 801b430:	9907      	ldr	r1, [sp, #28]
 801b432:	9006      	str	r0, [sp, #24]
 801b434:	f002 fefa 	bl	801e22c <__mcmp>
 801b438:	2800      	cmp	r0, #0
 801b43a:	dd4c      	ble.n	801b4d6 <_strtod_l+0x8fe>
 801b43c:	4b2b      	ldr	r3, [pc, #172]	@ (801b4ec <_strtod_l+0x914>)
 801b43e:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b440:	403b      	ands	r3, r7
 801b442:	2a00      	cmp	r2, #0
 801b444:	d074      	beq.n	801b530 <_strtod_l+0x958>
 801b446:	22d6      	movs	r2, #214	@ 0xd6
 801b448:	04d2      	lsls	r2, r2, #19
 801b44a:	4293      	cmp	r3, r2
 801b44c:	d870      	bhi.n	801b530 <_strtod_l+0x958>
 801b44e:	22dc      	movs	r2, #220	@ 0xdc
 801b450:	0492      	lsls	r2, r2, #18
 801b452:	4293      	cmp	r3, r2
 801b454:	d800      	bhi.n	801b458 <_strtod_l+0x880>
 801b456:	e695      	b.n	801b184 <_strtod_l+0x5ac>
 801b458:	0030      	movs	r0, r6
 801b45a:	0039      	movs	r1, r7
 801b45c:	4b24      	ldr	r3, [pc, #144]	@ (801b4f0 <_strtod_l+0x918>)
 801b45e:	2200      	movs	r2, #0
 801b460:	f7e7 f8ec 	bl	800263c <__aeabi_dmul>
 801b464:	4b21      	ldr	r3, [pc, #132]	@ (801b4ec <_strtod_l+0x914>)
 801b466:	0006      	movs	r6, r0
 801b468:	000f      	movs	r7, r1
 801b46a:	420b      	tst	r3, r1
 801b46c:	d000      	beq.n	801b470 <_strtod_l+0x898>
 801b46e:	e5f6      	b.n	801b05e <_strtod_l+0x486>
 801b470:	2322      	movs	r3, #34	@ 0x22
 801b472:	9a05      	ldr	r2, [sp, #20]
 801b474:	6013      	str	r3, [r2, #0]
 801b476:	e5f2      	b.n	801b05e <_strtod_l+0x486>
 801b478:	970e      	str	r7, [sp, #56]	@ 0x38
 801b47a:	2800      	cmp	r0, #0
 801b47c:	d175      	bne.n	801b56a <_strtod_l+0x992>
 801b47e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801b480:	033b      	lsls	r3, r7, #12
 801b482:	0b1b      	lsrs	r3, r3, #12
 801b484:	2a00      	cmp	r2, #0
 801b486:	d039      	beq.n	801b4fc <_strtod_l+0x924>
 801b488:	4a1a      	ldr	r2, [pc, #104]	@ (801b4f4 <_strtod_l+0x91c>)
 801b48a:	4293      	cmp	r3, r2
 801b48c:	d138      	bne.n	801b500 <_strtod_l+0x928>
 801b48e:	2101      	movs	r1, #1
 801b490:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b492:	4249      	negs	r1, r1
 801b494:	0032      	movs	r2, r6
 801b496:	0008      	movs	r0, r1
 801b498:	2b00      	cmp	r3, #0
 801b49a:	d00b      	beq.n	801b4b4 <_strtod_l+0x8dc>
 801b49c:	24d4      	movs	r4, #212	@ 0xd4
 801b49e:	4b13      	ldr	r3, [pc, #76]	@ (801b4ec <_strtod_l+0x914>)
 801b4a0:	0008      	movs	r0, r1
 801b4a2:	403b      	ands	r3, r7
 801b4a4:	04e4      	lsls	r4, r4, #19
 801b4a6:	42a3      	cmp	r3, r4
 801b4a8:	d804      	bhi.n	801b4b4 <_strtod_l+0x8dc>
 801b4aa:	306c      	adds	r0, #108	@ 0x6c
 801b4ac:	0d1b      	lsrs	r3, r3, #20
 801b4ae:	1ac3      	subs	r3, r0, r3
 801b4b0:	4099      	lsls	r1, r3
 801b4b2:	0008      	movs	r0, r1
 801b4b4:	4282      	cmp	r2, r0
 801b4b6:	d123      	bne.n	801b500 <_strtod_l+0x928>
 801b4b8:	4b0f      	ldr	r3, [pc, #60]	@ (801b4f8 <_strtod_l+0x920>)
 801b4ba:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801b4bc:	4299      	cmp	r1, r3
 801b4be:	d102      	bne.n	801b4c6 <_strtod_l+0x8ee>
 801b4c0:	3201      	adds	r2, #1
 801b4c2:	d100      	bne.n	801b4c6 <_strtod_l+0x8ee>
 801b4c4:	e5c2      	b.n	801b04c <_strtod_l+0x474>
 801b4c6:	4b09      	ldr	r3, [pc, #36]	@ (801b4ec <_strtod_l+0x914>)
 801b4c8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801b4ca:	2600      	movs	r6, #0
 801b4cc:	401a      	ands	r2, r3
 801b4ce:	0013      	movs	r3, r2
 801b4d0:	2280      	movs	r2, #128	@ 0x80
 801b4d2:	0352      	lsls	r2, r2, #13
 801b4d4:	189f      	adds	r7, r3, r2
 801b4d6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b4d8:	2b00      	cmp	r3, #0
 801b4da:	d1bd      	bne.n	801b458 <_strtod_l+0x880>
 801b4dc:	e5bf      	b.n	801b05e <_strtod_l+0x486>
 801b4de:	46c0      	nop			@ (mov r8, r8)
 801b4e0:	08020f80 	.word	0x08020f80
 801b4e4:	fffffc02 	.word	0xfffffc02
 801b4e8:	fffffbe2 	.word	0xfffffbe2
 801b4ec:	7ff00000 	.word	0x7ff00000
 801b4f0:	39500000 	.word	0x39500000
 801b4f4:	000fffff 	.word	0x000fffff
 801b4f8:	7fefffff 	.word	0x7fefffff
 801b4fc:	4333      	orrs	r3, r6
 801b4fe:	d09d      	beq.n	801b43c <_strtod_l+0x864>
 801b500:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801b502:	2b00      	cmp	r3, #0
 801b504:	d01c      	beq.n	801b540 <_strtod_l+0x968>
 801b506:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b508:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801b50a:	4213      	tst	r3, r2
 801b50c:	d0e3      	beq.n	801b4d6 <_strtod_l+0x8fe>
 801b50e:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801b510:	0030      	movs	r0, r6
 801b512:	0039      	movs	r1, r7
 801b514:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801b516:	2b00      	cmp	r3, #0
 801b518:	d016      	beq.n	801b548 <_strtod_l+0x970>
 801b51a:	f7ff fb45 	bl	801aba8 <sulp>
 801b51e:	0002      	movs	r2, r0
 801b520:	000b      	movs	r3, r1
 801b522:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801b524:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801b526:	f7e6 f8e1 	bl	80016ec <__aeabi_dadd>
 801b52a:	0006      	movs	r6, r0
 801b52c:	000f      	movs	r7, r1
 801b52e:	e7d2      	b.n	801b4d6 <_strtod_l+0x8fe>
 801b530:	2601      	movs	r6, #1
 801b532:	4a92      	ldr	r2, [pc, #584]	@ (801b77c <_strtod_l+0xba4>)
 801b534:	4276      	negs	r6, r6
 801b536:	189b      	adds	r3, r3, r2
 801b538:	4a91      	ldr	r2, [pc, #580]	@ (801b780 <_strtod_l+0xba8>)
 801b53a:	431a      	orrs	r2, r3
 801b53c:	0017      	movs	r7, r2
 801b53e:	e7ca      	b.n	801b4d6 <_strtod_l+0x8fe>
 801b540:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801b542:	4233      	tst	r3, r6
 801b544:	d0c7      	beq.n	801b4d6 <_strtod_l+0x8fe>
 801b546:	e7e2      	b.n	801b50e <_strtod_l+0x936>
 801b548:	f7ff fb2e 	bl	801aba8 <sulp>
 801b54c:	0002      	movs	r2, r0
 801b54e:	000b      	movs	r3, r1
 801b550:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801b552:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801b554:	f7e7 fb3a 	bl	8002bcc <__aeabi_dsub>
 801b558:	2200      	movs	r2, #0
 801b55a:	2300      	movs	r3, #0
 801b55c:	0006      	movs	r6, r0
 801b55e:	000f      	movs	r7, r1
 801b560:	f7e4 ffa6 	bl	80004b0 <__aeabi_dcmpeq>
 801b564:	2800      	cmp	r0, #0
 801b566:	d0b6      	beq.n	801b4d6 <_strtod_l+0x8fe>
 801b568:	e60c      	b.n	801b184 <_strtod_l+0x5ac>
 801b56a:	9907      	ldr	r1, [sp, #28]
 801b56c:	9806      	ldr	r0, [sp, #24]
 801b56e:	f002 ffdf 	bl	801e530 <__ratio>
 801b572:	2380      	movs	r3, #128	@ 0x80
 801b574:	2200      	movs	r2, #0
 801b576:	05db      	lsls	r3, r3, #23
 801b578:	0004      	movs	r4, r0
 801b57a:	000d      	movs	r5, r1
 801b57c:	f7e4 ffa8 	bl	80004d0 <__aeabi_dcmple>
 801b580:	2800      	cmp	r0, #0
 801b582:	d06c      	beq.n	801b65e <_strtod_l+0xa86>
 801b584:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801b586:	2b00      	cmp	r3, #0
 801b588:	d177      	bne.n	801b67a <_strtod_l+0xaa2>
 801b58a:	2e00      	cmp	r6, #0
 801b58c:	d157      	bne.n	801b63e <_strtod_l+0xa66>
 801b58e:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b590:	031b      	lsls	r3, r3, #12
 801b592:	d15a      	bne.n	801b64a <_strtod_l+0xa72>
 801b594:	2200      	movs	r2, #0
 801b596:	0020      	movs	r0, r4
 801b598:	0029      	movs	r1, r5
 801b59a:	4b7a      	ldr	r3, [pc, #488]	@ (801b784 <_strtod_l+0xbac>)
 801b59c:	f7e4 ff8e 	bl	80004bc <__aeabi_dcmplt>
 801b5a0:	2800      	cmp	r0, #0
 801b5a2:	d159      	bne.n	801b658 <_strtod_l+0xa80>
 801b5a4:	0020      	movs	r0, r4
 801b5a6:	0029      	movs	r1, r5
 801b5a8:	2200      	movs	r2, #0
 801b5aa:	4b77      	ldr	r3, [pc, #476]	@ (801b788 <_strtod_l+0xbb0>)
 801b5ac:	f7e7 f846 	bl	800263c <__aeabi_dmul>
 801b5b0:	0004      	movs	r4, r0
 801b5b2:	000d      	movs	r5, r1
 801b5b4:	2380      	movs	r3, #128	@ 0x80
 801b5b6:	061b      	lsls	r3, r3, #24
 801b5b8:	18eb      	adds	r3, r5, r3
 801b5ba:	940a      	str	r4, [sp, #40]	@ 0x28
 801b5bc:	930b      	str	r3, [sp, #44]	@ 0x2c
 801b5be:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801b5c0:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801b5c2:	9214      	str	r2, [sp, #80]	@ 0x50
 801b5c4:	9315      	str	r3, [sp, #84]	@ 0x54
 801b5c6:	4a71      	ldr	r2, [pc, #452]	@ (801b78c <_strtod_l+0xbb4>)
 801b5c8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b5ca:	4013      	ands	r3, r2
 801b5cc:	9316      	str	r3, [sp, #88]	@ 0x58
 801b5ce:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801b5d0:	4b6f      	ldr	r3, [pc, #444]	@ (801b790 <_strtod_l+0xbb8>)
 801b5d2:	429a      	cmp	r2, r3
 801b5d4:	d000      	beq.n	801b5d8 <_strtod_l+0xa00>
 801b5d6:	e087      	b.n	801b6e8 <_strtod_l+0xb10>
 801b5d8:	4a6e      	ldr	r2, [pc, #440]	@ (801b794 <_strtod_l+0xbbc>)
 801b5da:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b5dc:	4694      	mov	ip, r2
 801b5de:	4463      	add	r3, ip
 801b5e0:	001f      	movs	r7, r3
 801b5e2:	0030      	movs	r0, r6
 801b5e4:	0019      	movs	r1, r3
 801b5e6:	f002 fed7 	bl	801e398 <__ulp>
 801b5ea:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801b5ec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801b5ee:	f7e7 f825 	bl	800263c <__aeabi_dmul>
 801b5f2:	0032      	movs	r2, r6
 801b5f4:	003b      	movs	r3, r7
 801b5f6:	f7e6 f879 	bl	80016ec <__aeabi_dadd>
 801b5fa:	4a64      	ldr	r2, [pc, #400]	@ (801b78c <_strtod_l+0xbb4>)
 801b5fc:	4b66      	ldr	r3, [pc, #408]	@ (801b798 <_strtod_l+0xbc0>)
 801b5fe:	0006      	movs	r6, r0
 801b600:	400a      	ands	r2, r1
 801b602:	429a      	cmp	r2, r3
 801b604:	d940      	bls.n	801b688 <_strtod_l+0xab0>
 801b606:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801b608:	4a64      	ldr	r2, [pc, #400]	@ (801b79c <_strtod_l+0xbc4>)
 801b60a:	4293      	cmp	r3, r2
 801b60c:	d103      	bne.n	801b616 <_strtod_l+0xa3e>
 801b60e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b610:	3301      	adds	r3, #1
 801b612:	d100      	bne.n	801b616 <_strtod_l+0xa3e>
 801b614:	e51a      	b.n	801b04c <_strtod_l+0x474>
 801b616:	2601      	movs	r6, #1
 801b618:	4f60      	ldr	r7, [pc, #384]	@ (801b79c <_strtod_l+0xbc4>)
 801b61a:	4276      	negs	r6, r6
 801b61c:	991e      	ldr	r1, [sp, #120]	@ 0x78
 801b61e:	9805      	ldr	r0, [sp, #20]
 801b620:	f002 fb6e 	bl	801dd00 <_Bfree>
 801b624:	9908      	ldr	r1, [sp, #32]
 801b626:	9805      	ldr	r0, [sp, #20]
 801b628:	f002 fb6a 	bl	801dd00 <_Bfree>
 801b62c:	9907      	ldr	r1, [sp, #28]
 801b62e:	9805      	ldr	r0, [sp, #20]
 801b630:	f002 fb66 	bl	801dd00 <_Bfree>
 801b634:	9906      	ldr	r1, [sp, #24]
 801b636:	9805      	ldr	r0, [sp, #20]
 801b638:	f002 fb62 	bl	801dd00 <_Bfree>
 801b63c:	e617      	b.n	801b26e <_strtod_l+0x696>
 801b63e:	2e01      	cmp	r6, #1
 801b640:	d103      	bne.n	801b64a <_strtod_l+0xa72>
 801b642:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801b644:	2b00      	cmp	r3, #0
 801b646:	d100      	bne.n	801b64a <_strtod_l+0xa72>
 801b648:	e59c      	b.n	801b184 <_strtod_l+0x5ac>
 801b64a:	2300      	movs	r3, #0
 801b64c:	4c54      	ldr	r4, [pc, #336]	@ (801b7a0 <_strtod_l+0xbc8>)
 801b64e:	4d4d      	ldr	r5, [pc, #308]	@ (801b784 <_strtod_l+0xbac>)
 801b650:	930a      	str	r3, [sp, #40]	@ 0x28
 801b652:	940b      	str	r4, [sp, #44]	@ 0x2c
 801b654:	2400      	movs	r4, #0
 801b656:	e7b2      	b.n	801b5be <_strtod_l+0x9e6>
 801b658:	2400      	movs	r4, #0
 801b65a:	4d4b      	ldr	r5, [pc, #300]	@ (801b788 <_strtod_l+0xbb0>)
 801b65c:	e7aa      	b.n	801b5b4 <_strtod_l+0x9dc>
 801b65e:	0020      	movs	r0, r4
 801b660:	0029      	movs	r1, r5
 801b662:	4b49      	ldr	r3, [pc, #292]	@ (801b788 <_strtod_l+0xbb0>)
 801b664:	2200      	movs	r2, #0
 801b666:	f7e6 ffe9 	bl	800263c <__aeabi_dmul>
 801b66a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801b66c:	0004      	movs	r4, r0
 801b66e:	000d      	movs	r5, r1
 801b670:	2b00      	cmp	r3, #0
 801b672:	d09f      	beq.n	801b5b4 <_strtod_l+0x9dc>
 801b674:	940a      	str	r4, [sp, #40]	@ 0x28
 801b676:	950b      	str	r5, [sp, #44]	@ 0x2c
 801b678:	e7a1      	b.n	801b5be <_strtod_l+0x9e6>
 801b67a:	2300      	movs	r3, #0
 801b67c:	4c41      	ldr	r4, [pc, #260]	@ (801b784 <_strtod_l+0xbac>)
 801b67e:	0025      	movs	r5, r4
 801b680:	930a      	str	r3, [sp, #40]	@ 0x28
 801b682:	940b      	str	r4, [sp, #44]	@ 0x2c
 801b684:	001c      	movs	r4, r3
 801b686:	e79a      	b.n	801b5be <_strtod_l+0x9e6>
 801b688:	23d4      	movs	r3, #212	@ 0xd4
 801b68a:	049b      	lsls	r3, r3, #18
 801b68c:	18cf      	adds	r7, r1, r3
 801b68e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b690:	9710      	str	r7, [sp, #64]	@ 0x40
 801b692:	2b00      	cmp	r3, #0
 801b694:	d1c2      	bne.n	801b61c <_strtod_l+0xa44>
 801b696:	4b3d      	ldr	r3, [pc, #244]	@ (801b78c <_strtod_l+0xbb4>)
 801b698:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801b69a:	403b      	ands	r3, r7
 801b69c:	429a      	cmp	r2, r3
 801b69e:	d1bd      	bne.n	801b61c <_strtod_l+0xa44>
 801b6a0:	0020      	movs	r0, r4
 801b6a2:	0029      	movs	r1, r5
 801b6a4:	f7e4 fff0 	bl	8000688 <__aeabi_d2lz>
 801b6a8:	f7e5 f828 	bl	80006fc <__aeabi_l2d>
 801b6ac:	0002      	movs	r2, r0
 801b6ae:	000b      	movs	r3, r1
 801b6b0:	0020      	movs	r0, r4
 801b6b2:	0029      	movs	r1, r5
 801b6b4:	f7e7 fa8a 	bl	8002bcc <__aeabi_dsub>
 801b6b8:	033c      	lsls	r4, r7, #12
 801b6ba:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801b6bc:	0b24      	lsrs	r4, r4, #12
 801b6be:	4334      	orrs	r4, r6
 801b6c0:	900e      	str	r0, [sp, #56]	@ 0x38
 801b6c2:	910f      	str	r1, [sp, #60]	@ 0x3c
 801b6c4:	4a37      	ldr	r2, [pc, #220]	@ (801b7a4 <_strtod_l+0xbcc>)
 801b6c6:	431c      	orrs	r4, r3
 801b6c8:	d052      	beq.n	801b770 <_strtod_l+0xb98>
 801b6ca:	4b37      	ldr	r3, [pc, #220]	@ (801b7a8 <_strtod_l+0xbd0>)
 801b6cc:	f7e4 fef6 	bl	80004bc <__aeabi_dcmplt>
 801b6d0:	2800      	cmp	r0, #0
 801b6d2:	d000      	beq.n	801b6d6 <_strtod_l+0xafe>
 801b6d4:	e4c3      	b.n	801b05e <_strtod_l+0x486>
 801b6d6:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801b6d8:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801b6da:	4a34      	ldr	r2, [pc, #208]	@ (801b7ac <_strtod_l+0xbd4>)
 801b6dc:	4b2a      	ldr	r3, [pc, #168]	@ (801b788 <_strtod_l+0xbb0>)
 801b6de:	f7e4 ff01 	bl	80004e4 <__aeabi_dcmpgt>
 801b6e2:	2800      	cmp	r0, #0
 801b6e4:	d09a      	beq.n	801b61c <_strtod_l+0xa44>
 801b6e6:	e4ba      	b.n	801b05e <_strtod_l+0x486>
 801b6e8:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b6ea:	2b00      	cmp	r3, #0
 801b6ec:	d02a      	beq.n	801b744 <_strtod_l+0xb6c>
 801b6ee:	23d4      	movs	r3, #212	@ 0xd4
 801b6f0:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801b6f2:	04db      	lsls	r3, r3, #19
 801b6f4:	429a      	cmp	r2, r3
 801b6f6:	d825      	bhi.n	801b744 <_strtod_l+0xb6c>
 801b6f8:	0020      	movs	r0, r4
 801b6fa:	0029      	movs	r1, r5
 801b6fc:	4a2c      	ldr	r2, [pc, #176]	@ (801b7b0 <_strtod_l+0xbd8>)
 801b6fe:	4b2d      	ldr	r3, [pc, #180]	@ (801b7b4 <_strtod_l+0xbdc>)
 801b700:	f7e4 fee6 	bl	80004d0 <__aeabi_dcmple>
 801b704:	2800      	cmp	r0, #0
 801b706:	d016      	beq.n	801b736 <_strtod_l+0xb5e>
 801b708:	0020      	movs	r0, r4
 801b70a:	0029      	movs	r1, r5
 801b70c:	f7e4 ff9e 	bl	800064c <__aeabi_d2uiz>
 801b710:	2800      	cmp	r0, #0
 801b712:	d100      	bne.n	801b716 <_strtod_l+0xb3e>
 801b714:	3001      	adds	r0, #1
 801b716:	f7e7 fe81 	bl	800341c <__aeabi_ui2d>
 801b71a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801b71c:	0004      	movs	r4, r0
 801b71e:	000d      	movs	r5, r1
 801b720:	2b00      	cmp	r3, #0
 801b722:	d122      	bne.n	801b76a <_strtod_l+0xb92>
 801b724:	2380      	movs	r3, #128	@ 0x80
 801b726:	061b      	lsls	r3, r3, #24
 801b728:	18cb      	adds	r3, r1, r3
 801b72a:	9018      	str	r0, [sp, #96]	@ 0x60
 801b72c:	9319      	str	r3, [sp, #100]	@ 0x64
 801b72e:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801b730:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801b732:	9214      	str	r2, [sp, #80]	@ 0x50
 801b734:	9315      	str	r3, [sp, #84]	@ 0x54
 801b736:	22d6      	movs	r2, #214	@ 0xd6
 801b738:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801b73a:	04d2      	lsls	r2, r2, #19
 801b73c:	189b      	adds	r3, r3, r2
 801b73e:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801b740:	1a9b      	subs	r3, r3, r2
 801b742:	9315      	str	r3, [sp, #84]	@ 0x54
 801b744:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801b746:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801b748:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801b74a:	9f15      	ldr	r7, [sp, #84]	@ 0x54
 801b74c:	f002 fe24 	bl	801e398 <__ulp>
 801b750:	0002      	movs	r2, r0
 801b752:	000b      	movs	r3, r1
 801b754:	0030      	movs	r0, r6
 801b756:	0039      	movs	r1, r7
 801b758:	f7e6 ff70 	bl	800263c <__aeabi_dmul>
 801b75c:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801b75e:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801b760:	f7e5 ffc4 	bl	80016ec <__aeabi_dadd>
 801b764:	0006      	movs	r6, r0
 801b766:	000f      	movs	r7, r1
 801b768:	e791      	b.n	801b68e <_strtod_l+0xab6>
 801b76a:	9418      	str	r4, [sp, #96]	@ 0x60
 801b76c:	9519      	str	r5, [sp, #100]	@ 0x64
 801b76e:	e7de      	b.n	801b72e <_strtod_l+0xb56>
 801b770:	4b11      	ldr	r3, [pc, #68]	@ (801b7b8 <_strtod_l+0xbe0>)
 801b772:	980e      	ldr	r0, [sp, #56]	@ 0x38
 801b774:	990f      	ldr	r1, [sp, #60]	@ 0x3c
 801b776:	f7e4 fea1 	bl	80004bc <__aeabi_dcmplt>
 801b77a:	e7b2      	b.n	801b6e2 <_strtod_l+0xb0a>
 801b77c:	fff00000 	.word	0xfff00000
 801b780:	000fffff 	.word	0x000fffff
 801b784:	3ff00000 	.word	0x3ff00000
 801b788:	3fe00000 	.word	0x3fe00000
 801b78c:	7ff00000 	.word	0x7ff00000
 801b790:	7fe00000 	.word	0x7fe00000
 801b794:	fcb00000 	.word	0xfcb00000
 801b798:	7c9fffff 	.word	0x7c9fffff
 801b79c:	7fefffff 	.word	0x7fefffff
 801b7a0:	bff00000 	.word	0xbff00000
 801b7a4:	94a03595 	.word	0x94a03595
 801b7a8:	3fdfffff 	.word	0x3fdfffff
 801b7ac:	35afe535 	.word	0x35afe535
 801b7b0:	ffc00000 	.word	0xffc00000
 801b7b4:	41dfffff 	.word	0x41dfffff
 801b7b8:	3fcfffff 	.word	0x3fcfffff

0801b7bc <strtod>:
 801b7bc:	b510      	push	{r4, lr}
 801b7be:	4c04      	ldr	r4, [pc, #16]	@ (801b7d0 <strtod+0x14>)
 801b7c0:	000a      	movs	r2, r1
 801b7c2:	0001      	movs	r1, r0
 801b7c4:	4b03      	ldr	r3, [pc, #12]	@ (801b7d4 <strtod+0x18>)
 801b7c6:	6820      	ldr	r0, [r4, #0]
 801b7c8:	f7ff fa06 	bl	801abd8 <_strtod_l>
 801b7cc:	bd10      	pop	{r4, pc}
 801b7ce:	46c0      	nop			@ (mov r8, r8)
 801b7d0:	200003c8 	.word	0x200003c8
 801b7d4:	2000025c 	.word	0x2000025c

0801b7d8 <_strtol_l.constprop.0>:
 801b7d8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b7da:	b085      	sub	sp, #20
 801b7dc:	0017      	movs	r7, r2
 801b7de:	001e      	movs	r6, r3
 801b7e0:	9003      	str	r0, [sp, #12]
 801b7e2:	9101      	str	r1, [sp, #4]
 801b7e4:	2b24      	cmp	r3, #36	@ 0x24
 801b7e6:	d844      	bhi.n	801b872 <_strtol_l.constprop.0+0x9a>
 801b7e8:	000c      	movs	r4, r1
 801b7ea:	2b01      	cmp	r3, #1
 801b7ec:	d041      	beq.n	801b872 <_strtol_l.constprop.0+0x9a>
 801b7ee:	4b3d      	ldr	r3, [pc, #244]	@ (801b8e4 <_strtol_l.constprop.0+0x10c>)
 801b7f0:	2208      	movs	r2, #8
 801b7f2:	469c      	mov	ip, r3
 801b7f4:	0023      	movs	r3, r4
 801b7f6:	4661      	mov	r1, ip
 801b7f8:	781d      	ldrb	r5, [r3, #0]
 801b7fa:	3401      	adds	r4, #1
 801b7fc:	5d48      	ldrb	r0, [r1, r5]
 801b7fe:	0001      	movs	r1, r0
 801b800:	4011      	ands	r1, r2
 801b802:	4210      	tst	r0, r2
 801b804:	d1f6      	bne.n	801b7f4 <_strtol_l.constprop.0+0x1c>
 801b806:	2d2d      	cmp	r5, #45	@ 0x2d
 801b808:	d13a      	bne.n	801b880 <_strtol_l.constprop.0+0xa8>
 801b80a:	7825      	ldrb	r5, [r4, #0]
 801b80c:	1c9c      	adds	r4, r3, #2
 801b80e:	2301      	movs	r3, #1
 801b810:	9300      	str	r3, [sp, #0]
 801b812:	2210      	movs	r2, #16
 801b814:	0033      	movs	r3, r6
 801b816:	4393      	bics	r3, r2
 801b818:	d109      	bne.n	801b82e <_strtol_l.constprop.0+0x56>
 801b81a:	2d30      	cmp	r5, #48	@ 0x30
 801b81c:	d136      	bne.n	801b88c <_strtol_l.constprop.0+0xb4>
 801b81e:	2120      	movs	r1, #32
 801b820:	7823      	ldrb	r3, [r4, #0]
 801b822:	438b      	bics	r3, r1
 801b824:	2b58      	cmp	r3, #88	@ 0x58
 801b826:	d131      	bne.n	801b88c <_strtol_l.constprop.0+0xb4>
 801b828:	0016      	movs	r6, r2
 801b82a:	7865      	ldrb	r5, [r4, #1]
 801b82c:	3402      	adds	r4, #2
 801b82e:	4a2e      	ldr	r2, [pc, #184]	@ (801b8e8 <_strtol_l.constprop.0+0x110>)
 801b830:	9b00      	ldr	r3, [sp, #0]
 801b832:	4694      	mov	ip, r2
 801b834:	4463      	add	r3, ip
 801b836:	0031      	movs	r1, r6
 801b838:	0018      	movs	r0, r3
 801b83a:	9302      	str	r3, [sp, #8]
 801b83c:	f7e4 fd38 	bl	80002b0 <__aeabi_uidivmod>
 801b840:	2200      	movs	r2, #0
 801b842:	4684      	mov	ip, r0
 801b844:	0010      	movs	r0, r2
 801b846:	002b      	movs	r3, r5
 801b848:	3b30      	subs	r3, #48	@ 0x30
 801b84a:	2b09      	cmp	r3, #9
 801b84c:	d825      	bhi.n	801b89a <_strtol_l.constprop.0+0xc2>
 801b84e:	001d      	movs	r5, r3
 801b850:	42ae      	cmp	r6, r5
 801b852:	dd31      	ble.n	801b8b8 <_strtol_l.constprop.0+0xe0>
 801b854:	1c53      	adds	r3, r2, #1
 801b856:	d009      	beq.n	801b86c <_strtol_l.constprop.0+0x94>
 801b858:	2201      	movs	r2, #1
 801b85a:	4252      	negs	r2, r2
 801b85c:	4584      	cmp	ip, r0
 801b85e:	d305      	bcc.n	801b86c <_strtol_l.constprop.0+0x94>
 801b860:	d101      	bne.n	801b866 <_strtol_l.constprop.0+0x8e>
 801b862:	42a9      	cmp	r1, r5
 801b864:	db25      	blt.n	801b8b2 <_strtol_l.constprop.0+0xda>
 801b866:	2201      	movs	r2, #1
 801b868:	4370      	muls	r0, r6
 801b86a:	1828      	adds	r0, r5, r0
 801b86c:	7825      	ldrb	r5, [r4, #0]
 801b86e:	3401      	adds	r4, #1
 801b870:	e7e9      	b.n	801b846 <_strtol_l.constprop.0+0x6e>
 801b872:	f000 fec5 	bl	801c600 <__errno>
 801b876:	2316      	movs	r3, #22
 801b878:	6003      	str	r3, [r0, #0]
 801b87a:	2000      	movs	r0, #0
 801b87c:	b005      	add	sp, #20
 801b87e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b880:	9100      	str	r1, [sp, #0]
 801b882:	2d2b      	cmp	r5, #43	@ 0x2b
 801b884:	d1c5      	bne.n	801b812 <_strtol_l.constprop.0+0x3a>
 801b886:	7825      	ldrb	r5, [r4, #0]
 801b888:	1c9c      	adds	r4, r3, #2
 801b88a:	e7c2      	b.n	801b812 <_strtol_l.constprop.0+0x3a>
 801b88c:	2e00      	cmp	r6, #0
 801b88e:	d1ce      	bne.n	801b82e <_strtol_l.constprop.0+0x56>
 801b890:	3608      	adds	r6, #8
 801b892:	2d30      	cmp	r5, #48	@ 0x30
 801b894:	d0cb      	beq.n	801b82e <_strtol_l.constprop.0+0x56>
 801b896:	3602      	adds	r6, #2
 801b898:	e7c9      	b.n	801b82e <_strtol_l.constprop.0+0x56>
 801b89a:	002b      	movs	r3, r5
 801b89c:	3b41      	subs	r3, #65	@ 0x41
 801b89e:	2b19      	cmp	r3, #25
 801b8a0:	d801      	bhi.n	801b8a6 <_strtol_l.constprop.0+0xce>
 801b8a2:	3d37      	subs	r5, #55	@ 0x37
 801b8a4:	e7d4      	b.n	801b850 <_strtol_l.constprop.0+0x78>
 801b8a6:	002b      	movs	r3, r5
 801b8a8:	3b61      	subs	r3, #97	@ 0x61
 801b8aa:	2b19      	cmp	r3, #25
 801b8ac:	d804      	bhi.n	801b8b8 <_strtol_l.constprop.0+0xe0>
 801b8ae:	3d57      	subs	r5, #87	@ 0x57
 801b8b0:	e7ce      	b.n	801b850 <_strtol_l.constprop.0+0x78>
 801b8b2:	2201      	movs	r2, #1
 801b8b4:	4252      	negs	r2, r2
 801b8b6:	e7d9      	b.n	801b86c <_strtol_l.constprop.0+0x94>
 801b8b8:	1c53      	adds	r3, r2, #1
 801b8ba:	d108      	bne.n	801b8ce <_strtol_l.constprop.0+0xf6>
 801b8bc:	2322      	movs	r3, #34	@ 0x22
 801b8be:	9a03      	ldr	r2, [sp, #12]
 801b8c0:	9802      	ldr	r0, [sp, #8]
 801b8c2:	6013      	str	r3, [r2, #0]
 801b8c4:	2f00      	cmp	r7, #0
 801b8c6:	d0d9      	beq.n	801b87c <_strtol_l.constprop.0+0xa4>
 801b8c8:	1e63      	subs	r3, r4, #1
 801b8ca:	9301      	str	r3, [sp, #4]
 801b8cc:	e007      	b.n	801b8de <_strtol_l.constprop.0+0x106>
 801b8ce:	9b00      	ldr	r3, [sp, #0]
 801b8d0:	2b00      	cmp	r3, #0
 801b8d2:	d000      	beq.n	801b8d6 <_strtol_l.constprop.0+0xfe>
 801b8d4:	4240      	negs	r0, r0
 801b8d6:	2f00      	cmp	r7, #0
 801b8d8:	d0d0      	beq.n	801b87c <_strtol_l.constprop.0+0xa4>
 801b8da:	2a00      	cmp	r2, #0
 801b8dc:	d1f4      	bne.n	801b8c8 <_strtol_l.constprop.0+0xf0>
 801b8de:	9b01      	ldr	r3, [sp, #4]
 801b8e0:	603b      	str	r3, [r7, #0]
 801b8e2:	e7cb      	b.n	801b87c <_strtol_l.constprop.0+0xa4>
 801b8e4:	08020fa9 	.word	0x08020fa9
 801b8e8:	7fffffff 	.word	0x7fffffff

0801b8ec <strtol>:
 801b8ec:	b510      	push	{r4, lr}
 801b8ee:	4c04      	ldr	r4, [pc, #16]	@ (801b900 <strtol+0x14>)
 801b8f0:	0013      	movs	r3, r2
 801b8f2:	000a      	movs	r2, r1
 801b8f4:	0001      	movs	r1, r0
 801b8f6:	6820      	ldr	r0, [r4, #0]
 801b8f8:	f7ff ff6e 	bl	801b7d8 <_strtol_l.constprop.0>
 801b8fc:	bd10      	pop	{r4, pc}
 801b8fe:	46c0      	nop			@ (mov r8, r8)
 801b900:	200003c8 	.word	0x200003c8

0801b904 <__cvt>:
 801b904:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b906:	001f      	movs	r7, r3
 801b908:	2300      	movs	r3, #0
 801b90a:	0016      	movs	r6, r2
 801b90c:	b08b      	sub	sp, #44	@ 0x2c
 801b90e:	429f      	cmp	r7, r3
 801b910:	da04      	bge.n	801b91c <__cvt+0x18>
 801b912:	2180      	movs	r1, #128	@ 0x80
 801b914:	0609      	lsls	r1, r1, #24
 801b916:	187b      	adds	r3, r7, r1
 801b918:	001f      	movs	r7, r3
 801b91a:	232d      	movs	r3, #45	@ 0x2d
 801b91c:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801b91e:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801b920:	7013      	strb	r3, [r2, #0]
 801b922:	2320      	movs	r3, #32
 801b924:	2203      	movs	r2, #3
 801b926:	439d      	bics	r5, r3
 801b928:	2d46      	cmp	r5, #70	@ 0x46
 801b92a:	d007      	beq.n	801b93c <__cvt+0x38>
 801b92c:	002b      	movs	r3, r5
 801b92e:	3b45      	subs	r3, #69	@ 0x45
 801b930:	4259      	negs	r1, r3
 801b932:	414b      	adcs	r3, r1
 801b934:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801b936:	3a01      	subs	r2, #1
 801b938:	18cb      	adds	r3, r1, r3
 801b93a:	9310      	str	r3, [sp, #64]	@ 0x40
 801b93c:	ab09      	add	r3, sp, #36	@ 0x24
 801b93e:	9304      	str	r3, [sp, #16]
 801b940:	ab08      	add	r3, sp, #32
 801b942:	9303      	str	r3, [sp, #12]
 801b944:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801b946:	9200      	str	r2, [sp, #0]
 801b948:	9302      	str	r3, [sp, #8]
 801b94a:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b94c:	0032      	movs	r2, r6
 801b94e:	9301      	str	r3, [sp, #4]
 801b950:	003b      	movs	r3, r7
 801b952:	f000 ff2b 	bl	801c7ac <_dtoa_r>
 801b956:	0004      	movs	r4, r0
 801b958:	2d47      	cmp	r5, #71	@ 0x47
 801b95a:	d11b      	bne.n	801b994 <__cvt+0x90>
 801b95c:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801b95e:	07db      	lsls	r3, r3, #31
 801b960:	d511      	bpl.n	801b986 <__cvt+0x82>
 801b962:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b964:	18c3      	adds	r3, r0, r3
 801b966:	9307      	str	r3, [sp, #28]
 801b968:	2200      	movs	r2, #0
 801b96a:	2300      	movs	r3, #0
 801b96c:	0030      	movs	r0, r6
 801b96e:	0039      	movs	r1, r7
 801b970:	f7e4 fd9e 	bl	80004b0 <__aeabi_dcmpeq>
 801b974:	2800      	cmp	r0, #0
 801b976:	d001      	beq.n	801b97c <__cvt+0x78>
 801b978:	9b07      	ldr	r3, [sp, #28]
 801b97a:	9309      	str	r3, [sp, #36]	@ 0x24
 801b97c:	2230      	movs	r2, #48	@ 0x30
 801b97e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b980:	9907      	ldr	r1, [sp, #28]
 801b982:	428b      	cmp	r3, r1
 801b984:	d320      	bcc.n	801b9c8 <__cvt+0xc4>
 801b986:	0020      	movs	r0, r4
 801b988:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801b98a:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801b98c:	1b1b      	subs	r3, r3, r4
 801b98e:	6013      	str	r3, [r2, #0]
 801b990:	b00b      	add	sp, #44	@ 0x2c
 801b992:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801b994:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801b996:	18c3      	adds	r3, r0, r3
 801b998:	9307      	str	r3, [sp, #28]
 801b99a:	2d46      	cmp	r5, #70	@ 0x46
 801b99c:	d1e4      	bne.n	801b968 <__cvt+0x64>
 801b99e:	7803      	ldrb	r3, [r0, #0]
 801b9a0:	2b30      	cmp	r3, #48	@ 0x30
 801b9a2:	d10c      	bne.n	801b9be <__cvt+0xba>
 801b9a4:	2200      	movs	r2, #0
 801b9a6:	2300      	movs	r3, #0
 801b9a8:	0030      	movs	r0, r6
 801b9aa:	0039      	movs	r1, r7
 801b9ac:	f7e4 fd80 	bl	80004b0 <__aeabi_dcmpeq>
 801b9b0:	2800      	cmp	r0, #0
 801b9b2:	d104      	bne.n	801b9be <__cvt+0xba>
 801b9b4:	2301      	movs	r3, #1
 801b9b6:	9a10      	ldr	r2, [sp, #64]	@ 0x40
 801b9b8:	1a9b      	subs	r3, r3, r2
 801b9ba:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801b9bc:	6013      	str	r3, [r2, #0]
 801b9be:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801b9c0:	9a07      	ldr	r2, [sp, #28]
 801b9c2:	681b      	ldr	r3, [r3, #0]
 801b9c4:	18d3      	adds	r3, r2, r3
 801b9c6:	e7ce      	b.n	801b966 <__cvt+0x62>
 801b9c8:	1c59      	adds	r1, r3, #1
 801b9ca:	9109      	str	r1, [sp, #36]	@ 0x24
 801b9cc:	701a      	strb	r2, [r3, #0]
 801b9ce:	e7d6      	b.n	801b97e <__cvt+0x7a>

0801b9d0 <__exponent>:
 801b9d0:	b5f0      	push	{r4, r5, r6, r7, lr}
 801b9d2:	232b      	movs	r3, #43	@ 0x2b
 801b9d4:	0005      	movs	r5, r0
 801b9d6:	000c      	movs	r4, r1
 801b9d8:	b085      	sub	sp, #20
 801b9da:	7002      	strb	r2, [r0, #0]
 801b9dc:	2900      	cmp	r1, #0
 801b9de:	da01      	bge.n	801b9e4 <__exponent+0x14>
 801b9e0:	424c      	negs	r4, r1
 801b9e2:	3302      	adds	r3, #2
 801b9e4:	706b      	strb	r3, [r5, #1]
 801b9e6:	2c09      	cmp	r4, #9
 801b9e8:	dd2c      	ble.n	801ba44 <__exponent+0x74>
 801b9ea:	ab02      	add	r3, sp, #8
 801b9ec:	1dde      	adds	r6, r3, #7
 801b9ee:	0020      	movs	r0, r4
 801b9f0:	210a      	movs	r1, #10
 801b9f2:	f7e4 fd47 	bl	8000484 <__aeabi_idivmod>
 801b9f6:	0037      	movs	r7, r6
 801b9f8:	3130      	adds	r1, #48	@ 0x30
 801b9fa:	3e01      	subs	r6, #1
 801b9fc:	0020      	movs	r0, r4
 801b9fe:	7031      	strb	r1, [r6, #0]
 801ba00:	210a      	movs	r1, #10
 801ba02:	9401      	str	r4, [sp, #4]
 801ba04:	f7e4 fc58 	bl	80002b8 <__divsi3>
 801ba08:	9b01      	ldr	r3, [sp, #4]
 801ba0a:	0004      	movs	r4, r0
 801ba0c:	2b63      	cmp	r3, #99	@ 0x63
 801ba0e:	dcee      	bgt.n	801b9ee <__exponent+0x1e>
 801ba10:	1eba      	subs	r2, r7, #2
 801ba12:	1ca8      	adds	r0, r5, #2
 801ba14:	0001      	movs	r1, r0
 801ba16:	0013      	movs	r3, r2
 801ba18:	3430      	adds	r4, #48	@ 0x30
 801ba1a:	7014      	strb	r4, [r2, #0]
 801ba1c:	ac02      	add	r4, sp, #8
 801ba1e:	3407      	adds	r4, #7
 801ba20:	429c      	cmp	r4, r3
 801ba22:	d80a      	bhi.n	801ba3a <__exponent+0x6a>
 801ba24:	2300      	movs	r3, #0
 801ba26:	42a2      	cmp	r2, r4
 801ba28:	d803      	bhi.n	801ba32 <__exponent+0x62>
 801ba2a:	3309      	adds	r3, #9
 801ba2c:	aa02      	add	r2, sp, #8
 801ba2e:	189b      	adds	r3, r3, r2
 801ba30:	1bdb      	subs	r3, r3, r7
 801ba32:	18c0      	adds	r0, r0, r3
 801ba34:	1b40      	subs	r0, r0, r5
 801ba36:	b005      	add	sp, #20
 801ba38:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801ba3a:	781c      	ldrb	r4, [r3, #0]
 801ba3c:	3301      	adds	r3, #1
 801ba3e:	700c      	strb	r4, [r1, #0]
 801ba40:	3101      	adds	r1, #1
 801ba42:	e7eb      	b.n	801ba1c <__exponent+0x4c>
 801ba44:	2330      	movs	r3, #48	@ 0x30
 801ba46:	18e4      	adds	r4, r4, r3
 801ba48:	70ab      	strb	r3, [r5, #2]
 801ba4a:	1d28      	adds	r0, r5, #4
 801ba4c:	70ec      	strb	r4, [r5, #3]
 801ba4e:	e7f1      	b.n	801ba34 <__exponent+0x64>

0801ba50 <_printf_float>:
 801ba50:	b5f0      	push	{r4, r5, r6, r7, lr}
 801ba52:	b097      	sub	sp, #92	@ 0x5c
 801ba54:	000d      	movs	r5, r1
 801ba56:	920a      	str	r2, [sp, #40]	@ 0x28
 801ba58:	9c1c      	ldr	r4, [sp, #112]	@ 0x70
 801ba5a:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ba5c:	9009      	str	r0, [sp, #36]	@ 0x24
 801ba5e:	f000 fd7d 	bl	801c55c <_localeconv_r>
 801ba62:	6803      	ldr	r3, [r0, #0]
 801ba64:	0018      	movs	r0, r3
 801ba66:	930d      	str	r3, [sp, #52]	@ 0x34
 801ba68:	f7e4 fb80 	bl	800016c <strlen>
 801ba6c:	2300      	movs	r3, #0
 801ba6e:	900f      	str	r0, [sp, #60]	@ 0x3c
 801ba70:	9314      	str	r3, [sp, #80]	@ 0x50
 801ba72:	7e2b      	ldrb	r3, [r5, #24]
 801ba74:	2207      	movs	r2, #7
 801ba76:	930c      	str	r3, [sp, #48]	@ 0x30
 801ba78:	682b      	ldr	r3, [r5, #0]
 801ba7a:	930e      	str	r3, [sp, #56]	@ 0x38
 801ba7c:	990e      	ldr	r1, [sp, #56]	@ 0x38
 801ba7e:	6823      	ldr	r3, [r4, #0]
 801ba80:	05c9      	lsls	r1, r1, #23
 801ba82:	d545      	bpl.n	801bb10 <_printf_float+0xc0>
 801ba84:	189b      	adds	r3, r3, r2
 801ba86:	4393      	bics	r3, r2
 801ba88:	001a      	movs	r2, r3
 801ba8a:	3208      	adds	r2, #8
 801ba8c:	6022      	str	r2, [r4, #0]
 801ba8e:	2201      	movs	r2, #1
 801ba90:	681e      	ldr	r6, [r3, #0]
 801ba92:	685f      	ldr	r7, [r3, #4]
 801ba94:	007b      	lsls	r3, r7, #1
 801ba96:	085b      	lsrs	r3, r3, #1
 801ba98:	9311      	str	r3, [sp, #68]	@ 0x44
 801ba9a:	9610      	str	r6, [sp, #64]	@ 0x40
 801ba9c:	64ae      	str	r6, [r5, #72]	@ 0x48
 801ba9e:	64ef      	str	r7, [r5, #76]	@ 0x4c
 801baa0:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801baa2:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801baa4:	4ba7      	ldr	r3, [pc, #668]	@ (801bd44 <_printf_float+0x2f4>)
 801baa6:	4252      	negs	r2, r2
 801baa8:	f7e7 fc2c 	bl	8003304 <__aeabi_dcmpun>
 801baac:	2800      	cmp	r0, #0
 801baae:	d131      	bne.n	801bb14 <_printf_float+0xc4>
 801bab0:	9810      	ldr	r0, [sp, #64]	@ 0x40
 801bab2:	9911      	ldr	r1, [sp, #68]	@ 0x44
 801bab4:	2201      	movs	r2, #1
 801bab6:	4ba3      	ldr	r3, [pc, #652]	@ (801bd44 <_printf_float+0x2f4>)
 801bab8:	4252      	negs	r2, r2
 801baba:	f7e4 fd09 	bl	80004d0 <__aeabi_dcmple>
 801babe:	2800      	cmp	r0, #0
 801bac0:	d128      	bne.n	801bb14 <_printf_float+0xc4>
 801bac2:	2200      	movs	r2, #0
 801bac4:	2300      	movs	r3, #0
 801bac6:	0030      	movs	r0, r6
 801bac8:	0039      	movs	r1, r7
 801baca:	f7e4 fcf7 	bl	80004bc <__aeabi_dcmplt>
 801bace:	2800      	cmp	r0, #0
 801bad0:	d003      	beq.n	801bada <_printf_float+0x8a>
 801bad2:	002b      	movs	r3, r5
 801bad4:	222d      	movs	r2, #45	@ 0x2d
 801bad6:	3343      	adds	r3, #67	@ 0x43
 801bad8:	701a      	strb	r2, [r3, #0]
 801bada:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801badc:	4f9a      	ldr	r7, [pc, #616]	@ (801bd48 <_printf_float+0x2f8>)
 801bade:	2b47      	cmp	r3, #71	@ 0x47
 801bae0:	d900      	bls.n	801bae4 <_printf_float+0x94>
 801bae2:	4f9a      	ldr	r7, [pc, #616]	@ (801bd4c <_printf_float+0x2fc>)
 801bae4:	2303      	movs	r3, #3
 801bae6:	2400      	movs	r4, #0
 801bae8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801baea:	612b      	str	r3, [r5, #16]
 801baec:	3301      	adds	r3, #1
 801baee:	439a      	bics	r2, r3
 801baf0:	602a      	str	r2, [r5, #0]
 801baf2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801baf4:	0029      	movs	r1, r5
 801baf6:	9300      	str	r3, [sp, #0]
 801baf8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801bafa:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801bafc:	aa15      	add	r2, sp, #84	@ 0x54
 801bafe:	f000 f9e5 	bl	801becc <_printf_common>
 801bb02:	3001      	adds	r0, #1
 801bb04:	d000      	beq.n	801bb08 <_printf_float+0xb8>
 801bb06:	e09f      	b.n	801bc48 <_printf_float+0x1f8>
 801bb08:	2001      	movs	r0, #1
 801bb0a:	4240      	negs	r0, r0
 801bb0c:	b017      	add	sp, #92	@ 0x5c
 801bb0e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801bb10:	3307      	adds	r3, #7
 801bb12:	e7b8      	b.n	801ba86 <_printf_float+0x36>
 801bb14:	0032      	movs	r2, r6
 801bb16:	003b      	movs	r3, r7
 801bb18:	0030      	movs	r0, r6
 801bb1a:	0039      	movs	r1, r7
 801bb1c:	f7e7 fbf2 	bl	8003304 <__aeabi_dcmpun>
 801bb20:	2800      	cmp	r0, #0
 801bb22:	d00b      	beq.n	801bb3c <_printf_float+0xec>
 801bb24:	2f00      	cmp	r7, #0
 801bb26:	da03      	bge.n	801bb30 <_printf_float+0xe0>
 801bb28:	002b      	movs	r3, r5
 801bb2a:	222d      	movs	r2, #45	@ 0x2d
 801bb2c:	3343      	adds	r3, #67	@ 0x43
 801bb2e:	701a      	strb	r2, [r3, #0]
 801bb30:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801bb32:	4f87      	ldr	r7, [pc, #540]	@ (801bd50 <_printf_float+0x300>)
 801bb34:	2b47      	cmp	r3, #71	@ 0x47
 801bb36:	d9d5      	bls.n	801bae4 <_printf_float+0x94>
 801bb38:	4f86      	ldr	r7, [pc, #536]	@ (801bd54 <_printf_float+0x304>)
 801bb3a:	e7d3      	b.n	801bae4 <_printf_float+0x94>
 801bb3c:	2220      	movs	r2, #32
 801bb3e:	9c0c      	ldr	r4, [sp, #48]	@ 0x30
 801bb40:	686b      	ldr	r3, [r5, #4]
 801bb42:	4394      	bics	r4, r2
 801bb44:	1c5a      	adds	r2, r3, #1
 801bb46:	d146      	bne.n	801bbd6 <_printf_float+0x186>
 801bb48:	3307      	adds	r3, #7
 801bb4a:	606b      	str	r3, [r5, #4]
 801bb4c:	2380      	movs	r3, #128	@ 0x80
 801bb4e:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801bb50:	00db      	lsls	r3, r3, #3
 801bb52:	4313      	orrs	r3, r2
 801bb54:	2200      	movs	r2, #0
 801bb56:	602b      	str	r3, [r5, #0]
 801bb58:	9206      	str	r2, [sp, #24]
 801bb5a:	aa14      	add	r2, sp, #80	@ 0x50
 801bb5c:	9205      	str	r2, [sp, #20]
 801bb5e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801bb60:	a90a      	add	r1, sp, #40	@ 0x28
 801bb62:	9204      	str	r2, [sp, #16]
 801bb64:	aa13      	add	r2, sp, #76	@ 0x4c
 801bb66:	9203      	str	r2, [sp, #12]
 801bb68:	2223      	movs	r2, #35	@ 0x23
 801bb6a:	1852      	adds	r2, r2, r1
 801bb6c:	9202      	str	r2, [sp, #8]
 801bb6e:	9301      	str	r3, [sp, #4]
 801bb70:	686b      	ldr	r3, [r5, #4]
 801bb72:	0032      	movs	r2, r6
 801bb74:	9300      	str	r3, [sp, #0]
 801bb76:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801bb78:	003b      	movs	r3, r7
 801bb7a:	f7ff fec3 	bl	801b904 <__cvt>
 801bb7e:	9a13      	ldr	r2, [sp, #76]	@ 0x4c
 801bb80:	0007      	movs	r7, r0
 801bb82:	2c47      	cmp	r4, #71	@ 0x47
 801bb84:	d12d      	bne.n	801bbe2 <_printf_float+0x192>
 801bb86:	1cd3      	adds	r3, r2, #3
 801bb88:	db02      	blt.n	801bb90 <_printf_float+0x140>
 801bb8a:	686b      	ldr	r3, [r5, #4]
 801bb8c:	429a      	cmp	r2, r3
 801bb8e:	dd48      	ble.n	801bc22 <_printf_float+0x1d2>
 801bb90:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801bb92:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801bb94:	3b02      	subs	r3, #2
 801bb96:	b2db      	uxtb	r3, r3
 801bb98:	930c      	str	r3, [sp, #48]	@ 0x30
 801bb9a:	0028      	movs	r0, r5
 801bb9c:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801bb9e:	3901      	subs	r1, #1
 801bba0:	3050      	adds	r0, #80	@ 0x50
 801bba2:	9113      	str	r1, [sp, #76]	@ 0x4c
 801bba4:	f7ff ff14 	bl	801b9d0 <__exponent>
 801bba8:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801bbaa:	0004      	movs	r4, r0
 801bbac:	1813      	adds	r3, r2, r0
 801bbae:	612b      	str	r3, [r5, #16]
 801bbb0:	2a01      	cmp	r2, #1
 801bbb2:	dc02      	bgt.n	801bbba <_printf_float+0x16a>
 801bbb4:	682a      	ldr	r2, [r5, #0]
 801bbb6:	07d2      	lsls	r2, r2, #31
 801bbb8:	d501      	bpl.n	801bbbe <_printf_float+0x16e>
 801bbba:	3301      	adds	r3, #1
 801bbbc:	612b      	str	r3, [r5, #16]
 801bbbe:	2323      	movs	r3, #35	@ 0x23
 801bbc0:	aa0a      	add	r2, sp, #40	@ 0x28
 801bbc2:	189b      	adds	r3, r3, r2
 801bbc4:	781b      	ldrb	r3, [r3, #0]
 801bbc6:	2b00      	cmp	r3, #0
 801bbc8:	d100      	bne.n	801bbcc <_printf_float+0x17c>
 801bbca:	e792      	b.n	801baf2 <_printf_float+0xa2>
 801bbcc:	002b      	movs	r3, r5
 801bbce:	222d      	movs	r2, #45	@ 0x2d
 801bbd0:	3343      	adds	r3, #67	@ 0x43
 801bbd2:	701a      	strb	r2, [r3, #0]
 801bbd4:	e78d      	b.n	801baf2 <_printf_float+0xa2>
 801bbd6:	2c47      	cmp	r4, #71	@ 0x47
 801bbd8:	d1b8      	bne.n	801bb4c <_printf_float+0xfc>
 801bbda:	2b00      	cmp	r3, #0
 801bbdc:	d1b6      	bne.n	801bb4c <_printf_float+0xfc>
 801bbde:	3301      	adds	r3, #1
 801bbe0:	e7b3      	b.n	801bb4a <_printf_float+0xfa>
 801bbe2:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801bbe4:	0011      	movs	r1, r2
 801bbe6:	2b65      	cmp	r3, #101	@ 0x65
 801bbe8:	d9d7      	bls.n	801bb9a <_printf_float+0x14a>
 801bbea:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801bbec:	2b66      	cmp	r3, #102	@ 0x66
 801bbee:	d11a      	bne.n	801bc26 <_printf_float+0x1d6>
 801bbf0:	686b      	ldr	r3, [r5, #4]
 801bbf2:	2a00      	cmp	r2, #0
 801bbf4:	dd09      	ble.n	801bc0a <_printf_float+0x1ba>
 801bbf6:	612a      	str	r2, [r5, #16]
 801bbf8:	2b00      	cmp	r3, #0
 801bbfa:	d102      	bne.n	801bc02 <_printf_float+0x1b2>
 801bbfc:	6829      	ldr	r1, [r5, #0]
 801bbfe:	07c9      	lsls	r1, r1, #31
 801bc00:	d50b      	bpl.n	801bc1a <_printf_float+0x1ca>
 801bc02:	3301      	adds	r3, #1
 801bc04:	189b      	adds	r3, r3, r2
 801bc06:	612b      	str	r3, [r5, #16]
 801bc08:	e007      	b.n	801bc1a <_printf_float+0x1ca>
 801bc0a:	2b00      	cmp	r3, #0
 801bc0c:	d103      	bne.n	801bc16 <_printf_float+0x1c6>
 801bc0e:	2201      	movs	r2, #1
 801bc10:	6829      	ldr	r1, [r5, #0]
 801bc12:	4211      	tst	r1, r2
 801bc14:	d000      	beq.n	801bc18 <_printf_float+0x1c8>
 801bc16:	1c9a      	adds	r2, r3, #2
 801bc18:	612a      	str	r2, [r5, #16]
 801bc1a:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801bc1c:	2400      	movs	r4, #0
 801bc1e:	65ab      	str	r3, [r5, #88]	@ 0x58
 801bc20:	e7cd      	b.n	801bbbe <_printf_float+0x16e>
 801bc22:	2367      	movs	r3, #103	@ 0x67
 801bc24:	930c      	str	r3, [sp, #48]	@ 0x30
 801bc26:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801bc28:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801bc2a:	4299      	cmp	r1, r3
 801bc2c:	db06      	blt.n	801bc3c <_printf_float+0x1ec>
 801bc2e:	682b      	ldr	r3, [r5, #0]
 801bc30:	6129      	str	r1, [r5, #16]
 801bc32:	07db      	lsls	r3, r3, #31
 801bc34:	d5f1      	bpl.n	801bc1a <_printf_float+0x1ca>
 801bc36:	3101      	adds	r1, #1
 801bc38:	6129      	str	r1, [r5, #16]
 801bc3a:	e7ee      	b.n	801bc1a <_printf_float+0x1ca>
 801bc3c:	2201      	movs	r2, #1
 801bc3e:	2900      	cmp	r1, #0
 801bc40:	dce0      	bgt.n	801bc04 <_printf_float+0x1b4>
 801bc42:	1892      	adds	r2, r2, r2
 801bc44:	1a52      	subs	r2, r2, r1
 801bc46:	e7dd      	b.n	801bc04 <_printf_float+0x1b4>
 801bc48:	682a      	ldr	r2, [r5, #0]
 801bc4a:	0553      	lsls	r3, r2, #21
 801bc4c:	d408      	bmi.n	801bc60 <_printf_float+0x210>
 801bc4e:	692b      	ldr	r3, [r5, #16]
 801bc50:	003a      	movs	r2, r7
 801bc52:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801bc54:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801bc56:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801bc58:	47a0      	blx	r4
 801bc5a:	3001      	adds	r0, #1
 801bc5c:	d129      	bne.n	801bcb2 <_printf_float+0x262>
 801bc5e:	e753      	b.n	801bb08 <_printf_float+0xb8>
 801bc60:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801bc62:	2b65      	cmp	r3, #101	@ 0x65
 801bc64:	d800      	bhi.n	801bc68 <_printf_float+0x218>
 801bc66:	e0da      	b.n	801be1e <_printf_float+0x3ce>
 801bc68:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 801bc6a:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 801bc6c:	2200      	movs	r2, #0
 801bc6e:	2300      	movs	r3, #0
 801bc70:	f7e4 fc1e 	bl	80004b0 <__aeabi_dcmpeq>
 801bc74:	2800      	cmp	r0, #0
 801bc76:	d033      	beq.n	801bce0 <_printf_float+0x290>
 801bc78:	2301      	movs	r3, #1
 801bc7a:	4a37      	ldr	r2, [pc, #220]	@ (801bd58 <_printf_float+0x308>)
 801bc7c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801bc7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801bc80:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801bc82:	47a0      	blx	r4
 801bc84:	3001      	adds	r0, #1
 801bc86:	d100      	bne.n	801bc8a <_printf_float+0x23a>
 801bc88:	e73e      	b.n	801bb08 <_printf_float+0xb8>
 801bc8a:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801bc8c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801bc8e:	42b3      	cmp	r3, r6
 801bc90:	db02      	blt.n	801bc98 <_printf_float+0x248>
 801bc92:	682b      	ldr	r3, [r5, #0]
 801bc94:	07db      	lsls	r3, r3, #31
 801bc96:	d50c      	bpl.n	801bcb2 <_printf_float+0x262>
 801bc98:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801bc9a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801bc9c:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801bc9e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801bca0:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801bca2:	47a0      	blx	r4
 801bca4:	2400      	movs	r4, #0
 801bca6:	3001      	adds	r0, #1
 801bca8:	d100      	bne.n	801bcac <_printf_float+0x25c>
 801bcaa:	e72d      	b.n	801bb08 <_printf_float+0xb8>
 801bcac:	1e73      	subs	r3, r6, #1
 801bcae:	42a3      	cmp	r3, r4
 801bcb0:	dc0a      	bgt.n	801bcc8 <_printf_float+0x278>
 801bcb2:	682b      	ldr	r3, [r5, #0]
 801bcb4:	079b      	lsls	r3, r3, #30
 801bcb6:	d500      	bpl.n	801bcba <_printf_float+0x26a>
 801bcb8:	e105      	b.n	801bec6 <_printf_float+0x476>
 801bcba:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801bcbc:	68e8      	ldr	r0, [r5, #12]
 801bcbe:	4298      	cmp	r0, r3
 801bcc0:	db00      	blt.n	801bcc4 <_printf_float+0x274>
 801bcc2:	e723      	b.n	801bb0c <_printf_float+0xbc>
 801bcc4:	0018      	movs	r0, r3
 801bcc6:	e721      	b.n	801bb0c <_printf_float+0xbc>
 801bcc8:	002a      	movs	r2, r5
 801bcca:	2301      	movs	r3, #1
 801bccc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801bcce:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801bcd0:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801bcd2:	321a      	adds	r2, #26
 801bcd4:	47b8      	blx	r7
 801bcd6:	3001      	adds	r0, #1
 801bcd8:	d100      	bne.n	801bcdc <_printf_float+0x28c>
 801bcda:	e715      	b.n	801bb08 <_printf_float+0xb8>
 801bcdc:	3401      	adds	r4, #1
 801bcde:	e7e5      	b.n	801bcac <_printf_float+0x25c>
 801bce0:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801bce2:	2b00      	cmp	r3, #0
 801bce4:	dc3a      	bgt.n	801bd5c <_printf_float+0x30c>
 801bce6:	2301      	movs	r3, #1
 801bce8:	4a1b      	ldr	r2, [pc, #108]	@ (801bd58 <_printf_float+0x308>)
 801bcea:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801bcec:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801bcee:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801bcf0:	47a0      	blx	r4
 801bcf2:	3001      	adds	r0, #1
 801bcf4:	d100      	bne.n	801bcf8 <_printf_float+0x2a8>
 801bcf6:	e707      	b.n	801bb08 <_printf_float+0xb8>
 801bcf8:	9e14      	ldr	r6, [sp, #80]	@ 0x50
 801bcfa:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801bcfc:	4333      	orrs	r3, r6
 801bcfe:	d102      	bne.n	801bd06 <_printf_float+0x2b6>
 801bd00:	682b      	ldr	r3, [r5, #0]
 801bd02:	07db      	lsls	r3, r3, #31
 801bd04:	d5d5      	bpl.n	801bcb2 <_printf_float+0x262>
 801bd06:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801bd08:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801bd0a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801bd0c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801bd0e:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801bd10:	47a0      	blx	r4
 801bd12:	2300      	movs	r3, #0
 801bd14:	3001      	adds	r0, #1
 801bd16:	d100      	bne.n	801bd1a <_printf_float+0x2ca>
 801bd18:	e6f6      	b.n	801bb08 <_printf_float+0xb8>
 801bd1a:	930c      	str	r3, [sp, #48]	@ 0x30
 801bd1c:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801bd1e:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801bd20:	425b      	negs	r3, r3
 801bd22:	4293      	cmp	r3, r2
 801bd24:	dc01      	bgt.n	801bd2a <_printf_float+0x2da>
 801bd26:	0033      	movs	r3, r6
 801bd28:	e792      	b.n	801bc50 <_printf_float+0x200>
 801bd2a:	002a      	movs	r2, r5
 801bd2c:	2301      	movs	r3, #1
 801bd2e:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801bd30:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801bd32:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801bd34:	321a      	adds	r2, #26
 801bd36:	47a0      	blx	r4
 801bd38:	3001      	adds	r0, #1
 801bd3a:	d100      	bne.n	801bd3e <_printf_float+0x2ee>
 801bd3c:	e6e4      	b.n	801bb08 <_printf_float+0xb8>
 801bd3e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801bd40:	3301      	adds	r3, #1
 801bd42:	e7ea      	b.n	801bd1a <_printf_float+0x2ca>
 801bd44:	7fefffff 	.word	0x7fefffff
 801bd48:	080210a9 	.word	0x080210a9
 801bd4c:	080210ad 	.word	0x080210ad
 801bd50:	080210b1 	.word	0x080210b1
 801bd54:	080210b5 	.word	0x080210b5
 801bd58:	080210b9 	.word	0x080210b9
 801bd5c:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801bd5e:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 801bd60:	930c      	str	r3, [sp, #48]	@ 0x30
 801bd62:	429e      	cmp	r6, r3
 801bd64:	dd00      	ble.n	801bd68 <_printf_float+0x318>
 801bd66:	001e      	movs	r6, r3
 801bd68:	2e00      	cmp	r6, #0
 801bd6a:	dc31      	bgt.n	801bdd0 <_printf_float+0x380>
 801bd6c:	43f3      	mvns	r3, r6
 801bd6e:	2400      	movs	r4, #0
 801bd70:	17db      	asrs	r3, r3, #31
 801bd72:	4033      	ands	r3, r6
 801bd74:	930e      	str	r3, [sp, #56]	@ 0x38
 801bd76:	6dae      	ldr	r6, [r5, #88]	@ 0x58
 801bd78:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801bd7a:	1af3      	subs	r3, r6, r3
 801bd7c:	42a3      	cmp	r3, r4
 801bd7e:	dc30      	bgt.n	801bde2 <_printf_float+0x392>
 801bd80:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801bd82:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801bd84:	429a      	cmp	r2, r3
 801bd86:	dc38      	bgt.n	801bdfa <_printf_float+0x3aa>
 801bd88:	682b      	ldr	r3, [r5, #0]
 801bd8a:	07db      	lsls	r3, r3, #31
 801bd8c:	d435      	bmi.n	801bdfa <_printf_float+0x3aa>
 801bd8e:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801bd90:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801bd92:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801bd94:	1b9b      	subs	r3, r3, r6
 801bd96:	1b14      	subs	r4, r2, r4
 801bd98:	429c      	cmp	r4, r3
 801bd9a:	dd00      	ble.n	801bd9e <_printf_float+0x34e>
 801bd9c:	001c      	movs	r4, r3
 801bd9e:	2c00      	cmp	r4, #0
 801bda0:	dc34      	bgt.n	801be0c <_printf_float+0x3bc>
 801bda2:	43e3      	mvns	r3, r4
 801bda4:	2600      	movs	r6, #0
 801bda6:	17db      	asrs	r3, r3, #31
 801bda8:	401c      	ands	r4, r3
 801bdaa:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801bdac:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801bdae:	1ad3      	subs	r3, r2, r3
 801bdb0:	1b1b      	subs	r3, r3, r4
 801bdb2:	42b3      	cmp	r3, r6
 801bdb4:	dc00      	bgt.n	801bdb8 <_printf_float+0x368>
 801bdb6:	e77c      	b.n	801bcb2 <_printf_float+0x262>
 801bdb8:	002a      	movs	r2, r5
 801bdba:	2301      	movs	r3, #1
 801bdbc:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801bdbe:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801bdc0:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801bdc2:	321a      	adds	r2, #26
 801bdc4:	47b8      	blx	r7
 801bdc6:	3001      	adds	r0, #1
 801bdc8:	d100      	bne.n	801bdcc <_printf_float+0x37c>
 801bdca:	e69d      	b.n	801bb08 <_printf_float+0xb8>
 801bdcc:	3601      	adds	r6, #1
 801bdce:	e7ec      	b.n	801bdaa <_printf_float+0x35a>
 801bdd0:	0033      	movs	r3, r6
 801bdd2:	003a      	movs	r2, r7
 801bdd4:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801bdd6:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801bdd8:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801bdda:	47a0      	blx	r4
 801bddc:	3001      	adds	r0, #1
 801bdde:	d1c5      	bne.n	801bd6c <_printf_float+0x31c>
 801bde0:	e692      	b.n	801bb08 <_printf_float+0xb8>
 801bde2:	002a      	movs	r2, r5
 801bde4:	2301      	movs	r3, #1
 801bde6:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801bde8:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801bdea:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801bdec:	321a      	adds	r2, #26
 801bdee:	47b0      	blx	r6
 801bdf0:	3001      	adds	r0, #1
 801bdf2:	d100      	bne.n	801bdf6 <_printf_float+0x3a6>
 801bdf4:	e688      	b.n	801bb08 <_printf_float+0xb8>
 801bdf6:	3401      	adds	r4, #1
 801bdf8:	e7bd      	b.n	801bd76 <_printf_float+0x326>
 801bdfa:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801bdfc:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801bdfe:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801be00:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801be02:	9c0b      	ldr	r4, [sp, #44]	@ 0x2c
 801be04:	47a0      	blx	r4
 801be06:	3001      	adds	r0, #1
 801be08:	d1c1      	bne.n	801bd8e <_printf_float+0x33e>
 801be0a:	e67d      	b.n	801bb08 <_printf_float+0xb8>
 801be0c:	19ba      	adds	r2, r7, r6
 801be0e:	0023      	movs	r3, r4
 801be10:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801be12:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801be14:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801be16:	47b0      	blx	r6
 801be18:	3001      	adds	r0, #1
 801be1a:	d1c2      	bne.n	801bda2 <_printf_float+0x352>
 801be1c:	e674      	b.n	801bb08 <_printf_float+0xb8>
 801be1e:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801be20:	930c      	str	r3, [sp, #48]	@ 0x30
 801be22:	2b01      	cmp	r3, #1
 801be24:	dc02      	bgt.n	801be2c <_printf_float+0x3dc>
 801be26:	2301      	movs	r3, #1
 801be28:	421a      	tst	r2, r3
 801be2a:	d039      	beq.n	801bea0 <_printf_float+0x450>
 801be2c:	2301      	movs	r3, #1
 801be2e:	003a      	movs	r2, r7
 801be30:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801be32:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801be34:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801be36:	47b0      	blx	r6
 801be38:	3001      	adds	r0, #1
 801be3a:	d100      	bne.n	801be3e <_printf_float+0x3ee>
 801be3c:	e664      	b.n	801bb08 <_printf_float+0xb8>
 801be3e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801be40:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801be42:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801be44:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801be46:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801be48:	47b0      	blx	r6
 801be4a:	3001      	adds	r0, #1
 801be4c:	d100      	bne.n	801be50 <_printf_float+0x400>
 801be4e:	e65b      	b.n	801bb08 <_printf_float+0xb8>
 801be50:	6ca8      	ldr	r0, [r5, #72]	@ 0x48
 801be52:	6ce9      	ldr	r1, [r5, #76]	@ 0x4c
 801be54:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801be56:	2200      	movs	r2, #0
 801be58:	3b01      	subs	r3, #1
 801be5a:	930c      	str	r3, [sp, #48]	@ 0x30
 801be5c:	2300      	movs	r3, #0
 801be5e:	f7e4 fb27 	bl	80004b0 <__aeabi_dcmpeq>
 801be62:	2800      	cmp	r0, #0
 801be64:	d11a      	bne.n	801be9c <_printf_float+0x44c>
 801be66:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801be68:	1c7a      	adds	r2, r7, #1
 801be6a:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801be6c:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801be6e:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801be70:	47b0      	blx	r6
 801be72:	3001      	adds	r0, #1
 801be74:	d10e      	bne.n	801be94 <_printf_float+0x444>
 801be76:	e647      	b.n	801bb08 <_printf_float+0xb8>
 801be78:	002a      	movs	r2, r5
 801be7a:	2301      	movs	r3, #1
 801be7c:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801be7e:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801be80:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801be82:	321a      	adds	r2, #26
 801be84:	47b8      	blx	r7
 801be86:	3001      	adds	r0, #1
 801be88:	d100      	bne.n	801be8c <_printf_float+0x43c>
 801be8a:	e63d      	b.n	801bb08 <_printf_float+0xb8>
 801be8c:	3601      	adds	r6, #1
 801be8e:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801be90:	429e      	cmp	r6, r3
 801be92:	dbf1      	blt.n	801be78 <_printf_float+0x428>
 801be94:	002a      	movs	r2, r5
 801be96:	0023      	movs	r3, r4
 801be98:	3250      	adds	r2, #80	@ 0x50
 801be9a:	e6da      	b.n	801bc52 <_printf_float+0x202>
 801be9c:	2600      	movs	r6, #0
 801be9e:	e7f6      	b.n	801be8e <_printf_float+0x43e>
 801bea0:	003a      	movs	r2, r7
 801bea2:	e7e2      	b.n	801be6a <_printf_float+0x41a>
 801bea4:	002a      	movs	r2, r5
 801bea6:	2301      	movs	r3, #1
 801bea8:	990a      	ldr	r1, [sp, #40]	@ 0x28
 801beaa:	9809      	ldr	r0, [sp, #36]	@ 0x24
 801beac:	9e0b      	ldr	r6, [sp, #44]	@ 0x2c
 801beae:	3219      	adds	r2, #25
 801beb0:	47b0      	blx	r6
 801beb2:	3001      	adds	r0, #1
 801beb4:	d100      	bne.n	801beb8 <_printf_float+0x468>
 801beb6:	e627      	b.n	801bb08 <_printf_float+0xb8>
 801beb8:	3401      	adds	r4, #1
 801beba:	68eb      	ldr	r3, [r5, #12]
 801bebc:	9a15      	ldr	r2, [sp, #84]	@ 0x54
 801bebe:	1a9b      	subs	r3, r3, r2
 801bec0:	42a3      	cmp	r3, r4
 801bec2:	dcef      	bgt.n	801bea4 <_printf_float+0x454>
 801bec4:	e6f9      	b.n	801bcba <_printf_float+0x26a>
 801bec6:	2400      	movs	r4, #0
 801bec8:	e7f7      	b.n	801beba <_printf_float+0x46a>
 801beca:	46c0      	nop			@ (mov r8, r8)

0801becc <_printf_common>:
 801becc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801bece:	0016      	movs	r6, r2
 801bed0:	9301      	str	r3, [sp, #4]
 801bed2:	688a      	ldr	r2, [r1, #8]
 801bed4:	690b      	ldr	r3, [r1, #16]
 801bed6:	000c      	movs	r4, r1
 801bed8:	9000      	str	r0, [sp, #0]
 801beda:	4293      	cmp	r3, r2
 801bedc:	da00      	bge.n	801bee0 <_printf_common+0x14>
 801bede:	0013      	movs	r3, r2
 801bee0:	0022      	movs	r2, r4
 801bee2:	6033      	str	r3, [r6, #0]
 801bee4:	3243      	adds	r2, #67	@ 0x43
 801bee6:	7812      	ldrb	r2, [r2, #0]
 801bee8:	2a00      	cmp	r2, #0
 801beea:	d001      	beq.n	801bef0 <_printf_common+0x24>
 801beec:	3301      	adds	r3, #1
 801beee:	6033      	str	r3, [r6, #0]
 801bef0:	6823      	ldr	r3, [r4, #0]
 801bef2:	069b      	lsls	r3, r3, #26
 801bef4:	d502      	bpl.n	801befc <_printf_common+0x30>
 801bef6:	6833      	ldr	r3, [r6, #0]
 801bef8:	3302      	adds	r3, #2
 801befa:	6033      	str	r3, [r6, #0]
 801befc:	6822      	ldr	r2, [r4, #0]
 801befe:	2306      	movs	r3, #6
 801bf00:	0015      	movs	r5, r2
 801bf02:	401d      	ands	r5, r3
 801bf04:	421a      	tst	r2, r3
 801bf06:	d027      	beq.n	801bf58 <_printf_common+0x8c>
 801bf08:	0023      	movs	r3, r4
 801bf0a:	3343      	adds	r3, #67	@ 0x43
 801bf0c:	781b      	ldrb	r3, [r3, #0]
 801bf0e:	1e5a      	subs	r2, r3, #1
 801bf10:	4193      	sbcs	r3, r2
 801bf12:	6822      	ldr	r2, [r4, #0]
 801bf14:	0692      	lsls	r2, r2, #26
 801bf16:	d430      	bmi.n	801bf7a <_printf_common+0xae>
 801bf18:	0022      	movs	r2, r4
 801bf1a:	9901      	ldr	r1, [sp, #4]
 801bf1c:	9800      	ldr	r0, [sp, #0]
 801bf1e:	9d08      	ldr	r5, [sp, #32]
 801bf20:	3243      	adds	r2, #67	@ 0x43
 801bf22:	47a8      	blx	r5
 801bf24:	3001      	adds	r0, #1
 801bf26:	d025      	beq.n	801bf74 <_printf_common+0xa8>
 801bf28:	2206      	movs	r2, #6
 801bf2a:	6823      	ldr	r3, [r4, #0]
 801bf2c:	2500      	movs	r5, #0
 801bf2e:	4013      	ands	r3, r2
 801bf30:	2b04      	cmp	r3, #4
 801bf32:	d105      	bne.n	801bf40 <_printf_common+0x74>
 801bf34:	6833      	ldr	r3, [r6, #0]
 801bf36:	68e5      	ldr	r5, [r4, #12]
 801bf38:	1aed      	subs	r5, r5, r3
 801bf3a:	43eb      	mvns	r3, r5
 801bf3c:	17db      	asrs	r3, r3, #31
 801bf3e:	401d      	ands	r5, r3
 801bf40:	68a3      	ldr	r3, [r4, #8]
 801bf42:	6922      	ldr	r2, [r4, #16]
 801bf44:	4293      	cmp	r3, r2
 801bf46:	dd01      	ble.n	801bf4c <_printf_common+0x80>
 801bf48:	1a9b      	subs	r3, r3, r2
 801bf4a:	18ed      	adds	r5, r5, r3
 801bf4c:	2600      	movs	r6, #0
 801bf4e:	42b5      	cmp	r5, r6
 801bf50:	d120      	bne.n	801bf94 <_printf_common+0xc8>
 801bf52:	2000      	movs	r0, #0
 801bf54:	e010      	b.n	801bf78 <_printf_common+0xac>
 801bf56:	3501      	adds	r5, #1
 801bf58:	68e3      	ldr	r3, [r4, #12]
 801bf5a:	6832      	ldr	r2, [r6, #0]
 801bf5c:	1a9b      	subs	r3, r3, r2
 801bf5e:	42ab      	cmp	r3, r5
 801bf60:	ddd2      	ble.n	801bf08 <_printf_common+0x3c>
 801bf62:	0022      	movs	r2, r4
 801bf64:	2301      	movs	r3, #1
 801bf66:	9901      	ldr	r1, [sp, #4]
 801bf68:	9800      	ldr	r0, [sp, #0]
 801bf6a:	9f08      	ldr	r7, [sp, #32]
 801bf6c:	3219      	adds	r2, #25
 801bf6e:	47b8      	blx	r7
 801bf70:	3001      	adds	r0, #1
 801bf72:	d1f0      	bne.n	801bf56 <_printf_common+0x8a>
 801bf74:	2001      	movs	r0, #1
 801bf76:	4240      	negs	r0, r0
 801bf78:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801bf7a:	2030      	movs	r0, #48	@ 0x30
 801bf7c:	18e1      	adds	r1, r4, r3
 801bf7e:	3143      	adds	r1, #67	@ 0x43
 801bf80:	7008      	strb	r0, [r1, #0]
 801bf82:	0021      	movs	r1, r4
 801bf84:	1c5a      	adds	r2, r3, #1
 801bf86:	3145      	adds	r1, #69	@ 0x45
 801bf88:	7809      	ldrb	r1, [r1, #0]
 801bf8a:	18a2      	adds	r2, r4, r2
 801bf8c:	3243      	adds	r2, #67	@ 0x43
 801bf8e:	3302      	adds	r3, #2
 801bf90:	7011      	strb	r1, [r2, #0]
 801bf92:	e7c1      	b.n	801bf18 <_printf_common+0x4c>
 801bf94:	0022      	movs	r2, r4
 801bf96:	2301      	movs	r3, #1
 801bf98:	9901      	ldr	r1, [sp, #4]
 801bf9a:	9800      	ldr	r0, [sp, #0]
 801bf9c:	9f08      	ldr	r7, [sp, #32]
 801bf9e:	321a      	adds	r2, #26
 801bfa0:	47b8      	blx	r7
 801bfa2:	3001      	adds	r0, #1
 801bfa4:	d0e6      	beq.n	801bf74 <_printf_common+0xa8>
 801bfa6:	3601      	adds	r6, #1
 801bfa8:	e7d1      	b.n	801bf4e <_printf_common+0x82>
	...

0801bfac <_printf_i>:
 801bfac:	b5f0      	push	{r4, r5, r6, r7, lr}
 801bfae:	b08b      	sub	sp, #44	@ 0x2c
 801bfb0:	9206      	str	r2, [sp, #24]
 801bfb2:	000a      	movs	r2, r1
 801bfb4:	3243      	adds	r2, #67	@ 0x43
 801bfb6:	9307      	str	r3, [sp, #28]
 801bfb8:	9005      	str	r0, [sp, #20]
 801bfba:	9203      	str	r2, [sp, #12]
 801bfbc:	7e0a      	ldrb	r2, [r1, #24]
 801bfbe:	000c      	movs	r4, r1
 801bfc0:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801bfc2:	2a78      	cmp	r2, #120	@ 0x78
 801bfc4:	d809      	bhi.n	801bfda <_printf_i+0x2e>
 801bfc6:	2a62      	cmp	r2, #98	@ 0x62
 801bfc8:	d80b      	bhi.n	801bfe2 <_printf_i+0x36>
 801bfca:	2a00      	cmp	r2, #0
 801bfcc:	d100      	bne.n	801bfd0 <_printf_i+0x24>
 801bfce:	e0bc      	b.n	801c14a <_printf_i+0x19e>
 801bfd0:	497b      	ldr	r1, [pc, #492]	@ (801c1c0 <_printf_i+0x214>)
 801bfd2:	9104      	str	r1, [sp, #16]
 801bfd4:	2a58      	cmp	r2, #88	@ 0x58
 801bfd6:	d100      	bne.n	801bfda <_printf_i+0x2e>
 801bfd8:	e090      	b.n	801c0fc <_printf_i+0x150>
 801bfda:	0025      	movs	r5, r4
 801bfdc:	3542      	adds	r5, #66	@ 0x42
 801bfde:	702a      	strb	r2, [r5, #0]
 801bfe0:	e022      	b.n	801c028 <_printf_i+0x7c>
 801bfe2:	0010      	movs	r0, r2
 801bfe4:	3863      	subs	r0, #99	@ 0x63
 801bfe6:	2815      	cmp	r0, #21
 801bfe8:	d8f7      	bhi.n	801bfda <_printf_i+0x2e>
 801bfea:	f7e4 f8d1 	bl	8000190 <__gnu_thumb1_case_shi>
 801bfee:	0016      	.short	0x0016
 801bff0:	fff6001f 	.word	0xfff6001f
 801bff4:	fff6fff6 	.word	0xfff6fff6
 801bff8:	001ffff6 	.word	0x001ffff6
 801bffc:	fff6fff6 	.word	0xfff6fff6
 801c000:	fff6fff6 	.word	0xfff6fff6
 801c004:	003600a1 	.word	0x003600a1
 801c008:	fff60080 	.word	0xfff60080
 801c00c:	00b2fff6 	.word	0x00b2fff6
 801c010:	0036fff6 	.word	0x0036fff6
 801c014:	fff6fff6 	.word	0xfff6fff6
 801c018:	0084      	.short	0x0084
 801c01a:	0025      	movs	r5, r4
 801c01c:	681a      	ldr	r2, [r3, #0]
 801c01e:	3542      	adds	r5, #66	@ 0x42
 801c020:	1d11      	adds	r1, r2, #4
 801c022:	6019      	str	r1, [r3, #0]
 801c024:	6813      	ldr	r3, [r2, #0]
 801c026:	702b      	strb	r3, [r5, #0]
 801c028:	2301      	movs	r3, #1
 801c02a:	e0a0      	b.n	801c16e <_printf_i+0x1c2>
 801c02c:	6818      	ldr	r0, [r3, #0]
 801c02e:	6809      	ldr	r1, [r1, #0]
 801c030:	1d02      	adds	r2, r0, #4
 801c032:	060d      	lsls	r5, r1, #24
 801c034:	d50b      	bpl.n	801c04e <_printf_i+0xa2>
 801c036:	6806      	ldr	r6, [r0, #0]
 801c038:	601a      	str	r2, [r3, #0]
 801c03a:	2e00      	cmp	r6, #0
 801c03c:	da03      	bge.n	801c046 <_printf_i+0x9a>
 801c03e:	232d      	movs	r3, #45	@ 0x2d
 801c040:	9a03      	ldr	r2, [sp, #12]
 801c042:	4276      	negs	r6, r6
 801c044:	7013      	strb	r3, [r2, #0]
 801c046:	4b5e      	ldr	r3, [pc, #376]	@ (801c1c0 <_printf_i+0x214>)
 801c048:	270a      	movs	r7, #10
 801c04a:	9304      	str	r3, [sp, #16]
 801c04c:	e018      	b.n	801c080 <_printf_i+0xd4>
 801c04e:	6806      	ldr	r6, [r0, #0]
 801c050:	601a      	str	r2, [r3, #0]
 801c052:	0649      	lsls	r1, r1, #25
 801c054:	d5f1      	bpl.n	801c03a <_printf_i+0x8e>
 801c056:	b236      	sxth	r6, r6
 801c058:	e7ef      	b.n	801c03a <_printf_i+0x8e>
 801c05a:	6808      	ldr	r0, [r1, #0]
 801c05c:	6819      	ldr	r1, [r3, #0]
 801c05e:	c940      	ldmia	r1!, {r6}
 801c060:	0605      	lsls	r5, r0, #24
 801c062:	d402      	bmi.n	801c06a <_printf_i+0xbe>
 801c064:	0640      	lsls	r0, r0, #25
 801c066:	d500      	bpl.n	801c06a <_printf_i+0xbe>
 801c068:	b2b6      	uxth	r6, r6
 801c06a:	6019      	str	r1, [r3, #0]
 801c06c:	4b54      	ldr	r3, [pc, #336]	@ (801c1c0 <_printf_i+0x214>)
 801c06e:	270a      	movs	r7, #10
 801c070:	9304      	str	r3, [sp, #16]
 801c072:	2a6f      	cmp	r2, #111	@ 0x6f
 801c074:	d100      	bne.n	801c078 <_printf_i+0xcc>
 801c076:	3f02      	subs	r7, #2
 801c078:	0023      	movs	r3, r4
 801c07a:	2200      	movs	r2, #0
 801c07c:	3343      	adds	r3, #67	@ 0x43
 801c07e:	701a      	strb	r2, [r3, #0]
 801c080:	6863      	ldr	r3, [r4, #4]
 801c082:	60a3      	str	r3, [r4, #8]
 801c084:	2b00      	cmp	r3, #0
 801c086:	db03      	blt.n	801c090 <_printf_i+0xe4>
 801c088:	2104      	movs	r1, #4
 801c08a:	6822      	ldr	r2, [r4, #0]
 801c08c:	438a      	bics	r2, r1
 801c08e:	6022      	str	r2, [r4, #0]
 801c090:	2e00      	cmp	r6, #0
 801c092:	d102      	bne.n	801c09a <_printf_i+0xee>
 801c094:	9d03      	ldr	r5, [sp, #12]
 801c096:	2b00      	cmp	r3, #0
 801c098:	d00c      	beq.n	801c0b4 <_printf_i+0x108>
 801c09a:	9d03      	ldr	r5, [sp, #12]
 801c09c:	0030      	movs	r0, r6
 801c09e:	0039      	movs	r1, r7
 801c0a0:	f7e4 f906 	bl	80002b0 <__aeabi_uidivmod>
 801c0a4:	9b04      	ldr	r3, [sp, #16]
 801c0a6:	3d01      	subs	r5, #1
 801c0a8:	5c5b      	ldrb	r3, [r3, r1]
 801c0aa:	702b      	strb	r3, [r5, #0]
 801c0ac:	0033      	movs	r3, r6
 801c0ae:	0006      	movs	r6, r0
 801c0b0:	429f      	cmp	r7, r3
 801c0b2:	d9f3      	bls.n	801c09c <_printf_i+0xf0>
 801c0b4:	2f08      	cmp	r7, #8
 801c0b6:	d109      	bne.n	801c0cc <_printf_i+0x120>
 801c0b8:	6823      	ldr	r3, [r4, #0]
 801c0ba:	07db      	lsls	r3, r3, #31
 801c0bc:	d506      	bpl.n	801c0cc <_printf_i+0x120>
 801c0be:	6862      	ldr	r2, [r4, #4]
 801c0c0:	6923      	ldr	r3, [r4, #16]
 801c0c2:	429a      	cmp	r2, r3
 801c0c4:	dc02      	bgt.n	801c0cc <_printf_i+0x120>
 801c0c6:	2330      	movs	r3, #48	@ 0x30
 801c0c8:	3d01      	subs	r5, #1
 801c0ca:	702b      	strb	r3, [r5, #0]
 801c0cc:	9b03      	ldr	r3, [sp, #12]
 801c0ce:	1b5b      	subs	r3, r3, r5
 801c0d0:	6123      	str	r3, [r4, #16]
 801c0d2:	9b07      	ldr	r3, [sp, #28]
 801c0d4:	0021      	movs	r1, r4
 801c0d6:	9300      	str	r3, [sp, #0]
 801c0d8:	9805      	ldr	r0, [sp, #20]
 801c0da:	9b06      	ldr	r3, [sp, #24]
 801c0dc:	aa09      	add	r2, sp, #36	@ 0x24
 801c0de:	f7ff fef5 	bl	801becc <_printf_common>
 801c0e2:	3001      	adds	r0, #1
 801c0e4:	d148      	bne.n	801c178 <_printf_i+0x1cc>
 801c0e6:	2001      	movs	r0, #1
 801c0e8:	4240      	negs	r0, r0
 801c0ea:	b00b      	add	sp, #44	@ 0x2c
 801c0ec:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c0ee:	2220      	movs	r2, #32
 801c0f0:	6809      	ldr	r1, [r1, #0]
 801c0f2:	430a      	orrs	r2, r1
 801c0f4:	6022      	str	r2, [r4, #0]
 801c0f6:	2278      	movs	r2, #120	@ 0x78
 801c0f8:	4932      	ldr	r1, [pc, #200]	@ (801c1c4 <_printf_i+0x218>)
 801c0fa:	9104      	str	r1, [sp, #16]
 801c0fc:	0021      	movs	r1, r4
 801c0fe:	3145      	adds	r1, #69	@ 0x45
 801c100:	700a      	strb	r2, [r1, #0]
 801c102:	6819      	ldr	r1, [r3, #0]
 801c104:	6822      	ldr	r2, [r4, #0]
 801c106:	c940      	ldmia	r1!, {r6}
 801c108:	0610      	lsls	r0, r2, #24
 801c10a:	d402      	bmi.n	801c112 <_printf_i+0x166>
 801c10c:	0650      	lsls	r0, r2, #25
 801c10e:	d500      	bpl.n	801c112 <_printf_i+0x166>
 801c110:	b2b6      	uxth	r6, r6
 801c112:	6019      	str	r1, [r3, #0]
 801c114:	07d3      	lsls	r3, r2, #31
 801c116:	d502      	bpl.n	801c11e <_printf_i+0x172>
 801c118:	2320      	movs	r3, #32
 801c11a:	4313      	orrs	r3, r2
 801c11c:	6023      	str	r3, [r4, #0]
 801c11e:	2e00      	cmp	r6, #0
 801c120:	d001      	beq.n	801c126 <_printf_i+0x17a>
 801c122:	2710      	movs	r7, #16
 801c124:	e7a8      	b.n	801c078 <_printf_i+0xcc>
 801c126:	2220      	movs	r2, #32
 801c128:	6823      	ldr	r3, [r4, #0]
 801c12a:	4393      	bics	r3, r2
 801c12c:	6023      	str	r3, [r4, #0]
 801c12e:	e7f8      	b.n	801c122 <_printf_i+0x176>
 801c130:	681a      	ldr	r2, [r3, #0]
 801c132:	680d      	ldr	r5, [r1, #0]
 801c134:	1d10      	adds	r0, r2, #4
 801c136:	6949      	ldr	r1, [r1, #20]
 801c138:	6018      	str	r0, [r3, #0]
 801c13a:	6813      	ldr	r3, [r2, #0]
 801c13c:	062e      	lsls	r6, r5, #24
 801c13e:	d501      	bpl.n	801c144 <_printf_i+0x198>
 801c140:	6019      	str	r1, [r3, #0]
 801c142:	e002      	b.n	801c14a <_printf_i+0x19e>
 801c144:	066d      	lsls	r5, r5, #25
 801c146:	d5fb      	bpl.n	801c140 <_printf_i+0x194>
 801c148:	8019      	strh	r1, [r3, #0]
 801c14a:	2300      	movs	r3, #0
 801c14c:	9d03      	ldr	r5, [sp, #12]
 801c14e:	6123      	str	r3, [r4, #16]
 801c150:	e7bf      	b.n	801c0d2 <_printf_i+0x126>
 801c152:	681a      	ldr	r2, [r3, #0]
 801c154:	1d11      	adds	r1, r2, #4
 801c156:	6019      	str	r1, [r3, #0]
 801c158:	6815      	ldr	r5, [r2, #0]
 801c15a:	2100      	movs	r1, #0
 801c15c:	0028      	movs	r0, r5
 801c15e:	6862      	ldr	r2, [r4, #4]
 801c160:	f000 fa7b 	bl	801c65a <memchr>
 801c164:	2800      	cmp	r0, #0
 801c166:	d001      	beq.n	801c16c <_printf_i+0x1c0>
 801c168:	1b40      	subs	r0, r0, r5
 801c16a:	6060      	str	r0, [r4, #4]
 801c16c:	6863      	ldr	r3, [r4, #4]
 801c16e:	6123      	str	r3, [r4, #16]
 801c170:	2300      	movs	r3, #0
 801c172:	9a03      	ldr	r2, [sp, #12]
 801c174:	7013      	strb	r3, [r2, #0]
 801c176:	e7ac      	b.n	801c0d2 <_printf_i+0x126>
 801c178:	002a      	movs	r2, r5
 801c17a:	6923      	ldr	r3, [r4, #16]
 801c17c:	9906      	ldr	r1, [sp, #24]
 801c17e:	9805      	ldr	r0, [sp, #20]
 801c180:	9d07      	ldr	r5, [sp, #28]
 801c182:	47a8      	blx	r5
 801c184:	3001      	adds	r0, #1
 801c186:	d0ae      	beq.n	801c0e6 <_printf_i+0x13a>
 801c188:	6823      	ldr	r3, [r4, #0]
 801c18a:	079b      	lsls	r3, r3, #30
 801c18c:	d415      	bmi.n	801c1ba <_printf_i+0x20e>
 801c18e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801c190:	68e0      	ldr	r0, [r4, #12]
 801c192:	4298      	cmp	r0, r3
 801c194:	daa9      	bge.n	801c0ea <_printf_i+0x13e>
 801c196:	0018      	movs	r0, r3
 801c198:	e7a7      	b.n	801c0ea <_printf_i+0x13e>
 801c19a:	0022      	movs	r2, r4
 801c19c:	2301      	movs	r3, #1
 801c19e:	9906      	ldr	r1, [sp, #24]
 801c1a0:	9805      	ldr	r0, [sp, #20]
 801c1a2:	9e07      	ldr	r6, [sp, #28]
 801c1a4:	3219      	adds	r2, #25
 801c1a6:	47b0      	blx	r6
 801c1a8:	3001      	adds	r0, #1
 801c1aa:	d09c      	beq.n	801c0e6 <_printf_i+0x13a>
 801c1ac:	3501      	adds	r5, #1
 801c1ae:	68e3      	ldr	r3, [r4, #12]
 801c1b0:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801c1b2:	1a9b      	subs	r3, r3, r2
 801c1b4:	42ab      	cmp	r3, r5
 801c1b6:	dcf0      	bgt.n	801c19a <_printf_i+0x1ee>
 801c1b8:	e7e9      	b.n	801c18e <_printf_i+0x1e2>
 801c1ba:	2500      	movs	r5, #0
 801c1bc:	e7f7      	b.n	801c1ae <_printf_i+0x202>
 801c1be:	46c0      	nop			@ (mov r8, r8)
 801c1c0:	080210bb 	.word	0x080210bb
 801c1c4:	080210cc 	.word	0x080210cc

0801c1c8 <std>:
 801c1c8:	2300      	movs	r3, #0
 801c1ca:	b510      	push	{r4, lr}
 801c1cc:	0004      	movs	r4, r0
 801c1ce:	6003      	str	r3, [r0, #0]
 801c1d0:	6043      	str	r3, [r0, #4]
 801c1d2:	6083      	str	r3, [r0, #8]
 801c1d4:	8181      	strh	r1, [r0, #12]
 801c1d6:	6643      	str	r3, [r0, #100]	@ 0x64
 801c1d8:	81c2      	strh	r2, [r0, #14]
 801c1da:	6103      	str	r3, [r0, #16]
 801c1dc:	6143      	str	r3, [r0, #20]
 801c1de:	6183      	str	r3, [r0, #24]
 801c1e0:	0019      	movs	r1, r3
 801c1e2:	2208      	movs	r2, #8
 801c1e4:	305c      	adds	r0, #92	@ 0x5c
 801c1e6:	f000 f967 	bl	801c4b8 <memset>
 801c1ea:	4b0b      	ldr	r3, [pc, #44]	@ (801c218 <std+0x50>)
 801c1ec:	6224      	str	r4, [r4, #32]
 801c1ee:	6263      	str	r3, [r4, #36]	@ 0x24
 801c1f0:	4b0a      	ldr	r3, [pc, #40]	@ (801c21c <std+0x54>)
 801c1f2:	62a3      	str	r3, [r4, #40]	@ 0x28
 801c1f4:	4b0a      	ldr	r3, [pc, #40]	@ (801c220 <std+0x58>)
 801c1f6:	62e3      	str	r3, [r4, #44]	@ 0x2c
 801c1f8:	4b0a      	ldr	r3, [pc, #40]	@ (801c224 <std+0x5c>)
 801c1fa:	6323      	str	r3, [r4, #48]	@ 0x30
 801c1fc:	4b0a      	ldr	r3, [pc, #40]	@ (801c228 <std+0x60>)
 801c1fe:	429c      	cmp	r4, r3
 801c200:	d005      	beq.n	801c20e <std+0x46>
 801c202:	4b0a      	ldr	r3, [pc, #40]	@ (801c22c <std+0x64>)
 801c204:	429c      	cmp	r4, r3
 801c206:	d002      	beq.n	801c20e <std+0x46>
 801c208:	4b09      	ldr	r3, [pc, #36]	@ (801c230 <std+0x68>)
 801c20a:	429c      	cmp	r4, r3
 801c20c:	d103      	bne.n	801c216 <std+0x4e>
 801c20e:	0020      	movs	r0, r4
 801c210:	3058      	adds	r0, #88	@ 0x58
 801c212:	f000 fa1f 	bl	801c654 <__retarget_lock_init_recursive>
 801c216:	bd10      	pop	{r4, pc}
 801c218:	0801c3b1 	.word	0x0801c3b1
 801c21c:	0801c3d9 	.word	0x0801c3d9
 801c220:	0801c411 	.word	0x0801c411
 801c224:	0801c43d 	.word	0x0801c43d
 801c228:	20003774 	.word	0x20003774
 801c22c:	200037dc 	.word	0x200037dc
 801c230:	20003844 	.word	0x20003844

0801c234 <stdio_exit_handler>:
 801c234:	b510      	push	{r4, lr}
 801c236:	4a03      	ldr	r2, [pc, #12]	@ (801c244 <stdio_exit_handler+0x10>)
 801c238:	4903      	ldr	r1, [pc, #12]	@ (801c248 <stdio_exit_handler+0x14>)
 801c23a:	4804      	ldr	r0, [pc, #16]	@ (801c24c <stdio_exit_handler+0x18>)
 801c23c:	f000 f86c 	bl	801c318 <_fwalk_sglue>
 801c240:	bd10      	pop	{r4, pc}
 801c242:	46c0      	nop			@ (mov r8, r8)
 801c244:	20000250 	.word	0x20000250
 801c248:	0801ec79 	.word	0x0801ec79
 801c24c:	200003cc 	.word	0x200003cc

0801c250 <cleanup_stdio>:
 801c250:	6841      	ldr	r1, [r0, #4]
 801c252:	4b0b      	ldr	r3, [pc, #44]	@ (801c280 <cleanup_stdio+0x30>)
 801c254:	b510      	push	{r4, lr}
 801c256:	0004      	movs	r4, r0
 801c258:	4299      	cmp	r1, r3
 801c25a:	d001      	beq.n	801c260 <cleanup_stdio+0x10>
 801c25c:	f002 fd0c 	bl	801ec78 <_fflush_r>
 801c260:	68a1      	ldr	r1, [r4, #8]
 801c262:	4b08      	ldr	r3, [pc, #32]	@ (801c284 <cleanup_stdio+0x34>)
 801c264:	4299      	cmp	r1, r3
 801c266:	d002      	beq.n	801c26e <cleanup_stdio+0x1e>
 801c268:	0020      	movs	r0, r4
 801c26a:	f002 fd05 	bl	801ec78 <_fflush_r>
 801c26e:	68e1      	ldr	r1, [r4, #12]
 801c270:	4b05      	ldr	r3, [pc, #20]	@ (801c288 <cleanup_stdio+0x38>)
 801c272:	4299      	cmp	r1, r3
 801c274:	d002      	beq.n	801c27c <cleanup_stdio+0x2c>
 801c276:	0020      	movs	r0, r4
 801c278:	f002 fcfe 	bl	801ec78 <_fflush_r>
 801c27c:	bd10      	pop	{r4, pc}
 801c27e:	46c0      	nop			@ (mov r8, r8)
 801c280:	20003774 	.word	0x20003774
 801c284:	200037dc 	.word	0x200037dc
 801c288:	20003844 	.word	0x20003844

0801c28c <global_stdio_init.part.0>:
 801c28c:	b510      	push	{r4, lr}
 801c28e:	4b09      	ldr	r3, [pc, #36]	@ (801c2b4 <global_stdio_init.part.0+0x28>)
 801c290:	4a09      	ldr	r2, [pc, #36]	@ (801c2b8 <global_stdio_init.part.0+0x2c>)
 801c292:	2104      	movs	r1, #4
 801c294:	601a      	str	r2, [r3, #0]
 801c296:	4809      	ldr	r0, [pc, #36]	@ (801c2bc <global_stdio_init.part.0+0x30>)
 801c298:	2200      	movs	r2, #0
 801c29a:	f7ff ff95 	bl	801c1c8 <std>
 801c29e:	2201      	movs	r2, #1
 801c2a0:	2109      	movs	r1, #9
 801c2a2:	4807      	ldr	r0, [pc, #28]	@ (801c2c0 <global_stdio_init.part.0+0x34>)
 801c2a4:	f7ff ff90 	bl	801c1c8 <std>
 801c2a8:	2202      	movs	r2, #2
 801c2aa:	2112      	movs	r1, #18
 801c2ac:	4805      	ldr	r0, [pc, #20]	@ (801c2c4 <global_stdio_init.part.0+0x38>)
 801c2ae:	f7ff ff8b 	bl	801c1c8 <std>
 801c2b2:	bd10      	pop	{r4, pc}
 801c2b4:	200038ac 	.word	0x200038ac
 801c2b8:	0801c235 	.word	0x0801c235
 801c2bc:	20003774 	.word	0x20003774
 801c2c0:	200037dc 	.word	0x200037dc
 801c2c4:	20003844 	.word	0x20003844

0801c2c8 <__sfp_lock_acquire>:
 801c2c8:	b510      	push	{r4, lr}
 801c2ca:	4802      	ldr	r0, [pc, #8]	@ (801c2d4 <__sfp_lock_acquire+0xc>)
 801c2cc:	f000 f9c3 	bl	801c656 <__retarget_lock_acquire_recursive>
 801c2d0:	bd10      	pop	{r4, pc}
 801c2d2:	46c0      	nop			@ (mov r8, r8)
 801c2d4:	200038b5 	.word	0x200038b5

0801c2d8 <__sfp_lock_release>:
 801c2d8:	b510      	push	{r4, lr}
 801c2da:	4802      	ldr	r0, [pc, #8]	@ (801c2e4 <__sfp_lock_release+0xc>)
 801c2dc:	f000 f9bc 	bl	801c658 <__retarget_lock_release_recursive>
 801c2e0:	bd10      	pop	{r4, pc}
 801c2e2:	46c0      	nop			@ (mov r8, r8)
 801c2e4:	200038b5 	.word	0x200038b5

0801c2e8 <__sinit>:
 801c2e8:	b510      	push	{r4, lr}
 801c2ea:	0004      	movs	r4, r0
 801c2ec:	f7ff ffec 	bl	801c2c8 <__sfp_lock_acquire>
 801c2f0:	6a23      	ldr	r3, [r4, #32]
 801c2f2:	2b00      	cmp	r3, #0
 801c2f4:	d002      	beq.n	801c2fc <__sinit+0x14>
 801c2f6:	f7ff ffef 	bl	801c2d8 <__sfp_lock_release>
 801c2fa:	bd10      	pop	{r4, pc}
 801c2fc:	4b04      	ldr	r3, [pc, #16]	@ (801c310 <__sinit+0x28>)
 801c2fe:	6223      	str	r3, [r4, #32]
 801c300:	4b04      	ldr	r3, [pc, #16]	@ (801c314 <__sinit+0x2c>)
 801c302:	681b      	ldr	r3, [r3, #0]
 801c304:	2b00      	cmp	r3, #0
 801c306:	d1f6      	bne.n	801c2f6 <__sinit+0xe>
 801c308:	f7ff ffc0 	bl	801c28c <global_stdio_init.part.0>
 801c30c:	e7f3      	b.n	801c2f6 <__sinit+0xe>
 801c30e:	46c0      	nop			@ (mov r8, r8)
 801c310:	0801c251 	.word	0x0801c251
 801c314:	200038ac 	.word	0x200038ac

0801c318 <_fwalk_sglue>:
 801c318:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801c31a:	0014      	movs	r4, r2
 801c31c:	2600      	movs	r6, #0
 801c31e:	9000      	str	r0, [sp, #0]
 801c320:	9101      	str	r1, [sp, #4]
 801c322:	68a5      	ldr	r5, [r4, #8]
 801c324:	6867      	ldr	r7, [r4, #4]
 801c326:	3f01      	subs	r7, #1
 801c328:	d504      	bpl.n	801c334 <_fwalk_sglue+0x1c>
 801c32a:	6824      	ldr	r4, [r4, #0]
 801c32c:	2c00      	cmp	r4, #0
 801c32e:	d1f8      	bne.n	801c322 <_fwalk_sglue+0xa>
 801c330:	0030      	movs	r0, r6
 801c332:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801c334:	89ab      	ldrh	r3, [r5, #12]
 801c336:	2b01      	cmp	r3, #1
 801c338:	d908      	bls.n	801c34c <_fwalk_sglue+0x34>
 801c33a:	220e      	movs	r2, #14
 801c33c:	5eab      	ldrsh	r3, [r5, r2]
 801c33e:	3301      	adds	r3, #1
 801c340:	d004      	beq.n	801c34c <_fwalk_sglue+0x34>
 801c342:	0029      	movs	r1, r5
 801c344:	9800      	ldr	r0, [sp, #0]
 801c346:	9b01      	ldr	r3, [sp, #4]
 801c348:	4798      	blx	r3
 801c34a:	4306      	orrs	r6, r0
 801c34c:	3568      	adds	r5, #104	@ 0x68
 801c34e:	e7ea      	b.n	801c326 <_fwalk_sglue+0xe>

0801c350 <iprintf>:
 801c350:	b40f      	push	{r0, r1, r2, r3}
 801c352:	b507      	push	{r0, r1, r2, lr}
 801c354:	4905      	ldr	r1, [pc, #20]	@ (801c36c <iprintf+0x1c>)
 801c356:	ab04      	add	r3, sp, #16
 801c358:	6808      	ldr	r0, [r1, #0]
 801c35a:	cb04      	ldmia	r3!, {r2}
 801c35c:	6881      	ldr	r1, [r0, #8]
 801c35e:	9301      	str	r3, [sp, #4]
 801c360:	f002 fae8 	bl	801e934 <_vfiprintf_r>
 801c364:	b003      	add	sp, #12
 801c366:	bc08      	pop	{r3}
 801c368:	b004      	add	sp, #16
 801c36a:	4718      	bx	r3
 801c36c:	200003c8 	.word	0x200003c8

0801c370 <siprintf>:
 801c370:	b40e      	push	{r1, r2, r3}
 801c372:	b500      	push	{lr}
 801c374:	490b      	ldr	r1, [pc, #44]	@ (801c3a4 <siprintf+0x34>)
 801c376:	b09c      	sub	sp, #112	@ 0x70
 801c378:	ab1d      	add	r3, sp, #116	@ 0x74
 801c37a:	9002      	str	r0, [sp, #8]
 801c37c:	9006      	str	r0, [sp, #24]
 801c37e:	9107      	str	r1, [sp, #28]
 801c380:	9104      	str	r1, [sp, #16]
 801c382:	4809      	ldr	r0, [pc, #36]	@ (801c3a8 <siprintf+0x38>)
 801c384:	4909      	ldr	r1, [pc, #36]	@ (801c3ac <siprintf+0x3c>)
 801c386:	cb04      	ldmia	r3!, {r2}
 801c388:	9105      	str	r1, [sp, #20]
 801c38a:	6800      	ldr	r0, [r0, #0]
 801c38c:	a902      	add	r1, sp, #8
 801c38e:	9301      	str	r3, [sp, #4]
 801c390:	f002 f9aa 	bl	801e6e8 <_svfiprintf_r>
 801c394:	2200      	movs	r2, #0
 801c396:	9b02      	ldr	r3, [sp, #8]
 801c398:	701a      	strb	r2, [r3, #0]
 801c39a:	b01c      	add	sp, #112	@ 0x70
 801c39c:	bc08      	pop	{r3}
 801c39e:	b003      	add	sp, #12
 801c3a0:	4718      	bx	r3
 801c3a2:	46c0      	nop			@ (mov r8, r8)
 801c3a4:	7fffffff 	.word	0x7fffffff
 801c3a8:	200003c8 	.word	0x200003c8
 801c3ac:	ffff0208 	.word	0xffff0208

0801c3b0 <__sread>:
 801c3b0:	b570      	push	{r4, r5, r6, lr}
 801c3b2:	000c      	movs	r4, r1
 801c3b4:	250e      	movs	r5, #14
 801c3b6:	5f49      	ldrsh	r1, [r1, r5]
 801c3b8:	f000 f8fa 	bl	801c5b0 <_read_r>
 801c3bc:	2800      	cmp	r0, #0
 801c3be:	db03      	blt.n	801c3c8 <__sread+0x18>
 801c3c0:	6d63      	ldr	r3, [r4, #84]	@ 0x54
 801c3c2:	181b      	adds	r3, r3, r0
 801c3c4:	6563      	str	r3, [r4, #84]	@ 0x54
 801c3c6:	bd70      	pop	{r4, r5, r6, pc}
 801c3c8:	89a3      	ldrh	r3, [r4, #12]
 801c3ca:	4a02      	ldr	r2, [pc, #8]	@ (801c3d4 <__sread+0x24>)
 801c3cc:	4013      	ands	r3, r2
 801c3ce:	81a3      	strh	r3, [r4, #12]
 801c3d0:	e7f9      	b.n	801c3c6 <__sread+0x16>
 801c3d2:	46c0      	nop			@ (mov r8, r8)
 801c3d4:	ffffefff 	.word	0xffffefff

0801c3d8 <__swrite>:
 801c3d8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801c3da:	001f      	movs	r7, r3
 801c3dc:	898b      	ldrh	r3, [r1, #12]
 801c3de:	0005      	movs	r5, r0
 801c3e0:	000c      	movs	r4, r1
 801c3e2:	0016      	movs	r6, r2
 801c3e4:	05db      	lsls	r3, r3, #23
 801c3e6:	d505      	bpl.n	801c3f4 <__swrite+0x1c>
 801c3e8:	230e      	movs	r3, #14
 801c3ea:	5ec9      	ldrsh	r1, [r1, r3]
 801c3ec:	2200      	movs	r2, #0
 801c3ee:	2302      	movs	r3, #2
 801c3f0:	f000 f8ca 	bl	801c588 <_lseek_r>
 801c3f4:	89a3      	ldrh	r3, [r4, #12]
 801c3f6:	4a05      	ldr	r2, [pc, #20]	@ (801c40c <__swrite+0x34>)
 801c3f8:	0028      	movs	r0, r5
 801c3fa:	4013      	ands	r3, r2
 801c3fc:	81a3      	strh	r3, [r4, #12]
 801c3fe:	0032      	movs	r2, r6
 801c400:	230e      	movs	r3, #14
 801c402:	5ee1      	ldrsh	r1, [r4, r3]
 801c404:	003b      	movs	r3, r7
 801c406:	f000 f8e7 	bl	801c5d8 <_write_r>
 801c40a:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801c40c:	ffffefff 	.word	0xffffefff

0801c410 <__sseek>:
 801c410:	b570      	push	{r4, r5, r6, lr}
 801c412:	000c      	movs	r4, r1
 801c414:	250e      	movs	r5, #14
 801c416:	5f49      	ldrsh	r1, [r1, r5]
 801c418:	f000 f8b6 	bl	801c588 <_lseek_r>
 801c41c:	89a3      	ldrh	r3, [r4, #12]
 801c41e:	1c42      	adds	r2, r0, #1
 801c420:	d103      	bne.n	801c42a <__sseek+0x1a>
 801c422:	4a05      	ldr	r2, [pc, #20]	@ (801c438 <__sseek+0x28>)
 801c424:	4013      	ands	r3, r2
 801c426:	81a3      	strh	r3, [r4, #12]
 801c428:	bd70      	pop	{r4, r5, r6, pc}
 801c42a:	2280      	movs	r2, #128	@ 0x80
 801c42c:	0152      	lsls	r2, r2, #5
 801c42e:	4313      	orrs	r3, r2
 801c430:	81a3      	strh	r3, [r4, #12]
 801c432:	6560      	str	r0, [r4, #84]	@ 0x54
 801c434:	e7f8      	b.n	801c428 <__sseek+0x18>
 801c436:	46c0      	nop			@ (mov r8, r8)
 801c438:	ffffefff 	.word	0xffffefff

0801c43c <__sclose>:
 801c43c:	b510      	push	{r4, lr}
 801c43e:	230e      	movs	r3, #14
 801c440:	5ec9      	ldrsh	r1, [r1, r3]
 801c442:	f000 f88f 	bl	801c564 <_close_r>
 801c446:	bd10      	pop	{r4, pc}

0801c448 <_vsniprintf_r>:
 801c448:	b530      	push	{r4, r5, lr}
 801c44a:	0014      	movs	r4, r2
 801c44c:	0005      	movs	r5, r0
 801c44e:	001a      	movs	r2, r3
 801c450:	b09b      	sub	sp, #108	@ 0x6c
 801c452:	2c00      	cmp	r4, #0
 801c454:	da05      	bge.n	801c462 <_vsniprintf_r+0x1a>
 801c456:	238b      	movs	r3, #139	@ 0x8b
 801c458:	6003      	str	r3, [r0, #0]
 801c45a:	2001      	movs	r0, #1
 801c45c:	4240      	negs	r0, r0
 801c45e:	b01b      	add	sp, #108	@ 0x6c
 801c460:	bd30      	pop	{r4, r5, pc}
 801c462:	2382      	movs	r3, #130	@ 0x82
 801c464:	4668      	mov	r0, sp
 801c466:	009b      	lsls	r3, r3, #2
 801c468:	8183      	strh	r3, [r0, #12]
 801c46a:	2300      	movs	r3, #0
 801c46c:	9100      	str	r1, [sp, #0]
 801c46e:	9104      	str	r1, [sp, #16]
 801c470:	429c      	cmp	r4, r3
 801c472:	d000      	beq.n	801c476 <_vsniprintf_r+0x2e>
 801c474:	1e63      	subs	r3, r4, #1
 801c476:	9302      	str	r3, [sp, #8]
 801c478:	9305      	str	r3, [sp, #20]
 801c47a:	2301      	movs	r3, #1
 801c47c:	4669      	mov	r1, sp
 801c47e:	425b      	negs	r3, r3
 801c480:	81cb      	strh	r3, [r1, #14]
 801c482:	0028      	movs	r0, r5
 801c484:	9b1e      	ldr	r3, [sp, #120]	@ 0x78
 801c486:	f002 f92f 	bl	801e6e8 <_svfiprintf_r>
 801c48a:	1c43      	adds	r3, r0, #1
 801c48c:	da01      	bge.n	801c492 <_vsniprintf_r+0x4a>
 801c48e:	238b      	movs	r3, #139	@ 0x8b
 801c490:	602b      	str	r3, [r5, #0]
 801c492:	2c00      	cmp	r4, #0
 801c494:	d0e3      	beq.n	801c45e <_vsniprintf_r+0x16>
 801c496:	2200      	movs	r2, #0
 801c498:	9b00      	ldr	r3, [sp, #0]
 801c49a:	701a      	strb	r2, [r3, #0]
 801c49c:	e7df      	b.n	801c45e <_vsniprintf_r+0x16>
	...

0801c4a0 <vsniprintf>:
 801c4a0:	b513      	push	{r0, r1, r4, lr}
 801c4a2:	4c04      	ldr	r4, [pc, #16]	@ (801c4b4 <vsniprintf+0x14>)
 801c4a4:	9300      	str	r3, [sp, #0]
 801c4a6:	0013      	movs	r3, r2
 801c4a8:	000a      	movs	r2, r1
 801c4aa:	0001      	movs	r1, r0
 801c4ac:	6820      	ldr	r0, [r4, #0]
 801c4ae:	f7ff ffcb 	bl	801c448 <_vsniprintf_r>
 801c4b2:	bd16      	pop	{r1, r2, r4, pc}
 801c4b4:	200003c8 	.word	0x200003c8

0801c4b8 <memset>:
 801c4b8:	0003      	movs	r3, r0
 801c4ba:	1882      	adds	r2, r0, r2
 801c4bc:	4293      	cmp	r3, r2
 801c4be:	d100      	bne.n	801c4c2 <memset+0xa>
 801c4c0:	4770      	bx	lr
 801c4c2:	7019      	strb	r1, [r3, #0]
 801c4c4:	3301      	adds	r3, #1
 801c4c6:	e7f9      	b.n	801c4bc <memset+0x4>

0801c4c8 <strchr>:
 801c4c8:	b2c9      	uxtb	r1, r1
 801c4ca:	7803      	ldrb	r3, [r0, #0]
 801c4cc:	2b00      	cmp	r3, #0
 801c4ce:	d004      	beq.n	801c4da <strchr+0x12>
 801c4d0:	428b      	cmp	r3, r1
 801c4d2:	d100      	bne.n	801c4d6 <strchr+0xe>
 801c4d4:	4770      	bx	lr
 801c4d6:	3001      	adds	r0, #1
 801c4d8:	e7f7      	b.n	801c4ca <strchr+0x2>
 801c4da:	424b      	negs	r3, r1
 801c4dc:	4159      	adcs	r1, r3
 801c4de:	4249      	negs	r1, r1
 801c4e0:	4008      	ands	r0, r1
 801c4e2:	e7f7      	b.n	801c4d4 <strchr+0xc>

0801c4e4 <strncmp>:
 801c4e4:	b530      	push	{r4, r5, lr}
 801c4e6:	0005      	movs	r5, r0
 801c4e8:	1e10      	subs	r0, r2, #0
 801c4ea:	d00b      	beq.n	801c504 <strncmp+0x20>
 801c4ec:	2400      	movs	r4, #0
 801c4ee:	3a01      	subs	r2, #1
 801c4f0:	5d2b      	ldrb	r3, [r5, r4]
 801c4f2:	5d08      	ldrb	r0, [r1, r4]
 801c4f4:	4283      	cmp	r3, r0
 801c4f6:	d104      	bne.n	801c502 <strncmp+0x1e>
 801c4f8:	42a2      	cmp	r2, r4
 801c4fa:	d002      	beq.n	801c502 <strncmp+0x1e>
 801c4fc:	3401      	adds	r4, #1
 801c4fe:	2b00      	cmp	r3, #0
 801c500:	d1f6      	bne.n	801c4f0 <strncmp+0xc>
 801c502:	1a18      	subs	r0, r3, r0
 801c504:	bd30      	pop	{r4, r5, pc}

0801c506 <strncpy>:
 801c506:	0003      	movs	r3, r0
 801c508:	b530      	push	{r4, r5, lr}
 801c50a:	001d      	movs	r5, r3
 801c50c:	2a00      	cmp	r2, #0
 801c50e:	d006      	beq.n	801c51e <strncpy+0x18>
 801c510:	780c      	ldrb	r4, [r1, #0]
 801c512:	3a01      	subs	r2, #1
 801c514:	3301      	adds	r3, #1
 801c516:	702c      	strb	r4, [r5, #0]
 801c518:	3101      	adds	r1, #1
 801c51a:	2c00      	cmp	r4, #0
 801c51c:	d1f5      	bne.n	801c50a <strncpy+0x4>
 801c51e:	2100      	movs	r1, #0
 801c520:	189a      	adds	r2, r3, r2
 801c522:	4293      	cmp	r3, r2
 801c524:	d100      	bne.n	801c528 <strncpy+0x22>
 801c526:	bd30      	pop	{r4, r5, pc}
 801c528:	7019      	strb	r1, [r3, #0]
 801c52a:	3301      	adds	r3, #1
 801c52c:	e7f9      	b.n	801c522 <strncpy+0x1c>

0801c52e <strstr>:
 801c52e:	780a      	ldrb	r2, [r1, #0]
 801c530:	b530      	push	{r4, r5, lr}
 801c532:	2a00      	cmp	r2, #0
 801c534:	d10c      	bne.n	801c550 <strstr+0x22>
 801c536:	bd30      	pop	{r4, r5, pc}
 801c538:	429a      	cmp	r2, r3
 801c53a:	d108      	bne.n	801c54e <strstr+0x20>
 801c53c:	2301      	movs	r3, #1
 801c53e:	5ccc      	ldrb	r4, [r1, r3]
 801c540:	2c00      	cmp	r4, #0
 801c542:	d0f8      	beq.n	801c536 <strstr+0x8>
 801c544:	5cc5      	ldrb	r5, [r0, r3]
 801c546:	42a5      	cmp	r5, r4
 801c548:	d101      	bne.n	801c54e <strstr+0x20>
 801c54a:	3301      	adds	r3, #1
 801c54c:	e7f7      	b.n	801c53e <strstr+0x10>
 801c54e:	3001      	adds	r0, #1
 801c550:	7803      	ldrb	r3, [r0, #0]
 801c552:	2b00      	cmp	r3, #0
 801c554:	d1f0      	bne.n	801c538 <strstr+0xa>
 801c556:	0018      	movs	r0, r3
 801c558:	e7ed      	b.n	801c536 <strstr+0x8>
	...

0801c55c <_localeconv_r>:
 801c55c:	4800      	ldr	r0, [pc, #0]	@ (801c560 <_localeconv_r+0x4>)
 801c55e:	4770      	bx	lr
 801c560:	2000034c 	.word	0x2000034c

0801c564 <_close_r>:
 801c564:	2300      	movs	r3, #0
 801c566:	b570      	push	{r4, r5, r6, lr}
 801c568:	4d06      	ldr	r5, [pc, #24]	@ (801c584 <_close_r+0x20>)
 801c56a:	0004      	movs	r4, r0
 801c56c:	0008      	movs	r0, r1
 801c56e:	602b      	str	r3, [r5, #0]
 801c570:	f7ee fc72 	bl	800ae58 <_close>
 801c574:	1c43      	adds	r3, r0, #1
 801c576:	d103      	bne.n	801c580 <_close_r+0x1c>
 801c578:	682b      	ldr	r3, [r5, #0]
 801c57a:	2b00      	cmp	r3, #0
 801c57c:	d000      	beq.n	801c580 <_close_r+0x1c>
 801c57e:	6023      	str	r3, [r4, #0]
 801c580:	bd70      	pop	{r4, r5, r6, pc}
 801c582:	46c0      	nop			@ (mov r8, r8)
 801c584:	200038b0 	.word	0x200038b0

0801c588 <_lseek_r>:
 801c588:	b570      	push	{r4, r5, r6, lr}
 801c58a:	0004      	movs	r4, r0
 801c58c:	0008      	movs	r0, r1
 801c58e:	0011      	movs	r1, r2
 801c590:	001a      	movs	r2, r3
 801c592:	2300      	movs	r3, #0
 801c594:	4d05      	ldr	r5, [pc, #20]	@ (801c5ac <_lseek_r+0x24>)
 801c596:	602b      	str	r3, [r5, #0]
 801c598:	f7ee fc7f 	bl	800ae9a <_lseek>
 801c59c:	1c43      	adds	r3, r0, #1
 801c59e:	d103      	bne.n	801c5a8 <_lseek_r+0x20>
 801c5a0:	682b      	ldr	r3, [r5, #0]
 801c5a2:	2b00      	cmp	r3, #0
 801c5a4:	d000      	beq.n	801c5a8 <_lseek_r+0x20>
 801c5a6:	6023      	str	r3, [r4, #0]
 801c5a8:	bd70      	pop	{r4, r5, r6, pc}
 801c5aa:	46c0      	nop			@ (mov r8, r8)
 801c5ac:	200038b0 	.word	0x200038b0

0801c5b0 <_read_r>:
 801c5b0:	b570      	push	{r4, r5, r6, lr}
 801c5b2:	0004      	movs	r4, r0
 801c5b4:	0008      	movs	r0, r1
 801c5b6:	0011      	movs	r1, r2
 801c5b8:	001a      	movs	r2, r3
 801c5ba:	2300      	movs	r3, #0
 801c5bc:	4d05      	ldr	r5, [pc, #20]	@ (801c5d4 <_read_r+0x24>)
 801c5be:	602b      	str	r3, [r5, #0]
 801c5c0:	f7ee fc2d 	bl	800ae1e <_read>
 801c5c4:	1c43      	adds	r3, r0, #1
 801c5c6:	d103      	bne.n	801c5d0 <_read_r+0x20>
 801c5c8:	682b      	ldr	r3, [r5, #0]
 801c5ca:	2b00      	cmp	r3, #0
 801c5cc:	d000      	beq.n	801c5d0 <_read_r+0x20>
 801c5ce:	6023      	str	r3, [r4, #0]
 801c5d0:	bd70      	pop	{r4, r5, r6, pc}
 801c5d2:	46c0      	nop			@ (mov r8, r8)
 801c5d4:	200038b0 	.word	0x200038b0

0801c5d8 <_write_r>:
 801c5d8:	b570      	push	{r4, r5, r6, lr}
 801c5da:	0004      	movs	r4, r0
 801c5dc:	0008      	movs	r0, r1
 801c5de:	0011      	movs	r1, r2
 801c5e0:	001a      	movs	r2, r3
 801c5e2:	2300      	movs	r3, #0
 801c5e4:	4d05      	ldr	r5, [pc, #20]	@ (801c5fc <_write_r+0x24>)
 801c5e6:	602b      	str	r3, [r5, #0]
 801c5e8:	f7ef f8ee 	bl	800b7c8 <_write>
 801c5ec:	1c43      	adds	r3, r0, #1
 801c5ee:	d103      	bne.n	801c5f8 <_write_r+0x20>
 801c5f0:	682b      	ldr	r3, [r5, #0]
 801c5f2:	2b00      	cmp	r3, #0
 801c5f4:	d000      	beq.n	801c5f8 <_write_r+0x20>
 801c5f6:	6023      	str	r3, [r4, #0]
 801c5f8:	bd70      	pop	{r4, r5, r6, pc}
 801c5fa:	46c0      	nop			@ (mov r8, r8)
 801c5fc:	200038b0 	.word	0x200038b0

0801c600 <__errno>:
 801c600:	4b01      	ldr	r3, [pc, #4]	@ (801c608 <__errno+0x8>)
 801c602:	6818      	ldr	r0, [r3, #0]
 801c604:	4770      	bx	lr
 801c606:	46c0      	nop			@ (mov r8, r8)
 801c608:	200003c8 	.word	0x200003c8

0801c60c <__libc_init_array>:
 801c60c:	b570      	push	{r4, r5, r6, lr}
 801c60e:	2600      	movs	r6, #0
 801c610:	4c0c      	ldr	r4, [pc, #48]	@ (801c644 <__libc_init_array+0x38>)
 801c612:	4d0d      	ldr	r5, [pc, #52]	@ (801c648 <__libc_init_array+0x3c>)
 801c614:	1b64      	subs	r4, r4, r5
 801c616:	10a4      	asrs	r4, r4, #2
 801c618:	42a6      	cmp	r6, r4
 801c61a:	d109      	bne.n	801c630 <__libc_init_array+0x24>
 801c61c:	2600      	movs	r6, #0
 801c61e:	f002 ff8b 	bl	801f538 <_init>
 801c622:	4c0a      	ldr	r4, [pc, #40]	@ (801c64c <__libc_init_array+0x40>)
 801c624:	4d0a      	ldr	r5, [pc, #40]	@ (801c650 <__libc_init_array+0x44>)
 801c626:	1b64      	subs	r4, r4, r5
 801c628:	10a4      	asrs	r4, r4, #2
 801c62a:	42a6      	cmp	r6, r4
 801c62c:	d105      	bne.n	801c63a <__libc_init_array+0x2e>
 801c62e:	bd70      	pop	{r4, r5, r6, pc}
 801c630:	00b3      	lsls	r3, r6, #2
 801c632:	58eb      	ldr	r3, [r5, r3]
 801c634:	4798      	blx	r3
 801c636:	3601      	adds	r6, #1
 801c638:	e7ee      	b.n	801c618 <__libc_init_array+0xc>
 801c63a:	00b3      	lsls	r3, r6, #2
 801c63c:	58eb      	ldr	r3, [r5, r3]
 801c63e:	4798      	blx	r3
 801c640:	3601      	adds	r6, #1
 801c642:	e7f2      	b.n	801c62a <__libc_init_array+0x1e>
 801c644:	08021398 	.word	0x08021398
 801c648:	08021398 	.word	0x08021398
 801c64c:	0802139c 	.word	0x0802139c
 801c650:	08021398 	.word	0x08021398

0801c654 <__retarget_lock_init_recursive>:
 801c654:	4770      	bx	lr

0801c656 <__retarget_lock_acquire_recursive>:
 801c656:	4770      	bx	lr

0801c658 <__retarget_lock_release_recursive>:
 801c658:	4770      	bx	lr

0801c65a <memchr>:
 801c65a:	b2c9      	uxtb	r1, r1
 801c65c:	1882      	adds	r2, r0, r2
 801c65e:	4290      	cmp	r0, r2
 801c660:	d101      	bne.n	801c666 <memchr+0xc>
 801c662:	2000      	movs	r0, #0
 801c664:	4770      	bx	lr
 801c666:	7803      	ldrb	r3, [r0, #0]
 801c668:	428b      	cmp	r3, r1
 801c66a:	d0fb      	beq.n	801c664 <memchr+0xa>
 801c66c:	3001      	adds	r0, #1
 801c66e:	e7f6      	b.n	801c65e <memchr+0x4>

0801c670 <memcpy>:
 801c670:	2300      	movs	r3, #0
 801c672:	b510      	push	{r4, lr}
 801c674:	429a      	cmp	r2, r3
 801c676:	d100      	bne.n	801c67a <memcpy+0xa>
 801c678:	bd10      	pop	{r4, pc}
 801c67a:	5ccc      	ldrb	r4, [r1, r3]
 801c67c:	54c4      	strb	r4, [r0, r3]
 801c67e:	3301      	adds	r3, #1
 801c680:	e7f8      	b.n	801c674 <memcpy+0x4>
	...

0801c684 <nan>:
 801c684:	2000      	movs	r0, #0
 801c686:	4901      	ldr	r1, [pc, #4]	@ (801c68c <nan+0x8>)
 801c688:	4770      	bx	lr
 801c68a:	46c0      	nop			@ (mov r8, r8)
 801c68c:	7ff80000 	.word	0x7ff80000

0801c690 <quorem>:
 801c690:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c692:	6902      	ldr	r2, [r0, #16]
 801c694:	690f      	ldr	r7, [r1, #16]
 801c696:	b087      	sub	sp, #28
 801c698:	0006      	movs	r6, r0
 801c69a:	000b      	movs	r3, r1
 801c69c:	2000      	movs	r0, #0
 801c69e:	9102      	str	r1, [sp, #8]
 801c6a0:	42ba      	cmp	r2, r7
 801c6a2:	db6d      	blt.n	801c780 <quorem+0xf0>
 801c6a4:	3f01      	subs	r7, #1
 801c6a6:	00bc      	lsls	r4, r7, #2
 801c6a8:	3314      	adds	r3, #20
 801c6aa:	9305      	str	r3, [sp, #20]
 801c6ac:	191b      	adds	r3, r3, r4
 801c6ae:	9303      	str	r3, [sp, #12]
 801c6b0:	0033      	movs	r3, r6
 801c6b2:	3314      	adds	r3, #20
 801c6b4:	191c      	adds	r4, r3, r4
 801c6b6:	9301      	str	r3, [sp, #4]
 801c6b8:	6823      	ldr	r3, [r4, #0]
 801c6ba:	9304      	str	r3, [sp, #16]
 801c6bc:	9b03      	ldr	r3, [sp, #12]
 801c6be:	9804      	ldr	r0, [sp, #16]
 801c6c0:	681d      	ldr	r5, [r3, #0]
 801c6c2:	3501      	adds	r5, #1
 801c6c4:	0029      	movs	r1, r5
 801c6c6:	f7e3 fd6d 	bl	80001a4 <__udivsi3>
 801c6ca:	9b04      	ldr	r3, [sp, #16]
 801c6cc:	9000      	str	r0, [sp, #0]
 801c6ce:	42ab      	cmp	r3, r5
 801c6d0:	d32b      	bcc.n	801c72a <quorem+0x9a>
 801c6d2:	9b05      	ldr	r3, [sp, #20]
 801c6d4:	9d01      	ldr	r5, [sp, #4]
 801c6d6:	469c      	mov	ip, r3
 801c6d8:	2300      	movs	r3, #0
 801c6da:	9305      	str	r3, [sp, #20]
 801c6dc:	9304      	str	r3, [sp, #16]
 801c6de:	4662      	mov	r2, ip
 801c6e0:	ca08      	ldmia	r2!, {r3}
 801c6e2:	6828      	ldr	r0, [r5, #0]
 801c6e4:	4694      	mov	ip, r2
 801c6e6:	9a00      	ldr	r2, [sp, #0]
 801c6e8:	b299      	uxth	r1, r3
 801c6ea:	4351      	muls	r1, r2
 801c6ec:	9a05      	ldr	r2, [sp, #20]
 801c6ee:	0c1b      	lsrs	r3, r3, #16
 801c6f0:	1889      	adds	r1, r1, r2
 801c6f2:	9a00      	ldr	r2, [sp, #0]
 801c6f4:	4353      	muls	r3, r2
 801c6f6:	0c0a      	lsrs	r2, r1, #16
 801c6f8:	189b      	adds	r3, r3, r2
 801c6fa:	0c1a      	lsrs	r2, r3, #16
 801c6fc:	b289      	uxth	r1, r1
 801c6fe:	9205      	str	r2, [sp, #20]
 801c700:	b282      	uxth	r2, r0
 801c702:	1a52      	subs	r2, r2, r1
 801c704:	9904      	ldr	r1, [sp, #16]
 801c706:	0c00      	lsrs	r0, r0, #16
 801c708:	1852      	adds	r2, r2, r1
 801c70a:	b29b      	uxth	r3, r3
 801c70c:	1411      	asrs	r1, r2, #16
 801c70e:	1ac3      	subs	r3, r0, r3
 801c710:	185b      	adds	r3, r3, r1
 801c712:	1419      	asrs	r1, r3, #16
 801c714:	b292      	uxth	r2, r2
 801c716:	041b      	lsls	r3, r3, #16
 801c718:	431a      	orrs	r2, r3
 801c71a:	9b03      	ldr	r3, [sp, #12]
 801c71c:	9104      	str	r1, [sp, #16]
 801c71e:	c504      	stmia	r5!, {r2}
 801c720:	4563      	cmp	r3, ip
 801c722:	d2dc      	bcs.n	801c6de <quorem+0x4e>
 801c724:	6823      	ldr	r3, [r4, #0]
 801c726:	2b00      	cmp	r3, #0
 801c728:	d030      	beq.n	801c78c <quorem+0xfc>
 801c72a:	0030      	movs	r0, r6
 801c72c:	9902      	ldr	r1, [sp, #8]
 801c72e:	f001 fd7d 	bl	801e22c <__mcmp>
 801c732:	2800      	cmp	r0, #0
 801c734:	db23      	blt.n	801c77e <quorem+0xee>
 801c736:	0034      	movs	r4, r6
 801c738:	2500      	movs	r5, #0
 801c73a:	9902      	ldr	r1, [sp, #8]
 801c73c:	3414      	adds	r4, #20
 801c73e:	3114      	adds	r1, #20
 801c740:	6823      	ldr	r3, [r4, #0]
 801c742:	c901      	ldmia	r1!, {r0}
 801c744:	9302      	str	r3, [sp, #8]
 801c746:	466b      	mov	r3, sp
 801c748:	891b      	ldrh	r3, [r3, #8]
 801c74a:	b282      	uxth	r2, r0
 801c74c:	1a9a      	subs	r2, r3, r2
 801c74e:	9b02      	ldr	r3, [sp, #8]
 801c750:	1952      	adds	r2, r2, r5
 801c752:	0c00      	lsrs	r0, r0, #16
 801c754:	0c1b      	lsrs	r3, r3, #16
 801c756:	1a1b      	subs	r3, r3, r0
 801c758:	1410      	asrs	r0, r2, #16
 801c75a:	181b      	adds	r3, r3, r0
 801c75c:	141d      	asrs	r5, r3, #16
 801c75e:	b292      	uxth	r2, r2
 801c760:	041b      	lsls	r3, r3, #16
 801c762:	431a      	orrs	r2, r3
 801c764:	9b03      	ldr	r3, [sp, #12]
 801c766:	c404      	stmia	r4!, {r2}
 801c768:	428b      	cmp	r3, r1
 801c76a:	d2e9      	bcs.n	801c740 <quorem+0xb0>
 801c76c:	9a01      	ldr	r2, [sp, #4]
 801c76e:	00bb      	lsls	r3, r7, #2
 801c770:	18d3      	adds	r3, r2, r3
 801c772:	681a      	ldr	r2, [r3, #0]
 801c774:	2a00      	cmp	r2, #0
 801c776:	d013      	beq.n	801c7a0 <quorem+0x110>
 801c778:	9b00      	ldr	r3, [sp, #0]
 801c77a:	3301      	adds	r3, #1
 801c77c:	9300      	str	r3, [sp, #0]
 801c77e:	9800      	ldr	r0, [sp, #0]
 801c780:	b007      	add	sp, #28
 801c782:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c784:	6823      	ldr	r3, [r4, #0]
 801c786:	2b00      	cmp	r3, #0
 801c788:	d104      	bne.n	801c794 <quorem+0x104>
 801c78a:	3f01      	subs	r7, #1
 801c78c:	9b01      	ldr	r3, [sp, #4]
 801c78e:	3c04      	subs	r4, #4
 801c790:	42a3      	cmp	r3, r4
 801c792:	d3f7      	bcc.n	801c784 <quorem+0xf4>
 801c794:	6137      	str	r7, [r6, #16]
 801c796:	e7c8      	b.n	801c72a <quorem+0x9a>
 801c798:	681a      	ldr	r2, [r3, #0]
 801c79a:	2a00      	cmp	r2, #0
 801c79c:	d104      	bne.n	801c7a8 <quorem+0x118>
 801c79e:	3f01      	subs	r7, #1
 801c7a0:	9a01      	ldr	r2, [sp, #4]
 801c7a2:	3b04      	subs	r3, #4
 801c7a4:	429a      	cmp	r2, r3
 801c7a6:	d3f7      	bcc.n	801c798 <quorem+0x108>
 801c7a8:	6137      	str	r7, [r6, #16]
 801c7aa:	e7e5      	b.n	801c778 <quorem+0xe8>

0801c7ac <_dtoa_r>:
 801c7ac:	b5f0      	push	{r4, r5, r6, r7, lr}
 801c7ae:	0014      	movs	r4, r2
 801c7b0:	001d      	movs	r5, r3
 801c7b2:	69c6      	ldr	r6, [r0, #28]
 801c7b4:	b09d      	sub	sp, #116	@ 0x74
 801c7b6:	940a      	str	r4, [sp, #40]	@ 0x28
 801c7b8:	950b      	str	r5, [sp, #44]	@ 0x2c
 801c7ba:	9f25      	ldr	r7, [sp, #148]	@ 0x94
 801c7bc:	9003      	str	r0, [sp, #12]
 801c7be:	2e00      	cmp	r6, #0
 801c7c0:	d10f      	bne.n	801c7e2 <_dtoa_r+0x36>
 801c7c2:	2010      	movs	r0, #16
 801c7c4:	f001 f98a 	bl	801dadc <malloc>
 801c7c8:	9b03      	ldr	r3, [sp, #12]
 801c7ca:	1e02      	subs	r2, r0, #0
 801c7cc:	61d8      	str	r0, [r3, #28]
 801c7ce:	d104      	bne.n	801c7da <_dtoa_r+0x2e>
 801c7d0:	21ef      	movs	r1, #239	@ 0xef
 801c7d2:	4bc7      	ldr	r3, [pc, #796]	@ (801caf0 <_dtoa_r+0x344>)
 801c7d4:	48c7      	ldr	r0, [pc, #796]	@ (801caf4 <_dtoa_r+0x348>)
 801c7d6:	f002 fb41 	bl	801ee5c <__assert_func>
 801c7da:	6046      	str	r6, [r0, #4]
 801c7dc:	6086      	str	r6, [r0, #8]
 801c7de:	6006      	str	r6, [r0, #0]
 801c7e0:	60c6      	str	r6, [r0, #12]
 801c7e2:	9b03      	ldr	r3, [sp, #12]
 801c7e4:	69db      	ldr	r3, [r3, #28]
 801c7e6:	6819      	ldr	r1, [r3, #0]
 801c7e8:	2900      	cmp	r1, #0
 801c7ea:	d00b      	beq.n	801c804 <_dtoa_r+0x58>
 801c7ec:	685a      	ldr	r2, [r3, #4]
 801c7ee:	2301      	movs	r3, #1
 801c7f0:	4093      	lsls	r3, r2
 801c7f2:	604a      	str	r2, [r1, #4]
 801c7f4:	608b      	str	r3, [r1, #8]
 801c7f6:	9803      	ldr	r0, [sp, #12]
 801c7f8:	f001 fa82 	bl	801dd00 <_Bfree>
 801c7fc:	2200      	movs	r2, #0
 801c7fe:	9b03      	ldr	r3, [sp, #12]
 801c800:	69db      	ldr	r3, [r3, #28]
 801c802:	601a      	str	r2, [r3, #0]
 801c804:	2d00      	cmp	r5, #0
 801c806:	da1e      	bge.n	801c846 <_dtoa_r+0x9a>
 801c808:	2301      	movs	r3, #1
 801c80a:	603b      	str	r3, [r7, #0]
 801c80c:	006b      	lsls	r3, r5, #1
 801c80e:	085b      	lsrs	r3, r3, #1
 801c810:	930b      	str	r3, [sp, #44]	@ 0x2c
 801c812:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801c814:	4bb8      	ldr	r3, [pc, #736]	@ (801caf8 <_dtoa_r+0x34c>)
 801c816:	4ab8      	ldr	r2, [pc, #736]	@ (801caf8 <_dtoa_r+0x34c>)
 801c818:	403b      	ands	r3, r7
 801c81a:	4293      	cmp	r3, r2
 801c81c:	d116      	bne.n	801c84c <_dtoa_r+0xa0>
 801c81e:	4bb7      	ldr	r3, [pc, #732]	@ (801cafc <_dtoa_r+0x350>)
 801c820:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801c822:	6013      	str	r3, [r2, #0]
 801c824:	033b      	lsls	r3, r7, #12
 801c826:	0b1b      	lsrs	r3, r3, #12
 801c828:	4323      	orrs	r3, r4
 801c82a:	d101      	bne.n	801c830 <_dtoa_r+0x84>
 801c82c:	f000 fd83 	bl	801d336 <_dtoa_r+0xb8a>
 801c830:	4bb3      	ldr	r3, [pc, #716]	@ (801cb00 <_dtoa_r+0x354>)
 801c832:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801c834:	9308      	str	r3, [sp, #32]
 801c836:	2a00      	cmp	r2, #0
 801c838:	d002      	beq.n	801c840 <_dtoa_r+0x94>
 801c83a:	4bb2      	ldr	r3, [pc, #712]	@ (801cb04 <_dtoa_r+0x358>)
 801c83c:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801c83e:	6013      	str	r3, [r2, #0]
 801c840:	9808      	ldr	r0, [sp, #32]
 801c842:	b01d      	add	sp, #116	@ 0x74
 801c844:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801c846:	2300      	movs	r3, #0
 801c848:	603b      	str	r3, [r7, #0]
 801c84a:	e7e2      	b.n	801c812 <_dtoa_r+0x66>
 801c84c:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801c84e:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801c850:	9212      	str	r2, [sp, #72]	@ 0x48
 801c852:	9313      	str	r3, [sp, #76]	@ 0x4c
 801c854:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801c856:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801c858:	2200      	movs	r2, #0
 801c85a:	2300      	movs	r3, #0
 801c85c:	f7e3 fe28 	bl	80004b0 <__aeabi_dcmpeq>
 801c860:	1e06      	subs	r6, r0, #0
 801c862:	d00b      	beq.n	801c87c <_dtoa_r+0xd0>
 801c864:	2301      	movs	r3, #1
 801c866:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801c868:	6013      	str	r3, [r2, #0]
 801c86a:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801c86c:	2b00      	cmp	r3, #0
 801c86e:	d002      	beq.n	801c876 <_dtoa_r+0xca>
 801c870:	4ba5      	ldr	r3, [pc, #660]	@ (801cb08 <_dtoa_r+0x35c>)
 801c872:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801c874:	6013      	str	r3, [r2, #0]
 801c876:	4ba5      	ldr	r3, [pc, #660]	@ (801cb0c <_dtoa_r+0x360>)
 801c878:	9308      	str	r3, [sp, #32]
 801c87a:	e7e1      	b.n	801c840 <_dtoa_r+0x94>
 801c87c:	ab1a      	add	r3, sp, #104	@ 0x68
 801c87e:	9301      	str	r3, [sp, #4]
 801c880:	ab1b      	add	r3, sp, #108	@ 0x6c
 801c882:	9300      	str	r3, [sp, #0]
 801c884:	9803      	ldr	r0, [sp, #12]
 801c886:	9a12      	ldr	r2, [sp, #72]	@ 0x48
 801c888:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801c88a:	f001 fdf1 	bl	801e470 <__d2b>
 801c88e:	007a      	lsls	r2, r7, #1
 801c890:	9005      	str	r0, [sp, #20]
 801c892:	0d52      	lsrs	r2, r2, #21
 801c894:	d100      	bne.n	801c898 <_dtoa_r+0xec>
 801c896:	e07b      	b.n	801c990 <_dtoa_r+0x1e4>
 801c898:	9b13      	ldr	r3, [sp, #76]	@ 0x4c
 801c89a:	9618      	str	r6, [sp, #96]	@ 0x60
 801c89c:	0319      	lsls	r1, r3, #12
 801c89e:	4b9c      	ldr	r3, [pc, #624]	@ (801cb10 <_dtoa_r+0x364>)
 801c8a0:	0b09      	lsrs	r1, r1, #12
 801c8a2:	430b      	orrs	r3, r1
 801c8a4:	499b      	ldr	r1, [pc, #620]	@ (801cb14 <_dtoa_r+0x368>)
 801c8a6:	1857      	adds	r7, r2, r1
 801c8a8:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801c8aa:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801c8ac:	0019      	movs	r1, r3
 801c8ae:	2200      	movs	r2, #0
 801c8b0:	4b99      	ldr	r3, [pc, #612]	@ (801cb18 <_dtoa_r+0x36c>)
 801c8b2:	f7e6 f98b 	bl	8002bcc <__aeabi_dsub>
 801c8b6:	4a99      	ldr	r2, [pc, #612]	@ (801cb1c <_dtoa_r+0x370>)
 801c8b8:	4b99      	ldr	r3, [pc, #612]	@ (801cb20 <_dtoa_r+0x374>)
 801c8ba:	f7e5 febf 	bl	800263c <__aeabi_dmul>
 801c8be:	4a99      	ldr	r2, [pc, #612]	@ (801cb24 <_dtoa_r+0x378>)
 801c8c0:	4b99      	ldr	r3, [pc, #612]	@ (801cb28 <_dtoa_r+0x37c>)
 801c8c2:	f7e4 ff13 	bl	80016ec <__aeabi_dadd>
 801c8c6:	0004      	movs	r4, r0
 801c8c8:	0038      	movs	r0, r7
 801c8ca:	000d      	movs	r5, r1
 801c8cc:	f7e6 fd78 	bl	80033c0 <__aeabi_i2d>
 801c8d0:	4a96      	ldr	r2, [pc, #600]	@ (801cb2c <_dtoa_r+0x380>)
 801c8d2:	4b97      	ldr	r3, [pc, #604]	@ (801cb30 <_dtoa_r+0x384>)
 801c8d4:	f7e5 feb2 	bl	800263c <__aeabi_dmul>
 801c8d8:	0002      	movs	r2, r0
 801c8da:	000b      	movs	r3, r1
 801c8dc:	0020      	movs	r0, r4
 801c8de:	0029      	movs	r1, r5
 801c8e0:	f7e4 ff04 	bl	80016ec <__aeabi_dadd>
 801c8e4:	0004      	movs	r4, r0
 801c8e6:	000d      	movs	r5, r1
 801c8e8:	f7e6 fd2e 	bl	8003348 <__aeabi_d2iz>
 801c8ec:	2200      	movs	r2, #0
 801c8ee:	9004      	str	r0, [sp, #16]
 801c8f0:	2300      	movs	r3, #0
 801c8f2:	0020      	movs	r0, r4
 801c8f4:	0029      	movs	r1, r5
 801c8f6:	f7e3 fde1 	bl	80004bc <__aeabi_dcmplt>
 801c8fa:	2800      	cmp	r0, #0
 801c8fc:	d00b      	beq.n	801c916 <_dtoa_r+0x16a>
 801c8fe:	9804      	ldr	r0, [sp, #16]
 801c900:	f7e6 fd5e 	bl	80033c0 <__aeabi_i2d>
 801c904:	002b      	movs	r3, r5
 801c906:	0022      	movs	r2, r4
 801c908:	f7e3 fdd2 	bl	80004b0 <__aeabi_dcmpeq>
 801c90c:	4243      	negs	r3, r0
 801c90e:	4158      	adcs	r0, r3
 801c910:	9b04      	ldr	r3, [sp, #16]
 801c912:	1a1b      	subs	r3, r3, r0
 801c914:	9304      	str	r3, [sp, #16]
 801c916:	2301      	movs	r3, #1
 801c918:	9315      	str	r3, [sp, #84]	@ 0x54
 801c91a:	9b04      	ldr	r3, [sp, #16]
 801c91c:	2b16      	cmp	r3, #22
 801c91e:	d810      	bhi.n	801c942 <_dtoa_r+0x196>
 801c920:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801c922:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801c924:	9a04      	ldr	r2, [sp, #16]
 801c926:	4b83      	ldr	r3, [pc, #524]	@ (801cb34 <_dtoa_r+0x388>)
 801c928:	00d2      	lsls	r2, r2, #3
 801c92a:	189b      	adds	r3, r3, r2
 801c92c:	681a      	ldr	r2, [r3, #0]
 801c92e:	685b      	ldr	r3, [r3, #4]
 801c930:	f7e3 fdc4 	bl	80004bc <__aeabi_dcmplt>
 801c934:	2800      	cmp	r0, #0
 801c936:	d047      	beq.n	801c9c8 <_dtoa_r+0x21c>
 801c938:	9b04      	ldr	r3, [sp, #16]
 801c93a:	3b01      	subs	r3, #1
 801c93c:	9304      	str	r3, [sp, #16]
 801c93e:	2300      	movs	r3, #0
 801c940:	9315      	str	r3, [sp, #84]	@ 0x54
 801c942:	2200      	movs	r2, #0
 801c944:	9b1a      	ldr	r3, [sp, #104]	@ 0x68
 801c946:	9206      	str	r2, [sp, #24]
 801c948:	1bdb      	subs	r3, r3, r7
 801c94a:	1e5a      	subs	r2, r3, #1
 801c94c:	d53e      	bpl.n	801c9cc <_dtoa_r+0x220>
 801c94e:	2201      	movs	r2, #1
 801c950:	1ad3      	subs	r3, r2, r3
 801c952:	9306      	str	r3, [sp, #24]
 801c954:	2300      	movs	r3, #0
 801c956:	930d      	str	r3, [sp, #52]	@ 0x34
 801c958:	9b04      	ldr	r3, [sp, #16]
 801c95a:	2b00      	cmp	r3, #0
 801c95c:	db38      	blt.n	801c9d0 <_dtoa_r+0x224>
 801c95e:	9a04      	ldr	r2, [sp, #16]
 801c960:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801c962:	4694      	mov	ip, r2
 801c964:	4463      	add	r3, ip
 801c966:	930d      	str	r3, [sp, #52]	@ 0x34
 801c968:	2300      	movs	r3, #0
 801c96a:	9214      	str	r2, [sp, #80]	@ 0x50
 801c96c:	930f      	str	r3, [sp, #60]	@ 0x3c
 801c96e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801c970:	2401      	movs	r4, #1
 801c972:	2b09      	cmp	r3, #9
 801c974:	d867      	bhi.n	801ca46 <_dtoa_r+0x29a>
 801c976:	2b05      	cmp	r3, #5
 801c978:	dd02      	ble.n	801c980 <_dtoa_r+0x1d4>
 801c97a:	2400      	movs	r4, #0
 801c97c:	3b04      	subs	r3, #4
 801c97e:	9322      	str	r3, [sp, #136]	@ 0x88
 801c980:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801c982:	1e98      	subs	r0, r3, #2
 801c984:	2803      	cmp	r0, #3
 801c986:	d867      	bhi.n	801ca58 <_dtoa_r+0x2ac>
 801c988:	f7e3 fbf8 	bl	800017c <__gnu_thumb1_case_uqi>
 801c98c:	5b383a2b 	.word	0x5b383a2b
 801c990:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801c992:	9e1a      	ldr	r6, [sp, #104]	@ 0x68
 801c994:	18f6      	adds	r6, r6, r3
 801c996:	4b68      	ldr	r3, [pc, #416]	@ (801cb38 <_dtoa_r+0x38c>)
 801c998:	18f2      	adds	r2, r6, r3
 801c99a:	2a20      	cmp	r2, #32
 801c99c:	dd0f      	ble.n	801c9be <_dtoa_r+0x212>
 801c99e:	2340      	movs	r3, #64	@ 0x40
 801c9a0:	1a9b      	subs	r3, r3, r2
 801c9a2:	409f      	lsls	r7, r3
 801c9a4:	4b65      	ldr	r3, [pc, #404]	@ (801cb3c <_dtoa_r+0x390>)
 801c9a6:	0038      	movs	r0, r7
 801c9a8:	18f3      	adds	r3, r6, r3
 801c9aa:	40dc      	lsrs	r4, r3
 801c9ac:	4320      	orrs	r0, r4
 801c9ae:	f7e6 fd35 	bl	800341c <__aeabi_ui2d>
 801c9b2:	2201      	movs	r2, #1
 801c9b4:	4b62      	ldr	r3, [pc, #392]	@ (801cb40 <_dtoa_r+0x394>)
 801c9b6:	1e77      	subs	r7, r6, #1
 801c9b8:	18cb      	adds	r3, r1, r3
 801c9ba:	9218      	str	r2, [sp, #96]	@ 0x60
 801c9bc:	e776      	b.n	801c8ac <_dtoa_r+0x100>
 801c9be:	2320      	movs	r3, #32
 801c9c0:	0020      	movs	r0, r4
 801c9c2:	1a9b      	subs	r3, r3, r2
 801c9c4:	4098      	lsls	r0, r3
 801c9c6:	e7f2      	b.n	801c9ae <_dtoa_r+0x202>
 801c9c8:	9015      	str	r0, [sp, #84]	@ 0x54
 801c9ca:	e7ba      	b.n	801c942 <_dtoa_r+0x196>
 801c9cc:	920d      	str	r2, [sp, #52]	@ 0x34
 801c9ce:	e7c3      	b.n	801c958 <_dtoa_r+0x1ac>
 801c9d0:	9b06      	ldr	r3, [sp, #24]
 801c9d2:	9a04      	ldr	r2, [sp, #16]
 801c9d4:	1a9b      	subs	r3, r3, r2
 801c9d6:	9306      	str	r3, [sp, #24]
 801c9d8:	4253      	negs	r3, r2
 801c9da:	930f      	str	r3, [sp, #60]	@ 0x3c
 801c9dc:	2300      	movs	r3, #0
 801c9de:	9314      	str	r3, [sp, #80]	@ 0x50
 801c9e0:	e7c5      	b.n	801c96e <_dtoa_r+0x1c2>
 801c9e2:	2300      	movs	r3, #0
 801c9e4:	9310      	str	r3, [sp, #64]	@ 0x40
 801c9e6:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801c9e8:	930e      	str	r3, [sp, #56]	@ 0x38
 801c9ea:	9309      	str	r3, [sp, #36]	@ 0x24
 801c9ec:	2b00      	cmp	r3, #0
 801c9ee:	dc13      	bgt.n	801ca18 <_dtoa_r+0x26c>
 801c9f0:	2301      	movs	r3, #1
 801c9f2:	001a      	movs	r2, r3
 801c9f4:	930e      	str	r3, [sp, #56]	@ 0x38
 801c9f6:	9309      	str	r3, [sp, #36]	@ 0x24
 801c9f8:	9223      	str	r2, [sp, #140]	@ 0x8c
 801c9fa:	e00d      	b.n	801ca18 <_dtoa_r+0x26c>
 801c9fc:	2301      	movs	r3, #1
 801c9fe:	e7f1      	b.n	801c9e4 <_dtoa_r+0x238>
 801ca00:	2300      	movs	r3, #0
 801ca02:	9a23      	ldr	r2, [sp, #140]	@ 0x8c
 801ca04:	9310      	str	r3, [sp, #64]	@ 0x40
 801ca06:	4694      	mov	ip, r2
 801ca08:	9b04      	ldr	r3, [sp, #16]
 801ca0a:	4463      	add	r3, ip
 801ca0c:	930e      	str	r3, [sp, #56]	@ 0x38
 801ca0e:	3301      	adds	r3, #1
 801ca10:	9309      	str	r3, [sp, #36]	@ 0x24
 801ca12:	2b00      	cmp	r3, #0
 801ca14:	dc00      	bgt.n	801ca18 <_dtoa_r+0x26c>
 801ca16:	2301      	movs	r3, #1
 801ca18:	9a03      	ldr	r2, [sp, #12]
 801ca1a:	2100      	movs	r1, #0
 801ca1c:	69d0      	ldr	r0, [r2, #28]
 801ca1e:	2204      	movs	r2, #4
 801ca20:	0015      	movs	r5, r2
 801ca22:	3514      	adds	r5, #20
 801ca24:	429d      	cmp	r5, r3
 801ca26:	d91b      	bls.n	801ca60 <_dtoa_r+0x2b4>
 801ca28:	6041      	str	r1, [r0, #4]
 801ca2a:	9803      	ldr	r0, [sp, #12]
 801ca2c:	f001 f924 	bl	801dc78 <_Balloc>
 801ca30:	9008      	str	r0, [sp, #32]
 801ca32:	2800      	cmp	r0, #0
 801ca34:	d117      	bne.n	801ca66 <_dtoa_r+0x2ba>
 801ca36:	21b0      	movs	r1, #176	@ 0xb0
 801ca38:	4b42      	ldr	r3, [pc, #264]	@ (801cb44 <_dtoa_r+0x398>)
 801ca3a:	482e      	ldr	r0, [pc, #184]	@ (801caf4 <_dtoa_r+0x348>)
 801ca3c:	9a08      	ldr	r2, [sp, #32]
 801ca3e:	31ff      	adds	r1, #255	@ 0xff
 801ca40:	e6c9      	b.n	801c7d6 <_dtoa_r+0x2a>
 801ca42:	2301      	movs	r3, #1
 801ca44:	e7dd      	b.n	801ca02 <_dtoa_r+0x256>
 801ca46:	2300      	movs	r3, #0
 801ca48:	9410      	str	r4, [sp, #64]	@ 0x40
 801ca4a:	9322      	str	r3, [sp, #136]	@ 0x88
 801ca4c:	3b01      	subs	r3, #1
 801ca4e:	930e      	str	r3, [sp, #56]	@ 0x38
 801ca50:	9309      	str	r3, [sp, #36]	@ 0x24
 801ca52:	2200      	movs	r2, #0
 801ca54:	3313      	adds	r3, #19
 801ca56:	e7cf      	b.n	801c9f8 <_dtoa_r+0x24c>
 801ca58:	2301      	movs	r3, #1
 801ca5a:	9310      	str	r3, [sp, #64]	@ 0x40
 801ca5c:	3b02      	subs	r3, #2
 801ca5e:	e7f6      	b.n	801ca4e <_dtoa_r+0x2a2>
 801ca60:	3101      	adds	r1, #1
 801ca62:	0052      	lsls	r2, r2, #1
 801ca64:	e7dc      	b.n	801ca20 <_dtoa_r+0x274>
 801ca66:	9b03      	ldr	r3, [sp, #12]
 801ca68:	9a08      	ldr	r2, [sp, #32]
 801ca6a:	69db      	ldr	r3, [r3, #28]
 801ca6c:	601a      	str	r2, [r3, #0]
 801ca6e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ca70:	2b0e      	cmp	r3, #14
 801ca72:	d900      	bls.n	801ca76 <_dtoa_r+0x2ca>
 801ca74:	e0d9      	b.n	801cc2a <_dtoa_r+0x47e>
 801ca76:	2c00      	cmp	r4, #0
 801ca78:	d100      	bne.n	801ca7c <_dtoa_r+0x2d0>
 801ca7a:	e0d6      	b.n	801cc2a <_dtoa_r+0x47e>
 801ca7c:	9b04      	ldr	r3, [sp, #16]
 801ca7e:	2b00      	cmp	r3, #0
 801ca80:	dd64      	ble.n	801cb4c <_dtoa_r+0x3a0>
 801ca82:	210f      	movs	r1, #15
 801ca84:	9a04      	ldr	r2, [sp, #16]
 801ca86:	4b2b      	ldr	r3, [pc, #172]	@ (801cb34 <_dtoa_r+0x388>)
 801ca88:	400a      	ands	r2, r1
 801ca8a:	00d2      	lsls	r2, r2, #3
 801ca8c:	189b      	adds	r3, r3, r2
 801ca8e:	681e      	ldr	r6, [r3, #0]
 801ca90:	685f      	ldr	r7, [r3, #4]
 801ca92:	9b04      	ldr	r3, [sp, #16]
 801ca94:	2402      	movs	r4, #2
 801ca96:	111d      	asrs	r5, r3, #4
 801ca98:	05db      	lsls	r3, r3, #23
 801ca9a:	d50a      	bpl.n	801cab2 <_dtoa_r+0x306>
 801ca9c:	4b2a      	ldr	r3, [pc, #168]	@ (801cb48 <_dtoa_r+0x39c>)
 801ca9e:	400d      	ands	r5, r1
 801caa0:	6a1a      	ldr	r2, [r3, #32]
 801caa2:	6a5b      	ldr	r3, [r3, #36]	@ 0x24
 801caa4:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801caa6:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801caa8:	f7e5 f984 	bl	8001db4 <__aeabi_ddiv>
 801caac:	900a      	str	r0, [sp, #40]	@ 0x28
 801caae:	910b      	str	r1, [sp, #44]	@ 0x2c
 801cab0:	3401      	adds	r4, #1
 801cab2:	4b25      	ldr	r3, [pc, #148]	@ (801cb48 <_dtoa_r+0x39c>)
 801cab4:	930c      	str	r3, [sp, #48]	@ 0x30
 801cab6:	2d00      	cmp	r5, #0
 801cab8:	d108      	bne.n	801cacc <_dtoa_r+0x320>
 801caba:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801cabc:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801cabe:	0032      	movs	r2, r6
 801cac0:	003b      	movs	r3, r7
 801cac2:	f7e5 f977 	bl	8001db4 <__aeabi_ddiv>
 801cac6:	900a      	str	r0, [sp, #40]	@ 0x28
 801cac8:	910b      	str	r1, [sp, #44]	@ 0x2c
 801caca:	e05a      	b.n	801cb82 <_dtoa_r+0x3d6>
 801cacc:	2301      	movs	r3, #1
 801cace:	421d      	tst	r5, r3
 801cad0:	d009      	beq.n	801cae6 <_dtoa_r+0x33a>
 801cad2:	18e4      	adds	r4, r4, r3
 801cad4:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801cad6:	0030      	movs	r0, r6
 801cad8:	681a      	ldr	r2, [r3, #0]
 801cada:	685b      	ldr	r3, [r3, #4]
 801cadc:	0039      	movs	r1, r7
 801cade:	f7e5 fdad 	bl	800263c <__aeabi_dmul>
 801cae2:	0006      	movs	r6, r0
 801cae4:	000f      	movs	r7, r1
 801cae6:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801cae8:	106d      	asrs	r5, r5, #1
 801caea:	3308      	adds	r3, #8
 801caec:	e7e2      	b.n	801cab4 <_dtoa_r+0x308>
 801caee:	46c0      	nop			@ (mov r8, r8)
 801caf0:	080210f2 	.word	0x080210f2
 801caf4:	08021109 	.word	0x08021109
 801caf8:	7ff00000 	.word	0x7ff00000
 801cafc:	0000270f 	.word	0x0000270f
 801cb00:	080210ee 	.word	0x080210ee
 801cb04:	080210f1 	.word	0x080210f1
 801cb08:	080210ba 	.word	0x080210ba
 801cb0c:	080210b9 	.word	0x080210b9
 801cb10:	3ff00000 	.word	0x3ff00000
 801cb14:	fffffc01 	.word	0xfffffc01
 801cb18:	3ff80000 	.word	0x3ff80000
 801cb1c:	636f4361 	.word	0x636f4361
 801cb20:	3fd287a7 	.word	0x3fd287a7
 801cb24:	8b60c8b3 	.word	0x8b60c8b3
 801cb28:	3fc68a28 	.word	0x3fc68a28
 801cb2c:	509f79fb 	.word	0x509f79fb
 801cb30:	3fd34413 	.word	0x3fd34413
 801cb34:	08021260 	.word	0x08021260
 801cb38:	00000432 	.word	0x00000432
 801cb3c:	00000412 	.word	0x00000412
 801cb40:	fe100000 	.word	0xfe100000
 801cb44:	08021161 	.word	0x08021161
 801cb48:	08021238 	.word	0x08021238
 801cb4c:	9b04      	ldr	r3, [sp, #16]
 801cb4e:	2402      	movs	r4, #2
 801cb50:	2b00      	cmp	r3, #0
 801cb52:	d016      	beq.n	801cb82 <_dtoa_r+0x3d6>
 801cb54:	9812      	ldr	r0, [sp, #72]	@ 0x48
 801cb56:	9913      	ldr	r1, [sp, #76]	@ 0x4c
 801cb58:	220f      	movs	r2, #15
 801cb5a:	425d      	negs	r5, r3
 801cb5c:	402a      	ands	r2, r5
 801cb5e:	4bd7      	ldr	r3, [pc, #860]	@ (801cebc <_dtoa_r+0x710>)
 801cb60:	00d2      	lsls	r2, r2, #3
 801cb62:	189b      	adds	r3, r3, r2
 801cb64:	681a      	ldr	r2, [r3, #0]
 801cb66:	685b      	ldr	r3, [r3, #4]
 801cb68:	f7e5 fd68 	bl	800263c <__aeabi_dmul>
 801cb6c:	2701      	movs	r7, #1
 801cb6e:	2300      	movs	r3, #0
 801cb70:	900a      	str	r0, [sp, #40]	@ 0x28
 801cb72:	910b      	str	r1, [sp, #44]	@ 0x2c
 801cb74:	4ed2      	ldr	r6, [pc, #840]	@ (801cec0 <_dtoa_r+0x714>)
 801cb76:	112d      	asrs	r5, r5, #4
 801cb78:	2d00      	cmp	r5, #0
 801cb7a:	d000      	beq.n	801cb7e <_dtoa_r+0x3d2>
 801cb7c:	e0ba      	b.n	801ccf4 <_dtoa_r+0x548>
 801cb7e:	2b00      	cmp	r3, #0
 801cb80:	d1a1      	bne.n	801cac6 <_dtoa_r+0x31a>
 801cb82:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801cb84:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801cb86:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801cb88:	2b00      	cmp	r3, #0
 801cb8a:	d100      	bne.n	801cb8e <_dtoa_r+0x3e2>
 801cb8c:	e0bd      	b.n	801cd0a <_dtoa_r+0x55e>
 801cb8e:	2200      	movs	r2, #0
 801cb90:	0030      	movs	r0, r6
 801cb92:	0039      	movs	r1, r7
 801cb94:	4bcb      	ldr	r3, [pc, #812]	@ (801cec4 <_dtoa_r+0x718>)
 801cb96:	f7e3 fc91 	bl	80004bc <__aeabi_dcmplt>
 801cb9a:	2800      	cmp	r0, #0
 801cb9c:	d100      	bne.n	801cba0 <_dtoa_r+0x3f4>
 801cb9e:	e0b4      	b.n	801cd0a <_dtoa_r+0x55e>
 801cba0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cba2:	2b00      	cmp	r3, #0
 801cba4:	d100      	bne.n	801cba8 <_dtoa_r+0x3fc>
 801cba6:	e0b0      	b.n	801cd0a <_dtoa_r+0x55e>
 801cba8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801cbaa:	2b00      	cmp	r3, #0
 801cbac:	dd39      	ble.n	801cc22 <_dtoa_r+0x476>
 801cbae:	9b04      	ldr	r3, [sp, #16]
 801cbb0:	2200      	movs	r2, #0
 801cbb2:	3b01      	subs	r3, #1
 801cbb4:	930c      	str	r3, [sp, #48]	@ 0x30
 801cbb6:	0030      	movs	r0, r6
 801cbb8:	4bc3      	ldr	r3, [pc, #780]	@ (801cec8 <_dtoa_r+0x71c>)
 801cbba:	0039      	movs	r1, r7
 801cbbc:	f7e5 fd3e 	bl	800263c <__aeabi_dmul>
 801cbc0:	900a      	str	r0, [sp, #40]	@ 0x28
 801cbc2:	910b      	str	r1, [sp, #44]	@ 0x2c
 801cbc4:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801cbc6:	3401      	adds	r4, #1
 801cbc8:	0020      	movs	r0, r4
 801cbca:	9311      	str	r3, [sp, #68]	@ 0x44
 801cbcc:	f7e6 fbf8 	bl	80033c0 <__aeabi_i2d>
 801cbd0:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801cbd2:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801cbd4:	f7e5 fd32 	bl	800263c <__aeabi_dmul>
 801cbd8:	4bbc      	ldr	r3, [pc, #752]	@ (801cecc <_dtoa_r+0x720>)
 801cbda:	2200      	movs	r2, #0
 801cbdc:	f7e4 fd86 	bl	80016ec <__aeabi_dadd>
 801cbe0:	4bbb      	ldr	r3, [pc, #748]	@ (801ced0 <_dtoa_r+0x724>)
 801cbe2:	0006      	movs	r6, r0
 801cbe4:	18cf      	adds	r7, r1, r3
 801cbe6:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801cbe8:	2b00      	cmp	r3, #0
 801cbea:	d000      	beq.n	801cbee <_dtoa_r+0x442>
 801cbec:	e091      	b.n	801cd12 <_dtoa_r+0x566>
 801cbee:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801cbf0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801cbf2:	2200      	movs	r2, #0
 801cbf4:	4bb7      	ldr	r3, [pc, #732]	@ (801ced4 <_dtoa_r+0x728>)
 801cbf6:	f7e5 ffe9 	bl	8002bcc <__aeabi_dsub>
 801cbfa:	0032      	movs	r2, r6
 801cbfc:	003b      	movs	r3, r7
 801cbfe:	0004      	movs	r4, r0
 801cc00:	000d      	movs	r5, r1
 801cc02:	f7e3 fc6f 	bl	80004e4 <__aeabi_dcmpgt>
 801cc06:	2800      	cmp	r0, #0
 801cc08:	d000      	beq.n	801cc0c <_dtoa_r+0x460>
 801cc0a:	e29d      	b.n	801d148 <_dtoa_r+0x99c>
 801cc0c:	2180      	movs	r1, #128	@ 0x80
 801cc0e:	0609      	lsls	r1, r1, #24
 801cc10:	187b      	adds	r3, r7, r1
 801cc12:	0032      	movs	r2, r6
 801cc14:	0020      	movs	r0, r4
 801cc16:	0029      	movs	r1, r5
 801cc18:	f7e3 fc50 	bl	80004bc <__aeabi_dcmplt>
 801cc1c:	2800      	cmp	r0, #0
 801cc1e:	d000      	beq.n	801cc22 <_dtoa_r+0x476>
 801cc20:	e130      	b.n	801ce84 <_dtoa_r+0x6d8>
 801cc22:	9b12      	ldr	r3, [sp, #72]	@ 0x48
 801cc24:	9c13      	ldr	r4, [sp, #76]	@ 0x4c
 801cc26:	930a      	str	r3, [sp, #40]	@ 0x28
 801cc28:	940b      	str	r4, [sp, #44]	@ 0x2c
 801cc2a:	9b1b      	ldr	r3, [sp, #108]	@ 0x6c
 801cc2c:	2b00      	cmp	r3, #0
 801cc2e:	da00      	bge.n	801cc32 <_dtoa_r+0x486>
 801cc30:	e177      	b.n	801cf22 <_dtoa_r+0x776>
 801cc32:	9a04      	ldr	r2, [sp, #16]
 801cc34:	2a0e      	cmp	r2, #14
 801cc36:	dd00      	ble.n	801cc3a <_dtoa_r+0x48e>
 801cc38:	e173      	b.n	801cf22 <_dtoa_r+0x776>
 801cc3a:	4ba0      	ldr	r3, [pc, #640]	@ (801cebc <_dtoa_r+0x710>)
 801cc3c:	00d2      	lsls	r2, r2, #3
 801cc3e:	189b      	adds	r3, r3, r2
 801cc40:	685c      	ldr	r4, [r3, #4]
 801cc42:	681b      	ldr	r3, [r3, #0]
 801cc44:	9306      	str	r3, [sp, #24]
 801cc46:	9407      	str	r4, [sp, #28]
 801cc48:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801cc4a:	2b00      	cmp	r3, #0
 801cc4c:	da03      	bge.n	801cc56 <_dtoa_r+0x4aa>
 801cc4e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cc50:	2b00      	cmp	r3, #0
 801cc52:	dc00      	bgt.n	801cc56 <_dtoa_r+0x4aa>
 801cc54:	e106      	b.n	801ce64 <_dtoa_r+0x6b8>
 801cc56:	9e0a      	ldr	r6, [sp, #40]	@ 0x28
 801cc58:	9f0b      	ldr	r7, [sp, #44]	@ 0x2c
 801cc5a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cc5c:	9d08      	ldr	r5, [sp, #32]
 801cc5e:	3b01      	subs	r3, #1
 801cc60:	195b      	adds	r3, r3, r5
 801cc62:	930a      	str	r3, [sp, #40]	@ 0x28
 801cc64:	9a06      	ldr	r2, [sp, #24]
 801cc66:	9b07      	ldr	r3, [sp, #28]
 801cc68:	0030      	movs	r0, r6
 801cc6a:	0039      	movs	r1, r7
 801cc6c:	f7e5 f8a2 	bl	8001db4 <__aeabi_ddiv>
 801cc70:	f7e6 fb6a 	bl	8003348 <__aeabi_d2iz>
 801cc74:	9009      	str	r0, [sp, #36]	@ 0x24
 801cc76:	f7e6 fba3 	bl	80033c0 <__aeabi_i2d>
 801cc7a:	9a06      	ldr	r2, [sp, #24]
 801cc7c:	9b07      	ldr	r3, [sp, #28]
 801cc7e:	f7e5 fcdd 	bl	800263c <__aeabi_dmul>
 801cc82:	0002      	movs	r2, r0
 801cc84:	000b      	movs	r3, r1
 801cc86:	0030      	movs	r0, r6
 801cc88:	0039      	movs	r1, r7
 801cc8a:	f7e5 ff9f 	bl	8002bcc <__aeabi_dsub>
 801cc8e:	002b      	movs	r3, r5
 801cc90:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801cc92:	3501      	adds	r5, #1
 801cc94:	3230      	adds	r2, #48	@ 0x30
 801cc96:	701a      	strb	r2, [r3, #0]
 801cc98:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801cc9a:	002c      	movs	r4, r5
 801cc9c:	429a      	cmp	r2, r3
 801cc9e:	d000      	beq.n	801cca2 <_dtoa_r+0x4f6>
 801cca0:	e131      	b.n	801cf06 <_dtoa_r+0x75a>
 801cca2:	0002      	movs	r2, r0
 801cca4:	000b      	movs	r3, r1
 801cca6:	f7e4 fd21 	bl	80016ec <__aeabi_dadd>
 801ccaa:	9a06      	ldr	r2, [sp, #24]
 801ccac:	9b07      	ldr	r3, [sp, #28]
 801ccae:	0006      	movs	r6, r0
 801ccb0:	000f      	movs	r7, r1
 801ccb2:	f7e3 fc17 	bl	80004e4 <__aeabi_dcmpgt>
 801ccb6:	2800      	cmp	r0, #0
 801ccb8:	d000      	beq.n	801ccbc <_dtoa_r+0x510>
 801ccba:	e10f      	b.n	801cedc <_dtoa_r+0x730>
 801ccbc:	9a06      	ldr	r2, [sp, #24]
 801ccbe:	9b07      	ldr	r3, [sp, #28]
 801ccc0:	0030      	movs	r0, r6
 801ccc2:	0039      	movs	r1, r7
 801ccc4:	f7e3 fbf4 	bl	80004b0 <__aeabi_dcmpeq>
 801ccc8:	2800      	cmp	r0, #0
 801ccca:	d003      	beq.n	801ccd4 <_dtoa_r+0x528>
 801cccc:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ccce:	07dd      	lsls	r5, r3, #31
 801ccd0:	d500      	bpl.n	801ccd4 <_dtoa_r+0x528>
 801ccd2:	e103      	b.n	801cedc <_dtoa_r+0x730>
 801ccd4:	9905      	ldr	r1, [sp, #20]
 801ccd6:	9803      	ldr	r0, [sp, #12]
 801ccd8:	f001 f812 	bl	801dd00 <_Bfree>
 801ccdc:	2300      	movs	r3, #0
 801ccde:	7023      	strb	r3, [r4, #0]
 801cce0:	9b04      	ldr	r3, [sp, #16]
 801cce2:	9a24      	ldr	r2, [sp, #144]	@ 0x90
 801cce4:	3301      	adds	r3, #1
 801cce6:	6013      	str	r3, [r2, #0]
 801cce8:	9b26      	ldr	r3, [sp, #152]	@ 0x98
 801ccea:	2b00      	cmp	r3, #0
 801ccec:	d100      	bne.n	801ccf0 <_dtoa_r+0x544>
 801ccee:	e5a7      	b.n	801c840 <_dtoa_r+0x94>
 801ccf0:	601c      	str	r4, [r3, #0]
 801ccf2:	e5a5      	b.n	801c840 <_dtoa_r+0x94>
 801ccf4:	423d      	tst	r5, r7
 801ccf6:	d005      	beq.n	801cd04 <_dtoa_r+0x558>
 801ccf8:	6832      	ldr	r2, [r6, #0]
 801ccfa:	6873      	ldr	r3, [r6, #4]
 801ccfc:	f7e5 fc9e 	bl	800263c <__aeabi_dmul>
 801cd00:	003b      	movs	r3, r7
 801cd02:	3401      	adds	r4, #1
 801cd04:	106d      	asrs	r5, r5, #1
 801cd06:	3608      	adds	r6, #8
 801cd08:	e736      	b.n	801cb78 <_dtoa_r+0x3cc>
 801cd0a:	9b04      	ldr	r3, [sp, #16]
 801cd0c:	930c      	str	r3, [sp, #48]	@ 0x30
 801cd0e:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801cd10:	e75a      	b.n	801cbc8 <_dtoa_r+0x41c>
 801cd12:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801cd14:	4b69      	ldr	r3, [pc, #420]	@ (801cebc <_dtoa_r+0x710>)
 801cd16:	3a01      	subs	r2, #1
 801cd18:	00d2      	lsls	r2, r2, #3
 801cd1a:	9910      	ldr	r1, [sp, #64]	@ 0x40
 801cd1c:	189b      	adds	r3, r3, r2
 801cd1e:	681a      	ldr	r2, [r3, #0]
 801cd20:	685b      	ldr	r3, [r3, #4]
 801cd22:	2900      	cmp	r1, #0
 801cd24:	d04c      	beq.n	801cdc0 <_dtoa_r+0x614>
 801cd26:	2000      	movs	r0, #0
 801cd28:	496b      	ldr	r1, [pc, #428]	@ (801ced8 <_dtoa_r+0x72c>)
 801cd2a:	f7e5 f843 	bl	8001db4 <__aeabi_ddiv>
 801cd2e:	0032      	movs	r2, r6
 801cd30:	003b      	movs	r3, r7
 801cd32:	f7e5 ff4b 	bl	8002bcc <__aeabi_dsub>
 801cd36:	9a08      	ldr	r2, [sp, #32]
 801cd38:	0006      	movs	r6, r0
 801cd3a:	4694      	mov	ip, r2
 801cd3c:	000f      	movs	r7, r1
 801cd3e:	9b08      	ldr	r3, [sp, #32]
 801cd40:	9316      	str	r3, [sp, #88]	@ 0x58
 801cd42:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801cd44:	4463      	add	r3, ip
 801cd46:	9311      	str	r3, [sp, #68]	@ 0x44
 801cd48:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801cd4a:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801cd4c:	f7e6 fafc 	bl	8003348 <__aeabi_d2iz>
 801cd50:	0005      	movs	r5, r0
 801cd52:	f7e6 fb35 	bl	80033c0 <__aeabi_i2d>
 801cd56:	0002      	movs	r2, r0
 801cd58:	000b      	movs	r3, r1
 801cd5a:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801cd5c:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801cd5e:	f7e5 ff35 	bl	8002bcc <__aeabi_dsub>
 801cd62:	9b16      	ldr	r3, [sp, #88]	@ 0x58
 801cd64:	3530      	adds	r5, #48	@ 0x30
 801cd66:	1c5c      	adds	r4, r3, #1
 801cd68:	701d      	strb	r5, [r3, #0]
 801cd6a:	0032      	movs	r2, r6
 801cd6c:	003b      	movs	r3, r7
 801cd6e:	900a      	str	r0, [sp, #40]	@ 0x28
 801cd70:	910b      	str	r1, [sp, #44]	@ 0x2c
 801cd72:	f7e3 fba3 	bl	80004bc <__aeabi_dcmplt>
 801cd76:	2800      	cmp	r0, #0
 801cd78:	d16a      	bne.n	801ce50 <_dtoa_r+0x6a4>
 801cd7a:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801cd7c:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801cd7e:	2000      	movs	r0, #0
 801cd80:	4950      	ldr	r1, [pc, #320]	@ (801cec4 <_dtoa_r+0x718>)
 801cd82:	f7e5 ff23 	bl	8002bcc <__aeabi_dsub>
 801cd86:	0032      	movs	r2, r6
 801cd88:	003b      	movs	r3, r7
 801cd8a:	f7e3 fb97 	bl	80004bc <__aeabi_dcmplt>
 801cd8e:	2800      	cmp	r0, #0
 801cd90:	d000      	beq.n	801cd94 <_dtoa_r+0x5e8>
 801cd92:	e0a5      	b.n	801cee0 <_dtoa_r+0x734>
 801cd94:	9b11      	ldr	r3, [sp, #68]	@ 0x44
 801cd96:	42a3      	cmp	r3, r4
 801cd98:	d100      	bne.n	801cd9c <_dtoa_r+0x5f0>
 801cd9a:	e742      	b.n	801cc22 <_dtoa_r+0x476>
 801cd9c:	2200      	movs	r2, #0
 801cd9e:	0030      	movs	r0, r6
 801cda0:	0039      	movs	r1, r7
 801cda2:	4b49      	ldr	r3, [pc, #292]	@ (801cec8 <_dtoa_r+0x71c>)
 801cda4:	f7e5 fc4a 	bl	800263c <__aeabi_dmul>
 801cda8:	2200      	movs	r2, #0
 801cdaa:	0006      	movs	r6, r0
 801cdac:	000f      	movs	r7, r1
 801cdae:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801cdb0:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801cdb2:	4b45      	ldr	r3, [pc, #276]	@ (801cec8 <_dtoa_r+0x71c>)
 801cdb4:	f7e5 fc42 	bl	800263c <__aeabi_dmul>
 801cdb8:	9416      	str	r4, [sp, #88]	@ 0x58
 801cdba:	900a      	str	r0, [sp, #40]	@ 0x28
 801cdbc:	910b      	str	r1, [sp, #44]	@ 0x2c
 801cdbe:	e7c3      	b.n	801cd48 <_dtoa_r+0x59c>
 801cdc0:	0030      	movs	r0, r6
 801cdc2:	0039      	movs	r1, r7
 801cdc4:	f7e5 fc3a 	bl	800263c <__aeabi_dmul>
 801cdc8:	9d08      	ldr	r5, [sp, #32]
 801cdca:	9a11      	ldr	r2, [sp, #68]	@ 0x44
 801cdcc:	002b      	movs	r3, r5
 801cdce:	4694      	mov	ip, r2
 801cdd0:	9016      	str	r0, [sp, #88]	@ 0x58
 801cdd2:	9117      	str	r1, [sp, #92]	@ 0x5c
 801cdd4:	4463      	add	r3, ip
 801cdd6:	9319      	str	r3, [sp, #100]	@ 0x64
 801cdd8:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801cdda:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801cddc:	f7e6 fab4 	bl	8003348 <__aeabi_d2iz>
 801cde0:	0004      	movs	r4, r0
 801cde2:	f7e6 faed 	bl	80033c0 <__aeabi_i2d>
 801cde6:	000b      	movs	r3, r1
 801cde8:	0002      	movs	r2, r0
 801cdea:	980a      	ldr	r0, [sp, #40]	@ 0x28
 801cdec:	990b      	ldr	r1, [sp, #44]	@ 0x2c
 801cdee:	f7e5 feed 	bl	8002bcc <__aeabi_dsub>
 801cdf2:	3430      	adds	r4, #48	@ 0x30
 801cdf4:	9b19      	ldr	r3, [sp, #100]	@ 0x64
 801cdf6:	702c      	strb	r4, [r5, #0]
 801cdf8:	3501      	adds	r5, #1
 801cdfa:	0006      	movs	r6, r0
 801cdfc:	000f      	movs	r7, r1
 801cdfe:	42ab      	cmp	r3, r5
 801ce00:	d129      	bne.n	801ce56 <_dtoa_r+0x6aa>
 801ce02:	9816      	ldr	r0, [sp, #88]	@ 0x58
 801ce04:	9917      	ldr	r1, [sp, #92]	@ 0x5c
 801ce06:	9b08      	ldr	r3, [sp, #32]
 801ce08:	9c11      	ldr	r4, [sp, #68]	@ 0x44
 801ce0a:	469c      	mov	ip, r3
 801ce0c:	2200      	movs	r2, #0
 801ce0e:	4b32      	ldr	r3, [pc, #200]	@ (801ced8 <_dtoa_r+0x72c>)
 801ce10:	4464      	add	r4, ip
 801ce12:	f7e4 fc6b 	bl	80016ec <__aeabi_dadd>
 801ce16:	0002      	movs	r2, r0
 801ce18:	000b      	movs	r3, r1
 801ce1a:	0030      	movs	r0, r6
 801ce1c:	0039      	movs	r1, r7
 801ce1e:	f7e3 fb61 	bl	80004e4 <__aeabi_dcmpgt>
 801ce22:	2800      	cmp	r0, #0
 801ce24:	d15c      	bne.n	801cee0 <_dtoa_r+0x734>
 801ce26:	9a16      	ldr	r2, [sp, #88]	@ 0x58
 801ce28:	9b17      	ldr	r3, [sp, #92]	@ 0x5c
 801ce2a:	2000      	movs	r0, #0
 801ce2c:	492a      	ldr	r1, [pc, #168]	@ (801ced8 <_dtoa_r+0x72c>)
 801ce2e:	f7e5 fecd 	bl	8002bcc <__aeabi_dsub>
 801ce32:	0002      	movs	r2, r0
 801ce34:	000b      	movs	r3, r1
 801ce36:	0030      	movs	r0, r6
 801ce38:	0039      	movs	r1, r7
 801ce3a:	f7e3 fb3f 	bl	80004bc <__aeabi_dcmplt>
 801ce3e:	2800      	cmp	r0, #0
 801ce40:	d100      	bne.n	801ce44 <_dtoa_r+0x698>
 801ce42:	e6ee      	b.n	801cc22 <_dtoa_r+0x476>
 801ce44:	0023      	movs	r3, r4
 801ce46:	3c01      	subs	r4, #1
 801ce48:	7822      	ldrb	r2, [r4, #0]
 801ce4a:	2a30      	cmp	r2, #48	@ 0x30
 801ce4c:	d0fa      	beq.n	801ce44 <_dtoa_r+0x698>
 801ce4e:	001c      	movs	r4, r3
 801ce50:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801ce52:	9304      	str	r3, [sp, #16]
 801ce54:	e73e      	b.n	801ccd4 <_dtoa_r+0x528>
 801ce56:	2200      	movs	r2, #0
 801ce58:	4b1b      	ldr	r3, [pc, #108]	@ (801cec8 <_dtoa_r+0x71c>)
 801ce5a:	f7e5 fbef 	bl	800263c <__aeabi_dmul>
 801ce5e:	900a      	str	r0, [sp, #40]	@ 0x28
 801ce60:	910b      	str	r1, [sp, #44]	@ 0x2c
 801ce62:	e7b9      	b.n	801cdd8 <_dtoa_r+0x62c>
 801ce64:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801ce66:	2b00      	cmp	r3, #0
 801ce68:	d10c      	bne.n	801ce84 <_dtoa_r+0x6d8>
 801ce6a:	9806      	ldr	r0, [sp, #24]
 801ce6c:	9907      	ldr	r1, [sp, #28]
 801ce6e:	2200      	movs	r2, #0
 801ce70:	4b18      	ldr	r3, [pc, #96]	@ (801ced4 <_dtoa_r+0x728>)
 801ce72:	f7e5 fbe3 	bl	800263c <__aeabi_dmul>
 801ce76:	9a0a      	ldr	r2, [sp, #40]	@ 0x28
 801ce78:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801ce7a:	f7e3 fb3d 	bl	80004f8 <__aeabi_dcmpge>
 801ce7e:	2800      	cmp	r0, #0
 801ce80:	d100      	bne.n	801ce84 <_dtoa_r+0x6d8>
 801ce82:	e164      	b.n	801d14e <_dtoa_r+0x9a2>
 801ce84:	2600      	movs	r6, #0
 801ce86:	0037      	movs	r7, r6
 801ce88:	9b23      	ldr	r3, [sp, #140]	@ 0x8c
 801ce8a:	9c08      	ldr	r4, [sp, #32]
 801ce8c:	43db      	mvns	r3, r3
 801ce8e:	930c      	str	r3, [sp, #48]	@ 0x30
 801ce90:	2300      	movs	r3, #0
 801ce92:	9304      	str	r3, [sp, #16]
 801ce94:	0031      	movs	r1, r6
 801ce96:	9803      	ldr	r0, [sp, #12]
 801ce98:	f000 ff32 	bl	801dd00 <_Bfree>
 801ce9c:	2f00      	cmp	r7, #0
 801ce9e:	d0d7      	beq.n	801ce50 <_dtoa_r+0x6a4>
 801cea0:	9b04      	ldr	r3, [sp, #16]
 801cea2:	2b00      	cmp	r3, #0
 801cea4:	d005      	beq.n	801ceb2 <_dtoa_r+0x706>
 801cea6:	42bb      	cmp	r3, r7
 801cea8:	d003      	beq.n	801ceb2 <_dtoa_r+0x706>
 801ceaa:	0019      	movs	r1, r3
 801ceac:	9803      	ldr	r0, [sp, #12]
 801ceae:	f000 ff27 	bl	801dd00 <_Bfree>
 801ceb2:	0039      	movs	r1, r7
 801ceb4:	9803      	ldr	r0, [sp, #12]
 801ceb6:	f000 ff23 	bl	801dd00 <_Bfree>
 801ceba:	e7c9      	b.n	801ce50 <_dtoa_r+0x6a4>
 801cebc:	08021260 	.word	0x08021260
 801cec0:	08021238 	.word	0x08021238
 801cec4:	3ff00000 	.word	0x3ff00000
 801cec8:	40240000 	.word	0x40240000
 801cecc:	401c0000 	.word	0x401c0000
 801ced0:	fcc00000 	.word	0xfcc00000
 801ced4:	40140000 	.word	0x40140000
 801ced8:	3fe00000 	.word	0x3fe00000
 801cedc:	9b04      	ldr	r3, [sp, #16]
 801cede:	930c      	str	r3, [sp, #48]	@ 0x30
 801cee0:	0023      	movs	r3, r4
 801cee2:	001c      	movs	r4, r3
 801cee4:	3b01      	subs	r3, #1
 801cee6:	781a      	ldrb	r2, [r3, #0]
 801cee8:	2a39      	cmp	r2, #57	@ 0x39
 801ceea:	d108      	bne.n	801cefe <_dtoa_r+0x752>
 801ceec:	9a08      	ldr	r2, [sp, #32]
 801ceee:	429a      	cmp	r2, r3
 801cef0:	d1f7      	bne.n	801cee2 <_dtoa_r+0x736>
 801cef2:	9a0c      	ldr	r2, [sp, #48]	@ 0x30
 801cef4:	9908      	ldr	r1, [sp, #32]
 801cef6:	3201      	adds	r2, #1
 801cef8:	920c      	str	r2, [sp, #48]	@ 0x30
 801cefa:	2230      	movs	r2, #48	@ 0x30
 801cefc:	700a      	strb	r2, [r1, #0]
 801cefe:	781a      	ldrb	r2, [r3, #0]
 801cf00:	3201      	adds	r2, #1
 801cf02:	701a      	strb	r2, [r3, #0]
 801cf04:	e7a4      	b.n	801ce50 <_dtoa_r+0x6a4>
 801cf06:	2200      	movs	r2, #0
 801cf08:	4bc6      	ldr	r3, [pc, #792]	@ (801d224 <_dtoa_r+0xa78>)
 801cf0a:	f7e5 fb97 	bl	800263c <__aeabi_dmul>
 801cf0e:	2200      	movs	r2, #0
 801cf10:	2300      	movs	r3, #0
 801cf12:	0006      	movs	r6, r0
 801cf14:	000f      	movs	r7, r1
 801cf16:	f7e3 facb 	bl	80004b0 <__aeabi_dcmpeq>
 801cf1a:	2800      	cmp	r0, #0
 801cf1c:	d100      	bne.n	801cf20 <_dtoa_r+0x774>
 801cf1e:	e6a1      	b.n	801cc64 <_dtoa_r+0x4b8>
 801cf20:	e6d8      	b.n	801ccd4 <_dtoa_r+0x528>
 801cf22:	9f10      	ldr	r7, [sp, #64]	@ 0x40
 801cf24:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 801cf26:	9c06      	ldr	r4, [sp, #24]
 801cf28:	2f00      	cmp	r7, #0
 801cf2a:	d014      	beq.n	801cf56 <_dtoa_r+0x7aa>
 801cf2c:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 801cf2e:	2a01      	cmp	r2, #1
 801cf30:	dd00      	ble.n	801cf34 <_dtoa_r+0x788>
 801cf32:	e0c8      	b.n	801d0c6 <_dtoa_r+0x91a>
 801cf34:	9a18      	ldr	r2, [sp, #96]	@ 0x60
 801cf36:	2a00      	cmp	r2, #0
 801cf38:	d100      	bne.n	801cf3c <_dtoa_r+0x790>
 801cf3a:	e0be      	b.n	801d0ba <_dtoa_r+0x90e>
 801cf3c:	4aba      	ldr	r2, [pc, #744]	@ (801d228 <_dtoa_r+0xa7c>)
 801cf3e:	189b      	adds	r3, r3, r2
 801cf40:	9a06      	ldr	r2, [sp, #24]
 801cf42:	2101      	movs	r1, #1
 801cf44:	18d2      	adds	r2, r2, r3
 801cf46:	9206      	str	r2, [sp, #24]
 801cf48:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801cf4a:	9803      	ldr	r0, [sp, #12]
 801cf4c:	18d3      	adds	r3, r2, r3
 801cf4e:	930d      	str	r3, [sp, #52]	@ 0x34
 801cf50:	f000 ffda 	bl	801df08 <__i2b>
 801cf54:	0007      	movs	r7, r0
 801cf56:	2c00      	cmp	r4, #0
 801cf58:	d00e      	beq.n	801cf78 <_dtoa_r+0x7cc>
 801cf5a:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801cf5c:	2b00      	cmp	r3, #0
 801cf5e:	dd0b      	ble.n	801cf78 <_dtoa_r+0x7cc>
 801cf60:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801cf62:	0023      	movs	r3, r4
 801cf64:	4294      	cmp	r4, r2
 801cf66:	dd00      	ble.n	801cf6a <_dtoa_r+0x7be>
 801cf68:	0013      	movs	r3, r2
 801cf6a:	9a06      	ldr	r2, [sp, #24]
 801cf6c:	1ae4      	subs	r4, r4, r3
 801cf6e:	1ad2      	subs	r2, r2, r3
 801cf70:	9206      	str	r2, [sp, #24]
 801cf72:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801cf74:	1ad3      	subs	r3, r2, r3
 801cf76:	930d      	str	r3, [sp, #52]	@ 0x34
 801cf78:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801cf7a:	2b00      	cmp	r3, #0
 801cf7c:	d01f      	beq.n	801cfbe <_dtoa_r+0x812>
 801cf7e:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801cf80:	2b00      	cmp	r3, #0
 801cf82:	d100      	bne.n	801cf86 <_dtoa_r+0x7da>
 801cf84:	e0b5      	b.n	801d0f2 <_dtoa_r+0x946>
 801cf86:	2d00      	cmp	r5, #0
 801cf88:	d010      	beq.n	801cfac <_dtoa_r+0x800>
 801cf8a:	0039      	movs	r1, r7
 801cf8c:	002a      	movs	r2, r5
 801cf8e:	9803      	ldr	r0, [sp, #12]
 801cf90:	f001 f884 	bl	801e09c <__pow5mult>
 801cf94:	9a05      	ldr	r2, [sp, #20]
 801cf96:	0001      	movs	r1, r0
 801cf98:	0007      	movs	r7, r0
 801cf9a:	9803      	ldr	r0, [sp, #12]
 801cf9c:	f000 ffcc 	bl	801df38 <__multiply>
 801cfa0:	0006      	movs	r6, r0
 801cfa2:	9905      	ldr	r1, [sp, #20]
 801cfa4:	9803      	ldr	r0, [sp, #12]
 801cfa6:	f000 feab 	bl	801dd00 <_Bfree>
 801cfaa:	9605      	str	r6, [sp, #20]
 801cfac:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801cfae:	1b5a      	subs	r2, r3, r5
 801cfb0:	42ab      	cmp	r3, r5
 801cfb2:	d004      	beq.n	801cfbe <_dtoa_r+0x812>
 801cfb4:	9905      	ldr	r1, [sp, #20]
 801cfb6:	9803      	ldr	r0, [sp, #12]
 801cfb8:	f001 f870 	bl	801e09c <__pow5mult>
 801cfbc:	9005      	str	r0, [sp, #20]
 801cfbe:	2101      	movs	r1, #1
 801cfc0:	9803      	ldr	r0, [sp, #12]
 801cfc2:	f000 ffa1 	bl	801df08 <__i2b>
 801cfc6:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801cfc8:	0006      	movs	r6, r0
 801cfca:	2b00      	cmp	r3, #0
 801cfcc:	d100      	bne.n	801cfd0 <_dtoa_r+0x824>
 801cfce:	e1bc      	b.n	801d34a <_dtoa_r+0xb9e>
 801cfd0:	001a      	movs	r2, r3
 801cfd2:	0001      	movs	r1, r0
 801cfd4:	9803      	ldr	r0, [sp, #12]
 801cfd6:	f001 f861 	bl	801e09c <__pow5mult>
 801cfda:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801cfdc:	0006      	movs	r6, r0
 801cfde:	2500      	movs	r5, #0
 801cfe0:	2b01      	cmp	r3, #1
 801cfe2:	dc16      	bgt.n	801d012 <_dtoa_r+0x866>
 801cfe4:	2500      	movs	r5, #0
 801cfe6:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801cfe8:	42ab      	cmp	r3, r5
 801cfea:	d10e      	bne.n	801d00a <_dtoa_r+0x85e>
 801cfec:	9b0b      	ldr	r3, [sp, #44]	@ 0x2c
 801cfee:	031b      	lsls	r3, r3, #12
 801cff0:	42ab      	cmp	r3, r5
 801cff2:	d10a      	bne.n	801d00a <_dtoa_r+0x85e>
 801cff4:	4b8d      	ldr	r3, [pc, #564]	@ (801d22c <_dtoa_r+0xa80>)
 801cff6:	9a0b      	ldr	r2, [sp, #44]	@ 0x2c
 801cff8:	4213      	tst	r3, r2
 801cffa:	d006      	beq.n	801d00a <_dtoa_r+0x85e>
 801cffc:	9b06      	ldr	r3, [sp, #24]
 801cffe:	3501      	adds	r5, #1
 801d000:	3301      	adds	r3, #1
 801d002:	9306      	str	r3, [sp, #24]
 801d004:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d006:	3301      	adds	r3, #1
 801d008:	930d      	str	r3, [sp, #52]	@ 0x34
 801d00a:	9b14      	ldr	r3, [sp, #80]	@ 0x50
 801d00c:	2001      	movs	r0, #1
 801d00e:	2b00      	cmp	r3, #0
 801d010:	d008      	beq.n	801d024 <_dtoa_r+0x878>
 801d012:	6933      	ldr	r3, [r6, #16]
 801d014:	3303      	adds	r3, #3
 801d016:	009b      	lsls	r3, r3, #2
 801d018:	18f3      	adds	r3, r6, r3
 801d01a:	6858      	ldr	r0, [r3, #4]
 801d01c:	f000 ff24 	bl	801de68 <__hi0bits>
 801d020:	2320      	movs	r3, #32
 801d022:	1a18      	subs	r0, r3, r0
 801d024:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d026:	1818      	adds	r0, r3, r0
 801d028:	0002      	movs	r2, r0
 801d02a:	231f      	movs	r3, #31
 801d02c:	401a      	ands	r2, r3
 801d02e:	4218      	tst	r0, r3
 801d030:	d065      	beq.n	801d0fe <_dtoa_r+0x952>
 801d032:	3301      	adds	r3, #1
 801d034:	1a9b      	subs	r3, r3, r2
 801d036:	2b04      	cmp	r3, #4
 801d038:	dd5d      	ble.n	801d0f6 <_dtoa_r+0x94a>
 801d03a:	231c      	movs	r3, #28
 801d03c:	1a9b      	subs	r3, r3, r2
 801d03e:	9a06      	ldr	r2, [sp, #24]
 801d040:	18e4      	adds	r4, r4, r3
 801d042:	18d2      	adds	r2, r2, r3
 801d044:	9206      	str	r2, [sp, #24]
 801d046:	9a0d      	ldr	r2, [sp, #52]	@ 0x34
 801d048:	18d3      	adds	r3, r2, r3
 801d04a:	930d      	str	r3, [sp, #52]	@ 0x34
 801d04c:	9b06      	ldr	r3, [sp, #24]
 801d04e:	2b00      	cmp	r3, #0
 801d050:	dd05      	ble.n	801d05e <_dtoa_r+0x8b2>
 801d052:	001a      	movs	r2, r3
 801d054:	9905      	ldr	r1, [sp, #20]
 801d056:	9803      	ldr	r0, [sp, #12]
 801d058:	f001 f87c 	bl	801e154 <__lshift>
 801d05c:	9005      	str	r0, [sp, #20]
 801d05e:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d060:	2b00      	cmp	r3, #0
 801d062:	dd05      	ble.n	801d070 <_dtoa_r+0x8c4>
 801d064:	0031      	movs	r1, r6
 801d066:	001a      	movs	r2, r3
 801d068:	9803      	ldr	r0, [sp, #12]
 801d06a:	f001 f873 	bl	801e154 <__lshift>
 801d06e:	0006      	movs	r6, r0
 801d070:	9b15      	ldr	r3, [sp, #84]	@ 0x54
 801d072:	2b00      	cmp	r3, #0
 801d074:	d045      	beq.n	801d102 <_dtoa_r+0x956>
 801d076:	0031      	movs	r1, r6
 801d078:	9805      	ldr	r0, [sp, #20]
 801d07a:	f001 f8d7 	bl	801e22c <__mcmp>
 801d07e:	2800      	cmp	r0, #0
 801d080:	da3f      	bge.n	801d102 <_dtoa_r+0x956>
 801d082:	9b04      	ldr	r3, [sp, #16]
 801d084:	220a      	movs	r2, #10
 801d086:	3b01      	subs	r3, #1
 801d088:	930c      	str	r3, [sp, #48]	@ 0x30
 801d08a:	9905      	ldr	r1, [sp, #20]
 801d08c:	2300      	movs	r3, #0
 801d08e:	9803      	ldr	r0, [sp, #12]
 801d090:	f000 fe5a 	bl	801dd48 <__multadd>
 801d094:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d096:	9005      	str	r0, [sp, #20]
 801d098:	2b00      	cmp	r3, #0
 801d09a:	d100      	bne.n	801d09e <_dtoa_r+0x8f2>
 801d09c:	e15c      	b.n	801d358 <_dtoa_r+0xbac>
 801d09e:	2300      	movs	r3, #0
 801d0a0:	0039      	movs	r1, r7
 801d0a2:	220a      	movs	r2, #10
 801d0a4:	9803      	ldr	r0, [sp, #12]
 801d0a6:	f000 fe4f 	bl	801dd48 <__multadd>
 801d0aa:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d0ac:	0007      	movs	r7, r0
 801d0ae:	2b00      	cmp	r3, #0
 801d0b0:	dc55      	bgt.n	801d15e <_dtoa_r+0x9b2>
 801d0b2:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801d0b4:	2b02      	cmp	r3, #2
 801d0b6:	dc2d      	bgt.n	801d114 <_dtoa_r+0x968>
 801d0b8:	e051      	b.n	801d15e <_dtoa_r+0x9b2>
 801d0ba:	2336      	movs	r3, #54	@ 0x36
 801d0bc:	9a1a      	ldr	r2, [sp, #104]	@ 0x68
 801d0be:	9d0f      	ldr	r5, [sp, #60]	@ 0x3c
 801d0c0:	9c06      	ldr	r4, [sp, #24]
 801d0c2:	1a9b      	subs	r3, r3, r2
 801d0c4:	e73c      	b.n	801cf40 <_dtoa_r+0x794>
 801d0c6:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d0c8:	1e5d      	subs	r5, r3, #1
 801d0ca:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d0cc:	42ab      	cmp	r3, r5
 801d0ce:	db08      	blt.n	801d0e2 <_dtoa_r+0x936>
 801d0d0:	1b5d      	subs	r5, r3, r5
 801d0d2:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d0d4:	9c06      	ldr	r4, [sp, #24]
 801d0d6:	2b00      	cmp	r3, #0
 801d0d8:	db00      	blt.n	801d0dc <_dtoa_r+0x930>
 801d0da:	e731      	b.n	801cf40 <_dtoa_r+0x794>
 801d0dc:	1ae4      	subs	r4, r4, r3
 801d0de:	2300      	movs	r3, #0
 801d0e0:	e72e      	b.n	801cf40 <_dtoa_r+0x794>
 801d0e2:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d0e4:	9a14      	ldr	r2, [sp, #80]	@ 0x50
 801d0e6:	1aeb      	subs	r3, r5, r3
 801d0e8:	18d3      	adds	r3, r2, r3
 801d0ea:	950f      	str	r5, [sp, #60]	@ 0x3c
 801d0ec:	9314      	str	r3, [sp, #80]	@ 0x50
 801d0ee:	2500      	movs	r5, #0
 801d0f0:	e7ef      	b.n	801d0d2 <_dtoa_r+0x926>
 801d0f2:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801d0f4:	e75e      	b.n	801cfb4 <_dtoa_r+0x808>
 801d0f6:	2b04      	cmp	r3, #4
 801d0f8:	d0a8      	beq.n	801d04c <_dtoa_r+0x8a0>
 801d0fa:	331c      	adds	r3, #28
 801d0fc:	e79f      	b.n	801d03e <_dtoa_r+0x892>
 801d0fe:	0013      	movs	r3, r2
 801d100:	e7fb      	b.n	801d0fa <_dtoa_r+0x94e>
 801d102:	9b04      	ldr	r3, [sp, #16]
 801d104:	930c      	str	r3, [sp, #48]	@ 0x30
 801d106:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d108:	930e      	str	r3, [sp, #56]	@ 0x38
 801d10a:	2b00      	cmp	r3, #0
 801d10c:	dc23      	bgt.n	801d156 <_dtoa_r+0x9aa>
 801d10e:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801d110:	2b02      	cmp	r3, #2
 801d112:	dd20      	ble.n	801d156 <_dtoa_r+0x9aa>
 801d114:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d116:	2b00      	cmp	r3, #0
 801d118:	d000      	beq.n	801d11c <_dtoa_r+0x970>
 801d11a:	e6b5      	b.n	801ce88 <_dtoa_r+0x6dc>
 801d11c:	0031      	movs	r1, r6
 801d11e:	2205      	movs	r2, #5
 801d120:	9803      	ldr	r0, [sp, #12]
 801d122:	f000 fe11 	bl	801dd48 <__multadd>
 801d126:	0006      	movs	r6, r0
 801d128:	0001      	movs	r1, r0
 801d12a:	9805      	ldr	r0, [sp, #20]
 801d12c:	f001 f87e 	bl	801e22c <__mcmp>
 801d130:	2800      	cmp	r0, #0
 801d132:	dc00      	bgt.n	801d136 <_dtoa_r+0x98a>
 801d134:	e6a8      	b.n	801ce88 <_dtoa_r+0x6dc>
 801d136:	9b08      	ldr	r3, [sp, #32]
 801d138:	9a08      	ldr	r2, [sp, #32]
 801d13a:	1c5c      	adds	r4, r3, #1
 801d13c:	2331      	movs	r3, #49	@ 0x31
 801d13e:	7013      	strb	r3, [r2, #0]
 801d140:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d142:	3301      	adds	r3, #1
 801d144:	930c      	str	r3, [sp, #48]	@ 0x30
 801d146:	e6a3      	b.n	801ce90 <_dtoa_r+0x6e4>
 801d148:	9e11      	ldr	r6, [sp, #68]	@ 0x44
 801d14a:	0037      	movs	r7, r6
 801d14c:	e7f3      	b.n	801d136 <_dtoa_r+0x98a>
 801d14e:	9b04      	ldr	r3, [sp, #16]
 801d150:	9e09      	ldr	r6, [sp, #36]	@ 0x24
 801d152:	930c      	str	r3, [sp, #48]	@ 0x30
 801d154:	e7f9      	b.n	801d14a <_dtoa_r+0x99e>
 801d156:	9b10      	ldr	r3, [sp, #64]	@ 0x40
 801d158:	2b00      	cmp	r3, #0
 801d15a:	d100      	bne.n	801d15e <_dtoa_r+0x9b2>
 801d15c:	e100      	b.n	801d360 <_dtoa_r+0xbb4>
 801d15e:	2c00      	cmp	r4, #0
 801d160:	dd05      	ble.n	801d16e <_dtoa_r+0x9c2>
 801d162:	0039      	movs	r1, r7
 801d164:	0022      	movs	r2, r4
 801d166:	9803      	ldr	r0, [sp, #12]
 801d168:	f000 fff4 	bl	801e154 <__lshift>
 801d16c:	0007      	movs	r7, r0
 801d16e:	0038      	movs	r0, r7
 801d170:	2d00      	cmp	r5, #0
 801d172:	d018      	beq.n	801d1a6 <_dtoa_r+0x9fa>
 801d174:	6879      	ldr	r1, [r7, #4]
 801d176:	9803      	ldr	r0, [sp, #12]
 801d178:	f000 fd7e 	bl	801dc78 <_Balloc>
 801d17c:	1e04      	subs	r4, r0, #0
 801d17e:	d105      	bne.n	801d18c <_dtoa_r+0x9e0>
 801d180:	0022      	movs	r2, r4
 801d182:	4b2b      	ldr	r3, [pc, #172]	@ (801d230 <_dtoa_r+0xa84>)
 801d184:	482b      	ldr	r0, [pc, #172]	@ (801d234 <_dtoa_r+0xa88>)
 801d186:	492c      	ldr	r1, [pc, #176]	@ (801d238 <_dtoa_r+0xa8c>)
 801d188:	f7ff fb25 	bl	801c7d6 <_dtoa_r+0x2a>
 801d18c:	0039      	movs	r1, r7
 801d18e:	693a      	ldr	r2, [r7, #16]
 801d190:	310c      	adds	r1, #12
 801d192:	3202      	adds	r2, #2
 801d194:	0092      	lsls	r2, r2, #2
 801d196:	300c      	adds	r0, #12
 801d198:	f7ff fa6a 	bl	801c670 <memcpy>
 801d19c:	2201      	movs	r2, #1
 801d19e:	0021      	movs	r1, r4
 801d1a0:	9803      	ldr	r0, [sp, #12]
 801d1a2:	f000 ffd7 	bl	801e154 <__lshift>
 801d1a6:	9b08      	ldr	r3, [sp, #32]
 801d1a8:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801d1aa:	9306      	str	r3, [sp, #24]
 801d1ac:	3b01      	subs	r3, #1
 801d1ae:	189b      	adds	r3, r3, r2
 801d1b0:	2201      	movs	r2, #1
 801d1b2:	9704      	str	r7, [sp, #16]
 801d1b4:	0007      	movs	r7, r0
 801d1b6:	930f      	str	r3, [sp, #60]	@ 0x3c
 801d1b8:	9b0a      	ldr	r3, [sp, #40]	@ 0x28
 801d1ba:	4013      	ands	r3, r2
 801d1bc:	930e      	str	r3, [sp, #56]	@ 0x38
 801d1be:	0031      	movs	r1, r6
 801d1c0:	9805      	ldr	r0, [sp, #20]
 801d1c2:	f7ff fa65 	bl	801c690 <quorem>
 801d1c6:	9904      	ldr	r1, [sp, #16]
 801d1c8:	0005      	movs	r5, r0
 801d1ca:	900a      	str	r0, [sp, #40]	@ 0x28
 801d1cc:	9805      	ldr	r0, [sp, #20]
 801d1ce:	f001 f82d 	bl	801e22c <__mcmp>
 801d1d2:	003a      	movs	r2, r7
 801d1d4:	900d      	str	r0, [sp, #52]	@ 0x34
 801d1d6:	0031      	movs	r1, r6
 801d1d8:	9803      	ldr	r0, [sp, #12]
 801d1da:	f001 f843 	bl	801e264 <__mdiff>
 801d1de:	2201      	movs	r2, #1
 801d1e0:	68c3      	ldr	r3, [r0, #12]
 801d1e2:	0004      	movs	r4, r0
 801d1e4:	3530      	adds	r5, #48	@ 0x30
 801d1e6:	9209      	str	r2, [sp, #36]	@ 0x24
 801d1e8:	2b00      	cmp	r3, #0
 801d1ea:	d104      	bne.n	801d1f6 <_dtoa_r+0xa4a>
 801d1ec:	0001      	movs	r1, r0
 801d1ee:	9805      	ldr	r0, [sp, #20]
 801d1f0:	f001 f81c 	bl	801e22c <__mcmp>
 801d1f4:	9009      	str	r0, [sp, #36]	@ 0x24
 801d1f6:	0021      	movs	r1, r4
 801d1f8:	9803      	ldr	r0, [sp, #12]
 801d1fa:	f000 fd81 	bl	801dd00 <_Bfree>
 801d1fe:	9b06      	ldr	r3, [sp, #24]
 801d200:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801d202:	1c5c      	adds	r4, r3, #1
 801d204:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801d206:	4313      	orrs	r3, r2
 801d208:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801d20a:	4313      	orrs	r3, r2
 801d20c:	d116      	bne.n	801d23c <_dtoa_r+0xa90>
 801d20e:	2d39      	cmp	r5, #57	@ 0x39
 801d210:	d02f      	beq.n	801d272 <_dtoa_r+0xac6>
 801d212:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d214:	2b00      	cmp	r3, #0
 801d216:	dd01      	ble.n	801d21c <_dtoa_r+0xa70>
 801d218:	9d0a      	ldr	r5, [sp, #40]	@ 0x28
 801d21a:	3531      	adds	r5, #49	@ 0x31
 801d21c:	9b06      	ldr	r3, [sp, #24]
 801d21e:	701d      	strb	r5, [r3, #0]
 801d220:	e638      	b.n	801ce94 <_dtoa_r+0x6e8>
 801d222:	46c0      	nop			@ (mov r8, r8)
 801d224:	40240000 	.word	0x40240000
 801d228:	00000433 	.word	0x00000433
 801d22c:	7ff00000 	.word	0x7ff00000
 801d230:	08021161 	.word	0x08021161
 801d234:	08021109 	.word	0x08021109
 801d238:	000002ef 	.word	0x000002ef
 801d23c:	9b0d      	ldr	r3, [sp, #52]	@ 0x34
 801d23e:	2b00      	cmp	r3, #0
 801d240:	db04      	blt.n	801d24c <_dtoa_r+0xaa0>
 801d242:	9a22      	ldr	r2, [sp, #136]	@ 0x88
 801d244:	4313      	orrs	r3, r2
 801d246:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801d248:	4313      	orrs	r3, r2
 801d24a:	d11e      	bne.n	801d28a <_dtoa_r+0xade>
 801d24c:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d24e:	2b00      	cmp	r3, #0
 801d250:	dde4      	ble.n	801d21c <_dtoa_r+0xa70>
 801d252:	9905      	ldr	r1, [sp, #20]
 801d254:	2201      	movs	r2, #1
 801d256:	9803      	ldr	r0, [sp, #12]
 801d258:	f000 ff7c 	bl	801e154 <__lshift>
 801d25c:	0031      	movs	r1, r6
 801d25e:	9005      	str	r0, [sp, #20]
 801d260:	f000 ffe4 	bl	801e22c <__mcmp>
 801d264:	2800      	cmp	r0, #0
 801d266:	dc02      	bgt.n	801d26e <_dtoa_r+0xac2>
 801d268:	d1d8      	bne.n	801d21c <_dtoa_r+0xa70>
 801d26a:	07eb      	lsls	r3, r5, #31
 801d26c:	d5d6      	bpl.n	801d21c <_dtoa_r+0xa70>
 801d26e:	2d39      	cmp	r5, #57	@ 0x39
 801d270:	d1d2      	bne.n	801d218 <_dtoa_r+0xa6c>
 801d272:	2339      	movs	r3, #57	@ 0x39
 801d274:	9a06      	ldr	r2, [sp, #24]
 801d276:	7013      	strb	r3, [r2, #0]
 801d278:	0023      	movs	r3, r4
 801d27a:	001c      	movs	r4, r3
 801d27c:	3b01      	subs	r3, #1
 801d27e:	781a      	ldrb	r2, [r3, #0]
 801d280:	2a39      	cmp	r2, #57	@ 0x39
 801d282:	d04f      	beq.n	801d324 <_dtoa_r+0xb78>
 801d284:	3201      	adds	r2, #1
 801d286:	701a      	strb	r2, [r3, #0]
 801d288:	e604      	b.n	801ce94 <_dtoa_r+0x6e8>
 801d28a:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801d28c:	2b00      	cmp	r3, #0
 801d28e:	dd03      	ble.n	801d298 <_dtoa_r+0xaec>
 801d290:	2d39      	cmp	r5, #57	@ 0x39
 801d292:	d0ee      	beq.n	801d272 <_dtoa_r+0xac6>
 801d294:	3501      	adds	r5, #1
 801d296:	e7c1      	b.n	801d21c <_dtoa_r+0xa70>
 801d298:	9b06      	ldr	r3, [sp, #24]
 801d29a:	9a06      	ldr	r2, [sp, #24]
 801d29c:	701d      	strb	r5, [r3, #0]
 801d29e:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d2a0:	4293      	cmp	r3, r2
 801d2a2:	d02a      	beq.n	801d2fa <_dtoa_r+0xb4e>
 801d2a4:	2300      	movs	r3, #0
 801d2a6:	220a      	movs	r2, #10
 801d2a8:	9905      	ldr	r1, [sp, #20]
 801d2aa:	9803      	ldr	r0, [sp, #12]
 801d2ac:	f000 fd4c 	bl	801dd48 <__multadd>
 801d2b0:	9b04      	ldr	r3, [sp, #16]
 801d2b2:	9005      	str	r0, [sp, #20]
 801d2b4:	42bb      	cmp	r3, r7
 801d2b6:	d109      	bne.n	801d2cc <_dtoa_r+0xb20>
 801d2b8:	2300      	movs	r3, #0
 801d2ba:	220a      	movs	r2, #10
 801d2bc:	9904      	ldr	r1, [sp, #16]
 801d2be:	9803      	ldr	r0, [sp, #12]
 801d2c0:	f000 fd42 	bl	801dd48 <__multadd>
 801d2c4:	9004      	str	r0, [sp, #16]
 801d2c6:	0007      	movs	r7, r0
 801d2c8:	9406      	str	r4, [sp, #24]
 801d2ca:	e778      	b.n	801d1be <_dtoa_r+0xa12>
 801d2cc:	9904      	ldr	r1, [sp, #16]
 801d2ce:	2300      	movs	r3, #0
 801d2d0:	220a      	movs	r2, #10
 801d2d2:	9803      	ldr	r0, [sp, #12]
 801d2d4:	f000 fd38 	bl	801dd48 <__multadd>
 801d2d8:	2300      	movs	r3, #0
 801d2da:	9004      	str	r0, [sp, #16]
 801d2dc:	220a      	movs	r2, #10
 801d2de:	0039      	movs	r1, r7
 801d2e0:	9803      	ldr	r0, [sp, #12]
 801d2e2:	f000 fd31 	bl	801dd48 <__multadd>
 801d2e6:	e7ee      	b.n	801d2c6 <_dtoa_r+0xb1a>
 801d2e8:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d2ea:	2401      	movs	r4, #1
 801d2ec:	2b00      	cmp	r3, #0
 801d2ee:	dd00      	ble.n	801d2f2 <_dtoa_r+0xb46>
 801d2f0:	001c      	movs	r4, r3
 801d2f2:	9b08      	ldr	r3, [sp, #32]
 801d2f4:	191c      	adds	r4, r3, r4
 801d2f6:	2300      	movs	r3, #0
 801d2f8:	9304      	str	r3, [sp, #16]
 801d2fa:	9905      	ldr	r1, [sp, #20]
 801d2fc:	2201      	movs	r2, #1
 801d2fe:	9803      	ldr	r0, [sp, #12]
 801d300:	f000 ff28 	bl	801e154 <__lshift>
 801d304:	0031      	movs	r1, r6
 801d306:	9005      	str	r0, [sp, #20]
 801d308:	f000 ff90 	bl	801e22c <__mcmp>
 801d30c:	2800      	cmp	r0, #0
 801d30e:	dcb3      	bgt.n	801d278 <_dtoa_r+0xacc>
 801d310:	d101      	bne.n	801d316 <_dtoa_r+0xb6a>
 801d312:	07ed      	lsls	r5, r5, #31
 801d314:	d4b0      	bmi.n	801d278 <_dtoa_r+0xacc>
 801d316:	0023      	movs	r3, r4
 801d318:	001c      	movs	r4, r3
 801d31a:	3b01      	subs	r3, #1
 801d31c:	781a      	ldrb	r2, [r3, #0]
 801d31e:	2a30      	cmp	r2, #48	@ 0x30
 801d320:	d0fa      	beq.n	801d318 <_dtoa_r+0xb6c>
 801d322:	e5b7      	b.n	801ce94 <_dtoa_r+0x6e8>
 801d324:	9a08      	ldr	r2, [sp, #32]
 801d326:	429a      	cmp	r2, r3
 801d328:	d1a7      	bne.n	801d27a <_dtoa_r+0xace>
 801d32a:	9b0c      	ldr	r3, [sp, #48]	@ 0x30
 801d32c:	3301      	adds	r3, #1
 801d32e:	930c      	str	r3, [sp, #48]	@ 0x30
 801d330:	2331      	movs	r3, #49	@ 0x31
 801d332:	7013      	strb	r3, [r2, #0]
 801d334:	e5ae      	b.n	801ce94 <_dtoa_r+0x6e8>
 801d336:	4b15      	ldr	r3, [pc, #84]	@ (801d38c <_dtoa_r+0xbe0>)
 801d338:	9a26      	ldr	r2, [sp, #152]	@ 0x98
 801d33a:	9308      	str	r3, [sp, #32]
 801d33c:	4b14      	ldr	r3, [pc, #80]	@ (801d390 <_dtoa_r+0xbe4>)
 801d33e:	2a00      	cmp	r2, #0
 801d340:	d001      	beq.n	801d346 <_dtoa_r+0xb9a>
 801d342:	f7ff fa7b 	bl	801c83c <_dtoa_r+0x90>
 801d346:	f7ff fa7b 	bl	801c840 <_dtoa_r+0x94>
 801d34a:	9b22      	ldr	r3, [sp, #136]	@ 0x88
 801d34c:	2b01      	cmp	r3, #1
 801d34e:	dc00      	bgt.n	801d352 <_dtoa_r+0xba6>
 801d350:	e648      	b.n	801cfe4 <_dtoa_r+0x838>
 801d352:	2001      	movs	r0, #1
 801d354:	9d14      	ldr	r5, [sp, #80]	@ 0x50
 801d356:	e665      	b.n	801d024 <_dtoa_r+0x878>
 801d358:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d35a:	2b00      	cmp	r3, #0
 801d35c:	dc00      	bgt.n	801d360 <_dtoa_r+0xbb4>
 801d35e:	e6d6      	b.n	801d10e <_dtoa_r+0x962>
 801d360:	2400      	movs	r4, #0
 801d362:	0031      	movs	r1, r6
 801d364:	9805      	ldr	r0, [sp, #20]
 801d366:	f7ff f993 	bl	801c690 <quorem>
 801d36a:	9b08      	ldr	r3, [sp, #32]
 801d36c:	3030      	adds	r0, #48	@ 0x30
 801d36e:	5518      	strb	r0, [r3, r4]
 801d370:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d372:	3401      	adds	r4, #1
 801d374:	0005      	movs	r5, r0
 801d376:	429c      	cmp	r4, r3
 801d378:	dab6      	bge.n	801d2e8 <_dtoa_r+0xb3c>
 801d37a:	2300      	movs	r3, #0
 801d37c:	220a      	movs	r2, #10
 801d37e:	9905      	ldr	r1, [sp, #20]
 801d380:	9803      	ldr	r0, [sp, #12]
 801d382:	f000 fce1 	bl	801dd48 <__multadd>
 801d386:	9005      	str	r0, [sp, #20]
 801d388:	e7eb      	b.n	801d362 <_dtoa_r+0xbb6>
 801d38a:	46c0      	nop			@ (mov r8, r8)
 801d38c:	080210e5 	.word	0x080210e5
 801d390:	080210ed 	.word	0x080210ed

0801d394 <_free_r>:
 801d394:	b570      	push	{r4, r5, r6, lr}
 801d396:	0005      	movs	r5, r0
 801d398:	1e0c      	subs	r4, r1, #0
 801d39a:	d010      	beq.n	801d3be <_free_r+0x2a>
 801d39c:	3c04      	subs	r4, #4
 801d39e:	6823      	ldr	r3, [r4, #0]
 801d3a0:	2b00      	cmp	r3, #0
 801d3a2:	da00      	bge.n	801d3a6 <_free_r+0x12>
 801d3a4:	18e4      	adds	r4, r4, r3
 801d3a6:	0028      	movs	r0, r5
 801d3a8:	f000 fc56 	bl	801dc58 <__malloc_lock>
 801d3ac:	4a1d      	ldr	r2, [pc, #116]	@ (801d424 <_free_r+0x90>)
 801d3ae:	6813      	ldr	r3, [r2, #0]
 801d3b0:	2b00      	cmp	r3, #0
 801d3b2:	d105      	bne.n	801d3c0 <_free_r+0x2c>
 801d3b4:	6063      	str	r3, [r4, #4]
 801d3b6:	6014      	str	r4, [r2, #0]
 801d3b8:	0028      	movs	r0, r5
 801d3ba:	f000 fc55 	bl	801dc68 <__malloc_unlock>
 801d3be:	bd70      	pop	{r4, r5, r6, pc}
 801d3c0:	42a3      	cmp	r3, r4
 801d3c2:	d908      	bls.n	801d3d6 <_free_r+0x42>
 801d3c4:	6820      	ldr	r0, [r4, #0]
 801d3c6:	1821      	adds	r1, r4, r0
 801d3c8:	428b      	cmp	r3, r1
 801d3ca:	d1f3      	bne.n	801d3b4 <_free_r+0x20>
 801d3cc:	6819      	ldr	r1, [r3, #0]
 801d3ce:	685b      	ldr	r3, [r3, #4]
 801d3d0:	1809      	adds	r1, r1, r0
 801d3d2:	6021      	str	r1, [r4, #0]
 801d3d4:	e7ee      	b.n	801d3b4 <_free_r+0x20>
 801d3d6:	001a      	movs	r2, r3
 801d3d8:	685b      	ldr	r3, [r3, #4]
 801d3da:	2b00      	cmp	r3, #0
 801d3dc:	d001      	beq.n	801d3e2 <_free_r+0x4e>
 801d3de:	42a3      	cmp	r3, r4
 801d3e0:	d9f9      	bls.n	801d3d6 <_free_r+0x42>
 801d3e2:	6811      	ldr	r1, [r2, #0]
 801d3e4:	1850      	adds	r0, r2, r1
 801d3e6:	42a0      	cmp	r0, r4
 801d3e8:	d10b      	bne.n	801d402 <_free_r+0x6e>
 801d3ea:	6820      	ldr	r0, [r4, #0]
 801d3ec:	1809      	adds	r1, r1, r0
 801d3ee:	1850      	adds	r0, r2, r1
 801d3f0:	6011      	str	r1, [r2, #0]
 801d3f2:	4283      	cmp	r3, r0
 801d3f4:	d1e0      	bne.n	801d3b8 <_free_r+0x24>
 801d3f6:	6818      	ldr	r0, [r3, #0]
 801d3f8:	685b      	ldr	r3, [r3, #4]
 801d3fa:	1841      	adds	r1, r0, r1
 801d3fc:	6011      	str	r1, [r2, #0]
 801d3fe:	6053      	str	r3, [r2, #4]
 801d400:	e7da      	b.n	801d3b8 <_free_r+0x24>
 801d402:	42a0      	cmp	r0, r4
 801d404:	d902      	bls.n	801d40c <_free_r+0x78>
 801d406:	230c      	movs	r3, #12
 801d408:	602b      	str	r3, [r5, #0]
 801d40a:	e7d5      	b.n	801d3b8 <_free_r+0x24>
 801d40c:	6820      	ldr	r0, [r4, #0]
 801d40e:	1821      	adds	r1, r4, r0
 801d410:	428b      	cmp	r3, r1
 801d412:	d103      	bne.n	801d41c <_free_r+0x88>
 801d414:	6819      	ldr	r1, [r3, #0]
 801d416:	685b      	ldr	r3, [r3, #4]
 801d418:	1809      	adds	r1, r1, r0
 801d41a:	6021      	str	r1, [r4, #0]
 801d41c:	6063      	str	r3, [r4, #4]
 801d41e:	6054      	str	r4, [r2, #4]
 801d420:	e7ca      	b.n	801d3b8 <_free_r+0x24>
 801d422:	46c0      	nop			@ (mov r8, r8)
 801d424:	200038bc 	.word	0x200038bc

0801d428 <rshift>:
 801d428:	0002      	movs	r2, r0
 801d42a:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d42c:	6904      	ldr	r4, [r0, #16]
 801d42e:	b085      	sub	sp, #20
 801d430:	3214      	adds	r2, #20
 801d432:	114b      	asrs	r3, r1, #5
 801d434:	0016      	movs	r6, r2
 801d436:	9302      	str	r3, [sp, #8]
 801d438:	429c      	cmp	r4, r3
 801d43a:	dd31      	ble.n	801d4a0 <rshift+0x78>
 801d43c:	261f      	movs	r6, #31
 801d43e:	000f      	movs	r7, r1
 801d440:	009b      	lsls	r3, r3, #2
 801d442:	00a5      	lsls	r5, r4, #2
 801d444:	18d3      	adds	r3, r2, r3
 801d446:	4037      	ands	r7, r6
 801d448:	1955      	adds	r5, r2, r5
 801d44a:	9300      	str	r3, [sp, #0]
 801d44c:	9701      	str	r7, [sp, #4]
 801d44e:	4231      	tst	r1, r6
 801d450:	d10d      	bne.n	801d46e <rshift+0x46>
 801d452:	0016      	movs	r6, r2
 801d454:	0019      	movs	r1, r3
 801d456:	428d      	cmp	r5, r1
 801d458:	d836      	bhi.n	801d4c8 <rshift+0xa0>
 801d45a:	9b00      	ldr	r3, [sp, #0]
 801d45c:	2600      	movs	r6, #0
 801d45e:	3b03      	subs	r3, #3
 801d460:	429d      	cmp	r5, r3
 801d462:	d302      	bcc.n	801d46a <rshift+0x42>
 801d464:	9b02      	ldr	r3, [sp, #8]
 801d466:	1ae4      	subs	r4, r4, r3
 801d468:	00a6      	lsls	r6, r4, #2
 801d46a:	1996      	adds	r6, r2, r6
 801d46c:	e018      	b.n	801d4a0 <rshift+0x78>
 801d46e:	2120      	movs	r1, #32
 801d470:	9e01      	ldr	r6, [sp, #4]
 801d472:	9f01      	ldr	r7, [sp, #4]
 801d474:	1b89      	subs	r1, r1, r6
 801d476:	9e00      	ldr	r6, [sp, #0]
 801d478:	9103      	str	r1, [sp, #12]
 801d47a:	ce02      	ldmia	r6!, {r1}
 801d47c:	4694      	mov	ip, r2
 801d47e:	40f9      	lsrs	r1, r7
 801d480:	42b5      	cmp	r5, r6
 801d482:	d816      	bhi.n	801d4b2 <rshift+0x8a>
 801d484:	9b00      	ldr	r3, [sp, #0]
 801d486:	2600      	movs	r6, #0
 801d488:	3301      	adds	r3, #1
 801d48a:	429d      	cmp	r5, r3
 801d48c:	d303      	bcc.n	801d496 <rshift+0x6e>
 801d48e:	9b02      	ldr	r3, [sp, #8]
 801d490:	1ae4      	subs	r4, r4, r3
 801d492:	00a6      	lsls	r6, r4, #2
 801d494:	3e04      	subs	r6, #4
 801d496:	1996      	adds	r6, r2, r6
 801d498:	6031      	str	r1, [r6, #0]
 801d49a:	2900      	cmp	r1, #0
 801d49c:	d000      	beq.n	801d4a0 <rshift+0x78>
 801d49e:	3604      	adds	r6, #4
 801d4a0:	1ab1      	subs	r1, r6, r2
 801d4a2:	1089      	asrs	r1, r1, #2
 801d4a4:	6101      	str	r1, [r0, #16]
 801d4a6:	4296      	cmp	r6, r2
 801d4a8:	d101      	bne.n	801d4ae <rshift+0x86>
 801d4aa:	2300      	movs	r3, #0
 801d4ac:	6143      	str	r3, [r0, #20]
 801d4ae:	b005      	add	sp, #20
 801d4b0:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d4b2:	6837      	ldr	r7, [r6, #0]
 801d4b4:	9b03      	ldr	r3, [sp, #12]
 801d4b6:	409f      	lsls	r7, r3
 801d4b8:	430f      	orrs	r7, r1
 801d4ba:	4661      	mov	r1, ip
 801d4bc:	c180      	stmia	r1!, {r7}
 801d4be:	468c      	mov	ip, r1
 801d4c0:	9b01      	ldr	r3, [sp, #4]
 801d4c2:	ce02      	ldmia	r6!, {r1}
 801d4c4:	40d9      	lsrs	r1, r3
 801d4c6:	e7db      	b.n	801d480 <rshift+0x58>
 801d4c8:	c980      	ldmia	r1!, {r7}
 801d4ca:	c680      	stmia	r6!, {r7}
 801d4cc:	e7c3      	b.n	801d456 <rshift+0x2e>

0801d4ce <__hexdig_fun>:
 801d4ce:	0002      	movs	r2, r0
 801d4d0:	3a30      	subs	r2, #48	@ 0x30
 801d4d2:	0003      	movs	r3, r0
 801d4d4:	2a09      	cmp	r2, #9
 801d4d6:	d802      	bhi.n	801d4de <__hexdig_fun+0x10>
 801d4d8:	3b20      	subs	r3, #32
 801d4da:	b2d8      	uxtb	r0, r3
 801d4dc:	4770      	bx	lr
 801d4de:	0002      	movs	r2, r0
 801d4e0:	3a61      	subs	r2, #97	@ 0x61
 801d4e2:	2a05      	cmp	r2, #5
 801d4e4:	d801      	bhi.n	801d4ea <__hexdig_fun+0x1c>
 801d4e6:	3b47      	subs	r3, #71	@ 0x47
 801d4e8:	e7f7      	b.n	801d4da <__hexdig_fun+0xc>
 801d4ea:	001a      	movs	r2, r3
 801d4ec:	3a41      	subs	r2, #65	@ 0x41
 801d4ee:	2000      	movs	r0, #0
 801d4f0:	2a05      	cmp	r2, #5
 801d4f2:	d8f3      	bhi.n	801d4dc <__hexdig_fun+0xe>
 801d4f4:	3b27      	subs	r3, #39	@ 0x27
 801d4f6:	e7f0      	b.n	801d4da <__hexdig_fun+0xc>

0801d4f8 <__gethex>:
 801d4f8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d4fa:	b089      	sub	sp, #36	@ 0x24
 801d4fc:	9307      	str	r3, [sp, #28]
 801d4fe:	680b      	ldr	r3, [r1, #0]
 801d500:	9201      	str	r2, [sp, #4]
 801d502:	9003      	str	r0, [sp, #12]
 801d504:	9106      	str	r1, [sp, #24]
 801d506:	1c9a      	adds	r2, r3, #2
 801d508:	0011      	movs	r1, r2
 801d50a:	3201      	adds	r2, #1
 801d50c:	1e50      	subs	r0, r2, #1
 801d50e:	7800      	ldrb	r0, [r0, #0]
 801d510:	2830      	cmp	r0, #48	@ 0x30
 801d512:	d0f9      	beq.n	801d508 <__gethex+0x10>
 801d514:	1acb      	subs	r3, r1, r3
 801d516:	3b02      	subs	r3, #2
 801d518:	9305      	str	r3, [sp, #20]
 801d51a:	9100      	str	r1, [sp, #0]
 801d51c:	f7ff ffd7 	bl	801d4ce <__hexdig_fun>
 801d520:	2300      	movs	r3, #0
 801d522:	001d      	movs	r5, r3
 801d524:	9302      	str	r3, [sp, #8]
 801d526:	4298      	cmp	r0, r3
 801d528:	d11e      	bne.n	801d568 <__gethex+0x70>
 801d52a:	2201      	movs	r2, #1
 801d52c:	49a6      	ldr	r1, [pc, #664]	@ (801d7c8 <__gethex+0x2d0>)
 801d52e:	9800      	ldr	r0, [sp, #0]
 801d530:	f7fe ffd8 	bl	801c4e4 <strncmp>
 801d534:	0007      	movs	r7, r0
 801d536:	42a8      	cmp	r0, r5
 801d538:	d000      	beq.n	801d53c <__gethex+0x44>
 801d53a:	e06a      	b.n	801d612 <__gethex+0x11a>
 801d53c:	9b00      	ldr	r3, [sp, #0]
 801d53e:	7858      	ldrb	r0, [r3, #1]
 801d540:	1c5c      	adds	r4, r3, #1
 801d542:	f7ff ffc4 	bl	801d4ce <__hexdig_fun>
 801d546:	2301      	movs	r3, #1
 801d548:	9302      	str	r3, [sp, #8]
 801d54a:	42a8      	cmp	r0, r5
 801d54c:	d02f      	beq.n	801d5ae <__gethex+0xb6>
 801d54e:	9400      	str	r4, [sp, #0]
 801d550:	9b00      	ldr	r3, [sp, #0]
 801d552:	7818      	ldrb	r0, [r3, #0]
 801d554:	2830      	cmp	r0, #48	@ 0x30
 801d556:	d009      	beq.n	801d56c <__gethex+0x74>
 801d558:	f7ff ffb9 	bl	801d4ce <__hexdig_fun>
 801d55c:	4242      	negs	r2, r0
 801d55e:	4142      	adcs	r2, r0
 801d560:	2301      	movs	r3, #1
 801d562:	0025      	movs	r5, r4
 801d564:	9202      	str	r2, [sp, #8]
 801d566:	9305      	str	r3, [sp, #20]
 801d568:	9c00      	ldr	r4, [sp, #0]
 801d56a:	e004      	b.n	801d576 <__gethex+0x7e>
 801d56c:	9b00      	ldr	r3, [sp, #0]
 801d56e:	3301      	adds	r3, #1
 801d570:	9300      	str	r3, [sp, #0]
 801d572:	e7ed      	b.n	801d550 <__gethex+0x58>
 801d574:	3401      	adds	r4, #1
 801d576:	7820      	ldrb	r0, [r4, #0]
 801d578:	f7ff ffa9 	bl	801d4ce <__hexdig_fun>
 801d57c:	1e07      	subs	r7, r0, #0
 801d57e:	d1f9      	bne.n	801d574 <__gethex+0x7c>
 801d580:	2201      	movs	r2, #1
 801d582:	0020      	movs	r0, r4
 801d584:	4990      	ldr	r1, [pc, #576]	@ (801d7c8 <__gethex+0x2d0>)
 801d586:	f7fe ffad 	bl	801c4e4 <strncmp>
 801d58a:	2800      	cmp	r0, #0
 801d58c:	d10d      	bne.n	801d5aa <__gethex+0xb2>
 801d58e:	2d00      	cmp	r5, #0
 801d590:	d106      	bne.n	801d5a0 <__gethex+0xa8>
 801d592:	3401      	adds	r4, #1
 801d594:	0025      	movs	r5, r4
 801d596:	7820      	ldrb	r0, [r4, #0]
 801d598:	f7ff ff99 	bl	801d4ce <__hexdig_fun>
 801d59c:	2800      	cmp	r0, #0
 801d59e:	d102      	bne.n	801d5a6 <__gethex+0xae>
 801d5a0:	1b2d      	subs	r5, r5, r4
 801d5a2:	00af      	lsls	r7, r5, #2
 801d5a4:	e003      	b.n	801d5ae <__gethex+0xb6>
 801d5a6:	3401      	adds	r4, #1
 801d5a8:	e7f5      	b.n	801d596 <__gethex+0x9e>
 801d5aa:	2d00      	cmp	r5, #0
 801d5ac:	d1f8      	bne.n	801d5a0 <__gethex+0xa8>
 801d5ae:	2220      	movs	r2, #32
 801d5b0:	7823      	ldrb	r3, [r4, #0]
 801d5b2:	0026      	movs	r6, r4
 801d5b4:	4393      	bics	r3, r2
 801d5b6:	2b50      	cmp	r3, #80	@ 0x50
 801d5b8:	d11d      	bne.n	801d5f6 <__gethex+0xfe>
 801d5ba:	7863      	ldrb	r3, [r4, #1]
 801d5bc:	2b2b      	cmp	r3, #43	@ 0x2b
 801d5be:	d02d      	beq.n	801d61c <__gethex+0x124>
 801d5c0:	2b2d      	cmp	r3, #45	@ 0x2d
 801d5c2:	d02f      	beq.n	801d624 <__gethex+0x12c>
 801d5c4:	2300      	movs	r3, #0
 801d5c6:	1c66      	adds	r6, r4, #1
 801d5c8:	9304      	str	r3, [sp, #16]
 801d5ca:	7830      	ldrb	r0, [r6, #0]
 801d5cc:	f7ff ff7f 	bl	801d4ce <__hexdig_fun>
 801d5d0:	1e43      	subs	r3, r0, #1
 801d5d2:	b2db      	uxtb	r3, r3
 801d5d4:	0005      	movs	r5, r0
 801d5d6:	2b18      	cmp	r3, #24
 801d5d8:	d82a      	bhi.n	801d630 <__gethex+0x138>
 801d5da:	7870      	ldrb	r0, [r6, #1]
 801d5dc:	f7ff ff77 	bl	801d4ce <__hexdig_fun>
 801d5e0:	1e43      	subs	r3, r0, #1
 801d5e2:	b2db      	uxtb	r3, r3
 801d5e4:	3601      	adds	r6, #1
 801d5e6:	3d10      	subs	r5, #16
 801d5e8:	2b18      	cmp	r3, #24
 801d5ea:	d91d      	bls.n	801d628 <__gethex+0x130>
 801d5ec:	9b04      	ldr	r3, [sp, #16]
 801d5ee:	2b00      	cmp	r3, #0
 801d5f0:	d000      	beq.n	801d5f4 <__gethex+0xfc>
 801d5f2:	426d      	negs	r5, r5
 801d5f4:	197f      	adds	r7, r7, r5
 801d5f6:	9b06      	ldr	r3, [sp, #24]
 801d5f8:	601e      	str	r6, [r3, #0]
 801d5fa:	9b02      	ldr	r3, [sp, #8]
 801d5fc:	2b00      	cmp	r3, #0
 801d5fe:	d019      	beq.n	801d634 <__gethex+0x13c>
 801d600:	9b05      	ldr	r3, [sp, #20]
 801d602:	2606      	movs	r6, #6
 801d604:	425a      	negs	r2, r3
 801d606:	4153      	adcs	r3, r2
 801d608:	425b      	negs	r3, r3
 801d60a:	401e      	ands	r6, r3
 801d60c:	0030      	movs	r0, r6
 801d60e:	b009      	add	sp, #36	@ 0x24
 801d610:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801d612:	2301      	movs	r3, #1
 801d614:	2700      	movs	r7, #0
 801d616:	9c00      	ldr	r4, [sp, #0]
 801d618:	9302      	str	r3, [sp, #8]
 801d61a:	e7c8      	b.n	801d5ae <__gethex+0xb6>
 801d61c:	2300      	movs	r3, #0
 801d61e:	9304      	str	r3, [sp, #16]
 801d620:	1ca6      	adds	r6, r4, #2
 801d622:	e7d2      	b.n	801d5ca <__gethex+0xd2>
 801d624:	2301      	movs	r3, #1
 801d626:	e7fa      	b.n	801d61e <__gethex+0x126>
 801d628:	230a      	movs	r3, #10
 801d62a:	435d      	muls	r5, r3
 801d62c:	182d      	adds	r5, r5, r0
 801d62e:	e7d4      	b.n	801d5da <__gethex+0xe2>
 801d630:	0026      	movs	r6, r4
 801d632:	e7e0      	b.n	801d5f6 <__gethex+0xfe>
 801d634:	9b00      	ldr	r3, [sp, #0]
 801d636:	9902      	ldr	r1, [sp, #8]
 801d638:	1ae3      	subs	r3, r4, r3
 801d63a:	3b01      	subs	r3, #1
 801d63c:	2b07      	cmp	r3, #7
 801d63e:	dc0a      	bgt.n	801d656 <__gethex+0x15e>
 801d640:	9803      	ldr	r0, [sp, #12]
 801d642:	f000 fb19 	bl	801dc78 <_Balloc>
 801d646:	1e05      	subs	r5, r0, #0
 801d648:	d108      	bne.n	801d65c <__gethex+0x164>
 801d64a:	002a      	movs	r2, r5
 801d64c:	21e4      	movs	r1, #228	@ 0xe4
 801d64e:	4b5f      	ldr	r3, [pc, #380]	@ (801d7cc <__gethex+0x2d4>)
 801d650:	485f      	ldr	r0, [pc, #380]	@ (801d7d0 <__gethex+0x2d8>)
 801d652:	f001 fc03 	bl	801ee5c <__assert_func>
 801d656:	3101      	adds	r1, #1
 801d658:	105b      	asrs	r3, r3, #1
 801d65a:	e7ef      	b.n	801d63c <__gethex+0x144>
 801d65c:	0003      	movs	r3, r0
 801d65e:	3314      	adds	r3, #20
 801d660:	9302      	str	r3, [sp, #8]
 801d662:	9305      	str	r3, [sp, #20]
 801d664:	2300      	movs	r3, #0
 801d666:	001e      	movs	r6, r3
 801d668:	9304      	str	r3, [sp, #16]
 801d66a:	9b00      	ldr	r3, [sp, #0]
 801d66c:	42a3      	cmp	r3, r4
 801d66e:	d338      	bcc.n	801d6e2 <__gethex+0x1ea>
 801d670:	9c05      	ldr	r4, [sp, #20]
 801d672:	9b02      	ldr	r3, [sp, #8]
 801d674:	c440      	stmia	r4!, {r6}
 801d676:	1ae4      	subs	r4, r4, r3
 801d678:	10a4      	asrs	r4, r4, #2
 801d67a:	0030      	movs	r0, r6
 801d67c:	612c      	str	r4, [r5, #16]
 801d67e:	f000 fbf3 	bl	801de68 <__hi0bits>
 801d682:	9b01      	ldr	r3, [sp, #4]
 801d684:	0164      	lsls	r4, r4, #5
 801d686:	681b      	ldr	r3, [r3, #0]
 801d688:	1a26      	subs	r6, r4, r0
 801d68a:	9300      	str	r3, [sp, #0]
 801d68c:	429e      	cmp	r6, r3
 801d68e:	dd52      	ble.n	801d736 <__gethex+0x23e>
 801d690:	1af6      	subs	r6, r6, r3
 801d692:	0031      	movs	r1, r6
 801d694:	0028      	movs	r0, r5
 801d696:	f000 ff96 	bl	801e5c6 <__any_on>
 801d69a:	1e04      	subs	r4, r0, #0
 801d69c:	d00f      	beq.n	801d6be <__gethex+0x1c6>
 801d69e:	2401      	movs	r4, #1
 801d6a0:	231f      	movs	r3, #31
 801d6a2:	0020      	movs	r0, r4
 801d6a4:	1e72      	subs	r2, r6, #1
 801d6a6:	4013      	ands	r3, r2
 801d6a8:	4098      	lsls	r0, r3
 801d6aa:	0003      	movs	r3, r0
 801d6ac:	1151      	asrs	r1, r2, #5
 801d6ae:	9802      	ldr	r0, [sp, #8]
 801d6b0:	0089      	lsls	r1, r1, #2
 801d6b2:	5809      	ldr	r1, [r1, r0]
 801d6b4:	4219      	tst	r1, r3
 801d6b6:	d002      	beq.n	801d6be <__gethex+0x1c6>
 801d6b8:	42a2      	cmp	r2, r4
 801d6ba:	dc34      	bgt.n	801d726 <__gethex+0x22e>
 801d6bc:	2402      	movs	r4, #2
 801d6be:	0031      	movs	r1, r6
 801d6c0:	0028      	movs	r0, r5
 801d6c2:	f7ff feb1 	bl	801d428 <rshift>
 801d6c6:	19bf      	adds	r7, r7, r6
 801d6c8:	9b01      	ldr	r3, [sp, #4]
 801d6ca:	689b      	ldr	r3, [r3, #8]
 801d6cc:	42bb      	cmp	r3, r7
 801d6ce:	da42      	bge.n	801d756 <__gethex+0x25e>
 801d6d0:	0029      	movs	r1, r5
 801d6d2:	9803      	ldr	r0, [sp, #12]
 801d6d4:	f000 fb14 	bl	801dd00 <_Bfree>
 801d6d8:	2300      	movs	r3, #0
 801d6da:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801d6dc:	26a3      	movs	r6, #163	@ 0xa3
 801d6de:	6013      	str	r3, [r2, #0]
 801d6e0:	e794      	b.n	801d60c <__gethex+0x114>
 801d6e2:	3c01      	subs	r4, #1
 801d6e4:	7823      	ldrb	r3, [r4, #0]
 801d6e6:	2b2e      	cmp	r3, #46	@ 0x2e
 801d6e8:	d012      	beq.n	801d710 <__gethex+0x218>
 801d6ea:	9b04      	ldr	r3, [sp, #16]
 801d6ec:	2b20      	cmp	r3, #32
 801d6ee:	d104      	bne.n	801d6fa <__gethex+0x202>
 801d6f0:	9b05      	ldr	r3, [sp, #20]
 801d6f2:	c340      	stmia	r3!, {r6}
 801d6f4:	2600      	movs	r6, #0
 801d6f6:	9305      	str	r3, [sp, #20]
 801d6f8:	9604      	str	r6, [sp, #16]
 801d6fa:	7820      	ldrb	r0, [r4, #0]
 801d6fc:	f7ff fee7 	bl	801d4ce <__hexdig_fun>
 801d700:	230f      	movs	r3, #15
 801d702:	4018      	ands	r0, r3
 801d704:	9b04      	ldr	r3, [sp, #16]
 801d706:	4098      	lsls	r0, r3
 801d708:	3304      	adds	r3, #4
 801d70a:	4306      	orrs	r6, r0
 801d70c:	9304      	str	r3, [sp, #16]
 801d70e:	e7ac      	b.n	801d66a <__gethex+0x172>
 801d710:	9b00      	ldr	r3, [sp, #0]
 801d712:	42a3      	cmp	r3, r4
 801d714:	d8e9      	bhi.n	801d6ea <__gethex+0x1f2>
 801d716:	2201      	movs	r2, #1
 801d718:	0020      	movs	r0, r4
 801d71a:	492b      	ldr	r1, [pc, #172]	@ (801d7c8 <__gethex+0x2d0>)
 801d71c:	f7fe fee2 	bl	801c4e4 <strncmp>
 801d720:	2800      	cmp	r0, #0
 801d722:	d1e2      	bne.n	801d6ea <__gethex+0x1f2>
 801d724:	e7a1      	b.n	801d66a <__gethex+0x172>
 801d726:	0028      	movs	r0, r5
 801d728:	1eb1      	subs	r1, r6, #2
 801d72a:	f000 ff4c 	bl	801e5c6 <__any_on>
 801d72e:	2800      	cmp	r0, #0
 801d730:	d0c4      	beq.n	801d6bc <__gethex+0x1c4>
 801d732:	2403      	movs	r4, #3
 801d734:	e7c3      	b.n	801d6be <__gethex+0x1c6>
 801d736:	9b00      	ldr	r3, [sp, #0]
 801d738:	2400      	movs	r4, #0
 801d73a:	429e      	cmp	r6, r3
 801d73c:	dac4      	bge.n	801d6c8 <__gethex+0x1d0>
 801d73e:	1b9e      	subs	r6, r3, r6
 801d740:	0029      	movs	r1, r5
 801d742:	0032      	movs	r2, r6
 801d744:	9803      	ldr	r0, [sp, #12]
 801d746:	f000 fd05 	bl	801e154 <__lshift>
 801d74a:	0003      	movs	r3, r0
 801d74c:	3314      	adds	r3, #20
 801d74e:	0005      	movs	r5, r0
 801d750:	1bbf      	subs	r7, r7, r6
 801d752:	9302      	str	r3, [sp, #8]
 801d754:	e7b8      	b.n	801d6c8 <__gethex+0x1d0>
 801d756:	9b01      	ldr	r3, [sp, #4]
 801d758:	685e      	ldr	r6, [r3, #4]
 801d75a:	42be      	cmp	r6, r7
 801d75c:	dd6f      	ble.n	801d83e <__gethex+0x346>
 801d75e:	9b00      	ldr	r3, [sp, #0]
 801d760:	1bf6      	subs	r6, r6, r7
 801d762:	42b3      	cmp	r3, r6
 801d764:	dc36      	bgt.n	801d7d4 <__gethex+0x2dc>
 801d766:	9b01      	ldr	r3, [sp, #4]
 801d768:	68db      	ldr	r3, [r3, #12]
 801d76a:	2b02      	cmp	r3, #2
 801d76c:	d024      	beq.n	801d7b8 <__gethex+0x2c0>
 801d76e:	2b03      	cmp	r3, #3
 801d770:	d026      	beq.n	801d7c0 <__gethex+0x2c8>
 801d772:	2b01      	cmp	r3, #1
 801d774:	d117      	bne.n	801d7a6 <__gethex+0x2ae>
 801d776:	9b00      	ldr	r3, [sp, #0]
 801d778:	42b3      	cmp	r3, r6
 801d77a:	d114      	bne.n	801d7a6 <__gethex+0x2ae>
 801d77c:	2b01      	cmp	r3, #1
 801d77e:	d10b      	bne.n	801d798 <__gethex+0x2a0>
 801d780:	9b01      	ldr	r3, [sp, #4]
 801d782:	9a07      	ldr	r2, [sp, #28]
 801d784:	685b      	ldr	r3, [r3, #4]
 801d786:	2662      	movs	r6, #98	@ 0x62
 801d788:	6013      	str	r3, [r2, #0]
 801d78a:	2301      	movs	r3, #1
 801d78c:	9a02      	ldr	r2, [sp, #8]
 801d78e:	612b      	str	r3, [r5, #16]
 801d790:	6013      	str	r3, [r2, #0]
 801d792:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d794:	601d      	str	r5, [r3, #0]
 801d796:	e739      	b.n	801d60c <__gethex+0x114>
 801d798:	9900      	ldr	r1, [sp, #0]
 801d79a:	0028      	movs	r0, r5
 801d79c:	3901      	subs	r1, #1
 801d79e:	f000 ff12 	bl	801e5c6 <__any_on>
 801d7a2:	2800      	cmp	r0, #0
 801d7a4:	d1ec      	bne.n	801d780 <__gethex+0x288>
 801d7a6:	0029      	movs	r1, r5
 801d7a8:	9803      	ldr	r0, [sp, #12]
 801d7aa:	f000 faa9 	bl	801dd00 <_Bfree>
 801d7ae:	2300      	movs	r3, #0
 801d7b0:	9a0e      	ldr	r2, [sp, #56]	@ 0x38
 801d7b2:	2650      	movs	r6, #80	@ 0x50
 801d7b4:	6013      	str	r3, [r2, #0]
 801d7b6:	e729      	b.n	801d60c <__gethex+0x114>
 801d7b8:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d7ba:	2b00      	cmp	r3, #0
 801d7bc:	d1f3      	bne.n	801d7a6 <__gethex+0x2ae>
 801d7be:	e7df      	b.n	801d780 <__gethex+0x288>
 801d7c0:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d7c2:	2b00      	cmp	r3, #0
 801d7c4:	d1dc      	bne.n	801d780 <__gethex+0x288>
 801d7c6:	e7ee      	b.n	801d7a6 <__gethex+0x2ae>
 801d7c8:	08020f50 	.word	0x08020f50
 801d7cc:	08021161 	.word	0x08021161
 801d7d0:	08021172 	.word	0x08021172
 801d7d4:	1e77      	subs	r7, r6, #1
 801d7d6:	2c00      	cmp	r4, #0
 801d7d8:	d12f      	bne.n	801d83a <__gethex+0x342>
 801d7da:	2f00      	cmp	r7, #0
 801d7dc:	d004      	beq.n	801d7e8 <__gethex+0x2f0>
 801d7de:	0039      	movs	r1, r7
 801d7e0:	0028      	movs	r0, r5
 801d7e2:	f000 fef0 	bl	801e5c6 <__any_on>
 801d7e6:	0004      	movs	r4, r0
 801d7e8:	231f      	movs	r3, #31
 801d7ea:	117a      	asrs	r2, r7, #5
 801d7ec:	401f      	ands	r7, r3
 801d7ee:	3b1e      	subs	r3, #30
 801d7f0:	40bb      	lsls	r3, r7
 801d7f2:	9902      	ldr	r1, [sp, #8]
 801d7f4:	0092      	lsls	r2, r2, #2
 801d7f6:	5852      	ldr	r2, [r2, r1]
 801d7f8:	421a      	tst	r2, r3
 801d7fa:	d001      	beq.n	801d800 <__gethex+0x308>
 801d7fc:	2302      	movs	r3, #2
 801d7fe:	431c      	orrs	r4, r3
 801d800:	9b00      	ldr	r3, [sp, #0]
 801d802:	0031      	movs	r1, r6
 801d804:	1b9b      	subs	r3, r3, r6
 801d806:	2602      	movs	r6, #2
 801d808:	0028      	movs	r0, r5
 801d80a:	9300      	str	r3, [sp, #0]
 801d80c:	f7ff fe0c 	bl	801d428 <rshift>
 801d810:	9b01      	ldr	r3, [sp, #4]
 801d812:	685f      	ldr	r7, [r3, #4]
 801d814:	2c00      	cmp	r4, #0
 801d816:	d03f      	beq.n	801d898 <__gethex+0x3a0>
 801d818:	9b01      	ldr	r3, [sp, #4]
 801d81a:	68db      	ldr	r3, [r3, #12]
 801d81c:	2b02      	cmp	r3, #2
 801d81e:	d010      	beq.n	801d842 <__gethex+0x34a>
 801d820:	2b03      	cmp	r3, #3
 801d822:	d012      	beq.n	801d84a <__gethex+0x352>
 801d824:	2b01      	cmp	r3, #1
 801d826:	d106      	bne.n	801d836 <__gethex+0x33e>
 801d828:	07a2      	lsls	r2, r4, #30
 801d82a:	d504      	bpl.n	801d836 <__gethex+0x33e>
 801d82c:	9a02      	ldr	r2, [sp, #8]
 801d82e:	6812      	ldr	r2, [r2, #0]
 801d830:	4314      	orrs	r4, r2
 801d832:	421c      	tst	r4, r3
 801d834:	d10c      	bne.n	801d850 <__gethex+0x358>
 801d836:	2310      	movs	r3, #16
 801d838:	e02d      	b.n	801d896 <__gethex+0x39e>
 801d83a:	2401      	movs	r4, #1
 801d83c:	e7d4      	b.n	801d7e8 <__gethex+0x2f0>
 801d83e:	2601      	movs	r6, #1
 801d840:	e7e8      	b.n	801d814 <__gethex+0x31c>
 801d842:	2301      	movs	r3, #1
 801d844:	9a0f      	ldr	r2, [sp, #60]	@ 0x3c
 801d846:	1a9b      	subs	r3, r3, r2
 801d848:	930f      	str	r3, [sp, #60]	@ 0x3c
 801d84a:	9b0f      	ldr	r3, [sp, #60]	@ 0x3c
 801d84c:	2b00      	cmp	r3, #0
 801d84e:	d0f2      	beq.n	801d836 <__gethex+0x33e>
 801d850:	692b      	ldr	r3, [r5, #16]
 801d852:	2000      	movs	r0, #0
 801d854:	9302      	str	r3, [sp, #8]
 801d856:	009b      	lsls	r3, r3, #2
 801d858:	9304      	str	r3, [sp, #16]
 801d85a:	002b      	movs	r3, r5
 801d85c:	9a04      	ldr	r2, [sp, #16]
 801d85e:	3314      	adds	r3, #20
 801d860:	1899      	adds	r1, r3, r2
 801d862:	681a      	ldr	r2, [r3, #0]
 801d864:	1c54      	adds	r4, r2, #1
 801d866:	d01c      	beq.n	801d8a2 <__gethex+0x3aa>
 801d868:	3201      	adds	r2, #1
 801d86a:	601a      	str	r2, [r3, #0]
 801d86c:	002b      	movs	r3, r5
 801d86e:	3314      	adds	r3, #20
 801d870:	2e02      	cmp	r6, #2
 801d872:	d13f      	bne.n	801d8f4 <__gethex+0x3fc>
 801d874:	9a01      	ldr	r2, [sp, #4]
 801d876:	9900      	ldr	r1, [sp, #0]
 801d878:	6812      	ldr	r2, [r2, #0]
 801d87a:	3a01      	subs	r2, #1
 801d87c:	428a      	cmp	r2, r1
 801d87e:	d109      	bne.n	801d894 <__gethex+0x39c>
 801d880:	000a      	movs	r2, r1
 801d882:	201f      	movs	r0, #31
 801d884:	4010      	ands	r0, r2
 801d886:	2201      	movs	r2, #1
 801d888:	4082      	lsls	r2, r0
 801d88a:	1149      	asrs	r1, r1, #5
 801d88c:	0089      	lsls	r1, r1, #2
 801d88e:	58cb      	ldr	r3, [r1, r3]
 801d890:	4213      	tst	r3, r2
 801d892:	d13d      	bne.n	801d910 <__gethex+0x418>
 801d894:	2320      	movs	r3, #32
 801d896:	431e      	orrs	r6, r3
 801d898:	9b0e      	ldr	r3, [sp, #56]	@ 0x38
 801d89a:	601d      	str	r5, [r3, #0]
 801d89c:	9b07      	ldr	r3, [sp, #28]
 801d89e:	601f      	str	r7, [r3, #0]
 801d8a0:	e6b4      	b.n	801d60c <__gethex+0x114>
 801d8a2:	c301      	stmia	r3!, {r0}
 801d8a4:	4299      	cmp	r1, r3
 801d8a6:	d8dc      	bhi.n	801d862 <__gethex+0x36a>
 801d8a8:	68ab      	ldr	r3, [r5, #8]
 801d8aa:	9a02      	ldr	r2, [sp, #8]
 801d8ac:	429a      	cmp	r2, r3
 801d8ae:	db18      	blt.n	801d8e2 <__gethex+0x3ea>
 801d8b0:	6869      	ldr	r1, [r5, #4]
 801d8b2:	9803      	ldr	r0, [sp, #12]
 801d8b4:	3101      	adds	r1, #1
 801d8b6:	f000 f9df 	bl	801dc78 <_Balloc>
 801d8ba:	1e04      	subs	r4, r0, #0
 801d8bc:	d104      	bne.n	801d8c8 <__gethex+0x3d0>
 801d8be:	0022      	movs	r2, r4
 801d8c0:	2184      	movs	r1, #132	@ 0x84
 801d8c2:	4b1d      	ldr	r3, [pc, #116]	@ (801d938 <__gethex+0x440>)
 801d8c4:	481d      	ldr	r0, [pc, #116]	@ (801d93c <__gethex+0x444>)
 801d8c6:	e6c4      	b.n	801d652 <__gethex+0x15a>
 801d8c8:	0029      	movs	r1, r5
 801d8ca:	692a      	ldr	r2, [r5, #16]
 801d8cc:	310c      	adds	r1, #12
 801d8ce:	3202      	adds	r2, #2
 801d8d0:	0092      	lsls	r2, r2, #2
 801d8d2:	300c      	adds	r0, #12
 801d8d4:	f7fe fecc 	bl	801c670 <memcpy>
 801d8d8:	0029      	movs	r1, r5
 801d8da:	9803      	ldr	r0, [sp, #12]
 801d8dc:	f000 fa10 	bl	801dd00 <_Bfree>
 801d8e0:	0025      	movs	r5, r4
 801d8e2:	692b      	ldr	r3, [r5, #16]
 801d8e4:	1c5a      	adds	r2, r3, #1
 801d8e6:	612a      	str	r2, [r5, #16]
 801d8e8:	2201      	movs	r2, #1
 801d8ea:	3304      	adds	r3, #4
 801d8ec:	009b      	lsls	r3, r3, #2
 801d8ee:	18eb      	adds	r3, r5, r3
 801d8f0:	605a      	str	r2, [r3, #4]
 801d8f2:	e7bb      	b.n	801d86c <__gethex+0x374>
 801d8f4:	692a      	ldr	r2, [r5, #16]
 801d8f6:	9902      	ldr	r1, [sp, #8]
 801d8f8:	428a      	cmp	r2, r1
 801d8fa:	dd0b      	ble.n	801d914 <__gethex+0x41c>
 801d8fc:	2101      	movs	r1, #1
 801d8fe:	0028      	movs	r0, r5
 801d900:	f7ff fd92 	bl	801d428 <rshift>
 801d904:	9b01      	ldr	r3, [sp, #4]
 801d906:	3701      	adds	r7, #1
 801d908:	689b      	ldr	r3, [r3, #8]
 801d90a:	42bb      	cmp	r3, r7
 801d90c:	da00      	bge.n	801d910 <__gethex+0x418>
 801d90e:	e6df      	b.n	801d6d0 <__gethex+0x1d8>
 801d910:	2601      	movs	r6, #1
 801d912:	e7bf      	b.n	801d894 <__gethex+0x39c>
 801d914:	221f      	movs	r2, #31
 801d916:	9c00      	ldr	r4, [sp, #0]
 801d918:	9900      	ldr	r1, [sp, #0]
 801d91a:	4014      	ands	r4, r2
 801d91c:	4211      	tst	r1, r2
 801d91e:	d0f7      	beq.n	801d910 <__gethex+0x418>
 801d920:	9a04      	ldr	r2, [sp, #16]
 801d922:	189b      	adds	r3, r3, r2
 801d924:	3b04      	subs	r3, #4
 801d926:	6818      	ldr	r0, [r3, #0]
 801d928:	f000 fa9e 	bl	801de68 <__hi0bits>
 801d92c:	2320      	movs	r3, #32
 801d92e:	1b1b      	subs	r3, r3, r4
 801d930:	4298      	cmp	r0, r3
 801d932:	dbe3      	blt.n	801d8fc <__gethex+0x404>
 801d934:	e7ec      	b.n	801d910 <__gethex+0x418>
 801d936:	46c0      	nop			@ (mov r8, r8)
 801d938:	08021161 	.word	0x08021161
 801d93c:	08021172 	.word	0x08021172

0801d940 <L_shift>:
 801d940:	2308      	movs	r3, #8
 801d942:	b570      	push	{r4, r5, r6, lr}
 801d944:	2520      	movs	r5, #32
 801d946:	1a9a      	subs	r2, r3, r2
 801d948:	0092      	lsls	r2, r2, #2
 801d94a:	1aad      	subs	r5, r5, r2
 801d94c:	6843      	ldr	r3, [r0, #4]
 801d94e:	6804      	ldr	r4, [r0, #0]
 801d950:	001e      	movs	r6, r3
 801d952:	40ae      	lsls	r6, r5
 801d954:	40d3      	lsrs	r3, r2
 801d956:	4334      	orrs	r4, r6
 801d958:	6004      	str	r4, [r0, #0]
 801d95a:	6043      	str	r3, [r0, #4]
 801d95c:	3004      	adds	r0, #4
 801d95e:	4288      	cmp	r0, r1
 801d960:	d3f4      	bcc.n	801d94c <L_shift+0xc>
 801d962:	bd70      	pop	{r4, r5, r6, pc}

0801d964 <__match>:
 801d964:	b530      	push	{r4, r5, lr}
 801d966:	6803      	ldr	r3, [r0, #0]
 801d968:	780c      	ldrb	r4, [r1, #0]
 801d96a:	3301      	adds	r3, #1
 801d96c:	2c00      	cmp	r4, #0
 801d96e:	d102      	bne.n	801d976 <__match+0x12>
 801d970:	6003      	str	r3, [r0, #0]
 801d972:	2001      	movs	r0, #1
 801d974:	bd30      	pop	{r4, r5, pc}
 801d976:	781a      	ldrb	r2, [r3, #0]
 801d978:	0015      	movs	r5, r2
 801d97a:	3d41      	subs	r5, #65	@ 0x41
 801d97c:	2d19      	cmp	r5, #25
 801d97e:	d800      	bhi.n	801d982 <__match+0x1e>
 801d980:	3220      	adds	r2, #32
 801d982:	3101      	adds	r1, #1
 801d984:	42a2      	cmp	r2, r4
 801d986:	d0ef      	beq.n	801d968 <__match+0x4>
 801d988:	2000      	movs	r0, #0
 801d98a:	e7f3      	b.n	801d974 <__match+0x10>

0801d98c <__hexnan>:
 801d98c:	b5f0      	push	{r4, r5, r6, r7, lr}
 801d98e:	680b      	ldr	r3, [r1, #0]
 801d990:	b08b      	sub	sp, #44	@ 0x2c
 801d992:	9201      	str	r2, [sp, #4]
 801d994:	9901      	ldr	r1, [sp, #4]
 801d996:	115a      	asrs	r2, r3, #5
 801d998:	0092      	lsls	r2, r2, #2
 801d99a:	188a      	adds	r2, r1, r2
 801d99c:	9202      	str	r2, [sp, #8]
 801d99e:	0019      	movs	r1, r3
 801d9a0:	221f      	movs	r2, #31
 801d9a2:	4011      	ands	r1, r2
 801d9a4:	9008      	str	r0, [sp, #32]
 801d9a6:	9106      	str	r1, [sp, #24]
 801d9a8:	4213      	tst	r3, r2
 801d9aa:	d002      	beq.n	801d9b2 <__hexnan+0x26>
 801d9ac:	9b02      	ldr	r3, [sp, #8]
 801d9ae:	3304      	adds	r3, #4
 801d9b0:	9302      	str	r3, [sp, #8]
 801d9b2:	9b02      	ldr	r3, [sp, #8]
 801d9b4:	2500      	movs	r5, #0
 801d9b6:	1f1f      	subs	r7, r3, #4
 801d9b8:	003e      	movs	r6, r7
 801d9ba:	003c      	movs	r4, r7
 801d9bc:	9b08      	ldr	r3, [sp, #32]
 801d9be:	603d      	str	r5, [r7, #0]
 801d9c0:	681b      	ldr	r3, [r3, #0]
 801d9c2:	9507      	str	r5, [sp, #28]
 801d9c4:	9305      	str	r3, [sp, #20]
 801d9c6:	9503      	str	r5, [sp, #12]
 801d9c8:	9b05      	ldr	r3, [sp, #20]
 801d9ca:	3301      	adds	r3, #1
 801d9cc:	9309      	str	r3, [sp, #36]	@ 0x24
 801d9ce:	9b05      	ldr	r3, [sp, #20]
 801d9d0:	785b      	ldrb	r3, [r3, #1]
 801d9d2:	9304      	str	r3, [sp, #16]
 801d9d4:	2b00      	cmp	r3, #0
 801d9d6:	d028      	beq.n	801da2a <__hexnan+0x9e>
 801d9d8:	9804      	ldr	r0, [sp, #16]
 801d9da:	f7ff fd78 	bl	801d4ce <__hexdig_fun>
 801d9de:	2800      	cmp	r0, #0
 801d9e0:	d155      	bne.n	801da8e <__hexnan+0x102>
 801d9e2:	9b04      	ldr	r3, [sp, #16]
 801d9e4:	2b20      	cmp	r3, #32
 801d9e6:	d819      	bhi.n	801da1c <__hexnan+0x90>
 801d9e8:	9b03      	ldr	r3, [sp, #12]
 801d9ea:	9a07      	ldr	r2, [sp, #28]
 801d9ec:	4293      	cmp	r3, r2
 801d9ee:	dd12      	ble.n	801da16 <__hexnan+0x8a>
 801d9f0:	42b4      	cmp	r4, r6
 801d9f2:	d206      	bcs.n	801da02 <__hexnan+0x76>
 801d9f4:	2d07      	cmp	r5, #7
 801d9f6:	dc04      	bgt.n	801da02 <__hexnan+0x76>
 801d9f8:	002a      	movs	r2, r5
 801d9fa:	0031      	movs	r1, r6
 801d9fc:	0020      	movs	r0, r4
 801d9fe:	f7ff ff9f 	bl	801d940 <L_shift>
 801da02:	9b01      	ldr	r3, [sp, #4]
 801da04:	2508      	movs	r5, #8
 801da06:	429c      	cmp	r4, r3
 801da08:	d905      	bls.n	801da16 <__hexnan+0x8a>
 801da0a:	1f26      	subs	r6, r4, #4
 801da0c:	2500      	movs	r5, #0
 801da0e:	0034      	movs	r4, r6
 801da10:	9b03      	ldr	r3, [sp, #12]
 801da12:	6035      	str	r5, [r6, #0]
 801da14:	9307      	str	r3, [sp, #28]
 801da16:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801da18:	9305      	str	r3, [sp, #20]
 801da1a:	e7d5      	b.n	801d9c8 <__hexnan+0x3c>
 801da1c:	9b04      	ldr	r3, [sp, #16]
 801da1e:	2b29      	cmp	r3, #41	@ 0x29
 801da20:	d15a      	bne.n	801dad8 <__hexnan+0x14c>
 801da22:	9b05      	ldr	r3, [sp, #20]
 801da24:	9a08      	ldr	r2, [sp, #32]
 801da26:	3302      	adds	r3, #2
 801da28:	6013      	str	r3, [r2, #0]
 801da2a:	9b03      	ldr	r3, [sp, #12]
 801da2c:	2b00      	cmp	r3, #0
 801da2e:	d053      	beq.n	801dad8 <__hexnan+0x14c>
 801da30:	42b4      	cmp	r4, r6
 801da32:	d206      	bcs.n	801da42 <__hexnan+0xb6>
 801da34:	2d07      	cmp	r5, #7
 801da36:	dc04      	bgt.n	801da42 <__hexnan+0xb6>
 801da38:	002a      	movs	r2, r5
 801da3a:	0031      	movs	r1, r6
 801da3c:	0020      	movs	r0, r4
 801da3e:	f7ff ff7f 	bl	801d940 <L_shift>
 801da42:	9b01      	ldr	r3, [sp, #4]
 801da44:	429c      	cmp	r4, r3
 801da46:	d936      	bls.n	801dab6 <__hexnan+0x12a>
 801da48:	001a      	movs	r2, r3
 801da4a:	0023      	movs	r3, r4
 801da4c:	cb02      	ldmia	r3!, {r1}
 801da4e:	c202      	stmia	r2!, {r1}
 801da50:	429f      	cmp	r7, r3
 801da52:	d2fb      	bcs.n	801da4c <__hexnan+0xc0>
 801da54:	9b02      	ldr	r3, [sp, #8]
 801da56:	1c61      	adds	r1, r4, #1
 801da58:	1eda      	subs	r2, r3, #3
 801da5a:	2304      	movs	r3, #4
 801da5c:	4291      	cmp	r1, r2
 801da5e:	d805      	bhi.n	801da6c <__hexnan+0xe0>
 801da60:	9b02      	ldr	r3, [sp, #8]
 801da62:	3b04      	subs	r3, #4
 801da64:	1b1b      	subs	r3, r3, r4
 801da66:	089b      	lsrs	r3, r3, #2
 801da68:	3301      	adds	r3, #1
 801da6a:	009b      	lsls	r3, r3, #2
 801da6c:	9a01      	ldr	r2, [sp, #4]
 801da6e:	18d3      	adds	r3, r2, r3
 801da70:	2200      	movs	r2, #0
 801da72:	c304      	stmia	r3!, {r2}
 801da74:	429f      	cmp	r7, r3
 801da76:	d2fc      	bcs.n	801da72 <__hexnan+0xe6>
 801da78:	683b      	ldr	r3, [r7, #0]
 801da7a:	2b00      	cmp	r3, #0
 801da7c:	d104      	bne.n	801da88 <__hexnan+0xfc>
 801da7e:	9b01      	ldr	r3, [sp, #4]
 801da80:	429f      	cmp	r7, r3
 801da82:	d127      	bne.n	801dad4 <__hexnan+0x148>
 801da84:	2301      	movs	r3, #1
 801da86:	603b      	str	r3, [r7, #0]
 801da88:	2005      	movs	r0, #5
 801da8a:	b00b      	add	sp, #44	@ 0x2c
 801da8c:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801da8e:	9b03      	ldr	r3, [sp, #12]
 801da90:	3501      	adds	r5, #1
 801da92:	3301      	adds	r3, #1
 801da94:	9303      	str	r3, [sp, #12]
 801da96:	2d08      	cmp	r5, #8
 801da98:	dd06      	ble.n	801daa8 <__hexnan+0x11c>
 801da9a:	9b01      	ldr	r3, [sp, #4]
 801da9c:	429c      	cmp	r4, r3
 801da9e:	d9ba      	bls.n	801da16 <__hexnan+0x8a>
 801daa0:	2300      	movs	r3, #0
 801daa2:	2501      	movs	r5, #1
 801daa4:	3c04      	subs	r4, #4
 801daa6:	6023      	str	r3, [r4, #0]
 801daa8:	220f      	movs	r2, #15
 801daaa:	6823      	ldr	r3, [r4, #0]
 801daac:	4010      	ands	r0, r2
 801daae:	011b      	lsls	r3, r3, #4
 801dab0:	4303      	orrs	r3, r0
 801dab2:	6023      	str	r3, [r4, #0]
 801dab4:	e7af      	b.n	801da16 <__hexnan+0x8a>
 801dab6:	9b06      	ldr	r3, [sp, #24]
 801dab8:	2b00      	cmp	r3, #0
 801daba:	d0dd      	beq.n	801da78 <__hexnan+0xec>
 801dabc:	2320      	movs	r3, #32
 801dabe:	9a06      	ldr	r2, [sp, #24]
 801dac0:	9902      	ldr	r1, [sp, #8]
 801dac2:	1a9b      	subs	r3, r3, r2
 801dac4:	2201      	movs	r2, #1
 801dac6:	4252      	negs	r2, r2
 801dac8:	40da      	lsrs	r2, r3
 801daca:	3904      	subs	r1, #4
 801dacc:	680b      	ldr	r3, [r1, #0]
 801dace:	4013      	ands	r3, r2
 801dad0:	600b      	str	r3, [r1, #0]
 801dad2:	e7d1      	b.n	801da78 <__hexnan+0xec>
 801dad4:	3f04      	subs	r7, #4
 801dad6:	e7cf      	b.n	801da78 <__hexnan+0xec>
 801dad8:	2004      	movs	r0, #4
 801dada:	e7d6      	b.n	801da8a <__hexnan+0xfe>

0801dadc <malloc>:
 801dadc:	b510      	push	{r4, lr}
 801dade:	4b03      	ldr	r3, [pc, #12]	@ (801daec <malloc+0x10>)
 801dae0:	0001      	movs	r1, r0
 801dae2:	6818      	ldr	r0, [r3, #0]
 801dae4:	f000 f826 	bl	801db34 <_malloc_r>
 801dae8:	bd10      	pop	{r4, pc}
 801daea:	46c0      	nop			@ (mov r8, r8)
 801daec:	200003c8 	.word	0x200003c8

0801daf0 <sbrk_aligned>:
 801daf0:	b570      	push	{r4, r5, r6, lr}
 801daf2:	4e0f      	ldr	r6, [pc, #60]	@ (801db30 <sbrk_aligned+0x40>)
 801daf4:	000d      	movs	r5, r1
 801daf6:	6831      	ldr	r1, [r6, #0]
 801daf8:	0004      	movs	r4, r0
 801dafa:	2900      	cmp	r1, #0
 801dafc:	d102      	bne.n	801db04 <sbrk_aligned+0x14>
 801dafe:	f001 f99b 	bl	801ee38 <_sbrk_r>
 801db02:	6030      	str	r0, [r6, #0]
 801db04:	0029      	movs	r1, r5
 801db06:	0020      	movs	r0, r4
 801db08:	f001 f996 	bl	801ee38 <_sbrk_r>
 801db0c:	1c43      	adds	r3, r0, #1
 801db0e:	d103      	bne.n	801db18 <sbrk_aligned+0x28>
 801db10:	2501      	movs	r5, #1
 801db12:	426d      	negs	r5, r5
 801db14:	0028      	movs	r0, r5
 801db16:	bd70      	pop	{r4, r5, r6, pc}
 801db18:	2303      	movs	r3, #3
 801db1a:	1cc5      	adds	r5, r0, #3
 801db1c:	439d      	bics	r5, r3
 801db1e:	42a8      	cmp	r0, r5
 801db20:	d0f8      	beq.n	801db14 <sbrk_aligned+0x24>
 801db22:	1a29      	subs	r1, r5, r0
 801db24:	0020      	movs	r0, r4
 801db26:	f001 f987 	bl	801ee38 <_sbrk_r>
 801db2a:	3001      	adds	r0, #1
 801db2c:	d1f2      	bne.n	801db14 <sbrk_aligned+0x24>
 801db2e:	e7ef      	b.n	801db10 <sbrk_aligned+0x20>
 801db30:	200038b8 	.word	0x200038b8

0801db34 <_malloc_r>:
 801db34:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801db36:	2203      	movs	r2, #3
 801db38:	1ccb      	adds	r3, r1, #3
 801db3a:	4393      	bics	r3, r2
 801db3c:	3308      	adds	r3, #8
 801db3e:	0005      	movs	r5, r0
 801db40:	001f      	movs	r7, r3
 801db42:	2b0c      	cmp	r3, #12
 801db44:	d234      	bcs.n	801dbb0 <_malloc_r+0x7c>
 801db46:	270c      	movs	r7, #12
 801db48:	42b9      	cmp	r1, r7
 801db4a:	d833      	bhi.n	801dbb4 <_malloc_r+0x80>
 801db4c:	0028      	movs	r0, r5
 801db4e:	f000 f883 	bl	801dc58 <__malloc_lock>
 801db52:	4e37      	ldr	r6, [pc, #220]	@ (801dc30 <_malloc_r+0xfc>)
 801db54:	6833      	ldr	r3, [r6, #0]
 801db56:	001c      	movs	r4, r3
 801db58:	2c00      	cmp	r4, #0
 801db5a:	d12f      	bne.n	801dbbc <_malloc_r+0x88>
 801db5c:	0039      	movs	r1, r7
 801db5e:	0028      	movs	r0, r5
 801db60:	f7ff ffc6 	bl	801daf0 <sbrk_aligned>
 801db64:	0004      	movs	r4, r0
 801db66:	1c43      	adds	r3, r0, #1
 801db68:	d15f      	bne.n	801dc2a <_malloc_r+0xf6>
 801db6a:	6834      	ldr	r4, [r6, #0]
 801db6c:	9400      	str	r4, [sp, #0]
 801db6e:	9b00      	ldr	r3, [sp, #0]
 801db70:	2b00      	cmp	r3, #0
 801db72:	d14a      	bne.n	801dc0a <_malloc_r+0xd6>
 801db74:	2c00      	cmp	r4, #0
 801db76:	d052      	beq.n	801dc1e <_malloc_r+0xea>
 801db78:	6823      	ldr	r3, [r4, #0]
 801db7a:	0028      	movs	r0, r5
 801db7c:	18e3      	adds	r3, r4, r3
 801db7e:	9900      	ldr	r1, [sp, #0]
 801db80:	9301      	str	r3, [sp, #4]
 801db82:	f001 f959 	bl	801ee38 <_sbrk_r>
 801db86:	9b01      	ldr	r3, [sp, #4]
 801db88:	4283      	cmp	r3, r0
 801db8a:	d148      	bne.n	801dc1e <_malloc_r+0xea>
 801db8c:	6823      	ldr	r3, [r4, #0]
 801db8e:	0028      	movs	r0, r5
 801db90:	1aff      	subs	r7, r7, r3
 801db92:	0039      	movs	r1, r7
 801db94:	f7ff ffac 	bl	801daf0 <sbrk_aligned>
 801db98:	3001      	adds	r0, #1
 801db9a:	d040      	beq.n	801dc1e <_malloc_r+0xea>
 801db9c:	6823      	ldr	r3, [r4, #0]
 801db9e:	19db      	adds	r3, r3, r7
 801dba0:	6023      	str	r3, [r4, #0]
 801dba2:	6833      	ldr	r3, [r6, #0]
 801dba4:	685a      	ldr	r2, [r3, #4]
 801dba6:	2a00      	cmp	r2, #0
 801dba8:	d133      	bne.n	801dc12 <_malloc_r+0xde>
 801dbaa:	9b00      	ldr	r3, [sp, #0]
 801dbac:	6033      	str	r3, [r6, #0]
 801dbae:	e019      	b.n	801dbe4 <_malloc_r+0xb0>
 801dbb0:	2b00      	cmp	r3, #0
 801dbb2:	dac9      	bge.n	801db48 <_malloc_r+0x14>
 801dbb4:	230c      	movs	r3, #12
 801dbb6:	602b      	str	r3, [r5, #0]
 801dbb8:	2000      	movs	r0, #0
 801dbba:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801dbbc:	6821      	ldr	r1, [r4, #0]
 801dbbe:	1bc9      	subs	r1, r1, r7
 801dbc0:	d420      	bmi.n	801dc04 <_malloc_r+0xd0>
 801dbc2:	290b      	cmp	r1, #11
 801dbc4:	d90a      	bls.n	801dbdc <_malloc_r+0xa8>
 801dbc6:	19e2      	adds	r2, r4, r7
 801dbc8:	6027      	str	r7, [r4, #0]
 801dbca:	42a3      	cmp	r3, r4
 801dbcc:	d104      	bne.n	801dbd8 <_malloc_r+0xa4>
 801dbce:	6032      	str	r2, [r6, #0]
 801dbd0:	6863      	ldr	r3, [r4, #4]
 801dbd2:	6011      	str	r1, [r2, #0]
 801dbd4:	6053      	str	r3, [r2, #4]
 801dbd6:	e005      	b.n	801dbe4 <_malloc_r+0xb0>
 801dbd8:	605a      	str	r2, [r3, #4]
 801dbda:	e7f9      	b.n	801dbd0 <_malloc_r+0x9c>
 801dbdc:	6862      	ldr	r2, [r4, #4]
 801dbde:	42a3      	cmp	r3, r4
 801dbe0:	d10e      	bne.n	801dc00 <_malloc_r+0xcc>
 801dbe2:	6032      	str	r2, [r6, #0]
 801dbe4:	0028      	movs	r0, r5
 801dbe6:	f000 f83f 	bl	801dc68 <__malloc_unlock>
 801dbea:	0020      	movs	r0, r4
 801dbec:	2207      	movs	r2, #7
 801dbee:	300b      	adds	r0, #11
 801dbf0:	1d23      	adds	r3, r4, #4
 801dbf2:	4390      	bics	r0, r2
 801dbf4:	1ac2      	subs	r2, r0, r3
 801dbf6:	4298      	cmp	r0, r3
 801dbf8:	d0df      	beq.n	801dbba <_malloc_r+0x86>
 801dbfa:	1a1b      	subs	r3, r3, r0
 801dbfc:	50a3      	str	r3, [r4, r2]
 801dbfe:	e7dc      	b.n	801dbba <_malloc_r+0x86>
 801dc00:	605a      	str	r2, [r3, #4]
 801dc02:	e7ef      	b.n	801dbe4 <_malloc_r+0xb0>
 801dc04:	0023      	movs	r3, r4
 801dc06:	6864      	ldr	r4, [r4, #4]
 801dc08:	e7a6      	b.n	801db58 <_malloc_r+0x24>
 801dc0a:	9c00      	ldr	r4, [sp, #0]
 801dc0c:	6863      	ldr	r3, [r4, #4]
 801dc0e:	9300      	str	r3, [sp, #0]
 801dc10:	e7ad      	b.n	801db6e <_malloc_r+0x3a>
 801dc12:	001a      	movs	r2, r3
 801dc14:	685b      	ldr	r3, [r3, #4]
 801dc16:	42a3      	cmp	r3, r4
 801dc18:	d1fb      	bne.n	801dc12 <_malloc_r+0xde>
 801dc1a:	2300      	movs	r3, #0
 801dc1c:	e7da      	b.n	801dbd4 <_malloc_r+0xa0>
 801dc1e:	230c      	movs	r3, #12
 801dc20:	0028      	movs	r0, r5
 801dc22:	602b      	str	r3, [r5, #0]
 801dc24:	f000 f820 	bl	801dc68 <__malloc_unlock>
 801dc28:	e7c6      	b.n	801dbb8 <_malloc_r+0x84>
 801dc2a:	6007      	str	r7, [r0, #0]
 801dc2c:	e7da      	b.n	801dbe4 <_malloc_r+0xb0>
 801dc2e:	46c0      	nop			@ (mov r8, r8)
 801dc30:	200038bc 	.word	0x200038bc

0801dc34 <__ascii_mbtowc>:
 801dc34:	b082      	sub	sp, #8
 801dc36:	2900      	cmp	r1, #0
 801dc38:	d100      	bne.n	801dc3c <__ascii_mbtowc+0x8>
 801dc3a:	a901      	add	r1, sp, #4
 801dc3c:	1e10      	subs	r0, r2, #0
 801dc3e:	d006      	beq.n	801dc4e <__ascii_mbtowc+0x1a>
 801dc40:	2b00      	cmp	r3, #0
 801dc42:	d006      	beq.n	801dc52 <__ascii_mbtowc+0x1e>
 801dc44:	7813      	ldrb	r3, [r2, #0]
 801dc46:	600b      	str	r3, [r1, #0]
 801dc48:	7810      	ldrb	r0, [r2, #0]
 801dc4a:	1e43      	subs	r3, r0, #1
 801dc4c:	4198      	sbcs	r0, r3
 801dc4e:	b002      	add	sp, #8
 801dc50:	4770      	bx	lr
 801dc52:	2002      	movs	r0, #2
 801dc54:	4240      	negs	r0, r0
 801dc56:	e7fa      	b.n	801dc4e <__ascii_mbtowc+0x1a>

0801dc58 <__malloc_lock>:
 801dc58:	b510      	push	{r4, lr}
 801dc5a:	4802      	ldr	r0, [pc, #8]	@ (801dc64 <__malloc_lock+0xc>)
 801dc5c:	f7fe fcfb 	bl	801c656 <__retarget_lock_acquire_recursive>
 801dc60:	bd10      	pop	{r4, pc}
 801dc62:	46c0      	nop			@ (mov r8, r8)
 801dc64:	200038b4 	.word	0x200038b4

0801dc68 <__malloc_unlock>:
 801dc68:	b510      	push	{r4, lr}
 801dc6a:	4802      	ldr	r0, [pc, #8]	@ (801dc74 <__malloc_unlock+0xc>)
 801dc6c:	f7fe fcf4 	bl	801c658 <__retarget_lock_release_recursive>
 801dc70:	bd10      	pop	{r4, pc}
 801dc72:	46c0      	nop			@ (mov r8, r8)
 801dc74:	200038b4 	.word	0x200038b4

0801dc78 <_Balloc>:
 801dc78:	b570      	push	{r4, r5, r6, lr}
 801dc7a:	69c5      	ldr	r5, [r0, #28]
 801dc7c:	0006      	movs	r6, r0
 801dc7e:	000c      	movs	r4, r1
 801dc80:	2d00      	cmp	r5, #0
 801dc82:	d10e      	bne.n	801dca2 <_Balloc+0x2a>
 801dc84:	2010      	movs	r0, #16
 801dc86:	f7ff ff29 	bl	801dadc <malloc>
 801dc8a:	1e02      	subs	r2, r0, #0
 801dc8c:	61f0      	str	r0, [r6, #28]
 801dc8e:	d104      	bne.n	801dc9a <_Balloc+0x22>
 801dc90:	216b      	movs	r1, #107	@ 0x6b
 801dc92:	4b19      	ldr	r3, [pc, #100]	@ (801dcf8 <_Balloc+0x80>)
 801dc94:	4819      	ldr	r0, [pc, #100]	@ (801dcfc <_Balloc+0x84>)
 801dc96:	f001 f8e1 	bl	801ee5c <__assert_func>
 801dc9a:	6045      	str	r5, [r0, #4]
 801dc9c:	6085      	str	r5, [r0, #8]
 801dc9e:	6005      	str	r5, [r0, #0]
 801dca0:	60c5      	str	r5, [r0, #12]
 801dca2:	69f5      	ldr	r5, [r6, #28]
 801dca4:	68eb      	ldr	r3, [r5, #12]
 801dca6:	2b00      	cmp	r3, #0
 801dca8:	d013      	beq.n	801dcd2 <_Balloc+0x5a>
 801dcaa:	69f3      	ldr	r3, [r6, #28]
 801dcac:	00a2      	lsls	r2, r4, #2
 801dcae:	68db      	ldr	r3, [r3, #12]
 801dcb0:	189b      	adds	r3, r3, r2
 801dcb2:	6818      	ldr	r0, [r3, #0]
 801dcb4:	2800      	cmp	r0, #0
 801dcb6:	d118      	bne.n	801dcea <_Balloc+0x72>
 801dcb8:	2101      	movs	r1, #1
 801dcba:	000d      	movs	r5, r1
 801dcbc:	40a5      	lsls	r5, r4
 801dcbe:	1d6a      	adds	r2, r5, #5
 801dcc0:	0030      	movs	r0, r6
 801dcc2:	0092      	lsls	r2, r2, #2
 801dcc4:	f001 f8e8 	bl	801ee98 <_calloc_r>
 801dcc8:	2800      	cmp	r0, #0
 801dcca:	d00c      	beq.n	801dce6 <_Balloc+0x6e>
 801dccc:	6044      	str	r4, [r0, #4]
 801dcce:	6085      	str	r5, [r0, #8]
 801dcd0:	e00d      	b.n	801dcee <_Balloc+0x76>
 801dcd2:	2221      	movs	r2, #33	@ 0x21
 801dcd4:	2104      	movs	r1, #4
 801dcd6:	0030      	movs	r0, r6
 801dcd8:	f001 f8de 	bl	801ee98 <_calloc_r>
 801dcdc:	69f3      	ldr	r3, [r6, #28]
 801dcde:	60e8      	str	r0, [r5, #12]
 801dce0:	68db      	ldr	r3, [r3, #12]
 801dce2:	2b00      	cmp	r3, #0
 801dce4:	d1e1      	bne.n	801dcaa <_Balloc+0x32>
 801dce6:	2000      	movs	r0, #0
 801dce8:	bd70      	pop	{r4, r5, r6, pc}
 801dcea:	6802      	ldr	r2, [r0, #0]
 801dcec:	601a      	str	r2, [r3, #0]
 801dcee:	2300      	movs	r3, #0
 801dcf0:	6103      	str	r3, [r0, #16]
 801dcf2:	60c3      	str	r3, [r0, #12]
 801dcf4:	e7f8      	b.n	801dce8 <_Balloc+0x70>
 801dcf6:	46c0      	nop			@ (mov r8, r8)
 801dcf8:	080210f2 	.word	0x080210f2
 801dcfc:	080211d2 	.word	0x080211d2

0801dd00 <_Bfree>:
 801dd00:	b570      	push	{r4, r5, r6, lr}
 801dd02:	69c6      	ldr	r6, [r0, #28]
 801dd04:	0005      	movs	r5, r0
 801dd06:	000c      	movs	r4, r1
 801dd08:	2e00      	cmp	r6, #0
 801dd0a:	d10e      	bne.n	801dd2a <_Bfree+0x2a>
 801dd0c:	2010      	movs	r0, #16
 801dd0e:	f7ff fee5 	bl	801dadc <malloc>
 801dd12:	1e02      	subs	r2, r0, #0
 801dd14:	61e8      	str	r0, [r5, #28]
 801dd16:	d104      	bne.n	801dd22 <_Bfree+0x22>
 801dd18:	218f      	movs	r1, #143	@ 0x8f
 801dd1a:	4b09      	ldr	r3, [pc, #36]	@ (801dd40 <_Bfree+0x40>)
 801dd1c:	4809      	ldr	r0, [pc, #36]	@ (801dd44 <_Bfree+0x44>)
 801dd1e:	f001 f89d 	bl	801ee5c <__assert_func>
 801dd22:	6046      	str	r6, [r0, #4]
 801dd24:	6086      	str	r6, [r0, #8]
 801dd26:	6006      	str	r6, [r0, #0]
 801dd28:	60c6      	str	r6, [r0, #12]
 801dd2a:	2c00      	cmp	r4, #0
 801dd2c:	d007      	beq.n	801dd3e <_Bfree+0x3e>
 801dd2e:	69eb      	ldr	r3, [r5, #28]
 801dd30:	6862      	ldr	r2, [r4, #4]
 801dd32:	68db      	ldr	r3, [r3, #12]
 801dd34:	0092      	lsls	r2, r2, #2
 801dd36:	189b      	adds	r3, r3, r2
 801dd38:	681a      	ldr	r2, [r3, #0]
 801dd3a:	6022      	str	r2, [r4, #0]
 801dd3c:	601c      	str	r4, [r3, #0]
 801dd3e:	bd70      	pop	{r4, r5, r6, pc}
 801dd40:	080210f2 	.word	0x080210f2
 801dd44:	080211d2 	.word	0x080211d2

0801dd48 <__multadd>:
 801dd48:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801dd4a:	000f      	movs	r7, r1
 801dd4c:	9001      	str	r0, [sp, #4]
 801dd4e:	000c      	movs	r4, r1
 801dd50:	001e      	movs	r6, r3
 801dd52:	2000      	movs	r0, #0
 801dd54:	690d      	ldr	r5, [r1, #16]
 801dd56:	3714      	adds	r7, #20
 801dd58:	683b      	ldr	r3, [r7, #0]
 801dd5a:	3001      	adds	r0, #1
 801dd5c:	b299      	uxth	r1, r3
 801dd5e:	4351      	muls	r1, r2
 801dd60:	0c1b      	lsrs	r3, r3, #16
 801dd62:	4353      	muls	r3, r2
 801dd64:	1989      	adds	r1, r1, r6
 801dd66:	0c0e      	lsrs	r6, r1, #16
 801dd68:	199b      	adds	r3, r3, r6
 801dd6a:	0c1e      	lsrs	r6, r3, #16
 801dd6c:	b289      	uxth	r1, r1
 801dd6e:	041b      	lsls	r3, r3, #16
 801dd70:	185b      	adds	r3, r3, r1
 801dd72:	c708      	stmia	r7!, {r3}
 801dd74:	4285      	cmp	r5, r0
 801dd76:	dcef      	bgt.n	801dd58 <__multadd+0x10>
 801dd78:	2e00      	cmp	r6, #0
 801dd7a:	d022      	beq.n	801ddc2 <__multadd+0x7a>
 801dd7c:	68a3      	ldr	r3, [r4, #8]
 801dd7e:	42ab      	cmp	r3, r5
 801dd80:	dc19      	bgt.n	801ddb6 <__multadd+0x6e>
 801dd82:	6861      	ldr	r1, [r4, #4]
 801dd84:	9801      	ldr	r0, [sp, #4]
 801dd86:	3101      	adds	r1, #1
 801dd88:	f7ff ff76 	bl	801dc78 <_Balloc>
 801dd8c:	1e07      	subs	r7, r0, #0
 801dd8e:	d105      	bne.n	801dd9c <__multadd+0x54>
 801dd90:	003a      	movs	r2, r7
 801dd92:	21ba      	movs	r1, #186	@ 0xba
 801dd94:	4b0c      	ldr	r3, [pc, #48]	@ (801ddc8 <__multadd+0x80>)
 801dd96:	480d      	ldr	r0, [pc, #52]	@ (801ddcc <__multadd+0x84>)
 801dd98:	f001 f860 	bl	801ee5c <__assert_func>
 801dd9c:	0021      	movs	r1, r4
 801dd9e:	6922      	ldr	r2, [r4, #16]
 801dda0:	310c      	adds	r1, #12
 801dda2:	3202      	adds	r2, #2
 801dda4:	0092      	lsls	r2, r2, #2
 801dda6:	300c      	adds	r0, #12
 801dda8:	f7fe fc62 	bl	801c670 <memcpy>
 801ddac:	0021      	movs	r1, r4
 801ddae:	9801      	ldr	r0, [sp, #4]
 801ddb0:	f7ff ffa6 	bl	801dd00 <_Bfree>
 801ddb4:	003c      	movs	r4, r7
 801ddb6:	1d2b      	adds	r3, r5, #4
 801ddb8:	009b      	lsls	r3, r3, #2
 801ddba:	18e3      	adds	r3, r4, r3
 801ddbc:	3501      	adds	r5, #1
 801ddbe:	605e      	str	r6, [r3, #4]
 801ddc0:	6125      	str	r5, [r4, #16]
 801ddc2:	0020      	movs	r0, r4
 801ddc4:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801ddc6:	46c0      	nop			@ (mov r8, r8)
 801ddc8:	08021161 	.word	0x08021161
 801ddcc:	080211d2 	.word	0x080211d2

0801ddd0 <__s2b>:
 801ddd0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801ddd2:	0007      	movs	r7, r0
 801ddd4:	0018      	movs	r0, r3
 801ddd6:	000c      	movs	r4, r1
 801ddd8:	3008      	adds	r0, #8
 801ddda:	2109      	movs	r1, #9
 801dddc:	9301      	str	r3, [sp, #4]
 801ddde:	0015      	movs	r5, r2
 801dde0:	f7e2 fa6a 	bl	80002b8 <__divsi3>
 801dde4:	2301      	movs	r3, #1
 801dde6:	2100      	movs	r1, #0
 801dde8:	4283      	cmp	r3, r0
 801ddea:	db0a      	blt.n	801de02 <__s2b+0x32>
 801ddec:	0038      	movs	r0, r7
 801ddee:	f7ff ff43 	bl	801dc78 <_Balloc>
 801ddf2:	1e01      	subs	r1, r0, #0
 801ddf4:	d108      	bne.n	801de08 <__s2b+0x38>
 801ddf6:	000a      	movs	r2, r1
 801ddf8:	4b19      	ldr	r3, [pc, #100]	@ (801de60 <__s2b+0x90>)
 801ddfa:	481a      	ldr	r0, [pc, #104]	@ (801de64 <__s2b+0x94>)
 801ddfc:	31d3      	adds	r1, #211	@ 0xd3
 801ddfe:	f001 f82d 	bl	801ee5c <__assert_func>
 801de02:	005b      	lsls	r3, r3, #1
 801de04:	3101      	adds	r1, #1
 801de06:	e7ef      	b.n	801dde8 <__s2b+0x18>
 801de08:	9b08      	ldr	r3, [sp, #32]
 801de0a:	6143      	str	r3, [r0, #20]
 801de0c:	2301      	movs	r3, #1
 801de0e:	6103      	str	r3, [r0, #16]
 801de10:	2d09      	cmp	r5, #9
 801de12:	dd18      	ble.n	801de46 <__s2b+0x76>
 801de14:	0023      	movs	r3, r4
 801de16:	3309      	adds	r3, #9
 801de18:	001e      	movs	r6, r3
 801de1a:	9300      	str	r3, [sp, #0]
 801de1c:	1964      	adds	r4, r4, r5
 801de1e:	7833      	ldrb	r3, [r6, #0]
 801de20:	220a      	movs	r2, #10
 801de22:	0038      	movs	r0, r7
 801de24:	3b30      	subs	r3, #48	@ 0x30
 801de26:	f7ff ff8f 	bl	801dd48 <__multadd>
 801de2a:	3601      	adds	r6, #1
 801de2c:	0001      	movs	r1, r0
 801de2e:	42a6      	cmp	r6, r4
 801de30:	d1f5      	bne.n	801de1e <__s2b+0x4e>
 801de32:	002c      	movs	r4, r5
 801de34:	9b00      	ldr	r3, [sp, #0]
 801de36:	3c08      	subs	r4, #8
 801de38:	191c      	adds	r4, r3, r4
 801de3a:	002e      	movs	r6, r5
 801de3c:	9b01      	ldr	r3, [sp, #4]
 801de3e:	429e      	cmp	r6, r3
 801de40:	db04      	blt.n	801de4c <__s2b+0x7c>
 801de42:	0008      	movs	r0, r1
 801de44:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801de46:	2509      	movs	r5, #9
 801de48:	340a      	adds	r4, #10
 801de4a:	e7f6      	b.n	801de3a <__s2b+0x6a>
 801de4c:	1b63      	subs	r3, r4, r5
 801de4e:	5d9b      	ldrb	r3, [r3, r6]
 801de50:	220a      	movs	r2, #10
 801de52:	0038      	movs	r0, r7
 801de54:	3b30      	subs	r3, #48	@ 0x30
 801de56:	f7ff ff77 	bl	801dd48 <__multadd>
 801de5a:	3601      	adds	r6, #1
 801de5c:	0001      	movs	r1, r0
 801de5e:	e7ed      	b.n	801de3c <__s2b+0x6c>
 801de60:	08021161 	.word	0x08021161
 801de64:	080211d2 	.word	0x080211d2

0801de68 <__hi0bits>:
 801de68:	2280      	movs	r2, #128	@ 0x80
 801de6a:	0003      	movs	r3, r0
 801de6c:	0252      	lsls	r2, r2, #9
 801de6e:	2000      	movs	r0, #0
 801de70:	4293      	cmp	r3, r2
 801de72:	d201      	bcs.n	801de78 <__hi0bits+0x10>
 801de74:	041b      	lsls	r3, r3, #16
 801de76:	3010      	adds	r0, #16
 801de78:	2280      	movs	r2, #128	@ 0x80
 801de7a:	0452      	lsls	r2, r2, #17
 801de7c:	4293      	cmp	r3, r2
 801de7e:	d201      	bcs.n	801de84 <__hi0bits+0x1c>
 801de80:	3008      	adds	r0, #8
 801de82:	021b      	lsls	r3, r3, #8
 801de84:	2280      	movs	r2, #128	@ 0x80
 801de86:	0552      	lsls	r2, r2, #21
 801de88:	4293      	cmp	r3, r2
 801de8a:	d201      	bcs.n	801de90 <__hi0bits+0x28>
 801de8c:	3004      	adds	r0, #4
 801de8e:	011b      	lsls	r3, r3, #4
 801de90:	2280      	movs	r2, #128	@ 0x80
 801de92:	05d2      	lsls	r2, r2, #23
 801de94:	4293      	cmp	r3, r2
 801de96:	d201      	bcs.n	801de9c <__hi0bits+0x34>
 801de98:	3002      	adds	r0, #2
 801de9a:	009b      	lsls	r3, r3, #2
 801de9c:	2b00      	cmp	r3, #0
 801de9e:	db03      	blt.n	801dea8 <__hi0bits+0x40>
 801dea0:	3001      	adds	r0, #1
 801dea2:	4213      	tst	r3, r2
 801dea4:	d100      	bne.n	801dea8 <__hi0bits+0x40>
 801dea6:	2020      	movs	r0, #32
 801dea8:	4770      	bx	lr

0801deaa <__lo0bits>:
 801deaa:	6803      	ldr	r3, [r0, #0]
 801deac:	0001      	movs	r1, r0
 801deae:	2207      	movs	r2, #7
 801deb0:	0018      	movs	r0, r3
 801deb2:	4010      	ands	r0, r2
 801deb4:	4213      	tst	r3, r2
 801deb6:	d00d      	beq.n	801ded4 <__lo0bits+0x2a>
 801deb8:	3a06      	subs	r2, #6
 801deba:	2000      	movs	r0, #0
 801debc:	4213      	tst	r3, r2
 801debe:	d105      	bne.n	801decc <__lo0bits+0x22>
 801dec0:	3002      	adds	r0, #2
 801dec2:	4203      	tst	r3, r0
 801dec4:	d003      	beq.n	801dece <__lo0bits+0x24>
 801dec6:	40d3      	lsrs	r3, r2
 801dec8:	0010      	movs	r0, r2
 801deca:	600b      	str	r3, [r1, #0]
 801decc:	4770      	bx	lr
 801dece:	089b      	lsrs	r3, r3, #2
 801ded0:	600b      	str	r3, [r1, #0]
 801ded2:	e7fb      	b.n	801decc <__lo0bits+0x22>
 801ded4:	b29a      	uxth	r2, r3
 801ded6:	2a00      	cmp	r2, #0
 801ded8:	d101      	bne.n	801dede <__lo0bits+0x34>
 801deda:	2010      	movs	r0, #16
 801dedc:	0c1b      	lsrs	r3, r3, #16
 801dede:	b2da      	uxtb	r2, r3
 801dee0:	2a00      	cmp	r2, #0
 801dee2:	d101      	bne.n	801dee8 <__lo0bits+0x3e>
 801dee4:	3008      	adds	r0, #8
 801dee6:	0a1b      	lsrs	r3, r3, #8
 801dee8:	071a      	lsls	r2, r3, #28
 801deea:	d101      	bne.n	801def0 <__lo0bits+0x46>
 801deec:	3004      	adds	r0, #4
 801deee:	091b      	lsrs	r3, r3, #4
 801def0:	079a      	lsls	r2, r3, #30
 801def2:	d101      	bne.n	801def8 <__lo0bits+0x4e>
 801def4:	3002      	adds	r0, #2
 801def6:	089b      	lsrs	r3, r3, #2
 801def8:	07da      	lsls	r2, r3, #31
 801defa:	d4e9      	bmi.n	801ded0 <__lo0bits+0x26>
 801defc:	3001      	adds	r0, #1
 801defe:	085b      	lsrs	r3, r3, #1
 801df00:	d1e6      	bne.n	801ded0 <__lo0bits+0x26>
 801df02:	2020      	movs	r0, #32
 801df04:	e7e2      	b.n	801decc <__lo0bits+0x22>
	...

0801df08 <__i2b>:
 801df08:	b510      	push	{r4, lr}
 801df0a:	000c      	movs	r4, r1
 801df0c:	2101      	movs	r1, #1
 801df0e:	f7ff feb3 	bl	801dc78 <_Balloc>
 801df12:	2800      	cmp	r0, #0
 801df14:	d107      	bne.n	801df26 <__i2b+0x1e>
 801df16:	2146      	movs	r1, #70	@ 0x46
 801df18:	4c05      	ldr	r4, [pc, #20]	@ (801df30 <__i2b+0x28>)
 801df1a:	0002      	movs	r2, r0
 801df1c:	4b05      	ldr	r3, [pc, #20]	@ (801df34 <__i2b+0x2c>)
 801df1e:	0020      	movs	r0, r4
 801df20:	31ff      	adds	r1, #255	@ 0xff
 801df22:	f000 ff9b 	bl	801ee5c <__assert_func>
 801df26:	2301      	movs	r3, #1
 801df28:	6144      	str	r4, [r0, #20]
 801df2a:	6103      	str	r3, [r0, #16]
 801df2c:	bd10      	pop	{r4, pc}
 801df2e:	46c0      	nop			@ (mov r8, r8)
 801df30:	080211d2 	.word	0x080211d2
 801df34:	08021161 	.word	0x08021161

0801df38 <__multiply>:
 801df38:	b5f0      	push	{r4, r5, r6, r7, lr}
 801df3a:	0014      	movs	r4, r2
 801df3c:	690a      	ldr	r2, [r1, #16]
 801df3e:	6923      	ldr	r3, [r4, #16]
 801df40:	000d      	movs	r5, r1
 801df42:	b08b      	sub	sp, #44	@ 0x2c
 801df44:	429a      	cmp	r2, r3
 801df46:	db02      	blt.n	801df4e <__multiply+0x16>
 801df48:	0023      	movs	r3, r4
 801df4a:	000c      	movs	r4, r1
 801df4c:	001d      	movs	r5, r3
 801df4e:	6927      	ldr	r7, [r4, #16]
 801df50:	692e      	ldr	r6, [r5, #16]
 801df52:	6861      	ldr	r1, [r4, #4]
 801df54:	19bb      	adds	r3, r7, r6
 801df56:	9303      	str	r3, [sp, #12]
 801df58:	68a3      	ldr	r3, [r4, #8]
 801df5a:	19ba      	adds	r2, r7, r6
 801df5c:	4293      	cmp	r3, r2
 801df5e:	da00      	bge.n	801df62 <__multiply+0x2a>
 801df60:	3101      	adds	r1, #1
 801df62:	f7ff fe89 	bl	801dc78 <_Balloc>
 801df66:	9002      	str	r0, [sp, #8]
 801df68:	2800      	cmp	r0, #0
 801df6a:	d106      	bne.n	801df7a <__multiply+0x42>
 801df6c:	21b1      	movs	r1, #177	@ 0xb1
 801df6e:	4b49      	ldr	r3, [pc, #292]	@ (801e094 <__multiply+0x15c>)
 801df70:	4849      	ldr	r0, [pc, #292]	@ (801e098 <__multiply+0x160>)
 801df72:	9a02      	ldr	r2, [sp, #8]
 801df74:	0049      	lsls	r1, r1, #1
 801df76:	f000 ff71 	bl	801ee5c <__assert_func>
 801df7a:	9b02      	ldr	r3, [sp, #8]
 801df7c:	2200      	movs	r2, #0
 801df7e:	3314      	adds	r3, #20
 801df80:	469c      	mov	ip, r3
 801df82:	19bb      	adds	r3, r7, r6
 801df84:	009b      	lsls	r3, r3, #2
 801df86:	4463      	add	r3, ip
 801df88:	9304      	str	r3, [sp, #16]
 801df8a:	4663      	mov	r3, ip
 801df8c:	9904      	ldr	r1, [sp, #16]
 801df8e:	428b      	cmp	r3, r1
 801df90:	d32a      	bcc.n	801dfe8 <__multiply+0xb0>
 801df92:	0023      	movs	r3, r4
 801df94:	00bf      	lsls	r7, r7, #2
 801df96:	3314      	adds	r3, #20
 801df98:	3514      	adds	r5, #20
 801df9a:	9308      	str	r3, [sp, #32]
 801df9c:	00b6      	lsls	r6, r6, #2
 801df9e:	19db      	adds	r3, r3, r7
 801dfa0:	9305      	str	r3, [sp, #20]
 801dfa2:	19ab      	adds	r3, r5, r6
 801dfa4:	9309      	str	r3, [sp, #36]	@ 0x24
 801dfa6:	2304      	movs	r3, #4
 801dfa8:	9306      	str	r3, [sp, #24]
 801dfaa:	0023      	movs	r3, r4
 801dfac:	9a05      	ldr	r2, [sp, #20]
 801dfae:	3315      	adds	r3, #21
 801dfb0:	9501      	str	r5, [sp, #4]
 801dfb2:	429a      	cmp	r2, r3
 801dfb4:	d305      	bcc.n	801dfc2 <__multiply+0x8a>
 801dfb6:	1b13      	subs	r3, r2, r4
 801dfb8:	3b15      	subs	r3, #21
 801dfba:	089b      	lsrs	r3, r3, #2
 801dfbc:	3301      	adds	r3, #1
 801dfbe:	009b      	lsls	r3, r3, #2
 801dfc0:	9306      	str	r3, [sp, #24]
 801dfc2:	9b01      	ldr	r3, [sp, #4]
 801dfc4:	9a09      	ldr	r2, [sp, #36]	@ 0x24
 801dfc6:	4293      	cmp	r3, r2
 801dfc8:	d310      	bcc.n	801dfec <__multiply+0xb4>
 801dfca:	9b03      	ldr	r3, [sp, #12]
 801dfcc:	2b00      	cmp	r3, #0
 801dfce:	dd05      	ble.n	801dfdc <__multiply+0xa4>
 801dfd0:	9b04      	ldr	r3, [sp, #16]
 801dfd2:	3b04      	subs	r3, #4
 801dfd4:	9304      	str	r3, [sp, #16]
 801dfd6:	681b      	ldr	r3, [r3, #0]
 801dfd8:	2b00      	cmp	r3, #0
 801dfda:	d056      	beq.n	801e08a <__multiply+0x152>
 801dfdc:	9b02      	ldr	r3, [sp, #8]
 801dfde:	9a03      	ldr	r2, [sp, #12]
 801dfe0:	0018      	movs	r0, r3
 801dfe2:	611a      	str	r2, [r3, #16]
 801dfe4:	b00b      	add	sp, #44	@ 0x2c
 801dfe6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801dfe8:	c304      	stmia	r3!, {r2}
 801dfea:	e7cf      	b.n	801df8c <__multiply+0x54>
 801dfec:	9b01      	ldr	r3, [sp, #4]
 801dfee:	6818      	ldr	r0, [r3, #0]
 801dff0:	b280      	uxth	r0, r0
 801dff2:	2800      	cmp	r0, #0
 801dff4:	d01e      	beq.n	801e034 <__multiply+0xfc>
 801dff6:	4667      	mov	r7, ip
 801dff8:	2500      	movs	r5, #0
 801dffa:	9e08      	ldr	r6, [sp, #32]
 801dffc:	ce02      	ldmia	r6!, {r1}
 801dffe:	683b      	ldr	r3, [r7, #0]
 801e000:	9307      	str	r3, [sp, #28]
 801e002:	b28b      	uxth	r3, r1
 801e004:	4343      	muls	r3, r0
 801e006:	001a      	movs	r2, r3
 801e008:	466b      	mov	r3, sp
 801e00a:	0c09      	lsrs	r1, r1, #16
 801e00c:	8b9b      	ldrh	r3, [r3, #28]
 801e00e:	4341      	muls	r1, r0
 801e010:	18d3      	adds	r3, r2, r3
 801e012:	9a07      	ldr	r2, [sp, #28]
 801e014:	195b      	adds	r3, r3, r5
 801e016:	0c12      	lsrs	r2, r2, #16
 801e018:	1889      	adds	r1, r1, r2
 801e01a:	0c1a      	lsrs	r2, r3, #16
 801e01c:	188a      	adds	r2, r1, r2
 801e01e:	b29b      	uxth	r3, r3
 801e020:	0c15      	lsrs	r5, r2, #16
 801e022:	0412      	lsls	r2, r2, #16
 801e024:	431a      	orrs	r2, r3
 801e026:	9b05      	ldr	r3, [sp, #20]
 801e028:	c704      	stmia	r7!, {r2}
 801e02a:	42b3      	cmp	r3, r6
 801e02c:	d8e6      	bhi.n	801dffc <__multiply+0xc4>
 801e02e:	4663      	mov	r3, ip
 801e030:	9a06      	ldr	r2, [sp, #24]
 801e032:	509d      	str	r5, [r3, r2]
 801e034:	9b01      	ldr	r3, [sp, #4]
 801e036:	6818      	ldr	r0, [r3, #0]
 801e038:	0c00      	lsrs	r0, r0, #16
 801e03a:	d020      	beq.n	801e07e <__multiply+0x146>
 801e03c:	4663      	mov	r3, ip
 801e03e:	0025      	movs	r5, r4
 801e040:	4661      	mov	r1, ip
 801e042:	2700      	movs	r7, #0
 801e044:	681b      	ldr	r3, [r3, #0]
 801e046:	3514      	adds	r5, #20
 801e048:	682a      	ldr	r2, [r5, #0]
 801e04a:	680e      	ldr	r6, [r1, #0]
 801e04c:	b292      	uxth	r2, r2
 801e04e:	4342      	muls	r2, r0
 801e050:	0c36      	lsrs	r6, r6, #16
 801e052:	1992      	adds	r2, r2, r6
 801e054:	19d2      	adds	r2, r2, r7
 801e056:	0416      	lsls	r6, r2, #16
 801e058:	b29b      	uxth	r3, r3
 801e05a:	431e      	orrs	r6, r3
 801e05c:	600e      	str	r6, [r1, #0]
 801e05e:	cd40      	ldmia	r5!, {r6}
 801e060:	684b      	ldr	r3, [r1, #4]
 801e062:	0c36      	lsrs	r6, r6, #16
 801e064:	4346      	muls	r6, r0
 801e066:	b29b      	uxth	r3, r3
 801e068:	0c12      	lsrs	r2, r2, #16
 801e06a:	18f3      	adds	r3, r6, r3
 801e06c:	189b      	adds	r3, r3, r2
 801e06e:	9a05      	ldr	r2, [sp, #20]
 801e070:	0c1f      	lsrs	r7, r3, #16
 801e072:	3104      	adds	r1, #4
 801e074:	42aa      	cmp	r2, r5
 801e076:	d8e7      	bhi.n	801e048 <__multiply+0x110>
 801e078:	4662      	mov	r2, ip
 801e07a:	9906      	ldr	r1, [sp, #24]
 801e07c:	5053      	str	r3, [r2, r1]
 801e07e:	9b01      	ldr	r3, [sp, #4]
 801e080:	3304      	adds	r3, #4
 801e082:	9301      	str	r3, [sp, #4]
 801e084:	2304      	movs	r3, #4
 801e086:	449c      	add	ip, r3
 801e088:	e79b      	b.n	801dfc2 <__multiply+0x8a>
 801e08a:	9b03      	ldr	r3, [sp, #12]
 801e08c:	3b01      	subs	r3, #1
 801e08e:	9303      	str	r3, [sp, #12]
 801e090:	e79b      	b.n	801dfca <__multiply+0x92>
 801e092:	46c0      	nop			@ (mov r8, r8)
 801e094:	08021161 	.word	0x08021161
 801e098:	080211d2 	.word	0x080211d2

0801e09c <__pow5mult>:
 801e09c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801e09e:	2303      	movs	r3, #3
 801e0a0:	0015      	movs	r5, r2
 801e0a2:	0007      	movs	r7, r0
 801e0a4:	000e      	movs	r6, r1
 801e0a6:	401a      	ands	r2, r3
 801e0a8:	421d      	tst	r5, r3
 801e0aa:	d008      	beq.n	801e0be <__pow5mult+0x22>
 801e0ac:	4925      	ldr	r1, [pc, #148]	@ (801e144 <__pow5mult+0xa8>)
 801e0ae:	3a01      	subs	r2, #1
 801e0b0:	0092      	lsls	r2, r2, #2
 801e0b2:	5852      	ldr	r2, [r2, r1]
 801e0b4:	2300      	movs	r3, #0
 801e0b6:	0031      	movs	r1, r6
 801e0b8:	f7ff fe46 	bl	801dd48 <__multadd>
 801e0bc:	0006      	movs	r6, r0
 801e0be:	10ad      	asrs	r5, r5, #2
 801e0c0:	d03d      	beq.n	801e13e <__pow5mult+0xa2>
 801e0c2:	69fc      	ldr	r4, [r7, #28]
 801e0c4:	2c00      	cmp	r4, #0
 801e0c6:	d10f      	bne.n	801e0e8 <__pow5mult+0x4c>
 801e0c8:	2010      	movs	r0, #16
 801e0ca:	f7ff fd07 	bl	801dadc <malloc>
 801e0ce:	1e02      	subs	r2, r0, #0
 801e0d0:	61f8      	str	r0, [r7, #28]
 801e0d2:	d105      	bne.n	801e0e0 <__pow5mult+0x44>
 801e0d4:	21b4      	movs	r1, #180	@ 0xb4
 801e0d6:	4b1c      	ldr	r3, [pc, #112]	@ (801e148 <__pow5mult+0xac>)
 801e0d8:	481c      	ldr	r0, [pc, #112]	@ (801e14c <__pow5mult+0xb0>)
 801e0da:	31ff      	adds	r1, #255	@ 0xff
 801e0dc:	f000 febe 	bl	801ee5c <__assert_func>
 801e0e0:	6044      	str	r4, [r0, #4]
 801e0e2:	6084      	str	r4, [r0, #8]
 801e0e4:	6004      	str	r4, [r0, #0]
 801e0e6:	60c4      	str	r4, [r0, #12]
 801e0e8:	69fb      	ldr	r3, [r7, #28]
 801e0ea:	689c      	ldr	r4, [r3, #8]
 801e0ec:	9301      	str	r3, [sp, #4]
 801e0ee:	2c00      	cmp	r4, #0
 801e0f0:	d108      	bne.n	801e104 <__pow5mult+0x68>
 801e0f2:	0038      	movs	r0, r7
 801e0f4:	4916      	ldr	r1, [pc, #88]	@ (801e150 <__pow5mult+0xb4>)
 801e0f6:	f7ff ff07 	bl	801df08 <__i2b>
 801e0fa:	9b01      	ldr	r3, [sp, #4]
 801e0fc:	0004      	movs	r4, r0
 801e0fe:	6098      	str	r0, [r3, #8]
 801e100:	2300      	movs	r3, #0
 801e102:	6003      	str	r3, [r0, #0]
 801e104:	2301      	movs	r3, #1
 801e106:	421d      	tst	r5, r3
 801e108:	d00a      	beq.n	801e120 <__pow5mult+0x84>
 801e10a:	0031      	movs	r1, r6
 801e10c:	0022      	movs	r2, r4
 801e10e:	0038      	movs	r0, r7
 801e110:	f7ff ff12 	bl	801df38 <__multiply>
 801e114:	0031      	movs	r1, r6
 801e116:	9001      	str	r0, [sp, #4]
 801e118:	0038      	movs	r0, r7
 801e11a:	f7ff fdf1 	bl	801dd00 <_Bfree>
 801e11e:	9e01      	ldr	r6, [sp, #4]
 801e120:	106d      	asrs	r5, r5, #1
 801e122:	d00c      	beq.n	801e13e <__pow5mult+0xa2>
 801e124:	6820      	ldr	r0, [r4, #0]
 801e126:	2800      	cmp	r0, #0
 801e128:	d107      	bne.n	801e13a <__pow5mult+0x9e>
 801e12a:	0022      	movs	r2, r4
 801e12c:	0021      	movs	r1, r4
 801e12e:	0038      	movs	r0, r7
 801e130:	f7ff ff02 	bl	801df38 <__multiply>
 801e134:	2300      	movs	r3, #0
 801e136:	6020      	str	r0, [r4, #0]
 801e138:	6003      	str	r3, [r0, #0]
 801e13a:	0004      	movs	r4, r0
 801e13c:	e7e2      	b.n	801e104 <__pow5mult+0x68>
 801e13e:	0030      	movs	r0, r6
 801e140:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801e142:	46c0      	nop			@ (mov r8, r8)
 801e144:	0802122c 	.word	0x0802122c
 801e148:	080210f2 	.word	0x080210f2
 801e14c:	080211d2 	.word	0x080211d2
 801e150:	00000271 	.word	0x00000271

0801e154 <__lshift>:
 801e154:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e156:	000c      	movs	r4, r1
 801e158:	0016      	movs	r6, r2
 801e15a:	6923      	ldr	r3, [r4, #16]
 801e15c:	1157      	asrs	r7, r2, #5
 801e15e:	b085      	sub	sp, #20
 801e160:	18fb      	adds	r3, r7, r3
 801e162:	9301      	str	r3, [sp, #4]
 801e164:	3301      	adds	r3, #1
 801e166:	9300      	str	r3, [sp, #0]
 801e168:	6849      	ldr	r1, [r1, #4]
 801e16a:	68a3      	ldr	r3, [r4, #8]
 801e16c:	9002      	str	r0, [sp, #8]
 801e16e:	9a00      	ldr	r2, [sp, #0]
 801e170:	4293      	cmp	r3, r2
 801e172:	db10      	blt.n	801e196 <__lshift+0x42>
 801e174:	9802      	ldr	r0, [sp, #8]
 801e176:	f7ff fd7f 	bl	801dc78 <_Balloc>
 801e17a:	2300      	movs	r3, #0
 801e17c:	0001      	movs	r1, r0
 801e17e:	0005      	movs	r5, r0
 801e180:	001a      	movs	r2, r3
 801e182:	3114      	adds	r1, #20
 801e184:	4298      	cmp	r0, r3
 801e186:	d10c      	bne.n	801e1a2 <__lshift+0x4e>
 801e188:	21ef      	movs	r1, #239	@ 0xef
 801e18a:	002a      	movs	r2, r5
 801e18c:	4b25      	ldr	r3, [pc, #148]	@ (801e224 <__lshift+0xd0>)
 801e18e:	4826      	ldr	r0, [pc, #152]	@ (801e228 <__lshift+0xd4>)
 801e190:	0049      	lsls	r1, r1, #1
 801e192:	f000 fe63 	bl	801ee5c <__assert_func>
 801e196:	3101      	adds	r1, #1
 801e198:	005b      	lsls	r3, r3, #1
 801e19a:	e7e8      	b.n	801e16e <__lshift+0x1a>
 801e19c:	0098      	lsls	r0, r3, #2
 801e19e:	500a      	str	r2, [r1, r0]
 801e1a0:	3301      	adds	r3, #1
 801e1a2:	42bb      	cmp	r3, r7
 801e1a4:	dbfa      	blt.n	801e19c <__lshift+0x48>
 801e1a6:	43fb      	mvns	r3, r7
 801e1a8:	17db      	asrs	r3, r3, #31
 801e1aa:	401f      	ands	r7, r3
 801e1ac:	00bf      	lsls	r7, r7, #2
 801e1ae:	0023      	movs	r3, r4
 801e1b0:	201f      	movs	r0, #31
 801e1b2:	19c9      	adds	r1, r1, r7
 801e1b4:	0037      	movs	r7, r6
 801e1b6:	6922      	ldr	r2, [r4, #16]
 801e1b8:	3314      	adds	r3, #20
 801e1ba:	0092      	lsls	r2, r2, #2
 801e1bc:	189a      	adds	r2, r3, r2
 801e1be:	4007      	ands	r7, r0
 801e1c0:	4206      	tst	r6, r0
 801e1c2:	d029      	beq.n	801e218 <__lshift+0xc4>
 801e1c4:	3001      	adds	r0, #1
 801e1c6:	1bc0      	subs	r0, r0, r7
 801e1c8:	9003      	str	r0, [sp, #12]
 801e1ca:	468c      	mov	ip, r1
 801e1cc:	2000      	movs	r0, #0
 801e1ce:	681e      	ldr	r6, [r3, #0]
 801e1d0:	40be      	lsls	r6, r7
 801e1d2:	4306      	orrs	r6, r0
 801e1d4:	4660      	mov	r0, ip
 801e1d6:	c040      	stmia	r0!, {r6}
 801e1d8:	4684      	mov	ip, r0
 801e1da:	9e03      	ldr	r6, [sp, #12]
 801e1dc:	cb01      	ldmia	r3!, {r0}
 801e1de:	40f0      	lsrs	r0, r6
 801e1e0:	429a      	cmp	r2, r3
 801e1e2:	d8f4      	bhi.n	801e1ce <__lshift+0x7a>
 801e1e4:	0026      	movs	r6, r4
 801e1e6:	3615      	adds	r6, #21
 801e1e8:	2304      	movs	r3, #4
 801e1ea:	42b2      	cmp	r2, r6
 801e1ec:	d304      	bcc.n	801e1f8 <__lshift+0xa4>
 801e1ee:	1b13      	subs	r3, r2, r4
 801e1f0:	3b15      	subs	r3, #21
 801e1f2:	089b      	lsrs	r3, r3, #2
 801e1f4:	3301      	adds	r3, #1
 801e1f6:	009b      	lsls	r3, r3, #2
 801e1f8:	50c8      	str	r0, [r1, r3]
 801e1fa:	2800      	cmp	r0, #0
 801e1fc:	d002      	beq.n	801e204 <__lshift+0xb0>
 801e1fe:	9b01      	ldr	r3, [sp, #4]
 801e200:	3302      	adds	r3, #2
 801e202:	9300      	str	r3, [sp, #0]
 801e204:	9b00      	ldr	r3, [sp, #0]
 801e206:	9802      	ldr	r0, [sp, #8]
 801e208:	3b01      	subs	r3, #1
 801e20a:	0021      	movs	r1, r4
 801e20c:	612b      	str	r3, [r5, #16]
 801e20e:	f7ff fd77 	bl	801dd00 <_Bfree>
 801e212:	0028      	movs	r0, r5
 801e214:	b005      	add	sp, #20
 801e216:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e218:	cb01      	ldmia	r3!, {r0}
 801e21a:	c101      	stmia	r1!, {r0}
 801e21c:	429a      	cmp	r2, r3
 801e21e:	d8fb      	bhi.n	801e218 <__lshift+0xc4>
 801e220:	e7f0      	b.n	801e204 <__lshift+0xb0>
 801e222:	46c0      	nop			@ (mov r8, r8)
 801e224:	08021161 	.word	0x08021161
 801e228:	080211d2 	.word	0x080211d2

0801e22c <__mcmp>:
 801e22c:	b530      	push	{r4, r5, lr}
 801e22e:	690b      	ldr	r3, [r1, #16]
 801e230:	6904      	ldr	r4, [r0, #16]
 801e232:	0002      	movs	r2, r0
 801e234:	1ae0      	subs	r0, r4, r3
 801e236:	429c      	cmp	r4, r3
 801e238:	d10f      	bne.n	801e25a <__mcmp+0x2e>
 801e23a:	3214      	adds	r2, #20
 801e23c:	009b      	lsls	r3, r3, #2
 801e23e:	3114      	adds	r1, #20
 801e240:	0014      	movs	r4, r2
 801e242:	18c9      	adds	r1, r1, r3
 801e244:	18d2      	adds	r2, r2, r3
 801e246:	3a04      	subs	r2, #4
 801e248:	3904      	subs	r1, #4
 801e24a:	6815      	ldr	r5, [r2, #0]
 801e24c:	680b      	ldr	r3, [r1, #0]
 801e24e:	429d      	cmp	r5, r3
 801e250:	d004      	beq.n	801e25c <__mcmp+0x30>
 801e252:	2001      	movs	r0, #1
 801e254:	429d      	cmp	r5, r3
 801e256:	d200      	bcs.n	801e25a <__mcmp+0x2e>
 801e258:	3802      	subs	r0, #2
 801e25a:	bd30      	pop	{r4, r5, pc}
 801e25c:	4294      	cmp	r4, r2
 801e25e:	d3f2      	bcc.n	801e246 <__mcmp+0x1a>
 801e260:	e7fb      	b.n	801e25a <__mcmp+0x2e>
	...

0801e264 <__mdiff>:
 801e264:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e266:	000c      	movs	r4, r1
 801e268:	b087      	sub	sp, #28
 801e26a:	9000      	str	r0, [sp, #0]
 801e26c:	0011      	movs	r1, r2
 801e26e:	0020      	movs	r0, r4
 801e270:	0017      	movs	r7, r2
 801e272:	f7ff ffdb 	bl	801e22c <__mcmp>
 801e276:	1e05      	subs	r5, r0, #0
 801e278:	d110      	bne.n	801e29c <__mdiff+0x38>
 801e27a:	0001      	movs	r1, r0
 801e27c:	9800      	ldr	r0, [sp, #0]
 801e27e:	f7ff fcfb 	bl	801dc78 <_Balloc>
 801e282:	1e02      	subs	r2, r0, #0
 801e284:	d104      	bne.n	801e290 <__mdiff+0x2c>
 801e286:	4b40      	ldr	r3, [pc, #256]	@ (801e388 <__mdiff+0x124>)
 801e288:	4840      	ldr	r0, [pc, #256]	@ (801e38c <__mdiff+0x128>)
 801e28a:	4941      	ldr	r1, [pc, #260]	@ (801e390 <__mdiff+0x12c>)
 801e28c:	f000 fde6 	bl	801ee5c <__assert_func>
 801e290:	2301      	movs	r3, #1
 801e292:	6145      	str	r5, [r0, #20]
 801e294:	6103      	str	r3, [r0, #16]
 801e296:	0010      	movs	r0, r2
 801e298:	b007      	add	sp, #28
 801e29a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e29c:	2600      	movs	r6, #0
 801e29e:	42b0      	cmp	r0, r6
 801e2a0:	da03      	bge.n	801e2aa <__mdiff+0x46>
 801e2a2:	0023      	movs	r3, r4
 801e2a4:	003c      	movs	r4, r7
 801e2a6:	001f      	movs	r7, r3
 801e2a8:	3601      	adds	r6, #1
 801e2aa:	6861      	ldr	r1, [r4, #4]
 801e2ac:	9800      	ldr	r0, [sp, #0]
 801e2ae:	f7ff fce3 	bl	801dc78 <_Balloc>
 801e2b2:	1e02      	subs	r2, r0, #0
 801e2b4:	d103      	bne.n	801e2be <__mdiff+0x5a>
 801e2b6:	4b34      	ldr	r3, [pc, #208]	@ (801e388 <__mdiff+0x124>)
 801e2b8:	4834      	ldr	r0, [pc, #208]	@ (801e38c <__mdiff+0x128>)
 801e2ba:	4936      	ldr	r1, [pc, #216]	@ (801e394 <__mdiff+0x130>)
 801e2bc:	e7e6      	b.n	801e28c <__mdiff+0x28>
 801e2be:	6923      	ldr	r3, [r4, #16]
 801e2c0:	3414      	adds	r4, #20
 801e2c2:	9300      	str	r3, [sp, #0]
 801e2c4:	009b      	lsls	r3, r3, #2
 801e2c6:	18e3      	adds	r3, r4, r3
 801e2c8:	0021      	movs	r1, r4
 801e2ca:	9401      	str	r4, [sp, #4]
 801e2cc:	003c      	movs	r4, r7
 801e2ce:	9302      	str	r3, [sp, #8]
 801e2d0:	693b      	ldr	r3, [r7, #16]
 801e2d2:	3414      	adds	r4, #20
 801e2d4:	009b      	lsls	r3, r3, #2
 801e2d6:	18e3      	adds	r3, r4, r3
 801e2d8:	9303      	str	r3, [sp, #12]
 801e2da:	0003      	movs	r3, r0
 801e2dc:	60c6      	str	r6, [r0, #12]
 801e2de:	468c      	mov	ip, r1
 801e2e0:	2000      	movs	r0, #0
 801e2e2:	3314      	adds	r3, #20
 801e2e4:	9304      	str	r3, [sp, #16]
 801e2e6:	9305      	str	r3, [sp, #20]
 801e2e8:	4663      	mov	r3, ip
 801e2ea:	cb20      	ldmia	r3!, {r5}
 801e2ec:	b2a9      	uxth	r1, r5
 801e2ee:	000e      	movs	r6, r1
 801e2f0:	469c      	mov	ip, r3
 801e2f2:	cc08      	ldmia	r4!, {r3}
 801e2f4:	0c2d      	lsrs	r5, r5, #16
 801e2f6:	b299      	uxth	r1, r3
 801e2f8:	1a71      	subs	r1, r6, r1
 801e2fa:	1809      	adds	r1, r1, r0
 801e2fc:	0c1b      	lsrs	r3, r3, #16
 801e2fe:	1408      	asrs	r0, r1, #16
 801e300:	1aeb      	subs	r3, r5, r3
 801e302:	181b      	adds	r3, r3, r0
 801e304:	1418      	asrs	r0, r3, #16
 801e306:	b289      	uxth	r1, r1
 801e308:	041b      	lsls	r3, r3, #16
 801e30a:	4319      	orrs	r1, r3
 801e30c:	9b05      	ldr	r3, [sp, #20]
 801e30e:	c302      	stmia	r3!, {r1}
 801e310:	9305      	str	r3, [sp, #20]
 801e312:	9b03      	ldr	r3, [sp, #12]
 801e314:	42a3      	cmp	r3, r4
 801e316:	d8e7      	bhi.n	801e2e8 <__mdiff+0x84>
 801e318:	0039      	movs	r1, r7
 801e31a:	9c03      	ldr	r4, [sp, #12]
 801e31c:	3115      	adds	r1, #21
 801e31e:	2304      	movs	r3, #4
 801e320:	428c      	cmp	r4, r1
 801e322:	d304      	bcc.n	801e32e <__mdiff+0xca>
 801e324:	1be3      	subs	r3, r4, r7
 801e326:	3b15      	subs	r3, #21
 801e328:	089b      	lsrs	r3, r3, #2
 801e32a:	3301      	adds	r3, #1
 801e32c:	009b      	lsls	r3, r3, #2
 801e32e:	9901      	ldr	r1, [sp, #4]
 801e330:	18cd      	adds	r5, r1, r3
 801e332:	9904      	ldr	r1, [sp, #16]
 801e334:	002e      	movs	r6, r5
 801e336:	18cb      	adds	r3, r1, r3
 801e338:	001f      	movs	r7, r3
 801e33a:	9902      	ldr	r1, [sp, #8]
 801e33c:	428e      	cmp	r6, r1
 801e33e:	d311      	bcc.n	801e364 <__mdiff+0x100>
 801e340:	9c02      	ldr	r4, [sp, #8]
 801e342:	1ee9      	subs	r1, r5, #3
 801e344:	2000      	movs	r0, #0
 801e346:	428c      	cmp	r4, r1
 801e348:	d304      	bcc.n	801e354 <__mdiff+0xf0>
 801e34a:	0021      	movs	r1, r4
 801e34c:	3103      	adds	r1, #3
 801e34e:	1b49      	subs	r1, r1, r5
 801e350:	0889      	lsrs	r1, r1, #2
 801e352:	0088      	lsls	r0, r1, #2
 801e354:	181b      	adds	r3, r3, r0
 801e356:	3b04      	subs	r3, #4
 801e358:	6819      	ldr	r1, [r3, #0]
 801e35a:	2900      	cmp	r1, #0
 801e35c:	d010      	beq.n	801e380 <__mdiff+0x11c>
 801e35e:	9b00      	ldr	r3, [sp, #0]
 801e360:	6113      	str	r3, [r2, #16]
 801e362:	e798      	b.n	801e296 <__mdiff+0x32>
 801e364:	4684      	mov	ip, r0
 801e366:	ce02      	ldmia	r6!, {r1}
 801e368:	b288      	uxth	r0, r1
 801e36a:	4460      	add	r0, ip
 801e36c:	1400      	asrs	r0, r0, #16
 801e36e:	0c0c      	lsrs	r4, r1, #16
 801e370:	1904      	adds	r4, r0, r4
 801e372:	4461      	add	r1, ip
 801e374:	1420      	asrs	r0, r4, #16
 801e376:	b289      	uxth	r1, r1
 801e378:	0424      	lsls	r4, r4, #16
 801e37a:	4321      	orrs	r1, r4
 801e37c:	c702      	stmia	r7!, {r1}
 801e37e:	e7dc      	b.n	801e33a <__mdiff+0xd6>
 801e380:	9900      	ldr	r1, [sp, #0]
 801e382:	3901      	subs	r1, #1
 801e384:	9100      	str	r1, [sp, #0]
 801e386:	e7e6      	b.n	801e356 <__mdiff+0xf2>
 801e388:	08021161 	.word	0x08021161
 801e38c:	080211d2 	.word	0x080211d2
 801e390:	00000237 	.word	0x00000237
 801e394:	00000245 	.word	0x00000245

0801e398 <__ulp>:
 801e398:	b510      	push	{r4, lr}
 801e39a:	2400      	movs	r4, #0
 801e39c:	4b0c      	ldr	r3, [pc, #48]	@ (801e3d0 <__ulp+0x38>)
 801e39e:	4a0d      	ldr	r2, [pc, #52]	@ (801e3d4 <__ulp+0x3c>)
 801e3a0:	400b      	ands	r3, r1
 801e3a2:	189b      	adds	r3, r3, r2
 801e3a4:	42a3      	cmp	r3, r4
 801e3a6:	dc06      	bgt.n	801e3b6 <__ulp+0x1e>
 801e3a8:	425b      	negs	r3, r3
 801e3aa:	151a      	asrs	r2, r3, #20
 801e3ac:	2a13      	cmp	r2, #19
 801e3ae:	dc05      	bgt.n	801e3bc <__ulp+0x24>
 801e3b0:	2380      	movs	r3, #128	@ 0x80
 801e3b2:	031b      	lsls	r3, r3, #12
 801e3b4:	4113      	asrs	r3, r2
 801e3b6:	0019      	movs	r1, r3
 801e3b8:	0020      	movs	r0, r4
 801e3ba:	bd10      	pop	{r4, pc}
 801e3bc:	3a14      	subs	r2, #20
 801e3be:	2401      	movs	r4, #1
 801e3c0:	2a1e      	cmp	r2, #30
 801e3c2:	dc02      	bgt.n	801e3ca <__ulp+0x32>
 801e3c4:	2480      	movs	r4, #128	@ 0x80
 801e3c6:	0624      	lsls	r4, r4, #24
 801e3c8:	40d4      	lsrs	r4, r2
 801e3ca:	2300      	movs	r3, #0
 801e3cc:	e7f3      	b.n	801e3b6 <__ulp+0x1e>
 801e3ce:	46c0      	nop			@ (mov r8, r8)
 801e3d0:	7ff00000 	.word	0x7ff00000
 801e3d4:	fcc00000 	.word	0xfcc00000

0801e3d8 <__b2d>:
 801e3d8:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801e3da:	0006      	movs	r6, r0
 801e3dc:	6903      	ldr	r3, [r0, #16]
 801e3de:	3614      	adds	r6, #20
 801e3e0:	009b      	lsls	r3, r3, #2
 801e3e2:	18f3      	adds	r3, r6, r3
 801e3e4:	1f1d      	subs	r5, r3, #4
 801e3e6:	682c      	ldr	r4, [r5, #0]
 801e3e8:	000f      	movs	r7, r1
 801e3ea:	0020      	movs	r0, r4
 801e3ec:	9301      	str	r3, [sp, #4]
 801e3ee:	f7ff fd3b 	bl	801de68 <__hi0bits>
 801e3f2:	2220      	movs	r2, #32
 801e3f4:	1a12      	subs	r2, r2, r0
 801e3f6:	603a      	str	r2, [r7, #0]
 801e3f8:	0003      	movs	r3, r0
 801e3fa:	4a1c      	ldr	r2, [pc, #112]	@ (801e46c <__b2d+0x94>)
 801e3fc:	280a      	cmp	r0, #10
 801e3fe:	dc15      	bgt.n	801e42c <__b2d+0x54>
 801e400:	210b      	movs	r1, #11
 801e402:	0027      	movs	r7, r4
 801e404:	1a09      	subs	r1, r1, r0
 801e406:	40cf      	lsrs	r7, r1
 801e408:	433a      	orrs	r2, r7
 801e40a:	468c      	mov	ip, r1
 801e40c:	0011      	movs	r1, r2
 801e40e:	2200      	movs	r2, #0
 801e410:	42ae      	cmp	r6, r5
 801e412:	d202      	bcs.n	801e41a <__b2d+0x42>
 801e414:	9a01      	ldr	r2, [sp, #4]
 801e416:	3a08      	subs	r2, #8
 801e418:	6812      	ldr	r2, [r2, #0]
 801e41a:	3315      	adds	r3, #21
 801e41c:	409c      	lsls	r4, r3
 801e41e:	4663      	mov	r3, ip
 801e420:	0027      	movs	r7, r4
 801e422:	40da      	lsrs	r2, r3
 801e424:	4317      	orrs	r7, r2
 801e426:	0038      	movs	r0, r7
 801e428:	b003      	add	sp, #12
 801e42a:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e42c:	2700      	movs	r7, #0
 801e42e:	42ae      	cmp	r6, r5
 801e430:	d202      	bcs.n	801e438 <__b2d+0x60>
 801e432:	9d01      	ldr	r5, [sp, #4]
 801e434:	3d08      	subs	r5, #8
 801e436:	682f      	ldr	r7, [r5, #0]
 801e438:	210b      	movs	r1, #11
 801e43a:	4249      	negs	r1, r1
 801e43c:	468c      	mov	ip, r1
 801e43e:	449c      	add	ip, r3
 801e440:	2b0b      	cmp	r3, #11
 801e442:	d010      	beq.n	801e466 <__b2d+0x8e>
 801e444:	4661      	mov	r1, ip
 801e446:	2320      	movs	r3, #32
 801e448:	408c      	lsls	r4, r1
 801e44a:	1a5b      	subs	r3, r3, r1
 801e44c:	0039      	movs	r1, r7
 801e44e:	40d9      	lsrs	r1, r3
 801e450:	430c      	orrs	r4, r1
 801e452:	4322      	orrs	r2, r4
 801e454:	0011      	movs	r1, r2
 801e456:	2200      	movs	r2, #0
 801e458:	42b5      	cmp	r5, r6
 801e45a:	d901      	bls.n	801e460 <__b2d+0x88>
 801e45c:	3d04      	subs	r5, #4
 801e45e:	682a      	ldr	r2, [r5, #0]
 801e460:	4664      	mov	r4, ip
 801e462:	40a7      	lsls	r7, r4
 801e464:	e7dd      	b.n	801e422 <__b2d+0x4a>
 801e466:	4322      	orrs	r2, r4
 801e468:	0011      	movs	r1, r2
 801e46a:	e7dc      	b.n	801e426 <__b2d+0x4e>
 801e46c:	3ff00000 	.word	0x3ff00000

0801e470 <__d2b>:
 801e470:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801e472:	2101      	movs	r1, #1
 801e474:	0016      	movs	r6, r2
 801e476:	001f      	movs	r7, r3
 801e478:	f7ff fbfe 	bl	801dc78 <_Balloc>
 801e47c:	1e04      	subs	r4, r0, #0
 801e47e:	d105      	bne.n	801e48c <__d2b+0x1c>
 801e480:	0022      	movs	r2, r4
 801e482:	4b25      	ldr	r3, [pc, #148]	@ (801e518 <__d2b+0xa8>)
 801e484:	4825      	ldr	r0, [pc, #148]	@ (801e51c <__d2b+0xac>)
 801e486:	4926      	ldr	r1, [pc, #152]	@ (801e520 <__d2b+0xb0>)
 801e488:	f000 fce8 	bl	801ee5c <__assert_func>
 801e48c:	033b      	lsls	r3, r7, #12
 801e48e:	007d      	lsls	r5, r7, #1
 801e490:	0b1b      	lsrs	r3, r3, #12
 801e492:	0d6d      	lsrs	r5, r5, #21
 801e494:	d002      	beq.n	801e49c <__d2b+0x2c>
 801e496:	2280      	movs	r2, #128	@ 0x80
 801e498:	0352      	lsls	r2, r2, #13
 801e49a:	4313      	orrs	r3, r2
 801e49c:	9301      	str	r3, [sp, #4]
 801e49e:	2e00      	cmp	r6, #0
 801e4a0:	d025      	beq.n	801e4ee <__d2b+0x7e>
 801e4a2:	4668      	mov	r0, sp
 801e4a4:	9600      	str	r6, [sp, #0]
 801e4a6:	f7ff fd00 	bl	801deaa <__lo0bits>
 801e4aa:	9b01      	ldr	r3, [sp, #4]
 801e4ac:	9900      	ldr	r1, [sp, #0]
 801e4ae:	2800      	cmp	r0, #0
 801e4b0:	d01b      	beq.n	801e4ea <__d2b+0x7a>
 801e4b2:	2220      	movs	r2, #32
 801e4b4:	001e      	movs	r6, r3
 801e4b6:	1a12      	subs	r2, r2, r0
 801e4b8:	4096      	lsls	r6, r2
 801e4ba:	0032      	movs	r2, r6
 801e4bc:	40c3      	lsrs	r3, r0
 801e4be:	430a      	orrs	r2, r1
 801e4c0:	6162      	str	r2, [r4, #20]
 801e4c2:	9301      	str	r3, [sp, #4]
 801e4c4:	9e01      	ldr	r6, [sp, #4]
 801e4c6:	61a6      	str	r6, [r4, #24]
 801e4c8:	1e73      	subs	r3, r6, #1
 801e4ca:	419e      	sbcs	r6, r3
 801e4cc:	3601      	adds	r6, #1
 801e4ce:	6126      	str	r6, [r4, #16]
 801e4d0:	2d00      	cmp	r5, #0
 801e4d2:	d014      	beq.n	801e4fe <__d2b+0x8e>
 801e4d4:	2635      	movs	r6, #53	@ 0x35
 801e4d6:	4b13      	ldr	r3, [pc, #76]	@ (801e524 <__d2b+0xb4>)
 801e4d8:	18ed      	adds	r5, r5, r3
 801e4da:	9b08      	ldr	r3, [sp, #32]
 801e4dc:	182d      	adds	r5, r5, r0
 801e4de:	601d      	str	r5, [r3, #0]
 801e4e0:	9b09      	ldr	r3, [sp, #36]	@ 0x24
 801e4e2:	1a36      	subs	r6, r6, r0
 801e4e4:	601e      	str	r6, [r3, #0]
 801e4e6:	0020      	movs	r0, r4
 801e4e8:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801e4ea:	6161      	str	r1, [r4, #20]
 801e4ec:	e7ea      	b.n	801e4c4 <__d2b+0x54>
 801e4ee:	a801      	add	r0, sp, #4
 801e4f0:	f7ff fcdb 	bl	801deaa <__lo0bits>
 801e4f4:	9b01      	ldr	r3, [sp, #4]
 801e4f6:	2601      	movs	r6, #1
 801e4f8:	6163      	str	r3, [r4, #20]
 801e4fa:	3020      	adds	r0, #32
 801e4fc:	e7e7      	b.n	801e4ce <__d2b+0x5e>
 801e4fe:	4b0a      	ldr	r3, [pc, #40]	@ (801e528 <__d2b+0xb8>)
 801e500:	18c0      	adds	r0, r0, r3
 801e502:	9b08      	ldr	r3, [sp, #32]
 801e504:	6018      	str	r0, [r3, #0]
 801e506:	4b09      	ldr	r3, [pc, #36]	@ (801e52c <__d2b+0xbc>)
 801e508:	18f3      	adds	r3, r6, r3
 801e50a:	009b      	lsls	r3, r3, #2
 801e50c:	18e3      	adds	r3, r4, r3
 801e50e:	6958      	ldr	r0, [r3, #20]
 801e510:	f7ff fcaa 	bl	801de68 <__hi0bits>
 801e514:	0176      	lsls	r6, r6, #5
 801e516:	e7e3      	b.n	801e4e0 <__d2b+0x70>
 801e518:	08021161 	.word	0x08021161
 801e51c:	080211d2 	.word	0x080211d2
 801e520:	0000030f 	.word	0x0000030f
 801e524:	fffffbcd 	.word	0xfffffbcd
 801e528:	fffffbce 	.word	0xfffffbce
 801e52c:	3fffffff 	.word	0x3fffffff

0801e530 <__ratio>:
 801e530:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e532:	b087      	sub	sp, #28
 801e534:	000f      	movs	r7, r1
 801e536:	a904      	add	r1, sp, #16
 801e538:	0006      	movs	r6, r0
 801e53a:	f7ff ff4d 	bl	801e3d8 <__b2d>
 801e53e:	9000      	str	r0, [sp, #0]
 801e540:	9101      	str	r1, [sp, #4]
 801e542:	9b00      	ldr	r3, [sp, #0]
 801e544:	9c01      	ldr	r4, [sp, #4]
 801e546:	0038      	movs	r0, r7
 801e548:	a905      	add	r1, sp, #20
 801e54a:	9302      	str	r3, [sp, #8]
 801e54c:	9403      	str	r4, [sp, #12]
 801e54e:	f7ff ff43 	bl	801e3d8 <__b2d>
 801e552:	000d      	movs	r5, r1
 801e554:	0002      	movs	r2, r0
 801e556:	000b      	movs	r3, r1
 801e558:	6930      	ldr	r0, [r6, #16]
 801e55a:	6939      	ldr	r1, [r7, #16]
 801e55c:	9e04      	ldr	r6, [sp, #16]
 801e55e:	1a40      	subs	r0, r0, r1
 801e560:	9905      	ldr	r1, [sp, #20]
 801e562:	0140      	lsls	r0, r0, #5
 801e564:	1a71      	subs	r1, r6, r1
 801e566:	1841      	adds	r1, r0, r1
 801e568:	0508      	lsls	r0, r1, #20
 801e56a:	2900      	cmp	r1, #0
 801e56c:	dd08      	ble.n	801e580 <__ratio+0x50>
 801e56e:	9901      	ldr	r1, [sp, #4]
 801e570:	1841      	adds	r1, r0, r1
 801e572:	9103      	str	r1, [sp, #12]
 801e574:	9802      	ldr	r0, [sp, #8]
 801e576:	9903      	ldr	r1, [sp, #12]
 801e578:	f7e3 fc1c 	bl	8001db4 <__aeabi_ddiv>
 801e57c:	b007      	add	sp, #28
 801e57e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e580:	1a2b      	subs	r3, r5, r0
 801e582:	e7f7      	b.n	801e574 <__ratio+0x44>

0801e584 <__copybits>:
 801e584:	b570      	push	{r4, r5, r6, lr}
 801e586:	0014      	movs	r4, r2
 801e588:	0005      	movs	r5, r0
 801e58a:	3901      	subs	r1, #1
 801e58c:	6913      	ldr	r3, [r2, #16]
 801e58e:	1149      	asrs	r1, r1, #5
 801e590:	3101      	adds	r1, #1
 801e592:	0089      	lsls	r1, r1, #2
 801e594:	3414      	adds	r4, #20
 801e596:	009b      	lsls	r3, r3, #2
 801e598:	1841      	adds	r1, r0, r1
 801e59a:	18e3      	adds	r3, r4, r3
 801e59c:	42a3      	cmp	r3, r4
 801e59e:	d80d      	bhi.n	801e5bc <__copybits+0x38>
 801e5a0:	0014      	movs	r4, r2
 801e5a2:	3411      	adds	r4, #17
 801e5a4:	2500      	movs	r5, #0
 801e5a6:	429c      	cmp	r4, r3
 801e5a8:	d803      	bhi.n	801e5b2 <__copybits+0x2e>
 801e5aa:	1a9b      	subs	r3, r3, r2
 801e5ac:	3b11      	subs	r3, #17
 801e5ae:	089b      	lsrs	r3, r3, #2
 801e5b0:	009d      	lsls	r5, r3, #2
 801e5b2:	2300      	movs	r3, #0
 801e5b4:	1940      	adds	r0, r0, r5
 801e5b6:	4281      	cmp	r1, r0
 801e5b8:	d803      	bhi.n	801e5c2 <__copybits+0x3e>
 801e5ba:	bd70      	pop	{r4, r5, r6, pc}
 801e5bc:	cc40      	ldmia	r4!, {r6}
 801e5be:	c540      	stmia	r5!, {r6}
 801e5c0:	e7ec      	b.n	801e59c <__copybits+0x18>
 801e5c2:	c008      	stmia	r0!, {r3}
 801e5c4:	e7f7      	b.n	801e5b6 <__copybits+0x32>

0801e5c6 <__any_on>:
 801e5c6:	0002      	movs	r2, r0
 801e5c8:	6900      	ldr	r0, [r0, #16]
 801e5ca:	b510      	push	{r4, lr}
 801e5cc:	3214      	adds	r2, #20
 801e5ce:	114b      	asrs	r3, r1, #5
 801e5d0:	4298      	cmp	r0, r3
 801e5d2:	db13      	blt.n	801e5fc <__any_on+0x36>
 801e5d4:	dd0c      	ble.n	801e5f0 <__any_on+0x2a>
 801e5d6:	241f      	movs	r4, #31
 801e5d8:	0008      	movs	r0, r1
 801e5da:	4020      	ands	r0, r4
 801e5dc:	4221      	tst	r1, r4
 801e5de:	d007      	beq.n	801e5f0 <__any_on+0x2a>
 801e5e0:	0099      	lsls	r1, r3, #2
 801e5e2:	588c      	ldr	r4, [r1, r2]
 801e5e4:	0021      	movs	r1, r4
 801e5e6:	40c1      	lsrs	r1, r0
 801e5e8:	4081      	lsls	r1, r0
 801e5ea:	2001      	movs	r0, #1
 801e5ec:	428c      	cmp	r4, r1
 801e5ee:	d104      	bne.n	801e5fa <__any_on+0x34>
 801e5f0:	009b      	lsls	r3, r3, #2
 801e5f2:	18d3      	adds	r3, r2, r3
 801e5f4:	4293      	cmp	r3, r2
 801e5f6:	d803      	bhi.n	801e600 <__any_on+0x3a>
 801e5f8:	2000      	movs	r0, #0
 801e5fa:	bd10      	pop	{r4, pc}
 801e5fc:	0003      	movs	r3, r0
 801e5fe:	e7f7      	b.n	801e5f0 <__any_on+0x2a>
 801e600:	3b04      	subs	r3, #4
 801e602:	6819      	ldr	r1, [r3, #0]
 801e604:	2900      	cmp	r1, #0
 801e606:	d0f5      	beq.n	801e5f4 <__any_on+0x2e>
 801e608:	2001      	movs	r0, #1
 801e60a:	e7f6      	b.n	801e5fa <__any_on+0x34>

0801e60c <__ascii_wctomb>:
 801e60c:	0003      	movs	r3, r0
 801e60e:	1e08      	subs	r0, r1, #0
 801e610:	d005      	beq.n	801e61e <__ascii_wctomb+0x12>
 801e612:	2aff      	cmp	r2, #255	@ 0xff
 801e614:	d904      	bls.n	801e620 <__ascii_wctomb+0x14>
 801e616:	228a      	movs	r2, #138	@ 0x8a
 801e618:	2001      	movs	r0, #1
 801e61a:	601a      	str	r2, [r3, #0]
 801e61c:	4240      	negs	r0, r0
 801e61e:	4770      	bx	lr
 801e620:	2001      	movs	r0, #1
 801e622:	700a      	strb	r2, [r1, #0]
 801e624:	e7fb      	b.n	801e61e <__ascii_wctomb+0x12>
	...

0801e628 <__ssputs_r>:
 801e628:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e62a:	688e      	ldr	r6, [r1, #8]
 801e62c:	b085      	sub	sp, #20
 801e62e:	001f      	movs	r7, r3
 801e630:	000c      	movs	r4, r1
 801e632:	680b      	ldr	r3, [r1, #0]
 801e634:	9002      	str	r0, [sp, #8]
 801e636:	9203      	str	r2, [sp, #12]
 801e638:	42be      	cmp	r6, r7
 801e63a:	d830      	bhi.n	801e69e <__ssputs_r+0x76>
 801e63c:	210c      	movs	r1, #12
 801e63e:	5e62      	ldrsh	r2, [r4, r1]
 801e640:	2190      	movs	r1, #144	@ 0x90
 801e642:	00c9      	lsls	r1, r1, #3
 801e644:	420a      	tst	r2, r1
 801e646:	d028      	beq.n	801e69a <__ssputs_r+0x72>
 801e648:	2003      	movs	r0, #3
 801e64a:	6921      	ldr	r1, [r4, #16]
 801e64c:	1a5b      	subs	r3, r3, r1
 801e64e:	9301      	str	r3, [sp, #4]
 801e650:	6963      	ldr	r3, [r4, #20]
 801e652:	4343      	muls	r3, r0
 801e654:	9801      	ldr	r0, [sp, #4]
 801e656:	0fdd      	lsrs	r5, r3, #31
 801e658:	18ed      	adds	r5, r5, r3
 801e65a:	1c7b      	adds	r3, r7, #1
 801e65c:	181b      	adds	r3, r3, r0
 801e65e:	106d      	asrs	r5, r5, #1
 801e660:	42ab      	cmp	r3, r5
 801e662:	d900      	bls.n	801e666 <__ssputs_r+0x3e>
 801e664:	001d      	movs	r5, r3
 801e666:	0552      	lsls	r2, r2, #21
 801e668:	d528      	bpl.n	801e6bc <__ssputs_r+0x94>
 801e66a:	0029      	movs	r1, r5
 801e66c:	9802      	ldr	r0, [sp, #8]
 801e66e:	f7ff fa61 	bl	801db34 <_malloc_r>
 801e672:	1e06      	subs	r6, r0, #0
 801e674:	d02c      	beq.n	801e6d0 <__ssputs_r+0xa8>
 801e676:	9a01      	ldr	r2, [sp, #4]
 801e678:	6921      	ldr	r1, [r4, #16]
 801e67a:	f7fd fff9 	bl	801c670 <memcpy>
 801e67e:	89a2      	ldrh	r2, [r4, #12]
 801e680:	4b18      	ldr	r3, [pc, #96]	@ (801e6e4 <__ssputs_r+0xbc>)
 801e682:	401a      	ands	r2, r3
 801e684:	2380      	movs	r3, #128	@ 0x80
 801e686:	4313      	orrs	r3, r2
 801e688:	81a3      	strh	r3, [r4, #12]
 801e68a:	9b01      	ldr	r3, [sp, #4]
 801e68c:	6126      	str	r6, [r4, #16]
 801e68e:	18f6      	adds	r6, r6, r3
 801e690:	6026      	str	r6, [r4, #0]
 801e692:	003e      	movs	r6, r7
 801e694:	6165      	str	r5, [r4, #20]
 801e696:	1aed      	subs	r5, r5, r3
 801e698:	60a5      	str	r5, [r4, #8]
 801e69a:	42be      	cmp	r6, r7
 801e69c:	d900      	bls.n	801e6a0 <__ssputs_r+0x78>
 801e69e:	003e      	movs	r6, r7
 801e6a0:	0032      	movs	r2, r6
 801e6a2:	9903      	ldr	r1, [sp, #12]
 801e6a4:	6820      	ldr	r0, [r4, #0]
 801e6a6:	f000 fbb3 	bl	801ee10 <memmove>
 801e6aa:	2000      	movs	r0, #0
 801e6ac:	68a3      	ldr	r3, [r4, #8]
 801e6ae:	1b9b      	subs	r3, r3, r6
 801e6b0:	60a3      	str	r3, [r4, #8]
 801e6b2:	6823      	ldr	r3, [r4, #0]
 801e6b4:	199b      	adds	r3, r3, r6
 801e6b6:	6023      	str	r3, [r4, #0]
 801e6b8:	b005      	add	sp, #20
 801e6ba:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e6bc:	002a      	movs	r2, r5
 801e6be:	9802      	ldr	r0, [sp, #8]
 801e6c0:	f000 fc17 	bl	801eef2 <_realloc_r>
 801e6c4:	1e06      	subs	r6, r0, #0
 801e6c6:	d1e0      	bne.n	801e68a <__ssputs_r+0x62>
 801e6c8:	6921      	ldr	r1, [r4, #16]
 801e6ca:	9802      	ldr	r0, [sp, #8]
 801e6cc:	f7fe fe62 	bl	801d394 <_free_r>
 801e6d0:	230c      	movs	r3, #12
 801e6d2:	2001      	movs	r0, #1
 801e6d4:	9a02      	ldr	r2, [sp, #8]
 801e6d6:	4240      	negs	r0, r0
 801e6d8:	6013      	str	r3, [r2, #0]
 801e6da:	89a2      	ldrh	r2, [r4, #12]
 801e6dc:	3334      	adds	r3, #52	@ 0x34
 801e6de:	4313      	orrs	r3, r2
 801e6e0:	81a3      	strh	r3, [r4, #12]
 801e6e2:	e7e9      	b.n	801e6b8 <__ssputs_r+0x90>
 801e6e4:	fffffb7f 	.word	0xfffffb7f

0801e6e8 <_svfiprintf_r>:
 801e6e8:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e6ea:	b0a1      	sub	sp, #132	@ 0x84
 801e6ec:	9003      	str	r0, [sp, #12]
 801e6ee:	001d      	movs	r5, r3
 801e6f0:	898b      	ldrh	r3, [r1, #12]
 801e6f2:	000f      	movs	r7, r1
 801e6f4:	0016      	movs	r6, r2
 801e6f6:	061b      	lsls	r3, r3, #24
 801e6f8:	d511      	bpl.n	801e71e <_svfiprintf_r+0x36>
 801e6fa:	690b      	ldr	r3, [r1, #16]
 801e6fc:	2b00      	cmp	r3, #0
 801e6fe:	d10e      	bne.n	801e71e <_svfiprintf_r+0x36>
 801e700:	2140      	movs	r1, #64	@ 0x40
 801e702:	f7ff fa17 	bl	801db34 <_malloc_r>
 801e706:	6038      	str	r0, [r7, #0]
 801e708:	6138      	str	r0, [r7, #16]
 801e70a:	2800      	cmp	r0, #0
 801e70c:	d105      	bne.n	801e71a <_svfiprintf_r+0x32>
 801e70e:	230c      	movs	r3, #12
 801e710:	9a03      	ldr	r2, [sp, #12]
 801e712:	6013      	str	r3, [r2, #0]
 801e714:	2001      	movs	r0, #1
 801e716:	4240      	negs	r0, r0
 801e718:	e0cf      	b.n	801e8ba <_svfiprintf_r+0x1d2>
 801e71a:	2340      	movs	r3, #64	@ 0x40
 801e71c:	617b      	str	r3, [r7, #20]
 801e71e:	2300      	movs	r3, #0
 801e720:	ac08      	add	r4, sp, #32
 801e722:	6163      	str	r3, [r4, #20]
 801e724:	3320      	adds	r3, #32
 801e726:	7663      	strb	r3, [r4, #25]
 801e728:	3310      	adds	r3, #16
 801e72a:	76a3      	strb	r3, [r4, #26]
 801e72c:	9507      	str	r5, [sp, #28]
 801e72e:	0035      	movs	r5, r6
 801e730:	782b      	ldrb	r3, [r5, #0]
 801e732:	2b00      	cmp	r3, #0
 801e734:	d001      	beq.n	801e73a <_svfiprintf_r+0x52>
 801e736:	2b25      	cmp	r3, #37	@ 0x25
 801e738:	d148      	bne.n	801e7cc <_svfiprintf_r+0xe4>
 801e73a:	1bab      	subs	r3, r5, r6
 801e73c:	9305      	str	r3, [sp, #20]
 801e73e:	42b5      	cmp	r5, r6
 801e740:	d00b      	beq.n	801e75a <_svfiprintf_r+0x72>
 801e742:	0032      	movs	r2, r6
 801e744:	0039      	movs	r1, r7
 801e746:	9803      	ldr	r0, [sp, #12]
 801e748:	f7ff ff6e 	bl	801e628 <__ssputs_r>
 801e74c:	3001      	adds	r0, #1
 801e74e:	d100      	bne.n	801e752 <_svfiprintf_r+0x6a>
 801e750:	e0ae      	b.n	801e8b0 <_svfiprintf_r+0x1c8>
 801e752:	6963      	ldr	r3, [r4, #20]
 801e754:	9a05      	ldr	r2, [sp, #20]
 801e756:	189b      	adds	r3, r3, r2
 801e758:	6163      	str	r3, [r4, #20]
 801e75a:	782b      	ldrb	r3, [r5, #0]
 801e75c:	2b00      	cmp	r3, #0
 801e75e:	d100      	bne.n	801e762 <_svfiprintf_r+0x7a>
 801e760:	e0a6      	b.n	801e8b0 <_svfiprintf_r+0x1c8>
 801e762:	2201      	movs	r2, #1
 801e764:	2300      	movs	r3, #0
 801e766:	4252      	negs	r2, r2
 801e768:	6062      	str	r2, [r4, #4]
 801e76a:	a904      	add	r1, sp, #16
 801e76c:	3254      	adds	r2, #84	@ 0x54
 801e76e:	1852      	adds	r2, r2, r1
 801e770:	1c6e      	adds	r6, r5, #1
 801e772:	6023      	str	r3, [r4, #0]
 801e774:	60e3      	str	r3, [r4, #12]
 801e776:	60a3      	str	r3, [r4, #8]
 801e778:	7013      	strb	r3, [r2, #0]
 801e77a:	65a3      	str	r3, [r4, #88]	@ 0x58
 801e77c:	4b54      	ldr	r3, [pc, #336]	@ (801e8d0 <_svfiprintf_r+0x1e8>)
 801e77e:	2205      	movs	r2, #5
 801e780:	0018      	movs	r0, r3
 801e782:	7831      	ldrb	r1, [r6, #0]
 801e784:	9305      	str	r3, [sp, #20]
 801e786:	f7fd ff68 	bl	801c65a <memchr>
 801e78a:	1c75      	adds	r5, r6, #1
 801e78c:	2800      	cmp	r0, #0
 801e78e:	d11f      	bne.n	801e7d0 <_svfiprintf_r+0xe8>
 801e790:	6822      	ldr	r2, [r4, #0]
 801e792:	06d3      	lsls	r3, r2, #27
 801e794:	d504      	bpl.n	801e7a0 <_svfiprintf_r+0xb8>
 801e796:	2353      	movs	r3, #83	@ 0x53
 801e798:	a904      	add	r1, sp, #16
 801e79a:	185b      	adds	r3, r3, r1
 801e79c:	2120      	movs	r1, #32
 801e79e:	7019      	strb	r1, [r3, #0]
 801e7a0:	0713      	lsls	r3, r2, #28
 801e7a2:	d504      	bpl.n	801e7ae <_svfiprintf_r+0xc6>
 801e7a4:	2353      	movs	r3, #83	@ 0x53
 801e7a6:	a904      	add	r1, sp, #16
 801e7a8:	185b      	adds	r3, r3, r1
 801e7aa:	212b      	movs	r1, #43	@ 0x2b
 801e7ac:	7019      	strb	r1, [r3, #0]
 801e7ae:	7833      	ldrb	r3, [r6, #0]
 801e7b0:	2b2a      	cmp	r3, #42	@ 0x2a
 801e7b2:	d016      	beq.n	801e7e2 <_svfiprintf_r+0xfa>
 801e7b4:	0035      	movs	r5, r6
 801e7b6:	2100      	movs	r1, #0
 801e7b8:	200a      	movs	r0, #10
 801e7ba:	68e3      	ldr	r3, [r4, #12]
 801e7bc:	782a      	ldrb	r2, [r5, #0]
 801e7be:	1c6e      	adds	r6, r5, #1
 801e7c0:	3a30      	subs	r2, #48	@ 0x30
 801e7c2:	2a09      	cmp	r2, #9
 801e7c4:	d950      	bls.n	801e868 <_svfiprintf_r+0x180>
 801e7c6:	2900      	cmp	r1, #0
 801e7c8:	d111      	bne.n	801e7ee <_svfiprintf_r+0x106>
 801e7ca:	e017      	b.n	801e7fc <_svfiprintf_r+0x114>
 801e7cc:	3501      	adds	r5, #1
 801e7ce:	e7af      	b.n	801e730 <_svfiprintf_r+0x48>
 801e7d0:	9b05      	ldr	r3, [sp, #20]
 801e7d2:	6822      	ldr	r2, [r4, #0]
 801e7d4:	1ac0      	subs	r0, r0, r3
 801e7d6:	2301      	movs	r3, #1
 801e7d8:	4083      	lsls	r3, r0
 801e7da:	4313      	orrs	r3, r2
 801e7dc:	002e      	movs	r6, r5
 801e7de:	6023      	str	r3, [r4, #0]
 801e7e0:	e7cc      	b.n	801e77c <_svfiprintf_r+0x94>
 801e7e2:	9b07      	ldr	r3, [sp, #28]
 801e7e4:	1d19      	adds	r1, r3, #4
 801e7e6:	681b      	ldr	r3, [r3, #0]
 801e7e8:	9107      	str	r1, [sp, #28]
 801e7ea:	2b00      	cmp	r3, #0
 801e7ec:	db01      	blt.n	801e7f2 <_svfiprintf_r+0x10a>
 801e7ee:	930b      	str	r3, [sp, #44]	@ 0x2c
 801e7f0:	e004      	b.n	801e7fc <_svfiprintf_r+0x114>
 801e7f2:	425b      	negs	r3, r3
 801e7f4:	60e3      	str	r3, [r4, #12]
 801e7f6:	2302      	movs	r3, #2
 801e7f8:	4313      	orrs	r3, r2
 801e7fa:	6023      	str	r3, [r4, #0]
 801e7fc:	782b      	ldrb	r3, [r5, #0]
 801e7fe:	2b2e      	cmp	r3, #46	@ 0x2e
 801e800:	d10c      	bne.n	801e81c <_svfiprintf_r+0x134>
 801e802:	786b      	ldrb	r3, [r5, #1]
 801e804:	2b2a      	cmp	r3, #42	@ 0x2a
 801e806:	d134      	bne.n	801e872 <_svfiprintf_r+0x18a>
 801e808:	9b07      	ldr	r3, [sp, #28]
 801e80a:	3502      	adds	r5, #2
 801e80c:	1d1a      	adds	r2, r3, #4
 801e80e:	681b      	ldr	r3, [r3, #0]
 801e810:	9207      	str	r2, [sp, #28]
 801e812:	2b00      	cmp	r3, #0
 801e814:	da01      	bge.n	801e81a <_svfiprintf_r+0x132>
 801e816:	2301      	movs	r3, #1
 801e818:	425b      	negs	r3, r3
 801e81a:	9309      	str	r3, [sp, #36]	@ 0x24
 801e81c:	4e2d      	ldr	r6, [pc, #180]	@ (801e8d4 <_svfiprintf_r+0x1ec>)
 801e81e:	2203      	movs	r2, #3
 801e820:	0030      	movs	r0, r6
 801e822:	7829      	ldrb	r1, [r5, #0]
 801e824:	f7fd ff19 	bl	801c65a <memchr>
 801e828:	2800      	cmp	r0, #0
 801e82a:	d006      	beq.n	801e83a <_svfiprintf_r+0x152>
 801e82c:	2340      	movs	r3, #64	@ 0x40
 801e82e:	1b80      	subs	r0, r0, r6
 801e830:	4083      	lsls	r3, r0
 801e832:	6822      	ldr	r2, [r4, #0]
 801e834:	3501      	adds	r5, #1
 801e836:	4313      	orrs	r3, r2
 801e838:	6023      	str	r3, [r4, #0]
 801e83a:	7829      	ldrb	r1, [r5, #0]
 801e83c:	2206      	movs	r2, #6
 801e83e:	4826      	ldr	r0, [pc, #152]	@ (801e8d8 <_svfiprintf_r+0x1f0>)
 801e840:	1c6e      	adds	r6, r5, #1
 801e842:	7621      	strb	r1, [r4, #24]
 801e844:	f7fd ff09 	bl	801c65a <memchr>
 801e848:	2800      	cmp	r0, #0
 801e84a:	d038      	beq.n	801e8be <_svfiprintf_r+0x1d6>
 801e84c:	4b23      	ldr	r3, [pc, #140]	@ (801e8dc <_svfiprintf_r+0x1f4>)
 801e84e:	2b00      	cmp	r3, #0
 801e850:	d122      	bne.n	801e898 <_svfiprintf_r+0x1b0>
 801e852:	2207      	movs	r2, #7
 801e854:	9b07      	ldr	r3, [sp, #28]
 801e856:	3307      	adds	r3, #7
 801e858:	4393      	bics	r3, r2
 801e85a:	3308      	adds	r3, #8
 801e85c:	9307      	str	r3, [sp, #28]
 801e85e:	6963      	ldr	r3, [r4, #20]
 801e860:	9a04      	ldr	r2, [sp, #16]
 801e862:	189b      	adds	r3, r3, r2
 801e864:	6163      	str	r3, [r4, #20]
 801e866:	e762      	b.n	801e72e <_svfiprintf_r+0x46>
 801e868:	4343      	muls	r3, r0
 801e86a:	0035      	movs	r5, r6
 801e86c:	2101      	movs	r1, #1
 801e86e:	189b      	adds	r3, r3, r2
 801e870:	e7a4      	b.n	801e7bc <_svfiprintf_r+0xd4>
 801e872:	2300      	movs	r3, #0
 801e874:	200a      	movs	r0, #10
 801e876:	0019      	movs	r1, r3
 801e878:	3501      	adds	r5, #1
 801e87a:	6063      	str	r3, [r4, #4]
 801e87c:	782a      	ldrb	r2, [r5, #0]
 801e87e:	1c6e      	adds	r6, r5, #1
 801e880:	3a30      	subs	r2, #48	@ 0x30
 801e882:	2a09      	cmp	r2, #9
 801e884:	d903      	bls.n	801e88e <_svfiprintf_r+0x1a6>
 801e886:	2b00      	cmp	r3, #0
 801e888:	d0c8      	beq.n	801e81c <_svfiprintf_r+0x134>
 801e88a:	9109      	str	r1, [sp, #36]	@ 0x24
 801e88c:	e7c6      	b.n	801e81c <_svfiprintf_r+0x134>
 801e88e:	4341      	muls	r1, r0
 801e890:	0035      	movs	r5, r6
 801e892:	2301      	movs	r3, #1
 801e894:	1889      	adds	r1, r1, r2
 801e896:	e7f1      	b.n	801e87c <_svfiprintf_r+0x194>
 801e898:	aa07      	add	r2, sp, #28
 801e89a:	9200      	str	r2, [sp, #0]
 801e89c:	0021      	movs	r1, r4
 801e89e:	003a      	movs	r2, r7
 801e8a0:	4b0f      	ldr	r3, [pc, #60]	@ (801e8e0 <_svfiprintf_r+0x1f8>)
 801e8a2:	9803      	ldr	r0, [sp, #12]
 801e8a4:	f7fd f8d4 	bl	801ba50 <_printf_float>
 801e8a8:	9004      	str	r0, [sp, #16]
 801e8aa:	9b04      	ldr	r3, [sp, #16]
 801e8ac:	3301      	adds	r3, #1
 801e8ae:	d1d6      	bne.n	801e85e <_svfiprintf_r+0x176>
 801e8b0:	89bb      	ldrh	r3, [r7, #12]
 801e8b2:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801e8b4:	065b      	lsls	r3, r3, #25
 801e8b6:	d500      	bpl.n	801e8ba <_svfiprintf_r+0x1d2>
 801e8b8:	e72c      	b.n	801e714 <_svfiprintf_r+0x2c>
 801e8ba:	b021      	add	sp, #132	@ 0x84
 801e8bc:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e8be:	aa07      	add	r2, sp, #28
 801e8c0:	9200      	str	r2, [sp, #0]
 801e8c2:	0021      	movs	r1, r4
 801e8c4:	003a      	movs	r2, r7
 801e8c6:	4b06      	ldr	r3, [pc, #24]	@ (801e8e0 <_svfiprintf_r+0x1f8>)
 801e8c8:	9803      	ldr	r0, [sp, #12]
 801e8ca:	f7fd fb6f 	bl	801bfac <_printf_i>
 801e8ce:	e7eb      	b.n	801e8a8 <_svfiprintf_r+0x1c0>
 801e8d0:	08021328 	.word	0x08021328
 801e8d4:	0802132e 	.word	0x0802132e
 801e8d8:	08021332 	.word	0x08021332
 801e8dc:	0801ba51 	.word	0x0801ba51
 801e8e0:	0801e629 	.word	0x0801e629

0801e8e4 <__sfputc_r>:
 801e8e4:	6893      	ldr	r3, [r2, #8]
 801e8e6:	b510      	push	{r4, lr}
 801e8e8:	3b01      	subs	r3, #1
 801e8ea:	6093      	str	r3, [r2, #8]
 801e8ec:	2b00      	cmp	r3, #0
 801e8ee:	da04      	bge.n	801e8fa <__sfputc_r+0x16>
 801e8f0:	6994      	ldr	r4, [r2, #24]
 801e8f2:	42a3      	cmp	r3, r4
 801e8f4:	db07      	blt.n	801e906 <__sfputc_r+0x22>
 801e8f6:	290a      	cmp	r1, #10
 801e8f8:	d005      	beq.n	801e906 <__sfputc_r+0x22>
 801e8fa:	6813      	ldr	r3, [r2, #0]
 801e8fc:	1c58      	adds	r0, r3, #1
 801e8fe:	6010      	str	r0, [r2, #0]
 801e900:	7019      	strb	r1, [r3, #0]
 801e902:	0008      	movs	r0, r1
 801e904:	bd10      	pop	{r4, pc}
 801e906:	f000 f9e2 	bl	801ecce <__swbuf_r>
 801e90a:	0001      	movs	r1, r0
 801e90c:	e7f9      	b.n	801e902 <__sfputc_r+0x1e>

0801e90e <__sfputs_r>:
 801e90e:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801e910:	0006      	movs	r6, r0
 801e912:	000f      	movs	r7, r1
 801e914:	0014      	movs	r4, r2
 801e916:	18d5      	adds	r5, r2, r3
 801e918:	42ac      	cmp	r4, r5
 801e91a:	d101      	bne.n	801e920 <__sfputs_r+0x12>
 801e91c:	2000      	movs	r0, #0
 801e91e:	e007      	b.n	801e930 <__sfputs_r+0x22>
 801e920:	7821      	ldrb	r1, [r4, #0]
 801e922:	003a      	movs	r2, r7
 801e924:	0030      	movs	r0, r6
 801e926:	f7ff ffdd 	bl	801e8e4 <__sfputc_r>
 801e92a:	3401      	adds	r4, #1
 801e92c:	1c43      	adds	r3, r0, #1
 801e92e:	d1f3      	bne.n	801e918 <__sfputs_r+0xa>
 801e930:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
	...

0801e934 <_vfiprintf_r>:
 801e934:	b5f0      	push	{r4, r5, r6, r7, lr}
 801e936:	b0a1      	sub	sp, #132	@ 0x84
 801e938:	000f      	movs	r7, r1
 801e93a:	0015      	movs	r5, r2
 801e93c:	001e      	movs	r6, r3
 801e93e:	9003      	str	r0, [sp, #12]
 801e940:	2800      	cmp	r0, #0
 801e942:	d004      	beq.n	801e94e <_vfiprintf_r+0x1a>
 801e944:	6a03      	ldr	r3, [r0, #32]
 801e946:	2b00      	cmp	r3, #0
 801e948:	d101      	bne.n	801e94e <_vfiprintf_r+0x1a>
 801e94a:	f7fd fccd 	bl	801c2e8 <__sinit>
 801e94e:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801e950:	07db      	lsls	r3, r3, #31
 801e952:	d405      	bmi.n	801e960 <_vfiprintf_r+0x2c>
 801e954:	89bb      	ldrh	r3, [r7, #12]
 801e956:	059b      	lsls	r3, r3, #22
 801e958:	d402      	bmi.n	801e960 <_vfiprintf_r+0x2c>
 801e95a:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801e95c:	f7fd fe7b 	bl	801c656 <__retarget_lock_acquire_recursive>
 801e960:	89bb      	ldrh	r3, [r7, #12]
 801e962:	071b      	lsls	r3, r3, #28
 801e964:	d502      	bpl.n	801e96c <_vfiprintf_r+0x38>
 801e966:	693b      	ldr	r3, [r7, #16]
 801e968:	2b00      	cmp	r3, #0
 801e96a:	d113      	bne.n	801e994 <_vfiprintf_r+0x60>
 801e96c:	0039      	movs	r1, r7
 801e96e:	9803      	ldr	r0, [sp, #12]
 801e970:	f000 f9f0 	bl	801ed54 <__swsetup_r>
 801e974:	2800      	cmp	r0, #0
 801e976:	d00d      	beq.n	801e994 <_vfiprintf_r+0x60>
 801e978:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801e97a:	07db      	lsls	r3, r3, #31
 801e97c:	d503      	bpl.n	801e986 <_vfiprintf_r+0x52>
 801e97e:	2001      	movs	r0, #1
 801e980:	4240      	negs	r0, r0
 801e982:	b021      	add	sp, #132	@ 0x84
 801e984:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801e986:	89bb      	ldrh	r3, [r7, #12]
 801e988:	059b      	lsls	r3, r3, #22
 801e98a:	d4f8      	bmi.n	801e97e <_vfiprintf_r+0x4a>
 801e98c:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801e98e:	f7fd fe63 	bl	801c658 <__retarget_lock_release_recursive>
 801e992:	e7f4      	b.n	801e97e <_vfiprintf_r+0x4a>
 801e994:	2300      	movs	r3, #0
 801e996:	ac08      	add	r4, sp, #32
 801e998:	6163      	str	r3, [r4, #20]
 801e99a:	3320      	adds	r3, #32
 801e99c:	7663      	strb	r3, [r4, #25]
 801e99e:	3310      	adds	r3, #16
 801e9a0:	76a3      	strb	r3, [r4, #26]
 801e9a2:	9607      	str	r6, [sp, #28]
 801e9a4:	002e      	movs	r6, r5
 801e9a6:	7833      	ldrb	r3, [r6, #0]
 801e9a8:	2b00      	cmp	r3, #0
 801e9aa:	d001      	beq.n	801e9b0 <_vfiprintf_r+0x7c>
 801e9ac:	2b25      	cmp	r3, #37	@ 0x25
 801e9ae:	d148      	bne.n	801ea42 <_vfiprintf_r+0x10e>
 801e9b0:	1b73      	subs	r3, r6, r5
 801e9b2:	9305      	str	r3, [sp, #20]
 801e9b4:	42ae      	cmp	r6, r5
 801e9b6:	d00b      	beq.n	801e9d0 <_vfiprintf_r+0x9c>
 801e9b8:	002a      	movs	r2, r5
 801e9ba:	0039      	movs	r1, r7
 801e9bc:	9803      	ldr	r0, [sp, #12]
 801e9be:	f7ff ffa6 	bl	801e90e <__sfputs_r>
 801e9c2:	3001      	adds	r0, #1
 801e9c4:	d100      	bne.n	801e9c8 <_vfiprintf_r+0x94>
 801e9c6:	e0ae      	b.n	801eb26 <_vfiprintf_r+0x1f2>
 801e9c8:	6963      	ldr	r3, [r4, #20]
 801e9ca:	9a05      	ldr	r2, [sp, #20]
 801e9cc:	189b      	adds	r3, r3, r2
 801e9ce:	6163      	str	r3, [r4, #20]
 801e9d0:	7833      	ldrb	r3, [r6, #0]
 801e9d2:	2b00      	cmp	r3, #0
 801e9d4:	d100      	bne.n	801e9d8 <_vfiprintf_r+0xa4>
 801e9d6:	e0a6      	b.n	801eb26 <_vfiprintf_r+0x1f2>
 801e9d8:	2201      	movs	r2, #1
 801e9da:	2300      	movs	r3, #0
 801e9dc:	4252      	negs	r2, r2
 801e9de:	6062      	str	r2, [r4, #4]
 801e9e0:	a904      	add	r1, sp, #16
 801e9e2:	3254      	adds	r2, #84	@ 0x54
 801e9e4:	1852      	adds	r2, r2, r1
 801e9e6:	1c75      	adds	r5, r6, #1
 801e9e8:	6023      	str	r3, [r4, #0]
 801e9ea:	60e3      	str	r3, [r4, #12]
 801e9ec:	60a3      	str	r3, [r4, #8]
 801e9ee:	7013      	strb	r3, [r2, #0]
 801e9f0:	65a3      	str	r3, [r4, #88]	@ 0x58
 801e9f2:	4b59      	ldr	r3, [pc, #356]	@ (801eb58 <_vfiprintf_r+0x224>)
 801e9f4:	2205      	movs	r2, #5
 801e9f6:	0018      	movs	r0, r3
 801e9f8:	7829      	ldrb	r1, [r5, #0]
 801e9fa:	9305      	str	r3, [sp, #20]
 801e9fc:	f7fd fe2d 	bl	801c65a <memchr>
 801ea00:	1c6e      	adds	r6, r5, #1
 801ea02:	2800      	cmp	r0, #0
 801ea04:	d11f      	bne.n	801ea46 <_vfiprintf_r+0x112>
 801ea06:	6822      	ldr	r2, [r4, #0]
 801ea08:	06d3      	lsls	r3, r2, #27
 801ea0a:	d504      	bpl.n	801ea16 <_vfiprintf_r+0xe2>
 801ea0c:	2353      	movs	r3, #83	@ 0x53
 801ea0e:	a904      	add	r1, sp, #16
 801ea10:	185b      	adds	r3, r3, r1
 801ea12:	2120      	movs	r1, #32
 801ea14:	7019      	strb	r1, [r3, #0]
 801ea16:	0713      	lsls	r3, r2, #28
 801ea18:	d504      	bpl.n	801ea24 <_vfiprintf_r+0xf0>
 801ea1a:	2353      	movs	r3, #83	@ 0x53
 801ea1c:	a904      	add	r1, sp, #16
 801ea1e:	185b      	adds	r3, r3, r1
 801ea20:	212b      	movs	r1, #43	@ 0x2b
 801ea22:	7019      	strb	r1, [r3, #0]
 801ea24:	782b      	ldrb	r3, [r5, #0]
 801ea26:	2b2a      	cmp	r3, #42	@ 0x2a
 801ea28:	d016      	beq.n	801ea58 <_vfiprintf_r+0x124>
 801ea2a:	002e      	movs	r6, r5
 801ea2c:	2100      	movs	r1, #0
 801ea2e:	200a      	movs	r0, #10
 801ea30:	68e3      	ldr	r3, [r4, #12]
 801ea32:	7832      	ldrb	r2, [r6, #0]
 801ea34:	1c75      	adds	r5, r6, #1
 801ea36:	3a30      	subs	r2, #48	@ 0x30
 801ea38:	2a09      	cmp	r2, #9
 801ea3a:	d950      	bls.n	801eade <_vfiprintf_r+0x1aa>
 801ea3c:	2900      	cmp	r1, #0
 801ea3e:	d111      	bne.n	801ea64 <_vfiprintf_r+0x130>
 801ea40:	e017      	b.n	801ea72 <_vfiprintf_r+0x13e>
 801ea42:	3601      	adds	r6, #1
 801ea44:	e7af      	b.n	801e9a6 <_vfiprintf_r+0x72>
 801ea46:	9b05      	ldr	r3, [sp, #20]
 801ea48:	6822      	ldr	r2, [r4, #0]
 801ea4a:	1ac0      	subs	r0, r0, r3
 801ea4c:	2301      	movs	r3, #1
 801ea4e:	4083      	lsls	r3, r0
 801ea50:	4313      	orrs	r3, r2
 801ea52:	0035      	movs	r5, r6
 801ea54:	6023      	str	r3, [r4, #0]
 801ea56:	e7cc      	b.n	801e9f2 <_vfiprintf_r+0xbe>
 801ea58:	9b07      	ldr	r3, [sp, #28]
 801ea5a:	1d19      	adds	r1, r3, #4
 801ea5c:	681b      	ldr	r3, [r3, #0]
 801ea5e:	9107      	str	r1, [sp, #28]
 801ea60:	2b00      	cmp	r3, #0
 801ea62:	db01      	blt.n	801ea68 <_vfiprintf_r+0x134>
 801ea64:	930b      	str	r3, [sp, #44]	@ 0x2c
 801ea66:	e004      	b.n	801ea72 <_vfiprintf_r+0x13e>
 801ea68:	425b      	negs	r3, r3
 801ea6a:	60e3      	str	r3, [r4, #12]
 801ea6c:	2302      	movs	r3, #2
 801ea6e:	4313      	orrs	r3, r2
 801ea70:	6023      	str	r3, [r4, #0]
 801ea72:	7833      	ldrb	r3, [r6, #0]
 801ea74:	2b2e      	cmp	r3, #46	@ 0x2e
 801ea76:	d10c      	bne.n	801ea92 <_vfiprintf_r+0x15e>
 801ea78:	7873      	ldrb	r3, [r6, #1]
 801ea7a:	2b2a      	cmp	r3, #42	@ 0x2a
 801ea7c:	d134      	bne.n	801eae8 <_vfiprintf_r+0x1b4>
 801ea7e:	9b07      	ldr	r3, [sp, #28]
 801ea80:	3602      	adds	r6, #2
 801ea82:	1d1a      	adds	r2, r3, #4
 801ea84:	681b      	ldr	r3, [r3, #0]
 801ea86:	9207      	str	r2, [sp, #28]
 801ea88:	2b00      	cmp	r3, #0
 801ea8a:	da01      	bge.n	801ea90 <_vfiprintf_r+0x15c>
 801ea8c:	2301      	movs	r3, #1
 801ea8e:	425b      	negs	r3, r3
 801ea90:	9309      	str	r3, [sp, #36]	@ 0x24
 801ea92:	4d32      	ldr	r5, [pc, #200]	@ (801eb5c <_vfiprintf_r+0x228>)
 801ea94:	2203      	movs	r2, #3
 801ea96:	0028      	movs	r0, r5
 801ea98:	7831      	ldrb	r1, [r6, #0]
 801ea9a:	f7fd fdde 	bl	801c65a <memchr>
 801ea9e:	2800      	cmp	r0, #0
 801eaa0:	d006      	beq.n	801eab0 <_vfiprintf_r+0x17c>
 801eaa2:	2340      	movs	r3, #64	@ 0x40
 801eaa4:	1b40      	subs	r0, r0, r5
 801eaa6:	4083      	lsls	r3, r0
 801eaa8:	6822      	ldr	r2, [r4, #0]
 801eaaa:	3601      	adds	r6, #1
 801eaac:	4313      	orrs	r3, r2
 801eaae:	6023      	str	r3, [r4, #0]
 801eab0:	7831      	ldrb	r1, [r6, #0]
 801eab2:	2206      	movs	r2, #6
 801eab4:	482a      	ldr	r0, [pc, #168]	@ (801eb60 <_vfiprintf_r+0x22c>)
 801eab6:	1c75      	adds	r5, r6, #1
 801eab8:	7621      	strb	r1, [r4, #24]
 801eaba:	f7fd fdce 	bl	801c65a <memchr>
 801eabe:	2800      	cmp	r0, #0
 801eac0:	d040      	beq.n	801eb44 <_vfiprintf_r+0x210>
 801eac2:	4b28      	ldr	r3, [pc, #160]	@ (801eb64 <_vfiprintf_r+0x230>)
 801eac4:	2b00      	cmp	r3, #0
 801eac6:	d122      	bne.n	801eb0e <_vfiprintf_r+0x1da>
 801eac8:	2207      	movs	r2, #7
 801eaca:	9b07      	ldr	r3, [sp, #28]
 801eacc:	3307      	adds	r3, #7
 801eace:	4393      	bics	r3, r2
 801ead0:	3308      	adds	r3, #8
 801ead2:	9307      	str	r3, [sp, #28]
 801ead4:	6963      	ldr	r3, [r4, #20]
 801ead6:	9a04      	ldr	r2, [sp, #16]
 801ead8:	189b      	adds	r3, r3, r2
 801eada:	6163      	str	r3, [r4, #20]
 801eadc:	e762      	b.n	801e9a4 <_vfiprintf_r+0x70>
 801eade:	4343      	muls	r3, r0
 801eae0:	002e      	movs	r6, r5
 801eae2:	2101      	movs	r1, #1
 801eae4:	189b      	adds	r3, r3, r2
 801eae6:	e7a4      	b.n	801ea32 <_vfiprintf_r+0xfe>
 801eae8:	2300      	movs	r3, #0
 801eaea:	200a      	movs	r0, #10
 801eaec:	0019      	movs	r1, r3
 801eaee:	3601      	adds	r6, #1
 801eaf0:	6063      	str	r3, [r4, #4]
 801eaf2:	7832      	ldrb	r2, [r6, #0]
 801eaf4:	1c75      	adds	r5, r6, #1
 801eaf6:	3a30      	subs	r2, #48	@ 0x30
 801eaf8:	2a09      	cmp	r2, #9
 801eafa:	d903      	bls.n	801eb04 <_vfiprintf_r+0x1d0>
 801eafc:	2b00      	cmp	r3, #0
 801eafe:	d0c8      	beq.n	801ea92 <_vfiprintf_r+0x15e>
 801eb00:	9109      	str	r1, [sp, #36]	@ 0x24
 801eb02:	e7c6      	b.n	801ea92 <_vfiprintf_r+0x15e>
 801eb04:	4341      	muls	r1, r0
 801eb06:	002e      	movs	r6, r5
 801eb08:	2301      	movs	r3, #1
 801eb0a:	1889      	adds	r1, r1, r2
 801eb0c:	e7f1      	b.n	801eaf2 <_vfiprintf_r+0x1be>
 801eb0e:	aa07      	add	r2, sp, #28
 801eb10:	9200      	str	r2, [sp, #0]
 801eb12:	0021      	movs	r1, r4
 801eb14:	003a      	movs	r2, r7
 801eb16:	4b14      	ldr	r3, [pc, #80]	@ (801eb68 <_vfiprintf_r+0x234>)
 801eb18:	9803      	ldr	r0, [sp, #12]
 801eb1a:	f7fc ff99 	bl	801ba50 <_printf_float>
 801eb1e:	9004      	str	r0, [sp, #16]
 801eb20:	9b04      	ldr	r3, [sp, #16]
 801eb22:	3301      	adds	r3, #1
 801eb24:	d1d6      	bne.n	801ead4 <_vfiprintf_r+0x1a0>
 801eb26:	6e7b      	ldr	r3, [r7, #100]	@ 0x64
 801eb28:	07db      	lsls	r3, r3, #31
 801eb2a:	d405      	bmi.n	801eb38 <_vfiprintf_r+0x204>
 801eb2c:	89bb      	ldrh	r3, [r7, #12]
 801eb2e:	059b      	lsls	r3, r3, #22
 801eb30:	d402      	bmi.n	801eb38 <_vfiprintf_r+0x204>
 801eb32:	6db8      	ldr	r0, [r7, #88]	@ 0x58
 801eb34:	f7fd fd90 	bl	801c658 <__retarget_lock_release_recursive>
 801eb38:	89bb      	ldrh	r3, [r7, #12]
 801eb3a:	065b      	lsls	r3, r3, #25
 801eb3c:	d500      	bpl.n	801eb40 <_vfiprintf_r+0x20c>
 801eb3e:	e71e      	b.n	801e97e <_vfiprintf_r+0x4a>
 801eb40:	980d      	ldr	r0, [sp, #52]	@ 0x34
 801eb42:	e71e      	b.n	801e982 <_vfiprintf_r+0x4e>
 801eb44:	aa07      	add	r2, sp, #28
 801eb46:	9200      	str	r2, [sp, #0]
 801eb48:	0021      	movs	r1, r4
 801eb4a:	003a      	movs	r2, r7
 801eb4c:	4b06      	ldr	r3, [pc, #24]	@ (801eb68 <_vfiprintf_r+0x234>)
 801eb4e:	9803      	ldr	r0, [sp, #12]
 801eb50:	f7fd fa2c 	bl	801bfac <_printf_i>
 801eb54:	e7e3      	b.n	801eb1e <_vfiprintf_r+0x1ea>
 801eb56:	46c0      	nop			@ (mov r8, r8)
 801eb58:	08021328 	.word	0x08021328
 801eb5c:	0802132e 	.word	0x0802132e
 801eb60:	08021332 	.word	0x08021332
 801eb64:	0801ba51 	.word	0x0801ba51
 801eb68:	0801e90f 	.word	0x0801e90f

0801eb6c <__sflush_r>:
 801eb6c:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801eb6e:	220c      	movs	r2, #12
 801eb70:	5e8b      	ldrsh	r3, [r1, r2]
 801eb72:	0005      	movs	r5, r0
 801eb74:	000c      	movs	r4, r1
 801eb76:	071a      	lsls	r2, r3, #28
 801eb78:	d456      	bmi.n	801ec28 <__sflush_r+0xbc>
 801eb7a:	684a      	ldr	r2, [r1, #4]
 801eb7c:	2a00      	cmp	r2, #0
 801eb7e:	dc02      	bgt.n	801eb86 <__sflush_r+0x1a>
 801eb80:	6c0a      	ldr	r2, [r1, #64]	@ 0x40
 801eb82:	2a00      	cmp	r2, #0
 801eb84:	dd4e      	ble.n	801ec24 <__sflush_r+0xb8>
 801eb86:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 801eb88:	2f00      	cmp	r7, #0
 801eb8a:	d04b      	beq.n	801ec24 <__sflush_r+0xb8>
 801eb8c:	2200      	movs	r2, #0
 801eb8e:	2080      	movs	r0, #128	@ 0x80
 801eb90:	682e      	ldr	r6, [r5, #0]
 801eb92:	602a      	str	r2, [r5, #0]
 801eb94:	001a      	movs	r2, r3
 801eb96:	0140      	lsls	r0, r0, #5
 801eb98:	6a21      	ldr	r1, [r4, #32]
 801eb9a:	4002      	ands	r2, r0
 801eb9c:	4203      	tst	r3, r0
 801eb9e:	d033      	beq.n	801ec08 <__sflush_r+0x9c>
 801eba0:	6d62      	ldr	r2, [r4, #84]	@ 0x54
 801eba2:	89a3      	ldrh	r3, [r4, #12]
 801eba4:	075b      	lsls	r3, r3, #29
 801eba6:	d506      	bpl.n	801ebb6 <__sflush_r+0x4a>
 801eba8:	6863      	ldr	r3, [r4, #4]
 801ebaa:	1ad2      	subs	r2, r2, r3
 801ebac:	6b63      	ldr	r3, [r4, #52]	@ 0x34
 801ebae:	2b00      	cmp	r3, #0
 801ebb0:	d001      	beq.n	801ebb6 <__sflush_r+0x4a>
 801ebb2:	6c23      	ldr	r3, [r4, #64]	@ 0x40
 801ebb4:	1ad2      	subs	r2, r2, r3
 801ebb6:	2300      	movs	r3, #0
 801ebb8:	0028      	movs	r0, r5
 801ebba:	6ae7      	ldr	r7, [r4, #44]	@ 0x2c
 801ebbc:	6a21      	ldr	r1, [r4, #32]
 801ebbe:	47b8      	blx	r7
 801ebc0:	89a2      	ldrh	r2, [r4, #12]
 801ebc2:	1c43      	adds	r3, r0, #1
 801ebc4:	d106      	bne.n	801ebd4 <__sflush_r+0x68>
 801ebc6:	6829      	ldr	r1, [r5, #0]
 801ebc8:	291d      	cmp	r1, #29
 801ebca:	d846      	bhi.n	801ec5a <__sflush_r+0xee>
 801ebcc:	4b29      	ldr	r3, [pc, #164]	@ (801ec74 <__sflush_r+0x108>)
 801ebce:	410b      	asrs	r3, r1
 801ebd0:	07db      	lsls	r3, r3, #31
 801ebd2:	d442      	bmi.n	801ec5a <__sflush_r+0xee>
 801ebd4:	2300      	movs	r3, #0
 801ebd6:	6063      	str	r3, [r4, #4]
 801ebd8:	6923      	ldr	r3, [r4, #16]
 801ebda:	6023      	str	r3, [r4, #0]
 801ebdc:	04d2      	lsls	r2, r2, #19
 801ebde:	d505      	bpl.n	801ebec <__sflush_r+0x80>
 801ebe0:	1c43      	adds	r3, r0, #1
 801ebe2:	d102      	bne.n	801ebea <__sflush_r+0x7e>
 801ebe4:	682b      	ldr	r3, [r5, #0]
 801ebe6:	2b00      	cmp	r3, #0
 801ebe8:	d100      	bne.n	801ebec <__sflush_r+0x80>
 801ebea:	6560      	str	r0, [r4, #84]	@ 0x54
 801ebec:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801ebee:	602e      	str	r6, [r5, #0]
 801ebf0:	2900      	cmp	r1, #0
 801ebf2:	d017      	beq.n	801ec24 <__sflush_r+0xb8>
 801ebf4:	0023      	movs	r3, r4
 801ebf6:	3344      	adds	r3, #68	@ 0x44
 801ebf8:	4299      	cmp	r1, r3
 801ebfa:	d002      	beq.n	801ec02 <__sflush_r+0x96>
 801ebfc:	0028      	movs	r0, r5
 801ebfe:	f7fe fbc9 	bl	801d394 <_free_r>
 801ec02:	2300      	movs	r3, #0
 801ec04:	6363      	str	r3, [r4, #52]	@ 0x34
 801ec06:	e00d      	b.n	801ec24 <__sflush_r+0xb8>
 801ec08:	2301      	movs	r3, #1
 801ec0a:	0028      	movs	r0, r5
 801ec0c:	47b8      	blx	r7
 801ec0e:	0002      	movs	r2, r0
 801ec10:	1c43      	adds	r3, r0, #1
 801ec12:	d1c6      	bne.n	801eba2 <__sflush_r+0x36>
 801ec14:	682b      	ldr	r3, [r5, #0]
 801ec16:	2b00      	cmp	r3, #0
 801ec18:	d0c3      	beq.n	801eba2 <__sflush_r+0x36>
 801ec1a:	2b1d      	cmp	r3, #29
 801ec1c:	d001      	beq.n	801ec22 <__sflush_r+0xb6>
 801ec1e:	2b16      	cmp	r3, #22
 801ec20:	d11a      	bne.n	801ec58 <__sflush_r+0xec>
 801ec22:	602e      	str	r6, [r5, #0]
 801ec24:	2000      	movs	r0, #0
 801ec26:	e01e      	b.n	801ec66 <__sflush_r+0xfa>
 801ec28:	690e      	ldr	r6, [r1, #16]
 801ec2a:	2e00      	cmp	r6, #0
 801ec2c:	d0fa      	beq.n	801ec24 <__sflush_r+0xb8>
 801ec2e:	680f      	ldr	r7, [r1, #0]
 801ec30:	600e      	str	r6, [r1, #0]
 801ec32:	1bba      	subs	r2, r7, r6
 801ec34:	9201      	str	r2, [sp, #4]
 801ec36:	2200      	movs	r2, #0
 801ec38:	079b      	lsls	r3, r3, #30
 801ec3a:	d100      	bne.n	801ec3e <__sflush_r+0xd2>
 801ec3c:	694a      	ldr	r2, [r1, #20]
 801ec3e:	60a2      	str	r2, [r4, #8]
 801ec40:	9b01      	ldr	r3, [sp, #4]
 801ec42:	2b00      	cmp	r3, #0
 801ec44:	ddee      	ble.n	801ec24 <__sflush_r+0xb8>
 801ec46:	6aa3      	ldr	r3, [r4, #40]	@ 0x28
 801ec48:	0032      	movs	r2, r6
 801ec4a:	001f      	movs	r7, r3
 801ec4c:	0028      	movs	r0, r5
 801ec4e:	9b01      	ldr	r3, [sp, #4]
 801ec50:	6a21      	ldr	r1, [r4, #32]
 801ec52:	47b8      	blx	r7
 801ec54:	2800      	cmp	r0, #0
 801ec56:	dc07      	bgt.n	801ec68 <__sflush_r+0xfc>
 801ec58:	89a2      	ldrh	r2, [r4, #12]
 801ec5a:	2340      	movs	r3, #64	@ 0x40
 801ec5c:	2001      	movs	r0, #1
 801ec5e:	4313      	orrs	r3, r2
 801ec60:	b21b      	sxth	r3, r3
 801ec62:	81a3      	strh	r3, [r4, #12]
 801ec64:	4240      	negs	r0, r0
 801ec66:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801ec68:	9b01      	ldr	r3, [sp, #4]
 801ec6a:	1836      	adds	r6, r6, r0
 801ec6c:	1a1b      	subs	r3, r3, r0
 801ec6e:	9301      	str	r3, [sp, #4]
 801ec70:	e7e6      	b.n	801ec40 <__sflush_r+0xd4>
 801ec72:	46c0      	nop			@ (mov r8, r8)
 801ec74:	dfbffffe 	.word	0xdfbffffe

0801ec78 <_fflush_r>:
 801ec78:	690b      	ldr	r3, [r1, #16]
 801ec7a:	b570      	push	{r4, r5, r6, lr}
 801ec7c:	0005      	movs	r5, r0
 801ec7e:	000c      	movs	r4, r1
 801ec80:	2b00      	cmp	r3, #0
 801ec82:	d102      	bne.n	801ec8a <_fflush_r+0x12>
 801ec84:	2500      	movs	r5, #0
 801ec86:	0028      	movs	r0, r5
 801ec88:	bd70      	pop	{r4, r5, r6, pc}
 801ec8a:	2800      	cmp	r0, #0
 801ec8c:	d004      	beq.n	801ec98 <_fflush_r+0x20>
 801ec8e:	6a03      	ldr	r3, [r0, #32]
 801ec90:	2b00      	cmp	r3, #0
 801ec92:	d101      	bne.n	801ec98 <_fflush_r+0x20>
 801ec94:	f7fd fb28 	bl	801c2e8 <__sinit>
 801ec98:	220c      	movs	r2, #12
 801ec9a:	5ea3      	ldrsh	r3, [r4, r2]
 801ec9c:	2b00      	cmp	r3, #0
 801ec9e:	d0f1      	beq.n	801ec84 <_fflush_r+0xc>
 801eca0:	6e62      	ldr	r2, [r4, #100]	@ 0x64
 801eca2:	07d2      	lsls	r2, r2, #31
 801eca4:	d404      	bmi.n	801ecb0 <_fflush_r+0x38>
 801eca6:	059b      	lsls	r3, r3, #22
 801eca8:	d402      	bmi.n	801ecb0 <_fflush_r+0x38>
 801ecaa:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ecac:	f7fd fcd3 	bl	801c656 <__retarget_lock_acquire_recursive>
 801ecb0:	0028      	movs	r0, r5
 801ecb2:	0021      	movs	r1, r4
 801ecb4:	f7ff ff5a 	bl	801eb6c <__sflush_r>
 801ecb8:	6e63      	ldr	r3, [r4, #100]	@ 0x64
 801ecba:	0005      	movs	r5, r0
 801ecbc:	07db      	lsls	r3, r3, #31
 801ecbe:	d4e2      	bmi.n	801ec86 <_fflush_r+0xe>
 801ecc0:	89a3      	ldrh	r3, [r4, #12]
 801ecc2:	059b      	lsls	r3, r3, #22
 801ecc4:	d4df      	bmi.n	801ec86 <_fflush_r+0xe>
 801ecc6:	6da0      	ldr	r0, [r4, #88]	@ 0x58
 801ecc8:	f7fd fcc6 	bl	801c658 <__retarget_lock_release_recursive>
 801eccc:	e7db      	b.n	801ec86 <_fflush_r+0xe>

0801ecce <__swbuf_r>:
 801ecce:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801ecd0:	0006      	movs	r6, r0
 801ecd2:	000d      	movs	r5, r1
 801ecd4:	0014      	movs	r4, r2
 801ecd6:	2800      	cmp	r0, #0
 801ecd8:	d004      	beq.n	801ece4 <__swbuf_r+0x16>
 801ecda:	6a03      	ldr	r3, [r0, #32]
 801ecdc:	2b00      	cmp	r3, #0
 801ecde:	d101      	bne.n	801ece4 <__swbuf_r+0x16>
 801ece0:	f7fd fb02 	bl	801c2e8 <__sinit>
 801ece4:	69a3      	ldr	r3, [r4, #24]
 801ece6:	60a3      	str	r3, [r4, #8]
 801ece8:	89a3      	ldrh	r3, [r4, #12]
 801ecea:	071b      	lsls	r3, r3, #28
 801ecec:	d502      	bpl.n	801ecf4 <__swbuf_r+0x26>
 801ecee:	6923      	ldr	r3, [r4, #16]
 801ecf0:	2b00      	cmp	r3, #0
 801ecf2:	d109      	bne.n	801ed08 <__swbuf_r+0x3a>
 801ecf4:	0021      	movs	r1, r4
 801ecf6:	0030      	movs	r0, r6
 801ecf8:	f000 f82c 	bl	801ed54 <__swsetup_r>
 801ecfc:	2800      	cmp	r0, #0
 801ecfe:	d003      	beq.n	801ed08 <__swbuf_r+0x3a>
 801ed00:	2501      	movs	r5, #1
 801ed02:	426d      	negs	r5, r5
 801ed04:	0028      	movs	r0, r5
 801ed06:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 801ed08:	6923      	ldr	r3, [r4, #16]
 801ed0a:	6820      	ldr	r0, [r4, #0]
 801ed0c:	b2ef      	uxtb	r7, r5
 801ed0e:	1ac0      	subs	r0, r0, r3
 801ed10:	6963      	ldr	r3, [r4, #20]
 801ed12:	b2ed      	uxtb	r5, r5
 801ed14:	4283      	cmp	r3, r0
 801ed16:	dc05      	bgt.n	801ed24 <__swbuf_r+0x56>
 801ed18:	0021      	movs	r1, r4
 801ed1a:	0030      	movs	r0, r6
 801ed1c:	f7ff ffac 	bl	801ec78 <_fflush_r>
 801ed20:	2800      	cmp	r0, #0
 801ed22:	d1ed      	bne.n	801ed00 <__swbuf_r+0x32>
 801ed24:	68a3      	ldr	r3, [r4, #8]
 801ed26:	3001      	adds	r0, #1
 801ed28:	3b01      	subs	r3, #1
 801ed2a:	60a3      	str	r3, [r4, #8]
 801ed2c:	6823      	ldr	r3, [r4, #0]
 801ed2e:	1c5a      	adds	r2, r3, #1
 801ed30:	6022      	str	r2, [r4, #0]
 801ed32:	701f      	strb	r7, [r3, #0]
 801ed34:	6963      	ldr	r3, [r4, #20]
 801ed36:	4283      	cmp	r3, r0
 801ed38:	d004      	beq.n	801ed44 <__swbuf_r+0x76>
 801ed3a:	89a3      	ldrh	r3, [r4, #12]
 801ed3c:	07db      	lsls	r3, r3, #31
 801ed3e:	d5e1      	bpl.n	801ed04 <__swbuf_r+0x36>
 801ed40:	2d0a      	cmp	r5, #10
 801ed42:	d1df      	bne.n	801ed04 <__swbuf_r+0x36>
 801ed44:	0021      	movs	r1, r4
 801ed46:	0030      	movs	r0, r6
 801ed48:	f7ff ff96 	bl	801ec78 <_fflush_r>
 801ed4c:	2800      	cmp	r0, #0
 801ed4e:	d0d9      	beq.n	801ed04 <__swbuf_r+0x36>
 801ed50:	e7d6      	b.n	801ed00 <__swbuf_r+0x32>
	...

0801ed54 <__swsetup_r>:
 801ed54:	4b2d      	ldr	r3, [pc, #180]	@ (801ee0c <__swsetup_r+0xb8>)
 801ed56:	b570      	push	{r4, r5, r6, lr}
 801ed58:	0005      	movs	r5, r0
 801ed5a:	6818      	ldr	r0, [r3, #0]
 801ed5c:	000c      	movs	r4, r1
 801ed5e:	2800      	cmp	r0, #0
 801ed60:	d004      	beq.n	801ed6c <__swsetup_r+0x18>
 801ed62:	6a03      	ldr	r3, [r0, #32]
 801ed64:	2b00      	cmp	r3, #0
 801ed66:	d101      	bne.n	801ed6c <__swsetup_r+0x18>
 801ed68:	f7fd fabe 	bl	801c2e8 <__sinit>
 801ed6c:	230c      	movs	r3, #12
 801ed6e:	5ee2      	ldrsh	r2, [r4, r3]
 801ed70:	0713      	lsls	r3, r2, #28
 801ed72:	d423      	bmi.n	801edbc <__swsetup_r+0x68>
 801ed74:	06d3      	lsls	r3, r2, #27
 801ed76:	d407      	bmi.n	801ed88 <__swsetup_r+0x34>
 801ed78:	2309      	movs	r3, #9
 801ed7a:	602b      	str	r3, [r5, #0]
 801ed7c:	2340      	movs	r3, #64	@ 0x40
 801ed7e:	2001      	movs	r0, #1
 801ed80:	4313      	orrs	r3, r2
 801ed82:	81a3      	strh	r3, [r4, #12]
 801ed84:	4240      	negs	r0, r0
 801ed86:	e03a      	b.n	801edfe <__swsetup_r+0xaa>
 801ed88:	0752      	lsls	r2, r2, #29
 801ed8a:	d513      	bpl.n	801edb4 <__swsetup_r+0x60>
 801ed8c:	6b61      	ldr	r1, [r4, #52]	@ 0x34
 801ed8e:	2900      	cmp	r1, #0
 801ed90:	d008      	beq.n	801eda4 <__swsetup_r+0x50>
 801ed92:	0023      	movs	r3, r4
 801ed94:	3344      	adds	r3, #68	@ 0x44
 801ed96:	4299      	cmp	r1, r3
 801ed98:	d002      	beq.n	801eda0 <__swsetup_r+0x4c>
 801ed9a:	0028      	movs	r0, r5
 801ed9c:	f7fe fafa 	bl	801d394 <_free_r>
 801eda0:	2300      	movs	r3, #0
 801eda2:	6363      	str	r3, [r4, #52]	@ 0x34
 801eda4:	2224      	movs	r2, #36	@ 0x24
 801eda6:	89a3      	ldrh	r3, [r4, #12]
 801eda8:	4393      	bics	r3, r2
 801edaa:	81a3      	strh	r3, [r4, #12]
 801edac:	2300      	movs	r3, #0
 801edae:	6063      	str	r3, [r4, #4]
 801edb0:	6923      	ldr	r3, [r4, #16]
 801edb2:	6023      	str	r3, [r4, #0]
 801edb4:	2308      	movs	r3, #8
 801edb6:	89a2      	ldrh	r2, [r4, #12]
 801edb8:	4313      	orrs	r3, r2
 801edba:	81a3      	strh	r3, [r4, #12]
 801edbc:	6923      	ldr	r3, [r4, #16]
 801edbe:	2b00      	cmp	r3, #0
 801edc0:	d10b      	bne.n	801edda <__swsetup_r+0x86>
 801edc2:	21a0      	movs	r1, #160	@ 0xa0
 801edc4:	2280      	movs	r2, #128	@ 0x80
 801edc6:	89a3      	ldrh	r3, [r4, #12]
 801edc8:	0089      	lsls	r1, r1, #2
 801edca:	0092      	lsls	r2, r2, #2
 801edcc:	400b      	ands	r3, r1
 801edce:	4293      	cmp	r3, r2
 801edd0:	d003      	beq.n	801edda <__swsetup_r+0x86>
 801edd2:	0021      	movs	r1, r4
 801edd4:	0028      	movs	r0, r5
 801edd6:	f000 f8f5 	bl	801efc4 <__smakebuf_r>
 801edda:	230c      	movs	r3, #12
 801eddc:	5ee2      	ldrsh	r2, [r4, r3]
 801edde:	2101      	movs	r1, #1
 801ede0:	0013      	movs	r3, r2
 801ede2:	400b      	ands	r3, r1
 801ede4:	420a      	tst	r2, r1
 801ede6:	d00b      	beq.n	801ee00 <__swsetup_r+0xac>
 801ede8:	2300      	movs	r3, #0
 801edea:	60a3      	str	r3, [r4, #8]
 801edec:	6963      	ldr	r3, [r4, #20]
 801edee:	425b      	negs	r3, r3
 801edf0:	61a3      	str	r3, [r4, #24]
 801edf2:	2000      	movs	r0, #0
 801edf4:	6923      	ldr	r3, [r4, #16]
 801edf6:	4283      	cmp	r3, r0
 801edf8:	d101      	bne.n	801edfe <__swsetup_r+0xaa>
 801edfa:	0613      	lsls	r3, r2, #24
 801edfc:	d4be      	bmi.n	801ed7c <__swsetup_r+0x28>
 801edfe:	bd70      	pop	{r4, r5, r6, pc}
 801ee00:	0791      	lsls	r1, r2, #30
 801ee02:	d400      	bmi.n	801ee06 <__swsetup_r+0xb2>
 801ee04:	6963      	ldr	r3, [r4, #20]
 801ee06:	60a3      	str	r3, [r4, #8]
 801ee08:	e7f3      	b.n	801edf2 <__swsetup_r+0x9e>
 801ee0a:	46c0      	nop			@ (mov r8, r8)
 801ee0c:	200003c8 	.word	0x200003c8

0801ee10 <memmove>:
 801ee10:	b510      	push	{r4, lr}
 801ee12:	4288      	cmp	r0, r1
 801ee14:	d806      	bhi.n	801ee24 <memmove+0x14>
 801ee16:	2300      	movs	r3, #0
 801ee18:	429a      	cmp	r2, r3
 801ee1a:	d008      	beq.n	801ee2e <memmove+0x1e>
 801ee1c:	5ccc      	ldrb	r4, [r1, r3]
 801ee1e:	54c4      	strb	r4, [r0, r3]
 801ee20:	3301      	adds	r3, #1
 801ee22:	e7f9      	b.n	801ee18 <memmove+0x8>
 801ee24:	188b      	adds	r3, r1, r2
 801ee26:	4298      	cmp	r0, r3
 801ee28:	d2f5      	bcs.n	801ee16 <memmove+0x6>
 801ee2a:	3a01      	subs	r2, #1
 801ee2c:	d200      	bcs.n	801ee30 <memmove+0x20>
 801ee2e:	bd10      	pop	{r4, pc}
 801ee30:	5c8b      	ldrb	r3, [r1, r2]
 801ee32:	5483      	strb	r3, [r0, r2]
 801ee34:	e7f9      	b.n	801ee2a <memmove+0x1a>
	...

0801ee38 <_sbrk_r>:
 801ee38:	2300      	movs	r3, #0
 801ee3a:	b570      	push	{r4, r5, r6, lr}
 801ee3c:	4d06      	ldr	r5, [pc, #24]	@ (801ee58 <_sbrk_r+0x20>)
 801ee3e:	0004      	movs	r4, r0
 801ee40:	0008      	movs	r0, r1
 801ee42:	602b      	str	r3, [r5, #0]
 801ee44:	f7ec f834 	bl	800aeb0 <_sbrk>
 801ee48:	1c43      	adds	r3, r0, #1
 801ee4a:	d103      	bne.n	801ee54 <_sbrk_r+0x1c>
 801ee4c:	682b      	ldr	r3, [r5, #0]
 801ee4e:	2b00      	cmp	r3, #0
 801ee50:	d000      	beq.n	801ee54 <_sbrk_r+0x1c>
 801ee52:	6023      	str	r3, [r4, #0]
 801ee54:	bd70      	pop	{r4, r5, r6, pc}
 801ee56:	46c0      	nop			@ (mov r8, r8)
 801ee58:	200038b0 	.word	0x200038b0

0801ee5c <__assert_func>:
 801ee5c:	b57f      	push	{r0, r1, r2, r3, r4, r5, r6, lr}
 801ee5e:	0014      	movs	r4, r2
 801ee60:	001a      	movs	r2, r3
 801ee62:	4b09      	ldr	r3, [pc, #36]	@ (801ee88 <__assert_func+0x2c>)
 801ee64:	0005      	movs	r5, r0
 801ee66:	681b      	ldr	r3, [r3, #0]
 801ee68:	000e      	movs	r6, r1
 801ee6a:	68d8      	ldr	r0, [r3, #12]
 801ee6c:	4b07      	ldr	r3, [pc, #28]	@ (801ee8c <__assert_func+0x30>)
 801ee6e:	2c00      	cmp	r4, #0
 801ee70:	d101      	bne.n	801ee76 <__assert_func+0x1a>
 801ee72:	4b07      	ldr	r3, [pc, #28]	@ (801ee90 <__assert_func+0x34>)
 801ee74:	001c      	movs	r4, r3
 801ee76:	4907      	ldr	r1, [pc, #28]	@ (801ee94 <__assert_func+0x38>)
 801ee78:	9301      	str	r3, [sp, #4]
 801ee7a:	9402      	str	r4, [sp, #8]
 801ee7c:	002b      	movs	r3, r5
 801ee7e:	9600      	str	r6, [sp, #0]
 801ee80:	f000 f866 	bl	801ef50 <fiprintf>
 801ee84:	f000 f904 	bl	801f090 <abort>
 801ee88:	200003c8 	.word	0x200003c8
 801ee8c:	08021339 	.word	0x08021339
 801ee90:	08021374 	.word	0x08021374
 801ee94:	08021346 	.word	0x08021346

0801ee98 <_calloc_r>:
 801ee98:	b570      	push	{r4, r5, r6, lr}
 801ee9a:	0c0b      	lsrs	r3, r1, #16
 801ee9c:	0c15      	lsrs	r5, r2, #16
 801ee9e:	2b00      	cmp	r3, #0
 801eea0:	d11e      	bne.n	801eee0 <_calloc_r+0x48>
 801eea2:	2d00      	cmp	r5, #0
 801eea4:	d10c      	bne.n	801eec0 <_calloc_r+0x28>
 801eea6:	b289      	uxth	r1, r1
 801eea8:	b294      	uxth	r4, r2
 801eeaa:	434c      	muls	r4, r1
 801eeac:	0021      	movs	r1, r4
 801eeae:	f7fe fe41 	bl	801db34 <_malloc_r>
 801eeb2:	1e05      	subs	r5, r0, #0
 801eeb4:	d01a      	beq.n	801eeec <_calloc_r+0x54>
 801eeb6:	0022      	movs	r2, r4
 801eeb8:	2100      	movs	r1, #0
 801eeba:	f7fd fafd 	bl	801c4b8 <memset>
 801eebe:	e016      	b.n	801eeee <_calloc_r+0x56>
 801eec0:	1c2b      	adds	r3, r5, #0
 801eec2:	1c0c      	adds	r4, r1, #0
 801eec4:	b289      	uxth	r1, r1
 801eec6:	b292      	uxth	r2, r2
 801eec8:	434a      	muls	r2, r1
 801eeca:	b29b      	uxth	r3, r3
 801eecc:	b2a1      	uxth	r1, r4
 801eece:	4359      	muls	r1, r3
 801eed0:	0c14      	lsrs	r4, r2, #16
 801eed2:	190c      	adds	r4, r1, r4
 801eed4:	0c23      	lsrs	r3, r4, #16
 801eed6:	d107      	bne.n	801eee8 <_calloc_r+0x50>
 801eed8:	0424      	lsls	r4, r4, #16
 801eeda:	b292      	uxth	r2, r2
 801eedc:	4314      	orrs	r4, r2
 801eede:	e7e5      	b.n	801eeac <_calloc_r+0x14>
 801eee0:	2d00      	cmp	r5, #0
 801eee2:	d101      	bne.n	801eee8 <_calloc_r+0x50>
 801eee4:	1c14      	adds	r4, r2, #0
 801eee6:	e7ed      	b.n	801eec4 <_calloc_r+0x2c>
 801eee8:	230c      	movs	r3, #12
 801eeea:	6003      	str	r3, [r0, #0]
 801eeec:	2500      	movs	r5, #0
 801eeee:	0028      	movs	r0, r5
 801eef0:	bd70      	pop	{r4, r5, r6, pc}

0801eef2 <_realloc_r>:
 801eef2:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801eef4:	0006      	movs	r6, r0
 801eef6:	000c      	movs	r4, r1
 801eef8:	0015      	movs	r5, r2
 801eefa:	2900      	cmp	r1, #0
 801eefc:	d105      	bne.n	801ef0a <_realloc_r+0x18>
 801eefe:	0011      	movs	r1, r2
 801ef00:	f7fe fe18 	bl	801db34 <_malloc_r>
 801ef04:	0004      	movs	r4, r0
 801ef06:	0020      	movs	r0, r4
 801ef08:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801ef0a:	2a00      	cmp	r2, #0
 801ef0c:	d103      	bne.n	801ef16 <_realloc_r+0x24>
 801ef0e:	f7fe fa41 	bl	801d394 <_free_r>
 801ef12:	2400      	movs	r4, #0
 801ef14:	e7f7      	b.n	801ef06 <_realloc_r+0x14>
 801ef16:	f000 f8c2 	bl	801f09e <_malloc_usable_size_r>
 801ef1a:	0007      	movs	r7, r0
 801ef1c:	4285      	cmp	r5, r0
 801ef1e:	d802      	bhi.n	801ef26 <_realloc_r+0x34>
 801ef20:	0843      	lsrs	r3, r0, #1
 801ef22:	42ab      	cmp	r3, r5
 801ef24:	d3ef      	bcc.n	801ef06 <_realloc_r+0x14>
 801ef26:	0029      	movs	r1, r5
 801ef28:	0030      	movs	r0, r6
 801ef2a:	f7fe fe03 	bl	801db34 <_malloc_r>
 801ef2e:	9001      	str	r0, [sp, #4]
 801ef30:	2800      	cmp	r0, #0
 801ef32:	d0ee      	beq.n	801ef12 <_realloc_r+0x20>
 801ef34:	002a      	movs	r2, r5
 801ef36:	42bd      	cmp	r5, r7
 801ef38:	d900      	bls.n	801ef3c <_realloc_r+0x4a>
 801ef3a:	003a      	movs	r2, r7
 801ef3c:	0021      	movs	r1, r4
 801ef3e:	9801      	ldr	r0, [sp, #4]
 801ef40:	f7fd fb96 	bl	801c670 <memcpy>
 801ef44:	0021      	movs	r1, r4
 801ef46:	0030      	movs	r0, r6
 801ef48:	f7fe fa24 	bl	801d394 <_free_r>
 801ef4c:	9c01      	ldr	r4, [sp, #4]
 801ef4e:	e7da      	b.n	801ef06 <_realloc_r+0x14>

0801ef50 <fiprintf>:
 801ef50:	b40e      	push	{r1, r2, r3}
 801ef52:	b517      	push	{r0, r1, r2, r4, lr}
 801ef54:	4c05      	ldr	r4, [pc, #20]	@ (801ef6c <fiprintf+0x1c>)
 801ef56:	ab05      	add	r3, sp, #20
 801ef58:	cb04      	ldmia	r3!, {r2}
 801ef5a:	0001      	movs	r1, r0
 801ef5c:	6820      	ldr	r0, [r4, #0]
 801ef5e:	9301      	str	r3, [sp, #4]
 801ef60:	f7ff fce8 	bl	801e934 <_vfiprintf_r>
 801ef64:	bc1e      	pop	{r1, r2, r3, r4}
 801ef66:	bc08      	pop	{r3}
 801ef68:	b003      	add	sp, #12
 801ef6a:	4718      	bx	r3
 801ef6c:	200003c8 	.word	0x200003c8

0801ef70 <__swhatbuf_r>:
 801ef70:	b570      	push	{r4, r5, r6, lr}
 801ef72:	000e      	movs	r6, r1
 801ef74:	001d      	movs	r5, r3
 801ef76:	230e      	movs	r3, #14
 801ef78:	5ec9      	ldrsh	r1, [r1, r3]
 801ef7a:	0014      	movs	r4, r2
 801ef7c:	b096      	sub	sp, #88	@ 0x58
 801ef7e:	2900      	cmp	r1, #0
 801ef80:	da0c      	bge.n	801ef9c <__swhatbuf_r+0x2c>
 801ef82:	89b2      	ldrh	r2, [r6, #12]
 801ef84:	2380      	movs	r3, #128	@ 0x80
 801ef86:	0011      	movs	r1, r2
 801ef88:	4019      	ands	r1, r3
 801ef8a:	421a      	tst	r2, r3
 801ef8c:	d114      	bne.n	801efb8 <__swhatbuf_r+0x48>
 801ef8e:	2380      	movs	r3, #128	@ 0x80
 801ef90:	00db      	lsls	r3, r3, #3
 801ef92:	2000      	movs	r0, #0
 801ef94:	6029      	str	r1, [r5, #0]
 801ef96:	6023      	str	r3, [r4, #0]
 801ef98:	b016      	add	sp, #88	@ 0x58
 801ef9a:	bd70      	pop	{r4, r5, r6, pc}
 801ef9c:	466a      	mov	r2, sp
 801ef9e:	f000 f853 	bl	801f048 <_fstat_r>
 801efa2:	2800      	cmp	r0, #0
 801efa4:	dbed      	blt.n	801ef82 <__swhatbuf_r+0x12>
 801efa6:	23f0      	movs	r3, #240	@ 0xf0
 801efa8:	9901      	ldr	r1, [sp, #4]
 801efaa:	021b      	lsls	r3, r3, #8
 801efac:	4019      	ands	r1, r3
 801efae:	4b04      	ldr	r3, [pc, #16]	@ (801efc0 <__swhatbuf_r+0x50>)
 801efb0:	18c9      	adds	r1, r1, r3
 801efb2:	424b      	negs	r3, r1
 801efb4:	4159      	adcs	r1, r3
 801efb6:	e7ea      	b.n	801ef8e <__swhatbuf_r+0x1e>
 801efb8:	2100      	movs	r1, #0
 801efba:	2340      	movs	r3, #64	@ 0x40
 801efbc:	e7e9      	b.n	801ef92 <__swhatbuf_r+0x22>
 801efbe:	46c0      	nop			@ (mov r8, r8)
 801efc0:	ffffe000 	.word	0xffffe000

0801efc4 <__smakebuf_r>:
 801efc4:	b5f0      	push	{r4, r5, r6, r7, lr}
 801efc6:	2602      	movs	r6, #2
 801efc8:	898b      	ldrh	r3, [r1, #12]
 801efca:	0005      	movs	r5, r0
 801efcc:	000c      	movs	r4, r1
 801efce:	b085      	sub	sp, #20
 801efd0:	4233      	tst	r3, r6
 801efd2:	d007      	beq.n	801efe4 <__smakebuf_r+0x20>
 801efd4:	0023      	movs	r3, r4
 801efd6:	3347      	adds	r3, #71	@ 0x47
 801efd8:	6023      	str	r3, [r4, #0]
 801efda:	6123      	str	r3, [r4, #16]
 801efdc:	2301      	movs	r3, #1
 801efde:	6163      	str	r3, [r4, #20]
 801efe0:	b005      	add	sp, #20
 801efe2:	bdf0      	pop	{r4, r5, r6, r7, pc}
 801efe4:	ab03      	add	r3, sp, #12
 801efe6:	aa02      	add	r2, sp, #8
 801efe8:	f7ff ffc2 	bl	801ef70 <__swhatbuf_r>
 801efec:	9f02      	ldr	r7, [sp, #8]
 801efee:	9001      	str	r0, [sp, #4]
 801eff0:	0039      	movs	r1, r7
 801eff2:	0028      	movs	r0, r5
 801eff4:	f7fe fd9e 	bl	801db34 <_malloc_r>
 801eff8:	2800      	cmp	r0, #0
 801effa:	d108      	bne.n	801f00e <__smakebuf_r+0x4a>
 801effc:	220c      	movs	r2, #12
 801effe:	5ea3      	ldrsh	r3, [r4, r2]
 801f000:	059a      	lsls	r2, r3, #22
 801f002:	d4ed      	bmi.n	801efe0 <__smakebuf_r+0x1c>
 801f004:	2203      	movs	r2, #3
 801f006:	4393      	bics	r3, r2
 801f008:	431e      	orrs	r6, r3
 801f00a:	81a6      	strh	r6, [r4, #12]
 801f00c:	e7e2      	b.n	801efd4 <__smakebuf_r+0x10>
 801f00e:	2380      	movs	r3, #128	@ 0x80
 801f010:	89a2      	ldrh	r2, [r4, #12]
 801f012:	6020      	str	r0, [r4, #0]
 801f014:	4313      	orrs	r3, r2
 801f016:	81a3      	strh	r3, [r4, #12]
 801f018:	9b03      	ldr	r3, [sp, #12]
 801f01a:	6120      	str	r0, [r4, #16]
 801f01c:	6167      	str	r7, [r4, #20]
 801f01e:	2b00      	cmp	r3, #0
 801f020:	d00c      	beq.n	801f03c <__smakebuf_r+0x78>
 801f022:	0028      	movs	r0, r5
 801f024:	230e      	movs	r3, #14
 801f026:	5ee1      	ldrsh	r1, [r4, r3]
 801f028:	f000 f820 	bl	801f06c <_isatty_r>
 801f02c:	2800      	cmp	r0, #0
 801f02e:	d005      	beq.n	801f03c <__smakebuf_r+0x78>
 801f030:	2303      	movs	r3, #3
 801f032:	89a2      	ldrh	r2, [r4, #12]
 801f034:	439a      	bics	r2, r3
 801f036:	3b02      	subs	r3, #2
 801f038:	4313      	orrs	r3, r2
 801f03a:	81a3      	strh	r3, [r4, #12]
 801f03c:	89a3      	ldrh	r3, [r4, #12]
 801f03e:	9a01      	ldr	r2, [sp, #4]
 801f040:	4313      	orrs	r3, r2
 801f042:	81a3      	strh	r3, [r4, #12]
 801f044:	e7cc      	b.n	801efe0 <__smakebuf_r+0x1c>
	...

0801f048 <_fstat_r>:
 801f048:	2300      	movs	r3, #0
 801f04a:	b570      	push	{r4, r5, r6, lr}
 801f04c:	4d06      	ldr	r5, [pc, #24]	@ (801f068 <_fstat_r+0x20>)
 801f04e:	0004      	movs	r4, r0
 801f050:	0008      	movs	r0, r1
 801f052:	0011      	movs	r1, r2
 801f054:	602b      	str	r3, [r5, #0]
 801f056:	f7eb ff09 	bl	800ae6c <_fstat>
 801f05a:	1c43      	adds	r3, r0, #1
 801f05c:	d103      	bne.n	801f066 <_fstat_r+0x1e>
 801f05e:	682b      	ldr	r3, [r5, #0]
 801f060:	2b00      	cmp	r3, #0
 801f062:	d000      	beq.n	801f066 <_fstat_r+0x1e>
 801f064:	6023      	str	r3, [r4, #0]
 801f066:	bd70      	pop	{r4, r5, r6, pc}
 801f068:	200038b0 	.word	0x200038b0

0801f06c <_isatty_r>:
 801f06c:	2300      	movs	r3, #0
 801f06e:	b570      	push	{r4, r5, r6, lr}
 801f070:	4d06      	ldr	r5, [pc, #24]	@ (801f08c <_isatty_r+0x20>)
 801f072:	0004      	movs	r4, r0
 801f074:	0008      	movs	r0, r1
 801f076:	602b      	str	r3, [r5, #0]
 801f078:	f7eb ff06 	bl	800ae88 <_isatty>
 801f07c:	1c43      	adds	r3, r0, #1
 801f07e:	d103      	bne.n	801f088 <_isatty_r+0x1c>
 801f080:	682b      	ldr	r3, [r5, #0]
 801f082:	2b00      	cmp	r3, #0
 801f084:	d000      	beq.n	801f088 <_isatty_r+0x1c>
 801f086:	6023      	str	r3, [r4, #0]
 801f088:	bd70      	pop	{r4, r5, r6, pc}
 801f08a:	46c0      	nop			@ (mov r8, r8)
 801f08c:	200038b0 	.word	0x200038b0

0801f090 <abort>:
 801f090:	2006      	movs	r0, #6
 801f092:	b510      	push	{r4, lr}
 801f094:	f000 f834 	bl	801f100 <raise>
 801f098:	2001      	movs	r0, #1
 801f09a:	f7eb feb3 	bl	800ae04 <_exit>

0801f09e <_malloc_usable_size_r>:
 801f09e:	1f0b      	subs	r3, r1, #4
 801f0a0:	681b      	ldr	r3, [r3, #0]
 801f0a2:	1f18      	subs	r0, r3, #4
 801f0a4:	2b00      	cmp	r3, #0
 801f0a6:	da01      	bge.n	801f0ac <_malloc_usable_size_r+0xe>
 801f0a8:	580b      	ldr	r3, [r1, r0]
 801f0aa:	18c0      	adds	r0, r0, r3
 801f0ac:	4770      	bx	lr

0801f0ae <_raise_r>:
 801f0ae:	b570      	push	{r4, r5, r6, lr}
 801f0b0:	0004      	movs	r4, r0
 801f0b2:	000d      	movs	r5, r1
 801f0b4:	291f      	cmp	r1, #31
 801f0b6:	d904      	bls.n	801f0c2 <_raise_r+0x14>
 801f0b8:	2316      	movs	r3, #22
 801f0ba:	6003      	str	r3, [r0, #0]
 801f0bc:	2001      	movs	r0, #1
 801f0be:	4240      	negs	r0, r0
 801f0c0:	bd70      	pop	{r4, r5, r6, pc}
 801f0c2:	6bc3      	ldr	r3, [r0, #60]	@ 0x3c
 801f0c4:	2b00      	cmp	r3, #0
 801f0c6:	d004      	beq.n	801f0d2 <_raise_r+0x24>
 801f0c8:	008a      	lsls	r2, r1, #2
 801f0ca:	189b      	adds	r3, r3, r2
 801f0cc:	681a      	ldr	r2, [r3, #0]
 801f0ce:	2a00      	cmp	r2, #0
 801f0d0:	d108      	bne.n	801f0e4 <_raise_r+0x36>
 801f0d2:	0020      	movs	r0, r4
 801f0d4:	f000 f830 	bl	801f138 <_getpid_r>
 801f0d8:	002a      	movs	r2, r5
 801f0da:	0001      	movs	r1, r0
 801f0dc:	0020      	movs	r0, r4
 801f0de:	f000 f819 	bl	801f114 <_kill_r>
 801f0e2:	e7ed      	b.n	801f0c0 <_raise_r+0x12>
 801f0e4:	2a01      	cmp	r2, #1
 801f0e6:	d009      	beq.n	801f0fc <_raise_r+0x4e>
 801f0e8:	1c51      	adds	r1, r2, #1
 801f0ea:	d103      	bne.n	801f0f4 <_raise_r+0x46>
 801f0ec:	2316      	movs	r3, #22
 801f0ee:	6003      	str	r3, [r0, #0]
 801f0f0:	2001      	movs	r0, #1
 801f0f2:	e7e5      	b.n	801f0c0 <_raise_r+0x12>
 801f0f4:	2100      	movs	r1, #0
 801f0f6:	0028      	movs	r0, r5
 801f0f8:	6019      	str	r1, [r3, #0]
 801f0fa:	4790      	blx	r2
 801f0fc:	2000      	movs	r0, #0
 801f0fe:	e7df      	b.n	801f0c0 <_raise_r+0x12>

0801f100 <raise>:
 801f100:	b510      	push	{r4, lr}
 801f102:	4b03      	ldr	r3, [pc, #12]	@ (801f110 <raise+0x10>)
 801f104:	0001      	movs	r1, r0
 801f106:	6818      	ldr	r0, [r3, #0]
 801f108:	f7ff ffd1 	bl	801f0ae <_raise_r>
 801f10c:	bd10      	pop	{r4, pc}
 801f10e:	46c0      	nop			@ (mov r8, r8)
 801f110:	200003c8 	.word	0x200003c8

0801f114 <_kill_r>:
 801f114:	2300      	movs	r3, #0
 801f116:	b570      	push	{r4, r5, r6, lr}
 801f118:	4d06      	ldr	r5, [pc, #24]	@ (801f134 <_kill_r+0x20>)
 801f11a:	0004      	movs	r4, r0
 801f11c:	0008      	movs	r0, r1
 801f11e:	0011      	movs	r1, r2
 801f120:	602b      	str	r3, [r5, #0]
 801f122:	f7eb fe5f 	bl	800ade4 <_kill>
 801f126:	1c43      	adds	r3, r0, #1
 801f128:	d103      	bne.n	801f132 <_kill_r+0x1e>
 801f12a:	682b      	ldr	r3, [r5, #0]
 801f12c:	2b00      	cmp	r3, #0
 801f12e:	d000      	beq.n	801f132 <_kill_r+0x1e>
 801f130:	6023      	str	r3, [r4, #0]
 801f132:	bd70      	pop	{r4, r5, r6, pc}
 801f134:	200038b0 	.word	0x200038b0

0801f138 <_getpid_r>:
 801f138:	b510      	push	{r4, lr}
 801f13a:	f7eb fe4d 	bl	800add8 <_getpid>
 801f13e:	bd10      	pop	{r4, pc}

0801f140 <expf>:
 801f140:	b570      	push	{r4, r5, r6, lr}
 801f142:	1c04      	adds	r4, r0, #0
 801f144:	f000 f8e6 	bl	801f314 <__ieee754_expf>
 801f148:	1c05      	adds	r5, r0, #0
 801f14a:	1c20      	adds	r0, r4, #0
 801f14c:	f000 f83c 	bl	801f1c8 <finitef>
 801f150:	2800      	cmp	r0, #0
 801f152:	d00b      	beq.n	801f16c <expf+0x2c>
 801f154:	490c      	ldr	r1, [pc, #48]	@ (801f188 <expf+0x48>)
 801f156:	1c20      	adds	r0, r4, #0
 801f158:	f7e1 f9fe 	bl	8000558 <__aeabi_fcmpgt>
 801f15c:	2800      	cmp	r0, #0
 801f15e:	d007      	beq.n	801f170 <expf+0x30>
 801f160:	f7fd fa4e 	bl	801c600 <__errno>
 801f164:	25ff      	movs	r5, #255	@ 0xff
 801f166:	2322      	movs	r3, #34	@ 0x22
 801f168:	05ed      	lsls	r5, r5, #23
 801f16a:	6003      	str	r3, [r0, #0]
 801f16c:	1c28      	adds	r0, r5, #0
 801f16e:	bd70      	pop	{r4, r5, r6, pc}
 801f170:	4906      	ldr	r1, [pc, #24]	@ (801f18c <expf+0x4c>)
 801f172:	1c20      	adds	r0, r4, #0
 801f174:	f7e1 f9dc 	bl	8000530 <__aeabi_fcmplt>
 801f178:	2800      	cmp	r0, #0
 801f17a:	d0f7      	beq.n	801f16c <expf+0x2c>
 801f17c:	f7fd fa40 	bl	801c600 <__errno>
 801f180:	2322      	movs	r3, #34	@ 0x22
 801f182:	2500      	movs	r5, #0
 801f184:	6003      	str	r3, [r0, #0]
 801f186:	e7f1      	b.n	801f16c <expf+0x2c>
 801f188:	42b17217 	.word	0x42b17217
 801f18c:	c2cff1b5 	.word	0xc2cff1b5

0801f190 <sqrtf>:
 801f190:	b570      	push	{r4, r5, r6, lr}
 801f192:	1c05      	adds	r5, r0, #0
 801f194:	f000 f822 	bl	801f1dc <__ieee754_sqrtf>
 801f198:	1c29      	adds	r1, r5, #0
 801f19a:	1c04      	adds	r4, r0, #0
 801f19c:	1c28      	adds	r0, r5, #0
 801f19e:	f7e2 f9e1 	bl	8001564 <__aeabi_fcmpun>
 801f1a2:	2800      	cmp	r0, #0
 801f1a4:	d10e      	bne.n	801f1c4 <sqrtf+0x34>
 801f1a6:	2100      	movs	r1, #0
 801f1a8:	1c28      	adds	r0, r5, #0
 801f1aa:	f7e1 f9c1 	bl	8000530 <__aeabi_fcmplt>
 801f1ae:	2800      	cmp	r0, #0
 801f1b0:	d008      	beq.n	801f1c4 <sqrtf+0x34>
 801f1b2:	f7fd fa25 	bl	801c600 <__errno>
 801f1b6:	2321      	movs	r3, #33	@ 0x21
 801f1b8:	2100      	movs	r1, #0
 801f1ba:	6003      	str	r3, [r0, #0]
 801f1bc:	1c08      	adds	r0, r1, #0
 801f1be:	f7e1 fd09 	bl	8000bd4 <__aeabi_fdiv>
 801f1c2:	1c04      	adds	r4, r0, #0
 801f1c4:	1c20      	adds	r0, r4, #0
 801f1c6:	bd70      	pop	{r4, r5, r6, pc}

0801f1c8 <finitef>:
 801f1c8:	22ff      	movs	r2, #255	@ 0xff
 801f1ca:	0043      	lsls	r3, r0, #1
 801f1cc:	085b      	lsrs	r3, r3, #1
 801f1ce:	2001      	movs	r0, #1
 801f1d0:	05d2      	lsls	r2, r2, #23
 801f1d2:	4293      	cmp	r3, r2
 801f1d4:	db00      	blt.n	801f1d8 <finitef+0x10>
 801f1d6:	2000      	movs	r0, #0
 801f1d8:	4770      	bx	lr
	...

0801f1dc <__ieee754_sqrtf>:
 801f1dc:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801f1de:	0003      	movs	r3, r0
 801f1e0:	0042      	lsls	r2, r0, #1
 801f1e2:	1c04      	adds	r4, r0, #0
 801f1e4:	20ff      	movs	r0, #255	@ 0xff
 801f1e6:	0852      	lsrs	r2, r2, #1
 801f1e8:	05c0      	lsls	r0, r0, #23
 801f1ea:	4282      	cmp	r2, r0
 801f1ec:	d30a      	bcc.n	801f204 <__ieee754_sqrtf+0x28>
 801f1ee:	1c21      	adds	r1, r4, #0
 801f1f0:	1c20      	adds	r0, r4, #0
 801f1f2:	f7e1 fed5 	bl	8000fa0 <__aeabi_fmul>
 801f1f6:	1c01      	adds	r1, r0, #0
 801f1f8:	1c20      	adds	r0, r4, #0
 801f1fa:	f7e1 fb61 	bl	80008c0 <__aeabi_fadd>
 801f1fe:	1c04      	adds	r4, r0, #0
 801f200:	1c20      	adds	r0, r4, #0
 801f202:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801f204:	2a00      	cmp	r2, #0
 801f206:	d0fb      	beq.n	801f200 <__ieee754_sqrtf+0x24>
 801f208:	2c00      	cmp	r4, #0
 801f20a:	da07      	bge.n	801f21c <__ieee754_sqrtf+0x40>
 801f20c:	1c21      	adds	r1, r4, #0
 801f20e:	1c20      	adds	r0, r4, #0
 801f210:	f7e2 f804 	bl	800121c <__aeabi_fsub>
 801f214:	1c01      	adds	r1, r0, #0
 801f216:	f7e1 fcdd 	bl	8000bd4 <__aeabi_fdiv>
 801f21a:	e7f0      	b.n	801f1fe <__ieee754_sqrtf+0x22>
 801f21c:	0022      	movs	r2, r4
 801f21e:	15e1      	asrs	r1, r4, #23
 801f220:	4002      	ands	r2, r0
 801f222:	4204      	tst	r4, r0
 801f224:	d046      	beq.n	801f2b4 <__ieee754_sqrtf+0xd8>
 801f226:	2280      	movs	r2, #128	@ 0x80
 801f228:	000f      	movs	r7, r1
 801f22a:	025b      	lsls	r3, r3, #9
 801f22c:	0a5b      	lsrs	r3, r3, #9
 801f22e:	0412      	lsls	r2, r2, #16
 801f230:	3f7f      	subs	r7, #127	@ 0x7f
 801f232:	4313      	orrs	r3, r2
 801f234:	07c9      	lsls	r1, r1, #31
 801f236:	d400      	bmi.n	801f23a <__ieee754_sqrtf+0x5e>
 801f238:	005b      	lsls	r3, r3, #1
 801f23a:	2400      	movs	r4, #0
 801f23c:	2180      	movs	r1, #128	@ 0x80
 801f23e:	2019      	movs	r0, #25
 801f240:	0026      	movs	r6, r4
 801f242:	107f      	asrs	r7, r7, #1
 801f244:	005b      	lsls	r3, r3, #1
 801f246:	0449      	lsls	r1, r1, #17
 801f248:	1875      	adds	r5, r6, r1
 801f24a:	001a      	movs	r2, r3
 801f24c:	429d      	cmp	r5, r3
 801f24e:	dc02      	bgt.n	801f256 <__ieee754_sqrtf+0x7a>
 801f250:	186e      	adds	r6, r5, r1
 801f252:	1b5a      	subs	r2, r3, r5
 801f254:	1864      	adds	r4, r4, r1
 801f256:	3801      	subs	r0, #1
 801f258:	0053      	lsls	r3, r2, #1
 801f25a:	0849      	lsrs	r1, r1, #1
 801f25c:	2800      	cmp	r0, #0
 801f25e:	d1f3      	bne.n	801f248 <__ieee754_sqrtf+0x6c>
 801f260:	2a00      	cmp	r2, #0
 801f262:	d019      	beq.n	801f298 <__ieee754_sqrtf+0xbc>
 801f264:	4d17      	ldr	r5, [pc, #92]	@ (801f2c4 <__ieee754_sqrtf+0xe8>)
 801f266:	4e18      	ldr	r6, [pc, #96]	@ (801f2c8 <__ieee754_sqrtf+0xec>)
 801f268:	6828      	ldr	r0, [r5, #0]
 801f26a:	6831      	ldr	r1, [r6, #0]
 801f26c:	682b      	ldr	r3, [r5, #0]
 801f26e:	9301      	str	r3, [sp, #4]
 801f270:	f7e1 ffd4 	bl	800121c <__aeabi_fsub>
 801f274:	1c01      	adds	r1, r0, #0
 801f276:	9801      	ldr	r0, [sp, #4]
 801f278:	f7e1 f964 	bl	8000544 <__aeabi_fcmple>
 801f27c:	2800      	cmp	r0, #0
 801f27e:	d00b      	beq.n	801f298 <__ieee754_sqrtf+0xbc>
 801f280:	6828      	ldr	r0, [r5, #0]
 801f282:	6831      	ldr	r1, [r6, #0]
 801f284:	f7e1 fb1c 	bl	80008c0 <__aeabi_fadd>
 801f288:	682d      	ldr	r5, [r5, #0]
 801f28a:	1c01      	adds	r1, r0, #0
 801f28c:	1c28      	adds	r0, r5, #0
 801f28e:	f7e1 f94f 	bl	8000530 <__aeabi_fcmplt>
 801f292:	2800      	cmp	r0, #0
 801f294:	d011      	beq.n	801f2ba <__ieee754_sqrtf+0xde>
 801f296:	3402      	adds	r4, #2
 801f298:	23fc      	movs	r3, #252	@ 0xfc
 801f29a:	1064      	asrs	r4, r4, #1
 801f29c:	059b      	lsls	r3, r3, #22
 801f29e:	18e3      	adds	r3, r4, r3
 801f2a0:	05fc      	lsls	r4, r7, #23
 801f2a2:	18e4      	adds	r4, r4, r3
 801f2a4:	e7ac      	b.n	801f200 <__ieee754_sqrtf+0x24>
 801f2a6:	005b      	lsls	r3, r3, #1
 801f2a8:	3201      	adds	r2, #1
 801f2aa:	4203      	tst	r3, r0
 801f2ac:	d0fb      	beq.n	801f2a6 <__ieee754_sqrtf+0xca>
 801f2ae:	3a01      	subs	r2, #1
 801f2b0:	1a89      	subs	r1, r1, r2
 801f2b2:	e7b8      	b.n	801f226 <__ieee754_sqrtf+0x4a>
 801f2b4:	2080      	movs	r0, #128	@ 0x80
 801f2b6:	0400      	lsls	r0, r0, #16
 801f2b8:	e7f7      	b.n	801f2aa <__ieee754_sqrtf+0xce>
 801f2ba:	2301      	movs	r3, #1
 801f2bc:	3401      	adds	r4, #1
 801f2be:	439c      	bics	r4, r3
 801f2c0:	e7ea      	b.n	801f298 <__ieee754_sqrtf+0xbc>
 801f2c2:	46c0      	nop			@ (mov r8, r8)
 801f2c4:	2000041c 	.word	0x2000041c
 801f2c8:	20000418 	.word	0x20000418

0801f2cc <roundf>:
 801f2cc:	0dc3      	lsrs	r3, r0, #23
 801f2ce:	b2db      	uxtb	r3, r3
 801f2d0:	3b7f      	subs	r3, #127	@ 0x7f
 801f2d2:	0002      	movs	r2, r0
 801f2d4:	b510      	push	{r4, lr}
 801f2d6:	2b16      	cmp	r3, #22
 801f2d8:	dc13      	bgt.n	801f302 <roundf+0x36>
 801f2da:	2b00      	cmp	r3, #0
 801f2dc:	da07      	bge.n	801f2ee <roundf+0x22>
 801f2de:	0fc2      	lsrs	r2, r0, #31
 801f2e0:	07d0      	lsls	r0, r2, #31
 801f2e2:	3301      	adds	r3, #1
 801f2e4:	d102      	bne.n	801f2ec <roundf+0x20>
 801f2e6:	23fe      	movs	r3, #254	@ 0xfe
 801f2e8:	059b      	lsls	r3, r3, #22
 801f2ea:	4318      	orrs	r0, r3
 801f2ec:	bd10      	pop	{r4, pc}
 801f2ee:	4908      	ldr	r1, [pc, #32]	@ (801f310 <roundf+0x44>)
 801f2f0:	4119      	asrs	r1, r3
 801f2f2:	4208      	tst	r0, r1
 801f2f4:	d0fa      	beq.n	801f2ec <roundf+0x20>
 801f2f6:	2080      	movs	r0, #128	@ 0x80
 801f2f8:	03c0      	lsls	r0, r0, #15
 801f2fa:	4118      	asrs	r0, r3
 801f2fc:	1880      	adds	r0, r0, r2
 801f2fe:	4388      	bics	r0, r1
 801f300:	e7f4      	b.n	801f2ec <roundf+0x20>
 801f302:	2b80      	cmp	r3, #128	@ 0x80
 801f304:	d1f2      	bne.n	801f2ec <roundf+0x20>
 801f306:	1c01      	adds	r1, r0, #0
 801f308:	f7e1 fada 	bl	80008c0 <__aeabi_fadd>
 801f30c:	e7ee      	b.n	801f2ec <roundf+0x20>
 801f30e:	46c0      	nop			@ (mov r8, r8)
 801f310:	007fffff 	.word	0x007fffff

0801f314 <__ieee754_expf>:
 801f314:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 801f316:	21ff      	movs	r1, #255	@ 0xff
 801f318:	0043      	lsls	r3, r0, #1
 801f31a:	1c04      	adds	r4, r0, #0
 801f31c:	085b      	lsrs	r3, r3, #1
 801f31e:	05c9      	lsls	r1, r1, #23
 801f320:	428b      	cmp	r3, r1
 801f322:	d904      	bls.n	801f32e <__ieee754_expf+0x1a>
 801f324:	1c01      	adds	r1, r0, #0
 801f326:	1c20      	adds	r0, r4, #0
 801f328:	f7e1 faca 	bl	80008c0 <__aeabi_fadd>
 801f32c:	e00d      	b.n	801f34a <__ieee754_expf+0x36>
 801f32e:	0fc6      	lsrs	r6, r0, #31
 801f330:	428b      	cmp	r3, r1
 801f332:	d104      	bne.n	801f33e <__ieee754_expf+0x2a>
 801f334:	2e00      	cmp	r6, #0
 801f336:	d000      	beq.n	801f33a <__ieee754_expf+0x26>
 801f338:	e0ba      	b.n	801f4b0 <__ieee754_expf+0x19c>
 801f33a:	1c20      	adds	r0, r4, #0
 801f33c:	bdfe      	pop	{r1, r2, r3, r4, r5, r6, r7, pc}
 801f33e:	495d      	ldr	r1, [pc, #372]	@ (801f4b4 <__ieee754_expf+0x1a0>)
 801f340:	4288      	cmp	r0, r1
 801f342:	dd04      	ble.n	801f34e <__ieee754_expf+0x3a>
 801f344:	2000      	movs	r0, #0
 801f346:	f000 f8f1 	bl	801f52c <__math_oflowf>
 801f34a:	1c04      	adds	r4, r0, #0
 801f34c:	e7f5      	b.n	801f33a <__ieee754_expf+0x26>
 801f34e:	2800      	cmp	r0, #0
 801f350:	da06      	bge.n	801f360 <__ieee754_expf+0x4c>
 801f352:	4a59      	ldr	r2, [pc, #356]	@ (801f4b8 <__ieee754_expf+0x1a4>)
 801f354:	4293      	cmp	r3, r2
 801f356:	d903      	bls.n	801f360 <__ieee754_expf+0x4c>
 801f358:	2000      	movs	r0, #0
 801f35a:	f000 f8e1 	bl	801f520 <__math_uflowf>
 801f35e:	e7f4      	b.n	801f34a <__ieee754_expf+0x36>
 801f360:	4a56      	ldr	r2, [pc, #344]	@ (801f4bc <__ieee754_expf+0x1a8>)
 801f362:	4293      	cmp	r3, r2
 801f364:	d96e      	bls.n	801f444 <__ieee754_expf+0x130>
 801f366:	4a56      	ldr	r2, [pc, #344]	@ (801f4c0 <__ieee754_expf+0x1ac>)
 801f368:	00b5      	lsls	r5, r6, #2
 801f36a:	4293      	cmp	r3, r2
 801f36c:	d84e      	bhi.n	801f40c <__ieee754_expf+0xf8>
 801f36e:	4b55      	ldr	r3, [pc, #340]	@ (801f4c4 <__ieee754_expf+0x1b0>)
 801f370:	1c20      	adds	r0, r4, #0
 801f372:	5959      	ldr	r1, [r3, r5]
 801f374:	f7e1 ff52 	bl	800121c <__aeabi_fsub>
 801f378:	4b53      	ldr	r3, [pc, #332]	@ (801f4c8 <__ieee754_expf+0x1b4>)
 801f37a:	1c07      	adds	r7, r0, #0
 801f37c:	595b      	ldr	r3, [r3, r5]
 801f37e:	2501      	movs	r5, #1
 801f380:	1bad      	subs	r5, r5, r6
 801f382:	9300      	str	r3, [sp, #0]
 801f384:	1bad      	subs	r5, r5, r6
 801f386:	9900      	ldr	r1, [sp, #0]
 801f388:	1c38      	adds	r0, r7, #0
 801f38a:	f7e1 ff47 	bl	800121c <__aeabi_fsub>
 801f38e:	1c04      	adds	r4, r0, #0
 801f390:	1c21      	adds	r1, r4, #0
 801f392:	1c20      	adds	r0, r4, #0
 801f394:	f7e1 fe04 	bl	8000fa0 <__aeabi_fmul>
 801f398:	494c      	ldr	r1, [pc, #304]	@ (801f4cc <__ieee754_expf+0x1b8>)
 801f39a:	1c06      	adds	r6, r0, #0
 801f39c:	f7e1 fe00 	bl	8000fa0 <__aeabi_fmul>
 801f3a0:	494b      	ldr	r1, [pc, #300]	@ (801f4d0 <__ieee754_expf+0x1bc>)
 801f3a2:	f7e1 ff3b 	bl	800121c <__aeabi_fsub>
 801f3a6:	1c31      	adds	r1, r6, #0
 801f3a8:	f7e1 fdfa 	bl	8000fa0 <__aeabi_fmul>
 801f3ac:	4949      	ldr	r1, [pc, #292]	@ (801f4d4 <__ieee754_expf+0x1c0>)
 801f3ae:	f7e1 fa87 	bl	80008c0 <__aeabi_fadd>
 801f3b2:	1c31      	adds	r1, r6, #0
 801f3b4:	f7e1 fdf4 	bl	8000fa0 <__aeabi_fmul>
 801f3b8:	4947      	ldr	r1, [pc, #284]	@ (801f4d8 <__ieee754_expf+0x1c4>)
 801f3ba:	f7e1 ff2f 	bl	800121c <__aeabi_fsub>
 801f3be:	1c31      	adds	r1, r6, #0
 801f3c0:	f7e1 fdee 	bl	8000fa0 <__aeabi_fmul>
 801f3c4:	4945      	ldr	r1, [pc, #276]	@ (801f4dc <__ieee754_expf+0x1c8>)
 801f3c6:	f7e1 fa7b 	bl	80008c0 <__aeabi_fadd>
 801f3ca:	1c31      	adds	r1, r6, #0
 801f3cc:	f7e1 fde8 	bl	8000fa0 <__aeabi_fmul>
 801f3d0:	1c01      	adds	r1, r0, #0
 801f3d2:	1c20      	adds	r0, r4, #0
 801f3d4:	f7e1 ff22 	bl	800121c <__aeabi_fsub>
 801f3d8:	1c01      	adds	r1, r0, #0
 801f3da:	1c06      	adds	r6, r0, #0
 801f3dc:	1c20      	adds	r0, r4, #0
 801f3de:	f7e1 fddf 	bl	8000fa0 <__aeabi_fmul>
 801f3e2:	9001      	str	r0, [sp, #4]
 801f3e4:	2d00      	cmp	r5, #0
 801f3e6:	d140      	bne.n	801f46a <__ieee754_expf+0x156>
 801f3e8:	2180      	movs	r1, #128	@ 0x80
 801f3ea:	1c30      	adds	r0, r6, #0
 801f3ec:	05c9      	lsls	r1, r1, #23
 801f3ee:	f7e1 ff15 	bl	800121c <__aeabi_fsub>
 801f3f2:	1c01      	adds	r1, r0, #0
 801f3f4:	9801      	ldr	r0, [sp, #4]
 801f3f6:	f7e1 fbed 	bl	8000bd4 <__aeabi_fdiv>
 801f3fa:	1c21      	adds	r1, r4, #0
 801f3fc:	f7e1 ff0e 	bl	800121c <__aeabi_fsub>
 801f400:	1c01      	adds	r1, r0, #0
 801f402:	20fe      	movs	r0, #254	@ 0xfe
 801f404:	0580      	lsls	r0, r0, #22
 801f406:	f7e1 ff09 	bl	800121c <__aeabi_fsub>
 801f40a:	e79e      	b.n	801f34a <__ieee754_expf+0x36>
 801f40c:	4934      	ldr	r1, [pc, #208]	@ (801f4e0 <__ieee754_expf+0x1cc>)
 801f40e:	1c20      	adds	r0, r4, #0
 801f410:	f7e1 fdc6 	bl	8000fa0 <__aeabi_fmul>
 801f414:	4b33      	ldr	r3, [pc, #204]	@ (801f4e4 <__ieee754_expf+0x1d0>)
 801f416:	5959      	ldr	r1, [r3, r5]
 801f418:	f7e1 fa52 	bl	80008c0 <__aeabi_fadd>
 801f41c:	f7e2 f8b8 	bl	8001590 <__aeabi_f2iz>
 801f420:	0005      	movs	r5, r0
 801f422:	f7e2 f8d5 	bl	80015d0 <__aeabi_i2f>
 801f426:	4930      	ldr	r1, [pc, #192]	@ (801f4e8 <__ieee754_expf+0x1d4>)
 801f428:	1c06      	adds	r6, r0, #0
 801f42a:	f7e1 fdb9 	bl	8000fa0 <__aeabi_fmul>
 801f42e:	1c01      	adds	r1, r0, #0
 801f430:	1c20      	adds	r0, r4, #0
 801f432:	f7e1 fef3 	bl	800121c <__aeabi_fsub>
 801f436:	492d      	ldr	r1, [pc, #180]	@ (801f4ec <__ieee754_expf+0x1d8>)
 801f438:	1c07      	adds	r7, r0, #0
 801f43a:	1c30      	adds	r0, r6, #0
 801f43c:	f7e1 fdb0 	bl	8000fa0 <__aeabi_fmul>
 801f440:	9000      	str	r0, [sp, #0]
 801f442:	e7a0      	b.n	801f386 <__ieee754_expf+0x72>
 801f444:	22d0      	movs	r2, #208	@ 0xd0
 801f446:	0592      	lsls	r2, r2, #22
 801f448:	4293      	cmp	r3, r2
 801f44a:	d20c      	bcs.n	801f466 <__ieee754_expf+0x152>
 801f44c:	4928      	ldr	r1, [pc, #160]	@ (801f4f0 <__ieee754_expf+0x1dc>)
 801f44e:	1c20      	adds	r0, r4, #0
 801f450:	f7e1 fa36 	bl	80008c0 <__aeabi_fadd>
 801f454:	21fe      	movs	r1, #254	@ 0xfe
 801f456:	0589      	lsls	r1, r1, #22
 801f458:	f7e1 f87e 	bl	8000558 <__aeabi_fcmpgt>
 801f45c:	1e05      	subs	r5, r0, #0
 801f45e:	d097      	beq.n	801f390 <__ieee754_expf+0x7c>
 801f460:	21fe      	movs	r1, #254	@ 0xfe
 801f462:	0589      	lsls	r1, r1, #22
 801f464:	e75f      	b.n	801f326 <__ieee754_expf+0x12>
 801f466:	2500      	movs	r5, #0
 801f468:	e792      	b.n	801f390 <__ieee754_expf+0x7c>
 801f46a:	2080      	movs	r0, #128	@ 0x80
 801f46c:	1c31      	adds	r1, r6, #0
 801f46e:	05c0      	lsls	r0, r0, #23
 801f470:	f7e1 fed4 	bl	800121c <__aeabi_fsub>
 801f474:	1c01      	adds	r1, r0, #0
 801f476:	9801      	ldr	r0, [sp, #4]
 801f478:	f7e1 fbac 	bl	8000bd4 <__aeabi_fdiv>
 801f47c:	1c01      	adds	r1, r0, #0
 801f47e:	9800      	ldr	r0, [sp, #0]
 801f480:	f7e1 fecc 	bl	800121c <__aeabi_fsub>
 801f484:	1c39      	adds	r1, r7, #0
 801f486:	f7e1 fec9 	bl	800121c <__aeabi_fsub>
 801f48a:	1c01      	adds	r1, r0, #0
 801f48c:	20fe      	movs	r0, #254	@ 0xfe
 801f48e:	0580      	lsls	r0, r0, #22
 801f490:	f7e1 fec4 	bl	800121c <__aeabi_fsub>
 801f494:	002b      	movs	r3, r5
 801f496:	337d      	adds	r3, #125	@ 0x7d
 801f498:	db02      	blt.n	801f4a0 <__ieee754_expf+0x18c>
 801f49a:	05ec      	lsls	r4, r5, #23
 801f49c:	1824      	adds	r4, r4, r0
 801f49e:	e74c      	b.n	801f33a <__ieee754_expf+0x26>
 801f4a0:	21d8      	movs	r1, #216	@ 0xd8
 801f4a2:	3564      	adds	r5, #100	@ 0x64
 801f4a4:	05ed      	lsls	r5, r5, #23
 801f4a6:	1828      	adds	r0, r5, r0
 801f4a8:	0509      	lsls	r1, r1, #20
 801f4aa:	f7e1 fd79 	bl	8000fa0 <__aeabi_fmul>
 801f4ae:	e74c      	b.n	801f34a <__ieee754_expf+0x36>
 801f4b0:	2400      	movs	r4, #0
 801f4b2:	e742      	b.n	801f33a <__ieee754_expf+0x26>
 801f4b4:	42b17217 	.word	0x42b17217
 801f4b8:	42cff1b5 	.word	0x42cff1b5
 801f4bc:	3eb17218 	.word	0x3eb17218
 801f4c0:	3f851591 	.word	0x3f851591
 801f4c4:	08021380 	.word	0x08021380
 801f4c8:	08021378 	.word	0x08021378
 801f4cc:	3331bb4c 	.word	0x3331bb4c
 801f4d0:	35ddea0e 	.word	0x35ddea0e
 801f4d4:	388ab355 	.word	0x388ab355
 801f4d8:	3b360b61 	.word	0x3b360b61
 801f4dc:	3e2aaaab 	.word	0x3e2aaaab
 801f4e0:	3fb8aa3b 	.word	0x3fb8aa3b
 801f4e4:	08021388 	.word	0x08021388
 801f4e8:	3f317180 	.word	0x3f317180
 801f4ec:	3717f7d1 	.word	0x3717f7d1
 801f4f0:	7149f2ca 	.word	0x7149f2ca

0801f4f4 <with_errnof>:
 801f4f4:	b570      	push	{r4, r5, r6, lr}
 801f4f6:	000d      	movs	r5, r1
 801f4f8:	1c04      	adds	r4, r0, #0
 801f4fa:	f7fd f881 	bl	801c600 <__errno>
 801f4fe:	6005      	str	r5, [r0, #0]
 801f500:	1c20      	adds	r0, r4, #0
 801f502:	bd70      	pop	{r4, r5, r6, pc}

0801f504 <xflowf>:
 801f504:	b510      	push	{r4, lr}
 801f506:	1c0b      	adds	r3, r1, #0
 801f508:	2800      	cmp	r0, #0
 801f50a:	d002      	beq.n	801f512 <xflowf+0xe>
 801f50c:	2380      	movs	r3, #128	@ 0x80
 801f50e:	061b      	lsls	r3, r3, #24
 801f510:	18cb      	adds	r3, r1, r3
 801f512:	1c18      	adds	r0, r3, #0
 801f514:	f7e1 fd44 	bl	8000fa0 <__aeabi_fmul>
 801f518:	2122      	movs	r1, #34	@ 0x22
 801f51a:	f7ff ffeb 	bl	801f4f4 <with_errnof>
 801f51e:	bd10      	pop	{r4, pc}

0801f520 <__math_uflowf>:
 801f520:	2180      	movs	r1, #128	@ 0x80
 801f522:	b510      	push	{r4, lr}
 801f524:	0549      	lsls	r1, r1, #21
 801f526:	f7ff ffed 	bl	801f504 <xflowf>
 801f52a:	bd10      	pop	{r4, pc}

0801f52c <__math_oflowf>:
 801f52c:	21e0      	movs	r1, #224	@ 0xe0
 801f52e:	b510      	push	{r4, lr}
 801f530:	05c9      	lsls	r1, r1, #23
 801f532:	f7ff ffe7 	bl	801f504 <xflowf>
 801f536:	bd10      	pop	{r4, pc}

0801f538 <_init>:
 801f538:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f53a:	46c0      	nop			@ (mov r8, r8)
 801f53c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f53e:	bc08      	pop	{r3}
 801f540:	469e      	mov	lr, r3
 801f542:	4770      	bx	lr

0801f544 <_fini>:
 801f544:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 801f546:	46c0      	nop			@ (mov r8, r8)
 801f548:	bcf8      	pop	{r3, r4, r5, r6, r7}
 801f54a:	bc08      	pop	{r3}
 801f54c:	469e      	mov	lr, r3
 801f54e:	4770      	bx	lr
